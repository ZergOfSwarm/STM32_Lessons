
FreeRTOS_RTC_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b138  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800b2c8  0800b2c8  0001b2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b944  0800b944  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b94c  0800b94c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b94c  0800b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b954  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020244  2**0
                  CONTENTS
 10 .bss          00004c80  20000248  20000248  00020248  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004ec8  20004ec8  00020248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c655  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e6  00000000  00000000  0003c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  000401b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a8  00000000  00000000  000418b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c60  00000000  00000000  00042e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ef9  00000000  00000000  00047ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd392  00000000  00000000  000609b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007868  00000000  00000000  0013dd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2b0 	.word	0x0800b2b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800b2b0 	.word	0x0800b2b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ec8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ecc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d013      	beq.n	8000f00 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ee0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee8:	e000      	b.n	8000eec <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f9      	beq.n	8000eea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ef6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_write>:
void StartDefaultTask(void *argument);
void Start_RTC_Task(void *argument);
void Start_Timers_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	2332      	movs	r3, #50	; 0x32
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <_write+0x48>)
 8000f26:	f002 fe74 	bl	8003c12 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e009      	b.n	8000f44 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffc1 	bl	8000ec0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf1      	blt.n	8000f30 <_write+0x20>
	}
	return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000035c 	.word	0x2000035c

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fdb6 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f836 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f958 	bl	800121c <MX_GPIO_Init>
  MX_RTC_Init();
 8000f6c:	f000 f89e 	bl	80010ac <MX_RTC_Init>
  MX_USART6_UART_Init();
 8000f70:	f000 f92a 	bl	80011c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f74:	f003 fa06 	bl	8004384 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <main+0x54>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <main+0x58>)
 8000f7e:	f003 fa4b 	bl	8004418 <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <main+0x5c>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* creation of my_RTC_Task */
  my_RTC_TaskHandle = osThreadNew(Start_RTC_Task, NULL, &my_RTC_Task_attributes);
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <main+0x60>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <main+0x64>)
 8000f8e:	f003 fa43 	bl	8004418 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <main+0x68>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of my_Timers_Task */
  my_Timers_TaskHandle = osThreadNew(Start_Timers_Task, NULL, &my_Timers_Task_attributes);
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <main+0x6c>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <main+0x70>)
 8000f9e:	f003 fa3b 	bl	8004418 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <main+0x74>)
 8000fa6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa8:	f003 fa10 	bl	80043cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <main+0x50>
 8000fae:	bf00      	nop
 8000fb0:	0800b3cc 	.word	0x0800b3cc
 8000fb4:	0800135d 	.word	0x0800135d
 8000fb8:	200003a0 	.word	0x200003a0
 8000fbc:	0800b3f0 	.word	0x0800b3f0
 8000fc0:	0800136d 	.word	0x0800136d
 8000fc4:	200003a4 	.word	0x200003a4
 8000fc8:	0800b414 	.word	0x0800b414
 8000fcc:	08001469 	.word	0x08001469
 8000fd0:	200003a8 	.word	0x200003a8

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f006 f898 	bl	8007118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <SystemClock_Config+0xd0>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <SystemClock_Config+0xd0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <SystemClock_Config+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <SystemClock_Config+0xd4>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <SystemClock_Config+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001030:	2305      	movs	r3, #5
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800104c:	23a8      	movs	r3, #168	; 0xa8
 800104e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001054:	2304      	movs	r3, #4
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	4618      	mov	r0, r3
 800105e:	f001 f811 	bl	8002084 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001068:	f000 fafa 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001078:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2105      	movs	r1, #5
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fa72 	bl	8002574 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001096:	f000 fae3 	bl	8001660 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2228      	movs	r2, #40	; 0x28
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 f823 	bl	8007118 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <MX_RTC_Init+0x114>)
 80010d4:	4a3b      	ldr	r2, [pc, #236]	; (80011c4 <MX_RTC_Init+0x118>)
 80010d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <MX_RTC_Init+0x114>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <MX_RTC_Init+0x114>)
 80010e0:	227f      	movs	r2, #127	; 0x7f
 80010e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MX_RTC_Init+0x114>)
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <MX_RTC_Init+0x114>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MX_RTC_Init+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <MX_RTC_Init+0x114>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010fc:	4830      	ldr	r0, [pc, #192]	; (80011c0 <MX_RTC_Init+0x114>)
 80010fe:	f001 fd6d 	bl	8002bdc <HAL_RTC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001108:	f000 faaa 	bl	8001660 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800110c:	230a      	movs	r3, #10
 800110e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 15;
 8001112:	230f      	movs	r3, #15
 8001114:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4824      	ldr	r0, [pc, #144]	; (80011c0 <MX_RTC_Init+0x114>)
 8001130:	f001 fdca 	bl	8002cc8 <HAL_RTC_SetTime>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800113a:	f000 fa91 	bl	8001660 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8001144:	2308      	movs	r3, #8
 8001146:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 8;
 800114a:	2308      	movs	r3, #8
 800114c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8001150:	2316      	movs	r3, #22
 8001152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_RTC_Init+0x114>)
 8001160:	f001 feaa 	bl	8002eb8 <HAL_RTC_SetDate>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800116a:	f000 fa79 	bl	8001660 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 10;
 800116e:	230a      	movs	r3, #10
 8001170:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 7;
 8001176:	2307      	movs	r3, #7
 8001178:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800118a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_RTC_Init+0x114>)
 80011a8:	f001 ff5a 	bl	8003060 <HAL_RTC_SetAlarm_IT>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80011b2:	f000 fa55 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3740      	adds	r7, #64	; 0x40
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000033c 	.word	0x2000033c
 80011c4:	40002800 	.word	0x40002800

080011c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART6_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART6_UART_Init+0x4c>)
 8001200:	f002 fcba 	bl	8003b78 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 fa29 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000035c 	.word	0x2000035c
 8001218:	40011400 	.word	0x40011400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_GPIO_Init+0xe0>)
 80012a8:	f000 fed2 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2101      	movs	r1, #1
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_GPIO_Init+0xe4>)
 80012b2:	f000 fecd 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xe0>)
 80012ce:	f000 fd23 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0xe4>)
 80012ea:	f000 fd15 	bl	8001d18 <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020c00 	.word	0x40020c00

08001304 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
        snprintf(trans_str, 63, "++++++++++ Alarm_A +++++++++\n");
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_RTC_AlarmAEventCallback+0x44>)
 800130e:	213f      	movs	r1, #63	; 0x3f
 8001310:	480e      	ldr	r0, [pc, #56]	; (800134c <HAL_RTC_AlarmAEventCallback+0x48>)
 8001312:	f006 ffb5 	bl	8008280 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <HAL_RTC_AlarmAEventCallback+0x48>)
 8001318:	f7fe ff5a 	bl	80001d0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <HAL_RTC_AlarmAEventCallback+0x48>)
 8001326:	480a      	ldr	r0, [pc, #40]	; (8001350 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001328:	f002 fc73 	bl	8003c12 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2101      	movs	r1, #1
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_RTC_AlarmAEventCallback+0x50>)
 8001332:	f000 fe8d 	bl	8002050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2102      	movs	r1, #2
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <HAL_RTC_AlarmAEventCallback+0x54>)
 800133c:	f000 fe88 	bl	8002050 <HAL_GPIO_WritePin>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800b328 	.word	0x0800b328
 800134c:	200003ec 	.word	0x200003ec
 8001350:	2000035c 	.word	0x2000035c
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40020000 	.word	0x40020000

0800135c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f003 f8e9 	bl	800453c <osDelay>
 800136a:	e7fb      	b.n	8001364 <StartDefaultTask+0x8>

0800136c <Start_RTC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC_Task */
void Start_RTC_Task(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RTC_Task */
  /* Infinite loop */
  for(;;)
  {
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001374:	2200      	movs	r2, #0
 8001376:	4933      	ldr	r1, [pc, #204]	; (8001444 <Start_RTC_Task+0xd8>)
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <Start_RTC_Task+0xdc>)
 800137a:	f001 fd3f 	bl	8002dfc <HAL_RTC_GetTime>
      snprintf(trans_str, 63, "Curent time is %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <Start_RTC_Task+0xd8>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <Start_RTC_Task+0xd8>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	461a      	mov	r2, r3
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <Start_RTC_Task+0xd8>)
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	460b      	mov	r3, r1
 8001394:	4a2d      	ldr	r2, [pc, #180]	; (800144c <Start_RTC_Task+0xe0>)
 8001396:	213f      	movs	r1, #63	; 0x3f
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <Start_RTC_Task+0xe4>)
 800139a:	f006 ff71 	bl	8008280 <sniprintf>
      //snprintf(trans_str, 63, "Time %d:%d:%d:%lu\n", sTime.Hours, sTime.Minutes, sTime.Seconds, sTime.SubSeconds);
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800139e:	482c      	ldr	r0, [pc, #176]	; (8001450 <Start_RTC_Task+0xe4>)
 80013a0:	f7fe ff16 	bl	80001d0 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	4928      	ldr	r1, [pc, #160]	; (8001450 <Start_RTC_Task+0xe4>)
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <Start_RTC_Task+0xe8>)
 80013b0:	f002 fc2f 	bl	8003c12 <HAL_UART_Transmit>

      HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80013b4:	2200      	movs	r2, #0
 80013b6:	4928      	ldr	r1, [pc, #160]	; (8001458 <Start_RTC_Task+0xec>)
 80013b8:	4823      	ldr	r0, [pc, #140]	; (8001448 <Start_RTC_Task+0xdc>)
 80013ba:	f001 fe01 	bl	8002fc0 <HAL_RTC_GetDate>
      snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <Start_RTC_Task+0xec>)
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <Start_RTC_Task+0xec>)
 80013c6:	785b      	ldrb	r3, [r3, #1]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <Start_RTC_Task+0xec>)
 80013cc:	78db      	ldrb	r3, [r3, #3]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	460b      	mov	r3, r1
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <Start_RTC_Task+0xf0>)
 80013d6:	213f      	movs	r1, #63	; 0x3f
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <Start_RTC_Task+0xe4>)
 80013da:	f006 ff51 	bl	8008280 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <Start_RTC_Task+0xe4>)
 80013e0:	f7fe fef6 	bl	80001d0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <Start_RTC_Task+0xe4>)
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <Start_RTC_Task+0xe8>)
 80013f0:	f002 fc0f 	bl	8003c12 <HAL_UART_Transmit>

      HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 80013f4:	2300      	movs	r3, #0
 80013f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fa:	4919      	ldr	r1, [pc, #100]	; (8001460 <Start_RTC_Task+0xf4>)
 80013fc:	4812      	ldr	r0, [pc, #72]	; (8001448 <Start_RTC_Task+0xdc>)
 80013fe:	f001 ff71 	bl	80032e4 <HAL_RTC_GetAlarm>
      snprintf(trans_str, 63, "Settings of alarm %d:%d:%d\n", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <Start_RTC_Task+0xf4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <Start_RTC_Task+0xf4>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	461a      	mov	r2, r3
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <Start_RTC_Task+0xf4>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	460b      	mov	r3, r1
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <Start_RTC_Task+0xf8>)
 800141a:	213f      	movs	r1, #63	; 0x3f
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <Start_RTC_Task+0xe4>)
 800141e:	f006 ff2f 	bl	8008280 <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <Start_RTC_Task+0xe4>)
 8001424:	f7fe fed4 	bl	80001d0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <Start_RTC_Task+0xe4>)
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <Start_RTC_Task+0xe8>)
 8001434:	f002 fbed 	bl	8003c12 <HAL_UART_Transmit>

    osDelay(1000);
 8001438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143c:	f003 f87e 	bl	800453c <osDelay>
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8001440:	e798      	b.n	8001374 <Start_RTC_Task+0x8>
 8001442:	bf00      	nop
 8001444:	200003ac 	.word	0x200003ac
 8001448:	2000033c 	.word	0x2000033c
 800144c:	0800b348 	.word	0x0800b348
 8001450:	200003ec 	.word	0x200003ec
 8001454:	2000035c 	.word	0x2000035c
 8001458:	200003c0 	.word	0x200003c0
 800145c:	0800b364 	.word	0x0800b364
 8001460:	200003c4 	.word	0x200003c4
 8001464:	0800b378 	.word	0x0800b378

08001468 <Start_Timers_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Timers_Task */
void Start_Timers_Task(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Timers_Task */
  /* Infinite loop */

	for (;;) {
/*---------------------------- Get UNIX timestamp from RTC --------------------------------*/
		HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001470:	2200      	movs	r2, #0
 8001472:	4961      	ldr	r1, [pc, #388]	; (80015f8 <Start_Timers_Task+0x190>)
 8001474:	4861      	ldr	r0, [pc, #388]	; (80015fc <Start_Timers_Task+0x194>)
 8001476:	f001 fcc1 	bl	8002dfc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800147a:	2200      	movs	r2, #0
 800147c:	4960      	ldr	r1, [pc, #384]	; (8001600 <Start_Timers_Task+0x198>)
 800147e:	485f      	ldr	r0, [pc, #380]	; (80015fc <Start_Timers_Task+0x194>)
 8001480:	f001 fd9e 	bl	8002fc0 <HAL_RTC_GetDate>

		currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 8001484:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <Start_Timers_Task+0x198>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	3364      	adds	r3, #100	; 0x64
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <Start_Timers_Task+0x19c>)
 800148c:	6153      	str	r3, [r2, #20]
		currTime.tm_mday = currentDate.Date;
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <Start_Timers_Task+0x198>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	461a      	mov	r2, r3
 8001494:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <Start_Timers_Task+0x19c>)
 8001496:	60da      	str	r2, [r3, #12]
		currTime.tm_mon = currentDate.Month - 1;
 8001498:	4b59      	ldr	r3, [pc, #356]	; (8001600 <Start_Timers_Task+0x198>)
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a59      	ldr	r2, [pc, #356]	; (8001604 <Start_Timers_Task+0x19c>)
 80014a0:	6113      	str	r3, [r2, #16]

		currTime.tm_hour = currentTime.Hours;
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <Start_Timers_Task+0x190>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <Start_Timers_Task+0x19c>)
 80014aa:	609a      	str	r2, [r3, #8]
		currTime.tm_min = currentTime.Minutes;
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <Start_Timers_Task+0x190>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <Start_Timers_Task+0x19c>)
 80014b4:	605a      	str	r2, [r3, #4]
		currTime.tm_sec = currentTime.Seconds;
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <Start_Timers_Task+0x190>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b51      	ldr	r3, [pc, #324]	; (8001604 <Start_Timers_Task+0x19c>)
 80014be:	601a      	str	r2, [r3, #0]

		timestamp = mktime(&currTime);
 80014c0:	4850      	ldr	r0, [pc, #320]	; (8001604 <Start_Timers_Task+0x19c>)
 80014c2:	f005 ff09 	bl	80072d8 <mktime>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	494f      	ldr	r1, [pc, #316]	; (8001608 <Start_Timers_Task+0x1a0>)
 80014cc:	e9c1 2300 	strd	r2, r3, [r1]
		//printf ( "Current SECONDS: %f\n", timestamp );
		//printf ( "Current date and time are: %s\n", ctime (&timestamp) ); // Convert time_t value to string

/*---------------------------------- Get timestamp for Time1 ----------------------------------------*/
		HAL_RTC_GetTime(&hrtc, &Time1, RTC_FORMAT_BIN);
 80014d0:	2200      	movs	r2, #0
 80014d2:	494e      	ldr	r1, [pc, #312]	; (800160c <Start_Timers_Task+0x1a4>)
 80014d4:	4849      	ldr	r0, [pc, #292]	; (80015fc <Start_Timers_Task+0x194>)
 80014d6:	f001 fc91 	bl	8002dfc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Date1, RTC_FORMAT_BIN);
 80014da:	2200      	movs	r2, #0
 80014dc:	494c      	ldr	r1, [pc, #304]	; (8001610 <Start_Timers_Task+0x1a8>)
 80014de:	4847      	ldr	r0, [pc, #284]	; (80015fc <Start_Timers_Task+0x194>)
 80014e0:	f001 fd6e 	bl	8002fc0 <HAL_RTC_GetDate>

		stTime1.tm_year = Date1.Year + 100;  // In fact: 2000 + 18 - 1900
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <Start_Timers_Task+0x1a8>)
 80014e6:	78db      	ldrb	r3, [r3, #3]
 80014e8:	3364      	adds	r3, #100	; 0x64
 80014ea:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <Start_Timers_Task+0x1ac>)
 80014ec:	6153      	str	r3, [r2, #20]
		stTime1.tm_mday = Date1.Date;
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <Start_Timers_Task+0x1a8>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <Start_Timers_Task+0x1ac>)
 80014f6:	60da      	str	r2, [r3, #12]
		stTime1.tm_mon = Date1.Month - 1;
 80014f8:	4b45      	ldr	r3, [pc, #276]	; (8001610 <Start_Timers_Task+0x1a8>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a45      	ldr	r2, [pc, #276]	; (8001614 <Start_Timers_Task+0x1ac>)
 8001500:	6113      	str	r3, [r2, #16]

		stTime1.tm_hour = Time1.Hours;
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <Start_Timers_Task+0x1a4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <Start_Timers_Task+0x1ac>)
 800150a:	609a      	str	r2, [r3, #8]
		stTime1.tm_min = Time1.Minutes;
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <Start_Timers_Task+0x1a4>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	461a      	mov	r2, r3
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <Start_Timers_Task+0x1ac>)
 8001514:	605a      	str	r2, [r3, #4]
		stTime1.tm_sec = Time1.Seconds;
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <Start_Timers_Task+0x1a4>)
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	461a      	mov	r2, r3
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <Start_Timers_Task+0x1ac>)
 800151e:	601a      	str	r2, [r3, #0]

		timestamp1 = mktime(&stTime1);
 8001520:	483c      	ldr	r0, [pc, #240]	; (8001614 <Start_Timers_Task+0x1ac>)
 8001522:	f005 fed9 	bl	80072d8 <mktime>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	493b      	ldr	r1, [pc, #236]	; (8001618 <Start_Timers_Task+0x1b0>)
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
		//printf("Time1: %s", ctime(&timestamp1)); // Convert Time1 value to string

/*---------------------------------- Get timestamp for Time2 ----------------------------------------*/
		HAL_RTC_GetTime(&hrtc, &Time2, RTC_FORMAT_BIN);
 8001530:	2200      	movs	r2, #0
 8001532:	493a      	ldr	r1, [pc, #232]	; (800161c <Start_Timers_Task+0x1b4>)
 8001534:	4831      	ldr	r0, [pc, #196]	; (80015fc <Start_Timers_Task+0x194>)
 8001536:	f001 fc61 	bl	8002dfc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Date2, RTC_FORMAT_BIN);
 800153a:	2200      	movs	r2, #0
 800153c:	4938      	ldr	r1, [pc, #224]	; (8001620 <Start_Timers_Task+0x1b8>)
 800153e:	482f      	ldr	r0, [pc, #188]	; (80015fc <Start_Timers_Task+0x194>)
 8001540:	f001 fd3e 	bl	8002fc0 <HAL_RTC_GetDate>

		stTime2.tm_year = Date2.Year + 100;  // In fact: 2000 + 18 - 1900
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <Start_Timers_Task+0x1b8>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	3364      	adds	r3, #100	; 0x64
 800154a:	4a36      	ldr	r2, [pc, #216]	; (8001624 <Start_Timers_Task+0x1bc>)
 800154c:	6153      	str	r3, [r2, #20]
		stTime2.tm_mday = Date2.Date;
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <Start_Timers_Task+0x1b8>)
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	461a      	mov	r2, r3
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <Start_Timers_Task+0x1bc>)
 8001556:	60da      	str	r2, [r3, #12]
		stTime2.tm_mon = Date1.Month - 1;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <Start_Timers_Task+0x1a8>)
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	3b01      	subs	r3, #1
 800155e:	4a31      	ldr	r2, [pc, #196]	; (8001624 <Start_Timers_Task+0x1bc>)
 8001560:	6113      	str	r3, [r2, #16]

		stTime2.tm_hour = Time2.Hours;
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <Start_Timers_Task+0x1b4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <Start_Timers_Task+0x1bc>)
 800156a:	609a      	str	r2, [r3, #8]
		stTime2.tm_min = Time2.Minutes;
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <Start_Timers_Task+0x1b4>)
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	461a      	mov	r2, r3
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <Start_Timers_Task+0x1bc>)
 8001574:	605a      	str	r2, [r3, #4]
		stTime2.tm_sec = 10; //Time2.Seconds;
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <Start_Timers_Task+0x1bc>)
 8001578:	220a      	movs	r2, #10
 800157a:	601a      	str	r2, [r3, #0]

		timestamp2 = mktime(&stTime2);
 800157c:	4829      	ldr	r0, [pc, #164]	; (8001624 <Start_Timers_Task+0x1bc>)
 800157e:	f005 feab 	bl	80072d8 <mktime>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4928      	ldr	r1, [pc, #160]	; (8001628 <Start_Timers_Task+0x1c0>)
 8001588:	e9c1 2300 	strd	r2, r3, [r1]
		//printf("Time2: %s\n", ctime(&timestamp2)); // Convert Time2 value to string

		double interval = difftime(timestamp, timestamp2);
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <Start_Timers_Task+0x1a0>)
 800158e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <Start_Timers_Task+0x1c0>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f005 fc70 	bl	8006e7c <difftime>
 800159c:	ed87 0b04 	vstr	d0, [r7, #16]

		if(interval == 0.00){
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ac:	f7ff fa96 	bl	8000adc <__aeabi_dcmpeq>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <Start_Timers_Task+0x154>
		printf("Srabotal timer! \n");
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <Start_Timers_Task+0x1c4>)
 80015b8:	f006 fde0 	bl	800817c <puts>
		}
/*---------------------------------- Toggle timer ----------------------------------------*/
		unsigned long currentTime = timestamp;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <Start_Timers_Task+0x1a0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	4613      	mov	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

		if (currentTime - Previoustime >= Interval) {  // Переключаем согласно "Interval".
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <Start_Timers_Task+0x1c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2203      	movs	r2, #3
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f4ff af4d 	bcc.w	8001470 <Start_Timers_Task+0x8>
			Previoustime = currentTime;
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <Start_Timers_Task+0x1c8>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6013      	str	r3, [r2, #0]
			GPIOA->ODR ^= GPIO_PIN_1; // toggle PA1
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <Start_Timers_Task+0x1cc>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <Start_Timers_Task+0x1cc>)
 80015e2:	f083 0302 	eor.w	r3, r3, #2
 80015e6:	6153      	str	r3, [r2, #20]
			GPIOD->ODR ^= GPIO_PIN_0; // toggle PD0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <Start_Timers_Task+0x1d0>)
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <Start_Timers_Task+0x1d0>)
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	6153      	str	r3, [r2, #20]
	for (;;) {
 80015f4:	e73c      	b.n	8001470 <Start_Timers_Task+0x8>
 80015f6:	bf00      	nop
 80015f8:	20000268 	.word	0x20000268
 80015fc:	2000033c 	.word	0x2000033c
 8001600:	2000027c 	.word	0x2000027c
 8001604:	20000288 	.word	0x20000288
 8001608:	20000280 	.word	0x20000280
 800160c:	200002ac 	.word	0x200002ac
 8001610:	200002c0 	.word	0x200002c0
 8001614:	200002d0 	.word	0x200002d0
 8001618:	200002c8 	.word	0x200002c8
 800161c:	200002f4 	.word	0x200002f4
 8001620:	20000308 	.word	0x20000308
 8001624:	20000318 	.word	0x20000318
 8001628:	20000310 	.word	0x20000310
 800162c:	0800b394 	.word	0x0800b394
 8001630:	20000264 	.word	0x20000264
 8001634:	40020000 	.word	0x40020000
 8001638:	40020c00 	.word	0x40020c00

0800163c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800164e:	f000 fa61 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40002000 	.word	0x40002000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_MspInit+0x54>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_MspInit+0x54>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f000 fb07 	bl	8001cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_RTC_MspInit+0x5c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d119      	bne.n	8001718 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 f990 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016fe:	f7ff ffaf 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_RTC_MspInit+0x60>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
 800170c:	2029      	movs	r0, #41	; 0x29
 800170e:	f000 fad9 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001712:	2029      	movs	r0, #41	; 0x29
 8001714:	f000 faf2 	bl	8001cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40002800 	.word	0x40002800
 8001724:	42470e3c 	.word	0x42470e3c

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_UART_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_UART_MspInit+0x88>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001792:	2308      	movs	r3, #8
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_UART_MspInit+0x8c>)
 800179e:	f000 fabb 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020800 	.word	0x40020800

080017b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_InitTick+0xe4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_InitTick+0xe4>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_InitTick+0xe4>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e4:	f107 0210 	add.w	r2, r7, #16
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 f8e0 	bl	80029b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fe:	f001 f8b1 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8001802:	6378      	str	r0, [r7, #52]	; 0x34
 8001804:	e004      	b.n	8001810 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001806:	f001 f8ad 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_InitTick+0xe8>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	3b01      	subs	r3, #1
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_InitTick+0xec>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_InitTick+0xf0>)
 8001822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_InitTick+0xec>)
 8001826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_InitTick+0xec>)
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xec>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_InitTick+0xec>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_InitTick+0xec>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001844:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_InitTick+0xec>)
 8001846:	f001 feea 	bl	800361e <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11b      	bne.n	8001890 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_InitTick+0xec>)
 800185a:	f001 ff39 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001868:	2b00      	cmp	r3, #0
 800186a:	d111      	bne.n	8001890 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800186c:	202d      	movs	r0, #45	; 0x2d
 800186e:	f000 fa45 	bl	8001cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d808      	bhi.n	800188a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	202d      	movs	r0, #45	; 0x2d
 800187e:	f000 fa21 	bl	8001cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0xf4>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e002      	b.n	8001890 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001894:	4618      	mov	r0, r3
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	431bde83 	.word	0x431bde83
 80018a4:	2000042c 	.word	0x2000042c
 80018a8:	40002000 	.word	0x40002000
 80018ac:	20000008 	.word	0x20000008

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <RTC_Alarm_IRQHandler+0x10>)
 80018e2:	f001 fd8f 	bl	8003404 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000033c 	.word	0x2000033c

080018f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018f6:	f001 ff5b 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000042c 	.word	0x2000042c

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800191e:	f005 fab7 	bl	8006e90 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
	return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001946:	e7fe      	b.n	8001946 <_exit+0x12>

08001948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195a:	f3af 8000 	nop.w
 800195e:	4601      	mov	r1, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf0      	blt.n	800195a <_read+0x12>
	}

return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019aa:	605a      	str	r2, [r3, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_isatty>:

int _isatty(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	return 1;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f005 fa38 	bl	8006e90 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20020000 	.word	0x20020000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	20000478 	.word	0x20000478
 8001a54:	20004ec8 	.word	0x20004ec8

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff ffd7 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f005 faed 	bl	8007088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff fa55 	bl	8000f5c <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001ac0:	0800b954 	.word	0x0800b954
  ldr r2, =_sbss
 8001ac4:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001ac8:	20004ec8 	.word	0x20004ec8

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f8d8 	bl	8001cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff fe5a 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fdb2 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	2000047c 	.word	0x2000047c

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000047c 	.word	0x2000047c

08001b54 <__NVIC_SetPriorityGrouping>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff4c 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd6:	f7ff ff61 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f7ff ffb1 	bl	8001c48 <NVIC_EncodePriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff80 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff54 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e16b      	b.n	800200c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 815a 	bne.w	8002006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80b4 	beq.w	8002006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a5b      	ldr	r2, [pc, #364]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_GPIO_Init+0x314>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	; (8002034 <HAL_GPIO_Init+0x31c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x324>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20a>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_GPIO_Init+0x334>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae90 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40021400 	.word	0x40021400
 8002044:	40021800 	.word	0x40021800
 8002048:	40021c00 	.word	0x40021c00
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e267      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d075      	beq.n	800218e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d00c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d112      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05b      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d157      	bne.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e242      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x74>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x98>
 8002102:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 800211c:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a65      	ldr	r2, [pc, #404]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fcfe 	bl	8001b3c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fcfa 	bl	8001b3c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e207      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xc0>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fcea 	bl	8001b3c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fce6 	bl	8001b3c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1f3      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1c7      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff fc9f 	bl	8001b3c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff fc9b 	bl	8001b3c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1a8      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4925      	ldr	r1, [pc, #148]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff fc7e 	bl	8001b3c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff fc7a 	bl	8001b3c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e187      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d036      	beq.n	80022dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff fc5e 	bl	8001b3c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fc5a 	bl	8001b3c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e167      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x200>
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fc47 	bl	8001b3c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e00e      	b.n	80022d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff fc43 	bl	8001b3c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d907      	bls.n	80022d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e150      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	42470000 	.word	0x42470000
 80022cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ea      	bne.n	80022b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8097 	beq.w	8002418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7ff fc03 	bl	8001b3c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff fbff 	bl	8001b3c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e10c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x2ea>
 8002360:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e01c      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x30c>
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff fbc4 	bl	8001b3c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff fbc0 	bl	8001b3c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0cb      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ee      	beq.n	80023b8 <HAL_RCC_OscConfig+0x334>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7ff fbae 	bl	8001b3c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7ff fbaa 	bl	8001b3c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0b5      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a1 	beq.w	8002564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d05c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d141      	bne.n	80024ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fb7e 	bl	8001b3c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff fb7a 	bl	8001b3c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e087      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	491b      	ldr	r1, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fb53 	bl	8001b3c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fb4f 	bl	8001b3c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e05c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x416>
 80024b8:	e054      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb3c 	bl	8001b3c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fb38 	bl	8001b3c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e045      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x444>
 80024e6:	e03d      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e038      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4ec>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d028      	beq.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d121      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d11a      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0cc      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d90c      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d044      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d119      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e067      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4934      	ldr	r1, [pc, #208]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff fa6a 	bl	8001b3c <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff fa66 	bl	8001b3c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d20c      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f84c 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00
 8002730:	40023800 	.word	0x40023800
 8002734:	0800b438 	.word	0x0800b438
 8002738:	20000004 	.word	0x20000004
 800273c:	20000008 	.word	0x20000008

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b094      	sub	sp, #80	; 0x50
 8002746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
 800274c:	2300      	movs	r3, #0
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	2300      	movs	r3, #0
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d00d      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 8002764:	2b08      	cmp	r3, #8
 8002766:	f200 80e1 	bhi.w	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 800276e:	2b04      	cmp	r3, #4
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x3a>
 8002772:	e0db      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002778:	e0db      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_GetSysClockFreq+0x208>)
 800277c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277e:	e0d8      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
 80027ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027b2:	4622      	mov	r2, r4
 80027b4:	462b      	mov	r3, r5
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4621      	mov	r1, r4
 80027cc:	1a51      	subs	r1, r2, r1
 80027ce:	6139      	str	r1, [r7, #16]
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e4:	4659      	mov	r1, fp
 80027e6:	018b      	lsls	r3, r1, #6
 80027e8:	4651      	mov	r1, sl
 80027ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ee:	4651      	mov	r1, sl
 80027f0:	018a      	lsls	r2, r1, #6
 80027f2:	4651      	mov	r1, sl
 80027f4:	ebb2 0801 	subs.w	r8, r2, r1
 80027f8:	4659      	mov	r1, fp
 80027fa:	eb63 0901 	sbc.w	r9, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002812:	4690      	mov	r8, r2
 8002814:	4699      	mov	r9, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb18 0303 	adds.w	r3, r8, r3
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	462b      	mov	r3, r5
 8002820:	eb49 0303 	adc.w	r3, r9, r3
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002832:	4629      	mov	r1, r5
 8002834:	024b      	lsls	r3, r1, #9
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283c:	4621      	mov	r1, r4
 800283e:	024a      	lsls	r2, r1, #9
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002846:	2200      	movs	r2, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002850:	f7fe f9b4 	bl	8000bbc <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	e058      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	2200      	movs	r2, #0
 8002866:	4618      	mov	r0, r3
 8002868:	4611      	mov	r1, r2
 800286a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
 8002874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	0159      	lsls	r1, r3, #5
 8002886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288a:	0150      	lsls	r0, r2, #5
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4641      	mov	r1, r8
 8002892:	ebb2 0a01 	subs.w	sl, r2, r1
 8002896:	4649      	mov	r1, r9
 8002898:	eb63 0b01 	sbc.w	fp, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b0:	ebb2 040a 	subs.w	r4, r2, sl
 80028b4:	eb63 050b 	sbc.w	r5, r3, fp
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	00eb      	lsls	r3, r5, #3
 80028c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c6:	00e2      	lsls	r2, r4, #3
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	4643      	mov	r3, r8
 80028ce:	18e3      	adds	r3, r4, r3
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	464b      	mov	r3, r9
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002904:	f7fe f95a 	bl	8000bbc <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002934:	4618      	mov	r0, r3
 8002936:	3750      	adds	r7, #80	; 0x50
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	0800b448 	.word	0x0800b448

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffdc 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	0800b448 	.word	0x0800b448

080029b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	220f      	movs	r2, #15
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_RCC_GetClockConfig+0x60>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40023c00 	.word	0x40023c00

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d035      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a40:	4b62      	ldr	r3, [pc, #392]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a46:	f7ff f879 	bl	8001b3c <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a4e:	f7ff f875 	bl	8001b3c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0b0      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a60:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	019a      	lsls	r2, r3, #6
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	071b      	lsls	r3, r3, #28
 8002a78:	4955      	ldr	r1, [pc, #340]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a80:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a86:	f7ff f859 	bl	8001b3c <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a8e:	f7ff f855 	bl	8001b3c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e090      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8083 	beq.w	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a43      	ldr	r2, [pc, #268]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3e      	ldr	r2, [pc, #248]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae2:	f7ff f82b 	bl	8001b3c <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7ff f827 	bl	8001b3c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e062      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d02f      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d028      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d114      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fff5 	bl	8001b3c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fff1 	bl	8001b3c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e02a      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b84:	d10d      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ba8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bac:	6093      	str	r3, [r2, #8]
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	4905      	ldr	r1, [pc, #20]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	42470068 	.word	0x42470068
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42470e40 	.word	0x42470e40

08002bdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e066      	b.n	8002cc0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7f5b      	ldrb	r3, [r3, #29]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe fd5e 	bl	80016c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	22ca      	movs	r2, #202	; 0xca
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2253      	movs	r2, #83	; 0x53
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fc5e 	bl	80034e0 <RTC_EnterInitMode>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d12c      	bne.n	8002c88 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c40:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68d2      	ldr	r2, [r2, #12]
 8002c68:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6919      	ldr	r1, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fc65 	bl	800354e <RTC_ExitInitMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d113      	bne.n	8002cb6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	22ff      	movs	r2, #255	; 0xff
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	7f1b      	ldrb	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_RTC_SetTime+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e087      	b.n	8002df4 <HAL_RTC_SetTime+0x12c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2202      	movs	r2, #2
 8002cee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d126      	bne.n	8002d44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fc42 	bl	8003598 <RTC_ByteToBcd2>
 8002d14:	4603      	mov	r3, r0
 8002d16:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fc3b 	bl	8003598 <RTC_ByteToBcd2>
 8002d22:	4603      	mov	r3, r0
 8002d24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d26:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	789b      	ldrb	r3, [r3, #2]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fc33 	bl	8003598 <RTC_ByteToBcd2>
 8002d32:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d34:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e018      	b.n	8002d76 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d64:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002d6a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	78db      	ldrb	r3, [r3, #3]
 8002d70:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	22ca      	movs	r2, #202	; 0xca
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2253      	movs	r2, #83	; 0x53
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fbaa 	bl	80034e0 <RTC_EnterInitMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d120      	bne.n	8002dd8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002da0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002da4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fbbd 	bl	800354e <RTC_ExitInitMode>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	771a      	strb	r2, [r3, #28]

  return status;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	0d9b      	lsrs	r3, r3, #22
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11a      	bne.n	8002eae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fba8 	bl	80035d2 <RTC_Bcd2ToByte>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fb9f 	bl	80035d2 <RTC_Bcd2ToByte>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	789b      	ldrb	r3, [r3, #2]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fb96 	bl	80035d2 <RTC_Bcd2ToByte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	7f1b      	ldrb	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_RTC_SetDate+0x1c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e071      	b.n	8002fb8 <HAL_RTC_SetDate+0x100>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2202      	movs	r2, #2
 8002ede:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RTC_SetDate+0x4c>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	f023 0310 	bic.w	r3, r3, #16
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	330a      	adds	r3, #10
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11c      	bne.n	8002f44 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fb42 	bl	8003598 <RTC_ByteToBcd2>
 8002f14:	4603      	mov	r3, r0
 8002f16:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fb3b 	bl	8003598 <RTC_ByteToBcd2>
 8002f22:	4603      	mov	r3, r0
 8002f24:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f26:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	789b      	ldrb	r3, [r3, #2]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fb33 	bl	8003598 <RTC_ByteToBcd2>
 8002f32:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f34:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00e      	b.n	8002f62 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002f50:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002f56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	22ca      	movs	r2, #202	; 0xca
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2253      	movs	r2, #83	; 0x53
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fab4 	bl	80034e0 <RTC_EnterInitMode>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f90:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fadb 	bl	800354e <RTC_ExitInitMode>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]

  return status;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}

08002fc0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	0b5b      	lsrs	r3, r3, #13
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11a      	bne.n	8003054 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fad5 	bl	80035d2 <RTC_Bcd2ToByte>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 facc 	bl	80035d2 <RTC_Bcd2ToByte>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	789b      	ldrb	r3, [r3, #2]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fac3 	bl	80035d2 <RTC_Bcd2ToByte>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <HAL_RTC_SetAlarm_IT+0x278>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9a      	ldr	r2, [pc, #616]	; (80032dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0adb      	lsrs	r3, r3, #11
 8003078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	7f1b      	ldrb	r3, [r3, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_RTC_SetAlarm_IT+0x36>
 8003092:	2302      	movs	r3, #2
 8003094:	e11c      	b.n	80032d0 <HAL_RTC_SetAlarm_IT+0x270>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d137      	bne.n	8003118 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa69 	bl	8003598 <RTC_ByteToBcd2>
 80030c6:	4603      	mov	r3, r0
 80030c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa62 	bl	8003598 <RTC_ByteToBcd2>
 80030d4:	4603      	mov	r3, r0
 80030d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80030d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	789b      	ldrb	r3, [r3, #2]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fa5a 	bl	8003598 <RTC_ByteToBcd2>
 80030e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	78db      	ldrb	r3, [r3, #3]
 80030ee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80030f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fa4c 	bl	8003598 <RTC_ByteToBcd2>
 8003100:	4603      	mov	r3, r0
 8003102:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003104:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800310c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003112:	4313      	orrs	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e023      	b.n	8003160 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003138:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800313e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003146:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003150:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003156:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800315c:	4313      	orrs	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	22ca      	movs	r2, #202	; 0xca
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2253      	movs	r2, #83	; 0x53
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d141      	bne.n	800320a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003194:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80031a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	617a      	str	r2, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2203      	movs	r2, #3
 80031be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e082      	b.n	80032d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0e7      	beq.n	80031a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e04b      	b.n	80032a2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003218:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f462 7220 	orn	r2, r2, #640	; 0x280
 800322a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800322c:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RTC_SetAlarm_IT+0x278>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	617a      	str	r2, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e035      	b.n	80032d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0e7      	beq.n	8003242 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3724      	adds	r7, #36	; 0x24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	20000004 	.word	0x20000004
 80032dc:	10624dd3 	.word	0x10624dd3
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d10e      	bne.n	8003320 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e00d      	b.n	800333c <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003336:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	0d9b      	lsrs	r3, r3, #22
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	0e1b      	lsrs	r3, r3, #24
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d125      	bne.n	80033f8 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f90e 	bl	80035d2 <RTC_Bcd2ToByte>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f905 	bl	80035d2 <RTC_Bcd2ToByte>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	789b      	ldrb	r3, [r3, #2]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f8fc 	bl	80035d2 <RTC_Bcd2ToByte>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f8f2 	bl	80035d2 <RTC_Bcd2ToByte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd ff6b 	bl	8001304 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800343e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8d4 	bl	800360a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003472:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	775a      	strb	r2, [r3, #29]
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ac:	f7fe fb46 	bl	8001b3c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034b2:	e009      	b.n	80034c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034b4:	f7fe fb42 	bl	8001b3c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c2:	d901      	bls.n	80034c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e007      	b.n	80034d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ee      	beq.n	80034b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d122      	bne.n	8003544 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800350c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800350e:	f7fe fb15 	bl	8001b3c <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003514:	e00c      	b.n	8003530 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003516:	f7fe fb11 	bl	8001b3c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003524:	d904      	bls.n	8003530 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <RTC_EnterInitMode+0x64>
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d1e8      	bne.n	8003516 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003568:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff89 	bl	8003490 <HAL_RTC_WaitForSynchro>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80035a6:	e005      	b.n	80035b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	3301      	adds	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	3b0a      	subs	r3, #10
 80035b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	d8f6      	bhi.n	80035a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	4413      	add	r3, r2
 80035fc:	b2db      	uxtb	r3, r3
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e041      	b.n	80036b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f839 	bl	80036bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 f9d7 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04e      	b.n	8003786 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_TIM_Base_Start_IT+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d022      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d01d      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_TIM_Base_Start_IT+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_TIM_Base_Start_IT+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_Base_Start_IT+0xdc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d010      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e007      	b.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40010400 	.word	0x40010400
 80037a8:	40014000 	.word	0x40014000
 80037ac:	40001800 	.word	0x40001800

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0202 	mvn.w	r2, #2
 80037dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8ee 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8e0 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8f1 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0204 	mvn.w	r2, #4
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8c4 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8b6 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8c7 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b08      	cmp	r3, #8
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0208 	mvn.w	r2, #8
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2204      	movs	r2, #4
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f89a 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f88c 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f89d 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d122      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0210 	mvn.w	r2, #16
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f870 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f862 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f873 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0201 	mvn.w	r2, #1
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fe84 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f902 	bl	8003b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f838 	bl	80039fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0220 	mvn.w	r2, #32
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8cc 	bl	8003b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a40      	ldr	r2, [pc, #256]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d00f      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <TIM_Base_SetConfig+0x118>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <TIM_Base_SetConfig+0x11c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3b      	ldr	r2, [pc, #236]	; (8003b30 <TIM_Base_SetConfig+0x120>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3a      	ldr	r2, [pc, #232]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d027      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <TIM_Base_SetConfig+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d023      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <TIM_Base_SetConfig+0x11c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <TIM_Base_SetConfig+0x120>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d017      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <TIM_Base_SetConfig+0x128>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <TIM_Base_SetConfig+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <TIM_Base_SetConfig+0x134>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <TIM_Base_SetConfig+0x138>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0xf8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800
 8003b44:	40001800 	.word	0x40001800
 8003b48:	40001c00 	.word	0x40001c00
 8003b4c:	40002000 	.word	0x40002000

08003b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e03f      	b.n	8003c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fdc2 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f929 	bl	8003e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d17c      	bne.n	8003d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_UART_Transmit+0x2c>
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e075      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Transmit+0x3e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e06e      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2221      	movs	r2, #33	; 0x21
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c66:	f7fd ff69 	bl	8001b3c <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d108      	bne.n	8003c94 <HAL_UART_Transmit+0x82>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e003      	b.n	8003c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ca4:	e02a      	b.n	8003cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f840 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e036      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1cf      	bne.n	8003ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f810 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e006      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b090      	sub	sp, #64	; 0x40
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	e050      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d04c      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d56:	f7fd fef1 	bl	8001b3c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d241      	bcs.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d86:	637a      	str	r2, [r7, #52]	; 0x34
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3314      	adds	r3, #20
 8003db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dba:	623a      	str	r2, [r7, #32]
 8003dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	69f9      	ldr	r1, [r7, #28]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e00f      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4013      	ands	r3, r2
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d09f      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3740      	adds	r7, #64	; 0x40
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b0c0      	sub	sp, #256	; 0x100
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	ea40 0301 	orr.w	r3, r0, r1
 8003e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e6c:	f021 010c 	bic.w	r1, r1, #12
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	6999      	ldr	r1, [r3, #24]
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	ea40 0301 	orr.w	r3, r0, r1
 8003e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8f      	ldr	r3, [pc, #572]	; (80040e0 <UART_SetConfig+0x2cc>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0xa0>
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8d      	ldr	r3, [pc, #564]	; (80040e4 <UART_SetConfig+0x2d0>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d104      	bne.n	8003ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7fe fd6a 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ebc:	e003      	b.n	8003ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7fe fd51 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed0:	f040 810c 	bne.w	80040ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	eb12 0801 	adds.w	r8, r2, r1
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb43 0901 	adc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f24:	462b      	mov	r3, r5
 8003f26:	eb49 0303 	adc.w	r3, r9, r3
 8003f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f42:	460b      	mov	r3, r1
 8003f44:	18db      	adds	r3, r3, r3
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
 8003f48:	4613      	mov	r3, r2
 8003f4a:	eb42 0303 	adc.w	r3, r2, r3
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f58:	f7fc fe30 	bl	8000bbc <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2302 	umull	r2, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	011c      	lsls	r4, r3, #4
 8003f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f84:	415b      	adcs	r3, r3
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb43 0b01 	adc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fac:	4692      	mov	sl, r2
 8003fae:	469b      	mov	fp, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	18db      	adds	r3, r3, r3
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fde:	4613      	mov	r3, r2
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fee:	f7fc fde5 	bl	8000bbc <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <UART_SetConfig+0x2d4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	; 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <UART_SetConfig+0x2d4>)
 8004010:	fba3 2302 	umull	r2, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800401c:	441c      	add	r4, r3
 800401e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800402c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	1891      	adds	r1, r2, r2
 8004036:	63b9      	str	r1, [r7, #56]	; 0x38
 8004038:	415b      	adcs	r3, r3
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004040:	4641      	mov	r1, r8
 8004042:	1851      	adds	r1, r2, r1
 8004044:	6339      	str	r1, [r7, #48]	; 0x30
 8004046:	4649      	mov	r1, r9
 8004048:	414b      	adcs	r3, r1
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004058:	4659      	mov	r1, fp
 800405a:	00cb      	lsls	r3, r1, #3
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004062:	4651      	mov	r1, sl
 8004064:	00ca      	lsls	r2, r1, #3
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	4603      	mov	r3, r0
 800406c:	4642      	mov	r2, r8
 800406e:	189b      	adds	r3, r3, r2
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004074:	464b      	mov	r3, r9
 8004076:	460a      	mov	r2, r1
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800408c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040aa:	f7fc fd87 	bl	8000bbc <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <UART_SetConfig+0x2d4>)
 80040b4:	fba3 1302 	umull	r1, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2164      	movs	r1, #100	; 0x64
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	3332      	adds	r3, #50	; 0x32
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <UART_SetConfig+0x2d4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	f003 0207 	and.w	r2, r3, #7
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4422      	add	r2, r4
 80040da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040dc:	e105      	b.n	80042ea <UART_SetConfig+0x4d6>
 80040de:	bf00      	nop
 80040e0:	40011000 	.word	0x40011000
 80040e4:	40011400 	.word	0x40011400
 80040e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040fe:	4642      	mov	r2, r8
 8004100:	464b      	mov	r3, r9
 8004102:	1891      	adds	r1, r2, r2
 8004104:	6239      	str	r1, [r7, #32]
 8004106:	415b      	adcs	r3, r3
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
 800410a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410e:	4641      	mov	r1, r8
 8004110:	1854      	adds	r4, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0501 	adc.w	r5, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	00eb      	lsls	r3, r5, #3
 8004122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004126:	00e2      	lsls	r2, r4, #3
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	4643      	mov	r3, r8
 800412e:	18e3      	adds	r3, r4, r3
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004134:	464b      	mov	r3, r9
 8004136:	eb45 0303 	adc.w	r3, r5, r3
 800413a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415a:	4629      	mov	r1, r5
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004164:	4621      	mov	r1, r4
 8004166:	008a      	lsls	r2, r1, #2
 8004168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800416c:	f7fc fd26 	bl	8000bbc <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004176:	fba3 2302 	umull	r2, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	011c      	lsls	r4, r3, #4
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800418c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	61b9      	str	r1, [r7, #24]
 8004198:	415b      	adcs	r3, r3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	6139      	str	r1, [r7, #16]
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041f8:	4649      	mov	r1, r9
 80041fa:	008b      	lsls	r3, r1, #2
 80041fc:	4641      	mov	r1, r8
 80041fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004202:	4641      	mov	r1, r8
 8004204:	008a      	lsls	r2, r1, #2
 8004206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800420a:	f7fc fcd7 	bl	8000bbc <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004214:	fba3 1302 	umull	r1, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	2164      	movs	r1, #100	; 0x64
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	3332      	adds	r3, #50	; 0x32
 8004226:	4a34      	ldr	r2, [pc, #208]	; (80042f8 <UART_SetConfig+0x4e4>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004232:	441c      	add	r4, r3
 8004234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004238:	2200      	movs	r2, #0
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
 800423c:	677a      	str	r2, [r7, #116]	; 0x74
 800423e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004242:	4642      	mov	r2, r8
 8004244:	464b      	mov	r3, r9
 8004246:	1891      	adds	r1, r2, r2
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	415b      	adcs	r3, r3
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	4641      	mov	r1, r8
 8004254:	1851      	adds	r1, r2, r1
 8004256:	6039      	str	r1, [r7, #0]
 8004258:	4649      	mov	r1, r9
 800425a:	414b      	adcs	r3, r1
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800426a:	4659      	mov	r1, fp
 800426c:	00cb      	lsls	r3, r1, #3
 800426e:	4651      	mov	r1, sl
 8004270:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004274:	4651      	mov	r1, sl
 8004276:	00ca      	lsls	r2, r1, #3
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	4603      	mov	r3, r0
 800427e:	4642      	mov	r2, r8
 8004280:	189b      	adds	r3, r3, r2
 8004282:	66bb      	str	r3, [r7, #104]	; 0x68
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	663b      	str	r3, [r7, #96]	; 0x60
 8004298:	667a      	str	r2, [r7, #100]	; 0x64
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042a6:	4649      	mov	r1, r9
 80042a8:	008b      	lsls	r3, r1, #2
 80042aa:	4641      	mov	r1, r8
 80042ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b0:	4641      	mov	r1, r8
 80042b2:	008a      	lsls	r2, r1, #2
 80042b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042b8:	f7fc fc80 	bl	8000bbc <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <UART_SetConfig+0x4e4>)
 80042c2:	fba3 1302 	umull	r1, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2164      	movs	r1, #100	; 0x64
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	; 0x32
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <UART_SetConfig+0x4e4>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4422      	add	r2, r4
 80042e8:	609a      	str	r2, [r3, #8]
}
 80042ea:	bf00      	nop
 80042ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	51eb851f 	.word	0x51eb851f

080042fc <__NVIC_SetPriority>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db0a      	blt.n	8004326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	490c      	ldr	r1, [pc, #48]	; (8004348 <__NVIC_SetPriority+0x4c>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	440b      	add	r3, r1
 8004320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004324:	e00a      	b.n	800433c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <__NVIC_SetPriority+0x50>)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3b04      	subs	r3, #4
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	440b      	add	r3, r1
 800433a:	761a      	strb	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <SysTick_Handler+0x1c>)
 8004356:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004358:	f001 fd28 	bl	8005dac <xTaskGetSchedulerState>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d001      	beq.n	8004366 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004362:	f002 fb11 	bl	8006988 <xPortSysTickHandler>
  }
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	e000e010 	.word	0xe000e010

08004370 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004374:	2100      	movs	r1, #0
 8004376:	f06f 0004 	mvn.w	r0, #4
 800437a:	f7ff ffbf 	bl	80042fc <__NVIC_SetPriority>
#endif
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800438a:	f3ef 8305 	mrs	r3, IPSR
 800438e:	603b      	str	r3, [r7, #0]
  return(result);
 8004390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004396:	f06f 0305 	mvn.w	r3, #5
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	e00c      	b.n	80043b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <osKernelInitialize+0x44>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <osKernelInitialize+0x44>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	e002      	b.n	80043b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043b8:	687b      	ldr	r3, [r7, #4]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000480 	.word	0x20000480

080043cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d2:	f3ef 8305 	mrs	r3, IPSR
 80043d6:	603b      	str	r3, [r7, #0]
  return(result);
 80043d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043de:	f06f 0305 	mvn.w	r3, #5
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	e010      	b.n	8004408 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <osKernelStart+0x48>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d109      	bne.n	8004402 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043ee:	f7ff ffbf 	bl	8004370 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <osKernelStart+0x48>)
 80043f4:	2202      	movs	r2, #2
 80043f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043f8:	f001 f87c 	bl	80054f4 <vTaskStartScheduler>
      stat = osOK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e002      	b.n	8004408 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004408:	687b      	ldr	r3, [r7, #4]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000480 	.word	0x20000480

08004418 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af04      	add	r7, sp, #16
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004428:	f3ef 8305 	mrs	r3, IPSR
 800442c:	617b      	str	r3, [r7, #20]
  return(result);
 800442e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004430:	2b00      	cmp	r3, #0
 8004432:	d17e      	bne.n	8004532 <osThreadNew+0x11a>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d07b      	beq.n	8004532 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800443e:	2318      	movs	r3, #24
 8004440:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800444a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d045      	beq.n	80044de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <osThreadNew+0x48>
        name = attr->name;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <osThreadNew+0x6e>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b38      	cmp	r3, #56	; 0x38
 8004478:	d805      	bhi.n	8004486 <osThreadNew+0x6e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <osThreadNew+0x72>
        return (NULL);
 8004486:	2300      	movs	r3, #0
 8004488:	e054      	b.n	8004534 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00e      	beq.n	80044c0 <osThreadNew+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2bbb      	cmp	r3, #187	; 0xbb
 80044a8:	d90a      	bls.n	80044c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <osThreadNew+0xa8>
        mem = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e010      	b.n	80044e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <osThreadNew+0xca>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <osThreadNew+0xca>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <osThreadNew+0xca>
          mem = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e001      	b.n	80044e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d110      	bne.n	800450a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f0:	9202      	str	r2, [sp, #8]
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6a3a      	ldr	r2, [r7, #32]
 80044fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fe0c 	bl	800511c <xTaskCreateStatic>
 8004504:	4603      	mov	r3, r0
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e013      	b.n	8004532 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d110      	bne.n	8004532 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	b29a      	uxth	r2, r3
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fe57 	bl	80051d6 <xTaskCreate>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <osThreadNew+0x11a>
            hTask = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004532:	693b      	ldr	r3, [r7, #16]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004544:	f3ef 8305 	mrs	r3, IPSR
 8004548:	60bb      	str	r3, [r7, #8]
  return(result);
 800454a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <osDelay+0x1c>
    stat = osErrorISR;
 8004550:	f06f 0305 	mvn.w	r3, #5
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	e007      	b.n	8004568 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 ff92 	bl	800548c <vTaskDelay>
    }
  }

  return (stat);
 8004568:	68fb      	ldr	r3, [r7, #12]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <vApplicationGetIdleTaskMemory+0x30>)
 800458a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000484 	.word	0x20000484
 80045a4:	20000540 	.word	0x20000540

080045a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80045b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <vApplicationGetTimerTaskMemory+0x30>)
 80045be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20000740 	.word	0x20000740
 80045d8:	200007fc 	.word	0x200007fc

080045dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0208 	add.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 0208 	add.w	r2, r3, #8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f103 0208 	add.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004694:	d103      	bne.n	800469e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e00c      	b.n	80046b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3308      	adds	r3, #8
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e002      	b.n	80046ac <vListInsert+0x2e>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d2f6      	bcs.n	80046a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6852      	ldr	r2, [r2, #4]
 8004710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d103      	bne.n	8004724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800476e:	f002 f879 	bl	8006864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	3b01      	subs	r3, #1
 80047a0:	68f9      	ldr	r1, [r7, #12]
 80047a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22ff      	movs	r2, #255	; 0xff
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	22ff      	movs	r2, #255	; 0xff
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d114      	bne.n	80047ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01a      	beq.n	8004802 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3310      	adds	r3, #16
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f929 	bl	8005a28 <xTaskRemoveFromEventList>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d012      	beq.n	8004802 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <xQueueGenericReset+0xcc>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	e009      	b.n	8004802 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3310      	adds	r3, #16
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fef2 	bl	80045dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3324      	adds	r3, #36	; 0x24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff feed 	bl	80045dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004802:	f002 f85f 	bl	80068c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004806:	2301      	movs	r3, #1
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	; 0x38
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <xQueueGenericCreateStatic+0x52>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <xQueueGenericCreateStatic+0x56>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericCreateStatic+0x58>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <xQueueGenericCreateStatic+0x7e>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <xQueueGenericCreateStatic+0x82>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <xQueueGenericCreateStatic+0x84>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	61fb      	str	r3, [r7, #28]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048b2:	2350      	movs	r3, #80	; 0x50
 80048b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d00a      	beq.n	80048d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	61bb      	str	r3, [r7, #24]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f805 	bl	8004904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3730      	adds	r7, #48	; 0x30
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e002      	b.n	8004926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004932:	2101      	movs	r1, #1
 8004934:	69b8      	ldr	r0, [r7, #24]
 8004936:	f7ff ff05 	bl	8004744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08e      	sub	sp, #56	; 0x38
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800495a:	2300      	movs	r3, #0
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueGenericSend+0x32>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <xQueueGenericSend+0x40>
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <xQueueGenericSend+0x44>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <xQueueGenericSend+0x46>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <xQueueGenericSend+0x60>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d103      	bne.n	80049ba <xQueueGenericSend+0x6e>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <xQueueGenericSend+0x72>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueGenericSend+0x74>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueGenericSend+0x8e>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	623b      	str	r3, [r7, #32]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049da:	f001 f9e7 	bl	8005dac <xTaskGetSchedulerState>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <xQueueGenericSend+0x9e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <xQueueGenericSend+0xa2>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericSend+0xa4>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericSend+0xbe>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61fb      	str	r3, [r7, #28]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a0a:	f001 ff2b 	bl	8006864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <xQueueGenericSend+0xd4>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d129      	bne.n	8004a74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a26:	f000 fa0b 	bl	8004e40 <prvCopyDataToQueue>
 8004a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fff5 	bl	8005a28 <xTaskRemoveFromEventList>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a44:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <xQueueGenericSend+0x1f8>)
 8004a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	e00a      	b.n	8004a6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <xQueueGenericSend+0x1f8>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a6c:	f001 ff2a 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e063      	b.n	8004b3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a7a:	f001 ff23 	bl	80068c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e05c      	b.n	8004b3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 f82f 	bl	8005af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a92:	2301      	movs	r3, #1
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a96:	f001 ff15 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a9a:	f000 fd9b 	bl	80055d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a9e:	f001 fee1 	bl	8006864 <vPortEnterCritical>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aae:	d103      	bne.n	8004ab8 <xQueueGenericSend+0x16c>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSend+0x182>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ace:	f001 fef9 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad2:	1d3a      	adds	r2, r7, #4
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f81e 	bl	8005b1c <xTaskCheckForTimeOut>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d124      	bne.n	8004b30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae8:	f000 faa2 	bl	8005030 <prvIsQueueFull>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	3310      	adds	r3, #16
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 ff44 	bl	8005988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b02:	f000 fa2d 	bl	8004f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b06:	f000 fd73 	bl	80055f0 <xTaskResumeAll>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f af7c 	bne.w	8004a0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <xQueueGenericSend+0x1f8>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	e772      	b.n	8004a0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b26:	f000 fa1b 	bl	8004f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b2a:	f000 fd61 	bl	80055f0 <xTaskResumeAll>
 8004b2e:	e76c      	b.n	8004a0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b32:	f000 fa15 	bl	8004f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b36:	f000 fd5b 	bl	80055f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3738      	adds	r7, #56	; 0x38
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b090      	sub	sp, #64	; 0x40
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <xQueueGenericSendFromISR+0x3c>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <xQueueGenericSendFromISR+0x40>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <xQueueGenericSendFromISR+0x42>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d103      	bne.n	8004bb2 <xQueueGenericSendFromISR+0x6a>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <xQueueGenericSendFromISR+0x6e>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueGenericSendFromISR+0x70>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	623b      	str	r3, [r7, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bd2:	f001 ff29 	bl	8006a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	61fa      	str	r2, [r7, #28]
 8004bec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <xQueueGenericSendFromISR+0xbc>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d12f      	bne.n	8004c64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c1a:	f000 f911 	bl	8004e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c26:	d112      	bne.n	8004c4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d016      	beq.n	8004c5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	3324      	adds	r3, #36	; 0x24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fef7 	bl	8005a28 <xTaskRemoveFromEventList>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00e      	beq.n	8004c5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e007      	b.n	8004c5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c52:	3301      	adds	r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	b25a      	sxtb	r2, r3
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c62:	e001      	b.n	8004c68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3740      	adds	r7, #64	; 0x40
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <xQueueReceive+0x30>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	623b      	str	r3, [r7, #32]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueReceive+0x3e>
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <xQueueReceive+0x42>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueReceive+0x44>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xQueueReceive+0x5e>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61fb      	str	r3, [r7, #28]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cde:	f001 f865 	bl	8005dac <xTaskGetSchedulerState>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <xQueueReceive+0x6e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueReceive+0x72>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueReceive+0x74>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xQueueReceive+0x8e>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61bb      	str	r3, [r7, #24]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d0e:	f001 fda9 	bl	8006864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01f      	beq.n	8004d5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d22:	f000 f8f7 	bl	8004f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1e5a      	subs	r2, r3, #1
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00f      	beq.n	8004d56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	3310      	adds	r3, #16
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fe74 	bl	8005a28 <xTaskRemoveFromEventList>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d46:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <xQueueReceive+0x1bc>)
 8004d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d56:	f001 fdb5 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e069      	b.n	8004e32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d64:	f001 fdae 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e062      	b.n	8004e32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d72:	f107 0310 	add.w	r3, r7, #16
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 feba 	bl	8005af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d80:	f001 fda0 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d84:	f000 fc26 	bl	80055d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d88:	f001 fd6c 	bl	8006864 <vPortEnterCritical>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d98:	d103      	bne.n	8004da2 <xQueueReceive+0x122>
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da8:	b25b      	sxtb	r3, r3
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dae:	d103      	bne.n	8004db8 <xQueueReceive+0x138>
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	f001 fd84 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dbc:	1d3a      	adds	r2, r7, #4
 8004dbe:	f107 0310 	add.w	r3, r7, #16
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fea9 	bl	8005b1c <xTaskCheckForTimeOut>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d123      	bne.n	8004e18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd2:	f000 f917 	bl	8005004 <prvIsQueueEmpty>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	3324      	adds	r3, #36	; 0x24
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fdcf 	bl	8005988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dec:	f000 f8b8 	bl	8004f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004df0:	f000 fbfe 	bl	80055f0 <xTaskResumeAll>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d189      	bne.n	8004d0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <xQueueReceive+0x1bc>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	e780      	b.n	8004d0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0e:	f000 f8a7 	bl	8004f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e12:	f000 fbed 	bl	80055f0 <xTaskResumeAll>
 8004e16:	e77a      	b.n	8004d0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1a:	f000 f8a1 	bl	8004f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1e:	f000 fbe7 	bl	80055f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e24:	f000 f8ee 	bl	8005004 <prvIsQueueEmpty>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f43f af6f 	beq.w	8004d0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3730      	adds	r7, #48	; 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d14d      	bne.n	8004f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 ffbc 	bl	8005de8 <xTaskPriorityDisinherit>
 8004e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	e043      	b.n	8004f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d119      	bne.n	8004eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6858      	ldr	r0, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	f002 f936 	bl	80070fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	441a      	add	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d32b      	bcc.n	8004f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e026      	b.n	8004f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68d8      	ldr	r0, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	f002 f91c 	bl	80070fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	425b      	negs	r3, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	425b      	negs	r3, r3
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d105      	bne.n	8004f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d303      	bcc.n	8004f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68d9      	ldr	r1, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	461a      	mov	r2, r3
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f002 f8d2 	bl	80070fc <memcpy>
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f68:	f001 fc7c 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f74:	e011      	b.n	8004f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fd50 	bl	8005a28 <xTaskRemoveFromEventList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f8e:	f000 fe27 	bl	8005be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dce9      	bgt.n	8004f76 <prvUnlockQueue+0x16>
 8004fa2:	e000      	b.n	8004fa6 <prvUnlockQueue+0x46>
					break;
 8004fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	22ff      	movs	r2, #255	; 0xff
 8004faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fc89 	bl	80068c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb2:	f001 fc57 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fbe:	e011      	b.n	8004fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fd2b 	bl	8005a28 <xTaskRemoveFromEventList>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fd8:	f000 fe02 	bl	8005be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fdc:	7bbb      	ldrb	r3, [r7, #14]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dce9      	bgt.n	8004fc0 <prvUnlockQueue+0x60>
 8004fec:	e000      	b.n	8004ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ff8:	f001 fc64 	bl	80068c4 <vPortExitCritical>
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800500c:	f001 fc2a 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e001      	b.n	8005022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005022:	f001 fc4f 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005038:	f001 fc14 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	429a      	cmp	r2, r3
 8005046:	d102      	bne.n	800504e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f001 fc37 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8005056:	68fb      	ldr	r3, [r7, #12]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e014      	b.n	800509a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <vQueueAddToRegistry+0x50>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800507c:	490c      	ldr	r1, [pc, #48]	; (80050b0 <vQueueAddToRegistry+0x50>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <vQueueAddToRegistry+0x50>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005092:	e006      	b.n	80050a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b07      	cmp	r3, #7
 800509e:	d9e7      	bls.n	8005070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000bfc 	.word	0x20000bfc

080050b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050c4:	f001 fbce 	bl	8006864 <vPortEnterCritical>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ce:	b25b      	sxtb	r3, r3
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d4:	d103      	bne.n	80050de <vQueueWaitForMessageRestricted+0x2a>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ea:	d103      	bne.n	80050f4 <vQueueWaitForMessageRestricted+0x40>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f4:	f001 fbe6 	bl	80068c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fc61 	bl	80059d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff ff26 	bl	8004f60 <prvUnlockQueue>
	}
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	623b      	str	r3, [r7, #32]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xTaskCreateStatic+0x46>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	61fb      	str	r3, [r7, #28]
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005162:	23bc      	movs	r3, #188	; 0xbc
 8005164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2bbc      	cmp	r3, #188	; 0xbc
 800516a:	d00a      	beq.n	8005182 <xTaskCreateStatic+0x66>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	61bb      	str	r3, [r7, #24]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005182:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01e      	beq.n	80051c8 <xTaskCreateStatic+0xac>
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005198:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	2202      	movs	r2, #2
 800519e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051a2:	2300      	movs	r3, #0
 80051a4:	9303      	str	r3, [sp, #12]
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	9302      	str	r3, [sp, #8]
 80051aa:	f107 0314 	add.w	r3, r7, #20
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f850 	bl	8005260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c2:	f000 f8f3 	bl	80053ac <prvAddNewTaskToReadyList>
 80051c6:	e001      	b.n	80051cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051cc:	697b      	ldr	r3, [r7, #20]
	}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b08c      	sub	sp, #48	; 0x30
 80051da:	af04      	add	r7, sp, #16
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fc5c 	bl	8006aa8 <pvPortMalloc>
 80051f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051f8:	20bc      	movs	r0, #188	; 0xbc
 80051fa:	f001 fc55 	bl	8006aa8 <pvPortMalloc>
 80051fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
 800520c:	e005      	b.n	800521a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f001 fd16 	bl	8006c40 <vPortFree>
 8005214:	e001      	b.n	800521a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d017      	beq.n	8005250 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	2300      	movs	r3, #0
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f80e 	bl	8005260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005244:	69f8      	ldr	r0, [r7, #28]
 8005246:	f000 f8b1 	bl	80053ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800524a:	2301      	movs	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	e002      	b.n	8005256 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005254:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005256:	69bb      	ldr	r3, [r7, #24]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	461a      	mov	r2, r3
 8005278:	21a5      	movs	r1, #165	; 0xa5
 800527a:	f001 ff4d 	bl	8007118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005288:	3b01      	subs	r3, #1
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f023 0307 	bic.w	r3, r3, #7
 8005296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	617b      	str	r3, [r7, #20]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01f      	beq.n	80052fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e012      	b.n	80052ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	7819      	ldrb	r1, [r3, #0]
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	3334      	adds	r3, #52	; 0x34
 80052d4:	460a      	mov	r2, r1
 80052d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d9e9      	bls.n	80052c4 <prvInitialiseNewTask+0x64>
 80052f0:	e000      	b.n	80052f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80052f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	e003      	b.n	8005306 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	2b37      	cmp	r3, #55	; 0x37
 800530a:	d901      	bls.n	8005310 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800530c:	2337      	movs	r3, #55	; 0x37
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	2200      	movs	r2, #0
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff f978 	bl	800461c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	3318      	adds	r3, #24
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff f973 	bl	800461c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	3354      	adds	r3, #84	; 0x54
 8005360:	2260      	movs	r2, #96	; 0x60
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f001 fed7 	bl	8007118 <memset>
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <prvInitialiseNewTask+0x140>)
 800536e:	659a      	str	r2, [r3, #88]	; 0x58
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <prvInitialiseNewTask+0x144>)
 8005374:	65da      	str	r2, [r3, #92]	; 0x5c
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <prvInitialiseNewTask+0x148>)
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f001 f941 	bl	8006608 <pxPortInitialiseStack>
 8005386:	4602      	mov	r2, r0
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005398:	bf00      	nop
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	0800b470 	.word	0x0800b470
 80053a4:	0800b490 	.word	0x0800b490
 80053a8:	0800b450 	.word	0x0800b450

080053ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053b4:	f001 fa56 	bl	8006864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053b8:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <prvAddNewTaskToReadyList+0xc4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a2c      	ldr	r2, [pc, #176]	; (8005470 <prvAddNewTaskToReadyList+0xc4>)
 80053c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053c2:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <prvAddNewTaskToReadyList+0xc8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ca:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <prvAddNewTaskToReadyList+0xc8>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvAddNewTaskToReadyList+0xc4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d110      	bne.n	80053fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053d8:	f000 fc26 	bl	8005c28 <prvInitialiseTaskLists>
 80053dc:	e00d      	b.n	80053fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <prvAddNewTaskToReadyList+0xcc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053e6:	4b23      	ldr	r3, [pc, #140]	; (8005474 <prvAddNewTaskToReadyList+0xc8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d802      	bhi.n	80053fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <prvAddNewTaskToReadyList+0xc8>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <prvAddNewTaskToReadyList+0xd0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3301      	adds	r3, #1
 8005400:	4a1e      	ldr	r2, [pc, #120]	; (800547c <prvAddNewTaskToReadyList+0xd0>)
 8005402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <prvAddNewTaskToReadyList+0xd0>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <prvAddNewTaskToReadyList+0xd4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <prvAddNewTaskToReadyList+0x74>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a18      	ldr	r2, [pc, #96]	; (8005480 <prvAddNewTaskToReadyList+0xd4>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <prvAddNewTaskToReadyList+0xd8>)
 800542e:	441a      	add	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7ff f8fd 	bl	8004636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800543c:	f001 fa42 	bl	80068c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <prvAddNewTaskToReadyList+0xcc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvAddNewTaskToReadyList+0xc8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	429a      	cmp	r2, r3
 8005454:	d207      	bcs.n	8005466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvAddNewTaskToReadyList+0xdc>)
 8005458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20001110 	.word	0x20001110
 8005474:	20000c3c 	.word	0x20000c3c
 8005478:	2000111c 	.word	0x2000111c
 800547c:	2000112c 	.word	0x2000112c
 8005480:	20001118 	.word	0x20001118
 8005484:	20000c40 	.word	0x20000c40
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <vTaskDelay+0x60>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <vTaskDelay+0x30>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054bc:	f000 f88a 	bl	80055d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c0:	2100      	movs	r1, #0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fcfe 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054c8:	f000 f892 	bl	80055f0 <xTaskResumeAll>
 80054cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <vTaskDelay+0x64>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20001138 	.word	0x20001138
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005502:	463a      	mov	r2, r7
 8005504:	1d39      	adds	r1, r7, #4
 8005506:	f107 0308 	add.w	r3, r7, #8
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f832 	bl	8004574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	9202      	str	r2, [sp, #8]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	2300      	movs	r3, #0
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	460a      	mov	r2, r1
 8005522:	4924      	ldr	r1, [pc, #144]	; (80055b4 <vTaskStartScheduler+0xc0>)
 8005524:	4824      	ldr	r0, [pc, #144]	; (80055b8 <vTaskStartScheduler+0xc4>)
 8005526:	f7ff fdf9 	bl	800511c <xTaskCreateStatic>
 800552a:	4603      	mov	r3, r0
 800552c:	4a23      	ldr	r2, [pc, #140]	; (80055bc <vTaskStartScheduler+0xc8>)
 800552e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <vTaskStartScheduler+0xc8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e001      	b.n	8005542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d102      	bne.n	800554e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005548:	f000 fd10 	bl	8005f6c <xTimerCreateTimerTask>
 800554c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d11b      	bne.n	800558c <vTaskStartScheduler+0x98>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	613b      	str	r3, [r7, #16]
}
 8005566:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <vTaskStartScheduler+0xcc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3354      	adds	r3, #84	; 0x54
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <vTaskStartScheduler+0xd0>)
 8005570:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <vTaskStartScheduler+0xd4>)
 8005574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <vTaskStartScheduler+0xd8>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <vTaskStartScheduler+0xdc>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005586:	f001 f8cb 	bl	8006720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800558a:	e00e      	b.n	80055aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005592:	d10a      	bne.n	80055aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <vTaskStartScheduler+0xb4>
}
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	0800b3a8 	.word	0x0800b3a8
 80055b8:	08005bf9 	.word	0x08005bf9
 80055bc:	20001134 	.word	0x20001134
 80055c0:	20000c3c 	.word	0x20000c3c
 80055c4:	20000014 	.word	0x20000014
 80055c8:	20001130 	.word	0x20001130
 80055cc:	2000111c 	.word	0x2000111c
 80055d0:	20001114 	.word	0x20001114

080055d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <vTaskSuspendAll+0x18>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a03      	ldr	r2, [pc, #12]	; (80055ec <vTaskSuspendAll+0x18>)
 80055e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055e2:	bf00      	nop
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20001138 	.word	0x20001138

080055f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055fe:	4b42      	ldr	r3, [pc, #264]	; (8005708 <xTaskResumeAll+0x118>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <xTaskResumeAll+0x2c>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	603b      	str	r3, [r7, #0]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800561c:	f001 f922 	bl	8006864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <xTaskResumeAll+0x118>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	4a38      	ldr	r2, [pc, #224]	; (8005708 <xTaskResumeAll+0x118>)
 8005628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <xTaskResumeAll+0x118>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d162      	bne.n	80056f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <xTaskResumeAll+0x11c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d05e      	beq.n	80056f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800563a:	e02f      	b.n	800569c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563c:	4b34      	ldr	r3, [pc, #208]	; (8005710 <xTaskResumeAll+0x120>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3318      	adds	r3, #24
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f851 	bl	80046f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff f84c 	bl	80046f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <xTaskResumeAll+0x124>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <xTaskResumeAll+0x7c>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <xTaskResumeAll+0x124>)
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <xTaskResumeAll+0x128>)
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe ffd7 	bl	8004636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <xTaskResumeAll+0x12c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <xTaskResumeAll+0x130>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <xTaskResumeAll+0x120>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1cb      	bne.n	800563c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056aa:	f000 fb5f 	bl	8005d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <xTaskResumeAll+0x134>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ba:	f000 f847 	bl	800574c <xTaskIncrementTick>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <xTaskResumeAll+0x130>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f1      	bne.n	80056ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <xTaskResumeAll+0x134>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xTaskResumeAll+0x130>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <xTaskResumeAll+0x138>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f8:	f001 f8e4 	bl	80068c4 <vPortExitCritical>

	return xAlreadyYielded;
 80056fc:	68bb      	ldr	r3, [r7, #8]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20001138 	.word	0x20001138
 800570c:	20001110 	.word	0x20001110
 8005710:	200010d0 	.word	0x200010d0
 8005714:	20001118 	.word	0x20001118
 8005718:	20000c40 	.word	0x20000c40
 800571c:	20000c3c 	.word	0x20000c3c
 8005720:	20001124 	.word	0x20001124
 8005724:	20001120 	.word	0x20001120
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <xTaskGetTickCount+0x1c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20001114 	.word	0x20001114

0800574c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005756:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <xTaskIncrementTick+0x148>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 808f 	bne.w	800587e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005760:	4b4d      	ldr	r3, [pc, #308]	; (8005898 <xTaskIncrementTick+0x14c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005768:	4a4b      	ldr	r2, [pc, #300]	; (8005898 <xTaskIncrementTick+0x14c>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d120      	bne.n	80057b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005774:	4b49      	ldr	r3, [pc, #292]	; (800589c <xTaskIncrementTick+0x150>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <xTaskIncrementTick+0x48>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	603b      	str	r3, [r7, #0]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <xTaskIncrementTick+0x46>
 8005794:	4b41      	ldr	r3, [pc, #260]	; (800589c <xTaskIncrementTick+0x150>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <xTaskIncrementTick+0x154>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3f      	ldr	r2, [pc, #252]	; (800589c <xTaskIncrementTick+0x150>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4a3f      	ldr	r2, [pc, #252]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a3d      	ldr	r2, [pc, #244]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	f000 fadb 	bl	8005d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057b6:	4b3c      	ldr	r3, [pc, #240]	; (80058a8 <xTaskIncrementTick+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d349      	bcc.n	8005854 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <xTaskIncrementTick+0x150>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <xTaskIncrementTick+0x15c>)
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d0:	601a      	str	r2, [r3, #0]
					break;
 80057d2:	e03f      	b.n	8005854 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b31      	ldr	r3, [pc, #196]	; (800589c <xTaskIncrementTick+0x150>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d203      	bcs.n	80057f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ec:	4a2e      	ldr	r2, [pc, #184]	; (80058a8 <xTaskIncrementTick+0x15c>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f2:	e02f      	b.n	8005854 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe ff79 	bl	80046f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3318      	adds	r3, #24
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe ff70 	bl	80046f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <xTaskIncrementTick+0x160>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d903      	bls.n	8005824 <xTaskIncrementTick+0xd8>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a22      	ldr	r2, [pc, #136]	; (80058ac <xTaskIncrementTick+0x160>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <xTaskIncrementTick+0x164>)
 8005832:	441a      	add	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fefb 	bl	8004636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <xTaskIncrementTick+0x168>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	d3b8      	bcc.n	80057c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005852:	e7b5      	b.n	80057c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <xTaskIncrementTick+0x168>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	4915      	ldr	r1, [pc, #84]	; (80058b0 <xTaskIncrementTick+0x164>)
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d901      	bls.n	8005870 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <xTaskIncrementTick+0x16c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e004      	b.n	8005888 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskIncrementTick+0x170>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <xTaskIncrementTick+0x170>)
 8005886:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20001138 	.word	0x20001138
 8005898:	20001114 	.word	0x20001114
 800589c:	200010c8 	.word	0x200010c8
 80058a0:	200010cc 	.word	0x200010cc
 80058a4:	20001128 	.word	0x20001128
 80058a8:	20001130 	.word	0x20001130
 80058ac:	20001118 	.word	0x20001118
 80058b0:	20000c40 	.word	0x20000c40
 80058b4:	20000c3c 	.word	0x20000c3c
 80058b8:	20001124 	.word	0x20001124
 80058bc:	20001120 	.word	0x20001120

080058c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058c6:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <vTaskSwitchContext+0xb0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ce:	4b29      	ldr	r3, [pc, #164]	; (8005974 <vTaskSwitchContext+0xb4>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058d4:	e046      	b.n	8005964 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058d6:	4b27      	ldr	r3, [pc, #156]	; (8005974 <vTaskSwitchContext+0xb4>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	4b26      	ldr	r3, [pc, #152]	; (8005978 <vTaskSwitchContext+0xb8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e010      	b.n	8005906 <vTaskSwitchContext+0x46>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <vTaskSwitchContext+0x40>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	607b      	str	r3, [r7, #4]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vTaskSwitchContext+0x3e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b01      	subs	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	491d      	ldr	r1, [pc, #116]	; (800597c <vTaskSwitchContext+0xbc>)
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0e4      	beq.n	80058e4 <vTaskSwitchContext+0x24>
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <vTaskSwitchContext+0xbc>)
 8005926:	4413      	add	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3308      	adds	r3, #8
 800593c:	429a      	cmp	r2, r3
 800593e:	d104      	bne.n	800594a <vTaskSwitchContext+0x8a>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <vTaskSwitchContext+0xc0>)
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4a08      	ldr	r2, [pc, #32]	; (8005978 <vTaskSwitchContext+0xb8>)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <vTaskSwitchContext+0xc0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3354      	adds	r3, #84	; 0x54
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <vTaskSwitchContext+0xc4>)
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20001138 	.word	0x20001138
 8005974:	20001124 	.word	0x20001124
 8005978:	20001118 	.word	0x20001118
 800597c:	20000c40 	.word	0x20000c40
 8005980:	20000c3c 	.word	0x20000c3c
 8005984:	20000014 	.word	0x20000014

08005988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <vTaskPlaceOnEventList+0x44>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fe fe61 	bl	800467e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059bc:	2101      	movs	r1, #1
 80059be:	6838      	ldr	r0, [r7, #0]
 80059c0:	f000 fa80 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000c3c 	.word	0x20000c3c

080059d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	617b      	str	r3, [r7, #20]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <vTaskPlaceOnEventListRestricted+0x54>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3318      	adds	r3, #24
 80059fe:	4619      	mov	r1, r3
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7fe fe18 	bl	8004636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f000 fa55 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
	}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000c3c 	.word	0x20000c3c

08005a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	60fb      	str	r3, [r7, #12]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3318      	adds	r3, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fe49 	bl	80046f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <xTaskRemoveFromEventList+0xb0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11d      	bne.n	8005aa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fe40 	bl	80046f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <xTaskRemoveFromEventList+0xb4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d903      	bls.n	8005a84 <xTaskRemoveFromEventList+0x5c>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a16      	ldr	r2, [pc, #88]	; (8005adc <xTaskRemoveFromEventList+0xb4>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <xTaskRemoveFromEventList+0xb8>)
 8005a92:	441a      	add	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7fe fdcb 	bl	8004636 <vListInsertEnd>
 8005aa0:	e005      	b.n	8005aae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3318      	adds	r3, #24
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	480e      	ldr	r0, [pc, #56]	; (8005ae4 <xTaskRemoveFromEventList+0xbc>)
 8005aaa:	f7fe fdc4 	bl	8004636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <xTaskRemoveFromEventList+0xc0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d905      	bls.n	8005ac8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <xTaskRemoveFromEventList+0xc4>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e001      	b.n	8005acc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005acc:	697b      	ldr	r3, [r7, #20]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20001138 	.word	0x20001138
 8005adc:	20001118 	.word	0x20001118
 8005ae0:	20000c40 	.word	0x20000c40
 8005ae4:	200010d0 	.word	0x200010d0
 8005ae8:	20000c3c 	.word	0x20000c3c
 8005aec:	20001124 	.word	0x20001124

08005af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <vTaskInternalSetTimeOutState+0x24>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <vTaskInternalSetTimeOutState+0x28>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	605a      	str	r2, [r3, #4]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20001128 	.word	0x20001128
 8005b18:	20001114 	.word	0x20001114

08005b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	613b      	str	r3, [r7, #16]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60fb      	str	r3, [r7, #12]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b5e:	f000 fe81 	bl	8006864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b62:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <xTaskCheckForTimeOut+0xbc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7a:	d102      	bne.n	8005b82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e023      	b.n	8005bca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <xTaskCheckForTimeOut+0xc0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d007      	beq.n	8005b9e <xTaskCheckForTimeOut+0x82>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e015      	b.n	8005bca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d20b      	bcs.n	8005bc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff9b 	bl	8005af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e004      	b.n	8005bca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bca:	f000 fe7b 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8005bce:	69fb      	ldr	r3, [r7, #28]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20001114 	.word	0x20001114
 8005bdc:	20001128 	.word	0x20001128

08005be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <vTaskMissedYield+0x14>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20001124 	.word	0x20001124

08005bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c00:	f000 f852 	bl	8005ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <prvIdleTask+0x28>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d9f9      	bls.n	8005c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <prvIdleTask+0x2c>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c1c:	e7f0      	b.n	8005c00 <prvIdleTask+0x8>
 8005c1e:	bf00      	nop
 8005c20:	20000c40 	.word	0x20000c40
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	e00c      	b.n	8005c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <prvInitialiseTaskLists+0x60>)
 8005c40:	4413      	add	r3, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fcca 	bl	80045dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b37      	cmp	r3, #55	; 0x37
 8005c52:	d9ef      	bls.n	8005c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c54:	480d      	ldr	r0, [pc, #52]	; (8005c8c <prvInitialiseTaskLists+0x64>)
 8005c56:	f7fe fcc1 	bl	80045dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c5a:	480d      	ldr	r0, [pc, #52]	; (8005c90 <prvInitialiseTaskLists+0x68>)
 8005c5c:	f7fe fcbe 	bl	80045dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c60:	480c      	ldr	r0, [pc, #48]	; (8005c94 <prvInitialiseTaskLists+0x6c>)
 8005c62:	f7fe fcbb 	bl	80045dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c66:	480c      	ldr	r0, [pc, #48]	; (8005c98 <prvInitialiseTaskLists+0x70>)
 8005c68:	f7fe fcb8 	bl	80045dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c6c:	480b      	ldr	r0, [pc, #44]	; (8005c9c <prvInitialiseTaskLists+0x74>)
 8005c6e:	f7fe fcb5 	bl	80045dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c72:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <prvInitialiseTaskLists+0x78>)
 8005c74:	4a05      	ldr	r2, [pc, #20]	; (8005c8c <prvInitialiseTaskLists+0x64>)
 8005c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <prvInitialiseTaskLists+0x7c>)
 8005c7a:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <prvInitialiseTaskLists+0x68>)
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000c40 	.word	0x20000c40
 8005c8c:	200010a0 	.word	0x200010a0
 8005c90:	200010b4 	.word	0x200010b4
 8005c94:	200010d0 	.word	0x200010d0
 8005c98:	200010e4 	.word	0x200010e4
 8005c9c:	200010fc 	.word	0x200010fc
 8005ca0:	200010c8 	.word	0x200010c8
 8005ca4:	200010cc 	.word	0x200010cc

08005ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cae:	e019      	b.n	8005ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb0:	f000 fdd8 	bl	8006864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <prvCheckTasksWaitingTermination+0x50>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fd15 	bl	80046f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <prvCheckTasksWaitingTermination+0x54>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <prvCheckTasksWaitingTermination+0x54>)
 8005cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <prvCheckTasksWaitingTermination+0x58>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <prvCheckTasksWaitingTermination+0x58>)
 8005cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cda:	f000 fdf3 	bl	80068c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f810 	bl	8005d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <prvCheckTasksWaitingTermination+0x58>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e1      	bne.n	8005cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200010e4 	.word	0x200010e4
 8005cfc:	20001110 	.word	0x20001110
 8005d00:	200010f8 	.word	0x200010f8

08005d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3354      	adds	r3, #84	; 0x54
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 fa49 	bl	80081a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 ff8b 	bl	8006c40 <vPortFree>
				vPortFree( pxTCB );
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 ff88 	bl	8006c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d30:	e018      	b.n	8005d64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d103      	bne.n	8005d44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 ff7f 	bl	8006c40 <vPortFree>
	}
 8005d42:	e00f      	b.n	8005d64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d00a      	beq.n	8005d64 <prvDeleteTCB+0x60>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <prvDeleteTCB+0x5e>
	}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d84:	e008      	b.n	8005d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200010c8 	.word	0x200010c8
 8005da8:	20001130 	.word	0x20001130

08005dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <xTaskGetSchedulerState+0x34>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e008      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <xTaskGetSchedulerState+0x38>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e001      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd2:	687b      	ldr	r3, [r7, #4]
	}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	2000111c 	.word	0x2000111c
 8005de4:	20001138 	.word	0x20001138

08005de8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d056      	beq.n	8005eac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <xTaskPriorityDisinherit+0xd0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d00a      	beq.n	8005e1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60bb      	str	r3, [r7, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d02c      	beq.n	8005eac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d128      	bne.n	8005eac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fc46 	bl	80046f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <xTaskPriorityDisinherit+0xd4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d903      	bls.n	8005e8c <xTaskPriorityDisinherit+0xa4>
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <xTaskPriorityDisinherit+0xd4>)
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <xTaskPriorityDisinherit+0xd8>)
 8005e9a:	441a      	add	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fe fbc7 	bl	8004636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eac:	697b      	ldr	r3, [r7, #20]
	}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000c3c 	.word	0x20000c3c
 8005ebc:	20001118 	.word	0x20001118
 8005ec0:	20000c40 	.word	0x20000c40

08005ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ece:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc08 	bl	80046f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d10a      	bne.n	8005efe <prvAddCurrentTaskToDelayedList+0x3a>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eee:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4819      	ldr	r0, [pc, #100]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ef8:	f7fe fb9d 	bl	8004636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005efc:	e026      	b.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d209      	bcs.n	8005f2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe fbab 	bl	800467e <vListInsert>
}
 8005f28:	e010      	b.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f7fe fba1 	bl	800467e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d202      	bcs.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20001114 	.word	0x20001114
 8005f58:	20000c3c 	.word	0x20000c3c
 8005f5c:	200010fc 	.word	0x200010fc
 8005f60:	200010cc 	.word	0x200010cc
 8005f64:	200010c8 	.word	0x200010c8
 8005f68:	20001130 	.word	0x20001130

08005f6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f76:	f000 fb07 	bl	8006588 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <xTimerCreateTimerTask+0x80>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d021      	beq.n	8005fc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f8a:	1d3a      	adds	r2, r7, #4
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fb07 	bl	80045a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	9202      	str	r2, [sp, #8]
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	460a      	mov	r2, r1
 8005fac:	4910      	ldr	r1, [pc, #64]	; (8005ff0 <xTimerCreateTimerTask+0x84>)
 8005fae:	4811      	ldr	r0, [pc, #68]	; (8005ff4 <xTimerCreateTimerTask+0x88>)
 8005fb0:	f7ff f8b4 	bl	800511c <xTaskCreateStatic>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <xTimerCreateTimerTask+0x8c>)
 8005fb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fba:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <xTimerCreateTimerTask+0x8c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	613b      	str	r3, [r7, #16]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fe2:	697b      	ldr	r3, [r7, #20]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000116c 	.word	0x2000116c
 8005ff0:	0800b3b0 	.word	0x0800b3b0
 8005ff4:	08006131 	.word	0x08006131
 8005ff8:	20001170 	.word	0x20001170

08005ffc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800602a:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <xTimerGenericCommand+0x98>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02a      	beq.n	8006088 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b05      	cmp	r3, #5
 8006042:	dc18      	bgt.n	8006076 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006044:	f7ff feb2 	bl	8005dac <xTaskGetSchedulerState>
 8006048:	4603      	mov	r3, r0
 800604a:	2b02      	cmp	r3, #2
 800604c:	d109      	bne.n	8006062 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800604e:	4b11      	ldr	r3, [pc, #68]	; (8006094 <xTimerGenericCommand+0x98>)
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f107 0110 	add.w	r1, r7, #16
 8006056:	2300      	movs	r3, #0
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	f7fe fc77 	bl	800494c <xQueueGenericSend>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24
 8006060:	e012      	b.n	8006088 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	f7fe fc6d 	bl	800494c <xQueueGenericSend>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
 8006074:	e008      	b.n	8006088 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <xTimerGenericCommand+0x98>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f107 0110 	add.w	r1, r7, #16
 800607e:	2300      	movs	r3, #0
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	f7fe fd61 	bl	8004b48 <xQueueGenericSendFromISR>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800608a:	4618      	mov	r0, r3
 800608c:	3728      	adds	r7, #40	; 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	2000116c 	.word	0x2000116c

08006098 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a2:	4b22      	ldr	r3, [pc, #136]	; (800612c <prvProcessExpiredTimer+0x94>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fb1d 	bl	80046f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d022      	beq.n	800610a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	18d1      	adds	r1, r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	6978      	ldr	r0, [r7, #20]
 80060d2:	f000 f8d1 	bl	8006278 <prvInsertTimerInActiveList>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01f      	beq.n	800611c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	2100      	movs	r1, #0
 80060e6:	6978      	ldr	r0, [r7, #20]
 80060e8:	f7ff ff88 	bl	8005ffc <xTimerGenericCommand>
 80060ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d113      	bne.n	800611c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	b2da      	uxtb	r2, r3
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	4798      	blx	r3
}
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20001164 	.word	0x20001164

08006130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4618      	mov	r0, r3
 800613e:	f000 f857 	bl	80061f0 <prvGetNextExpireTime>
 8006142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f803 	bl	8006154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800614e:	f000 f8d5 	bl	80062fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006152:	e7f1      	b.n	8006138 <prvTimerTask+0x8>

08006154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800615e:	f7ff fa39 	bl	80055d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f866 	bl	8006238 <prvSampleTimeNow>
 800616c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d130      	bne.n	80061d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <prvProcessTimerOrBlockTask+0x3c>
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	429a      	cmp	r2, r3
 8006180:	d806      	bhi.n	8006190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006182:	f7ff fa35 	bl	80055f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff85 	bl	8006098 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800618e:	e024      	b.n	80061da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <prvProcessTimerOrBlockTask+0x90>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <prvProcessTimerOrBlockTask+0x50>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <prvProcessTimerOrBlockTask+0x52>
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <prvProcessTimerOrBlockTask+0x94>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f7fe ff7d 	bl	80050b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ba:	f7ff fa19 	bl	80055f0 <xTaskResumeAll>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <prvProcessTimerOrBlockTask+0x98>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
}
 80061d4:	e001      	b.n	80061da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061d6:	f7ff fa0b 	bl	80055f0 <xTaskResumeAll>
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20001168 	.word	0x20001168
 80061e8:	2000116c 	.word	0x2000116c
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <prvGetNextExpireTime+0x44>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <prvGetNextExpireTime+0x16>
 8006202:	2201      	movs	r2, #1
 8006204:	e000      	b.n	8006208 <prvGetNextExpireTime+0x18>
 8006206:	2200      	movs	r2, #0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <prvGetNextExpireTime+0x44>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	e001      	b.n	8006224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20001164 	.word	0x20001164

08006238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006240:	f7ff fa74 	bl	800572c <xTaskGetTickCount>
 8006244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <prvSampleTimeNow+0x3c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	429a      	cmp	r2, r3
 800624e:	d205      	bcs.n	800625c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006250:	f000 f936 	bl	80064c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e002      	b.n	8006262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006262:	4a04      	ldr	r2, [pc, #16]	; (8006274 <prvSampleTimeNow+0x3c>)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20001174 	.word	0x20001174

08006278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d812      	bhi.n	80062c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e01b      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <prvInsertTimerInActiveList+0x7c>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fe f9de 	bl	800467e <vListInsert>
 80062c2:	e012      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d206      	bcs.n	80062da <prvInsertTimerInActiveList+0x62>
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e007      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <prvInsertTimerInActiveList+0x80>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fe f9ca 	bl	800467e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ea:	697b      	ldr	r3, [r7, #20]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20001168 	.word	0x20001168
 80062f8:	20001164 	.word	0x20001164

080062fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006302:	e0ca      	b.n	800649a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da18      	bge.n	800633c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	3304      	adds	r3, #4
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61fb      	str	r3, [r7, #28]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006332:	6850      	ldr	r0, [r2, #4]
 8006334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006336:	6892      	ldr	r2, [r2, #8]
 8006338:	4611      	mov	r1, r2
 800633a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f2c0 80aa 	blt.w	8006498 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe f9cb 	bl	80046f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800635a:	463b      	mov	r3, r7
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff6b 	bl	8006238 <prvSampleTimeNow>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b09      	cmp	r3, #9
 8006368:	f200 8097 	bhi.w	800649a <prvProcessReceivedCommands+0x19e>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <prvProcessReceivedCommands+0x78>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	0800639d 	.word	0x0800639d
 8006378:	0800639d 	.word	0x0800639d
 800637c:	0800639d 	.word	0x0800639d
 8006380:	08006411 	.word	0x08006411
 8006384:	08006425 	.word	0x08006425
 8006388:	0800646f 	.word	0x0800646f
 800638c:	0800639d 	.word	0x0800639d
 8006390:	0800639d 	.word	0x0800639d
 8006394:	08006411 	.word	0x08006411
 8006398:	08006425 	.word	0x08006425
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	18d1      	adds	r1, r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063bc:	f7ff ff5c 	bl	8006278 <prvInsertTimerInActiveList>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d069      	beq.n	800649a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d05e      	beq.n	800649a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	441a      	add	r2, r3
 80063e4:	2300      	movs	r3, #0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2300      	movs	r3, #0
 80063ea:	2100      	movs	r1, #0
 80063ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ee:	f7ff fe05 	bl	8005ffc <xTimerGenericCommand>
 80063f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d14f      	bne.n	800649a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61bb      	str	r3, [r7, #24]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006422:	e03a      	b.n	800649a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	617b      	str	r3, [r7, #20]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	18d1      	adds	r1, r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006468:	f7ff ff06 	bl	8006278 <prvInsertTimerInActiveList>
					break;
 800646c:	e015      	b.n	800649a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800647c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647e:	f000 fbdf 	bl	8006c40 <vPortFree>
 8006482:	e00a      	b.n	800649a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006496:	e000      	b.n	800649a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800649a:	4b08      	ldr	r3, [pc, #32]	; (80064bc <prvProcessReceivedCommands+0x1c0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	1d39      	adds	r1, r7, #4
 80064a0:	2200      	movs	r2, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fbec 	bl	8004c80 <xQueueReceive>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f47f af2a 	bne.w	8006304 <prvProcessReceivedCommands+0x8>
	}
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3730      	adds	r7, #48	; 0x30
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2000116c 	.word	0x2000116c

080064c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064c6:	e048      	b.n	800655a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <prvSwitchTimerLists+0xc0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d2:	4b2b      	ldr	r3, [pc, #172]	; (8006580 <prvSwitchTimerLists+0xc0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3304      	adds	r3, #4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe f905 	bl	80046f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02e      	beq.n	800655a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d90e      	bls.n	800652c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800651a:	4b19      	ldr	r3, [pc, #100]	; (8006580 <prvSwitchTimerLists+0xc0>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fe f8aa 	bl	800467e <vListInsert>
 800652a:	e016      	b.n	800655a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800652c:	2300      	movs	r3, #0
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	2100      	movs	r1, #0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff fd60 	bl	8005ffc <xTimerGenericCommand>
 800653c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	603b      	str	r3, [r7, #0]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <prvSwitchTimerLists+0xc0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1b1      	bne.n	80064c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <prvSwitchTimerLists+0xc0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <prvSwitchTimerLists+0xc4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a04      	ldr	r2, [pc, #16]	; (8006580 <prvSwitchTimerLists+0xc0>)
 8006570:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <prvSwitchTimerLists+0xc4>)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	6013      	str	r3, [r2, #0]
}
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20001164 	.word	0x20001164
 8006584:	20001168 	.word	0x20001168

08006588 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800658e:	f000 f969 	bl	8006864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <prvCheckForValidListAndQueue+0x60>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d120      	bne.n	80065dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800659a:	4814      	ldr	r0, [pc, #80]	; (80065ec <prvCheckForValidListAndQueue+0x64>)
 800659c:	f7fe f81e 	bl	80045dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065a0:	4813      	ldr	r0, [pc, #76]	; (80065f0 <prvCheckForValidListAndQueue+0x68>)
 80065a2:	f7fe f81b 	bl	80045dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <prvCheckForValidListAndQueue+0x6c>)
 80065a8:	4a10      	ldr	r2, [pc, #64]	; (80065ec <prvCheckForValidListAndQueue+0x64>)
 80065aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <prvCheckForValidListAndQueue+0x70>)
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <prvCheckForValidListAndQueue+0x68>)
 80065b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <prvCheckForValidListAndQueue+0x74>)
 80065b8:	4a11      	ldr	r2, [pc, #68]	; (8006600 <prvCheckForValidListAndQueue+0x78>)
 80065ba:	2110      	movs	r1, #16
 80065bc:	200a      	movs	r0, #10
 80065be:	f7fe f929 	bl	8004814 <xQueueGenericCreateStatic>
 80065c2:	4603      	mov	r3, r0
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <prvCheckForValidListAndQueue+0x60>)
 80065c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065c8:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <prvCheckForValidListAndQueue+0x60>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <prvCheckForValidListAndQueue+0x60>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	490b      	ldr	r1, [pc, #44]	; (8006604 <prvCheckForValidListAndQueue+0x7c>)
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fd42 	bl	8005060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065dc:	f000 f972 	bl	80068c4 <vPortExitCritical>
}
 80065e0:	bf00      	nop
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000116c 	.word	0x2000116c
 80065ec:	2000113c 	.word	0x2000113c
 80065f0:	20001150 	.word	0x20001150
 80065f4:	20001164 	.word	0x20001164
 80065f8:	20001168 	.word	0x20001168
 80065fc:	20001218 	.word	0x20001218
 8006600:	20001178 	.word	0x20001178
 8006604:	0800b3b8 	.word	0x0800b3b8

08006608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3b04      	subs	r3, #4
 8006618:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3b04      	subs	r3, #4
 8006626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b04      	subs	r3, #4
 8006636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006638:	4a0c      	ldr	r2, [pc, #48]	; (800666c <pxPortInitialiseStack+0x64>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b14      	subs	r3, #20
 8006642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3b04      	subs	r3, #4
 800664e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f06f 0202 	mvn.w	r2, #2
 8006656:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b20      	subs	r3, #32
 800665c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	08006671 	.word	0x08006671

08006670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <prvTaskExitError+0x54>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006682:	d00a      	beq.n	800669a <prvTaskExitError+0x2a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <prvTaskExitError+0x28>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	60bb      	str	r3, [r7, #8]
}
 80066ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066ae:	bf00      	nop
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0fc      	beq.n	80066b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20000010 	.word	0x20000010
	...

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	bf00      	nop
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006726:	4b46      	ldr	r3, [pc, #280]	; (8006840 <xPortStartScheduler+0x120>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a46      	ldr	r2, [pc, #280]	; (8006844 <xPortStartScheduler+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10a      	bne.n	8006746 <xPortStartScheduler+0x26>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <xPortStartScheduler+0x120>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3f      	ldr	r2, [pc, #252]	; (8006848 <xPortStartScheduler+0x128>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10a      	bne.n	8006766 <xPortStartScheduler+0x46>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <xPortStartScheduler+0x12c>)
 8006768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b31      	ldr	r3, [pc, #196]	; (8006850 <xPortStartScheduler+0x130>)
 800678c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xPortStartScheduler+0x134>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006794:	e009      	b.n	80067aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <xPortStartScheduler+0x134>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <xPortStartScheduler+0x134>)
 800679e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d0ef      	beq.n	8006796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067b6:	4b27      	ldr	r3, [pc, #156]	; (8006854 <xPortStartScheduler+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1c3 0307 	rsb	r3, r3, #7
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d00a      	beq.n	80067d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60bb      	str	r3, [r7, #8]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <xPortStartScheduler+0x134>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <xPortStartScheduler+0x134>)
 80067e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <xPortStartScheduler+0x134>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <xPortStartScheduler+0x134>)
 80067ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <xPortStartScheduler+0x138>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <xPortStartScheduler+0x138>)
 80067fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <xPortStartScheduler+0x138>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <xPortStartScheduler+0x138>)
 8006808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800680c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800680e:	f000 f8dd 	bl	80069cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <xPortStartScheduler+0x13c>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006818:	f000 f8fc 	bl	8006a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <xPortStartScheduler+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <xPortStartScheduler+0x140>)
 8006822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006828:	f7ff ff66 	bl	80066f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800682c:	f7ff f848 	bl	80058c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006830:	f7ff ff1e 	bl	8006670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	e000ed00 	.word	0xe000ed00
 8006844:	410fc271 	.word	0x410fc271
 8006848:	410fc270 	.word	0x410fc270
 800684c:	e000e400 	.word	0xe000e400
 8006850:	20001268 	.word	0x20001268
 8006854:	2000126c 	.word	0x2000126c
 8006858:	e000ed20 	.word	0xe000ed20
 800685c:	20000010 	.word	0x20000010
 8006860:	e000ef34 	.word	0xe000ef34

08006864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <vPortEnterCritical+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <vPortEnterCritical+0x58>)
 8006886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vPortEnterCritical+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortEnterCritical+0x5c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <vPortEnterCritical+0x4a>
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000010 	.word	0x20000010
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <vPortExitCritical+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <vPortExitCritical+0x24>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <vPortExitCritical+0x50>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <vPortExitCritical+0x50>)
 80068f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <vPortExitCritical+0x42>
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f383 8811 	msr	BASEPRI, r3
}
 8006904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000010 	.word	0x20000010
	...

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f01e 0f10 	tst.w	lr, #16
 8006930:	bf08      	it	eq
 8006932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006944:	f380 8811 	msr	BASEPRI, r0
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f7fe ffb6 	bl	80058c0 <vTaskSwitchContext>
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f380 8811 	msr	BASEPRI, r0
 800695c:	bc09      	pop	{r0, r3}
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	6808      	ldr	r0, [r1, #0]
 8006962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	f01e 0f10 	tst.w	lr, #16
 800696a:	bf08      	it	eq
 800696c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006970:	f380 8809 	msr	PSP, r0
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst>:
 8006980:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe fed3 	bl	800574c <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <xPortSysTickHandler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <vPortSetupTimerInterrupt+0x44>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e010 	.word	0xe000e010
 8006a04:	e000e018 	.word	0xe000e018
 8006a08:	20000004 	.word	0x20000004
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	e000e014 	.word	0xe000e014

08006a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a24 <vPortEnableVFP+0x10>
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a22:	bf00      	nop
 8006a24:	e000ed88 	.word	0xe000ed88

08006a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d914      	bls.n	8006a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <vPortValidateInterruptPriority+0x70>)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <vPortValidateInterruptPriority+0x74>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	7afa      	ldrb	r2, [r7, #11]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20a      	bcs.n	8006a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <vPortValidateInterruptPriority+0x78>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <vPortValidateInterruptPriority+0x7c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90a      	bls.n	8006a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	603b      	str	r3, [r7, #0]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <vPortValidateInterruptPriority+0x60>
	}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	e000e3f0 	.word	0xe000e3f0
 8006a9c:	20001268 	.word	0x20001268
 8006aa0:	e000ed0c 	.word	0xe000ed0c
 8006aa4:	2000126c 	.word	0x2000126c

08006aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ab4:	f7fe fd8e 	bl	80055d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ab8:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <pvPortMalloc+0x180>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ac0:	f000 f920 	bl	8006d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ac4:	4b59      	ldr	r3, [pc, #356]	; (8006c2c <pvPortMalloc+0x184>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8093 	bne.w	8006bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01d      	beq.n	8006b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ad8:	2208      	movs	r2, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d014      	beq.n	8006b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f023 0307 	bic.w	r3, r3, #7
 8006af0:	3308      	adds	r3, #8
 8006af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <pvPortMalloc+0x6c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d06e      	beq.n	8006bf8 <pvPortMalloc+0x150>
 8006b1a:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <pvPortMalloc+0x188>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d869      	bhi.n	8006bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b24:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b28:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2e:	e004      	b.n	8006b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d903      	bls.n	8006b4c <pvPortMalloc+0xa4>
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f1      	bne.n	8006b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <pvPortMalloc+0x180>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d050      	beq.n	8006bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	2308      	movs	r3, #8
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d91f      	bls.n	8006bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	613b      	str	r3, [r7, #16]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f000 f908 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <pvPortMalloc+0x188>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <pvPortMalloc+0x190>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d203      	bcs.n	8006bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <pvPortMalloc+0x188>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <pvPortMalloc+0x190>)
 8006bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x184>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bf8:	f7fe fcfa 	bl	80055f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <pvPortMalloc+0x174>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60fb      	str	r3, [r7, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <pvPortMalloc+0x172>
	return pvReturn;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3728      	adds	r7, #40	; 0x28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20004e78 	.word	0x20004e78
 8006c2c:	20004e8c 	.word	0x20004e8c
 8006c30:	20004e7c 	.word	0x20004e7c
 8006c34:	20004e70 	.word	0x20004e70
 8006c38:	20004e80 	.word	0x20004e80
 8006c3c:	20004e84 	.word	0x20004e84

08006c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04d      	beq.n	8006cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c52:	2308      	movs	r3, #8
 8006c54:	425b      	negs	r3, r3
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <vPortFree+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <vPortFree+0x44>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60fb      	str	r3, [r7, #12]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <vPortFree+0x62>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60bb      	str	r3, [r7, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <vPortFree+0xb8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01e      	beq.n	8006cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11a      	bne.n	8006cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <vPortFree+0xb8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc8:	f7fe fc84 	bl	80055d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <vPortFree+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <vPortFree+0xbc>)
 8006cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cda:	6938      	ldr	r0, [r7, #16]
 8006cdc:	f000 f874 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <vPortFree+0xc0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <vPortFree+0xc0>)
 8006ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cea:	f7fe fc81 	bl	80055f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20004e8c 	.word	0x20004e8c
 8006cfc:	20004e7c 	.word	0x20004e7c
 8006d00:	20004e88 	.word	0x20004e88

08006d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <prvHeapInit+0xac>)
 8006d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <prvHeapInit+0xac>)
 8006d34:	4413      	add	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <prvHeapInit+0xb0>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <prvHeapInit+0xb0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d50:	2208      	movs	r2, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <prvHeapInit+0xb4>)
 8006d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <prvHeapInit+0xb4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d6e:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <prvHeapInit+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvHeapInit+0xb4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <prvHeapInit+0xb8>)
 8006d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <prvHeapInit+0xbc>)
 8006d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <prvHeapInit+0xc0>)
 8006d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	20001270 	.word	0x20001270
 8006db4:	20004e70 	.word	0x20004e70
 8006db8:	20004e78 	.word	0x20004e78
 8006dbc:	20004e80 	.word	0x20004e80
 8006dc0:	20004e7c 	.word	0x20004e7c
 8006dc4:	20004e8c 	.word	0x20004e8c

08006dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <prvInsertBlockIntoFreeList+0xac>)
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e002      	b.n	8006ddc <prvInsertBlockIntoFreeList+0x14>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d8f7      	bhi.n	8006dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d108      	bne.n	8006e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d118      	bne.n	8006e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d00d      	beq.n	8006e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	441a      	add	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e008      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e003      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d002      	beq.n	8006e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20004e70 	.word	0x20004e70
 8006e78:	20004e78 	.word	0x20004e78

08006e7c <difftime>:
 8006e7c:	1a80      	subs	r0, r0, r2
 8006e7e:	b508      	push	{r3, lr}
 8006e80:	eb61 0103 	sbc.w	r1, r1, r3
 8006e84:	f7f9 fb94 	bl	80005b0 <__aeabi_l2d>
 8006e88:	ec41 0b10 	vmov	d0, r0, r1
 8006e8c:	bd08      	pop	{r3, pc}
	...

08006e90 <__errno>:
 8006e90:	4b01      	ldr	r3, [pc, #4]	; (8006e98 <__errno+0x8>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000014 	.word	0x20000014

08006e9c <std>:
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eaa:	6083      	str	r3, [r0, #8]
 8006eac:	8181      	strh	r1, [r0, #12]
 8006eae:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb0:	81c2      	strh	r2, [r0, #14]
 8006eb2:	6183      	str	r3, [r0, #24]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	305c      	adds	r0, #92	; 0x5c
 8006eba:	f000 f92d 	bl	8007118 <memset>
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x38>)
 8006ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x3c>)
 8006ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x40>)
 8006ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x44>)
 8006ecc:	6224      	str	r4, [r4, #32]
 8006ece:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	080082e9 	.word	0x080082e9
 8006ed8:	0800830f 	.word	0x0800830f
 8006edc:	08008347 	.word	0x08008347
 8006ee0:	0800836b 	.word	0x0800836b

08006ee4 <_cleanup_r>:
 8006ee4:	4901      	ldr	r1, [pc, #4]	; (8006eec <_cleanup_r+0x8>)
 8006ee6:	f000 b8af 	b.w	8007048 <_fwalk_reent>
 8006eea:	bf00      	nop
 8006eec:	08009819 	.word	0x08009819

08006ef0 <__sfmoreglue>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	2268      	movs	r2, #104	; 0x68
 8006ef4:	1e4d      	subs	r5, r1, #1
 8006ef6:	4355      	muls	r5, r2
 8006ef8:	460e      	mov	r6, r1
 8006efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006efe:	f000 fbf1 	bl	80076e4 <_malloc_r>
 8006f02:	4604      	mov	r4, r0
 8006f04:	b140      	cbz	r0, 8006f18 <__sfmoreglue+0x28>
 8006f06:	2100      	movs	r1, #0
 8006f08:	e9c0 1600 	strd	r1, r6, [r0]
 8006f0c:	300c      	adds	r0, #12
 8006f0e:	60a0      	str	r0, [r4, #8]
 8006f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f14:	f000 f900 	bl	8007118 <memset>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}

08006f1c <__sfp_lock_acquire>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__sfp_lock_acquire+0x8>)
 8006f1e:	f000 b8d9 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 8006f22:	bf00      	nop
 8006f24:	20004e92 	.word	0x20004e92

08006f28 <__sfp_lock_release>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sfp_lock_release+0x8>)
 8006f2a:	f000 b8d5 	b.w	80070d8 <__retarget_lock_release_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20004e92 	.word	0x20004e92

08006f34 <__sinit_lock_acquire>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sinit_lock_acquire+0x8>)
 8006f36:	f000 b8cd 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20004e93 	.word	0x20004e93

08006f40 <__sinit_lock_release>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__sinit_lock_release+0x8>)
 8006f42:	f000 b8c9 	b.w	80070d8 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20004e93 	.word	0x20004e93

08006f4c <__sinit>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4604      	mov	r4, r0
 8006f50:	f7ff fff0 	bl	8006f34 <__sinit_lock_acquire>
 8006f54:	69a3      	ldr	r3, [r4, #24]
 8006f56:	b11b      	cbz	r3, 8006f60 <__sinit+0x14>
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	f7ff bff0 	b.w	8006f40 <__sinit_lock_release>
 8006f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f64:	6523      	str	r3, [r4, #80]	; 0x50
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <__sinit+0x68>)
 8006f68:	4a13      	ldr	r2, [pc, #76]	; (8006fb8 <__sinit+0x6c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	bf04      	itt	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	61a3      	streq	r3, [r4, #24]
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f820 	bl	8006fbc <__sfp>
 8006f7c:	6060      	str	r0, [r4, #4]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 f81c 	bl	8006fbc <__sfp>
 8006f84:	60a0      	str	r0, [r4, #8]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 f818 	bl	8006fbc <__sfp>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	60e0      	str	r0, [r4, #12]
 8006f90:	2104      	movs	r1, #4
 8006f92:	6860      	ldr	r0, [r4, #4]
 8006f94:	f7ff ff82 	bl	8006e9c <std>
 8006f98:	68a0      	ldr	r0, [r4, #8]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2109      	movs	r1, #9
 8006f9e:	f7ff ff7d 	bl	8006e9c <std>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	2112      	movs	r1, #18
 8006fa8:	f7ff ff78 	bl	8006e9c <std>
 8006fac:	2301      	movs	r3, #1
 8006fae:	61a3      	str	r3, [r4, #24]
 8006fb0:	e7d2      	b.n	8006f58 <__sinit+0xc>
 8006fb2:	bf00      	nop
 8006fb4:	0800b4b0 	.word	0x0800b4b0
 8006fb8:	08006ee5 	.word	0x08006ee5

08006fbc <__sfp>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	f7ff ffac 	bl	8006f1c <__sfp_lock_acquire>
 8006fc4:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <__sfp+0x84>)
 8006fc6:	681e      	ldr	r6, [r3, #0]
 8006fc8:	69b3      	ldr	r3, [r6, #24]
 8006fca:	b913      	cbnz	r3, 8006fd2 <__sfp+0x16>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff ffbd 	bl	8006f4c <__sinit>
 8006fd2:	3648      	adds	r6, #72	; 0x48
 8006fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	d503      	bpl.n	8006fe4 <__sfp+0x28>
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	b30b      	cbz	r3, 8007024 <__sfp+0x68>
 8006fe0:	6836      	ldr	r6, [r6, #0]
 8006fe2:	e7f7      	b.n	8006fd4 <__sfp+0x18>
 8006fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe8:	b9d5      	cbnz	r5, 8007020 <__sfp+0x64>
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <__sfp+0x88>)
 8006fec:	60e3      	str	r3, [r4, #12]
 8006fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff4:	f000 f86c 	bl	80070d0 <__retarget_lock_init_recursive>
 8006ff8:	f7ff ff96 	bl	8006f28 <__sfp_lock_release>
 8006ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007004:	6025      	str	r5, [r4, #0]
 8007006:	61a5      	str	r5, [r4, #24]
 8007008:	2208      	movs	r2, #8
 800700a:	4629      	mov	r1, r5
 800700c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007010:	f000 f882 	bl	8007118 <memset>
 8007014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800701c:	4620      	mov	r0, r4
 800701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007020:	3468      	adds	r4, #104	; 0x68
 8007022:	e7d9      	b.n	8006fd8 <__sfp+0x1c>
 8007024:	2104      	movs	r1, #4
 8007026:	4638      	mov	r0, r7
 8007028:	f7ff ff62 	bl	8006ef0 <__sfmoreglue>
 800702c:	4604      	mov	r4, r0
 800702e:	6030      	str	r0, [r6, #0]
 8007030:	2800      	cmp	r0, #0
 8007032:	d1d5      	bne.n	8006fe0 <__sfp+0x24>
 8007034:	f7ff ff78 	bl	8006f28 <__sfp_lock_release>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	e7ee      	b.n	800701c <__sfp+0x60>
 800703e:	bf00      	nop
 8007040:	0800b4b0 	.word	0x0800b4b0
 8007044:	ffff0001 	.word	0xffff0001

08007048 <_fwalk_reent>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4606      	mov	r6, r0
 800704e:	4688      	mov	r8, r1
 8007050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007054:	2700      	movs	r7, #0
 8007056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800705a:	f1b9 0901 	subs.w	r9, r9, #1
 800705e:	d505      	bpl.n	800706c <_fwalk_reent+0x24>
 8007060:	6824      	ldr	r4, [r4, #0]
 8007062:	2c00      	cmp	r4, #0
 8007064:	d1f7      	bne.n	8007056 <_fwalk_reent+0xe>
 8007066:	4638      	mov	r0, r7
 8007068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706c:	89ab      	ldrh	r3, [r5, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d907      	bls.n	8007082 <_fwalk_reent+0x3a>
 8007072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007076:	3301      	adds	r3, #1
 8007078:	d003      	beq.n	8007082 <_fwalk_reent+0x3a>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	47c0      	blx	r8
 8007080:	4307      	orrs	r7, r0
 8007082:	3568      	adds	r5, #104	; 0x68
 8007084:	e7e9      	b.n	800705a <_fwalk_reent+0x12>
	...

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4d0d      	ldr	r5, [pc, #52]	; (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	; (80070c4 <__libc_init_array+0x3c>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2600      	movs	r6, #0
 8007094:	42a6      	cmp	r6, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4d0b      	ldr	r5, [pc, #44]	; (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	; (80070cc <__libc_init_array+0x44>)
 800709c:	f004 f908 	bl	800b2b0 <_init>
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2600      	movs	r6, #0
 80070a6:	42a6      	cmp	r6, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ba:	4798      	blx	r3
 80070bc:	3601      	adds	r6, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	0800b94c 	.word	0x0800b94c
 80070c4:	0800b94c 	.word	0x0800b94c
 80070c8:	0800b94c 	.word	0x0800b94c
 80070cc:	0800b950 	.word	0x0800b950

080070d0 <__retarget_lock_init_recursive>:
 80070d0:	4770      	bx	lr

080070d2 <__retarget_lock_acquire>:
 80070d2:	4770      	bx	lr

080070d4 <__retarget_lock_acquire_recursive>:
 80070d4:	4770      	bx	lr

080070d6 <__retarget_lock_release>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_release_recursive>:
 80070d8:	4770      	bx	lr
	...

080070dc <malloc>:
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <malloc+0xc>)
 80070de:	4601      	mov	r1, r0
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	f000 baff 	b.w	80076e4 <_malloc_r>
 80070e6:	bf00      	nop
 80070e8:	20000014 	.word	0x20000014

080070ec <free>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <free+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f000 ba8b 	b.w	800760c <_free_r>
 80070f6:	bf00      	nop
 80070f8:	20000014 	.word	0x20000014

080070fc <memcpy>:
 80070fc:	440a      	add	r2, r1
 80070fe:	4291      	cmp	r1, r2
 8007100:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007104:	d100      	bne.n	8007108 <memcpy+0xc>
 8007106:	4770      	bx	lr
 8007108:	b510      	push	{r4, lr}
 800710a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007112:	4291      	cmp	r1, r2
 8007114:	d1f9      	bne.n	800710a <memcpy+0xe>
 8007116:	bd10      	pop	{r4, pc}

08007118 <memset>:
 8007118:	4402      	add	r2, r0
 800711a:	4603      	mov	r3, r0
 800711c:	4293      	cmp	r3, r2
 800711e:	d100      	bne.n	8007122 <memset+0xa>
 8007120:	4770      	bx	lr
 8007122:	f803 1b01 	strb.w	r1, [r3], #1
 8007126:	e7f9      	b.n	800711c <memset+0x4>

08007128 <validate_structure>:
 8007128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712a:	6801      	ldr	r1, [r0, #0]
 800712c:	293b      	cmp	r1, #59	; 0x3b
 800712e:	4604      	mov	r4, r0
 8007130:	d911      	bls.n	8007156 <validate_structure+0x2e>
 8007132:	223c      	movs	r2, #60	; 0x3c
 8007134:	4668      	mov	r0, sp
 8007136:	f001 fc59 	bl	80089ec <div>
 800713a:	9a01      	ldr	r2, [sp, #4]
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	9900      	ldr	r1, [sp, #0]
 8007140:	2a00      	cmp	r2, #0
 8007142:	440b      	add	r3, r1
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	bfbb      	ittet	lt
 8007148:	323c      	addlt	r2, #60	; 0x3c
 800714a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800714e:	6022      	strge	r2, [r4, #0]
 8007150:	6022      	strlt	r2, [r4, #0]
 8007152:	bfb8      	it	lt
 8007154:	6063      	strlt	r3, [r4, #4]
 8007156:	6861      	ldr	r1, [r4, #4]
 8007158:	293b      	cmp	r1, #59	; 0x3b
 800715a:	d911      	bls.n	8007180 <validate_structure+0x58>
 800715c:	223c      	movs	r2, #60	; 0x3c
 800715e:	4668      	mov	r0, sp
 8007160:	f001 fc44 	bl	80089ec <div>
 8007164:	9a01      	ldr	r2, [sp, #4]
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	9900      	ldr	r1, [sp, #0]
 800716a:	2a00      	cmp	r2, #0
 800716c:	440b      	add	r3, r1
 800716e:	60a3      	str	r3, [r4, #8]
 8007170:	bfbb      	ittet	lt
 8007172:	323c      	addlt	r2, #60	; 0x3c
 8007174:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8007178:	6062      	strge	r2, [r4, #4]
 800717a:	6062      	strlt	r2, [r4, #4]
 800717c:	bfb8      	it	lt
 800717e:	60a3      	strlt	r3, [r4, #8]
 8007180:	68a1      	ldr	r1, [r4, #8]
 8007182:	2917      	cmp	r1, #23
 8007184:	d911      	bls.n	80071aa <validate_structure+0x82>
 8007186:	2218      	movs	r2, #24
 8007188:	4668      	mov	r0, sp
 800718a:	f001 fc2f 	bl	80089ec <div>
 800718e:	9a01      	ldr	r2, [sp, #4]
 8007190:	68e3      	ldr	r3, [r4, #12]
 8007192:	9900      	ldr	r1, [sp, #0]
 8007194:	2a00      	cmp	r2, #0
 8007196:	440b      	add	r3, r1
 8007198:	60e3      	str	r3, [r4, #12]
 800719a:	bfbb      	ittet	lt
 800719c:	3218      	addlt	r2, #24
 800719e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80071a2:	60a2      	strge	r2, [r4, #8]
 80071a4:	60a2      	strlt	r2, [r4, #8]
 80071a6:	bfb8      	it	lt
 80071a8:	60e3      	strlt	r3, [r4, #12]
 80071aa:	6921      	ldr	r1, [r4, #16]
 80071ac:	290b      	cmp	r1, #11
 80071ae:	d911      	bls.n	80071d4 <validate_structure+0xac>
 80071b0:	220c      	movs	r2, #12
 80071b2:	4668      	mov	r0, sp
 80071b4:	f001 fc1a 	bl	80089ec <div>
 80071b8:	9a01      	ldr	r2, [sp, #4]
 80071ba:	6963      	ldr	r3, [r4, #20]
 80071bc:	9900      	ldr	r1, [sp, #0]
 80071be:	2a00      	cmp	r2, #0
 80071c0:	440b      	add	r3, r1
 80071c2:	6163      	str	r3, [r4, #20]
 80071c4:	bfbb      	ittet	lt
 80071c6:	320c      	addlt	r2, #12
 80071c8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80071cc:	6122      	strge	r2, [r4, #16]
 80071ce:	6122      	strlt	r2, [r4, #16]
 80071d0:	bfb8      	it	lt
 80071d2:	6163      	strlt	r3, [r4, #20]
 80071d4:	6963      	ldr	r3, [r4, #20]
 80071d6:	0798      	lsls	r0, r3, #30
 80071d8:	d120      	bne.n	800721c <validate_structure+0xf4>
 80071da:	2164      	movs	r1, #100	; 0x64
 80071dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80071e0:	fb01 3212 	mls	r2, r1, r2, r3
 80071e4:	b9e2      	cbnz	r2, 8007220 <validate_structure+0xf8>
 80071e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80071ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80071ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80071f2:	fb02 3311 	mls	r3, r2, r1, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bf14      	ite	ne
 80071fa:	231c      	movne	r3, #28
 80071fc:	231d      	moveq	r3, #29
 80071fe:	68e2      	ldr	r2, [r4, #12]
 8007200:	2a00      	cmp	r2, #0
 8007202:	dc0f      	bgt.n	8007224 <validate_structure+0xfc>
 8007204:	4f33      	ldr	r7, [pc, #204]	; (80072d4 <validate_structure+0x1ac>)
 8007206:	260b      	movs	r6, #11
 8007208:	2064      	movs	r0, #100	; 0x64
 800720a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800720e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007212:	f1bc 0f00 	cmp.w	ip, #0
 8007216:	dd31      	ble.n	800727c <validate_structure+0x154>
 8007218:	b003      	add	sp, #12
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721c:	231c      	movs	r3, #28
 800721e:	e7ee      	b.n	80071fe <validate_structure+0xd6>
 8007220:	231d      	movs	r3, #29
 8007222:	e7ec      	b.n	80071fe <validate_structure+0xd6>
 8007224:	4e2b      	ldr	r6, [pc, #172]	; (80072d4 <validate_structure+0x1ac>)
 8007226:	2700      	movs	r7, #0
 8007228:	2064      	movs	r0, #100	; 0x64
 800722a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800722e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007232:	2a01      	cmp	r2, #1
 8007234:	bf14      	ite	ne
 8007236:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800723a:	469c      	moveq	ip, r3
 800723c:	4561      	cmp	r1, ip
 800723e:	ddeb      	ble.n	8007218 <validate_structure+0xf0>
 8007240:	3201      	adds	r2, #1
 8007242:	eba1 010c 	sub.w	r1, r1, ip
 8007246:	2a0c      	cmp	r2, #12
 8007248:	60e1      	str	r1, [r4, #12]
 800724a:	6122      	str	r2, [r4, #16]
 800724c:	d1ef      	bne.n	800722e <validate_structure+0x106>
 800724e:	6963      	ldr	r3, [r4, #20]
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	0791      	lsls	r1, r2, #30
 8007254:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8007258:	d137      	bne.n	80072ca <validate_structure+0x1a2>
 800725a:	fb92 f1f0 	sdiv	r1, r2, r0
 800725e:	fb00 2211 	mls	r2, r0, r1, r2
 8007262:	2a00      	cmp	r2, #0
 8007264:	d133      	bne.n	80072ce <validate_structure+0x1a6>
 8007266:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800726a:	fb93 f2f5 	sdiv	r2, r3, r5
 800726e:	fb05 3312 	mls	r3, r5, r2, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	bf14      	ite	ne
 8007276:	231c      	movne	r3, #28
 8007278:	231d      	moveq	r3, #29
 800727a:	e7d8      	b.n	800722e <validate_structure+0x106>
 800727c:	6921      	ldr	r1, [r4, #16]
 800727e:	3901      	subs	r1, #1
 8007280:	6121      	str	r1, [r4, #16]
 8007282:	3101      	adds	r1, #1
 8007284:	d114      	bne.n	80072b0 <validate_structure+0x188>
 8007286:	6963      	ldr	r3, [r4, #20]
 8007288:	1e5a      	subs	r2, r3, #1
 800728a:	0791      	lsls	r1, r2, #30
 800728c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8007290:	d117      	bne.n	80072c2 <validate_structure+0x19a>
 8007292:	fb92 f1f0 	sdiv	r1, r2, r0
 8007296:	fb00 2211 	mls	r2, r0, r1, r2
 800729a:	b9a2      	cbnz	r2, 80072c6 <validate_structure+0x19e>
 800729c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80072a0:	fb93 f2f5 	sdiv	r2, r3, r5
 80072a4:	fb05 3312 	mls	r3, r5, r2, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	231c      	movne	r3, #28
 80072ae:	231d      	moveq	r3, #29
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	2a01      	cmp	r2, #1
 80072b4:	bf14      	ite	ne
 80072b6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80072ba:	461a      	moveq	r2, r3
 80072bc:	4462      	add	r2, ip
 80072be:	60e2      	str	r2, [r4, #12]
 80072c0:	e7a5      	b.n	800720e <validate_structure+0xe6>
 80072c2:	231c      	movs	r3, #28
 80072c4:	e7f4      	b.n	80072b0 <validate_structure+0x188>
 80072c6:	231d      	movs	r3, #29
 80072c8:	e7f2      	b.n	80072b0 <validate_structure+0x188>
 80072ca:	231c      	movs	r3, #28
 80072cc:	e7af      	b.n	800722e <validate_structure+0x106>
 80072ce:	231d      	movs	r3, #29
 80072d0:	e7ad      	b.n	800722e <validate_structure+0x106>
 80072d2:	bf00      	nop
 80072d4:	0800b4b4 	.word	0x0800b4b4

080072d8 <mktime>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b085      	sub	sp, #20
 80072de:	4607      	mov	r7, r0
 80072e0:	f002 fb2c 	bl	800993c <__gettzinfo>
 80072e4:	4681      	mov	r9, r0
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff1e 	bl	8007128 <validate_structure>
 80072ec:	e9d7 4000 	ldrd	r4, r0, [r7]
 80072f0:	233c      	movs	r3, #60	; 0x3c
 80072f2:	fb03 4400 	mla	r4, r3, r0, r4
 80072f6:	68b8      	ldr	r0, [r7, #8]
 80072f8:	4abc      	ldr	r2, [pc, #752]	; (80075ec <mktime+0x314>)
 80072fa:	697e      	ldr	r6, [r7, #20]
 80072fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007300:	fb03 4400 	mla	r4, r3, r0, r4
 8007304:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8007308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800730c:	3d01      	subs	r5, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	4415      	add	r5, r2
 8007312:	dd11      	ble.n	8007338 <mktime+0x60>
 8007314:	07b1      	lsls	r1, r6, #30
 8007316:	d10f      	bne.n	8007338 <mktime+0x60>
 8007318:	2264      	movs	r2, #100	; 0x64
 800731a:	fb96 f3f2 	sdiv	r3, r6, r2
 800731e:	fb02 6313 	mls	r3, r2, r3, r6
 8007322:	b943      	cbnz	r3, 8007336 <mktime+0x5e>
 8007324:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8007328:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800732c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007330:	fb02 3311 	mls	r3, r2, r1, r3
 8007334:	b903      	cbnz	r3, 8007338 <mktime+0x60>
 8007336:	3501      	adds	r5, #1
 8007338:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800733c:	3310      	adds	r3, #16
 800733e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007342:	4293      	cmp	r3, r2
 8007344:	61fd      	str	r5, [r7, #28]
 8007346:	f200 815d 	bhi.w	8007604 <mktime+0x32c>
 800734a:	2e46      	cmp	r6, #70	; 0x46
 800734c:	dd71      	ble.n	8007432 <mktime+0x15a>
 800734e:	2346      	movs	r3, #70	; 0x46
 8007350:	f240 1c6d 	movw	ip, #365	; 0x16d
 8007354:	2164      	movs	r1, #100	; 0x64
 8007356:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800735a:	079a      	lsls	r2, r3, #30
 800735c:	d163      	bne.n	8007426 <mktime+0x14e>
 800735e:	fb93 f2f1 	sdiv	r2, r3, r1
 8007362:	fb01 3212 	mls	r2, r1, r2, r3
 8007366:	2a00      	cmp	r2, #0
 8007368:	d160      	bne.n	800742c <mktime+0x154>
 800736a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800736e:	fb92 fef0 	sdiv	lr, r2, r0
 8007372:	fb00 221e 	mls	r2, r0, lr, r2
 8007376:	2a00      	cmp	r2, #0
 8007378:	bf14      	ite	ne
 800737a:	4662      	movne	r2, ip
 800737c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007380:	3301      	adds	r3, #1
 8007382:	429e      	cmp	r6, r3
 8007384:	4415      	add	r5, r2
 8007386:	d1e8      	bne.n	800735a <mktime+0x82>
 8007388:	4b99      	ldr	r3, [pc, #612]	; (80075f0 <mktime+0x318>)
 800738a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800738e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8007392:	f001 f899 	bl	80084c8 <__tz_lock>
 8007396:	f001 f8a3 	bl	80084e0 <_tzset_unlocked>
 800739a:	4b96      	ldr	r3, [pc, #600]	; (80075f4 <mktime+0x31c>)
 800739c:	f8d3 b000 	ldr.w	fp, [r3]
 80073a0:	f1bb 0f00 	cmp.w	fp, #0
 80073a4:	d039      	beq.n	800741a <mktime+0x142>
 80073a6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80073b0:	f1bb 0f01 	cmp.w	fp, #1
 80073b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80073b8:	46da      	mov	sl, fp
 80073ba:	bfa8      	it	ge
 80073bc:	f04f 0a01 	movge.w	sl, #1
 80073c0:	4283      	cmp	r3, r0
 80073c2:	d178      	bne.n	80074b6 <mktime+0x1de>
 80073c4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80073c8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80073cc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80073d0:	1a5b      	subs	r3, r3, r1
 80073d2:	9302      	str	r3, [sp, #8]
 80073d4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80073de:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	ebb3 0c02 	subs.w	ip, r3, r2
 80073e8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80073ec:	4564      	cmp	r4, ip
 80073ee:	eb78 0300 	sbcs.w	r3, r8, r0
 80073f2:	da66      	bge.n	80074c2 <mktime+0x1ea>
 80073f4:	f8d9 3000 	ldr.w	r3, [r9]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d06f      	beq.n	80074dc <mktime+0x204>
 80073fc:	9b02      	ldr	r3, [sp, #8]
 80073fe:	429c      	cmp	r4, r3
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	eb78 0303 	sbcs.w	r3, r8, r3
 8007406:	db03      	blt.n	8007410 <mktime+0x138>
 8007408:	4564      	cmp	r4, ip
 800740a:	eb78 0300 	sbcs.w	r3, r8, r0
 800740e:	db6b      	blt.n	80074e8 <mktime+0x210>
 8007410:	f1bb 0f00 	cmp.w	fp, #0
 8007414:	f04f 0b00 	mov.w	fp, #0
 8007418:	da6b      	bge.n	80074f2 <mktime+0x21a>
 800741a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800741e:	190c      	adds	r4, r1, r4
 8007420:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8007424:	e0a9      	b.n	800757a <mktime+0x2a2>
 8007426:	f240 126d 	movw	r2, #365	; 0x16d
 800742a:	e7a9      	b.n	8007380 <mktime+0xa8>
 800742c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007430:	e7a6      	b.n	8007380 <mktime+0xa8>
 8007432:	d0a9      	beq.n	8007388 <mktime+0xb0>
 8007434:	2345      	movs	r3, #69	; 0x45
 8007436:	f240 1c6d 	movw	ip, #365	; 0x16d
 800743a:	2164      	movs	r1, #100	; 0x64
 800743c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007440:	e012      	b.n	8007468 <mktime+0x190>
 8007442:	bb62      	cbnz	r2, 800749e <mktime+0x1c6>
 8007444:	fb93 f2f1 	sdiv	r2, r3, r1
 8007448:	fb01 3212 	mls	r2, r1, r2, r3
 800744c:	bb52      	cbnz	r2, 80074a4 <mktime+0x1cc>
 800744e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8007452:	fb92 fef0 	sdiv	lr, r2, r0
 8007456:	fb00 221e 	mls	r2, r0, lr, r2
 800745a:	2a00      	cmp	r2, #0
 800745c:	bf14      	ite	ne
 800745e:	4662      	movne	r2, ip
 8007460:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007464:	1aad      	subs	r5, r5, r2
 8007466:	3b01      	subs	r3, #1
 8007468:	429e      	cmp	r6, r3
 800746a:	f003 0203 	and.w	r2, r3, #3
 800746e:	dbe8      	blt.n	8007442 <mktime+0x16a>
 8007470:	b9da      	cbnz	r2, 80074aa <mktime+0x1d2>
 8007472:	2264      	movs	r2, #100	; 0x64
 8007474:	fb96 f3f2 	sdiv	r3, r6, r2
 8007478:	fb02 6313 	mls	r3, r2, r3, r6
 800747c:	b9c3      	cbnz	r3, 80074b0 <mktime+0x1d8>
 800747e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8007482:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007486:	fb93 f1f2 	sdiv	r1, r3, r2
 800748a:	fb02 3311 	mls	r3, r2, r1, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	f240 136d 	movw	r3, #365	; 0x16d
 8007494:	bf08      	it	eq
 8007496:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800749a:	1aed      	subs	r5, r5, r3
 800749c:	e774      	b.n	8007388 <mktime+0xb0>
 800749e:	f240 126d 	movw	r2, #365	; 0x16d
 80074a2:	e7df      	b.n	8007464 <mktime+0x18c>
 80074a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80074a8:	e7dc      	b.n	8007464 <mktime+0x18c>
 80074aa:	f240 136d 	movw	r3, #365	; 0x16d
 80074ae:	e7f4      	b.n	800749a <mktime+0x1c2>
 80074b0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80074b4:	e7f1      	b.n	800749a <mktime+0x1c2>
 80074b6:	f000 ff5d 	bl	8008374 <__tzcalc_limits>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d182      	bne.n	80073c4 <mktime+0xec>
 80074be:	46d3      	mov	fp, sl
 80074c0:	e050      	b.n	8007564 <mktime+0x28c>
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	1a5b      	subs	r3, r3, r1
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80074cc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80074d0:	9b01      	ldr	r3, [sp, #4]
 80074d2:	429c      	cmp	r4, r3
 80074d4:	eb78 030e 	sbcs.w	r3, r8, lr
 80074d8:	dbf1      	blt.n	80074be <mktime+0x1e6>
 80074da:	e78b      	b.n	80073f4 <mktime+0x11c>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	429c      	cmp	r4, r3
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	eb78 0303 	sbcs.w	r3, r8, r3
 80074e6:	db8f      	blt.n	8007408 <mktime+0x130>
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	db3e      	blt.n	800756c <mktime+0x294>
 80074ee:	f04f 0b01 	mov.w	fp, #1
 80074f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80074f6:	f1ba 0f01 	cmp.w	sl, #1
 80074fa:	d133      	bne.n	8007564 <mktime+0x28c>
 80074fc:	f1bb 0f00 	cmp.w	fp, #0
 8007500:	d04e      	beq.n	80075a0 <mktime+0x2c8>
 8007502:	1a52      	subs	r2, r2, r1
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	1914      	adds	r4, r2, r4
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4638      	mov	r0, r7
 8007512:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8007516:	f7ff fe07 	bl	8007128 <validate_structure>
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	ebb2 020a 	subs.w	r2, r2, sl
 8007520:	d020      	beq.n	8007564 <mktime+0x28c>
 8007522:	2a01      	cmp	r2, #1
 8007524:	dc3e      	bgt.n	80075a4 <mktime+0x2cc>
 8007526:	1c90      	adds	r0, r2, #2
 8007528:	bfd8      	it	le
 800752a:	2201      	movle	r2, #1
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	18d3      	adds	r3, r2, r3
 8007530:	4415      	add	r5, r2
 8007532:	d540      	bpl.n	80075b6 <mktime+0x2de>
 8007534:	1e73      	subs	r3, r6, #1
 8007536:	0799      	lsls	r1, r3, #30
 8007538:	d137      	bne.n	80075aa <mktime+0x2d2>
 800753a:	2264      	movs	r2, #100	; 0x64
 800753c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007540:	fb02 3311 	mls	r3, r2, r1, r3
 8007544:	bba3      	cbnz	r3, 80075b0 <mktime+0x2d8>
 8007546:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800754a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800754e:	fb96 f2f3 	sdiv	r2, r6, r3
 8007552:	fb03 6612 	mls	r6, r3, r2, r6
 8007556:	2e00      	cmp	r6, #0
 8007558:	f240 136d 	movw	r3, #365	; 0x16d
 800755c:	bf18      	it	ne
 800755e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	f1bb 0f01 	cmp.w	fp, #1
 8007568:	f47f af57 	bne.w	800741a <mktime+0x142>
 800756c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8007570:	190c      	adds	r4, r1, r4
 8007572:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8007576:	f04f 0b01 	mov.w	fp, #1
 800757a:	f000 ffab 	bl	80084d4 <__tz_unlock>
 800757e:	3504      	adds	r5, #4
 8007580:	2307      	movs	r3, #7
 8007582:	fb95 f3f3 	sdiv	r3, r5, r3
 8007586:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800758a:	1aed      	subs	r5, r5, r3
 800758c:	bf48      	it	mi
 800758e:	3507      	addmi	r5, #7
 8007590:	f8c7 b020 	str.w	fp, [r7, #32]
 8007594:	61bd      	str	r5, [r7, #24]
 8007596:	4620      	mov	r0, r4
 8007598:	4641      	mov	r1, r8
 800759a:	b005      	add	sp, #20
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	1a8a      	subs	r2, r1, r2
 80075a2:	e7af      	b.n	8007504 <mktime+0x22c>
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a8:	e7c0      	b.n	800752c <mktime+0x254>
 80075aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80075ae:	e7d8      	b.n	8007562 <mktime+0x28a>
 80075b0:	f240 136d 	movw	r3, #365	; 0x16d
 80075b4:	e7d5      	b.n	8007562 <mktime+0x28a>
 80075b6:	07b2      	lsls	r2, r6, #30
 80075b8:	d11e      	bne.n	80075f8 <mktime+0x320>
 80075ba:	2164      	movs	r1, #100	; 0x64
 80075bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80075c0:	fb01 6212 	mls	r2, r1, r2, r6
 80075c4:	b9da      	cbnz	r2, 80075fe <mktime+0x326>
 80075c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80075ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80075ce:	fb96 f1f2 	sdiv	r1, r6, r2
 80075d2:	fb02 6611 	mls	r6, r2, r1, r6
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	f240 126d 	movw	r2, #365	; 0x16d
 80075dc:	bf08      	it	eq
 80075de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80075e2:	4293      	cmp	r3, r2
 80075e4:	bfa8      	it	ge
 80075e6:	1a9b      	subge	r3, r3, r2
 80075e8:	e7bb      	b.n	8007562 <mktime+0x28a>
 80075ea:	bf00      	nop
 80075ec:	0800b4e4 	.word	0x0800b4e4
 80075f0:	00015180 	.word	0x00015180
 80075f4:	20004ec0 	.word	0x20004ec0
 80075f8:	f240 126d 	movw	r2, #365	; 0x16d
 80075fc:	e7f1      	b.n	80075e2 <mktime+0x30a>
 80075fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007602:	e7ee      	b.n	80075e2 <mktime+0x30a>
 8007604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007608:	46a0      	mov	r8, r4
 800760a:	e7c4      	b.n	8007596 <mktime+0x2be>

0800760c <_free_r>:
 800760c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760e:	2900      	cmp	r1, #0
 8007610:	d044      	beq.n	800769c <_free_r+0x90>
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f1a1 0404 	sub.w	r4, r1, #4
 800761e:	bfb8      	it	lt
 8007620:	18e4      	addlt	r4, r4, r3
 8007622:	f002 fa0b 	bl	8009a3c <__malloc_lock>
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <_free_r+0x94>)
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	b933      	cbnz	r3, 800763c <_free_r+0x30>
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007638:	f002 ba06 	b.w	8009a48 <__malloc_unlock>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d908      	bls.n	8007652 <_free_r+0x46>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	e7ed      	b.n	800762e <_free_r+0x22>
 8007652:	461a      	mov	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b10b      	cbz	r3, 800765c <_free_r+0x50>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d9fa      	bls.n	8007652 <_free_r+0x46>
 800765c:	6811      	ldr	r1, [r2, #0]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	42a5      	cmp	r5, r4
 8007662:	d10b      	bne.n	800767c <_free_r+0x70>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	4421      	add	r1, r4
 8007668:	1854      	adds	r4, r2, r1
 800766a:	42a3      	cmp	r3, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	d1e0      	bne.n	8007632 <_free_r+0x26>
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	4421      	add	r1, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	e7da      	b.n	8007632 <_free_r+0x26>
 800767c:	d902      	bls.n	8007684 <_free_r+0x78>
 800767e:	230c      	movs	r3, #12
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7d6      	b.n	8007632 <_free_r+0x26>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf04      	itt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	bf04      	itt	eq
 8007694:	1949      	addeq	r1, r1, r5
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6054      	str	r4, [r2, #4]
 800769a:	e7ca      	b.n	8007632 <_free_r+0x26>
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	20004e98 	.word	0x20004e98

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0e      	ldr	r6, [pc, #56]	; (80076e0 <sbrk_aligned+0x3c>)
 80076a8:	460c      	mov	r4, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	4605      	mov	r5, r0
 80076ae:	b911      	cbnz	r1, 80076b6 <sbrk_aligned+0x12>
 80076b0:	f000 fdd6 	bl	8008260 <_sbrk_r>
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 fdd1 	bl	8008260 <_sbrk_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d00a      	beq.n	80076d8 <sbrk_aligned+0x34>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d007      	beq.n	80076dc <sbrk_aligned+0x38>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fdc6 	bl	8008260 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d101      	bne.n	80076dc <sbrk_aligned+0x38>
 80076d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	20004e9c 	.word	0x20004e9c

080076e4 <_malloc_r>:
 80076e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4607      	mov	r7, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d905      	bls.n	800770c <_malloc_r+0x28>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	2600      	movs	r6, #0
 8007706:	4630      	mov	r0, r6
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	4e2e      	ldr	r6, [pc, #184]	; (80077c8 <_malloc_r+0xe4>)
 800770e:	f002 f995 	bl	8009a3c <__malloc_lock>
 8007712:	6833      	ldr	r3, [r6, #0]
 8007714:	461c      	mov	r4, r3
 8007716:	bb34      	cbnz	r4, 8007766 <_malloc_r+0x82>
 8007718:	4629      	mov	r1, r5
 800771a:	4638      	mov	r0, r7
 800771c:	f7ff ffc2 	bl	80076a4 <sbrk_aligned>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	4604      	mov	r4, r0
 8007724:	d14d      	bne.n	80077c2 <_malloc_r+0xde>
 8007726:	6834      	ldr	r4, [r6, #0]
 8007728:	4626      	mov	r6, r4
 800772a:	2e00      	cmp	r6, #0
 800772c:	d140      	bne.n	80077b0 <_malloc_r+0xcc>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	4631      	mov	r1, r6
 8007732:	4638      	mov	r0, r7
 8007734:	eb04 0803 	add.w	r8, r4, r3
 8007738:	f000 fd92 	bl	8008260 <_sbrk_r>
 800773c:	4580      	cmp	r8, r0
 800773e:	d13a      	bne.n	80077b6 <_malloc_r+0xd2>
 8007740:	6821      	ldr	r1, [r4, #0]
 8007742:	3503      	adds	r5, #3
 8007744:	1a6d      	subs	r5, r5, r1
 8007746:	f025 0503 	bic.w	r5, r5, #3
 800774a:	3508      	adds	r5, #8
 800774c:	2d0c      	cmp	r5, #12
 800774e:	bf38      	it	cc
 8007750:	250c      	movcc	r5, #12
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ffa5 	bl	80076a4 <sbrk_aligned>
 800775a:	3001      	adds	r0, #1
 800775c:	d02b      	beq.n	80077b6 <_malloc_r+0xd2>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	442b      	add	r3, r5
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	e00e      	b.n	8007784 <_malloc_r+0xa0>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	1b52      	subs	r2, r2, r5
 800776a:	d41e      	bmi.n	80077aa <_malloc_r+0xc6>
 800776c:	2a0b      	cmp	r2, #11
 800776e:	d916      	bls.n	800779e <_malloc_r+0xba>
 8007770:	1961      	adds	r1, r4, r5
 8007772:	42a3      	cmp	r3, r4
 8007774:	6025      	str	r5, [r4, #0]
 8007776:	bf18      	it	ne
 8007778:	6059      	strne	r1, [r3, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	bf08      	it	eq
 800777e:	6031      	streq	r1, [r6, #0]
 8007780:	5162      	str	r2, [r4, r5]
 8007782:	604b      	str	r3, [r1, #4]
 8007784:	4638      	mov	r0, r7
 8007786:	f104 060b 	add.w	r6, r4, #11
 800778a:	f002 f95d 	bl	8009a48 <__malloc_unlock>
 800778e:	f026 0607 	bic.w	r6, r6, #7
 8007792:	1d23      	adds	r3, r4, #4
 8007794:	1af2      	subs	r2, r6, r3
 8007796:	d0b6      	beq.n	8007706 <_malloc_r+0x22>
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	50a3      	str	r3, [r4, r2]
 800779c:	e7b3      	b.n	8007706 <_malloc_r+0x22>
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	bf0c      	ite	eq
 80077a4:	6032      	streq	r2, [r6, #0]
 80077a6:	605a      	strne	r2, [r3, #4]
 80077a8:	e7ec      	b.n	8007784 <_malloc_r+0xa0>
 80077aa:	4623      	mov	r3, r4
 80077ac:	6864      	ldr	r4, [r4, #4]
 80077ae:	e7b2      	b.n	8007716 <_malloc_r+0x32>
 80077b0:	4634      	mov	r4, r6
 80077b2:	6876      	ldr	r6, [r6, #4]
 80077b4:	e7b9      	b.n	800772a <_malloc_r+0x46>
 80077b6:	230c      	movs	r3, #12
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4638      	mov	r0, r7
 80077bc:	f002 f944 	bl	8009a48 <__malloc_unlock>
 80077c0:	e7a1      	b.n	8007706 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7de      	b.n	8007784 <_malloc_r+0xa0>
 80077c6:	bf00      	nop
 80077c8:	20004e98 	.word	0x20004e98

080077cc <__cvt>:
 80077cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	ec55 4b10 	vmov	r4, r5, d0
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	460e      	mov	r6, r1
 80077d8:	4619      	mov	r1, r3
 80077da:	462b      	mov	r3, r5
 80077dc:	bfbb      	ittet	lt
 80077de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077e2:	461d      	movlt	r5, r3
 80077e4:	2300      	movge	r3, #0
 80077e6:	232d      	movlt	r3, #45	; 0x2d
 80077e8:	700b      	strb	r3, [r1, #0]
 80077ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077f0:	4691      	mov	r9, r2
 80077f2:	f023 0820 	bic.w	r8, r3, #32
 80077f6:	bfbc      	itt	lt
 80077f8:	4622      	movlt	r2, r4
 80077fa:	4614      	movlt	r4, r2
 80077fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007800:	d005      	beq.n	800780e <__cvt+0x42>
 8007802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007806:	d100      	bne.n	800780a <__cvt+0x3e>
 8007808:	3601      	adds	r6, #1
 800780a:	2102      	movs	r1, #2
 800780c:	e000      	b.n	8007810 <__cvt+0x44>
 800780e:	2103      	movs	r1, #3
 8007810:	ab03      	add	r3, sp, #12
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	ab02      	add	r3, sp, #8
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	ec45 4b10 	vmov	d0, r4, r5
 800781c:	4653      	mov	r3, sl
 800781e:	4632      	mov	r2, r6
 8007820:	f001 f986 	bl	8008b30 <_dtoa_r>
 8007824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007828:	4607      	mov	r7, r0
 800782a:	d102      	bne.n	8007832 <__cvt+0x66>
 800782c:	f019 0f01 	tst.w	r9, #1
 8007830:	d022      	beq.n	8007878 <__cvt+0xac>
 8007832:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007836:	eb07 0906 	add.w	r9, r7, r6
 800783a:	d110      	bne.n	800785e <__cvt+0x92>
 800783c:	783b      	ldrb	r3, [r7, #0]
 800783e:	2b30      	cmp	r3, #48	; 0x30
 8007840:	d10a      	bne.n	8007858 <__cvt+0x8c>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f9 f947 	bl	8000adc <__aeabi_dcmpeq>
 800784e:	b918      	cbnz	r0, 8007858 <__cvt+0x8c>
 8007850:	f1c6 0601 	rsb	r6, r6, #1
 8007854:	f8ca 6000 	str.w	r6, [sl]
 8007858:	f8da 3000 	ldr.w	r3, [sl]
 800785c:	4499      	add	r9, r3
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	f7f9 f939 	bl	8000adc <__aeabi_dcmpeq>
 800786a:	b108      	cbz	r0, 8007870 <__cvt+0xa4>
 800786c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007870:	2230      	movs	r2, #48	; 0x30
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	454b      	cmp	r3, r9
 8007876:	d307      	bcc.n	8007888 <__cvt+0xbc>
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800787c:	1bdb      	subs	r3, r3, r7
 800787e:	4638      	mov	r0, r7
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	b004      	add	sp, #16
 8007884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007888:	1c59      	adds	r1, r3, #1
 800788a:	9103      	str	r1, [sp, #12]
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e7f0      	b.n	8007872 <__cvt+0xa6>

08007890 <__exponent>:
 8007890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007892:	4603      	mov	r3, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	bfb8      	it	lt
 8007898:	4249      	neglt	r1, r1
 800789a:	f803 2b02 	strb.w	r2, [r3], #2
 800789e:	bfb4      	ite	lt
 80078a0:	222d      	movlt	r2, #45	; 0x2d
 80078a2:	222b      	movge	r2, #43	; 0x2b
 80078a4:	2909      	cmp	r1, #9
 80078a6:	7042      	strb	r2, [r0, #1]
 80078a8:	dd2a      	ble.n	8007900 <__exponent+0x70>
 80078aa:	f10d 0407 	add.w	r4, sp, #7
 80078ae:	46a4      	mov	ip, r4
 80078b0:	270a      	movs	r7, #10
 80078b2:	46a6      	mov	lr, r4
 80078b4:	460a      	mov	r2, r1
 80078b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80078ba:	fb07 1516 	mls	r5, r7, r6, r1
 80078be:	3530      	adds	r5, #48	; 0x30
 80078c0:	2a63      	cmp	r2, #99	; 0x63
 80078c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078ca:	4631      	mov	r1, r6
 80078cc:	dcf1      	bgt.n	80078b2 <__exponent+0x22>
 80078ce:	3130      	adds	r1, #48	; 0x30
 80078d0:	f1ae 0502 	sub.w	r5, lr, #2
 80078d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078d8:	1c44      	adds	r4, r0, #1
 80078da:	4629      	mov	r1, r5
 80078dc:	4561      	cmp	r1, ip
 80078de:	d30a      	bcc.n	80078f6 <__exponent+0x66>
 80078e0:	f10d 0209 	add.w	r2, sp, #9
 80078e4:	eba2 020e 	sub.w	r2, r2, lr
 80078e8:	4565      	cmp	r5, ip
 80078ea:	bf88      	it	hi
 80078ec:	2200      	movhi	r2, #0
 80078ee:	4413      	add	r3, r2
 80078f0:	1a18      	subs	r0, r3, r0
 80078f2:	b003      	add	sp, #12
 80078f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078fe:	e7ed      	b.n	80078dc <__exponent+0x4c>
 8007900:	2330      	movs	r3, #48	; 0x30
 8007902:	3130      	adds	r1, #48	; 0x30
 8007904:	7083      	strb	r3, [r0, #2]
 8007906:	70c1      	strb	r1, [r0, #3]
 8007908:	1d03      	adds	r3, r0, #4
 800790a:	e7f1      	b.n	80078f0 <__exponent+0x60>

0800790c <_printf_float>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	ed2d 8b02 	vpush	{d8}
 8007914:	b08d      	sub	sp, #52	; 0x34
 8007916:	460c      	mov	r4, r1
 8007918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800791c:	4616      	mov	r6, r2
 800791e:	461f      	mov	r7, r3
 8007920:	4605      	mov	r5, r0
 8007922:	f002 f80f 	bl	8009944 <_localeconv_r>
 8007926:	f8d0 a000 	ldr.w	sl, [r0]
 800792a:	4650      	mov	r0, sl
 800792c:	f7f8 fc50 	bl	80001d0 <strlen>
 8007930:	2300      	movs	r3, #0
 8007932:	930a      	str	r3, [sp, #40]	; 0x28
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	9305      	str	r3, [sp, #20]
 8007938:	f8d8 3000 	ldr.w	r3, [r8]
 800793c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007940:	3307      	adds	r3, #7
 8007942:	f023 0307 	bic.w	r3, r3, #7
 8007946:	f103 0208 	add.w	r2, r3, #8
 800794a:	f8c8 2000 	str.w	r2, [r8]
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007956:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800795a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	f8cd 8018 	str.w	r8, [sp, #24]
 8007964:	ee08 0a10 	vmov	s16, r0
 8007968:	4b9f      	ldr	r3, [pc, #636]	; (8007be8 <_printf_float+0x2dc>)
 800796a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800796e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007972:	f7f9 f8e5 	bl	8000b40 <__aeabi_dcmpun>
 8007976:	bb88      	cbnz	r0, 80079dc <_printf_float+0xd0>
 8007978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797c:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <_printf_float+0x2dc>)
 800797e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007982:	f7f9 f8bf 	bl	8000b04 <__aeabi_dcmple>
 8007986:	bb48      	cbnz	r0, 80079dc <_printf_float+0xd0>
 8007988:	2200      	movs	r2, #0
 800798a:	2300      	movs	r3, #0
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	f7f9 f8ae 	bl	8000af0 <__aeabi_dcmplt>
 8007994:	b110      	cbz	r0, 800799c <_printf_float+0x90>
 8007996:	232d      	movs	r3, #45	; 0x2d
 8007998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800799c:	4b93      	ldr	r3, [pc, #588]	; (8007bec <_printf_float+0x2e0>)
 800799e:	4894      	ldr	r0, [pc, #592]	; (8007bf0 <_printf_float+0x2e4>)
 80079a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079a4:	bf94      	ite	ls
 80079a6:	4698      	movls	r8, r3
 80079a8:	4680      	movhi	r8, r0
 80079aa:	2303      	movs	r3, #3
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	9b05      	ldr	r3, [sp, #20]
 80079b0:	f023 0204 	bic.w	r2, r3, #4
 80079b4:	6022      	str	r2, [r4, #0]
 80079b6:	f04f 0900 	mov.w	r9, #0
 80079ba:	9700      	str	r7, [sp, #0]
 80079bc:	4633      	mov	r3, r6
 80079be:	aa0b      	add	r2, sp, #44	; 0x2c
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f9d8 	bl	8007d78 <_printf_common>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f040 8090 	bne.w	8007aee <_printf_float+0x1e2>
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079d2:	b00d      	add	sp, #52	; 0x34
 80079d4:	ecbd 8b02 	vpop	{d8}
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f9 f8ac 	bl	8000b40 <__aeabi_dcmpun>
 80079e8:	b140      	cbz	r0, 80079fc <_printf_float+0xf0>
 80079ea:	464b      	mov	r3, r9
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bfbc      	itt	lt
 80079f0:	232d      	movlt	r3, #45	; 0x2d
 80079f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079f6:	487f      	ldr	r0, [pc, #508]	; (8007bf4 <_printf_float+0x2e8>)
 80079f8:	4b7f      	ldr	r3, [pc, #508]	; (8007bf8 <_printf_float+0x2ec>)
 80079fa:	e7d1      	b.n	80079a0 <_printf_float+0x94>
 80079fc:	6863      	ldr	r3, [r4, #4]
 80079fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a02:	9206      	str	r2, [sp, #24]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	d13f      	bne.n	8007a88 <_printf_float+0x17c>
 8007a08:	2306      	movs	r3, #6
 8007a0a:	6063      	str	r3, [r4, #4]
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	6861      	ldr	r1, [r4, #4]
 8007a10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a14:	2300      	movs	r3, #0
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	ab0a      	add	r3, sp, #40	; 0x28
 8007a1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a1e:	ab09      	add	r3, sp, #36	; 0x24
 8007a20:	ec49 8b10 	vmov	d0, r8, r9
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7ff fecd 	bl	80077cc <__cvt>
 8007a32:	9b06      	ldr	r3, [sp, #24]
 8007a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a36:	2b47      	cmp	r3, #71	; 0x47
 8007a38:	4680      	mov	r8, r0
 8007a3a:	d108      	bne.n	8007a4e <_printf_float+0x142>
 8007a3c:	1cc8      	adds	r0, r1, #3
 8007a3e:	db02      	blt.n	8007a46 <_printf_float+0x13a>
 8007a40:	6863      	ldr	r3, [r4, #4]
 8007a42:	4299      	cmp	r1, r3
 8007a44:	dd41      	ble.n	8007aca <_printf_float+0x1be>
 8007a46:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a4a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a52:	d820      	bhi.n	8007a96 <_printf_float+0x18a>
 8007a54:	3901      	subs	r1, #1
 8007a56:	465a      	mov	r2, fp
 8007a58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a5e:	f7ff ff17 	bl	8007890 <__exponent>
 8007a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a64:	1813      	adds	r3, r2, r0
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	4681      	mov	r9, r0
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	dc02      	bgt.n	8007a74 <_printf_float+0x168>
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	07d2      	lsls	r2, r2, #31
 8007a72:	d501      	bpl.n	8007a78 <_printf_float+0x16c>
 8007a74:	3301      	adds	r3, #1
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d09c      	beq.n	80079ba <_printf_float+0xae>
 8007a80:	232d      	movs	r3, #45	; 0x2d
 8007a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a86:	e798      	b.n	80079ba <_printf_float+0xae>
 8007a88:	9a06      	ldr	r2, [sp, #24]
 8007a8a:	2a47      	cmp	r2, #71	; 0x47
 8007a8c:	d1be      	bne.n	8007a0c <_printf_float+0x100>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1bc      	bne.n	8007a0c <_printf_float+0x100>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7b9      	b.n	8007a0a <_printf_float+0xfe>
 8007a96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a9a:	d118      	bne.n	8007ace <_printf_float+0x1c2>
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	6863      	ldr	r3, [r4, #4]
 8007aa0:	dd0b      	ble.n	8007aba <_printf_float+0x1ae>
 8007aa2:	6121      	str	r1, [r4, #16]
 8007aa4:	b913      	cbnz	r3, 8007aac <_printf_float+0x1a0>
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	07d0      	lsls	r0, r2, #31
 8007aaa:	d502      	bpl.n	8007ab2 <_printf_float+0x1a6>
 8007aac:	3301      	adds	r3, #1
 8007aae:	440b      	add	r3, r1
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ab4:	f04f 0900 	mov.w	r9, #0
 8007ab8:	e7de      	b.n	8007a78 <_printf_float+0x16c>
 8007aba:	b913      	cbnz	r3, 8007ac2 <_printf_float+0x1b6>
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	07d2      	lsls	r2, r2, #31
 8007ac0:	d501      	bpl.n	8007ac6 <_printf_float+0x1ba>
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	e7f4      	b.n	8007ab0 <_printf_float+0x1a4>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e7f2      	b.n	8007ab0 <_printf_float+0x1a4>
 8007aca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	db05      	blt.n	8007ae0 <_printf_float+0x1d4>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	6121      	str	r1, [r4, #16]
 8007ad8:	07d8      	lsls	r0, r3, #31
 8007ada:	d5ea      	bpl.n	8007ab2 <_printf_float+0x1a6>
 8007adc:	1c4b      	adds	r3, r1, #1
 8007ade:	e7e7      	b.n	8007ab0 <_printf_float+0x1a4>
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	bfd4      	ite	le
 8007ae4:	f1c1 0202 	rsble	r2, r1, #2
 8007ae8:	2201      	movgt	r2, #1
 8007aea:	4413      	add	r3, r2
 8007aec:	e7e0      	b.n	8007ab0 <_printf_float+0x1a4>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	055a      	lsls	r2, r3, #21
 8007af2:	d407      	bmi.n	8007b04 <_printf_float+0x1f8>
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	4642      	mov	r2, r8
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	d12c      	bne.n	8007b5c <_printf_float+0x250>
 8007b02:	e764      	b.n	80079ce <_printf_float+0xc2>
 8007b04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b08:	f240 80e0 	bls.w	8007ccc <_printf_float+0x3c0>
 8007b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b10:	2200      	movs	r2, #0
 8007b12:	2300      	movs	r3, #0
 8007b14:	f7f8 ffe2 	bl	8000adc <__aeabi_dcmpeq>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d034      	beq.n	8007b86 <_printf_float+0x27a>
 8007b1c:	4a37      	ldr	r2, [pc, #220]	; (8007bfc <_printf_float+0x2f0>)
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af51 	beq.w	80079ce <_printf_float+0xc2>
 8007b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b30:	429a      	cmp	r2, r3
 8007b32:	db02      	blt.n	8007b3a <_printf_float+0x22e>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	07d8      	lsls	r0, r3, #31
 8007b38:	d510      	bpl.n	8007b5c <_printf_float+0x250>
 8007b3a:	ee18 3a10 	vmov	r3, s16
 8007b3e:	4652      	mov	r2, sl
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af41 	beq.w	80079ce <_printf_float+0xc2>
 8007b4c:	f04f 0800 	mov.w	r8, #0
 8007b50:	f104 091a 	add.w	r9, r4, #26
 8007b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	dc09      	bgt.n	8007b70 <_printf_float+0x264>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	f100 8105 	bmi.w	8007d6e <_printf_float+0x462>
 8007b64:	68e0      	ldr	r0, [r4, #12]
 8007b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b68:	4298      	cmp	r0, r3
 8007b6a:	bfb8      	it	lt
 8007b6c:	4618      	movlt	r0, r3
 8007b6e:	e730      	b.n	80079d2 <_printf_float+0xc6>
 8007b70:	2301      	movs	r3, #1
 8007b72:	464a      	mov	r2, r9
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f af27 	beq.w	80079ce <_printf_float+0xc2>
 8007b80:	f108 0801 	add.w	r8, r8, #1
 8007b84:	e7e6      	b.n	8007b54 <_printf_float+0x248>
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc39      	bgt.n	8007c00 <_printf_float+0x2f4>
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	; (8007bfc <_printf_float+0x2f0>)
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f af19 	beq.w	80079ce <_printf_float+0xc2>
 8007b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d102      	bne.n	8007baa <_printf_float+0x29e>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07d9      	lsls	r1, r3, #31
 8007ba8:	d5d8      	bpl.n	8007b5c <_printf_float+0x250>
 8007baa:	ee18 3a10 	vmov	r3, s16
 8007bae:	4652      	mov	r2, sl
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af09 	beq.w	80079ce <_printf_float+0xc2>
 8007bbc:	f04f 0900 	mov.w	r9, #0
 8007bc0:	f104 0a1a 	add.w	sl, r4, #26
 8007bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc6:	425b      	negs	r3, r3
 8007bc8:	454b      	cmp	r3, r9
 8007bca:	dc01      	bgt.n	8007bd0 <_printf_float+0x2c4>
 8007bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bce:	e792      	b.n	8007af6 <_printf_float+0x1ea>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f aef7 	beq.w	80079ce <_printf_float+0xc2>
 8007be0:	f109 0901 	add.w	r9, r9, #1
 8007be4:	e7ee      	b.n	8007bc4 <_printf_float+0x2b8>
 8007be6:	bf00      	nop
 8007be8:	7fefffff 	.word	0x7fefffff
 8007bec:	0800b574 	.word	0x0800b574
 8007bf0:	0800b578 	.word	0x0800b578
 8007bf4:	0800b580 	.word	0x0800b580
 8007bf8:	0800b57c 	.word	0x0800b57c
 8007bfc:	0800b92c 	.word	0x0800b92c
 8007c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c04:	429a      	cmp	r2, r3
 8007c06:	bfa8      	it	ge
 8007c08:	461a      	movge	r2, r3
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	4691      	mov	r9, r2
 8007c0e:	dc37      	bgt.n	8007c80 <_printf_float+0x374>
 8007c10:	f04f 0b00 	mov.w	fp, #0
 8007c14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c18:	f104 021a 	add.w	r2, r4, #26
 8007c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c1e:	9305      	str	r3, [sp, #20]
 8007c20:	eba3 0309 	sub.w	r3, r3, r9
 8007c24:	455b      	cmp	r3, fp
 8007c26:	dc33      	bgt.n	8007c90 <_printf_float+0x384>
 8007c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	db3b      	blt.n	8007ca8 <_printf_float+0x39c>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07da      	lsls	r2, r3, #31
 8007c34:	d438      	bmi.n	8007ca8 <_printf_float+0x39c>
 8007c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c38:	9a05      	ldr	r2, [sp, #20]
 8007c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c3c:	1a9a      	subs	r2, r3, r2
 8007c3e:	eba3 0901 	sub.w	r9, r3, r1
 8007c42:	4591      	cmp	r9, r2
 8007c44:	bfa8      	it	ge
 8007c46:	4691      	movge	r9, r2
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	dc35      	bgt.n	8007cba <_printf_float+0x3ae>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c56:	f104 0a1a 	add.w	sl, r4, #26
 8007c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	eba3 0309 	sub.w	r3, r3, r9
 8007c64:	4543      	cmp	r3, r8
 8007c66:	f77f af79 	ble.w	8007b5c <_printf_float+0x250>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f aeaa 	beq.w	80079ce <_printf_float+0xc2>
 8007c7a:	f108 0801 	add.w	r8, r8, #1
 8007c7e:	e7ec      	b.n	8007c5a <_printf_float+0x34e>
 8007c80:	4613      	mov	r3, r2
 8007c82:	4631      	mov	r1, r6
 8007c84:	4642      	mov	r2, r8
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d1c0      	bne.n	8007c10 <_printf_float+0x304>
 8007c8e:	e69e      	b.n	80079ce <_printf_float+0xc2>
 8007c90:	2301      	movs	r3, #1
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	9205      	str	r2, [sp, #20]
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f43f ae97 	beq.w	80079ce <_printf_float+0xc2>
 8007ca0:	9a05      	ldr	r2, [sp, #20]
 8007ca2:	f10b 0b01 	add.w	fp, fp, #1
 8007ca6:	e7b9      	b.n	8007c1c <_printf_float+0x310>
 8007ca8:	ee18 3a10 	vmov	r3, s16
 8007cac:	4652      	mov	r2, sl
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d1be      	bne.n	8007c36 <_printf_float+0x32a>
 8007cb8:	e689      	b.n	80079ce <_printf_float+0xc2>
 8007cba:	9a05      	ldr	r2, [sp, #20]
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	4442      	add	r2, r8
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d1c1      	bne.n	8007c4e <_printf_float+0x342>
 8007cca:	e680      	b.n	80079ce <_printf_float+0xc2>
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cce:	2a01      	cmp	r2, #1
 8007cd0:	dc01      	bgt.n	8007cd6 <_printf_float+0x3ca>
 8007cd2:	07db      	lsls	r3, r3, #31
 8007cd4:	d538      	bpl.n	8007d48 <_printf_float+0x43c>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f43f ae74 	beq.w	80079ce <_printf_float+0xc2>
 8007ce6:	ee18 3a10 	vmov	r3, s16
 8007cea:	4652      	mov	r2, sl
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f ae6b 	beq.w	80079ce <_printf_float+0xc2>
 8007cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_dcmpeq>
 8007d04:	b9d8      	cbnz	r0, 8007d3e <_printf_float+0x432>
 8007d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d08:	f108 0201 	add.w	r2, r8, #1
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	d10e      	bne.n	8007d36 <_printf_float+0x42a>
 8007d18:	e659      	b.n	80079ce <_printf_float+0xc2>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4652      	mov	r2, sl
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae52 	beq.w	80079ce <_printf_float+0xc2>
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d30:	3b01      	subs	r3, #1
 8007d32:	4543      	cmp	r3, r8
 8007d34:	dcf1      	bgt.n	8007d1a <_printf_float+0x40e>
 8007d36:	464b      	mov	r3, r9
 8007d38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d3c:	e6dc      	b.n	8007af8 <_printf_float+0x1ec>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	f104 0a1a 	add.w	sl, r4, #26
 8007d46:	e7f2      	b.n	8007d2e <_printf_float+0x422>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	e7df      	b.n	8007d0e <_printf_float+0x402>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	464a      	mov	r2, r9
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f43f ae38 	beq.w	80079ce <_printf_float+0xc2>
 8007d5e:	f108 0801 	add.w	r8, r8, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	dcf0      	bgt.n	8007d4e <_printf_float+0x442>
 8007d6c:	e6fa      	b.n	8007b64 <_printf_float+0x258>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0919 	add.w	r9, r4, #25
 8007d76:	e7f4      	b.n	8007d62 <_printf_float+0x456>

08007d78 <_printf_common>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	4699      	mov	r9, r3
 8007d80:	688a      	ldr	r2, [r1, #8]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bfb8      	it	lt
 8007d8c:	4613      	movlt	r3, r2
 8007d8e:	6033      	str	r3, [r6, #0]
 8007d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d94:	4607      	mov	r7, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	b10a      	cbz	r2, 8007d9e <_printf_common+0x26>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	0699      	lsls	r1, r3, #26
 8007da2:	bf42      	ittt	mi
 8007da4:	6833      	ldrmi	r3, [r6, #0]
 8007da6:	3302      	addmi	r3, #2
 8007da8:	6033      	strmi	r3, [r6, #0]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d106      	bne.n	8007dc0 <_printf_common+0x48>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dc26      	bgt.n	8007e0e <_printf_common+0x96>
 8007dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dc4:	1e13      	subs	r3, r2, #0
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	bf18      	it	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d42b      	bmi.n	8007e28 <_printf_common+0xb0>
 8007dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	47c0      	blx	r8
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d01e      	beq.n	8007e1c <_printf_common+0xa4>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	68e5      	ldr	r5, [r4, #12]
 8007de2:	6832      	ldr	r2, [r6, #0]
 8007de4:	f003 0306 	and.w	r3, r3, #6
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	bf08      	it	eq
 8007dec:	1aad      	subeq	r5, r5, r2
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	6922      	ldr	r2, [r4, #16]
 8007df2:	bf0c      	ite	eq
 8007df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df8:	2500      	movne	r5, #0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bfc4      	itt	gt
 8007dfe:	1a9b      	subgt	r3, r3, r2
 8007e00:	18ed      	addgt	r5, r5, r3
 8007e02:	2600      	movs	r6, #0
 8007e04:	341a      	adds	r4, #26
 8007e06:	42b5      	cmp	r5, r6
 8007e08:	d11a      	bne.n	8007e40 <_printf_common+0xc8>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e008      	b.n	8007e20 <_printf_common+0xa8>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4652      	mov	r2, sl
 8007e12:	4649      	mov	r1, r9
 8007e14:	4638      	mov	r0, r7
 8007e16:	47c0      	blx	r8
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d103      	bne.n	8007e24 <_printf_common+0xac>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e24:	3501      	adds	r5, #1
 8007e26:	e7c6      	b.n	8007db6 <_printf_common+0x3e>
 8007e28:	18e1      	adds	r1, r4, r3
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	2030      	movs	r0, #48	; 0x30
 8007e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e32:	4422      	add	r2, r4
 8007e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	e7c7      	b.n	8007dd0 <_printf_common+0x58>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4622      	mov	r2, r4
 8007e44:	4649      	mov	r1, r9
 8007e46:	4638      	mov	r0, r7
 8007e48:	47c0      	blx	r8
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d0e6      	beq.n	8007e1c <_printf_common+0xa4>
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7d9      	b.n	8007e06 <_printf_common+0x8e>
	...

08007e54 <_printf_i>:
 8007e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	7e0f      	ldrb	r7, [r1, #24]
 8007e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e5c:	2f78      	cmp	r7, #120	; 0x78
 8007e5e:	4691      	mov	r9, r2
 8007e60:	4680      	mov	r8, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	469a      	mov	sl, r3
 8007e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e6a:	d807      	bhi.n	8007e7c <_printf_i+0x28>
 8007e6c:	2f62      	cmp	r7, #98	; 0x62
 8007e6e:	d80a      	bhi.n	8007e86 <_printf_i+0x32>
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	f000 80d8 	beq.w	8008026 <_printf_i+0x1d2>
 8007e76:	2f58      	cmp	r7, #88	; 0x58
 8007e78:	f000 80a3 	beq.w	8007fc2 <_printf_i+0x16e>
 8007e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e84:	e03a      	b.n	8007efc <_printf_i+0xa8>
 8007e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e8a:	2b15      	cmp	r3, #21
 8007e8c:	d8f6      	bhi.n	8007e7c <_printf_i+0x28>
 8007e8e:	a101      	add	r1, pc, #4	; (adr r1, 8007e94 <_printf_i+0x40>)
 8007e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007f01 	.word	0x08007f01
 8007e9c:	08007e7d 	.word	0x08007e7d
 8007ea0:	08007e7d 	.word	0x08007e7d
 8007ea4:	08007e7d 	.word	0x08007e7d
 8007ea8:	08007e7d 	.word	0x08007e7d
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007e7d 	.word	0x08007e7d
 8007eb4:	08007e7d 	.word	0x08007e7d
 8007eb8:	08007e7d 	.word	0x08007e7d
 8007ebc:	08007e7d 	.word	0x08007e7d
 8007ec0:	0800800d 	.word	0x0800800d
 8007ec4:	08007f31 	.word	0x08007f31
 8007ec8:	08007fef 	.word	0x08007fef
 8007ecc:	08007e7d 	.word	0x08007e7d
 8007ed0:	08007e7d 	.word	0x08007e7d
 8007ed4:	0800802f 	.word	0x0800802f
 8007ed8:	08007e7d 	.word	0x08007e7d
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007e7d 	.word	0x08007e7d
 8007ee4:	08007e7d 	.word	0x08007e7d
 8007ee8:	08007ff7 	.word	0x08007ff7
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	602a      	str	r2, [r5, #0]
 8007ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0a3      	b.n	8008048 <_printf_i+0x1f4>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	6829      	ldr	r1, [r5, #0]
 8007f04:	0606      	lsls	r6, r0, #24
 8007f06:	f101 0304 	add.w	r3, r1, #4
 8007f0a:	d50a      	bpl.n	8007f22 <_printf_i+0xce>
 8007f0c:	680e      	ldr	r6, [r1, #0]
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	da03      	bge.n	8007f1c <_printf_i+0xc8>
 8007f14:	232d      	movs	r3, #45	; 0x2d
 8007f16:	4276      	negs	r6, r6
 8007f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f1c:	485e      	ldr	r0, [pc, #376]	; (8008098 <_printf_i+0x244>)
 8007f1e:	230a      	movs	r3, #10
 8007f20:	e019      	b.n	8007f56 <_printf_i+0x102>
 8007f22:	680e      	ldr	r6, [r1, #0]
 8007f24:	602b      	str	r3, [r5, #0]
 8007f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f2a:	bf18      	it	ne
 8007f2c:	b236      	sxthne	r6, r6
 8007f2e:	e7ef      	b.n	8007f10 <_printf_i+0xbc>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1d19      	adds	r1, r3, #4
 8007f36:	6029      	str	r1, [r5, #0]
 8007f38:	0601      	lsls	r1, r0, #24
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0xec>
 8007f3c:	681e      	ldr	r6, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0xf2>
 8007f40:	0646      	lsls	r6, r0, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0xe8>
 8007f44:	881e      	ldrh	r6, [r3, #0]
 8007f46:	4854      	ldr	r0, [pc, #336]	; (8008098 <_printf_i+0x244>)
 8007f48:	2f6f      	cmp	r7, #111	; 0x6f
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2308      	moveq	r3, #8
 8007f4e:	230a      	movne	r3, #10
 8007f50:	2100      	movs	r1, #0
 8007f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f56:	6865      	ldr	r5, [r4, #4]
 8007f58:	60a5      	str	r5, [r4, #8]
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	bfa2      	ittt	ge
 8007f5e:	6821      	ldrge	r1, [r4, #0]
 8007f60:	f021 0104 	bicge.w	r1, r1, #4
 8007f64:	6021      	strge	r1, [r4, #0]
 8007f66:	b90e      	cbnz	r6, 8007f6c <_printf_i+0x118>
 8007f68:	2d00      	cmp	r5, #0
 8007f6a:	d04d      	beq.n	8008008 <_printf_i+0x1b4>
 8007f6c:	4615      	mov	r5, r2
 8007f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f72:	fb03 6711 	mls	r7, r3, r1, r6
 8007f76:	5dc7      	ldrb	r7, [r0, r7]
 8007f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	42bb      	cmp	r3, r7
 8007f80:	460e      	mov	r6, r1
 8007f82:	d9f4      	bls.n	8007f6e <_printf_i+0x11a>
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d10b      	bne.n	8007fa0 <_printf_i+0x14c>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	07de      	lsls	r6, r3, #31
 8007f8c:	d508      	bpl.n	8007fa0 <_printf_i+0x14c>
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	6861      	ldr	r1, [r4, #4]
 8007f92:	4299      	cmp	r1, r3
 8007f94:	bfde      	ittt	le
 8007f96:	2330      	movle	r3, #48	; 0x30
 8007f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fa0:	1b52      	subs	r2, r2, r5
 8007fa2:	6122      	str	r2, [r4, #16]
 8007fa4:	f8cd a000 	str.w	sl, [sp]
 8007fa8:	464b      	mov	r3, r9
 8007faa:	aa03      	add	r2, sp, #12
 8007fac:	4621      	mov	r1, r4
 8007fae:	4640      	mov	r0, r8
 8007fb0:	f7ff fee2 	bl	8007d78 <_printf_common>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d14c      	bne.n	8008052 <_printf_i+0x1fe>
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fbc:	b004      	add	sp, #16
 8007fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc2:	4835      	ldr	r0, [pc, #212]	; (8008098 <_printf_i+0x244>)
 8007fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fc8:	6829      	ldr	r1, [r5, #0]
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fd0:	6029      	str	r1, [r5, #0]
 8007fd2:	061d      	lsls	r5, r3, #24
 8007fd4:	d514      	bpl.n	8008000 <_printf_i+0x1ac>
 8007fd6:	07df      	lsls	r7, r3, #31
 8007fd8:	bf44      	itt	mi
 8007fda:	f043 0320 	orrmi.w	r3, r3, #32
 8007fde:	6023      	strmi	r3, [r4, #0]
 8007fe0:	b91e      	cbnz	r6, 8007fea <_printf_i+0x196>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	f023 0320 	bic.w	r3, r3, #32
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	2310      	movs	r3, #16
 8007fec:	e7b0      	b.n	8007f50 <_printf_i+0xfc>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	f043 0320 	orr.w	r3, r3, #32
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	2378      	movs	r3, #120	; 0x78
 8007ff8:	4828      	ldr	r0, [pc, #160]	; (800809c <_printf_i+0x248>)
 8007ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ffe:	e7e3      	b.n	8007fc8 <_printf_i+0x174>
 8008000:	0659      	lsls	r1, r3, #25
 8008002:	bf48      	it	mi
 8008004:	b2b6      	uxthmi	r6, r6
 8008006:	e7e6      	b.n	8007fd6 <_printf_i+0x182>
 8008008:	4615      	mov	r5, r2
 800800a:	e7bb      	b.n	8007f84 <_printf_i+0x130>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	6826      	ldr	r6, [r4, #0]
 8008010:	6961      	ldr	r1, [r4, #20]
 8008012:	1d18      	adds	r0, r3, #4
 8008014:	6028      	str	r0, [r5, #0]
 8008016:	0635      	lsls	r5, r6, #24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	d501      	bpl.n	8008020 <_printf_i+0x1cc>
 800801c:	6019      	str	r1, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0x1d2>
 8008020:	0670      	lsls	r0, r6, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0x1c8>
 8008024:	8019      	strh	r1, [r3, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	4615      	mov	r5, r2
 800802c:	e7ba      	b.n	8007fa4 <_printf_i+0x150>
 800802e:	682b      	ldr	r3, [r5, #0]
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	602a      	str	r2, [r5, #0]
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	2100      	movs	r1, #0
 800803a:	4628      	mov	r0, r5
 800803c:	f7f8 f8d0 	bl	80001e0 <memchr>
 8008040:	b108      	cbz	r0, 8008046 <_printf_i+0x1f2>
 8008042:	1b40      	subs	r0, r0, r5
 8008044:	6060      	str	r0, [r4, #4]
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	2300      	movs	r3, #0
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008050:	e7a8      	b.n	8007fa4 <_printf_i+0x150>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	462a      	mov	r2, r5
 8008056:	4649      	mov	r1, r9
 8008058:	4640      	mov	r0, r8
 800805a:	47d0      	blx	sl
 800805c:	3001      	adds	r0, #1
 800805e:	d0ab      	beq.n	8007fb8 <_printf_i+0x164>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	d413      	bmi.n	800808e <_printf_i+0x23a>
 8008066:	68e0      	ldr	r0, [r4, #12]
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	4298      	cmp	r0, r3
 800806c:	bfb8      	it	lt
 800806e:	4618      	movlt	r0, r3
 8008070:	e7a4      	b.n	8007fbc <_printf_i+0x168>
 8008072:	2301      	movs	r3, #1
 8008074:	4632      	mov	r2, r6
 8008076:	4649      	mov	r1, r9
 8008078:	4640      	mov	r0, r8
 800807a:	47d0      	blx	sl
 800807c:	3001      	adds	r0, #1
 800807e:	d09b      	beq.n	8007fb8 <_printf_i+0x164>
 8008080:	3501      	adds	r5, #1
 8008082:	68e3      	ldr	r3, [r4, #12]
 8008084:	9903      	ldr	r1, [sp, #12]
 8008086:	1a5b      	subs	r3, r3, r1
 8008088:	42ab      	cmp	r3, r5
 800808a:	dcf2      	bgt.n	8008072 <_printf_i+0x21e>
 800808c:	e7eb      	b.n	8008066 <_printf_i+0x212>
 800808e:	2500      	movs	r5, #0
 8008090:	f104 0619 	add.w	r6, r4, #25
 8008094:	e7f5      	b.n	8008082 <_printf_i+0x22e>
 8008096:	bf00      	nop
 8008098:	0800b584 	.word	0x0800b584
 800809c:	0800b595 	.word	0x0800b595

080080a0 <_puts_r>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	460e      	mov	r6, r1
 80080a4:	4605      	mov	r5, r0
 80080a6:	b118      	cbz	r0, 80080b0 <_puts_r+0x10>
 80080a8:	6983      	ldr	r3, [r0, #24]
 80080aa:	b90b      	cbnz	r3, 80080b0 <_puts_r+0x10>
 80080ac:	f7fe ff4e 	bl	8006f4c <__sinit>
 80080b0:	69ab      	ldr	r3, [r5, #24]
 80080b2:	68ac      	ldr	r4, [r5, #8]
 80080b4:	b913      	cbnz	r3, 80080bc <_puts_r+0x1c>
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7fe ff48 	bl	8006f4c <__sinit>
 80080bc:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <_puts_r+0xd0>)
 80080be:	429c      	cmp	r4, r3
 80080c0:	d120      	bne.n	8008104 <_puts_r+0x64>
 80080c2:	686c      	ldr	r4, [r5, #4]
 80080c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c6:	07db      	lsls	r3, r3, #31
 80080c8:	d405      	bmi.n	80080d6 <_puts_r+0x36>
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	0598      	lsls	r0, r3, #22
 80080ce:	d402      	bmi.n	80080d6 <_puts_r+0x36>
 80080d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d2:	f7fe ffff 	bl	80070d4 <__retarget_lock_acquire_recursive>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	0719      	lsls	r1, r3, #28
 80080da:	d51d      	bpl.n	8008118 <_puts_r+0x78>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b1db      	cbz	r3, 8008118 <_puts_r+0x78>
 80080e0:	3e01      	subs	r6, #1
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080e8:	3b01      	subs	r3, #1
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	bb39      	cbnz	r1, 800813e <_puts_r+0x9e>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da38      	bge.n	8008164 <_puts_r+0xc4>
 80080f2:	4622      	mov	r2, r4
 80080f4:	210a      	movs	r1, #10
 80080f6:	4628      	mov	r0, r5
 80080f8:	f000 fb78 	bl	80087ec <__swbuf_r>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d011      	beq.n	8008124 <_puts_r+0x84>
 8008100:	250a      	movs	r5, #10
 8008102:	e011      	b.n	8008128 <_puts_r+0x88>
 8008104:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <_puts_r+0xd4>)
 8008106:	429c      	cmp	r4, r3
 8008108:	d101      	bne.n	800810e <_puts_r+0x6e>
 800810a:	68ac      	ldr	r4, [r5, #8]
 800810c:	e7da      	b.n	80080c4 <_puts_r+0x24>
 800810e:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <_puts_r+0xd8>)
 8008110:	429c      	cmp	r4, r3
 8008112:	bf08      	it	eq
 8008114:	68ec      	ldreq	r4, [r5, #12]
 8008116:	e7d5      	b.n	80080c4 <_puts_r+0x24>
 8008118:	4621      	mov	r1, r4
 800811a:	4628      	mov	r0, r5
 800811c:	f000 fbca 	bl	80088b4 <__swsetup_r>
 8008120:	2800      	cmp	r0, #0
 8008122:	d0dd      	beq.n	80080e0 <_puts_r+0x40>
 8008124:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800812a:	07da      	lsls	r2, r3, #31
 800812c:	d405      	bmi.n	800813a <_puts_r+0x9a>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	059b      	lsls	r3, r3, #22
 8008132:	d402      	bmi.n	800813a <_puts_r+0x9a>
 8008134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008136:	f7fe ffcf 	bl	80070d8 <__retarget_lock_release_recursive>
 800813a:	4628      	mov	r0, r5
 800813c:	bd70      	pop	{r4, r5, r6, pc}
 800813e:	2b00      	cmp	r3, #0
 8008140:	da04      	bge.n	800814c <_puts_r+0xac>
 8008142:	69a2      	ldr	r2, [r4, #24]
 8008144:	429a      	cmp	r2, r3
 8008146:	dc06      	bgt.n	8008156 <_puts_r+0xb6>
 8008148:	290a      	cmp	r1, #10
 800814a:	d004      	beq.n	8008156 <_puts_r+0xb6>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	7019      	strb	r1, [r3, #0]
 8008154:	e7c5      	b.n	80080e2 <_puts_r+0x42>
 8008156:	4622      	mov	r2, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fb47 	bl	80087ec <__swbuf_r>
 800815e:	3001      	adds	r0, #1
 8008160:	d1bf      	bne.n	80080e2 <_puts_r+0x42>
 8008162:	e7df      	b.n	8008124 <_puts_r+0x84>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	250a      	movs	r5, #10
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	6022      	str	r2, [r4, #0]
 800816c:	701d      	strb	r5, [r3, #0]
 800816e:	e7db      	b.n	8008128 <_puts_r+0x88>
 8008170:	0800b470 	.word	0x0800b470
 8008174:	0800b490 	.word	0x0800b490
 8008178:	0800b450 	.word	0x0800b450

0800817c <puts>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <puts+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f7ff bf8d 	b.w	80080a0 <_puts_r>
 8008186:	bf00      	nop
 8008188:	20000014 	.word	0x20000014

0800818c <cleanup_glue>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	6809      	ldr	r1, [r1, #0]
 8008192:	4605      	mov	r5, r0
 8008194:	b109      	cbz	r1, 800819a <cleanup_glue+0xe>
 8008196:	f7ff fff9 	bl	800818c <cleanup_glue>
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a2:	f7ff ba33 	b.w	800760c <_free_r>
	...

080081a8 <_reclaim_reent>:
 80081a8:	4b2c      	ldr	r3, [pc, #176]	; (800825c <_reclaim_reent+0xb4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4283      	cmp	r3, r0
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	4604      	mov	r4, r0
 80081b2:	d051      	beq.n	8008258 <_reclaim_reent+0xb0>
 80081b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80081b6:	b143      	cbz	r3, 80081ca <_reclaim_reent+0x22>
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d14a      	bne.n	8008254 <_reclaim_reent+0xac>
 80081be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c0:	6819      	ldr	r1, [r3, #0]
 80081c2:	b111      	cbz	r1, 80081ca <_reclaim_reent+0x22>
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff fa21 	bl	800760c <_free_r>
 80081ca:	6961      	ldr	r1, [r4, #20]
 80081cc:	b111      	cbz	r1, 80081d4 <_reclaim_reent+0x2c>
 80081ce:	4620      	mov	r0, r4
 80081d0:	f7ff fa1c 	bl	800760c <_free_r>
 80081d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081d6:	b111      	cbz	r1, 80081de <_reclaim_reent+0x36>
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff fa17 	bl	800760c <_free_r>
 80081de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081e0:	b111      	cbz	r1, 80081e8 <_reclaim_reent+0x40>
 80081e2:	4620      	mov	r0, r4
 80081e4:	f7ff fa12 	bl	800760c <_free_r>
 80081e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081ea:	b111      	cbz	r1, 80081f2 <_reclaim_reent+0x4a>
 80081ec:	4620      	mov	r0, r4
 80081ee:	f7ff fa0d 	bl	800760c <_free_r>
 80081f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80081f4:	b111      	cbz	r1, 80081fc <_reclaim_reent+0x54>
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7ff fa08 	bl	800760c <_free_r>
 80081fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081fe:	b111      	cbz	r1, 8008206 <_reclaim_reent+0x5e>
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff fa03 	bl	800760c <_free_r>
 8008206:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008208:	b111      	cbz	r1, 8008210 <_reclaim_reent+0x68>
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff f9fe 	bl	800760c <_free_r>
 8008210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008212:	b111      	cbz	r1, 800821a <_reclaim_reent+0x72>
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff f9f9 	bl	800760c <_free_r>
 800821a:	69a3      	ldr	r3, [r4, #24]
 800821c:	b1e3      	cbz	r3, 8008258 <_reclaim_reent+0xb0>
 800821e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008220:	4620      	mov	r0, r4
 8008222:	4798      	blx	r3
 8008224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008226:	b1b9      	cbz	r1, 8008258 <_reclaim_reent+0xb0>
 8008228:	4620      	mov	r0, r4
 800822a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800822e:	f7ff bfad 	b.w	800818c <cleanup_glue>
 8008232:	5949      	ldr	r1, [r1, r5]
 8008234:	b941      	cbnz	r1, 8008248 <_reclaim_reent+0xa0>
 8008236:	3504      	adds	r5, #4
 8008238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823a:	2d80      	cmp	r5, #128	; 0x80
 800823c:	68d9      	ldr	r1, [r3, #12]
 800823e:	d1f8      	bne.n	8008232 <_reclaim_reent+0x8a>
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff f9e3 	bl	800760c <_free_r>
 8008246:	e7ba      	b.n	80081be <_reclaim_reent+0x16>
 8008248:	680e      	ldr	r6, [r1, #0]
 800824a:	4620      	mov	r0, r4
 800824c:	f7ff f9de 	bl	800760c <_free_r>
 8008250:	4631      	mov	r1, r6
 8008252:	e7ef      	b.n	8008234 <_reclaim_reent+0x8c>
 8008254:	2500      	movs	r5, #0
 8008256:	e7ef      	b.n	8008238 <_reclaim_reent+0x90>
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	bf00      	nop
 800825c:	20000014 	.word	0x20000014

08008260 <_sbrk_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d06      	ldr	r5, [pc, #24]	; (800827c <_sbrk_r+0x1c>)
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7f9 fbbe 	bl	80019ec <_sbrk>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_sbrk_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_sbrk_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	20004ea0 	.word	0x20004ea0

08008280 <sniprintf>:
 8008280:	b40c      	push	{r2, r3}
 8008282:	b530      	push	{r4, r5, lr}
 8008284:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <sniprintf+0x64>)
 8008286:	1e0c      	subs	r4, r1, #0
 8008288:	681d      	ldr	r5, [r3, #0]
 800828a:	b09d      	sub	sp, #116	; 0x74
 800828c:	da08      	bge.n	80082a0 <sniprintf+0x20>
 800828e:	238b      	movs	r3, #139	; 0x8b
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008296:	b01d      	add	sp, #116	; 0x74
 8008298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800829c:	b002      	add	sp, #8
 800829e:	4770      	bx	lr
 80082a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80082a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082a8:	bf14      	ite	ne
 80082aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80082ae:	4623      	moveq	r3, r4
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9006      	str	r0, [sp, #24]
 80082bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082c2:	ab21      	add	r3, sp, #132	; 0x84
 80082c4:	a902      	add	r1, sp, #8
 80082c6:	4628      	mov	r0, r5
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	f001 ffb9 	bl	800a240 <_svfiprintf_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	bfbc      	itt	lt
 80082d2:	238b      	movlt	r3, #139	; 0x8b
 80082d4:	602b      	strlt	r3, [r5, #0]
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d0dd      	beq.n	8008296 <sniprintf+0x16>
 80082da:	9b02      	ldr	r3, [sp, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e7d9      	b.n	8008296 <sniprintf+0x16>
 80082e2:	bf00      	nop
 80082e4:	20000014 	.word	0x20000014

080082e8 <__sread>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	460c      	mov	r4, r1
 80082ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f0:	f002 fa00 	bl	800a6f4 <_read_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	bfab      	itete	ge
 80082f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082fa:	89a3      	ldrhlt	r3, [r4, #12]
 80082fc:	181b      	addge	r3, r3, r0
 80082fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008302:	bfac      	ite	ge
 8008304:	6563      	strge	r3, [r4, #84]	; 0x54
 8008306:	81a3      	strhlt	r3, [r4, #12]
 8008308:	bd10      	pop	{r4, pc}

0800830a <__seofread>:
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr

0800830e <__swrite>:
 800830e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008312:	461f      	mov	r7, r3
 8008314:	898b      	ldrh	r3, [r1, #12]
 8008316:	05db      	lsls	r3, r3, #23
 8008318:	4605      	mov	r5, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4616      	mov	r6, r2
 800831e:	d505      	bpl.n	800832c <__swrite+0x1e>
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	2302      	movs	r3, #2
 8008326:	2200      	movs	r2, #0
 8008328:	f001 fb10 	bl	800994c <_lseek_r>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	4628      	mov	r0, r5
 800833e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008342:	f000 baa5 	b.w	8008890 <_write_r>

08008346 <__sseek>:
 8008346:	b510      	push	{r4, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800834e:	f001 fafd 	bl	800994c <_lseek_r>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	bf15      	itete	ne
 8008358:	6560      	strne	r0, [r4, #84]	; 0x54
 800835a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800835e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008362:	81a3      	strheq	r3, [r4, #12]
 8008364:	bf18      	it	ne
 8008366:	81a3      	strhne	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__sclose>:
 800836a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836e:	f000 bb2d 	b.w	80089cc <_close_r>
	...

08008374 <__tzcalc_limits>:
 8008374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	4605      	mov	r5, r0
 800837a:	f001 fadf 	bl	800993c <__gettzinfo>
 800837e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8008382:	429d      	cmp	r5, r3
 8008384:	f340 8099 	ble.w	80084ba <__tzcalc_limits+0x146>
 8008388:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800838c:	18ac      	adds	r4, r5, r2
 800838e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8008392:	f240 126d 	movw	r2, #365	; 0x16d
 8008396:	10a4      	asrs	r4, r4, #2
 8008398:	fb02 4403 	mla	r4, r2, r3, r4
 800839c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80083a0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80083a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a8:	441c      	add	r4, r3
 80083aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80083ae:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80083b2:	fb95 fcf3 	sdiv	ip, r5, r3
 80083b6:	fb03 5c1c 	mls	ip, r3, ip, r5
 80083ba:	186a      	adds	r2, r5, r1
 80083bc:	fabc f68c 	clz	r6, ip
 80083c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80083c4:	f005 0303 	and.w	r3, r5, #3
 80083c8:	4414      	add	r4, r2
 80083ca:	2264      	movs	r2, #100	; 0x64
 80083cc:	6045      	str	r5, [r0, #4]
 80083ce:	fb95 f7f2 	sdiv	r7, r5, r2
 80083d2:	0976      	lsrs	r6, r6, #5
 80083d4:	fb02 5717 	mls	r7, r2, r7, r5
 80083d8:	4601      	mov	r1, r0
 80083da:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f04f 0a07 	mov.w	sl, #7
 80083e4:	7a0d      	ldrb	r5, [r1, #8]
 80083e6:	694b      	ldr	r3, [r1, #20]
 80083e8:	2d4a      	cmp	r5, #74	; 0x4a
 80083ea:	d12d      	bne.n	8008448 <__tzcalc_limits+0xd4>
 80083ec:	9a00      	ldr	r2, [sp, #0]
 80083ee:	eb04 0e03 	add.w	lr, r4, r3
 80083f2:	b902      	cbnz	r2, 80083f6 <__tzcalc_limits+0x82>
 80083f4:	b917      	cbnz	r7, 80083fc <__tzcalc_limits+0x88>
 80083f6:	f1bc 0f00 	cmp.w	ip, #0
 80083fa:	d123      	bne.n	8008444 <__tzcalc_limits+0xd0>
 80083fc:	2b3b      	cmp	r3, #59	; 0x3b
 80083fe:	bfd4      	ite	le
 8008400:	2300      	movle	r3, #0
 8008402:	2301      	movgt	r3, #1
 8008404:	4473      	add	r3, lr
 8008406:	3b01      	subs	r3, #1
 8008408:	698d      	ldr	r5, [r1, #24]
 800840a:	4a2d      	ldr	r2, [pc, #180]	; (80084c0 <__tzcalc_limits+0x14c>)
 800840c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8008410:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8008414:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008416:	18ed      	adds	r5, r5, r3
 8008418:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800841c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8008420:	3128      	adds	r1, #40	; 0x28
 8008422:	458b      	cmp	fp, r1
 8008424:	d1de      	bne.n	80083e4 <__tzcalc_limits+0x70>
 8008426:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800842a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800842e:	428c      	cmp	r4, r1
 8008430:	eb72 0303 	sbcs.w	r3, r2, r3
 8008434:	bfb4      	ite	lt
 8008436:	2301      	movlt	r3, #1
 8008438:	2300      	movge	r3, #0
 800843a:	6003      	str	r3, [r0, #0]
 800843c:	2001      	movs	r0, #1
 800843e:	b003      	add	sp, #12
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	2300      	movs	r3, #0
 8008446:	e7dd      	b.n	8008404 <__tzcalc_limits+0x90>
 8008448:	2d44      	cmp	r5, #68	; 0x44
 800844a:	d101      	bne.n	8008450 <__tzcalc_limits+0xdc>
 800844c:	4423      	add	r3, r4
 800844e:	e7db      	b.n	8008408 <__tzcalc_limits+0x94>
 8008450:	9a00      	ldr	r2, [sp, #0]
 8008452:	bb62      	cbnz	r2, 80084ae <__tzcalc_limits+0x13a>
 8008454:	2f00      	cmp	r7, #0
 8008456:	bf0c      	ite	eq
 8008458:	4635      	moveq	r5, r6
 800845a:	2501      	movne	r5, #1
 800845c:	68ca      	ldr	r2, [r1, #12]
 800845e:	9201      	str	r2, [sp, #4]
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <__tzcalc_limits+0x150>)
 8008462:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008466:	fb09 2505 	mla	r5, r9, r5, r2
 800846a:	46a6      	mov	lr, r4
 800846c:	f04f 0800 	mov.w	r8, #0
 8008470:	3d04      	subs	r5, #4
 8008472:	9a01      	ldr	r2, [sp, #4]
 8008474:	f108 0801 	add.w	r8, r8, #1
 8008478:	4542      	cmp	r2, r8
 800847a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800847e:	dc18      	bgt.n	80084b2 <__tzcalc_limits+0x13e>
 8008480:	f10e 0504 	add.w	r5, lr, #4
 8008484:	fb95 f8fa 	sdiv	r8, r5, sl
 8008488:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800848c:	eba5 0808 	sub.w	r8, r5, r8
 8008490:	ebb3 0808 	subs.w	r8, r3, r8
 8008494:	690b      	ldr	r3, [r1, #16]
 8008496:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800849a:	bf48      	it	mi
 800849c:	f108 0807 	addmi.w	r8, r8, #7
 80084a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80084a4:	4443      	add	r3, r8
 80084a6:	454b      	cmp	r3, r9
 80084a8:	da05      	bge.n	80084b6 <__tzcalc_limits+0x142>
 80084aa:	4473      	add	r3, lr
 80084ac:	e7ac      	b.n	8008408 <__tzcalc_limits+0x94>
 80084ae:	4635      	mov	r5, r6
 80084b0:	e7d4      	b.n	800845c <__tzcalc_limits+0xe8>
 80084b2:	44ce      	add	lr, r9
 80084b4:	e7dd      	b.n	8008472 <__tzcalc_limits+0xfe>
 80084b6:	3b07      	subs	r3, #7
 80084b8:	e7f5      	b.n	80084a6 <__tzcalc_limits+0x132>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e7bf      	b.n	800843e <__tzcalc_limits+0xca>
 80084be:	bf00      	nop
 80084c0:	00015180 	.word	0x00015180
 80084c4:	0800b514 	.word	0x0800b514

080084c8 <__tz_lock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__tz_lock+0x8>)
 80084ca:	f7fe be02 	b.w	80070d2 <__retarget_lock_acquire>
 80084ce:	bf00      	nop
 80084d0:	20004e94 	.word	0x20004e94

080084d4 <__tz_unlock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__tz_unlock+0x8>)
 80084d6:	f7fe bdfe 	b.w	80070d6 <__retarget_lock_release>
 80084da:	bf00      	nop
 80084dc:	20004e94 	.word	0x20004e94

080084e0 <_tzset_unlocked>:
 80084e0:	4b01      	ldr	r3, [pc, #4]	; (80084e8 <_tzset_unlocked+0x8>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	f000 b802 	b.w	80084ec <_tzset_unlocked_r>
 80084e8:	20000014 	.word	0x20000014

080084ec <_tzset_unlocked_r>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	b08d      	sub	sp, #52	; 0x34
 80084f2:	4607      	mov	r7, r0
 80084f4:	f001 fa22 	bl	800993c <__gettzinfo>
 80084f8:	49b0      	ldr	r1, [pc, #704]	; (80087bc <_tzset_unlocked_r+0x2d0>)
 80084fa:	4eb1      	ldr	r6, [pc, #708]	; (80087c0 <_tzset_unlocked_r+0x2d4>)
 80084fc:	4605      	mov	r5, r0
 80084fe:	4638      	mov	r0, r7
 8008500:	f001 fa14 	bl	800992c <_getenv_r>
 8008504:	4604      	mov	r4, r0
 8008506:	b970      	cbnz	r0, 8008526 <_tzset_unlocked_r+0x3a>
 8008508:	4bae      	ldr	r3, [pc, #696]	; (80087c4 <_tzset_unlocked_r+0x2d8>)
 800850a:	4aaf      	ldr	r2, [pc, #700]	; (80087c8 <_tzset_unlocked_r+0x2dc>)
 800850c:	6018      	str	r0, [r3, #0]
 800850e:	4baf      	ldr	r3, [pc, #700]	; (80087cc <_tzset_unlocked_r+0x2e0>)
 8008510:	6018      	str	r0, [r3, #0]
 8008512:	4baf      	ldr	r3, [pc, #700]	; (80087d0 <_tzset_unlocked_r+0x2e4>)
 8008514:	6830      	ldr	r0, [r6, #0]
 8008516:	e9c3 2200 	strd	r2, r2, [r3]
 800851a:	f7fe fde7 	bl	80070ec <free>
 800851e:	6034      	str	r4, [r6, #0]
 8008520:	b00d      	add	sp, #52	; 0x34
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	6831      	ldr	r1, [r6, #0]
 8008528:	2900      	cmp	r1, #0
 800852a:	d162      	bne.n	80085f2 <_tzset_unlocked_r+0x106>
 800852c:	6830      	ldr	r0, [r6, #0]
 800852e:	f7fe fddd 	bl	80070ec <free>
 8008532:	4620      	mov	r0, r4
 8008534:	f7f7 fe4c 	bl	80001d0 <strlen>
 8008538:	1c41      	adds	r1, r0, #1
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff f8d2 	bl	80076e4 <_malloc_r>
 8008540:	6030      	str	r0, [r6, #0]
 8008542:	2800      	cmp	r0, #0
 8008544:	d15a      	bne.n	80085fc <_tzset_unlocked_r+0x110>
 8008546:	7823      	ldrb	r3, [r4, #0]
 8008548:	4aa2      	ldr	r2, [pc, #648]	; (80087d4 <_tzset_unlocked_r+0x2e8>)
 800854a:	49a3      	ldr	r1, [pc, #652]	; (80087d8 <_tzset_unlocked_r+0x2ec>)
 800854c:	2b3a      	cmp	r3, #58	; 0x3a
 800854e:	bf08      	it	eq
 8008550:	3401      	addeq	r4, #1
 8008552:	ae0a      	add	r6, sp, #40	; 0x28
 8008554:	4633      	mov	r3, r6
 8008556:	4620      	mov	r0, r4
 8008558:	f002 f8de 	bl	800a718 <siscanf>
 800855c:	2800      	cmp	r0, #0
 800855e:	dddf      	ble.n	8008520 <_tzset_unlocked_r+0x34>
 8008560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008562:	18e7      	adds	r7, r4, r3
 8008564:	5ce3      	ldrb	r3, [r4, r3]
 8008566:	2b2d      	cmp	r3, #45	; 0x2d
 8008568:	d14c      	bne.n	8008604 <_tzset_unlocked_r+0x118>
 800856a:	3701      	adds	r7, #1
 800856c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008570:	f10d 0a20 	add.w	sl, sp, #32
 8008574:	f10d 0b1e 	add.w	fp, sp, #30
 8008578:	2400      	movs	r4, #0
 800857a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800857e:	4997      	ldr	r1, [pc, #604]	; (80087dc <_tzset_unlocked_r+0x2f0>)
 8008580:	9603      	str	r6, [sp, #12]
 8008582:	f8cd b000 	str.w	fp, [sp]
 8008586:	4633      	mov	r3, r6
 8008588:	aa07      	add	r2, sp, #28
 800858a:	4638      	mov	r0, r7
 800858c:	f8ad 401e 	strh.w	r4, [sp, #30]
 8008590:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008594:	f002 f8c0 	bl	800a718 <siscanf>
 8008598:	42a0      	cmp	r0, r4
 800859a:	ddc1      	ble.n	8008520 <_tzset_unlocked_r+0x34>
 800859c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80085a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80085a4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80087e8 <_tzset_unlocked_r+0x2fc>
 80085a8:	213c      	movs	r1, #60	; 0x3c
 80085aa:	fb01 3302 	mla	r3, r1, r2, r3
 80085ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80085b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80085b6:	fb01 3302 	mla	r3, r1, r2, r3
 80085ba:	fb08 f303 	mul.w	r3, r8, r3
 80085be:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80087d0 <_tzset_unlocked_r+0x2e4>
 80085c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80085c4:	4b83      	ldr	r3, [pc, #524]	; (80087d4 <_tzset_unlocked_r+0x2e8>)
 80085c6:	f8c8 3000 	str.w	r3, [r8]
 80085ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085cc:	4982      	ldr	r1, [pc, #520]	; (80087d8 <_tzset_unlocked_r+0x2ec>)
 80085ce:	441f      	add	r7, r3
 80085d0:	464a      	mov	r2, r9
 80085d2:	4633      	mov	r3, r6
 80085d4:	4638      	mov	r0, r7
 80085d6:	f002 f89f 	bl	800a718 <siscanf>
 80085da:	42a0      	cmp	r0, r4
 80085dc:	dc18      	bgt.n	8008610 <_tzset_unlocked_r+0x124>
 80085de:	f8d8 3000 	ldr.w	r3, [r8]
 80085e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80085e6:	4b77      	ldr	r3, [pc, #476]	; (80087c4 <_tzset_unlocked_r+0x2d8>)
 80085e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	4b77      	ldr	r3, [pc, #476]	; (80087cc <_tzset_unlocked_r+0x2e0>)
 80085ee:	601c      	str	r4, [r3, #0]
 80085f0:	e796      	b.n	8008520 <_tzset_unlocked_r+0x34>
 80085f2:	f7f7 fe45 	bl	8000280 <strcmp>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d198      	bne.n	800852c <_tzset_unlocked_r+0x40>
 80085fa:	e791      	b.n	8008520 <_tzset_unlocked_r+0x34>
 80085fc:	4621      	mov	r1, r4
 80085fe:	f002 f8b7 	bl	800a770 <strcpy>
 8008602:	e7a0      	b.n	8008546 <_tzset_unlocked_r+0x5a>
 8008604:	2b2b      	cmp	r3, #43	; 0x2b
 8008606:	bf08      	it	eq
 8008608:	3701      	addeq	r7, #1
 800860a:	f04f 0801 	mov.w	r8, #1
 800860e:	e7af      	b.n	8008570 <_tzset_unlocked_r+0x84>
 8008610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008612:	f8c8 9004 	str.w	r9, [r8, #4]
 8008616:	18fc      	adds	r4, r7, r3
 8008618:	5cfb      	ldrb	r3, [r7, r3]
 800861a:	2b2d      	cmp	r3, #45	; 0x2d
 800861c:	f040 808b 	bne.w	8008736 <_tzset_unlocked_r+0x24a>
 8008620:	3401      	adds	r4, #1
 8008622:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008626:	2300      	movs	r3, #0
 8008628:	f8ad 301c 	strh.w	r3, [sp, #28]
 800862c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008630:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008634:	930a      	str	r3, [sp, #40]	; 0x28
 8008636:	e9cd a602 	strd	sl, r6, [sp, #8]
 800863a:	e9cd b600 	strd	fp, r6, [sp]
 800863e:	4967      	ldr	r1, [pc, #412]	; (80087dc <_tzset_unlocked_r+0x2f0>)
 8008640:	4633      	mov	r3, r6
 8008642:	aa07      	add	r2, sp, #28
 8008644:	4620      	mov	r0, r4
 8008646:	f002 f867 	bl	800a718 <siscanf>
 800864a:	2800      	cmp	r0, #0
 800864c:	dc78      	bgt.n	8008740 <_tzset_unlocked_r+0x254>
 800864e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008650:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8008654:	652b      	str	r3, [r5, #80]	; 0x50
 8008656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008658:	462f      	mov	r7, r5
 800865a:	441c      	add	r4, r3
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	7823      	ldrb	r3, [r4, #0]
 8008662:	2b2c      	cmp	r3, #44	; 0x2c
 8008664:	bf08      	it	eq
 8008666:	3401      	addeq	r4, #1
 8008668:	f894 8000 	ldrb.w	r8, [r4]
 800866c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8008670:	d178      	bne.n	8008764 <_tzset_unlocked_r+0x278>
 8008672:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8008676:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800867a:	ab09      	add	r3, sp, #36	; 0x24
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4958      	ldr	r1, [pc, #352]	; (80087e0 <_tzset_unlocked_r+0x2f4>)
 8008680:	9603      	str	r6, [sp, #12]
 8008682:	4633      	mov	r3, r6
 8008684:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8008688:	4620      	mov	r0, r4
 800868a:	f002 f845 	bl	800a718 <siscanf>
 800868e:	2803      	cmp	r0, #3
 8008690:	f47f af46 	bne.w	8008520 <_tzset_unlocked_r+0x34>
 8008694:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8008698:	1e4b      	subs	r3, r1, #1
 800869a:	2b0b      	cmp	r3, #11
 800869c:	f63f af40 	bhi.w	8008520 <_tzset_unlocked_r+0x34>
 80086a0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80086a4:	1e53      	subs	r3, r2, #1
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	f63f af3a 	bhi.w	8008520 <_tzset_unlocked_r+0x34>
 80086ac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80086b0:	2b06      	cmp	r3, #6
 80086b2:	f63f af35 	bhi.w	8008520 <_tzset_unlocked_r+0x34>
 80086b6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80086ba:	f887 8008 	strb.w	r8, [r7, #8]
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	eb04 0803 	add.w	r8, r4, r3
 80086c6:	2302      	movs	r3, #2
 80086c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80086cc:	2300      	movs	r3, #0
 80086ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80086d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80086d6:	930a      	str	r3, [sp, #40]	; 0x28
 80086d8:	f898 3000 	ldrb.w	r3, [r8]
 80086dc:	2b2f      	cmp	r3, #47	; 0x2f
 80086de:	d109      	bne.n	80086f4 <_tzset_unlocked_r+0x208>
 80086e0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80086e4:	e9cd b600 	strd	fp, r6, [sp]
 80086e8:	493e      	ldr	r1, [pc, #248]	; (80087e4 <_tzset_unlocked_r+0x2f8>)
 80086ea:	4633      	mov	r3, r6
 80086ec:	aa07      	add	r2, sp, #28
 80086ee:	4640      	mov	r0, r8
 80086f0:	f002 f812 	bl	800a718 <siscanf>
 80086f4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80086f8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80086fc:	213c      	movs	r1, #60	; 0x3c
 80086fe:	fb01 3302 	mla	r3, r1, r2, r3
 8008702:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008706:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800870a:	fb01 3302 	mla	r3, r1, r2, r3
 800870e:	61bb      	str	r3, [r7, #24]
 8008710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008712:	3728      	adds	r7, #40	; 0x28
 8008714:	4444      	add	r4, r8
 8008716:	f1b9 0f00 	cmp.w	r9, #0
 800871a:	d020      	beq.n	800875e <_tzset_unlocked_r+0x272>
 800871c:	6868      	ldr	r0, [r5, #4]
 800871e:	f7ff fe29 	bl	8008374 <__tzcalc_limits>
 8008722:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <_tzset_unlocked_r+0x2d8>)
 8008724:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	4a27      	ldr	r2, [pc, #156]	; (80087cc <_tzset_unlocked_r+0x2e0>)
 800872e:	bf18      	it	ne
 8008730:	2301      	movne	r3, #1
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e6f4      	b.n	8008520 <_tzset_unlocked_r+0x34>
 8008736:	2b2b      	cmp	r3, #43	; 0x2b
 8008738:	bf08      	it	eq
 800873a:	3401      	addeq	r4, #1
 800873c:	2701      	movs	r7, #1
 800873e:	e772      	b.n	8008626 <_tzset_unlocked_r+0x13a>
 8008740:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008744:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008748:	213c      	movs	r1, #60	; 0x3c
 800874a:	fb01 3302 	mla	r3, r1, r2, r3
 800874e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008752:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008756:	fb01 3302 	mla	r3, r1, r2, r3
 800875a:	437b      	muls	r3, r7
 800875c:	e77a      	b.n	8008654 <_tzset_unlocked_r+0x168>
 800875e:	f04f 0901 	mov.w	r9, #1
 8008762:	e77d      	b.n	8008660 <_tzset_unlocked_r+0x174>
 8008764:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8008768:	bf06      	itte	eq
 800876a:	3401      	addeq	r4, #1
 800876c:	4643      	moveq	r3, r8
 800876e:	2344      	movne	r3, #68	; 0x44
 8008770:	220a      	movs	r2, #10
 8008772:	a90b      	add	r1, sp, #44	; 0x2c
 8008774:	4620      	mov	r0, r4
 8008776:	9305      	str	r3, [sp, #20]
 8008778:	f002 f88a 	bl	800a890 <strtoul>
 800877c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8008786:	45a0      	cmp	r8, r4
 8008788:	d114      	bne.n	80087b4 <_tzset_unlocked_r+0x2c8>
 800878a:	234d      	movs	r3, #77	; 0x4d
 800878c:	f1b9 0f00 	cmp.w	r9, #0
 8008790:	d107      	bne.n	80087a2 <_tzset_unlocked_r+0x2b6>
 8008792:	722b      	strb	r3, [r5, #8]
 8008794:	2103      	movs	r1, #3
 8008796:	2302      	movs	r3, #2
 8008798:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800879c:	f8c5 9014 	str.w	r9, [r5, #20]
 80087a0:	e791      	b.n	80086c6 <_tzset_unlocked_r+0x1da>
 80087a2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80087a6:	220b      	movs	r2, #11
 80087a8:	2301      	movs	r3, #1
 80087aa:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80087ae:	2300      	movs	r3, #0
 80087b0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80087b2:	e788      	b.n	80086c6 <_tzset_unlocked_r+0x1da>
 80087b4:	b280      	uxth	r0, r0
 80087b6:	723b      	strb	r3, [r7, #8]
 80087b8:	6178      	str	r0, [r7, #20]
 80087ba:	e784      	b.n	80086c6 <_tzset_unlocked_r+0x1da>
 80087bc:	0800b5a6 	.word	0x0800b5a6
 80087c0:	20004ebc 	.word	0x20004ebc
 80087c4:	20004ec4 	.word	0x20004ec4
 80087c8:	0800b5a9 	.word	0x0800b5a9
 80087cc:	20004ec0 	.word	0x20004ec0
 80087d0:	20000078 	.word	0x20000078
 80087d4:	20004eaf 	.word	0x20004eaf
 80087d8:	0800b5ad 	.word	0x0800b5ad
 80087dc:	0800b5d0 	.word	0x0800b5d0
 80087e0:	0800b5bc 	.word	0x0800b5bc
 80087e4:	0800b5cf 	.word	0x0800b5cf
 80087e8:	20004ea4 	.word	0x20004ea4

080087ec <__swbuf_r>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	460e      	mov	r6, r1
 80087f0:	4614      	mov	r4, r2
 80087f2:	4605      	mov	r5, r0
 80087f4:	b118      	cbz	r0, 80087fe <__swbuf_r+0x12>
 80087f6:	6983      	ldr	r3, [r0, #24]
 80087f8:	b90b      	cbnz	r3, 80087fe <__swbuf_r+0x12>
 80087fa:	f7fe fba7 	bl	8006f4c <__sinit>
 80087fe:	4b21      	ldr	r3, [pc, #132]	; (8008884 <__swbuf_r+0x98>)
 8008800:	429c      	cmp	r4, r3
 8008802:	d12b      	bne.n	800885c <__swbuf_r+0x70>
 8008804:	686c      	ldr	r4, [r5, #4]
 8008806:	69a3      	ldr	r3, [r4, #24]
 8008808:	60a3      	str	r3, [r4, #8]
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	071a      	lsls	r2, r3, #28
 800880e:	d52f      	bpl.n	8008870 <__swbuf_r+0x84>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b36b      	cbz	r3, 8008870 <__swbuf_r+0x84>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	6820      	ldr	r0, [r4, #0]
 8008818:	1ac0      	subs	r0, r0, r3
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	b2f6      	uxtb	r6, r6
 800881e:	4283      	cmp	r3, r0
 8008820:	4637      	mov	r7, r6
 8008822:	dc04      	bgt.n	800882e <__swbuf_r+0x42>
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f000 fff6 	bl	8009818 <_fflush_r>
 800882c:	bb30      	cbnz	r0, 800887c <__swbuf_r+0x90>
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	3b01      	subs	r3, #1
 8008832:	60a3      	str	r3, [r4, #8]
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	701e      	strb	r6, [r3, #0]
 800883c:	6963      	ldr	r3, [r4, #20]
 800883e:	3001      	adds	r0, #1
 8008840:	4283      	cmp	r3, r0
 8008842:	d004      	beq.n	800884e <__swbuf_r+0x62>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d506      	bpl.n	8008858 <__swbuf_r+0x6c>
 800884a:	2e0a      	cmp	r6, #10
 800884c:	d104      	bne.n	8008858 <__swbuf_r+0x6c>
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f000 ffe1 	bl	8009818 <_fflush_r>
 8008856:	b988      	cbnz	r0, 800887c <__swbuf_r+0x90>
 8008858:	4638      	mov	r0, r7
 800885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <__swbuf_r+0x9c>)
 800885e:	429c      	cmp	r4, r3
 8008860:	d101      	bne.n	8008866 <__swbuf_r+0x7a>
 8008862:	68ac      	ldr	r4, [r5, #8]
 8008864:	e7cf      	b.n	8008806 <__swbuf_r+0x1a>
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <__swbuf_r+0xa0>)
 8008868:	429c      	cmp	r4, r3
 800886a:	bf08      	it	eq
 800886c:	68ec      	ldreq	r4, [r5, #12]
 800886e:	e7ca      	b.n	8008806 <__swbuf_r+0x1a>
 8008870:	4621      	mov	r1, r4
 8008872:	4628      	mov	r0, r5
 8008874:	f000 f81e 	bl	80088b4 <__swsetup_r>
 8008878:	2800      	cmp	r0, #0
 800887a:	d0cb      	beq.n	8008814 <__swbuf_r+0x28>
 800887c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008880:	e7ea      	b.n	8008858 <__swbuf_r+0x6c>
 8008882:	bf00      	nop
 8008884:	0800b470 	.word	0x0800b470
 8008888:	0800b490 	.word	0x0800b490
 800888c:	0800b450 	.word	0x0800b450

08008890 <_write_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d07      	ldr	r5, [pc, #28]	; (80088b0 <_write_r+0x20>)
 8008894:	4604      	mov	r4, r0
 8008896:	4608      	mov	r0, r1
 8008898:	4611      	mov	r1, r2
 800889a:	2200      	movs	r2, #0
 800889c:	602a      	str	r2, [r5, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	f7f8 fb36 	bl	8000f10 <_write>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_write_r+0x1e>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_write_r+0x1e>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	20004ea0 	.word	0x20004ea0

080088b4 <__swsetup_r>:
 80088b4:	4b32      	ldr	r3, [pc, #200]	; (8008980 <__swsetup_r+0xcc>)
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	681d      	ldr	r5, [r3, #0]
 80088ba:	4606      	mov	r6, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	b125      	cbz	r5, 80088ca <__swsetup_r+0x16>
 80088c0:	69ab      	ldr	r3, [r5, #24]
 80088c2:	b913      	cbnz	r3, 80088ca <__swsetup_r+0x16>
 80088c4:	4628      	mov	r0, r5
 80088c6:	f7fe fb41 	bl	8006f4c <__sinit>
 80088ca:	4b2e      	ldr	r3, [pc, #184]	; (8008984 <__swsetup_r+0xd0>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	d10f      	bne.n	80088f0 <__swsetup_r+0x3c>
 80088d0:	686c      	ldr	r4, [r5, #4]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d8:	0719      	lsls	r1, r3, #28
 80088da:	d42c      	bmi.n	8008936 <__swsetup_r+0x82>
 80088dc:	06dd      	lsls	r5, r3, #27
 80088de:	d411      	bmi.n	8008904 <__swsetup_r+0x50>
 80088e0:	2309      	movs	r3, #9
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ee:	e03e      	b.n	800896e <__swsetup_r+0xba>
 80088f0:	4b25      	ldr	r3, [pc, #148]	; (8008988 <__swsetup_r+0xd4>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d101      	bne.n	80088fa <__swsetup_r+0x46>
 80088f6:	68ac      	ldr	r4, [r5, #8]
 80088f8:	e7eb      	b.n	80088d2 <__swsetup_r+0x1e>
 80088fa:	4b24      	ldr	r3, [pc, #144]	; (800898c <__swsetup_r+0xd8>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	bf08      	it	eq
 8008900:	68ec      	ldreq	r4, [r5, #12]
 8008902:	e7e6      	b.n	80088d2 <__swsetup_r+0x1e>
 8008904:	0758      	lsls	r0, r3, #29
 8008906:	d512      	bpl.n	800892e <__swsetup_r+0x7a>
 8008908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890a:	b141      	cbz	r1, 800891e <__swsetup_r+0x6a>
 800890c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <__swsetup_r+0x66>
 8008914:	4630      	mov	r0, r6
 8008916:	f7fe fe79 	bl	800760c <_free_r>
 800891a:	2300      	movs	r3, #0
 800891c:	6363      	str	r3, [r4, #52]	; 0x34
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	2300      	movs	r3, #0
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	b94b      	cbnz	r3, 800894e <__swsetup_r+0x9a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008944:	d003      	beq.n	800894e <__swsetup_r+0x9a>
 8008946:	4621      	mov	r1, r4
 8008948:	4630      	mov	r0, r6
 800894a:	f001 f837 	bl	80099bc <__smakebuf_r>
 800894e:	89a0      	ldrh	r0, [r4, #12]
 8008950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008954:	f010 0301 	ands.w	r3, r0, #1
 8008958:	d00a      	beq.n	8008970 <__swsetup_r+0xbc>
 800895a:	2300      	movs	r3, #0
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	6963      	ldr	r3, [r4, #20]
 8008960:	425b      	negs	r3, r3
 8008962:	61a3      	str	r3, [r4, #24]
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b943      	cbnz	r3, 800897a <__swsetup_r+0xc6>
 8008968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800896c:	d1ba      	bne.n	80088e4 <__swsetup_r+0x30>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	0781      	lsls	r1, r0, #30
 8008972:	bf58      	it	pl
 8008974:	6963      	ldrpl	r3, [r4, #20]
 8008976:	60a3      	str	r3, [r4, #8]
 8008978:	e7f4      	b.n	8008964 <__swsetup_r+0xb0>
 800897a:	2000      	movs	r0, #0
 800897c:	e7f7      	b.n	800896e <__swsetup_r+0xba>
 800897e:	bf00      	nop
 8008980:	20000014 	.word	0x20000014
 8008984:	0800b470 	.word	0x0800b470
 8008988:	0800b490 	.word	0x0800b490
 800898c:	0800b450 	.word	0x0800b450

08008990 <__assert_func>:
 8008990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008992:	4614      	mov	r4, r2
 8008994:	461a      	mov	r2, r3
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <__assert_func+0x2c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4605      	mov	r5, r0
 800899c:	68d8      	ldr	r0, [r3, #12]
 800899e:	b14c      	cbz	r4, 80089b4 <__assert_func+0x24>
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <__assert_func+0x30>)
 80089a2:	9100      	str	r1, [sp, #0]
 80089a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089a8:	4906      	ldr	r1, [pc, #24]	; (80089c4 <__assert_func+0x34>)
 80089aa:	462b      	mov	r3, r5
 80089ac:	f000 ff70 	bl	8009890 <fiprintf>
 80089b0:	f001 ff78 	bl	800a8a4 <abort>
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <__assert_func+0x38>)
 80089b6:	461c      	mov	r4, r3
 80089b8:	e7f3      	b.n	80089a2 <__assert_func+0x12>
 80089ba:	bf00      	nop
 80089bc:	20000014 	.word	0x20000014
 80089c0:	0800b5e2 	.word	0x0800b5e2
 80089c4:	0800b5ef 	.word	0x0800b5ef
 80089c8:	0800b61d 	.word	0x0800b61d

080089cc <_close_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d06      	ldr	r5, [pc, #24]	; (80089e8 <_close_r+0x1c>)
 80089d0:	2300      	movs	r3, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	f7f8 ffd3 	bl	8001982 <_close>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_close_r+0x1a>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_close_r+0x1a>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	20004ea0 	.word	0x20004ea0

080089ec <div>:
 80089ec:	2900      	cmp	r1, #0
 80089ee:	b510      	push	{r4, lr}
 80089f0:	fb91 f4f2 	sdiv	r4, r1, r2
 80089f4:	fb02 1314 	mls	r3, r2, r4, r1
 80089f8:	db06      	blt.n	8008a08 <div+0x1c>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da01      	bge.n	8008a02 <div+0x16>
 80089fe:	3401      	adds	r4, #1
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	e9c0 4300 	strd	r4, r3, [r0]
 8008a06:	bd10      	pop	{r4, pc}
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	bfc4      	itt	gt
 8008a0c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8008a10:	189b      	addgt	r3, r3, r2
 8008a12:	e7f6      	b.n	8008a02 <div+0x16>

08008a14 <quorem>:
 8008a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	6903      	ldr	r3, [r0, #16]
 8008a1a:	690c      	ldr	r4, [r1, #16]
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	4607      	mov	r7, r0
 8008a20:	f2c0 8081 	blt.w	8008b26 <quorem+0x112>
 8008a24:	3c01      	subs	r4, #1
 8008a26:	f101 0814 	add.w	r8, r1, #20
 8008a2a:	f100 0514 	add.w	r5, r0, #20
 8008a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a4c:	d331      	bcc.n	8008ab2 <quorem+0x9e>
 8008a4e:	f04f 0e00 	mov.w	lr, #0
 8008a52:	4640      	mov	r0, r8
 8008a54:	46ac      	mov	ip, r5
 8008a56:	46f2      	mov	sl, lr
 8008a58:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a5c:	b293      	uxth	r3, r2
 8008a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ebaa 0303 	sub.w	r3, sl, r3
 8008a6c:	f8dc a000 	ldr.w	sl, [ip]
 8008a70:	0c12      	lsrs	r2, r2, #16
 8008a72:	fa13 f38a 	uxtah	r3, r3, sl
 8008a76:	fb06 e202 	mla	r2, r6, r2, lr
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	9b00      	ldr	r3, [sp, #0]
 8008a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a82:	b292      	uxth	r2, r2
 8008a84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a90:	4581      	cmp	r9, r0
 8008a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a96:	f84c 3b04 	str.w	r3, [ip], #4
 8008a9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a9e:	d2db      	bcs.n	8008a58 <quorem+0x44>
 8008aa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008aa4:	b92b      	cbnz	r3, 8008ab2 <quorem+0x9e>
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	d32e      	bcc.n	8008b0e <quorem+0xfa>
 8008ab0:	613c      	str	r4, [r7, #16]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	f001 fa50 	bl	8009f58 <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	db24      	blt.n	8008b06 <quorem+0xf2>
 8008abc:	3601      	adds	r6, #1
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f04f 0c00 	mov.w	ip, #0
 8008ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ac8:	f8d0 e000 	ldr.w	lr, [r0]
 8008acc:	b293      	uxth	r3, r2
 8008ace:	ebac 0303 	sub.w	r3, ip, r3
 8008ad2:	0c12      	lsrs	r2, r2, #16
 8008ad4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae6:	45c1      	cmp	r9, r8
 8008ae8:	f840 3b04 	str.w	r3, [r0], #4
 8008aec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008af0:	d2e8      	bcs.n	8008ac4 <quorem+0xb0>
 8008af2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008afa:	b922      	cbnz	r2, 8008b06 <quorem+0xf2>
 8008afc:	3b04      	subs	r3, #4
 8008afe:	429d      	cmp	r5, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	d30a      	bcc.n	8008b1a <quorem+0x106>
 8008b04:	613c      	str	r4, [r7, #16]
 8008b06:	4630      	mov	r0, r6
 8008b08:	b003      	add	sp, #12
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	6812      	ldr	r2, [r2, #0]
 8008b10:	3b04      	subs	r3, #4
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	d1cc      	bne.n	8008ab0 <quorem+0x9c>
 8008b16:	3c01      	subs	r4, #1
 8008b18:	e7c7      	b.n	8008aaa <quorem+0x96>
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d1f0      	bne.n	8008b04 <quorem+0xf0>
 8008b22:	3c01      	subs	r4, #1
 8008b24:	e7eb      	b.n	8008afe <quorem+0xea>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e7ee      	b.n	8008b08 <quorem+0xf4>
 8008b2a:	0000      	movs	r0, r0
 8008b2c:	0000      	movs	r0, r0
	...

08008b30 <_dtoa_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	ed2d 8b04 	vpush	{d8-d9}
 8008b38:	ec57 6b10 	vmov	r6, r7, d0
 8008b3c:	b093      	sub	sp, #76	; 0x4c
 8008b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b44:	9106      	str	r1, [sp, #24]
 8008b46:	ee10 aa10 	vmov	sl, s0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b50:	46bb      	mov	fp, r7
 8008b52:	b975      	cbnz	r5, 8008b72 <_dtoa_r+0x42>
 8008b54:	2010      	movs	r0, #16
 8008b56:	f7fe fac1 	bl	80070dc <malloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b5e:	b920      	cbnz	r0, 8008b6a <_dtoa_r+0x3a>
 8008b60:	4ba7      	ldr	r3, [pc, #668]	; (8008e00 <_dtoa_r+0x2d0>)
 8008b62:	21ea      	movs	r1, #234	; 0xea
 8008b64:	48a7      	ldr	r0, [pc, #668]	; (8008e04 <_dtoa_r+0x2d4>)
 8008b66:	f7ff ff13 	bl	8008990 <__assert_func>
 8008b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b6e:	6005      	str	r5, [r0, #0]
 8008b70:	60c5      	str	r5, [r0, #12]
 8008b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b74:	6819      	ldr	r1, [r3, #0]
 8008b76:	b151      	cbz	r1, 8008b8e <_dtoa_r+0x5e>
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	604a      	str	r2, [r1, #4]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4093      	lsls	r3, r2
 8008b80:	608b      	str	r3, [r1, #8]
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 ffa6 	bl	8009ad4 <_Bfree>
 8008b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	1e3b      	subs	r3, r7, #0
 8008b90:	bfaa      	itet	ge
 8008b92:	2300      	movge	r3, #0
 8008b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b98:	f8c8 3000 	strge.w	r3, [r8]
 8008b9c:	4b9a      	ldr	r3, [pc, #616]	; (8008e08 <_dtoa_r+0x2d8>)
 8008b9e:	bfbc      	itt	lt
 8008ba0:	2201      	movlt	r2, #1
 8008ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ba6:	ea33 030b 	bics.w	r3, r3, fp
 8008baa:	d11b      	bne.n	8008be4 <_dtoa_r+0xb4>
 8008bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bb8:	4333      	orrs	r3, r6
 8008bba:	f000 8592 	beq.w	80096e2 <_dtoa_r+0xbb2>
 8008bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc0:	b963      	cbnz	r3, 8008bdc <_dtoa_r+0xac>
 8008bc2:	4b92      	ldr	r3, [pc, #584]	; (8008e0c <_dtoa_r+0x2dc>)
 8008bc4:	e022      	b.n	8008c0c <_dtoa_r+0xdc>
 8008bc6:	4b92      	ldr	r3, [pc, #584]	; (8008e10 <_dtoa_r+0x2e0>)
 8008bc8:	9301      	str	r3, [sp, #4]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	9801      	ldr	r0, [sp, #4]
 8008bd2:	b013      	add	sp, #76	; 0x4c
 8008bd4:	ecbd 8b04 	vpop	{d8-d9}
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	4b8b      	ldr	r3, [pc, #556]	; (8008e0c <_dtoa_r+0x2dc>)
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	3303      	adds	r3, #3
 8008be2:	e7f3      	b.n	8008bcc <_dtoa_r+0x9c>
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	4650      	mov	r0, sl
 8008bea:	4659      	mov	r1, fp
 8008bec:	f7f7 ff76 	bl	8000adc <__aeabi_dcmpeq>
 8008bf0:	ec4b ab19 	vmov	d9, sl, fp
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	b158      	cbz	r0, 8008c10 <_dtoa_r+0xe0>
 8008bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 856b 	beq.w	80096dc <_dtoa_r+0xbac>
 8008c06:	4883      	ldr	r0, [pc, #524]	; (8008e14 <_dtoa_r+0x2e4>)
 8008c08:	6018      	str	r0, [r3, #0]
 8008c0a:	1e43      	subs	r3, r0, #1
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	e7df      	b.n	8008bd0 <_dtoa_r+0xa0>
 8008c10:	ec4b ab10 	vmov	d0, sl, fp
 8008c14:	aa10      	add	r2, sp, #64	; 0x40
 8008c16:	a911      	add	r1, sp, #68	; 0x44
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f001 fa43 	bl	800a0a4 <__d2b>
 8008c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c22:	ee08 0a10 	vmov	s16, r0
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	f000 8084 	beq.w	8008d34 <_dtoa_r+0x204>
 8008c2c:	ee19 3a90 	vmov	r3, s19
 8008c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c38:	4656      	mov	r6, sl
 8008c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c46:	4b74      	ldr	r3, [pc, #464]	; (8008e18 <_dtoa_r+0x2e8>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	f7f7 fb25 	bl	800029c <__aeabi_dsub>
 8008c52:	a365      	add	r3, pc, #404	; (adr r3, 8008de8 <_dtoa_r+0x2b8>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fcd8 	bl	800060c <__aeabi_dmul>
 8008c5c:	a364      	add	r3, pc, #400	; (adr r3, 8008df0 <_dtoa_r+0x2c0>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fb1d 	bl	80002a0 <__adddf3>
 8008c66:	4606      	mov	r6, r0
 8008c68:	4628      	mov	r0, r5
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	f7f7 fc64 	bl	8000538 <__aeabi_i2d>
 8008c70:	a361      	add	r3, pc, #388	; (adr r3, 8008df8 <_dtoa_r+0x2c8>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fcc9 	bl	800060c <__aeabi_dmul>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4630      	mov	r0, r6
 8008c80:	4639      	mov	r1, r7
 8008c82:	f7f7 fb0d 	bl	80002a0 <__adddf3>
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	f7f7 ff6f 	bl	8000b6c <__aeabi_d2iz>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	9000      	str	r0, [sp, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 ff2a 	bl	8000af0 <__aeabi_dcmplt>
 8008c9c:	b150      	cbz	r0, 8008cb4 <_dtoa_r+0x184>
 8008c9e:	9800      	ldr	r0, [sp, #0]
 8008ca0:	f7f7 fc4a 	bl	8000538 <__aeabi_i2d>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	f7f7 ff18 	bl	8000adc <__aeabi_dcmpeq>
 8008cac:	b910      	cbnz	r0, 8008cb4 <_dtoa_r+0x184>
 8008cae:	9b00      	ldr	r3, [sp, #0]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	d85a      	bhi.n	8008d70 <_dtoa_r+0x240>
 8008cba:	9a00      	ldr	r2, [sp, #0]
 8008cbc:	4b57      	ldr	r3, [pc, #348]	; (8008e1c <_dtoa_r+0x2ec>)
 8008cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	ec51 0b19 	vmov	r0, r1, d9
 8008cca:	f7f7 ff11 	bl	8000af0 <__aeabi_dcmplt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d050      	beq.n	8008d74 <_dtoa_r+0x244>
 8008cd2:	9b00      	ldr	r3, [sp, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cde:	1b5d      	subs	r5, r3, r5
 8008ce0:	1e6b      	subs	r3, r5, #1
 8008ce2:	9305      	str	r3, [sp, #20]
 8008ce4:	bf45      	ittet	mi
 8008ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cea:	9304      	strmi	r3, [sp, #16]
 8008cec:	2300      	movpl	r3, #0
 8008cee:	2300      	movmi	r3, #0
 8008cf0:	bf4c      	ite	mi
 8008cf2:	9305      	strmi	r3, [sp, #20]
 8008cf4:	9304      	strpl	r3, [sp, #16]
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db3d      	blt.n	8008d78 <_dtoa_r+0x248>
 8008cfc:	9b05      	ldr	r3, [sp, #20]
 8008cfe:	9a00      	ldr	r2, [sp, #0]
 8008d00:	920a      	str	r2, [sp, #40]	; 0x28
 8008d02:	4413      	add	r3, r2
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	2300      	movs	r3, #0
 8008d08:	9307      	str	r3, [sp, #28]
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	f200 8089 	bhi.w	8008e24 <_dtoa_r+0x2f4>
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	bfc4      	itt	gt
 8008d16:	3b04      	subgt	r3, #4
 8008d18:	9306      	strgt	r3, [sp, #24]
 8008d1a:	9b06      	ldr	r3, [sp, #24]
 8008d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8008d20:	bfcc      	ite	gt
 8008d22:	2500      	movgt	r5, #0
 8008d24:	2501      	movle	r5, #1
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	f200 8087 	bhi.w	8008e3a <_dtoa_r+0x30a>
 8008d2c:	e8df f003 	tbb	[pc, r3]
 8008d30:	59383a2d 	.word	0x59383a2d
 8008d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d38:	441d      	add	r5, r3
 8008d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	bfc1      	itttt	gt
 8008d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d52:	bfda      	itte	le
 8008d54:	f1c3 0320 	rsble	r3, r3, #32
 8008d58:	fa06 f003 	lslle.w	r0, r6, r3
 8008d5c:	4318      	orrgt	r0, r3
 8008d5e:	f7f7 fbdb 	bl	8000518 <__aeabi_ui2d>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4606      	mov	r6, r0
 8008d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d6a:	3d01      	subs	r5, #1
 8008d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8008d6e:	e76a      	b.n	8008c46 <_dtoa_r+0x116>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e7b2      	b.n	8008cda <_dtoa_r+0x1aa>
 8008d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d76:	e7b1      	b.n	8008cdc <_dtoa_r+0x1ac>
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	9a00      	ldr	r2, [sp, #0]
 8008d7c:	1a9b      	subs	r3, r3, r2
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	4253      	negs	r3, r2
 8008d82:	9307      	str	r3, [sp, #28]
 8008d84:	2300      	movs	r3, #0
 8008d86:	930a      	str	r3, [sp, #40]	; 0x28
 8008d88:	e7bf      	b.n	8008d0a <_dtoa_r+0x1da>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9308      	str	r3, [sp, #32]
 8008d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dc55      	bgt.n	8008e40 <_dtoa_r+0x310>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d9e:	e00c      	b.n	8008dba <_dtoa_r+0x28a>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e7f3      	b.n	8008d8c <_dtoa_r+0x25c>
 8008da4:	2300      	movs	r3, #0
 8008da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da8:	9308      	str	r3, [sp, #32]
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	4413      	add	r3, r2
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	3301      	adds	r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	bfb8      	it	lt
 8008db8:	2301      	movlt	r3, #1
 8008dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	6042      	str	r2, [r0, #4]
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	f102 0614 	add.w	r6, r2, #20
 8008dc6:	429e      	cmp	r6, r3
 8008dc8:	6841      	ldr	r1, [r0, #4]
 8008dca:	d93d      	bls.n	8008e48 <_dtoa_r+0x318>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fe41 	bl	8009a54 <_Balloc>
 8008dd2:	9001      	str	r0, [sp, #4]
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d13b      	bne.n	8008e50 <_dtoa_r+0x320>
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <_dtoa_r+0x2f0>)
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008de0:	e6c0      	b.n	8008b64 <_dtoa_r+0x34>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e7df      	b.n	8008da6 <_dtoa_r+0x276>
 8008de6:	bf00      	nop
 8008de8:	636f4361 	.word	0x636f4361
 8008dec:	3fd287a7 	.word	0x3fd287a7
 8008df0:	8b60c8b3 	.word	0x8b60c8b3
 8008df4:	3fc68a28 	.word	0x3fc68a28
 8008df8:	509f79fb 	.word	0x509f79fb
 8008dfc:	3fd34413 	.word	0x3fd34413
 8008e00:	0800b62b 	.word	0x0800b62b
 8008e04:	0800b642 	.word	0x0800b642
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	0800b627 	.word	0x0800b627
 8008e10:	0800b61e 	.word	0x0800b61e
 8008e14:	0800b92d 	.word	0x0800b92d
 8008e18:	3ff80000 	.word	0x3ff80000
 8008e1c:	0800b738 	.word	0x0800b738
 8008e20:	0800b69d 	.word	0x0800b69d
 8008e24:	2501      	movs	r5, #1
 8008e26:	2300      	movs	r3, #0
 8008e28:	9306      	str	r3, [sp, #24]
 8008e2a:	9508      	str	r5, [sp, #32]
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	2312      	movs	r3, #18
 8008e38:	e7b0      	b.n	8008d9c <_dtoa_r+0x26c>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	9308      	str	r3, [sp, #32]
 8008e3e:	e7f5      	b.n	8008e2c <_dtoa_r+0x2fc>
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e46:	e7b8      	b.n	8008dba <_dtoa_r+0x28a>
 8008e48:	3101      	adds	r1, #1
 8008e4a:	6041      	str	r1, [r0, #4]
 8008e4c:	0052      	lsls	r2, r2, #1
 8008e4e:	e7b8      	b.n	8008dc2 <_dtoa_r+0x292>
 8008e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	2b0e      	cmp	r3, #14
 8008e5a:	f200 809d 	bhi.w	8008f98 <_dtoa_r+0x468>
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	f000 809a 	beq.w	8008f98 <_dtoa_r+0x468>
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dd32      	ble.n	8008ed0 <_dtoa_r+0x3a0>
 8008e6a:	4ab7      	ldr	r2, [pc, #732]	; (8009148 <_dtoa_r+0x618>)
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e78:	9b00      	ldr	r3, [sp, #0]
 8008e7a:	05d8      	lsls	r0, r3, #23
 8008e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e80:	d516      	bpl.n	8008eb0 <_dtoa_r+0x380>
 8008e82:	4bb2      	ldr	r3, [pc, #712]	; (800914c <_dtoa_r+0x61c>)
 8008e84:	ec51 0b19 	vmov	r0, r1, d9
 8008e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e8c:	f7f7 fce8 	bl	8000860 <__aeabi_ddiv>
 8008e90:	f007 070f 	and.w	r7, r7, #15
 8008e94:	4682      	mov	sl, r0
 8008e96:	468b      	mov	fp, r1
 8008e98:	2503      	movs	r5, #3
 8008e9a:	4eac      	ldr	r6, [pc, #688]	; (800914c <_dtoa_r+0x61c>)
 8008e9c:	b957      	cbnz	r7, 8008eb4 <_dtoa_r+0x384>
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	4659      	mov	r1, fp
 8008ea6:	f7f7 fcdb 	bl	8000860 <__aeabi_ddiv>
 8008eaa:	4682      	mov	sl, r0
 8008eac:	468b      	mov	fp, r1
 8008eae:	e028      	b.n	8008f02 <_dtoa_r+0x3d2>
 8008eb0:	2502      	movs	r5, #2
 8008eb2:	e7f2      	b.n	8008e9a <_dtoa_r+0x36a>
 8008eb4:	07f9      	lsls	r1, r7, #31
 8008eb6:	d508      	bpl.n	8008eca <_dtoa_r+0x39a>
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ec0:	f7f7 fba4 	bl	800060c <__aeabi_dmul>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	107f      	asrs	r7, r7, #1
 8008ecc:	3608      	adds	r6, #8
 8008ece:	e7e5      	b.n	8008e9c <_dtoa_r+0x36c>
 8008ed0:	f000 809b 	beq.w	800900a <_dtoa_r+0x4da>
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	4f9d      	ldr	r7, [pc, #628]	; (800914c <_dtoa_r+0x61c>)
 8008ed8:	425e      	negs	r6, r3
 8008eda:	4b9b      	ldr	r3, [pc, #620]	; (8009148 <_dtoa_r+0x618>)
 8008edc:	f006 020f 	and.w	r2, r6, #15
 8008ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	ec51 0b19 	vmov	r0, r1, d9
 8008eec:	f7f7 fb8e 	bl	800060c <__aeabi_dmul>
 8008ef0:	1136      	asrs	r6, r6, #4
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2502      	movs	r5, #2
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d17a      	bne.n	8008ff4 <_dtoa_r+0x4c4>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1d3      	bne.n	8008eaa <_dtoa_r+0x37a>
 8008f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8082 	beq.w	800900e <_dtoa_r+0x4de>
 8008f0a:	4b91      	ldr	r3, [pc, #580]	; (8009150 <_dtoa_r+0x620>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4650      	mov	r0, sl
 8008f10:	4659      	mov	r1, fp
 8008f12:	f7f7 fded 	bl	8000af0 <__aeabi_dcmplt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d079      	beq.n	800900e <_dtoa_r+0x4de>
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d076      	beq.n	800900e <_dtoa_r+0x4de>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd36      	ble.n	8008f94 <_dtoa_r+0x464>
 8008f26:	9b00      	ldr	r3, [sp, #0]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	1e5f      	subs	r7, r3, #1
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4b88      	ldr	r3, [pc, #544]	; (8009154 <_dtoa_r+0x624>)
 8008f32:	f7f7 fb6b 	bl	800060c <__aeabi_dmul>
 8008f36:	9e02      	ldr	r6, [sp, #8]
 8008f38:	4682      	mov	sl, r0
 8008f3a:	468b      	mov	fp, r1
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f7f7 fafa 	bl	8000538 <__aeabi_i2d>
 8008f44:	4652      	mov	r2, sl
 8008f46:	465b      	mov	r3, fp
 8008f48:	f7f7 fb60 	bl	800060c <__aeabi_dmul>
 8008f4c:	4b82      	ldr	r3, [pc, #520]	; (8009158 <_dtoa_r+0x628>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f7f7 f9a6 	bl	80002a0 <__adddf3>
 8008f54:	46d0      	mov	r8, sl
 8008f56:	46d9      	mov	r9, fp
 8008f58:	4682      	mov	sl, r0
 8008f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f5e:	2e00      	cmp	r6, #0
 8008f60:	d158      	bne.n	8009014 <_dtoa_r+0x4e4>
 8008f62:	4b7e      	ldr	r3, [pc, #504]	; (800915c <_dtoa_r+0x62c>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 f997 	bl	800029c <__aeabi_dsub>
 8008f6e:	4652      	mov	r2, sl
 8008f70:	465b      	mov	r3, fp
 8008f72:	4680      	mov	r8, r0
 8008f74:	4689      	mov	r9, r1
 8008f76:	f7f7 fdd9 	bl	8000b2c <__aeabi_dcmpgt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 8295 	bne.w	80094aa <_dtoa_r+0x97a>
 8008f80:	4652      	mov	r2, sl
 8008f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f86:	4640      	mov	r0, r8
 8008f88:	4649      	mov	r1, r9
 8008f8a:	f7f7 fdb1 	bl	8000af0 <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f040 8289 	bne.w	80094a6 <_dtoa_r+0x976>
 8008f94:	ec5b ab19 	vmov	sl, fp, d9
 8008f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f2c0 8148 	blt.w	8009230 <_dtoa_r+0x700>
 8008fa0:	9a00      	ldr	r2, [sp, #0]
 8008fa2:	2a0e      	cmp	r2, #14
 8008fa4:	f300 8144 	bgt.w	8009230 <_dtoa_r+0x700>
 8008fa8:	4b67      	ldr	r3, [pc, #412]	; (8009148 <_dtoa_r+0x618>)
 8008faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f280 80d5 	bge.w	8009164 <_dtoa_r+0x634>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f300 80d1 	bgt.w	8009164 <_dtoa_r+0x634>
 8008fc2:	f040 826f 	bne.w	80094a4 <_dtoa_r+0x974>
 8008fc6:	4b65      	ldr	r3, [pc, #404]	; (800915c <_dtoa_r+0x62c>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 fb1d 	bl	800060c <__aeabi_dmul>
 8008fd2:	4652      	mov	r2, sl
 8008fd4:	465b      	mov	r3, fp
 8008fd6:	f7f7 fd9f 	bl	8000b18 <__aeabi_dcmpge>
 8008fda:	9e03      	ldr	r6, [sp, #12]
 8008fdc:	4637      	mov	r7, r6
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f040 8245 	bne.w	800946e <_dtoa_r+0x93e>
 8008fe4:	9d01      	ldr	r5, [sp, #4]
 8008fe6:	2331      	movs	r3, #49	; 0x31
 8008fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8008fec:	9b00      	ldr	r3, [sp, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	e240      	b.n	8009476 <_dtoa_r+0x946>
 8008ff4:	07f2      	lsls	r2, r6, #31
 8008ff6:	d505      	bpl.n	8009004 <_dtoa_r+0x4d4>
 8008ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffc:	f7f7 fb06 	bl	800060c <__aeabi_dmul>
 8009000:	3501      	adds	r5, #1
 8009002:	2301      	movs	r3, #1
 8009004:	1076      	asrs	r6, r6, #1
 8009006:	3708      	adds	r7, #8
 8009008:	e777      	b.n	8008efa <_dtoa_r+0x3ca>
 800900a:	2502      	movs	r5, #2
 800900c:	e779      	b.n	8008f02 <_dtoa_r+0x3d2>
 800900e:	9f00      	ldr	r7, [sp, #0]
 8009010:	9e03      	ldr	r6, [sp, #12]
 8009012:	e794      	b.n	8008f3e <_dtoa_r+0x40e>
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	4b4c      	ldr	r3, [pc, #304]	; (8009148 <_dtoa_r+0x618>)
 8009018:	4431      	add	r1, r6
 800901a:	910d      	str	r1, [sp, #52]	; 0x34
 800901c:	9908      	ldr	r1, [sp, #32]
 800901e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009026:	2900      	cmp	r1, #0
 8009028:	d043      	beq.n	80090b2 <_dtoa_r+0x582>
 800902a:	494d      	ldr	r1, [pc, #308]	; (8009160 <_dtoa_r+0x630>)
 800902c:	2000      	movs	r0, #0
 800902e:	f7f7 fc17 	bl	8000860 <__aeabi_ddiv>
 8009032:	4652      	mov	r2, sl
 8009034:	465b      	mov	r3, fp
 8009036:	f7f7 f931 	bl	800029c <__aeabi_dsub>
 800903a:	9d01      	ldr	r5, [sp, #4]
 800903c:	4682      	mov	sl, r0
 800903e:	468b      	mov	fp, r1
 8009040:	4649      	mov	r1, r9
 8009042:	4640      	mov	r0, r8
 8009044:	f7f7 fd92 	bl	8000b6c <__aeabi_d2iz>
 8009048:	4606      	mov	r6, r0
 800904a:	f7f7 fa75 	bl	8000538 <__aeabi_i2d>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 f921 	bl	800029c <__aeabi_dsub>
 800905a:	3630      	adds	r6, #48	; 0x30
 800905c:	f805 6b01 	strb.w	r6, [r5], #1
 8009060:	4652      	mov	r2, sl
 8009062:	465b      	mov	r3, fp
 8009064:	4680      	mov	r8, r0
 8009066:	4689      	mov	r9, r1
 8009068:	f7f7 fd42 	bl	8000af0 <__aeabi_dcmplt>
 800906c:	2800      	cmp	r0, #0
 800906e:	d163      	bne.n	8009138 <_dtoa_r+0x608>
 8009070:	4642      	mov	r2, r8
 8009072:	464b      	mov	r3, r9
 8009074:	4936      	ldr	r1, [pc, #216]	; (8009150 <_dtoa_r+0x620>)
 8009076:	2000      	movs	r0, #0
 8009078:	f7f7 f910 	bl	800029c <__aeabi_dsub>
 800907c:	4652      	mov	r2, sl
 800907e:	465b      	mov	r3, fp
 8009080:	f7f7 fd36 	bl	8000af0 <__aeabi_dcmplt>
 8009084:	2800      	cmp	r0, #0
 8009086:	f040 80b5 	bne.w	80091f4 <_dtoa_r+0x6c4>
 800908a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908c:	429d      	cmp	r5, r3
 800908e:	d081      	beq.n	8008f94 <_dtoa_r+0x464>
 8009090:	4b30      	ldr	r3, [pc, #192]	; (8009154 <_dtoa_r+0x624>)
 8009092:	2200      	movs	r2, #0
 8009094:	4650      	mov	r0, sl
 8009096:	4659      	mov	r1, fp
 8009098:	f7f7 fab8 	bl	800060c <__aeabi_dmul>
 800909c:	4b2d      	ldr	r3, [pc, #180]	; (8009154 <_dtoa_r+0x624>)
 800909e:	4682      	mov	sl, r0
 80090a0:	468b      	mov	fp, r1
 80090a2:	4640      	mov	r0, r8
 80090a4:	4649      	mov	r1, r9
 80090a6:	2200      	movs	r2, #0
 80090a8:	f7f7 fab0 	bl	800060c <__aeabi_dmul>
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	e7c6      	b.n	8009040 <_dtoa_r+0x510>
 80090b2:	4650      	mov	r0, sl
 80090b4:	4659      	mov	r1, fp
 80090b6:	f7f7 faa9 	bl	800060c <__aeabi_dmul>
 80090ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090bc:	9d01      	ldr	r5, [sp, #4]
 80090be:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c0:	4682      	mov	sl, r0
 80090c2:	468b      	mov	fp, r1
 80090c4:	4649      	mov	r1, r9
 80090c6:	4640      	mov	r0, r8
 80090c8:	f7f7 fd50 	bl	8000b6c <__aeabi_d2iz>
 80090cc:	4606      	mov	r6, r0
 80090ce:	f7f7 fa33 	bl	8000538 <__aeabi_i2d>
 80090d2:	3630      	adds	r6, #48	; 0x30
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 f8de 	bl	800029c <__aeabi_dsub>
 80090e0:	f805 6b01 	strb.w	r6, [r5], #1
 80090e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090e6:	429d      	cmp	r5, r3
 80090e8:	4680      	mov	r8, r0
 80090ea:	4689      	mov	r9, r1
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	d124      	bne.n	800913c <_dtoa_r+0x60c>
 80090f2:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <_dtoa_r+0x630>)
 80090f4:	4650      	mov	r0, sl
 80090f6:	4659      	mov	r1, fp
 80090f8:	f7f7 f8d2 	bl	80002a0 <__adddf3>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4640      	mov	r0, r8
 8009102:	4649      	mov	r1, r9
 8009104:	f7f7 fd12 	bl	8000b2c <__aeabi_dcmpgt>
 8009108:	2800      	cmp	r0, #0
 800910a:	d173      	bne.n	80091f4 <_dtoa_r+0x6c4>
 800910c:	4652      	mov	r2, sl
 800910e:	465b      	mov	r3, fp
 8009110:	4913      	ldr	r1, [pc, #76]	; (8009160 <_dtoa_r+0x630>)
 8009112:	2000      	movs	r0, #0
 8009114:	f7f7 f8c2 	bl	800029c <__aeabi_dsub>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 fce6 	bl	8000af0 <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f af35 	beq.w	8008f94 <_dtoa_r+0x464>
 800912a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800912c:	1e6b      	subs	r3, r5, #1
 800912e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009134:	2b30      	cmp	r3, #48	; 0x30
 8009136:	d0f8      	beq.n	800912a <_dtoa_r+0x5fa>
 8009138:	9700      	str	r7, [sp, #0]
 800913a:	e049      	b.n	80091d0 <_dtoa_r+0x6a0>
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <_dtoa_r+0x624>)
 800913e:	f7f7 fa65 	bl	800060c <__aeabi_dmul>
 8009142:	4680      	mov	r8, r0
 8009144:	4689      	mov	r9, r1
 8009146:	e7bd      	b.n	80090c4 <_dtoa_r+0x594>
 8009148:	0800b738 	.word	0x0800b738
 800914c:	0800b710 	.word	0x0800b710
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	40240000 	.word	0x40240000
 8009158:	401c0000 	.word	0x401c0000
 800915c:	40140000 	.word	0x40140000
 8009160:	3fe00000 	.word	0x3fe00000
 8009164:	9d01      	ldr	r5, [sp, #4]
 8009166:	4656      	mov	r6, sl
 8009168:	465f      	mov	r7, fp
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	4630      	mov	r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	f7f7 fb75 	bl	8000860 <__aeabi_ddiv>
 8009176:	f7f7 fcf9 	bl	8000b6c <__aeabi_d2iz>
 800917a:	4682      	mov	sl, r0
 800917c:	f7f7 f9dc 	bl	8000538 <__aeabi_i2d>
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	f7f7 fa42 	bl	800060c <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009194:	f7f7 f882 	bl	800029c <__aeabi_dsub>
 8009198:	f805 6b01 	strb.w	r6, [r5], #1
 800919c:	9e01      	ldr	r6, [sp, #4]
 800919e:	9f03      	ldr	r7, [sp, #12]
 80091a0:	1bae      	subs	r6, r5, r6
 80091a2:	42b7      	cmp	r7, r6
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	d135      	bne.n	8009216 <_dtoa_r+0x6e6>
 80091aa:	f7f7 f879 	bl	80002a0 <__adddf3>
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	f7f7 fcb9 	bl	8000b2c <__aeabi_dcmpgt>
 80091ba:	b9d0      	cbnz	r0, 80091f2 <_dtoa_r+0x6c2>
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fc8a 	bl	8000adc <__aeabi_dcmpeq>
 80091c8:	b110      	cbz	r0, 80091d0 <_dtoa_r+0x6a0>
 80091ca:	f01a 0f01 	tst.w	sl, #1
 80091ce:	d110      	bne.n	80091f2 <_dtoa_r+0x6c2>
 80091d0:	4620      	mov	r0, r4
 80091d2:	ee18 1a10 	vmov	r1, s16
 80091d6:	f000 fc7d 	bl	8009ad4 <_Bfree>
 80091da:	2300      	movs	r3, #0
 80091dc:	9800      	ldr	r0, [sp, #0]
 80091de:	702b      	strb	r3, [r5, #0]
 80091e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e2:	3001      	adds	r0, #1
 80091e4:	6018      	str	r0, [r3, #0]
 80091e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f43f acf1 	beq.w	8008bd0 <_dtoa_r+0xa0>
 80091ee:	601d      	str	r5, [r3, #0]
 80091f0:	e4ee      	b.n	8008bd0 <_dtoa_r+0xa0>
 80091f2:	9f00      	ldr	r7, [sp, #0]
 80091f4:	462b      	mov	r3, r5
 80091f6:	461d      	mov	r5, r3
 80091f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091fc:	2a39      	cmp	r2, #57	; 0x39
 80091fe:	d106      	bne.n	800920e <_dtoa_r+0x6de>
 8009200:	9a01      	ldr	r2, [sp, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d1f7      	bne.n	80091f6 <_dtoa_r+0x6c6>
 8009206:	9901      	ldr	r1, [sp, #4]
 8009208:	2230      	movs	r2, #48	; 0x30
 800920a:	3701      	adds	r7, #1
 800920c:	700a      	strb	r2, [r1, #0]
 800920e:	781a      	ldrb	r2, [r3, #0]
 8009210:	3201      	adds	r2, #1
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e790      	b.n	8009138 <_dtoa_r+0x608>
 8009216:	4ba6      	ldr	r3, [pc, #664]	; (80094b0 <_dtoa_r+0x980>)
 8009218:	2200      	movs	r2, #0
 800921a:	f7f7 f9f7 	bl	800060c <__aeabi_dmul>
 800921e:	2200      	movs	r2, #0
 8009220:	2300      	movs	r3, #0
 8009222:	4606      	mov	r6, r0
 8009224:	460f      	mov	r7, r1
 8009226:	f7f7 fc59 	bl	8000adc <__aeabi_dcmpeq>
 800922a:	2800      	cmp	r0, #0
 800922c:	d09d      	beq.n	800916a <_dtoa_r+0x63a>
 800922e:	e7cf      	b.n	80091d0 <_dtoa_r+0x6a0>
 8009230:	9a08      	ldr	r2, [sp, #32]
 8009232:	2a00      	cmp	r2, #0
 8009234:	f000 80d7 	beq.w	80093e6 <_dtoa_r+0x8b6>
 8009238:	9a06      	ldr	r2, [sp, #24]
 800923a:	2a01      	cmp	r2, #1
 800923c:	f300 80ba 	bgt.w	80093b4 <_dtoa_r+0x884>
 8009240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009242:	2a00      	cmp	r2, #0
 8009244:	f000 80b2 	beq.w	80093ac <_dtoa_r+0x87c>
 8009248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800924c:	9e07      	ldr	r6, [sp, #28]
 800924e:	9d04      	ldr	r5, [sp, #16]
 8009250:	9a04      	ldr	r2, [sp, #16]
 8009252:	441a      	add	r2, r3
 8009254:	9204      	str	r2, [sp, #16]
 8009256:	9a05      	ldr	r2, [sp, #20]
 8009258:	2101      	movs	r1, #1
 800925a:	441a      	add	r2, r3
 800925c:	4620      	mov	r0, r4
 800925e:	9205      	str	r2, [sp, #20]
 8009260:	f000 fcf0 	bl	8009c44 <__i2b>
 8009264:	4607      	mov	r7, r0
 8009266:	2d00      	cmp	r5, #0
 8009268:	dd0c      	ble.n	8009284 <_dtoa_r+0x754>
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dd09      	ble.n	8009284 <_dtoa_r+0x754>
 8009270:	42ab      	cmp	r3, r5
 8009272:	9a04      	ldr	r2, [sp, #16]
 8009274:	bfa8      	it	ge
 8009276:	462b      	movge	r3, r5
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	9204      	str	r2, [sp, #16]
 800927c:	9a05      	ldr	r2, [sp, #20]
 800927e:	1aed      	subs	r5, r5, r3
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	9b07      	ldr	r3, [sp, #28]
 8009286:	b31b      	cbz	r3, 80092d0 <_dtoa_r+0x7a0>
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80af 	beq.w	80093ee <_dtoa_r+0x8be>
 8009290:	2e00      	cmp	r6, #0
 8009292:	dd13      	ble.n	80092bc <_dtoa_r+0x78c>
 8009294:	4639      	mov	r1, r7
 8009296:	4632      	mov	r2, r6
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fd93 	bl	8009dc4 <__pow5mult>
 800929e:	ee18 2a10 	vmov	r2, s16
 80092a2:	4601      	mov	r1, r0
 80092a4:	4607      	mov	r7, r0
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fce2 	bl	8009c70 <__multiply>
 80092ac:	ee18 1a10 	vmov	r1, s16
 80092b0:	4680      	mov	r8, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fc0e 	bl	8009ad4 <_Bfree>
 80092b8:	ee08 8a10 	vmov	s16, r8
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	1b9a      	subs	r2, r3, r6
 80092c0:	d006      	beq.n	80092d0 <_dtoa_r+0x7a0>
 80092c2:	ee18 1a10 	vmov	r1, s16
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 fd7c 	bl	8009dc4 <__pow5mult>
 80092cc:	ee08 0a10 	vmov	s16, r0
 80092d0:	2101      	movs	r1, #1
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fcb6 	bl	8009c44 <__i2b>
 80092d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	4606      	mov	r6, r0
 80092de:	f340 8088 	ble.w	80093f2 <_dtoa_r+0x8c2>
 80092e2:	461a      	mov	r2, r3
 80092e4:	4601      	mov	r1, r0
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fd6c 	bl	8009dc4 <__pow5mult>
 80092ec:	9b06      	ldr	r3, [sp, #24]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	4606      	mov	r6, r0
 80092f2:	f340 8081 	ble.w	80093f8 <_dtoa_r+0x8c8>
 80092f6:	f04f 0800 	mov.w	r8, #0
 80092fa:	6933      	ldr	r3, [r6, #16]
 80092fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009300:	6918      	ldr	r0, [r3, #16]
 8009302:	f000 fc4f 	bl	8009ba4 <__hi0bits>
 8009306:	f1c0 0020 	rsb	r0, r0, #32
 800930a:	9b05      	ldr	r3, [sp, #20]
 800930c:	4418      	add	r0, r3
 800930e:	f010 001f 	ands.w	r0, r0, #31
 8009312:	f000 8092 	beq.w	800943a <_dtoa_r+0x90a>
 8009316:	f1c0 0320 	rsb	r3, r0, #32
 800931a:	2b04      	cmp	r3, #4
 800931c:	f340 808a 	ble.w	8009434 <_dtoa_r+0x904>
 8009320:	f1c0 001c 	rsb	r0, r0, #28
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	4403      	add	r3, r0
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	4403      	add	r3, r0
 800932e:	4405      	add	r5, r0
 8009330:	9305      	str	r3, [sp, #20]
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dd07      	ble.n	8009348 <_dtoa_r+0x818>
 8009338:	ee18 1a10 	vmov	r1, s16
 800933c:	461a      	mov	r2, r3
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fd9a 	bl	8009e78 <__lshift>
 8009344:	ee08 0a10 	vmov	s16, r0
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd05      	ble.n	800935a <_dtoa_r+0x82a>
 800934e:	4631      	mov	r1, r6
 8009350:	461a      	mov	r2, r3
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fd90 	bl	8009e78 <__lshift>
 8009358:	4606      	mov	r6, r0
 800935a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d06e      	beq.n	800943e <_dtoa_r+0x90e>
 8009360:	ee18 0a10 	vmov	r0, s16
 8009364:	4631      	mov	r1, r6
 8009366:	f000 fdf7 	bl	8009f58 <__mcmp>
 800936a:	2800      	cmp	r0, #0
 800936c:	da67      	bge.n	800943e <_dtoa_r+0x90e>
 800936e:	9b00      	ldr	r3, [sp, #0]
 8009370:	3b01      	subs	r3, #1
 8009372:	ee18 1a10 	vmov	r1, s16
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	220a      	movs	r2, #10
 800937a:	2300      	movs	r3, #0
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fbcb 	bl	8009b18 <__multadd>
 8009382:	9b08      	ldr	r3, [sp, #32]
 8009384:	ee08 0a10 	vmov	s16, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 81b1 	beq.w	80096f0 <_dtoa_r+0xbc0>
 800938e:	2300      	movs	r3, #0
 8009390:	4639      	mov	r1, r7
 8009392:	220a      	movs	r2, #10
 8009394:	4620      	mov	r0, r4
 8009396:	f000 fbbf 	bl	8009b18 <__multadd>
 800939a:	9b02      	ldr	r3, [sp, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	4607      	mov	r7, r0
 80093a0:	f300 808e 	bgt.w	80094c0 <_dtoa_r+0x990>
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	dc51      	bgt.n	800944e <_dtoa_r+0x91e>
 80093aa:	e089      	b.n	80094c0 <_dtoa_r+0x990>
 80093ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093b2:	e74b      	b.n	800924c <_dtoa_r+0x71c>
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	1e5e      	subs	r6, r3, #1
 80093b8:	9b07      	ldr	r3, [sp, #28]
 80093ba:	42b3      	cmp	r3, r6
 80093bc:	bfbf      	itttt	lt
 80093be:	9b07      	ldrlt	r3, [sp, #28]
 80093c0:	9607      	strlt	r6, [sp, #28]
 80093c2:	1af2      	sublt	r2, r6, r3
 80093c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093c6:	bfb6      	itet	lt
 80093c8:	189b      	addlt	r3, r3, r2
 80093ca:	1b9e      	subge	r6, r3, r6
 80093cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	bfb8      	it	lt
 80093d2:	2600      	movlt	r6, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bfb7      	itett	lt
 80093d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093e0:	1a9d      	sublt	r5, r3, r2
 80093e2:	2300      	movlt	r3, #0
 80093e4:	e734      	b.n	8009250 <_dtoa_r+0x720>
 80093e6:	9e07      	ldr	r6, [sp, #28]
 80093e8:	9d04      	ldr	r5, [sp, #16]
 80093ea:	9f08      	ldr	r7, [sp, #32]
 80093ec:	e73b      	b.n	8009266 <_dtoa_r+0x736>
 80093ee:	9a07      	ldr	r2, [sp, #28]
 80093f0:	e767      	b.n	80092c2 <_dtoa_r+0x792>
 80093f2:	9b06      	ldr	r3, [sp, #24]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	dc18      	bgt.n	800942a <_dtoa_r+0x8fa>
 80093f8:	f1ba 0f00 	cmp.w	sl, #0
 80093fc:	d115      	bne.n	800942a <_dtoa_r+0x8fa>
 80093fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009402:	b993      	cbnz	r3, 800942a <_dtoa_r+0x8fa>
 8009404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009408:	0d1b      	lsrs	r3, r3, #20
 800940a:	051b      	lsls	r3, r3, #20
 800940c:	b183      	cbz	r3, 8009430 <_dtoa_r+0x900>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	3301      	adds	r3, #1
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	9b05      	ldr	r3, [sp, #20]
 8009416:	3301      	adds	r3, #1
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	f04f 0801 	mov.w	r8, #1
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f af6a 	bne.w	80092fa <_dtoa_r+0x7ca>
 8009426:	2001      	movs	r0, #1
 8009428:	e76f      	b.n	800930a <_dtoa_r+0x7da>
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	e7f6      	b.n	800941e <_dtoa_r+0x8ee>
 8009430:	4698      	mov	r8, r3
 8009432:	e7f4      	b.n	800941e <_dtoa_r+0x8ee>
 8009434:	f43f af7d 	beq.w	8009332 <_dtoa_r+0x802>
 8009438:	4618      	mov	r0, r3
 800943a:	301c      	adds	r0, #28
 800943c:	e772      	b.n	8009324 <_dtoa_r+0x7f4>
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	dc37      	bgt.n	80094b4 <_dtoa_r+0x984>
 8009444:	9b06      	ldr	r3, [sp, #24]
 8009446:	2b02      	cmp	r3, #2
 8009448:	dd34      	ble.n	80094b4 <_dtoa_r+0x984>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	9302      	str	r3, [sp, #8]
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	b96b      	cbnz	r3, 800946e <_dtoa_r+0x93e>
 8009452:	4631      	mov	r1, r6
 8009454:	2205      	movs	r2, #5
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fb5e 	bl	8009b18 <__multadd>
 800945c:	4601      	mov	r1, r0
 800945e:	4606      	mov	r6, r0
 8009460:	ee18 0a10 	vmov	r0, s16
 8009464:	f000 fd78 	bl	8009f58 <__mcmp>
 8009468:	2800      	cmp	r0, #0
 800946a:	f73f adbb 	bgt.w	8008fe4 <_dtoa_r+0x4b4>
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	9d01      	ldr	r5, [sp, #4]
 8009472:	43db      	mvns	r3, r3
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	4631      	mov	r1, r6
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fb29 	bl	8009ad4 <_Bfree>
 8009482:	2f00      	cmp	r7, #0
 8009484:	f43f aea4 	beq.w	80091d0 <_dtoa_r+0x6a0>
 8009488:	f1b8 0f00 	cmp.w	r8, #0
 800948c:	d005      	beq.n	800949a <_dtoa_r+0x96a>
 800948e:	45b8      	cmp	r8, r7
 8009490:	d003      	beq.n	800949a <_dtoa_r+0x96a>
 8009492:	4641      	mov	r1, r8
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fb1d 	bl	8009ad4 <_Bfree>
 800949a:	4639      	mov	r1, r7
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fb19 	bl	8009ad4 <_Bfree>
 80094a2:	e695      	b.n	80091d0 <_dtoa_r+0x6a0>
 80094a4:	2600      	movs	r6, #0
 80094a6:	4637      	mov	r7, r6
 80094a8:	e7e1      	b.n	800946e <_dtoa_r+0x93e>
 80094aa:	9700      	str	r7, [sp, #0]
 80094ac:	4637      	mov	r7, r6
 80094ae:	e599      	b.n	8008fe4 <_dtoa_r+0x4b4>
 80094b0:	40240000 	.word	0x40240000
 80094b4:	9b08      	ldr	r3, [sp, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 80ca 	beq.w	8009650 <_dtoa_r+0xb20>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	9302      	str	r3, [sp, #8]
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	dd05      	ble.n	80094d0 <_dtoa_r+0x9a0>
 80094c4:	4639      	mov	r1, r7
 80094c6:	462a      	mov	r2, r5
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 fcd5 	bl	8009e78 <__lshift>
 80094ce:	4607      	mov	r7, r0
 80094d0:	f1b8 0f00 	cmp.w	r8, #0
 80094d4:	d05b      	beq.n	800958e <_dtoa_r+0xa5e>
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 fabb 	bl	8009a54 <_Balloc>
 80094de:	4605      	mov	r5, r0
 80094e0:	b928      	cbnz	r0, 80094ee <_dtoa_r+0x9be>
 80094e2:	4b87      	ldr	r3, [pc, #540]	; (8009700 <_dtoa_r+0xbd0>)
 80094e4:	4602      	mov	r2, r0
 80094e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094ea:	f7ff bb3b 	b.w	8008b64 <_dtoa_r+0x34>
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	3202      	adds	r2, #2
 80094f2:	0092      	lsls	r2, r2, #2
 80094f4:	f107 010c 	add.w	r1, r7, #12
 80094f8:	300c      	adds	r0, #12
 80094fa:	f7fd fdff 	bl	80070fc <memcpy>
 80094fe:	2201      	movs	r2, #1
 8009500:	4629      	mov	r1, r5
 8009502:	4620      	mov	r0, r4
 8009504:	f000 fcb8 	bl	8009e78 <__lshift>
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	f103 0901 	add.w	r9, r3, #1
 800950e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009512:	4413      	add	r3, r2
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	f00a 0301 	and.w	r3, sl, #1
 800951a:	46b8      	mov	r8, r7
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	4607      	mov	r7, r0
 8009520:	4631      	mov	r1, r6
 8009522:	ee18 0a10 	vmov	r0, s16
 8009526:	f7ff fa75 	bl	8008a14 <quorem>
 800952a:	4641      	mov	r1, r8
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009532:	ee18 0a10 	vmov	r0, s16
 8009536:	f000 fd0f 	bl	8009f58 <__mcmp>
 800953a:	463a      	mov	r2, r7
 800953c:	9003      	str	r0, [sp, #12]
 800953e:	4631      	mov	r1, r6
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fd25 	bl	8009f90 <__mdiff>
 8009546:	68c2      	ldr	r2, [r0, #12]
 8009548:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800954c:	4605      	mov	r5, r0
 800954e:	bb02      	cbnz	r2, 8009592 <_dtoa_r+0xa62>
 8009550:	4601      	mov	r1, r0
 8009552:	ee18 0a10 	vmov	r0, s16
 8009556:	f000 fcff 	bl	8009f58 <__mcmp>
 800955a:	4602      	mov	r2, r0
 800955c:	4629      	mov	r1, r5
 800955e:	4620      	mov	r0, r4
 8009560:	9207      	str	r2, [sp, #28]
 8009562:	f000 fab7 	bl	8009ad4 <_Bfree>
 8009566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800956a:	ea43 0102 	orr.w	r1, r3, r2
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	430b      	orrs	r3, r1
 8009572:	464d      	mov	r5, r9
 8009574:	d10f      	bne.n	8009596 <_dtoa_r+0xa66>
 8009576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800957a:	d02a      	beq.n	80095d2 <_dtoa_r+0xaa2>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd02      	ble.n	8009588 <_dtoa_r+0xa58>
 8009582:	9b02      	ldr	r3, [sp, #8]
 8009584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009588:	f88b a000 	strb.w	sl, [fp]
 800958c:	e775      	b.n	800947a <_dtoa_r+0x94a>
 800958e:	4638      	mov	r0, r7
 8009590:	e7ba      	b.n	8009508 <_dtoa_r+0x9d8>
 8009592:	2201      	movs	r2, #1
 8009594:	e7e2      	b.n	800955c <_dtoa_r+0xa2c>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	db04      	blt.n	80095a6 <_dtoa_r+0xa76>
 800959c:	9906      	ldr	r1, [sp, #24]
 800959e:	430b      	orrs	r3, r1
 80095a0:	9904      	ldr	r1, [sp, #16]
 80095a2:	430b      	orrs	r3, r1
 80095a4:	d122      	bne.n	80095ec <_dtoa_r+0xabc>
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	ddee      	ble.n	8009588 <_dtoa_r+0xa58>
 80095aa:	ee18 1a10 	vmov	r1, s16
 80095ae:	2201      	movs	r2, #1
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fc61 	bl	8009e78 <__lshift>
 80095b6:	4631      	mov	r1, r6
 80095b8:	ee08 0a10 	vmov	s16, r0
 80095bc:	f000 fccc 	bl	8009f58 <__mcmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	dc03      	bgt.n	80095cc <_dtoa_r+0xa9c>
 80095c4:	d1e0      	bne.n	8009588 <_dtoa_r+0xa58>
 80095c6:	f01a 0f01 	tst.w	sl, #1
 80095ca:	d0dd      	beq.n	8009588 <_dtoa_r+0xa58>
 80095cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095d0:	d1d7      	bne.n	8009582 <_dtoa_r+0xa52>
 80095d2:	2339      	movs	r3, #57	; 0x39
 80095d4:	f88b 3000 	strb.w	r3, [fp]
 80095d8:	462b      	mov	r3, r5
 80095da:	461d      	mov	r5, r3
 80095dc:	3b01      	subs	r3, #1
 80095de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095e2:	2a39      	cmp	r2, #57	; 0x39
 80095e4:	d071      	beq.n	80096ca <_dtoa_r+0xb9a>
 80095e6:	3201      	adds	r2, #1
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e746      	b.n	800947a <_dtoa_r+0x94a>
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	dd07      	ble.n	8009600 <_dtoa_r+0xad0>
 80095f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095f4:	d0ed      	beq.n	80095d2 <_dtoa_r+0xaa2>
 80095f6:	f10a 0301 	add.w	r3, sl, #1
 80095fa:	f88b 3000 	strb.w	r3, [fp]
 80095fe:	e73c      	b.n	800947a <_dtoa_r+0x94a>
 8009600:	9b05      	ldr	r3, [sp, #20]
 8009602:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009606:	4599      	cmp	r9, r3
 8009608:	d047      	beq.n	800969a <_dtoa_r+0xb6a>
 800960a:	ee18 1a10 	vmov	r1, s16
 800960e:	2300      	movs	r3, #0
 8009610:	220a      	movs	r2, #10
 8009612:	4620      	mov	r0, r4
 8009614:	f000 fa80 	bl	8009b18 <__multadd>
 8009618:	45b8      	cmp	r8, r7
 800961a:	ee08 0a10 	vmov	s16, r0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	f04f 020a 	mov.w	r2, #10
 8009626:	4641      	mov	r1, r8
 8009628:	4620      	mov	r0, r4
 800962a:	d106      	bne.n	800963a <_dtoa_r+0xb0a>
 800962c:	f000 fa74 	bl	8009b18 <__multadd>
 8009630:	4680      	mov	r8, r0
 8009632:	4607      	mov	r7, r0
 8009634:	f109 0901 	add.w	r9, r9, #1
 8009638:	e772      	b.n	8009520 <_dtoa_r+0x9f0>
 800963a:	f000 fa6d 	bl	8009b18 <__multadd>
 800963e:	4639      	mov	r1, r7
 8009640:	4680      	mov	r8, r0
 8009642:	2300      	movs	r3, #0
 8009644:	220a      	movs	r2, #10
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fa66 	bl	8009b18 <__multadd>
 800964c:	4607      	mov	r7, r0
 800964e:	e7f1      	b.n	8009634 <_dtoa_r+0xb04>
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	9d01      	ldr	r5, [sp, #4]
 8009656:	ee18 0a10 	vmov	r0, s16
 800965a:	4631      	mov	r1, r6
 800965c:	f7ff f9da 	bl	8008a14 <quorem>
 8009660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	f805 ab01 	strb.w	sl, [r5], #1
 800966a:	1aea      	subs	r2, r5, r3
 800966c:	9b02      	ldr	r3, [sp, #8]
 800966e:	4293      	cmp	r3, r2
 8009670:	dd09      	ble.n	8009686 <_dtoa_r+0xb56>
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2300      	movs	r3, #0
 8009678:	220a      	movs	r2, #10
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fa4c 	bl	8009b18 <__multadd>
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	e7e7      	b.n	8009656 <_dtoa_r+0xb26>
 8009686:	9b02      	ldr	r3, [sp, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfc8      	it	gt
 800968c:	461d      	movgt	r5, r3
 800968e:	9b01      	ldr	r3, [sp, #4]
 8009690:	bfd8      	it	le
 8009692:	2501      	movle	r5, #1
 8009694:	441d      	add	r5, r3
 8009696:	f04f 0800 	mov.w	r8, #0
 800969a:	ee18 1a10 	vmov	r1, s16
 800969e:	2201      	movs	r2, #1
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fbe9 	bl	8009e78 <__lshift>
 80096a6:	4631      	mov	r1, r6
 80096a8:	ee08 0a10 	vmov	s16, r0
 80096ac:	f000 fc54 	bl	8009f58 <__mcmp>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	dc91      	bgt.n	80095d8 <_dtoa_r+0xaa8>
 80096b4:	d102      	bne.n	80096bc <_dtoa_r+0xb8c>
 80096b6:	f01a 0f01 	tst.w	sl, #1
 80096ba:	d18d      	bne.n	80095d8 <_dtoa_r+0xaa8>
 80096bc:	462b      	mov	r3, r5
 80096be:	461d      	mov	r5, r3
 80096c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096c4:	2a30      	cmp	r2, #48	; 0x30
 80096c6:	d0fa      	beq.n	80096be <_dtoa_r+0xb8e>
 80096c8:	e6d7      	b.n	800947a <_dtoa_r+0x94a>
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d184      	bne.n	80095da <_dtoa_r+0xaaa>
 80096d0:	9b00      	ldr	r3, [sp, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	2331      	movs	r3, #49	; 0x31
 80096d8:	7013      	strb	r3, [r2, #0]
 80096da:	e6ce      	b.n	800947a <_dtoa_r+0x94a>
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <_dtoa_r+0xbd4>)
 80096de:	f7ff ba95 	b.w	8008c0c <_dtoa_r+0xdc>
 80096e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f47f aa6e 	bne.w	8008bc6 <_dtoa_r+0x96>
 80096ea:	4b07      	ldr	r3, [pc, #28]	; (8009708 <_dtoa_r+0xbd8>)
 80096ec:	f7ff ba8e 	b.w	8008c0c <_dtoa_r+0xdc>
 80096f0:	9b02      	ldr	r3, [sp, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dcae      	bgt.n	8009654 <_dtoa_r+0xb24>
 80096f6:	9b06      	ldr	r3, [sp, #24]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	f73f aea8 	bgt.w	800944e <_dtoa_r+0x91e>
 80096fe:	e7a9      	b.n	8009654 <_dtoa_r+0xb24>
 8009700:	0800b69d 	.word	0x0800b69d
 8009704:	0800b92c 	.word	0x0800b92c
 8009708:	0800b61e 	.word	0x0800b61e

0800970c <__sflush_r>:
 800970c:	898a      	ldrh	r2, [r1, #12]
 800970e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	4605      	mov	r5, r0
 8009714:	0710      	lsls	r0, r2, #28
 8009716:	460c      	mov	r4, r1
 8009718:	d458      	bmi.n	80097cc <__sflush_r+0xc0>
 800971a:	684b      	ldr	r3, [r1, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	dc05      	bgt.n	800972c <__sflush_r+0x20>
 8009720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009722:	2b00      	cmp	r3, #0
 8009724:	dc02      	bgt.n	800972c <__sflush_r+0x20>
 8009726:	2000      	movs	r0, #0
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800972e:	2e00      	cmp	r6, #0
 8009730:	d0f9      	beq.n	8009726 <__sflush_r+0x1a>
 8009732:	2300      	movs	r3, #0
 8009734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009738:	682f      	ldr	r7, [r5, #0]
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	d032      	beq.n	80097a4 <__sflush_r+0x98>
 800973e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	075a      	lsls	r2, r3, #29
 8009744:	d505      	bpl.n	8009752 <__sflush_r+0x46>
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	1ac0      	subs	r0, r0, r3
 800974a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800974c:	b10b      	cbz	r3, 8009752 <__sflush_r+0x46>
 800974e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009750:	1ac0      	subs	r0, r0, r3
 8009752:	2300      	movs	r3, #0
 8009754:	4602      	mov	r2, r0
 8009756:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009758:	6a21      	ldr	r1, [r4, #32]
 800975a:	4628      	mov	r0, r5
 800975c:	47b0      	blx	r6
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	d106      	bne.n	8009772 <__sflush_r+0x66>
 8009764:	6829      	ldr	r1, [r5, #0]
 8009766:	291d      	cmp	r1, #29
 8009768:	d82c      	bhi.n	80097c4 <__sflush_r+0xb8>
 800976a:	4a2a      	ldr	r2, [pc, #168]	; (8009814 <__sflush_r+0x108>)
 800976c:	40ca      	lsrs	r2, r1
 800976e:	07d6      	lsls	r6, r2, #31
 8009770:	d528      	bpl.n	80097c4 <__sflush_r+0xb8>
 8009772:	2200      	movs	r2, #0
 8009774:	6062      	str	r2, [r4, #4]
 8009776:	04d9      	lsls	r1, r3, #19
 8009778:	6922      	ldr	r2, [r4, #16]
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	d504      	bpl.n	8009788 <__sflush_r+0x7c>
 800977e:	1c42      	adds	r2, r0, #1
 8009780:	d101      	bne.n	8009786 <__sflush_r+0x7a>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b903      	cbnz	r3, 8009788 <__sflush_r+0x7c>
 8009786:	6560      	str	r0, [r4, #84]	; 0x54
 8009788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800978a:	602f      	str	r7, [r5, #0]
 800978c:	2900      	cmp	r1, #0
 800978e:	d0ca      	beq.n	8009726 <__sflush_r+0x1a>
 8009790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009794:	4299      	cmp	r1, r3
 8009796:	d002      	beq.n	800979e <__sflush_r+0x92>
 8009798:	4628      	mov	r0, r5
 800979a:	f7fd ff37 	bl	800760c <_free_r>
 800979e:	2000      	movs	r0, #0
 80097a0:	6360      	str	r0, [r4, #52]	; 0x34
 80097a2:	e7c1      	b.n	8009728 <__sflush_r+0x1c>
 80097a4:	6a21      	ldr	r1, [r4, #32]
 80097a6:	2301      	movs	r3, #1
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b0      	blx	r6
 80097ac:	1c41      	adds	r1, r0, #1
 80097ae:	d1c7      	bne.n	8009740 <__sflush_r+0x34>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0c4      	beq.n	8009740 <__sflush_r+0x34>
 80097b6:	2b1d      	cmp	r3, #29
 80097b8:	d001      	beq.n	80097be <__sflush_r+0xb2>
 80097ba:	2b16      	cmp	r3, #22
 80097bc:	d101      	bne.n	80097c2 <__sflush_r+0xb6>
 80097be:	602f      	str	r7, [r5, #0]
 80097c0:	e7b1      	b.n	8009726 <__sflush_r+0x1a>
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	e7ad      	b.n	8009728 <__sflush_r+0x1c>
 80097cc:	690f      	ldr	r7, [r1, #16]
 80097ce:	2f00      	cmp	r7, #0
 80097d0:	d0a9      	beq.n	8009726 <__sflush_r+0x1a>
 80097d2:	0793      	lsls	r3, r2, #30
 80097d4:	680e      	ldr	r6, [r1, #0]
 80097d6:	bf08      	it	eq
 80097d8:	694b      	ldreq	r3, [r1, #20]
 80097da:	600f      	str	r7, [r1, #0]
 80097dc:	bf18      	it	ne
 80097de:	2300      	movne	r3, #0
 80097e0:	eba6 0807 	sub.w	r8, r6, r7
 80097e4:	608b      	str	r3, [r1, #8]
 80097e6:	f1b8 0f00 	cmp.w	r8, #0
 80097ea:	dd9c      	ble.n	8009726 <__sflush_r+0x1a>
 80097ec:	6a21      	ldr	r1, [r4, #32]
 80097ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097f0:	4643      	mov	r3, r8
 80097f2:	463a      	mov	r2, r7
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b0      	blx	r6
 80097f8:	2800      	cmp	r0, #0
 80097fa:	dc06      	bgt.n	800980a <__sflush_r+0xfe>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009808:	e78e      	b.n	8009728 <__sflush_r+0x1c>
 800980a:	4407      	add	r7, r0
 800980c:	eba8 0800 	sub.w	r8, r8, r0
 8009810:	e7e9      	b.n	80097e6 <__sflush_r+0xda>
 8009812:	bf00      	nop
 8009814:	20400001 	.word	0x20400001

08009818 <_fflush_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	690b      	ldr	r3, [r1, #16]
 800981c:	4605      	mov	r5, r0
 800981e:	460c      	mov	r4, r1
 8009820:	b913      	cbnz	r3, 8009828 <_fflush_r+0x10>
 8009822:	2500      	movs	r5, #0
 8009824:	4628      	mov	r0, r5
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	b118      	cbz	r0, 8009832 <_fflush_r+0x1a>
 800982a:	6983      	ldr	r3, [r0, #24]
 800982c:	b90b      	cbnz	r3, 8009832 <_fflush_r+0x1a>
 800982e:	f7fd fb8d 	bl	8006f4c <__sinit>
 8009832:	4b14      	ldr	r3, [pc, #80]	; (8009884 <_fflush_r+0x6c>)
 8009834:	429c      	cmp	r4, r3
 8009836:	d11b      	bne.n	8009870 <_fflush_r+0x58>
 8009838:	686c      	ldr	r4, [r5, #4]
 800983a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0ef      	beq.n	8009822 <_fflush_r+0xa>
 8009842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009844:	07d0      	lsls	r0, r2, #31
 8009846:	d404      	bmi.n	8009852 <_fflush_r+0x3a>
 8009848:	0599      	lsls	r1, r3, #22
 800984a:	d402      	bmi.n	8009852 <_fflush_r+0x3a>
 800984c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800984e:	f7fd fc41 	bl	80070d4 <__retarget_lock_acquire_recursive>
 8009852:	4628      	mov	r0, r5
 8009854:	4621      	mov	r1, r4
 8009856:	f7ff ff59 	bl	800970c <__sflush_r>
 800985a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800985c:	07da      	lsls	r2, r3, #31
 800985e:	4605      	mov	r5, r0
 8009860:	d4e0      	bmi.n	8009824 <_fflush_r+0xc>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	059b      	lsls	r3, r3, #22
 8009866:	d4dd      	bmi.n	8009824 <_fflush_r+0xc>
 8009868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986a:	f7fd fc35 	bl	80070d8 <__retarget_lock_release_recursive>
 800986e:	e7d9      	b.n	8009824 <_fflush_r+0xc>
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <_fflush_r+0x70>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <_fflush_r+0x62>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7df      	b.n	800983a <_fflush_r+0x22>
 800987a:	4b04      	ldr	r3, [pc, #16]	; (800988c <_fflush_r+0x74>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7da      	b.n	800983a <_fflush_r+0x22>
 8009884:	0800b470 	.word	0x0800b470
 8009888:	0800b490 	.word	0x0800b490
 800988c:	0800b450 	.word	0x0800b450

08009890 <fiprintf>:
 8009890:	b40e      	push	{r1, r2, r3}
 8009892:	b503      	push	{r0, r1, lr}
 8009894:	4601      	mov	r1, r0
 8009896:	ab03      	add	r3, sp, #12
 8009898:	4805      	ldr	r0, [pc, #20]	; (80098b0 <fiprintf+0x20>)
 800989a:	f853 2b04 	ldr.w	r2, [r3], #4
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	f000 fdf7 	bl	800a494 <_vfiprintf_r>
 80098a6:	b002      	add	sp, #8
 80098a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098ac:	b003      	add	sp, #12
 80098ae:	4770      	bx	lr
 80098b0:	20000014 	.word	0x20000014

080098b4 <_findenv_r>:
 80098b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009928 <_findenv_r+0x74>
 80098bc:	4607      	mov	r7, r0
 80098be:	4689      	mov	r9, r1
 80098c0:	4616      	mov	r6, r2
 80098c2:	f000 fff7 	bl	800a8b4 <__env_lock>
 80098c6:	f8da 4000 	ldr.w	r4, [sl]
 80098ca:	b134      	cbz	r4, 80098da <_findenv_r+0x26>
 80098cc:	464b      	mov	r3, r9
 80098ce:	4698      	mov	r8, r3
 80098d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d4:	b13a      	cbz	r2, 80098e6 <_findenv_r+0x32>
 80098d6:	2a3d      	cmp	r2, #61	; 0x3d
 80098d8:	d1f9      	bne.n	80098ce <_findenv_r+0x1a>
 80098da:	4638      	mov	r0, r7
 80098dc:	f000 fff0 	bl	800a8c0 <__env_unlock>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e6:	eba8 0809 	sub.w	r8, r8, r9
 80098ea:	46a3      	mov	fp, r4
 80098ec:	f854 0b04 	ldr.w	r0, [r4], #4
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d0f2      	beq.n	80098da <_findenv_r+0x26>
 80098f4:	4642      	mov	r2, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f000 ff42 	bl	800a780 <strncmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d1f4      	bne.n	80098ea <_findenv_r+0x36>
 8009900:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009904:	eb03 0508 	add.w	r5, r3, r8
 8009908:	f813 3008 	ldrb.w	r3, [r3, r8]
 800990c:	2b3d      	cmp	r3, #61	; 0x3d
 800990e:	d1ec      	bne.n	80098ea <_findenv_r+0x36>
 8009910:	f8da 3000 	ldr.w	r3, [sl]
 8009914:	ebab 0303 	sub.w	r3, fp, r3
 8009918:	109b      	asrs	r3, r3, #2
 800991a:	4638      	mov	r0, r7
 800991c:	6033      	str	r3, [r6, #0]
 800991e:	f000 ffcf 	bl	800a8c0 <__env_unlock>
 8009922:	1c68      	adds	r0, r5, #1
 8009924:	e7dd      	b.n	80098e2 <_findenv_r+0x2e>
 8009926:	bf00      	nop
 8009928:	20000000 	.word	0x20000000

0800992c <_getenv_r>:
 800992c:	b507      	push	{r0, r1, r2, lr}
 800992e:	aa01      	add	r2, sp, #4
 8009930:	f7ff ffc0 	bl	80098b4 <_findenv_r>
 8009934:	b003      	add	sp, #12
 8009936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800993c <__gettzinfo>:
 800993c:	4800      	ldr	r0, [pc, #0]	; (8009940 <__gettzinfo+0x4>)
 800993e:	4770      	bx	lr
 8009940:	20000080 	.word	0x20000080

08009944 <_localeconv_r>:
 8009944:	4800      	ldr	r0, [pc, #0]	; (8009948 <_localeconv_r+0x4>)
 8009946:	4770      	bx	lr
 8009948:	200001c8 	.word	0x200001c8

0800994c <_lseek_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_lseek_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f8 f838 	bl	80019d0 <_lseek>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_lseek_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_lseek_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20004ea0 	.word	0x20004ea0

08009970 <__swhatbuf_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	460e      	mov	r6, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2900      	cmp	r1, #0
 800997a:	b096      	sub	sp, #88	; 0x58
 800997c:	4614      	mov	r4, r2
 800997e:	461d      	mov	r5, r3
 8009980:	da08      	bge.n	8009994 <__swhatbuf_r+0x24>
 8009982:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	061a      	lsls	r2, r3, #24
 800998c:	d410      	bmi.n	80099b0 <__swhatbuf_r+0x40>
 800998e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009992:	e00e      	b.n	80099b2 <__swhatbuf_r+0x42>
 8009994:	466a      	mov	r2, sp
 8009996:	f000 ff99 	bl	800a8cc <_fstat_r>
 800999a:	2800      	cmp	r0, #0
 800999c:	dbf1      	blt.n	8009982 <__swhatbuf_r+0x12>
 800999e:	9a01      	ldr	r2, [sp, #4]
 80099a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099a8:	425a      	negs	r2, r3
 80099aa:	415a      	adcs	r2, r3
 80099ac:	602a      	str	r2, [r5, #0]
 80099ae:	e7ee      	b.n	800998e <__swhatbuf_r+0x1e>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	2000      	movs	r0, #0
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	b016      	add	sp, #88	; 0x58
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080099bc <__smakebuf_r>:
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c0:	079d      	lsls	r5, r3, #30
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	d507      	bpl.n	80099d8 <__smakebuf_r+0x1c>
 80099c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2301      	movs	r3, #1
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	b002      	add	sp, #8
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	ab01      	add	r3, sp, #4
 80099da:	466a      	mov	r2, sp
 80099dc:	f7ff ffc8 	bl	8009970 <__swhatbuf_r>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7fd fe7d 	bl	80076e4 <_malloc_r>
 80099ea:	b948      	cbnz	r0, 8009a00 <__smakebuf_r+0x44>
 80099ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f0:	059a      	lsls	r2, r3, #22
 80099f2:	d4ef      	bmi.n	80099d4 <__smakebuf_r+0x18>
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	f043 0302 	orr.w	r3, r3, #2
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7e3      	b.n	80099c8 <__smakebuf_r+0xc>
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <__smakebuf_r+0x7c>)
 8009a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	6020      	str	r0, [r4, #0]
 8009a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	6163      	str	r3, [r4, #20]
 8009a12:	9b01      	ldr	r3, [sp, #4]
 8009a14:	6120      	str	r0, [r4, #16]
 8009a16:	b15b      	cbz	r3, 8009a30 <__smakebuf_r+0x74>
 8009a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f000 ff67 	bl	800a8f0 <_isatty_r>
 8009a22:	b128      	cbz	r0, 8009a30 <__smakebuf_r+0x74>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	89a0      	ldrh	r0, [r4, #12]
 8009a32:	4305      	orrs	r5, r0
 8009a34:	81a5      	strh	r5, [r4, #12]
 8009a36:	e7cd      	b.n	80099d4 <__smakebuf_r+0x18>
 8009a38:	08006ee5 	.word	0x08006ee5

08009a3c <__malloc_lock>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__malloc_lock+0x8>)
 8009a3e:	f7fd bb49 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 8009a42:	bf00      	nop
 8009a44:	20004e91 	.word	0x20004e91

08009a48 <__malloc_unlock>:
 8009a48:	4801      	ldr	r0, [pc, #4]	; (8009a50 <__malloc_unlock+0x8>)
 8009a4a:	f7fd bb45 	b.w	80070d8 <__retarget_lock_release_recursive>
 8009a4e:	bf00      	nop
 8009a50:	20004e91 	.word	0x20004e91

08009a54 <_Balloc>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	b976      	cbnz	r6, 8009a7c <_Balloc+0x28>
 8009a5e:	2010      	movs	r0, #16
 8009a60:	f7fd fb3c 	bl	80070dc <malloc>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6260      	str	r0, [r4, #36]	; 0x24
 8009a68:	b920      	cbnz	r0, 8009a74 <_Balloc+0x20>
 8009a6a:	4b18      	ldr	r3, [pc, #96]	; (8009acc <_Balloc+0x78>)
 8009a6c:	4818      	ldr	r0, [pc, #96]	; (8009ad0 <_Balloc+0x7c>)
 8009a6e:	2166      	movs	r1, #102	; 0x66
 8009a70:	f7fe ff8e 	bl	8008990 <__assert_func>
 8009a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a78:	6006      	str	r6, [r0, #0]
 8009a7a:	60c6      	str	r6, [r0, #12]
 8009a7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a7e:	68f3      	ldr	r3, [r6, #12]
 8009a80:	b183      	cbz	r3, 8009aa4 <_Balloc+0x50>
 8009a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a8a:	b9b8      	cbnz	r0, 8009abc <_Balloc+0x68>
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a92:	1d72      	adds	r2, r6, #5
 8009a94:	0092      	lsls	r2, r2, #2
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 fb60 	bl	800a15c <_calloc_r>
 8009a9c:	b160      	cbz	r0, 8009ab8 <_Balloc+0x64>
 8009a9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aa2:	e00e      	b.n	8009ac2 <_Balloc+0x6e>
 8009aa4:	2221      	movs	r2, #33	; 0x21
 8009aa6:	2104      	movs	r1, #4
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fb57 	bl	800a15c <_calloc_r>
 8009aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab0:	60f0      	str	r0, [r6, #12]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e4      	bne.n	8009a82 <_Balloc+0x2e>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	6802      	ldr	r2, [r0, #0]
 8009abe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ac8:	e7f7      	b.n	8009aba <_Balloc+0x66>
 8009aca:	bf00      	nop
 8009acc:	0800b62b 	.word	0x0800b62b
 8009ad0:	0800b6ae 	.word	0x0800b6ae

08009ad4 <_Bfree>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ad8:	4605      	mov	r5, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	b976      	cbnz	r6, 8009afc <_Bfree+0x28>
 8009ade:	2010      	movs	r0, #16
 8009ae0:	f7fd fafc 	bl	80070dc <malloc>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ae8:	b920      	cbnz	r0, 8009af4 <_Bfree+0x20>
 8009aea:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <_Bfree+0x3c>)
 8009aec:	4809      	ldr	r0, [pc, #36]	; (8009b14 <_Bfree+0x40>)
 8009aee:	218a      	movs	r1, #138	; 0x8a
 8009af0:	f7fe ff4e 	bl	8008990 <__assert_func>
 8009af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af8:	6006      	str	r6, [r0, #0]
 8009afa:	60c6      	str	r6, [r0, #12]
 8009afc:	b13c      	cbz	r4, 8009b0e <_Bfree+0x3a>
 8009afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b00:	6862      	ldr	r2, [r4, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b08:	6021      	str	r1, [r4, #0]
 8009b0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	0800b62b 	.word	0x0800b62b
 8009b14:	0800b6ae 	.word	0x0800b6ae

08009b18 <__multadd>:
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	690d      	ldr	r5, [r1, #16]
 8009b1e:	4607      	mov	r7, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	461e      	mov	r6, r3
 8009b24:	f101 0c14 	add.w	ip, r1, #20
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b2e:	b299      	uxth	r1, r3
 8009b30:	fb02 6101 	mla	r1, r2, r1, r6
 8009b34:	0c1e      	lsrs	r6, r3, #16
 8009b36:	0c0b      	lsrs	r3, r1, #16
 8009b38:	fb02 3306 	mla	r3, r2, r6, r3
 8009b3c:	b289      	uxth	r1, r1
 8009b3e:	3001      	adds	r0, #1
 8009b40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b44:	4285      	cmp	r5, r0
 8009b46:	f84c 1b04 	str.w	r1, [ip], #4
 8009b4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b4e:	dcec      	bgt.n	8009b2a <__multadd+0x12>
 8009b50:	b30e      	cbz	r6, 8009b96 <__multadd+0x7e>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dc19      	bgt.n	8009b8c <__multadd+0x74>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7ff ff79 	bl	8009a54 <_Balloc>
 8009b62:	4680      	mov	r8, r0
 8009b64:	b928      	cbnz	r0, 8009b72 <__multadd+0x5a>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <__multadd+0x84>)
 8009b6a:	480d      	ldr	r0, [pc, #52]	; (8009ba0 <__multadd+0x88>)
 8009b6c:	21b5      	movs	r1, #181	; 0xb5
 8009b6e:	f7fe ff0f 	bl	8008990 <__assert_func>
 8009b72:	6922      	ldr	r2, [r4, #16]
 8009b74:	3202      	adds	r2, #2
 8009b76:	f104 010c 	add.w	r1, r4, #12
 8009b7a:	0092      	lsls	r2, r2, #2
 8009b7c:	300c      	adds	r0, #12
 8009b7e:	f7fd fabd 	bl	80070fc <memcpy>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff ffa5 	bl	8009ad4 <_Bfree>
 8009b8a:	4644      	mov	r4, r8
 8009b8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b90:	3501      	adds	r5, #1
 8009b92:	615e      	str	r6, [r3, #20]
 8009b94:	6125      	str	r5, [r4, #16]
 8009b96:	4620      	mov	r0, r4
 8009b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9c:	0800b69d 	.word	0x0800b69d
 8009ba0:	0800b6ae 	.word	0x0800b6ae

08009ba4 <__hi0bits>:
 8009ba4:	0c03      	lsrs	r3, r0, #16
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	b9d3      	cbnz	r3, 8009be0 <__hi0bits+0x3c>
 8009baa:	0400      	lsls	r0, r0, #16
 8009bac:	2310      	movs	r3, #16
 8009bae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bb2:	bf04      	itt	eq
 8009bb4:	0200      	lsleq	r0, r0, #8
 8009bb6:	3308      	addeq	r3, #8
 8009bb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bbc:	bf04      	itt	eq
 8009bbe:	0100      	lsleq	r0, r0, #4
 8009bc0:	3304      	addeq	r3, #4
 8009bc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009bc6:	bf04      	itt	eq
 8009bc8:	0080      	lsleq	r0, r0, #2
 8009bca:	3302      	addeq	r3, #2
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	db05      	blt.n	8009bdc <__hi0bits+0x38>
 8009bd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bd4:	f103 0301 	add.w	r3, r3, #1
 8009bd8:	bf08      	it	eq
 8009bda:	2320      	moveq	r3, #32
 8009bdc:	4618      	mov	r0, r3
 8009bde:	4770      	bx	lr
 8009be0:	2300      	movs	r3, #0
 8009be2:	e7e4      	b.n	8009bae <__hi0bits+0xa>

08009be4 <__lo0bits>:
 8009be4:	6803      	ldr	r3, [r0, #0]
 8009be6:	f013 0207 	ands.w	r2, r3, #7
 8009bea:	4601      	mov	r1, r0
 8009bec:	d00b      	beq.n	8009c06 <__lo0bits+0x22>
 8009bee:	07da      	lsls	r2, r3, #31
 8009bf0:	d423      	bmi.n	8009c3a <__lo0bits+0x56>
 8009bf2:	0798      	lsls	r0, r3, #30
 8009bf4:	bf49      	itett	mi
 8009bf6:	085b      	lsrmi	r3, r3, #1
 8009bf8:	089b      	lsrpl	r3, r3, #2
 8009bfa:	2001      	movmi	r0, #1
 8009bfc:	600b      	strmi	r3, [r1, #0]
 8009bfe:	bf5c      	itt	pl
 8009c00:	600b      	strpl	r3, [r1, #0]
 8009c02:	2002      	movpl	r0, #2
 8009c04:	4770      	bx	lr
 8009c06:	b298      	uxth	r0, r3
 8009c08:	b9a8      	cbnz	r0, 8009c36 <__lo0bits+0x52>
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	2010      	movs	r0, #16
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	b90a      	cbnz	r2, 8009c16 <__lo0bits+0x32>
 8009c12:	3008      	adds	r0, #8
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	071a      	lsls	r2, r3, #28
 8009c18:	bf04      	itt	eq
 8009c1a:	091b      	lsreq	r3, r3, #4
 8009c1c:	3004      	addeq	r0, #4
 8009c1e:	079a      	lsls	r2, r3, #30
 8009c20:	bf04      	itt	eq
 8009c22:	089b      	lsreq	r3, r3, #2
 8009c24:	3002      	addeq	r0, #2
 8009c26:	07da      	lsls	r2, r3, #31
 8009c28:	d403      	bmi.n	8009c32 <__lo0bits+0x4e>
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	f100 0001 	add.w	r0, r0, #1
 8009c30:	d005      	beq.n	8009c3e <__lo0bits+0x5a>
 8009c32:	600b      	str	r3, [r1, #0]
 8009c34:	4770      	bx	lr
 8009c36:	4610      	mov	r0, r2
 8009c38:	e7e9      	b.n	8009c0e <__lo0bits+0x2a>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	4770      	bx	lr
 8009c3e:	2020      	movs	r0, #32
 8009c40:	4770      	bx	lr
	...

08009c44 <__i2b>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	460c      	mov	r4, r1
 8009c48:	2101      	movs	r1, #1
 8009c4a:	f7ff ff03 	bl	8009a54 <_Balloc>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	b928      	cbnz	r0, 8009c5e <__i2b+0x1a>
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <__i2b+0x24>)
 8009c54:	4805      	ldr	r0, [pc, #20]	; (8009c6c <__i2b+0x28>)
 8009c56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c5a:	f7fe fe99 	bl	8008990 <__assert_func>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	6144      	str	r4, [r0, #20]
 8009c62:	6103      	str	r3, [r0, #16]
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	bf00      	nop
 8009c68:	0800b69d 	.word	0x0800b69d
 8009c6c:	0800b6ae 	.word	0x0800b6ae

08009c70 <__multiply>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	4691      	mov	r9, r2
 8009c76:	690a      	ldr	r2, [r1, #16]
 8009c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	bfb8      	it	lt
 8009c80:	460b      	movlt	r3, r1
 8009c82:	460c      	mov	r4, r1
 8009c84:	bfbc      	itt	lt
 8009c86:	464c      	movlt	r4, r9
 8009c88:	4699      	movlt	r9, r3
 8009c8a:	6927      	ldr	r7, [r4, #16]
 8009c8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c90:	68a3      	ldr	r3, [r4, #8]
 8009c92:	6861      	ldr	r1, [r4, #4]
 8009c94:	eb07 060a 	add.w	r6, r7, sl
 8009c98:	42b3      	cmp	r3, r6
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	bfb8      	it	lt
 8009c9e:	3101      	addlt	r1, #1
 8009ca0:	f7ff fed8 	bl	8009a54 <_Balloc>
 8009ca4:	b930      	cbnz	r0, 8009cb4 <__multiply+0x44>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	4b44      	ldr	r3, [pc, #272]	; (8009dbc <__multiply+0x14c>)
 8009caa:	4845      	ldr	r0, [pc, #276]	; (8009dc0 <__multiply+0x150>)
 8009cac:	f240 115d 	movw	r1, #349	; 0x15d
 8009cb0:	f7fe fe6e 	bl	8008990 <__assert_func>
 8009cb4:	f100 0514 	add.w	r5, r0, #20
 8009cb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4543      	cmp	r3, r8
 8009cc2:	d321      	bcc.n	8009d08 <__multiply+0x98>
 8009cc4:	f104 0314 	add.w	r3, r4, #20
 8009cc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ccc:	f109 0314 	add.w	r3, r9, #20
 8009cd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	1b3a      	subs	r2, r7, r4
 8009cd8:	3a15      	subs	r2, #21
 8009cda:	f022 0203 	bic.w	r2, r2, #3
 8009cde:	3204      	adds	r2, #4
 8009ce0:	f104 0115 	add.w	r1, r4, #21
 8009ce4:	428f      	cmp	r7, r1
 8009ce6:	bf38      	it	cc
 8009ce8:	2204      	movcc	r2, #4
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	9a02      	ldr	r2, [sp, #8]
 8009cee:	9303      	str	r3, [sp, #12]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d80c      	bhi.n	8009d0e <__multiply+0x9e>
 8009cf4:	2e00      	cmp	r6, #0
 8009cf6:	dd03      	ble.n	8009d00 <__multiply+0x90>
 8009cf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d05a      	beq.n	8009db6 <__multiply+0x146>
 8009d00:	6106      	str	r6, [r0, #16]
 8009d02:	b005      	add	sp, #20
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	f843 2b04 	str.w	r2, [r3], #4
 8009d0c:	e7d8      	b.n	8009cc0 <__multiply+0x50>
 8009d0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d12:	f1ba 0f00 	cmp.w	sl, #0
 8009d16:	d024      	beq.n	8009d62 <__multiply+0xf2>
 8009d18:	f104 0e14 	add.w	lr, r4, #20
 8009d1c:	46a9      	mov	r9, r5
 8009d1e:	f04f 0c00 	mov.w	ip, #0
 8009d22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d26:	f8d9 1000 	ldr.w	r1, [r9]
 8009d2a:	fa1f fb82 	uxth.w	fp, r2
 8009d2e:	b289      	uxth	r1, r1
 8009d30:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d38:	f8d9 2000 	ldr.w	r2, [r9]
 8009d3c:	4461      	add	r1, ip
 8009d3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d42:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d4a:	b289      	uxth	r1, r1
 8009d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d50:	4577      	cmp	r7, lr
 8009d52:	f849 1b04 	str.w	r1, [r9], #4
 8009d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d5a:	d8e2      	bhi.n	8009d22 <__multiply+0xb2>
 8009d5c:	9a01      	ldr	r2, [sp, #4]
 8009d5e:	f845 c002 	str.w	ip, [r5, r2]
 8009d62:	9a03      	ldr	r2, [sp, #12]
 8009d64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	d020      	beq.n	8009db2 <__multiply+0x142>
 8009d70:	6829      	ldr	r1, [r5, #0]
 8009d72:	f104 0c14 	add.w	ip, r4, #20
 8009d76:	46ae      	mov	lr, r5
 8009d78:	f04f 0a00 	mov.w	sl, #0
 8009d7c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d84:	fb09 220b 	mla	r2, r9, fp, r2
 8009d88:	4492      	add	sl, r2
 8009d8a:	b289      	uxth	r1, r1
 8009d8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d90:	f84e 1b04 	str.w	r1, [lr], #4
 8009d94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d98:	f8be 1000 	ldrh.w	r1, [lr]
 8009d9c:	0c12      	lsrs	r2, r2, #16
 8009d9e:	fb09 1102 	mla	r1, r9, r2, r1
 8009da2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009da6:	4567      	cmp	r7, ip
 8009da8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009dac:	d8e6      	bhi.n	8009d7c <__multiply+0x10c>
 8009dae:	9a01      	ldr	r2, [sp, #4]
 8009db0:	50a9      	str	r1, [r5, r2]
 8009db2:	3504      	adds	r5, #4
 8009db4:	e79a      	b.n	8009cec <__multiply+0x7c>
 8009db6:	3e01      	subs	r6, #1
 8009db8:	e79c      	b.n	8009cf4 <__multiply+0x84>
 8009dba:	bf00      	nop
 8009dbc:	0800b69d 	.word	0x0800b69d
 8009dc0:	0800b6ae 	.word	0x0800b6ae

08009dc4 <__pow5mult>:
 8009dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc8:	4615      	mov	r5, r2
 8009dca:	f012 0203 	ands.w	r2, r2, #3
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	d007      	beq.n	8009de4 <__pow5mult+0x20>
 8009dd4:	4c25      	ldr	r4, [pc, #148]	; (8009e6c <__pow5mult+0xa8>)
 8009dd6:	3a01      	subs	r2, #1
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dde:	f7ff fe9b 	bl	8009b18 <__multadd>
 8009de2:	4607      	mov	r7, r0
 8009de4:	10ad      	asrs	r5, r5, #2
 8009de6:	d03d      	beq.n	8009e64 <__pow5mult+0xa0>
 8009de8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dea:	b97c      	cbnz	r4, 8009e0c <__pow5mult+0x48>
 8009dec:	2010      	movs	r0, #16
 8009dee:	f7fd f975 	bl	80070dc <malloc>
 8009df2:	4602      	mov	r2, r0
 8009df4:	6270      	str	r0, [r6, #36]	; 0x24
 8009df6:	b928      	cbnz	r0, 8009e04 <__pow5mult+0x40>
 8009df8:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <__pow5mult+0xac>)
 8009dfa:	481e      	ldr	r0, [pc, #120]	; (8009e74 <__pow5mult+0xb0>)
 8009dfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e00:	f7fe fdc6 	bl	8008990 <__assert_func>
 8009e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e08:	6004      	str	r4, [r0, #0]
 8009e0a:	60c4      	str	r4, [r0, #12]
 8009e0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e14:	b94c      	cbnz	r4, 8009e2a <__pow5mult+0x66>
 8009e16:	f240 2171 	movw	r1, #625	; 0x271
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7ff ff12 	bl	8009c44 <__i2b>
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e26:	4604      	mov	r4, r0
 8009e28:	6003      	str	r3, [r0, #0]
 8009e2a:	f04f 0900 	mov.w	r9, #0
 8009e2e:	07eb      	lsls	r3, r5, #31
 8009e30:	d50a      	bpl.n	8009e48 <__pow5mult+0x84>
 8009e32:	4639      	mov	r1, r7
 8009e34:	4622      	mov	r2, r4
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff ff1a 	bl	8009c70 <__multiply>
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7ff fe47 	bl	8009ad4 <_Bfree>
 8009e46:	4647      	mov	r7, r8
 8009e48:	106d      	asrs	r5, r5, #1
 8009e4a:	d00b      	beq.n	8009e64 <__pow5mult+0xa0>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	b938      	cbnz	r0, 8009e60 <__pow5mult+0x9c>
 8009e50:	4622      	mov	r2, r4
 8009e52:	4621      	mov	r1, r4
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff ff0b 	bl	8009c70 <__multiply>
 8009e5a:	6020      	str	r0, [r4, #0]
 8009e5c:	f8c0 9000 	str.w	r9, [r0]
 8009e60:	4604      	mov	r4, r0
 8009e62:	e7e4      	b.n	8009e2e <__pow5mult+0x6a>
 8009e64:	4638      	mov	r0, r7
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800b800 	.word	0x0800b800
 8009e70:	0800b62b 	.word	0x0800b62b
 8009e74:	0800b6ae 	.word	0x0800b6ae

08009e78 <__lshift>:
 8009e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	6849      	ldr	r1, [r1, #4]
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	4607      	mov	r7, r0
 8009e8a:	4691      	mov	r9, r2
 8009e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e90:	f108 0601 	add.w	r6, r8, #1
 8009e94:	42b3      	cmp	r3, r6
 8009e96:	db0b      	blt.n	8009eb0 <__lshift+0x38>
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7ff fddb 	bl	8009a54 <_Balloc>
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	b948      	cbnz	r0, 8009eb6 <__lshift+0x3e>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <__lshift+0xd8>)
 8009ea6:	482b      	ldr	r0, [pc, #172]	; (8009f54 <__lshift+0xdc>)
 8009ea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009eac:	f7fe fd70 	bl	8008990 <__assert_func>
 8009eb0:	3101      	adds	r1, #1
 8009eb2:	005b      	lsls	r3, r3, #1
 8009eb4:	e7ee      	b.n	8009e94 <__lshift+0x1c>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f100 0114 	add.w	r1, r0, #20
 8009ebc:	f100 0210 	add.w	r2, r0, #16
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	4553      	cmp	r3, sl
 8009ec4:	db37      	blt.n	8009f36 <__lshift+0xbe>
 8009ec6:	6920      	ldr	r0, [r4, #16]
 8009ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ecc:	f104 0314 	add.w	r3, r4, #20
 8009ed0:	f019 091f 	ands.w	r9, r9, #31
 8009ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009edc:	d02f      	beq.n	8009f3e <__lshift+0xc6>
 8009ede:	f1c9 0e20 	rsb	lr, r9, #32
 8009ee2:	468a      	mov	sl, r1
 8009ee4:	f04f 0c00 	mov.w	ip, #0
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	fa02 f209 	lsl.w	r2, r2, r9
 8009eee:	ea42 020c 	orr.w	r2, r2, ip
 8009ef2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efa:	4298      	cmp	r0, r3
 8009efc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f00:	d8f2      	bhi.n	8009ee8 <__lshift+0x70>
 8009f02:	1b03      	subs	r3, r0, r4
 8009f04:	3b15      	subs	r3, #21
 8009f06:	f023 0303 	bic.w	r3, r3, #3
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	f104 0215 	add.w	r2, r4, #21
 8009f10:	4290      	cmp	r0, r2
 8009f12:	bf38      	it	cc
 8009f14:	2304      	movcc	r3, #4
 8009f16:	f841 c003 	str.w	ip, [r1, r3]
 8009f1a:	f1bc 0f00 	cmp.w	ip, #0
 8009f1e:	d001      	beq.n	8009f24 <__lshift+0xac>
 8009f20:	f108 0602 	add.w	r6, r8, #2
 8009f24:	3e01      	subs	r6, #1
 8009f26:	4638      	mov	r0, r7
 8009f28:	612e      	str	r6, [r5, #16]
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	f7ff fdd2 	bl	8009ad4 <_Bfree>
 8009f30:	4628      	mov	r0, r5
 8009f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	e7c1      	b.n	8009ec2 <__lshift+0x4a>
 8009f3e:	3904      	subs	r1, #4
 8009f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f48:	4298      	cmp	r0, r3
 8009f4a:	d8f9      	bhi.n	8009f40 <__lshift+0xc8>
 8009f4c:	e7ea      	b.n	8009f24 <__lshift+0xac>
 8009f4e:	bf00      	nop
 8009f50:	0800b69d 	.word	0x0800b69d
 8009f54:	0800b6ae 	.word	0x0800b6ae

08009f58 <__mcmp>:
 8009f58:	b530      	push	{r4, r5, lr}
 8009f5a:	6902      	ldr	r2, [r0, #16]
 8009f5c:	690c      	ldr	r4, [r1, #16]
 8009f5e:	1b12      	subs	r2, r2, r4
 8009f60:	d10e      	bne.n	8009f80 <__mcmp+0x28>
 8009f62:	f100 0314 	add.w	r3, r0, #20
 8009f66:	3114      	adds	r1, #20
 8009f68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f78:	42a5      	cmp	r5, r4
 8009f7a:	d003      	beq.n	8009f84 <__mcmp+0x2c>
 8009f7c:	d305      	bcc.n	8009f8a <__mcmp+0x32>
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4610      	mov	r0, r2
 8009f82:	bd30      	pop	{r4, r5, pc}
 8009f84:	4283      	cmp	r3, r0
 8009f86:	d3f3      	bcc.n	8009f70 <__mcmp+0x18>
 8009f88:	e7fa      	b.n	8009f80 <__mcmp+0x28>
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f8e:	e7f7      	b.n	8009f80 <__mcmp+0x28>

08009f90 <__mdiff>:
 8009f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	4606      	mov	r6, r0
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4690      	mov	r8, r2
 8009f9e:	f7ff ffdb 	bl	8009f58 <__mcmp>
 8009fa2:	1e05      	subs	r5, r0, #0
 8009fa4:	d110      	bne.n	8009fc8 <__mdiff+0x38>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fd53 	bl	8009a54 <_Balloc>
 8009fae:	b930      	cbnz	r0, 8009fbe <__mdiff+0x2e>
 8009fb0:	4b3a      	ldr	r3, [pc, #232]	; (800a09c <__mdiff+0x10c>)
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	f240 2132 	movw	r1, #562	; 0x232
 8009fb8:	4839      	ldr	r0, [pc, #228]	; (800a0a0 <__mdiff+0x110>)
 8009fba:	f7fe fce9 	bl	8008990 <__assert_func>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc8:	bfa4      	itt	ge
 8009fca:	4643      	movge	r3, r8
 8009fcc:	46a0      	movge	r8, r4
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fd4:	bfa6      	itte	ge
 8009fd6:	461c      	movge	r4, r3
 8009fd8:	2500      	movge	r5, #0
 8009fda:	2501      	movlt	r5, #1
 8009fdc:	f7ff fd3a 	bl	8009a54 <_Balloc>
 8009fe0:	b920      	cbnz	r0, 8009fec <__mdiff+0x5c>
 8009fe2:	4b2e      	ldr	r3, [pc, #184]	; (800a09c <__mdiff+0x10c>)
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fea:	e7e5      	b.n	8009fb8 <__mdiff+0x28>
 8009fec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ff0:	6926      	ldr	r6, [r4, #16]
 8009ff2:	60c5      	str	r5, [r0, #12]
 8009ff4:	f104 0914 	add.w	r9, r4, #20
 8009ff8:	f108 0514 	add.w	r5, r8, #20
 8009ffc:	f100 0e14 	add.w	lr, r0, #20
 800a000:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a004:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a008:	f108 0210 	add.w	r2, r8, #16
 800a00c:	46f2      	mov	sl, lr
 800a00e:	2100      	movs	r1, #0
 800a010:	f859 3b04 	ldr.w	r3, [r9], #4
 800a014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a018:	fa1f f883 	uxth.w	r8, r3
 800a01c:	fa11 f18b 	uxtah	r1, r1, fp
 800a020:	0c1b      	lsrs	r3, r3, #16
 800a022:	eba1 0808 	sub.w	r8, r1, r8
 800a026:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a02a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a02e:	fa1f f888 	uxth.w	r8, r8
 800a032:	1419      	asrs	r1, r3, #16
 800a034:	454e      	cmp	r6, r9
 800a036:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a03a:	f84a 3b04 	str.w	r3, [sl], #4
 800a03e:	d8e7      	bhi.n	800a010 <__mdiff+0x80>
 800a040:	1b33      	subs	r3, r6, r4
 800a042:	3b15      	subs	r3, #21
 800a044:	f023 0303 	bic.w	r3, r3, #3
 800a048:	3304      	adds	r3, #4
 800a04a:	3415      	adds	r4, #21
 800a04c:	42a6      	cmp	r6, r4
 800a04e:	bf38      	it	cc
 800a050:	2304      	movcc	r3, #4
 800a052:	441d      	add	r5, r3
 800a054:	4473      	add	r3, lr
 800a056:	469e      	mov	lr, r3
 800a058:	462e      	mov	r6, r5
 800a05a:	4566      	cmp	r6, ip
 800a05c:	d30e      	bcc.n	800a07c <__mdiff+0xec>
 800a05e:	f10c 0203 	add.w	r2, ip, #3
 800a062:	1b52      	subs	r2, r2, r5
 800a064:	f022 0203 	bic.w	r2, r2, #3
 800a068:	3d03      	subs	r5, #3
 800a06a:	45ac      	cmp	ip, r5
 800a06c:	bf38      	it	cc
 800a06e:	2200      	movcc	r2, #0
 800a070:	441a      	add	r2, r3
 800a072:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a076:	b17b      	cbz	r3, 800a098 <__mdiff+0x108>
 800a078:	6107      	str	r7, [r0, #16]
 800a07a:	e7a3      	b.n	8009fc4 <__mdiff+0x34>
 800a07c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a080:	fa11 f288 	uxtah	r2, r1, r8
 800a084:	1414      	asrs	r4, r2, #16
 800a086:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a08a:	b292      	uxth	r2, r2
 800a08c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a090:	f84e 2b04 	str.w	r2, [lr], #4
 800a094:	1421      	asrs	r1, r4, #16
 800a096:	e7e0      	b.n	800a05a <__mdiff+0xca>
 800a098:	3f01      	subs	r7, #1
 800a09a:	e7ea      	b.n	800a072 <__mdiff+0xe2>
 800a09c:	0800b69d 	.word	0x0800b69d
 800a0a0:	0800b6ae 	.word	0x0800b6ae

0800a0a4 <__d2b>:
 800a0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	ec57 6b10 	vmov	r6, r7, d0
 800a0b0:	4690      	mov	r8, r2
 800a0b2:	f7ff fccf 	bl	8009a54 <_Balloc>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	b930      	cbnz	r0, 800a0c8 <__d2b+0x24>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4b25      	ldr	r3, [pc, #148]	; (800a154 <__d2b+0xb0>)
 800a0be:	4826      	ldr	r0, [pc, #152]	; (800a158 <__d2b+0xb4>)
 800a0c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a0c4:	f7fe fc64 	bl	8008990 <__assert_func>
 800a0c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0d0:	bb35      	cbnz	r5, 800a120 <__d2b+0x7c>
 800a0d2:	2e00      	cmp	r6, #0
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	d028      	beq.n	800a12a <__d2b+0x86>
 800a0d8:	4668      	mov	r0, sp
 800a0da:	9600      	str	r6, [sp, #0]
 800a0dc:	f7ff fd82 	bl	8009be4 <__lo0bits>
 800a0e0:	9900      	ldr	r1, [sp, #0]
 800a0e2:	b300      	cbz	r0, 800a126 <__d2b+0x82>
 800a0e4:	9a01      	ldr	r2, [sp, #4]
 800a0e6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	40c2      	lsrs	r2, r0
 800a0f2:	6163      	str	r3, [r4, #20]
 800a0f4:	9201      	str	r2, [sp, #4]
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	61a3      	str	r3, [r4, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2202      	movne	r2, #2
 800a100:	2201      	moveq	r2, #1
 800a102:	6122      	str	r2, [r4, #16]
 800a104:	b1d5      	cbz	r5, 800a13c <__d2b+0x98>
 800a106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a10a:	4405      	add	r5, r0
 800a10c:	f8c9 5000 	str.w	r5, [r9]
 800a110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a114:	f8c8 0000 	str.w	r0, [r8]
 800a118:	4620      	mov	r0, r4
 800a11a:	b003      	add	sp, #12
 800a11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a124:	e7d5      	b.n	800a0d2 <__d2b+0x2e>
 800a126:	6161      	str	r1, [r4, #20]
 800a128:	e7e5      	b.n	800a0f6 <__d2b+0x52>
 800a12a:	a801      	add	r0, sp, #4
 800a12c:	f7ff fd5a 	bl	8009be4 <__lo0bits>
 800a130:	9b01      	ldr	r3, [sp, #4]
 800a132:	6163      	str	r3, [r4, #20]
 800a134:	2201      	movs	r2, #1
 800a136:	6122      	str	r2, [r4, #16]
 800a138:	3020      	adds	r0, #32
 800a13a:	e7e3      	b.n	800a104 <__d2b+0x60>
 800a13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a144:	f8c9 0000 	str.w	r0, [r9]
 800a148:	6918      	ldr	r0, [r3, #16]
 800a14a:	f7ff fd2b 	bl	8009ba4 <__hi0bits>
 800a14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a152:	e7df      	b.n	800a114 <__d2b+0x70>
 800a154:	0800b69d 	.word	0x0800b69d
 800a158:	0800b6ae 	.word	0x0800b6ae

0800a15c <_calloc_r>:
 800a15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a15e:	fba1 2402 	umull	r2, r4, r1, r2
 800a162:	b94c      	cbnz	r4, 800a178 <_calloc_r+0x1c>
 800a164:	4611      	mov	r1, r2
 800a166:	9201      	str	r2, [sp, #4]
 800a168:	f7fd fabc 	bl	80076e4 <_malloc_r>
 800a16c:	9a01      	ldr	r2, [sp, #4]
 800a16e:	4605      	mov	r5, r0
 800a170:	b930      	cbnz	r0, 800a180 <_calloc_r+0x24>
 800a172:	4628      	mov	r0, r5
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	220c      	movs	r2, #12
 800a17a:	6002      	str	r2, [r0, #0]
 800a17c:	2500      	movs	r5, #0
 800a17e:	e7f8      	b.n	800a172 <_calloc_r+0x16>
 800a180:	4621      	mov	r1, r4
 800a182:	f7fc ffc9 	bl	8007118 <memset>
 800a186:	e7f4      	b.n	800a172 <_calloc_r+0x16>

0800a188 <__ssputs_r>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	688e      	ldr	r6, [r1, #8]
 800a18e:	429e      	cmp	r6, r3
 800a190:	4682      	mov	sl, r0
 800a192:	460c      	mov	r4, r1
 800a194:	4690      	mov	r8, r2
 800a196:	461f      	mov	r7, r3
 800a198:	d838      	bhi.n	800a20c <__ssputs_r+0x84>
 800a19a:	898a      	ldrh	r2, [r1, #12]
 800a19c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1a0:	d032      	beq.n	800a208 <__ssputs_r+0x80>
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	6909      	ldr	r1, [r1, #16]
 800a1a6:	eba5 0901 	sub.w	r9, r5, r1
 800a1aa:	6965      	ldr	r5, [r4, #20]
 800a1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	444b      	add	r3, r9
 800a1b8:	106d      	asrs	r5, r5, #1
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	bf38      	it	cc
 800a1be:	461d      	movcc	r5, r3
 800a1c0:	0553      	lsls	r3, r2, #21
 800a1c2:	d531      	bpl.n	800a228 <__ssputs_r+0xa0>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7fd fa8d 	bl	80076e4 <_malloc_r>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	b950      	cbnz	r0, 800a1e4 <__ssputs_r+0x5c>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	f8ca 3000 	str.w	r3, [sl]
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e4:	6921      	ldr	r1, [r4, #16]
 800a1e6:	464a      	mov	r2, r9
 800a1e8:	f7fc ff88 	bl	80070fc <memcpy>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	6126      	str	r6, [r4, #16]
 800a1fa:	6165      	str	r5, [r4, #20]
 800a1fc:	444e      	add	r6, r9
 800a1fe:	eba5 0509 	sub.w	r5, r5, r9
 800a202:	6026      	str	r6, [r4, #0]
 800a204:	60a5      	str	r5, [r4, #8]
 800a206:	463e      	mov	r6, r7
 800a208:	42be      	cmp	r6, r7
 800a20a:	d900      	bls.n	800a20e <__ssputs_r+0x86>
 800a20c:	463e      	mov	r6, r7
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	4632      	mov	r2, r6
 800a212:	4641      	mov	r1, r8
 800a214:	f000 fb8e 	bl	800a934 <memmove>
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	1b9b      	subs	r3, r3, r6
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	4433      	add	r3, r6
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	2000      	movs	r0, #0
 800a226:	e7db      	b.n	800a1e0 <__ssputs_r+0x58>
 800a228:	462a      	mov	r2, r5
 800a22a:	f000 fb9d 	bl	800a968 <_realloc_r>
 800a22e:	4606      	mov	r6, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	d1e1      	bne.n	800a1f8 <__ssputs_r+0x70>
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	4650      	mov	r0, sl
 800a238:	f7fd f9e8 	bl	800760c <_free_r>
 800a23c:	e7c7      	b.n	800a1ce <__ssputs_r+0x46>
	...

0800a240 <_svfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	4698      	mov	r8, r3
 800a246:	898b      	ldrh	r3, [r1, #12]
 800a248:	061b      	lsls	r3, r3, #24
 800a24a:	b09d      	sub	sp, #116	; 0x74
 800a24c:	4607      	mov	r7, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	4614      	mov	r4, r2
 800a252:	d50e      	bpl.n	800a272 <_svfiprintf_r+0x32>
 800a254:	690b      	ldr	r3, [r1, #16]
 800a256:	b963      	cbnz	r3, 800a272 <_svfiprintf_r+0x32>
 800a258:	2140      	movs	r1, #64	; 0x40
 800a25a:	f7fd fa43 	bl	80076e4 <_malloc_r>
 800a25e:	6028      	str	r0, [r5, #0]
 800a260:	6128      	str	r0, [r5, #16]
 800a262:	b920      	cbnz	r0, 800a26e <_svfiprintf_r+0x2e>
 800a264:	230c      	movs	r3, #12
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26c:	e0d1      	b.n	800a412 <_svfiprintf_r+0x1d2>
 800a26e:	2340      	movs	r3, #64	; 0x40
 800a270:	616b      	str	r3, [r5, #20]
 800a272:	2300      	movs	r3, #0
 800a274:	9309      	str	r3, [sp, #36]	; 0x24
 800a276:	2320      	movs	r3, #32
 800a278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a280:	2330      	movs	r3, #48	; 0x30
 800a282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a42c <_svfiprintf_r+0x1ec>
 800a286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a28a:	f04f 0901 	mov.w	r9, #1
 800a28e:	4623      	mov	r3, r4
 800a290:	469a      	mov	sl, r3
 800a292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a296:	b10a      	cbz	r2, 800a29c <_svfiprintf_r+0x5c>
 800a298:	2a25      	cmp	r2, #37	; 0x25
 800a29a:	d1f9      	bne.n	800a290 <_svfiprintf_r+0x50>
 800a29c:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a0:	d00b      	beq.n	800a2ba <_svfiprintf_r+0x7a>
 800a2a2:	465b      	mov	r3, fp
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ff6d 	bl	800a188 <__ssputs_r>
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f000 80aa 	beq.w	800a408 <_svfiprintf_r+0x1c8>
 800a2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b6:	445a      	add	r2, fp
 800a2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 80a2 	beq.w	800a408 <_svfiprintf_r+0x1c8>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ce:	f10a 0a01 	add.w	sl, sl, #1
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	9307      	str	r3, [sp, #28]
 800a2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2da:	931a      	str	r3, [sp, #104]	; 0x68
 800a2dc:	4654      	mov	r4, sl
 800a2de:	2205      	movs	r2, #5
 800a2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e4:	4851      	ldr	r0, [pc, #324]	; (800a42c <_svfiprintf_r+0x1ec>)
 800a2e6:	f7f5 ff7b 	bl	80001e0 <memchr>
 800a2ea:	9a04      	ldr	r2, [sp, #16]
 800a2ec:	b9d8      	cbnz	r0, 800a326 <_svfiprintf_r+0xe6>
 800a2ee:	06d0      	lsls	r0, r2, #27
 800a2f0:	bf44      	itt	mi
 800a2f2:	2320      	movmi	r3, #32
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f8:	0711      	lsls	r1, r2, #28
 800a2fa:	bf44      	itt	mi
 800a2fc:	232b      	movmi	r3, #43	; 0x2b
 800a2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a302:	f89a 3000 	ldrb.w	r3, [sl]
 800a306:	2b2a      	cmp	r3, #42	; 0x2a
 800a308:	d015      	beq.n	800a336 <_svfiprintf_r+0xf6>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	4654      	mov	r4, sl
 800a30e:	2000      	movs	r0, #0
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4621      	mov	r1, r4
 800a316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a31a:	3b30      	subs	r3, #48	; 0x30
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d94e      	bls.n	800a3be <_svfiprintf_r+0x17e>
 800a320:	b1b0      	cbz	r0, 800a350 <_svfiprintf_r+0x110>
 800a322:	9207      	str	r2, [sp, #28]
 800a324:	e014      	b.n	800a350 <_svfiprintf_r+0x110>
 800a326:	eba0 0308 	sub.w	r3, r0, r8
 800a32a:	fa09 f303 	lsl.w	r3, r9, r3
 800a32e:	4313      	orrs	r3, r2
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	46a2      	mov	sl, r4
 800a334:	e7d2      	b.n	800a2dc <_svfiprintf_r+0x9c>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d19      	adds	r1, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9103      	str	r1, [sp, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbb      	ittet	lt
 800a342:	425b      	neglt	r3, r3
 800a344:	f042 0202 	orrlt.w	r2, r2, #2
 800a348:	9307      	strge	r3, [sp, #28]
 800a34a:	9307      	strlt	r3, [sp, #28]
 800a34c:	bfb8      	it	lt
 800a34e:	9204      	strlt	r2, [sp, #16]
 800a350:	7823      	ldrb	r3, [r4, #0]
 800a352:	2b2e      	cmp	r3, #46	; 0x2e
 800a354:	d10c      	bne.n	800a370 <_svfiprintf_r+0x130>
 800a356:	7863      	ldrb	r3, [r4, #1]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d135      	bne.n	800a3c8 <_svfiprintf_r+0x188>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	9203      	str	r2, [sp, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bfb8      	it	lt
 800a368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a36c:	3402      	adds	r4, #2
 800a36e:	9305      	str	r3, [sp, #20]
 800a370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a43c <_svfiprintf_r+0x1fc>
 800a374:	7821      	ldrb	r1, [r4, #0]
 800a376:	2203      	movs	r2, #3
 800a378:	4650      	mov	r0, sl
 800a37a:	f7f5 ff31 	bl	80001e0 <memchr>
 800a37e:	b140      	cbz	r0, 800a392 <_svfiprintf_r+0x152>
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	eba0 000a 	sub.w	r0, r0, sl
 800a386:	fa03 f000 	lsl.w	r0, r3, r0
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	4303      	orrs	r3, r0
 800a38e:	3401      	adds	r4, #1
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4826      	ldr	r0, [pc, #152]	; (800a430 <_svfiprintf_r+0x1f0>)
 800a398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a39c:	2206      	movs	r2, #6
 800a39e:	f7f5 ff1f 	bl	80001e0 <memchr>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d038      	beq.n	800a418 <_svfiprintf_r+0x1d8>
 800a3a6:	4b23      	ldr	r3, [pc, #140]	; (800a434 <_svfiprintf_r+0x1f4>)
 800a3a8:	bb1b      	cbnz	r3, 800a3f2 <_svfiprintf_r+0x1b2>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b8:	4433      	add	r3, r6
 800a3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a3bc:	e767      	b.n	800a28e <_svfiprintf_r+0x4e>
 800a3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	e7a5      	b.n	800a314 <_svfiprintf_r+0xd4>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3da:	3a30      	subs	r2, #48	; 0x30
 800a3dc:	2a09      	cmp	r2, #9
 800a3de:	d903      	bls.n	800a3e8 <_svfiprintf_r+0x1a8>
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0c5      	beq.n	800a370 <_svfiprintf_r+0x130>
 800a3e4:	9105      	str	r1, [sp, #20]
 800a3e6:	e7c3      	b.n	800a370 <_svfiprintf_r+0x130>
 800a3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7f0      	b.n	800a3d4 <_svfiprintf_r+0x194>
 800a3f2:	ab03      	add	r3, sp, #12
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <_svfiprintf_r+0x1f8>)
 800a3fa:	a904      	add	r1, sp, #16
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7fd fa85 	bl	800790c <_printf_float>
 800a402:	1c42      	adds	r2, r0, #1
 800a404:	4606      	mov	r6, r0
 800a406:	d1d6      	bne.n	800a3b6 <_svfiprintf_r+0x176>
 800a408:	89ab      	ldrh	r3, [r5, #12]
 800a40a:	065b      	lsls	r3, r3, #25
 800a40c:	f53f af2c 	bmi.w	800a268 <_svfiprintf_r+0x28>
 800a410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a412:	b01d      	add	sp, #116	; 0x74
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	ab03      	add	r3, sp, #12
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <_svfiprintf_r+0x1f8>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	4638      	mov	r0, r7
 800a424:	f7fd fd16 	bl	8007e54 <_printf_i>
 800a428:	e7eb      	b.n	800a402 <_svfiprintf_r+0x1c2>
 800a42a:	bf00      	nop
 800a42c:	0800b80c 	.word	0x0800b80c
 800a430:	0800b816 	.word	0x0800b816
 800a434:	0800790d 	.word	0x0800790d
 800a438:	0800a189 	.word	0x0800a189
 800a43c:	0800b812 	.word	0x0800b812

0800a440 <__sfputc_r>:
 800a440:	6893      	ldr	r3, [r2, #8]
 800a442:	3b01      	subs	r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	b410      	push	{r4}
 800a448:	6093      	str	r3, [r2, #8]
 800a44a:	da08      	bge.n	800a45e <__sfputc_r+0x1e>
 800a44c:	6994      	ldr	r4, [r2, #24]
 800a44e:	42a3      	cmp	r3, r4
 800a450:	db01      	blt.n	800a456 <__sfputc_r+0x16>
 800a452:	290a      	cmp	r1, #10
 800a454:	d103      	bne.n	800a45e <__sfputc_r+0x1e>
 800a456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a45a:	f7fe b9c7 	b.w	80087ec <__swbuf_r>
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	1c58      	adds	r0, r3, #1
 800a462:	6010      	str	r0, [r2, #0]
 800a464:	7019      	strb	r1, [r3, #0]
 800a466:	4608      	mov	r0, r1
 800a468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <__sfputs_r>:
 800a46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	4614      	mov	r4, r2
 800a476:	18d5      	adds	r5, r2, r3
 800a478:	42ac      	cmp	r4, r5
 800a47a:	d101      	bne.n	800a480 <__sfputs_r+0x12>
 800a47c:	2000      	movs	r0, #0
 800a47e:	e007      	b.n	800a490 <__sfputs_r+0x22>
 800a480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a484:	463a      	mov	r2, r7
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ffda 	bl	800a440 <__sfputc_r>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d1f3      	bne.n	800a478 <__sfputs_r+0xa>
 800a490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a494 <_vfiprintf_r>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	460d      	mov	r5, r1
 800a49a:	b09d      	sub	sp, #116	; 0x74
 800a49c:	4614      	mov	r4, r2
 800a49e:	4698      	mov	r8, r3
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	b118      	cbz	r0, 800a4ac <_vfiprintf_r+0x18>
 800a4a4:	6983      	ldr	r3, [r0, #24]
 800a4a6:	b90b      	cbnz	r3, 800a4ac <_vfiprintf_r+0x18>
 800a4a8:	f7fc fd50 	bl	8006f4c <__sinit>
 800a4ac:	4b89      	ldr	r3, [pc, #548]	; (800a6d4 <_vfiprintf_r+0x240>)
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	d11b      	bne.n	800a4ea <_vfiprintf_r+0x56>
 800a4b2:	6875      	ldr	r5, [r6, #4]
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x32>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x32>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c2:	f7fc fe07 	bl	80070d4 <__retarget_lock_acquire_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	d501      	bpl.n	800a4d0 <_vfiprintf_r+0x3c>
 800a4cc:	692b      	ldr	r3, [r5, #16]
 800a4ce:	b9eb      	cbnz	r3, 800a50c <_vfiprintf_r+0x78>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7fe f9ee 	bl	80088b4 <__swsetup_r>
 800a4d8:	b1c0      	cbz	r0, 800a50c <_vfiprintf_r+0x78>
 800a4da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4dc:	07dc      	lsls	r4, r3, #31
 800a4de:	d50e      	bpl.n	800a4fe <_vfiprintf_r+0x6a>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e4:	b01d      	add	sp, #116	; 0x74
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	; (800a6d8 <_vfiprintf_r+0x244>)
 800a4ec:	429d      	cmp	r5, r3
 800a4ee:	d101      	bne.n	800a4f4 <_vfiprintf_r+0x60>
 800a4f0:	68b5      	ldr	r5, [r6, #8]
 800a4f2:	e7df      	b.n	800a4b4 <_vfiprintf_r+0x20>
 800a4f4:	4b79      	ldr	r3, [pc, #484]	; (800a6dc <_vfiprintf_r+0x248>)
 800a4f6:	429d      	cmp	r5, r3
 800a4f8:	bf08      	it	eq
 800a4fa:	68f5      	ldreq	r5, [r6, #12]
 800a4fc:	e7da      	b.n	800a4b4 <_vfiprintf_r+0x20>
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	0598      	lsls	r0, r3, #22
 800a502:	d4ed      	bmi.n	800a4e0 <_vfiprintf_r+0x4c>
 800a504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a506:	f7fc fde7 	bl	80070d8 <__retarget_lock_release_recursive>
 800a50a:	e7e9      	b.n	800a4e0 <_vfiprintf_r+0x4c>
 800a50c:	2300      	movs	r3, #0
 800a50e:	9309      	str	r3, [sp, #36]	; 0x24
 800a510:	2320      	movs	r3, #32
 800a512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a516:	f8cd 800c 	str.w	r8, [sp, #12]
 800a51a:	2330      	movs	r3, #48	; 0x30
 800a51c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6e0 <_vfiprintf_r+0x24c>
 800a520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a524:	f04f 0901 	mov.w	r9, #1
 800a528:	4623      	mov	r3, r4
 800a52a:	469a      	mov	sl, r3
 800a52c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a530:	b10a      	cbz	r2, 800a536 <_vfiprintf_r+0xa2>
 800a532:	2a25      	cmp	r2, #37	; 0x25
 800a534:	d1f9      	bne.n	800a52a <_vfiprintf_r+0x96>
 800a536:	ebba 0b04 	subs.w	fp, sl, r4
 800a53a:	d00b      	beq.n	800a554 <_vfiprintf_r+0xc0>
 800a53c:	465b      	mov	r3, fp
 800a53e:	4622      	mov	r2, r4
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff ff93 	bl	800a46e <__sfputs_r>
 800a548:	3001      	adds	r0, #1
 800a54a:	f000 80aa 	beq.w	800a6a2 <_vfiprintf_r+0x20e>
 800a54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a550:	445a      	add	r2, fp
 800a552:	9209      	str	r2, [sp, #36]	; 0x24
 800a554:	f89a 3000 	ldrb.w	r3, [sl]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80a2 	beq.w	800a6a2 <_vfiprintf_r+0x20e>
 800a55e:	2300      	movs	r3, #0
 800a560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a568:	f10a 0a01 	add.w	sl, sl, #1
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a574:	931a      	str	r3, [sp, #104]	; 0x68
 800a576:	4654      	mov	r4, sl
 800a578:	2205      	movs	r2, #5
 800a57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57e:	4858      	ldr	r0, [pc, #352]	; (800a6e0 <_vfiprintf_r+0x24c>)
 800a580:	f7f5 fe2e 	bl	80001e0 <memchr>
 800a584:	9a04      	ldr	r2, [sp, #16]
 800a586:	b9d8      	cbnz	r0, 800a5c0 <_vfiprintf_r+0x12c>
 800a588:	06d1      	lsls	r1, r2, #27
 800a58a:	bf44      	itt	mi
 800a58c:	2320      	movmi	r3, #32
 800a58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a592:	0713      	lsls	r3, r2, #28
 800a594:	bf44      	itt	mi
 800a596:	232b      	movmi	r3, #43	; 0x2b
 800a598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a59c:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a2:	d015      	beq.n	800a5d0 <_vfiprintf_r+0x13c>
 800a5a4:	9a07      	ldr	r2, [sp, #28]
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f04f 0c0a 	mov.w	ip, #10
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5b4:	3b30      	subs	r3, #48	; 0x30
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	d94e      	bls.n	800a658 <_vfiprintf_r+0x1c4>
 800a5ba:	b1b0      	cbz	r0, 800a5ea <_vfiprintf_r+0x156>
 800a5bc:	9207      	str	r2, [sp, #28]
 800a5be:	e014      	b.n	800a5ea <_vfiprintf_r+0x156>
 800a5c0:	eba0 0308 	sub.w	r3, r0, r8
 800a5c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	9304      	str	r3, [sp, #16]
 800a5cc:	46a2      	mov	sl, r4
 800a5ce:	e7d2      	b.n	800a576 <_vfiprintf_r+0xe2>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	1d19      	adds	r1, r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	9103      	str	r1, [sp, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfbb      	ittet	lt
 800a5dc:	425b      	neglt	r3, r3
 800a5de:	f042 0202 	orrlt.w	r2, r2, #2
 800a5e2:	9307      	strge	r3, [sp, #28]
 800a5e4:	9307      	strlt	r3, [sp, #28]
 800a5e6:	bfb8      	it	lt
 800a5e8:	9204      	strlt	r2, [sp, #16]
 800a5ea:	7823      	ldrb	r3, [r4, #0]
 800a5ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ee:	d10c      	bne.n	800a60a <_vfiprintf_r+0x176>
 800a5f0:	7863      	ldrb	r3, [r4, #1]
 800a5f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f4:	d135      	bne.n	800a662 <_vfiprintf_r+0x1ce>
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	1d1a      	adds	r2, r3, #4
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	9203      	str	r2, [sp, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bfb8      	it	lt
 800a602:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a606:	3402      	adds	r4, #2
 800a608:	9305      	str	r3, [sp, #20]
 800a60a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6f0 <_vfiprintf_r+0x25c>
 800a60e:	7821      	ldrb	r1, [r4, #0]
 800a610:	2203      	movs	r2, #3
 800a612:	4650      	mov	r0, sl
 800a614:	f7f5 fde4 	bl	80001e0 <memchr>
 800a618:	b140      	cbz	r0, 800a62c <_vfiprintf_r+0x198>
 800a61a:	2340      	movs	r3, #64	; 0x40
 800a61c:	eba0 000a 	sub.w	r0, r0, sl
 800a620:	fa03 f000 	lsl.w	r0, r3, r0
 800a624:	9b04      	ldr	r3, [sp, #16]
 800a626:	4303      	orrs	r3, r0
 800a628:	3401      	adds	r4, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	482c      	ldr	r0, [pc, #176]	; (800a6e4 <_vfiprintf_r+0x250>)
 800a632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a636:	2206      	movs	r2, #6
 800a638:	f7f5 fdd2 	bl	80001e0 <memchr>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d03f      	beq.n	800a6c0 <_vfiprintf_r+0x22c>
 800a640:	4b29      	ldr	r3, [pc, #164]	; (800a6e8 <_vfiprintf_r+0x254>)
 800a642:	bb1b      	cbnz	r3, 800a68c <_vfiprintf_r+0x1f8>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	3307      	adds	r3, #7
 800a648:	f023 0307 	bic.w	r3, r3, #7
 800a64c:	3308      	adds	r3, #8
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	443b      	add	r3, r7
 800a654:	9309      	str	r3, [sp, #36]	; 0x24
 800a656:	e767      	b.n	800a528 <_vfiprintf_r+0x94>
 800a658:	fb0c 3202 	mla	r2, ip, r2, r3
 800a65c:	460c      	mov	r4, r1
 800a65e:	2001      	movs	r0, #1
 800a660:	e7a5      	b.n	800a5ae <_vfiprintf_r+0x11a>
 800a662:	2300      	movs	r3, #0
 800a664:	3401      	adds	r4, #1
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	4619      	mov	r1, r3
 800a66a:	f04f 0c0a 	mov.w	ip, #10
 800a66e:	4620      	mov	r0, r4
 800a670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a674:	3a30      	subs	r2, #48	; 0x30
 800a676:	2a09      	cmp	r2, #9
 800a678:	d903      	bls.n	800a682 <_vfiprintf_r+0x1ee>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0c5      	beq.n	800a60a <_vfiprintf_r+0x176>
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	e7c3      	b.n	800a60a <_vfiprintf_r+0x176>
 800a682:	fb0c 2101 	mla	r1, ip, r1, r2
 800a686:	4604      	mov	r4, r0
 800a688:	2301      	movs	r3, #1
 800a68a:	e7f0      	b.n	800a66e <_vfiprintf_r+0x1da>
 800a68c:	ab03      	add	r3, sp, #12
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	462a      	mov	r2, r5
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <_vfiprintf_r+0x258>)
 800a694:	a904      	add	r1, sp, #16
 800a696:	4630      	mov	r0, r6
 800a698:	f7fd f938 	bl	800790c <_printf_float>
 800a69c:	4607      	mov	r7, r0
 800a69e:	1c78      	adds	r0, r7, #1
 800a6a0:	d1d6      	bne.n	800a650 <_vfiprintf_r+0x1bc>
 800a6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a4:	07d9      	lsls	r1, r3, #31
 800a6a6:	d405      	bmi.n	800a6b4 <_vfiprintf_r+0x220>
 800a6a8:	89ab      	ldrh	r3, [r5, #12]
 800a6aa:	059a      	lsls	r2, r3, #22
 800a6ac:	d402      	bmi.n	800a6b4 <_vfiprintf_r+0x220>
 800a6ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6b0:	f7fc fd12 	bl	80070d8 <__retarget_lock_release_recursive>
 800a6b4:	89ab      	ldrh	r3, [r5, #12]
 800a6b6:	065b      	lsls	r3, r3, #25
 800a6b8:	f53f af12 	bmi.w	800a4e0 <_vfiprintf_r+0x4c>
 800a6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6be:	e711      	b.n	800a4e4 <_vfiprintf_r+0x50>
 800a6c0:	ab03      	add	r3, sp, #12
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <_vfiprintf_r+0x258>)
 800a6c8:	a904      	add	r1, sp, #16
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7fd fbc2 	bl	8007e54 <_printf_i>
 800a6d0:	e7e4      	b.n	800a69c <_vfiprintf_r+0x208>
 800a6d2:	bf00      	nop
 800a6d4:	0800b470 	.word	0x0800b470
 800a6d8:	0800b490 	.word	0x0800b490
 800a6dc:	0800b450 	.word	0x0800b450
 800a6e0:	0800b80c 	.word	0x0800b80c
 800a6e4:	0800b816 	.word	0x0800b816
 800a6e8:	0800790d 	.word	0x0800790d
 800a6ec:	0800a46f 	.word	0x0800a46f
 800a6f0:	0800b812 	.word	0x0800b812

0800a6f4 <_read_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_read_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f7 f920 	bl	8001948 <_read>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_read_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_read_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20004ea0 	.word	0x20004ea0

0800a718 <siscanf>:
 800a718:	b40e      	push	{r1, r2, r3}
 800a71a:	b510      	push	{r4, lr}
 800a71c:	b09f      	sub	sp, #124	; 0x7c
 800a71e:	ac21      	add	r4, sp, #132	; 0x84
 800a720:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a724:	f854 2b04 	ldr.w	r2, [r4], #4
 800a728:	9201      	str	r2, [sp, #4]
 800a72a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a72e:	9004      	str	r0, [sp, #16]
 800a730:	9008      	str	r0, [sp, #32]
 800a732:	f7f5 fd4d 	bl	80001d0 <strlen>
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <siscanf+0x50>)
 800a738:	9005      	str	r0, [sp, #20]
 800a73a:	9009      	str	r0, [sp, #36]	; 0x24
 800a73c:	930d      	str	r3, [sp, #52]	; 0x34
 800a73e:	480b      	ldr	r0, [pc, #44]	; (800a76c <siscanf+0x54>)
 800a740:	9a01      	ldr	r2, [sp, #4]
 800a742:	6800      	ldr	r0, [r0, #0]
 800a744:	9403      	str	r4, [sp, #12]
 800a746:	2300      	movs	r3, #0
 800a748:	9311      	str	r3, [sp, #68]	; 0x44
 800a74a:	9316      	str	r3, [sp, #88]	; 0x58
 800a74c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a750:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a754:	a904      	add	r1, sp, #16
 800a756:	4623      	mov	r3, r4
 800a758:	f000 f990 	bl	800aa7c <__ssvfiscanf_r>
 800a75c:	b01f      	add	sp, #124	; 0x7c
 800a75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a762:	b003      	add	sp, #12
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	0800830b 	.word	0x0800830b
 800a76c:	20000014 	.word	0x20000014

0800a770 <strcpy>:
 800a770:	4603      	mov	r3, r0
 800a772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a776:	f803 2b01 	strb.w	r2, [r3], #1
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	d1f9      	bne.n	800a772 <strcpy+0x2>
 800a77e:	4770      	bx	lr

0800a780 <strncmp>:
 800a780:	b510      	push	{r4, lr}
 800a782:	b17a      	cbz	r2, 800a7a4 <strncmp+0x24>
 800a784:	4603      	mov	r3, r0
 800a786:	3901      	subs	r1, #1
 800a788:	1884      	adds	r4, r0, r2
 800a78a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a78e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a792:	4290      	cmp	r0, r2
 800a794:	d101      	bne.n	800a79a <strncmp+0x1a>
 800a796:	42a3      	cmp	r3, r4
 800a798:	d101      	bne.n	800a79e <strncmp+0x1e>
 800a79a:	1a80      	subs	r0, r0, r2
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d1f3      	bne.n	800a78a <strncmp+0xa>
 800a7a2:	e7fa      	b.n	800a79a <strncmp+0x1a>
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	e7f9      	b.n	800a79c <strncmp+0x1c>

0800a7a8 <_strtoul_l.constprop.0>:
 800a7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	4f36      	ldr	r7, [pc, #216]	; (800a888 <_strtoul_l.constprop.0+0xe0>)
 800a7ae:	4686      	mov	lr, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7b8:	5de6      	ldrb	r6, [r4, r7]
 800a7ba:	f016 0608 	ands.w	r6, r6, #8
 800a7be:	d1f8      	bne.n	800a7b2 <_strtoul_l.constprop.0+0xa>
 800a7c0:	2c2d      	cmp	r4, #45	; 0x2d
 800a7c2:	d12f      	bne.n	800a824 <_strtoul_l.constprop.0+0x7c>
 800a7c4:	782c      	ldrb	r4, [r5, #0]
 800a7c6:	2601      	movs	r6, #1
 800a7c8:	1c85      	adds	r5, r0, #2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d057      	beq.n	800a87e <_strtoul_l.constprop.0+0xd6>
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d109      	bne.n	800a7e6 <_strtoul_l.constprop.0+0x3e>
 800a7d2:	2c30      	cmp	r4, #48	; 0x30
 800a7d4:	d107      	bne.n	800a7e6 <_strtoul_l.constprop.0+0x3e>
 800a7d6:	7828      	ldrb	r0, [r5, #0]
 800a7d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a7dc:	2858      	cmp	r0, #88	; 0x58
 800a7de:	d149      	bne.n	800a874 <_strtoul_l.constprop.0+0xcc>
 800a7e0:	786c      	ldrb	r4, [r5, #1]
 800a7e2:	2310      	movs	r3, #16
 800a7e4:	3502      	adds	r5, #2
 800a7e6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a7ea:	2700      	movs	r7, #0
 800a7ec:	fbb8 f8f3 	udiv	r8, r8, r3
 800a7f0:	fb03 f908 	mul.w	r9, r3, r8
 800a7f4:	ea6f 0909 	mvn.w	r9, r9
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7fe:	f1bc 0f09 	cmp.w	ip, #9
 800a802:	d814      	bhi.n	800a82e <_strtoul_l.constprop.0+0x86>
 800a804:	4664      	mov	r4, ip
 800a806:	42a3      	cmp	r3, r4
 800a808:	dd22      	ble.n	800a850 <_strtoul_l.constprop.0+0xa8>
 800a80a:	2f00      	cmp	r7, #0
 800a80c:	db1d      	blt.n	800a84a <_strtoul_l.constprop.0+0xa2>
 800a80e:	4580      	cmp	r8, r0
 800a810:	d31b      	bcc.n	800a84a <_strtoul_l.constprop.0+0xa2>
 800a812:	d101      	bne.n	800a818 <_strtoul_l.constprop.0+0x70>
 800a814:	45a1      	cmp	r9, r4
 800a816:	db18      	blt.n	800a84a <_strtoul_l.constprop.0+0xa2>
 800a818:	fb00 4003 	mla	r0, r0, r3, r4
 800a81c:	2701      	movs	r7, #1
 800a81e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a822:	e7ea      	b.n	800a7fa <_strtoul_l.constprop.0+0x52>
 800a824:	2c2b      	cmp	r4, #43	; 0x2b
 800a826:	bf04      	itt	eq
 800a828:	782c      	ldrbeq	r4, [r5, #0]
 800a82a:	1c85      	addeq	r5, r0, #2
 800a82c:	e7cd      	b.n	800a7ca <_strtoul_l.constprop.0+0x22>
 800a82e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a832:	f1bc 0f19 	cmp.w	ip, #25
 800a836:	d801      	bhi.n	800a83c <_strtoul_l.constprop.0+0x94>
 800a838:	3c37      	subs	r4, #55	; 0x37
 800a83a:	e7e4      	b.n	800a806 <_strtoul_l.constprop.0+0x5e>
 800a83c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a840:	f1bc 0f19 	cmp.w	ip, #25
 800a844:	d804      	bhi.n	800a850 <_strtoul_l.constprop.0+0xa8>
 800a846:	3c57      	subs	r4, #87	; 0x57
 800a848:	e7dd      	b.n	800a806 <_strtoul_l.constprop.0+0x5e>
 800a84a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a84e:	e7e6      	b.n	800a81e <_strtoul_l.constprop.0+0x76>
 800a850:	2f00      	cmp	r7, #0
 800a852:	da07      	bge.n	800a864 <_strtoul_l.constprop.0+0xbc>
 800a854:	2322      	movs	r3, #34	; 0x22
 800a856:	f8ce 3000 	str.w	r3, [lr]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a85e:	b932      	cbnz	r2, 800a86e <_strtoul_l.constprop.0+0xc6>
 800a860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a864:	b106      	cbz	r6, 800a868 <_strtoul_l.constprop.0+0xc0>
 800a866:	4240      	negs	r0, r0
 800a868:	2a00      	cmp	r2, #0
 800a86a:	d0f9      	beq.n	800a860 <_strtoul_l.constprop.0+0xb8>
 800a86c:	b107      	cbz	r7, 800a870 <_strtoul_l.constprop.0+0xc8>
 800a86e:	1e69      	subs	r1, r5, #1
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	e7f5      	b.n	800a860 <_strtoul_l.constprop.0+0xb8>
 800a874:	2430      	movs	r4, #48	; 0x30
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1b5      	bne.n	800a7e6 <_strtoul_l.constprop.0+0x3e>
 800a87a:	2308      	movs	r3, #8
 800a87c:	e7b3      	b.n	800a7e6 <_strtoul_l.constprop.0+0x3e>
 800a87e:	2c30      	cmp	r4, #48	; 0x30
 800a880:	d0a9      	beq.n	800a7d6 <_strtoul_l.constprop.0+0x2e>
 800a882:	230a      	movs	r3, #10
 800a884:	e7af      	b.n	800a7e6 <_strtoul_l.constprop.0+0x3e>
 800a886:	bf00      	nop
 800a888:	0800b81e 	.word	0x0800b81e

0800a88c <_strtoul_r>:
 800a88c:	f7ff bf8c 	b.w	800a7a8 <_strtoul_l.constprop.0>

0800a890 <strtoul>:
 800a890:	4613      	mov	r3, r2
 800a892:	460a      	mov	r2, r1
 800a894:	4601      	mov	r1, r0
 800a896:	4802      	ldr	r0, [pc, #8]	; (800a8a0 <strtoul+0x10>)
 800a898:	6800      	ldr	r0, [r0, #0]
 800a89a:	f7ff bf85 	b.w	800a7a8 <_strtoul_l.constprop.0>
 800a89e:	bf00      	nop
 800a8a0:	20000014 	.word	0x20000014

0800a8a4 <abort>:
 800a8a4:	b508      	push	{r3, lr}
 800a8a6:	2006      	movs	r0, #6
 800a8a8:	f000 fc12 	bl	800b0d0 <raise>
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	f7f7 f841 	bl	8001934 <_exit>
	...

0800a8b4 <__env_lock>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	; (800a8bc <__env_lock+0x8>)
 800a8b6:	f7fc bc0d 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20004e90 	.word	0x20004e90

0800a8c0 <__env_unlock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__env_unlock+0x8>)
 800a8c2:	f7fc bc09 	b.w	80070d8 <__retarget_lock_release_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20004e90 	.word	0x20004e90

0800a8cc <_fstat_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d07      	ldr	r5, [pc, #28]	; (800a8ec <_fstat_r+0x20>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	f7f7 f85e 	bl	800199a <_fstat>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	d102      	bne.n	800a8e8 <_fstat_r+0x1c>
 800a8e2:	682b      	ldr	r3, [r5, #0]
 800a8e4:	b103      	cbz	r3, 800a8e8 <_fstat_r+0x1c>
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20004ea0 	.word	0x20004ea0

0800a8f0 <_isatty_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_isatty_r+0x1c>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f7 f85d 	bl	80019ba <_isatty>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_isatty_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_isatty_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20004ea0 	.word	0x20004ea0

0800a910 <__ascii_mbtowc>:
 800a910:	b082      	sub	sp, #8
 800a912:	b901      	cbnz	r1, 800a916 <__ascii_mbtowc+0x6>
 800a914:	a901      	add	r1, sp, #4
 800a916:	b142      	cbz	r2, 800a92a <__ascii_mbtowc+0x1a>
 800a918:	b14b      	cbz	r3, 800a92e <__ascii_mbtowc+0x1e>
 800a91a:	7813      	ldrb	r3, [r2, #0]
 800a91c:	600b      	str	r3, [r1, #0]
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	1e10      	subs	r0, r2, #0
 800a922:	bf18      	it	ne
 800a924:	2001      	movne	r0, #1
 800a926:	b002      	add	sp, #8
 800a928:	4770      	bx	lr
 800a92a:	4610      	mov	r0, r2
 800a92c:	e7fb      	b.n	800a926 <__ascii_mbtowc+0x16>
 800a92e:	f06f 0001 	mvn.w	r0, #1
 800a932:	e7f8      	b.n	800a926 <__ascii_mbtowc+0x16>

0800a934 <memmove>:
 800a934:	4288      	cmp	r0, r1
 800a936:	b510      	push	{r4, lr}
 800a938:	eb01 0402 	add.w	r4, r1, r2
 800a93c:	d902      	bls.n	800a944 <memmove+0x10>
 800a93e:	4284      	cmp	r4, r0
 800a940:	4623      	mov	r3, r4
 800a942:	d807      	bhi.n	800a954 <memmove+0x20>
 800a944:	1e43      	subs	r3, r0, #1
 800a946:	42a1      	cmp	r1, r4
 800a948:	d008      	beq.n	800a95c <memmove+0x28>
 800a94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a952:	e7f8      	b.n	800a946 <memmove+0x12>
 800a954:	4402      	add	r2, r0
 800a956:	4601      	mov	r1, r0
 800a958:	428a      	cmp	r2, r1
 800a95a:	d100      	bne.n	800a95e <memmove+0x2a>
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a966:	e7f7      	b.n	800a958 <memmove+0x24>

0800a968 <_realloc_r>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	4680      	mov	r8, r0
 800a96e:	4614      	mov	r4, r2
 800a970:	460e      	mov	r6, r1
 800a972:	b921      	cbnz	r1, 800a97e <_realloc_r+0x16>
 800a974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a978:	4611      	mov	r1, r2
 800a97a:	f7fc beb3 	b.w	80076e4 <_malloc_r>
 800a97e:	b92a      	cbnz	r2, 800a98c <_realloc_r+0x24>
 800a980:	f7fc fe44 	bl	800760c <_free_r>
 800a984:	4625      	mov	r5, r4
 800a986:	4628      	mov	r0, r5
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98c:	f000 fc87 	bl	800b29e <_malloc_usable_size_r>
 800a990:	4284      	cmp	r4, r0
 800a992:	4607      	mov	r7, r0
 800a994:	d802      	bhi.n	800a99c <_realloc_r+0x34>
 800a996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a99a:	d812      	bhi.n	800a9c2 <_realloc_r+0x5a>
 800a99c:	4621      	mov	r1, r4
 800a99e:	4640      	mov	r0, r8
 800a9a0:	f7fc fea0 	bl	80076e4 <_malloc_r>
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d0ed      	beq.n	800a986 <_realloc_r+0x1e>
 800a9aa:	42bc      	cmp	r4, r7
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	bf28      	it	cs
 800a9b2:	463a      	movcs	r2, r7
 800a9b4:	f7fc fba2 	bl	80070fc <memcpy>
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7fc fe26 	bl	800760c <_free_r>
 800a9c0:	e7e1      	b.n	800a986 <_realloc_r+0x1e>
 800a9c2:	4635      	mov	r5, r6
 800a9c4:	e7df      	b.n	800a986 <_realloc_r+0x1e>

0800a9c6 <_sungetc_r>:
 800a9c6:	b538      	push	{r3, r4, r5, lr}
 800a9c8:	1c4b      	adds	r3, r1, #1
 800a9ca:	4614      	mov	r4, r2
 800a9cc:	d103      	bne.n	800a9d6 <_sungetc_r+0x10>
 800a9ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	bd38      	pop	{r3, r4, r5, pc}
 800a9d6:	8993      	ldrh	r3, [r2, #12]
 800a9d8:	f023 0320 	bic.w	r3, r3, #32
 800a9dc:	8193      	strh	r3, [r2, #12]
 800a9de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9e0:	6852      	ldr	r2, [r2, #4]
 800a9e2:	b2cd      	uxtb	r5, r1
 800a9e4:	b18b      	cbz	r3, 800aa0a <_sungetc_r+0x44>
 800a9e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	dd08      	ble.n	800a9fe <_sungetc_r+0x38>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	1e5a      	subs	r2, r3, #1
 800a9f0:	6022      	str	r2, [r4, #0]
 800a9f2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a9f6:	6863      	ldr	r3, [r4, #4]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	6063      	str	r3, [r4, #4]
 800a9fc:	e7e9      	b.n	800a9d2 <_sungetc_r+0xc>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	f000 fc06 	bl	800b210 <__submore>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0f1      	beq.n	800a9ec <_sungetc_r+0x26>
 800aa08:	e7e1      	b.n	800a9ce <_sungetc_r+0x8>
 800aa0a:	6921      	ldr	r1, [r4, #16]
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	b151      	cbz	r1, 800aa26 <_sungetc_r+0x60>
 800aa10:	4299      	cmp	r1, r3
 800aa12:	d208      	bcs.n	800aa26 <_sungetc_r+0x60>
 800aa14:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800aa18:	42a9      	cmp	r1, r5
 800aa1a:	d104      	bne.n	800aa26 <_sungetc_r+0x60>
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	3201      	adds	r2, #1
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	6062      	str	r2, [r4, #4]
 800aa24:	e7d5      	b.n	800a9d2 <_sungetc_r+0xc>
 800aa26:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aa2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa2e:	6363      	str	r3, [r4, #52]	; 0x34
 800aa30:	2303      	movs	r3, #3
 800aa32:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa34:	4623      	mov	r3, r4
 800aa36:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e7dc      	b.n	800a9fa <_sungetc_r+0x34>

0800aa40 <__ssrefill_r>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	460c      	mov	r4, r1
 800aa44:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa46:	b169      	cbz	r1, 800aa64 <__ssrefill_r+0x24>
 800aa48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d001      	beq.n	800aa54 <__ssrefill_r+0x14>
 800aa50:	f7fc fddc 	bl	800760c <_free_r>
 800aa54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	2000      	movs	r0, #0
 800aa5a:	6360      	str	r0, [r4, #52]	; 0x34
 800aa5c:	b113      	cbz	r3, 800aa64 <__ssrefill_r+0x24>
 800aa5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd10      	pop	{r4, pc}
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	6063      	str	r3, [r4, #4]
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	f043 0320 	orr.w	r3, r3, #32
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa78:	e7f3      	b.n	800aa62 <__ssrefill_r+0x22>
	...

0800aa7c <__ssvfiscanf_r>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	460c      	mov	r4, r1
 800aa82:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aa86:	2100      	movs	r1, #0
 800aa88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aa8c:	49a6      	ldr	r1, [pc, #664]	; (800ad28 <__ssvfiscanf_r+0x2ac>)
 800aa8e:	91a0      	str	r1, [sp, #640]	; 0x280
 800aa90:	f10d 0804 	add.w	r8, sp, #4
 800aa94:	49a5      	ldr	r1, [pc, #660]	; (800ad2c <__ssvfiscanf_r+0x2b0>)
 800aa96:	4fa6      	ldr	r7, [pc, #664]	; (800ad30 <__ssvfiscanf_r+0x2b4>)
 800aa98:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ad34 <__ssvfiscanf_r+0x2b8>
 800aa9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	91a1      	str	r1, [sp, #644]	; 0x284
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	7813      	ldrb	r3, [r2, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 815a 	beq.w	800ad62 <__ssvfiscanf_r+0x2e6>
 800aaae:	5dd9      	ldrb	r1, [r3, r7]
 800aab0:	f011 0108 	ands.w	r1, r1, #8
 800aab4:	f102 0501 	add.w	r5, r2, #1
 800aab8:	d019      	beq.n	800aaee <__ssvfiscanf_r+0x72>
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd0f      	ble.n	800aae0 <__ssvfiscanf_r+0x64>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	5cba      	ldrb	r2, [r7, r2]
 800aac6:	0712      	lsls	r2, r2, #28
 800aac8:	d401      	bmi.n	800aace <__ssvfiscanf_r+0x52>
 800aaca:	462a      	mov	r2, r5
 800aacc:	e7eb      	b.n	800aaa6 <__ssvfiscanf_r+0x2a>
 800aace:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aad0:	3201      	adds	r2, #1
 800aad2:	9245      	str	r2, [sp, #276]	; 0x114
 800aad4:	6862      	ldr	r2, [r4, #4]
 800aad6:	3301      	adds	r3, #1
 800aad8:	3a01      	subs	r2, #1
 800aada:	6062      	str	r2, [r4, #4]
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	e7ec      	b.n	800aaba <__ssvfiscanf_r+0x3e>
 800aae0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aae2:	4621      	mov	r1, r4
 800aae4:	4630      	mov	r0, r6
 800aae6:	4798      	blx	r3
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d0e9      	beq.n	800aac0 <__ssvfiscanf_r+0x44>
 800aaec:	e7ed      	b.n	800aaca <__ssvfiscanf_r+0x4e>
 800aaee:	2b25      	cmp	r3, #37	; 0x25
 800aaf0:	d012      	beq.n	800ab18 <__ssvfiscanf_r+0x9c>
 800aaf2:	469a      	mov	sl, r3
 800aaf4:	6863      	ldr	r3, [r4, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f340 8091 	ble.w	800ac1e <__ssvfiscanf_r+0x1a2>
 800aafc:	6822      	ldr	r2, [r4, #0]
 800aafe:	7813      	ldrb	r3, [r2, #0]
 800ab00:	4553      	cmp	r3, sl
 800ab02:	f040 812e 	bne.w	800ad62 <__ssvfiscanf_r+0x2e6>
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab0e:	3201      	adds	r2, #1
 800ab10:	3301      	adds	r3, #1
 800ab12:	6022      	str	r2, [r4, #0]
 800ab14:	9345      	str	r3, [sp, #276]	; 0x114
 800ab16:	e7d8      	b.n	800aaca <__ssvfiscanf_r+0x4e>
 800ab18:	9141      	str	r1, [sp, #260]	; 0x104
 800ab1a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab1c:	7853      	ldrb	r3, [r2, #1]
 800ab1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab20:	bf02      	ittt	eq
 800ab22:	2310      	moveq	r3, #16
 800ab24:	1c95      	addeq	r5, r2, #2
 800ab26:	9341      	streq	r3, [sp, #260]	; 0x104
 800ab28:	220a      	movs	r2, #10
 800ab2a:	46aa      	mov	sl, r5
 800ab2c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ab30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ab34:	2b09      	cmp	r3, #9
 800ab36:	d91d      	bls.n	800ab74 <__ssvfiscanf_r+0xf8>
 800ab38:	487e      	ldr	r0, [pc, #504]	; (800ad34 <__ssvfiscanf_r+0x2b8>)
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	f7f5 fb50 	bl	80001e0 <memchr>
 800ab40:	b140      	cbz	r0, 800ab54 <__ssvfiscanf_r+0xd8>
 800ab42:	2301      	movs	r3, #1
 800ab44:	eba0 0009 	sub.w	r0, r0, r9
 800ab48:	fa03 f000 	lsl.w	r0, r3, r0
 800ab4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab4e:	4318      	orrs	r0, r3
 800ab50:	9041      	str	r0, [sp, #260]	; 0x104
 800ab52:	4655      	mov	r5, sl
 800ab54:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab58:	2b78      	cmp	r3, #120	; 0x78
 800ab5a:	d806      	bhi.n	800ab6a <__ssvfiscanf_r+0xee>
 800ab5c:	2b57      	cmp	r3, #87	; 0x57
 800ab5e:	d810      	bhi.n	800ab82 <__ssvfiscanf_r+0x106>
 800ab60:	2b25      	cmp	r3, #37	; 0x25
 800ab62:	d0c6      	beq.n	800aaf2 <__ssvfiscanf_r+0x76>
 800ab64:	d856      	bhi.n	800ac14 <__ssvfiscanf_r+0x198>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d064      	beq.n	800ac34 <__ssvfiscanf_r+0x1b8>
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab6e:	230a      	movs	r3, #10
 800ab70:	9342      	str	r3, [sp, #264]	; 0x108
 800ab72:	e071      	b.n	800ac58 <__ssvfiscanf_r+0x1dc>
 800ab74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ab76:	fb02 1103 	mla	r1, r2, r3, r1
 800ab7a:	3930      	subs	r1, #48	; 0x30
 800ab7c:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab7e:	4655      	mov	r5, sl
 800ab80:	e7d3      	b.n	800ab2a <__ssvfiscanf_r+0xae>
 800ab82:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ab86:	2a20      	cmp	r2, #32
 800ab88:	d8ef      	bhi.n	800ab6a <__ssvfiscanf_r+0xee>
 800ab8a:	a101      	add	r1, pc, #4	; (adr r1, 800ab90 <__ssvfiscanf_r+0x114>)
 800ab8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab90:	0800ac43 	.word	0x0800ac43
 800ab94:	0800ab6b 	.word	0x0800ab6b
 800ab98:	0800ab6b 	.word	0x0800ab6b
 800ab9c:	0800aca1 	.word	0x0800aca1
 800aba0:	0800ab6b 	.word	0x0800ab6b
 800aba4:	0800ab6b 	.word	0x0800ab6b
 800aba8:	0800ab6b 	.word	0x0800ab6b
 800abac:	0800ab6b 	.word	0x0800ab6b
 800abb0:	0800ab6b 	.word	0x0800ab6b
 800abb4:	0800ab6b 	.word	0x0800ab6b
 800abb8:	0800ab6b 	.word	0x0800ab6b
 800abbc:	0800acb7 	.word	0x0800acb7
 800abc0:	0800ac8d 	.word	0x0800ac8d
 800abc4:	0800ac1b 	.word	0x0800ac1b
 800abc8:	0800ac1b 	.word	0x0800ac1b
 800abcc:	0800ac1b 	.word	0x0800ac1b
 800abd0:	0800ab6b 	.word	0x0800ab6b
 800abd4:	0800ac91 	.word	0x0800ac91
 800abd8:	0800ab6b 	.word	0x0800ab6b
 800abdc:	0800ab6b 	.word	0x0800ab6b
 800abe0:	0800ab6b 	.word	0x0800ab6b
 800abe4:	0800ab6b 	.word	0x0800ab6b
 800abe8:	0800acc7 	.word	0x0800acc7
 800abec:	0800ac99 	.word	0x0800ac99
 800abf0:	0800ac3b 	.word	0x0800ac3b
 800abf4:	0800ab6b 	.word	0x0800ab6b
 800abf8:	0800ab6b 	.word	0x0800ab6b
 800abfc:	0800acc3 	.word	0x0800acc3
 800ac00:	0800ab6b 	.word	0x0800ab6b
 800ac04:	0800ac8d 	.word	0x0800ac8d
 800ac08:	0800ab6b 	.word	0x0800ab6b
 800ac0c:	0800ab6b 	.word	0x0800ab6b
 800ac10:	0800ac43 	.word	0x0800ac43
 800ac14:	3b45      	subs	r3, #69	; 0x45
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d8a7      	bhi.n	800ab6a <__ssvfiscanf_r+0xee>
 800ac1a:	2305      	movs	r3, #5
 800ac1c:	e01b      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800ac1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac20:	4621      	mov	r1, r4
 800ac22:	4630      	mov	r0, r6
 800ac24:	4798      	blx	r3
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f43f af68 	beq.w	800aafc <__ssvfiscanf_r+0x80>
 800ac2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f040 808d 	bne.w	800ad4e <__ssvfiscanf_r+0x2d2>
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac38:	e08f      	b.n	800ad5a <__ssvfiscanf_r+0x2de>
 800ac3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac3c:	f042 0220 	orr.w	r2, r2, #32
 800ac40:	9241      	str	r2, [sp, #260]	; 0x104
 800ac42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac48:	9241      	str	r2, [sp, #260]	; 0x104
 800ac4a:	2210      	movs	r2, #16
 800ac4c:	2b6f      	cmp	r3, #111	; 0x6f
 800ac4e:	9242      	str	r2, [sp, #264]	; 0x108
 800ac50:	bf34      	ite	cc
 800ac52:	2303      	movcc	r3, #3
 800ac54:	2304      	movcs	r3, #4
 800ac56:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dd42      	ble.n	800ace4 <__ssvfiscanf_r+0x268>
 800ac5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac60:	0659      	lsls	r1, r3, #25
 800ac62:	d404      	bmi.n	800ac6e <__ssvfiscanf_r+0x1f2>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	5cba      	ldrb	r2, [r7, r2]
 800ac6a:	0712      	lsls	r2, r2, #28
 800ac6c:	d441      	bmi.n	800acf2 <__ssvfiscanf_r+0x276>
 800ac6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	dc50      	bgt.n	800ad16 <__ssvfiscanf_r+0x29a>
 800ac74:	466b      	mov	r3, sp
 800ac76:	4622      	mov	r2, r4
 800ac78:	a941      	add	r1, sp, #260	; 0x104
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f000 f876 	bl	800ad6c <_scanf_chars>
 800ac80:	2801      	cmp	r0, #1
 800ac82:	d06e      	beq.n	800ad62 <__ssvfiscanf_r+0x2e6>
 800ac84:	2802      	cmp	r0, #2
 800ac86:	f47f af20 	bne.w	800aaca <__ssvfiscanf_r+0x4e>
 800ac8a:	e7cf      	b.n	800ac2c <__ssvfiscanf_r+0x1b0>
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	e7dd      	b.n	800ac4c <__ssvfiscanf_r+0x1d0>
 800ac90:	2300      	movs	r3, #0
 800ac92:	9342      	str	r3, [sp, #264]	; 0x108
 800ac94:	2303      	movs	r3, #3
 800ac96:	e7de      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800ac98:	2308      	movs	r3, #8
 800ac9a:	9342      	str	r3, [sp, #264]	; 0x108
 800ac9c:	2304      	movs	r3, #4
 800ac9e:	e7da      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800aca0:	4629      	mov	r1, r5
 800aca2:	4640      	mov	r0, r8
 800aca4:	f000 f9b4 	bl	800b010 <__sccl>
 800aca8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acae:	9341      	str	r3, [sp, #260]	; 0x104
 800acb0:	4605      	mov	r5, r0
 800acb2:	2301      	movs	r3, #1
 800acb4:	e7cf      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800acb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbc:	9341      	str	r3, [sp, #260]	; 0x104
 800acbe:	2300      	movs	r3, #0
 800acc0:	e7c9      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800acc2:	2302      	movs	r3, #2
 800acc4:	e7c7      	b.n	800ac56 <__ssvfiscanf_r+0x1da>
 800acc6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800acc8:	06c3      	lsls	r3, r0, #27
 800acca:	f53f aefe 	bmi.w	800aaca <__ssvfiscanf_r+0x4e>
 800acce:	9b00      	ldr	r3, [sp, #0]
 800acd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800acd2:	1d19      	adds	r1, r3, #4
 800acd4:	9100      	str	r1, [sp, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f010 0f01 	tst.w	r0, #1
 800acdc:	bf14      	ite	ne
 800acde:	801a      	strhne	r2, [r3, #0]
 800ace0:	601a      	streq	r2, [r3, #0]
 800ace2:	e6f2      	b.n	800aaca <__ssvfiscanf_r+0x4e>
 800ace4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ace6:	4621      	mov	r1, r4
 800ace8:	4630      	mov	r0, r6
 800acea:	4798      	blx	r3
 800acec:	2800      	cmp	r0, #0
 800acee:	d0b6      	beq.n	800ac5e <__ssvfiscanf_r+0x1e2>
 800acf0:	e79c      	b.n	800ac2c <__ssvfiscanf_r+0x1b0>
 800acf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800acf4:	3201      	adds	r2, #1
 800acf6:	9245      	str	r2, [sp, #276]	; 0x114
 800acf8:	6862      	ldr	r2, [r4, #4]
 800acfa:	3a01      	subs	r2, #1
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	6062      	str	r2, [r4, #4]
 800ad00:	dd02      	ble.n	800ad08 <__ssvfiscanf_r+0x28c>
 800ad02:	3301      	adds	r3, #1
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	e7ad      	b.n	800ac64 <__ssvfiscanf_r+0x1e8>
 800ad08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	4798      	blx	r3
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d0a7      	beq.n	800ac64 <__ssvfiscanf_r+0x1e8>
 800ad14:	e78a      	b.n	800ac2c <__ssvfiscanf_r+0x1b0>
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	dc0e      	bgt.n	800ad38 <__ssvfiscanf_r+0x2bc>
 800ad1a:	466b      	mov	r3, sp
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	a941      	add	r1, sp, #260	; 0x104
 800ad20:	4630      	mov	r0, r6
 800ad22:	f000 f87d 	bl	800ae20 <_scanf_i>
 800ad26:	e7ab      	b.n	800ac80 <__ssvfiscanf_r+0x204>
 800ad28:	0800a9c7 	.word	0x0800a9c7
 800ad2c:	0800aa41 	.word	0x0800aa41
 800ad30:	0800b81e 	.word	0x0800b81e
 800ad34:	0800b812 	.word	0x0800b812
 800ad38:	4b0b      	ldr	r3, [pc, #44]	; (800ad68 <__ssvfiscanf_r+0x2ec>)
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f43f aec5 	beq.w	800aaca <__ssvfiscanf_r+0x4e>
 800ad40:	466b      	mov	r3, sp
 800ad42:	4622      	mov	r2, r4
 800ad44:	a941      	add	r1, sp, #260	; 0x104
 800ad46:	4630      	mov	r0, r6
 800ad48:	f3af 8000 	nop.w
 800ad4c:	e798      	b.n	800ac80 <__ssvfiscanf_r+0x204>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad54:	bf18      	it	ne
 800ad56:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ad5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad64:	e7f9      	b.n	800ad5a <__ssvfiscanf_r+0x2de>
 800ad66:	bf00      	nop
 800ad68:	00000000 	.word	0x00000000

0800ad6c <_scanf_chars>:
 800ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad70:	4615      	mov	r5, r2
 800ad72:	688a      	ldr	r2, [r1, #8]
 800ad74:	4680      	mov	r8, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	b932      	cbnz	r2, 800ad88 <_scanf_chars+0x1c>
 800ad7a:	698a      	ldr	r2, [r1, #24]
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	bf0c      	ite	eq
 800ad80:	2201      	moveq	r2, #1
 800ad82:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800ad86:	608a      	str	r2, [r1, #8]
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ae1c <_scanf_chars+0xb0>
 800ad8e:	06d1      	lsls	r1, r2, #27
 800ad90:	bf5f      	itttt	pl
 800ad92:	681a      	ldrpl	r2, [r3, #0]
 800ad94:	1d11      	addpl	r1, r2, #4
 800ad96:	6019      	strpl	r1, [r3, #0]
 800ad98:	6816      	ldrpl	r6, [r2, #0]
 800ad9a:	2700      	movs	r7, #0
 800ad9c:	69a0      	ldr	r0, [r4, #24]
 800ad9e:	b188      	cbz	r0, 800adc4 <_scanf_chars+0x58>
 800ada0:	2801      	cmp	r0, #1
 800ada2:	d107      	bne.n	800adb4 <_scanf_chars+0x48>
 800ada4:	682a      	ldr	r2, [r5, #0]
 800ada6:	7811      	ldrb	r1, [r2, #0]
 800ada8:	6962      	ldr	r2, [r4, #20]
 800adaa:	5c52      	ldrb	r2, [r2, r1]
 800adac:	b952      	cbnz	r2, 800adc4 <_scanf_chars+0x58>
 800adae:	2f00      	cmp	r7, #0
 800adb0:	d031      	beq.n	800ae16 <_scanf_chars+0xaa>
 800adb2:	e022      	b.n	800adfa <_scanf_chars+0x8e>
 800adb4:	2802      	cmp	r0, #2
 800adb6:	d120      	bne.n	800adfa <_scanf_chars+0x8e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800adc0:	071b      	lsls	r3, r3, #28
 800adc2:	d41a      	bmi.n	800adfa <_scanf_chars+0x8e>
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	06da      	lsls	r2, r3, #27
 800adc8:	bf5e      	ittt	pl
 800adca:	682b      	ldrpl	r3, [r5, #0]
 800adcc:	781b      	ldrbpl	r3, [r3, #0]
 800adce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800add2:	682a      	ldr	r2, [r5, #0]
 800add4:	686b      	ldr	r3, [r5, #4]
 800add6:	3201      	adds	r2, #1
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	68a2      	ldr	r2, [r4, #8]
 800addc:	3b01      	subs	r3, #1
 800adde:	3a01      	subs	r2, #1
 800ade0:	606b      	str	r3, [r5, #4]
 800ade2:	3701      	adds	r7, #1
 800ade4:	60a2      	str	r2, [r4, #8]
 800ade6:	b142      	cbz	r2, 800adfa <_scanf_chars+0x8e>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dcd7      	bgt.n	800ad9c <_scanf_chars+0x30>
 800adec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800adf0:	4629      	mov	r1, r5
 800adf2:	4640      	mov	r0, r8
 800adf4:	4798      	blx	r3
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d0d0      	beq.n	800ad9c <_scanf_chars+0x30>
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	f013 0310 	ands.w	r3, r3, #16
 800ae00:	d105      	bne.n	800ae0e <_scanf_chars+0xa2>
 800ae02:	68e2      	ldr	r2, [r4, #12]
 800ae04:	3201      	adds	r2, #1
 800ae06:	60e2      	str	r2, [r4, #12]
 800ae08:	69a2      	ldr	r2, [r4, #24]
 800ae0a:	b102      	cbz	r2, 800ae0e <_scanf_chars+0xa2>
 800ae0c:	7033      	strb	r3, [r6, #0]
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	443b      	add	r3, r7
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	2000      	movs	r0, #0
 800ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800b81e 	.word	0x0800b81e

0800ae20 <_scanf_i>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	4698      	mov	r8, r3
 800ae26:	4b76      	ldr	r3, [pc, #472]	; (800b000 <_scanf_i+0x1e0>)
 800ae28:	460c      	mov	r4, r1
 800ae2a:	4682      	mov	sl, r0
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae32:	b087      	sub	sp, #28
 800ae34:	ab03      	add	r3, sp, #12
 800ae36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ae3a:	4b72      	ldr	r3, [pc, #456]	; (800b004 <_scanf_i+0x1e4>)
 800ae3c:	69a1      	ldr	r1, [r4, #24]
 800ae3e:	4a72      	ldr	r2, [pc, #456]	; (800b008 <_scanf_i+0x1e8>)
 800ae40:	2903      	cmp	r1, #3
 800ae42:	bf18      	it	ne
 800ae44:	461a      	movne	r2, r3
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	9201      	str	r2, [sp, #4]
 800ae4a:	1e5a      	subs	r2, r3, #1
 800ae4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ae50:	bf88      	it	hi
 800ae52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ae56:	4627      	mov	r7, r4
 800ae58:	bf82      	ittt	hi
 800ae5a:	eb03 0905 	addhi.w	r9, r3, r5
 800ae5e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ae62:	60a3      	strhi	r3, [r4, #8]
 800ae64:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ae68:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ae6c:	bf98      	it	ls
 800ae6e:	f04f 0900 	movls.w	r9, #0
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	463d      	mov	r5, r7
 800ae76:	f04f 0b00 	mov.w	fp, #0
 800ae7a:	6831      	ldr	r1, [r6, #0]
 800ae7c:	ab03      	add	r3, sp, #12
 800ae7e:	7809      	ldrb	r1, [r1, #0]
 800ae80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ae84:	2202      	movs	r2, #2
 800ae86:	f7f5 f9ab 	bl	80001e0 <memchr>
 800ae8a:	b328      	cbz	r0, 800aed8 <_scanf_i+0xb8>
 800ae8c:	f1bb 0f01 	cmp.w	fp, #1
 800ae90:	d159      	bne.n	800af46 <_scanf_i+0x126>
 800ae92:	6862      	ldr	r2, [r4, #4]
 800ae94:	b92a      	cbnz	r2, 800aea2 <_scanf_i+0x82>
 800ae96:	6822      	ldr	r2, [r4, #0]
 800ae98:	2308      	movs	r3, #8
 800ae9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae9e:	6063      	str	r3, [r4, #4]
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	6822      	ldr	r2, [r4, #0]
 800aea4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aea8:	6022      	str	r2, [r4, #0]
 800aeaa:	68a2      	ldr	r2, [r4, #8]
 800aeac:	1e51      	subs	r1, r2, #1
 800aeae:	60a1      	str	r1, [r4, #8]
 800aeb0:	b192      	cbz	r2, 800aed8 <_scanf_i+0xb8>
 800aeb2:	6832      	ldr	r2, [r6, #0]
 800aeb4:	1c51      	adds	r1, r2, #1
 800aeb6:	6031      	str	r1, [r6, #0]
 800aeb8:	7812      	ldrb	r2, [r2, #0]
 800aeba:	f805 2b01 	strb.w	r2, [r5], #1
 800aebe:	6872      	ldr	r2, [r6, #4]
 800aec0:	3a01      	subs	r2, #1
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	6072      	str	r2, [r6, #4]
 800aec6:	dc07      	bgt.n	800aed8 <_scanf_i+0xb8>
 800aec8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aecc:	4631      	mov	r1, r6
 800aece:	4650      	mov	r0, sl
 800aed0:	4790      	blx	r2
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f040 8085 	bne.w	800afe2 <_scanf_i+0x1c2>
 800aed8:	f10b 0b01 	add.w	fp, fp, #1
 800aedc:	f1bb 0f03 	cmp.w	fp, #3
 800aee0:	d1cb      	bne.n	800ae7a <_scanf_i+0x5a>
 800aee2:	6863      	ldr	r3, [r4, #4]
 800aee4:	b90b      	cbnz	r3, 800aeea <_scanf_i+0xca>
 800aee6:	230a      	movs	r3, #10
 800aee8:	6063      	str	r3, [r4, #4]
 800aeea:	6863      	ldr	r3, [r4, #4]
 800aeec:	4947      	ldr	r1, [pc, #284]	; (800b00c <_scanf_i+0x1ec>)
 800aeee:	6960      	ldr	r0, [r4, #20]
 800aef0:	1ac9      	subs	r1, r1, r3
 800aef2:	f000 f88d 	bl	800b010 <__sccl>
 800aef6:	f04f 0b00 	mov.w	fp, #0
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d03d      	beq.n	800af7e <_scanf_i+0x15e>
 800af02:	6831      	ldr	r1, [r6, #0]
 800af04:	6960      	ldr	r0, [r4, #20]
 800af06:	f891 c000 	ldrb.w	ip, [r1]
 800af0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800af0e:	2800      	cmp	r0, #0
 800af10:	d035      	beq.n	800af7e <_scanf_i+0x15e>
 800af12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800af16:	d124      	bne.n	800af62 <_scanf_i+0x142>
 800af18:	0510      	lsls	r0, r2, #20
 800af1a:	d522      	bpl.n	800af62 <_scanf_i+0x142>
 800af1c:	f10b 0b01 	add.w	fp, fp, #1
 800af20:	f1b9 0f00 	cmp.w	r9, #0
 800af24:	d003      	beq.n	800af2e <_scanf_i+0x10e>
 800af26:	3301      	adds	r3, #1
 800af28:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800af2c:	60a3      	str	r3, [r4, #8]
 800af2e:	6873      	ldr	r3, [r6, #4]
 800af30:	3b01      	subs	r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	6073      	str	r3, [r6, #4]
 800af36:	dd1b      	ble.n	800af70 <_scanf_i+0x150>
 800af38:	6833      	ldr	r3, [r6, #0]
 800af3a:	3301      	adds	r3, #1
 800af3c:	6033      	str	r3, [r6, #0]
 800af3e:	68a3      	ldr	r3, [r4, #8]
 800af40:	3b01      	subs	r3, #1
 800af42:	60a3      	str	r3, [r4, #8]
 800af44:	e7d9      	b.n	800aefa <_scanf_i+0xda>
 800af46:	f1bb 0f02 	cmp.w	fp, #2
 800af4a:	d1ae      	bne.n	800aeaa <_scanf_i+0x8a>
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800af52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800af56:	d1bf      	bne.n	800aed8 <_scanf_i+0xb8>
 800af58:	2310      	movs	r3, #16
 800af5a:	6063      	str	r3, [r4, #4]
 800af5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af60:	e7a2      	b.n	800aea8 <_scanf_i+0x88>
 800af62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	780b      	ldrb	r3, [r1, #0]
 800af6a:	f805 3b01 	strb.w	r3, [r5], #1
 800af6e:	e7de      	b.n	800af2e <_scanf_i+0x10e>
 800af70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af74:	4631      	mov	r1, r6
 800af76:	4650      	mov	r0, sl
 800af78:	4798      	blx	r3
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0df      	beq.n	800af3e <_scanf_i+0x11e>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	05db      	lsls	r3, r3, #23
 800af82:	d50d      	bpl.n	800afa0 <_scanf_i+0x180>
 800af84:	42bd      	cmp	r5, r7
 800af86:	d909      	bls.n	800af9c <_scanf_i+0x17c>
 800af88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800af8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af90:	4632      	mov	r2, r6
 800af92:	4650      	mov	r0, sl
 800af94:	4798      	blx	r3
 800af96:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800af9a:	464d      	mov	r5, r9
 800af9c:	42bd      	cmp	r5, r7
 800af9e:	d02d      	beq.n	800affc <_scanf_i+0x1dc>
 800afa0:	6822      	ldr	r2, [r4, #0]
 800afa2:	f012 0210 	ands.w	r2, r2, #16
 800afa6:	d113      	bne.n	800afd0 <_scanf_i+0x1b0>
 800afa8:	702a      	strb	r2, [r5, #0]
 800afaa:	6863      	ldr	r3, [r4, #4]
 800afac:	9e01      	ldr	r6, [sp, #4]
 800afae:	4639      	mov	r1, r7
 800afb0:	4650      	mov	r0, sl
 800afb2:	47b0      	blx	r6
 800afb4:	6821      	ldr	r1, [r4, #0]
 800afb6:	f8d8 3000 	ldr.w	r3, [r8]
 800afba:	f011 0f20 	tst.w	r1, #32
 800afbe:	d013      	beq.n	800afe8 <_scanf_i+0x1c8>
 800afc0:	1d1a      	adds	r2, r3, #4
 800afc2:	f8c8 2000 	str.w	r2, [r8]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6018      	str	r0, [r3, #0]
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60e3      	str	r3, [r4, #12]
 800afd0:	1bed      	subs	r5, r5, r7
 800afd2:	44ab      	add	fp, r5
 800afd4:	6925      	ldr	r5, [r4, #16]
 800afd6:	445d      	add	r5, fp
 800afd8:	6125      	str	r5, [r4, #16]
 800afda:	2000      	movs	r0, #0
 800afdc:	b007      	add	sp, #28
 800afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe2:	f04f 0b00 	mov.w	fp, #0
 800afe6:	e7ca      	b.n	800af7e <_scanf_i+0x15e>
 800afe8:	1d1a      	adds	r2, r3, #4
 800afea:	f8c8 2000 	str.w	r2, [r8]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f011 0f01 	tst.w	r1, #1
 800aff4:	bf14      	ite	ne
 800aff6:	8018      	strhne	r0, [r3, #0]
 800aff8:	6018      	streq	r0, [r3, #0]
 800affa:	e7e6      	b.n	800afca <_scanf_i+0x1aa>
 800affc:	2001      	movs	r0, #1
 800affe:	e7ed      	b.n	800afdc <_scanf_i+0x1bc>
 800b000:	0800b3c0 	.word	0x0800b3c0
 800b004:	0800a88d 	.word	0x0800a88d
 800b008:	0800b20d 	.word	0x0800b20d
 800b00c:	0800b941 	.word	0x0800b941

0800b010 <__sccl>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	780b      	ldrb	r3, [r1, #0]
 800b014:	4604      	mov	r4, r0
 800b016:	2b5e      	cmp	r3, #94	; 0x5e
 800b018:	bf0b      	itete	eq
 800b01a:	784b      	ldrbeq	r3, [r1, #1]
 800b01c:	1c48      	addne	r0, r1, #1
 800b01e:	1c88      	addeq	r0, r1, #2
 800b020:	2200      	movne	r2, #0
 800b022:	bf08      	it	eq
 800b024:	2201      	moveq	r2, #1
 800b026:	1e61      	subs	r1, r4, #1
 800b028:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b02c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b030:	42a9      	cmp	r1, r5
 800b032:	d1fb      	bne.n	800b02c <__sccl+0x1c>
 800b034:	b90b      	cbnz	r3, 800b03a <__sccl+0x2a>
 800b036:	3801      	subs	r0, #1
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	f082 0201 	eor.w	r2, r2, #1
 800b03e:	54e2      	strb	r2, [r4, r3]
 800b040:	4605      	mov	r5, r0
 800b042:	4628      	mov	r0, r5
 800b044:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b048:	292d      	cmp	r1, #45	; 0x2d
 800b04a:	d006      	beq.n	800b05a <__sccl+0x4a>
 800b04c:	295d      	cmp	r1, #93	; 0x5d
 800b04e:	d0f3      	beq.n	800b038 <__sccl+0x28>
 800b050:	b909      	cbnz	r1, 800b056 <__sccl+0x46>
 800b052:	4628      	mov	r0, r5
 800b054:	e7f0      	b.n	800b038 <__sccl+0x28>
 800b056:	460b      	mov	r3, r1
 800b058:	e7f1      	b.n	800b03e <__sccl+0x2e>
 800b05a:	786e      	ldrb	r6, [r5, #1]
 800b05c:	2e5d      	cmp	r6, #93	; 0x5d
 800b05e:	d0fa      	beq.n	800b056 <__sccl+0x46>
 800b060:	42b3      	cmp	r3, r6
 800b062:	dcf8      	bgt.n	800b056 <__sccl+0x46>
 800b064:	3502      	adds	r5, #2
 800b066:	4619      	mov	r1, r3
 800b068:	3101      	adds	r1, #1
 800b06a:	428e      	cmp	r6, r1
 800b06c:	5462      	strb	r2, [r4, r1]
 800b06e:	dcfb      	bgt.n	800b068 <__sccl+0x58>
 800b070:	1af1      	subs	r1, r6, r3
 800b072:	3901      	subs	r1, #1
 800b074:	1c58      	adds	r0, r3, #1
 800b076:	42b3      	cmp	r3, r6
 800b078:	bfa8      	it	ge
 800b07a:	2100      	movge	r1, #0
 800b07c:	1843      	adds	r3, r0, r1
 800b07e:	e7e0      	b.n	800b042 <__sccl+0x32>

0800b080 <_raise_r>:
 800b080:	291f      	cmp	r1, #31
 800b082:	b538      	push	{r3, r4, r5, lr}
 800b084:	4604      	mov	r4, r0
 800b086:	460d      	mov	r5, r1
 800b088:	d904      	bls.n	800b094 <_raise_r+0x14>
 800b08a:	2316      	movs	r3, #22
 800b08c:	6003      	str	r3, [r0, #0]
 800b08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b096:	b112      	cbz	r2, 800b09e <_raise_r+0x1e>
 800b098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b09c:	b94b      	cbnz	r3, 800b0b2 <_raise_r+0x32>
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f830 	bl	800b104 <_getpid_r>
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ae:	f000 b817 	b.w	800b0e0 <_kill_r>
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d00a      	beq.n	800b0cc <_raise_r+0x4c>
 800b0b6:	1c59      	adds	r1, r3, #1
 800b0b8:	d103      	bne.n	800b0c2 <_raise_r+0x42>
 800b0ba:	2316      	movs	r3, #22
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	2001      	movs	r0, #1
 800b0c0:	e7e7      	b.n	800b092 <_raise_r+0x12>
 800b0c2:	2400      	movs	r4, #0
 800b0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	4798      	blx	r3
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e7e0      	b.n	800b092 <_raise_r+0x12>

0800b0d0 <raise>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <raise+0xc>)
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f7ff bfd3 	b.w	800b080 <_raise_r>
 800b0da:	bf00      	nop
 800b0dc:	20000014 	.word	0x20000014

0800b0e0 <_kill_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	; (800b100 <_kill_r+0x20>)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	f7f6 fc11 	bl	8001914 <_kill>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d102      	bne.n	800b0fc <_kill_r+0x1c>
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	b103      	cbz	r3, 800b0fc <_kill_r+0x1c>
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	20004ea0 	.word	0x20004ea0

0800b104 <_getpid_r>:
 800b104:	f7f6 bbfe 	b.w	8001904 <_getpid>

0800b108 <_strtol_l.constprop.0>:
 800b108:	2b01      	cmp	r3, #1
 800b10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b10e:	d001      	beq.n	800b114 <_strtol_l.constprop.0+0xc>
 800b110:	2b24      	cmp	r3, #36	; 0x24
 800b112:	d906      	bls.n	800b122 <_strtol_l.constprop.0+0x1a>
 800b114:	f7fb febc 	bl	8006e90 <__errno>
 800b118:	2316      	movs	r3, #22
 800b11a:	6003      	str	r3, [r0, #0]
 800b11c:	2000      	movs	r0, #0
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b208 <_strtol_l.constprop.0+0x100>
 800b126:	460d      	mov	r5, r1
 800b128:	462e      	mov	r6, r5
 800b12a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b12e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b132:	f017 0708 	ands.w	r7, r7, #8
 800b136:	d1f7      	bne.n	800b128 <_strtol_l.constprop.0+0x20>
 800b138:	2c2d      	cmp	r4, #45	; 0x2d
 800b13a:	d132      	bne.n	800b1a2 <_strtol_l.constprop.0+0x9a>
 800b13c:	782c      	ldrb	r4, [r5, #0]
 800b13e:	2701      	movs	r7, #1
 800b140:	1cb5      	adds	r5, r6, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d05b      	beq.n	800b1fe <_strtol_l.constprop.0+0xf6>
 800b146:	2b10      	cmp	r3, #16
 800b148:	d109      	bne.n	800b15e <_strtol_l.constprop.0+0x56>
 800b14a:	2c30      	cmp	r4, #48	; 0x30
 800b14c:	d107      	bne.n	800b15e <_strtol_l.constprop.0+0x56>
 800b14e:	782c      	ldrb	r4, [r5, #0]
 800b150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b154:	2c58      	cmp	r4, #88	; 0x58
 800b156:	d14d      	bne.n	800b1f4 <_strtol_l.constprop.0+0xec>
 800b158:	786c      	ldrb	r4, [r5, #1]
 800b15a:	2310      	movs	r3, #16
 800b15c:	3502      	adds	r5, #2
 800b15e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b162:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b166:	f04f 0c00 	mov.w	ip, #0
 800b16a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b16e:	4666      	mov	r6, ip
 800b170:	fb03 8a19 	mls	sl, r3, r9, r8
 800b174:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b178:	f1be 0f09 	cmp.w	lr, #9
 800b17c:	d816      	bhi.n	800b1ac <_strtol_l.constprop.0+0xa4>
 800b17e:	4674      	mov	r4, lr
 800b180:	42a3      	cmp	r3, r4
 800b182:	dd24      	ble.n	800b1ce <_strtol_l.constprop.0+0xc6>
 800b184:	f1bc 0f00 	cmp.w	ip, #0
 800b188:	db1e      	blt.n	800b1c8 <_strtol_l.constprop.0+0xc0>
 800b18a:	45b1      	cmp	r9, r6
 800b18c:	d31c      	bcc.n	800b1c8 <_strtol_l.constprop.0+0xc0>
 800b18e:	d101      	bne.n	800b194 <_strtol_l.constprop.0+0x8c>
 800b190:	45a2      	cmp	sl, r4
 800b192:	db19      	blt.n	800b1c8 <_strtol_l.constprop.0+0xc0>
 800b194:	fb06 4603 	mla	r6, r6, r3, r4
 800b198:	f04f 0c01 	mov.w	ip, #1
 800b19c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1a0:	e7e8      	b.n	800b174 <_strtol_l.constprop.0+0x6c>
 800b1a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a4:	bf04      	itt	eq
 800b1a6:	782c      	ldrbeq	r4, [r5, #0]
 800b1a8:	1cb5      	addeq	r5, r6, #2
 800b1aa:	e7ca      	b.n	800b142 <_strtol_l.constprop.0+0x3a>
 800b1ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b1b0:	f1be 0f19 	cmp.w	lr, #25
 800b1b4:	d801      	bhi.n	800b1ba <_strtol_l.constprop.0+0xb2>
 800b1b6:	3c37      	subs	r4, #55	; 0x37
 800b1b8:	e7e2      	b.n	800b180 <_strtol_l.constprop.0+0x78>
 800b1ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b1be:	f1be 0f19 	cmp.w	lr, #25
 800b1c2:	d804      	bhi.n	800b1ce <_strtol_l.constprop.0+0xc6>
 800b1c4:	3c57      	subs	r4, #87	; 0x57
 800b1c6:	e7db      	b.n	800b180 <_strtol_l.constprop.0+0x78>
 800b1c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b1cc:	e7e6      	b.n	800b19c <_strtol_l.constprop.0+0x94>
 800b1ce:	f1bc 0f00 	cmp.w	ip, #0
 800b1d2:	da05      	bge.n	800b1e0 <_strtol_l.constprop.0+0xd8>
 800b1d4:	2322      	movs	r3, #34	; 0x22
 800b1d6:	6003      	str	r3, [r0, #0]
 800b1d8:	4646      	mov	r6, r8
 800b1da:	b942      	cbnz	r2, 800b1ee <_strtol_l.constprop.0+0xe6>
 800b1dc:	4630      	mov	r0, r6
 800b1de:	e79e      	b.n	800b11e <_strtol_l.constprop.0+0x16>
 800b1e0:	b107      	cbz	r7, 800b1e4 <_strtol_l.constprop.0+0xdc>
 800b1e2:	4276      	negs	r6, r6
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	d0f9      	beq.n	800b1dc <_strtol_l.constprop.0+0xd4>
 800b1e8:	f1bc 0f00 	cmp.w	ip, #0
 800b1ec:	d000      	beq.n	800b1f0 <_strtol_l.constprop.0+0xe8>
 800b1ee:	1e69      	subs	r1, r5, #1
 800b1f0:	6011      	str	r1, [r2, #0]
 800b1f2:	e7f3      	b.n	800b1dc <_strtol_l.constprop.0+0xd4>
 800b1f4:	2430      	movs	r4, #48	; 0x30
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1b1      	bne.n	800b15e <_strtol_l.constprop.0+0x56>
 800b1fa:	2308      	movs	r3, #8
 800b1fc:	e7af      	b.n	800b15e <_strtol_l.constprop.0+0x56>
 800b1fe:	2c30      	cmp	r4, #48	; 0x30
 800b200:	d0a5      	beq.n	800b14e <_strtol_l.constprop.0+0x46>
 800b202:	230a      	movs	r3, #10
 800b204:	e7ab      	b.n	800b15e <_strtol_l.constprop.0+0x56>
 800b206:	bf00      	nop
 800b208:	0800b81e 	.word	0x0800b81e

0800b20c <_strtol_r>:
 800b20c:	f7ff bf7c 	b.w	800b108 <_strtol_l.constprop.0>

0800b210 <__submore>:
 800b210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	460c      	mov	r4, r1
 800b216:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d11d      	bne.n	800b25c <__submore+0x4c>
 800b220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b224:	f7fc fa5e 	bl	80076e4 <_malloc_r>
 800b228:	b918      	cbnz	r0, 800b232 <__submore+0x22>
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b236:	63a3      	str	r3, [r4, #56]	; 0x38
 800b238:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b23c:	6360      	str	r0, [r4, #52]	; 0x34
 800b23e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b242:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b246:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b24a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b24e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b252:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	2000      	movs	r0, #0
 800b25a:	e7e8      	b.n	800b22e <__submore+0x1e>
 800b25c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b25e:	0077      	lsls	r7, r6, #1
 800b260:	463a      	mov	r2, r7
 800b262:	f7ff fb81 	bl	800a968 <_realloc_r>
 800b266:	4605      	mov	r5, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	d0de      	beq.n	800b22a <__submore+0x1a>
 800b26c:	eb00 0806 	add.w	r8, r0, r6
 800b270:	4601      	mov	r1, r0
 800b272:	4632      	mov	r2, r6
 800b274:	4640      	mov	r0, r8
 800b276:	f7fb ff41 	bl	80070fc <memcpy>
 800b27a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b27e:	f8c4 8000 	str.w	r8, [r4]
 800b282:	e7e9      	b.n	800b258 <__submore+0x48>

0800b284 <__ascii_wctomb>:
 800b284:	b149      	cbz	r1, 800b29a <__ascii_wctomb+0x16>
 800b286:	2aff      	cmp	r2, #255	; 0xff
 800b288:	bf85      	ittet	hi
 800b28a:	238a      	movhi	r3, #138	; 0x8a
 800b28c:	6003      	strhi	r3, [r0, #0]
 800b28e:	700a      	strbls	r2, [r1, #0]
 800b290:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b294:	bf98      	it	ls
 800b296:	2001      	movls	r0, #1
 800b298:	4770      	bx	lr
 800b29a:	4608      	mov	r0, r1
 800b29c:	4770      	bx	lr

0800b29e <_malloc_usable_size_r>:
 800b29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a2:	1f18      	subs	r0, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfbc      	itt	lt
 800b2a8:	580b      	ldrlt	r3, [r1, r0]
 800b2aa:	18c0      	addlt	r0, r0, r3
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <_init>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	bf00      	nop
 800b2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b6:	bc08      	pop	{r3}
 800b2b8:	469e      	mov	lr, r3
 800b2ba:	4770      	bx	lr

0800b2bc <_fini>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	bf00      	nop
 800b2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c2:	bc08      	pop	{r3}
 800b2c4:	469e      	mov	lr, r3
 800b2c6:	4770      	bx	lr
