
BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  080039d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080039d0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0f8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002119  00000000  00000000  0002e191  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c96  00000000  00000000  00031b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a820  00000000  00000000  0004a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b2bc  00000000  00000000  0005500e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e02ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000e0348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003834 	.word	0x08003834

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003834 	.word	0x08003834

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
    ITM_SendChar(*ptr++);
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
  }
  return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fc26 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f82c 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8e8 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f0:	f000 f86e 	bl	80002d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f8ba 	bl	800036c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(200); //После паузы
 80001f8:	20c8      	movs	r0, #200	; 0xc8
 80001fa:	f000 fc4d 	bl	8000a98 <HAL_Delay>
	HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET); // Переключаем пин "BluetoothReset" в значение Hight этим мы разбудим модуль Bluetoot
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0x54>)
 8000206:	f000 ff19 	bl	800103c <HAL_GPIO_WritePin>
	HAL_Delay(1000); // Ждем пробуждения Bluetoot
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f000 fc43 	bl	8000a98 <HAL_Delay>
	memset(buffer, 0, sizeof(buffer)); // Очищаем буфер
 8000212:	2232      	movs	r2, #50	; 0x32
 8000214:	2100      	movs	r1, #0
 8000216:	4808      	ldr	r0, [pc, #32]	; (8000238 <main+0x58>)
 8000218:	f002 fc16 	bl	8002a48 <memset>
	HAL_TIM_Base_Start_IT(&htim2); // Запускаем таймер который стартует каждые 20мсек.
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0x5c>)
 800021e:	f001 fbc1 	bl	80019a4 <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // И задействуем прерывания от UART
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <main+0x60>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68da      	ldr	r2, [r3, #12]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <main+0x60>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f042 0220 	orr.w	r2, r2, #32
 8000230:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000232:	e7fe      	b.n	8000232 <main+0x52>
 8000234:	40011000 	.word	0x40011000
 8000238:	20000124 	.word	0x20000124
 800023c:	2000009c 	.word	0x2000009c
 8000240:	200000e4 	.word	0x200000e4

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fbf8 	bl	8002a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 feed 	bl	800106c <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000298:	f000 f902 	bl	80004a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f958 	bl	800156c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c2:	f000 f8ed 	bl	80004a0 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_TIM2_Init+0x98>)
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <MX_TIM2_Init+0x98>)
 80002f6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80002fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_TIM2_Init+0x98>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_TIM2_Init+0x98>)
 8000304:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000308:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_TIM2_Init+0x98>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_TIM2_Init+0x98>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000316:	4814      	ldr	r0, [pc, #80]	; (8000368 <MX_TIM2_Init+0x98>)
 8000318:	f001 faf4 	bl	8001904 <HAL_TIM_Base_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000322:	f000 f8bd 	bl	80004a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	4619      	mov	r1, r3
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_TIM2_Init+0x98>)
 8000334:	f001 fc90 	bl	8001c58 <HAL_TIM_ConfigClockSource>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800033e:	f000 f8af 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	2300      	movs	r3, #0
 8000344:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	4619      	mov	r1, r3
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <MX_TIM2_Init+0x98>)
 8000350:	f001 fe56 	bl	8002000 <HAL_TIMEx_MasterConfigSynchronization>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800035a:	f000 f8a1 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000009c 	.word	0x2000009c

0800036c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART2_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000378:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800037c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f001 fe9c 	bl	80020e0 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f877 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000e4 	.word	0x200000e4
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b27      	ldr	r3, [pc, #156]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a26      	ldr	r2, [pc, #152]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b21      	ldr	r3, [pc, #132]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a20      	ldr	r2, [pc, #128]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <MX_GPIO_Init+0xb4>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_GPIO_Init+0xb4>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a1a      	ldr	r2, [pc, #104]	; (8000474 <MX_GPIO_Init+0xb4>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_GPIO_Init+0xb4>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_GPIO_Init+0xb4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <MX_GPIO_Init+0xb4>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_GPIO_Init+0xb4>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	480f      	ldr	r0, [pc, #60]	; (8000478 <MX_GPIO_Init+0xb8>)
 800043c:	f000 fdfe 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000446:	480c      	ldr	r0, [pc, #48]	; (8000478 <MX_GPIO_Init+0xb8>)
 8000448:	f000 fdf8 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 800044c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_GPIO_Init+0xb8>)
 8000466:	f000 fc8f 	bl	8000d88 <HAL_GPIO_Init>

}
 800046a:	bf00      	nop
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000

0800047c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d101      	bne.n	8000492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048e:	f000 fae7 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40000800 	.word	0x40000800

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004a6:	e7fe      	b.n	80004a6 <Error_Handler+0x6>

080004a8 <string_compare>:
#include "mylibrary.h"

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length) {
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	4613      	mov	r3, r2
 80004b4:	80fb      	strh	r3, [r7, #6]
	uint8_t comVAR = 0, i;
 80004b6:	2300      	movs	r3, #0
 80004b8:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < length; i++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	75bb      	strb	r3, [r7, #22]
 80004be:	e012      	b.n	80004e6 <string_compare+0x3e>
		if (array1[i] == array2[i])
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4413      	add	r3, r2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	7dbb      	ldrb	r3, [r7, #22]
 80004ca:	68b9      	ldr	r1, [r7, #8]
 80004cc:	440b      	add	r3, r1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d103      	bne.n	80004dc <string_compare+0x34>
			comVAR++;
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	3301      	adds	r3, #1
 80004d8:	75fb      	strb	r3, [r7, #23]
 80004da:	e001      	b.n	80004e0 <string_compare+0x38>
		else
			comVAR = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < length; i++) {
 80004e0:	7dbb      	ldrb	r3, [r7, #22]
 80004e2:	3301      	adds	r3, #1
 80004e4:	75bb      	strb	r3, [r7, #22]
 80004e6:	7dbb      	ldrb	r3, [r7, #22]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	88fa      	ldrh	r2, [r7, #6]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d8e7      	bhi.n	80004c0 <string_compare+0x18>
	}
	if (comVAR == length)
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	88fa      	ldrh	r2, [r7, #6]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d101      	bne.n	80004fe <string_compare+0x56>
		return 1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <string_compare+0x58>
	else
		return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	371c      	adds	r7, #28
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
	...

0800050c <Message_handler>:

void Message_handler() {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if (string_compare(buffer, "LED ON", strlen("LED ON"))) // Если получили сообщение "LED ON"
 8000510:	2206      	movs	r2, #6
 8000512:	492a      	ldr	r1, [pc, #168]	; (80005bc <Message_handler+0xb0>)
 8000514:	482a      	ldr	r0, [pc, #168]	; (80005c0 <Message_handler+0xb4>)
 8000516:	f7ff ffc7 	bl	80004a8 <string_compare>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d010      	beq.n	8000542 <Message_handler+0x36>
			//if (string_compare(buffer, "1", strlen("1"))) // Если получили сообщение "LED ON"
			{
		printf("LED is ON");
 8000520:	4828      	ldr	r0, [pc, #160]	; (80005c4 <Message_handler+0xb8>)
 8000522:	f002 fa99 	bl	8002a58 <iprintf>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4826      	ldr	r0, [pc, #152]	; (80005c8 <Message_handler+0xbc>)
 800052e:	f000 fd85 	bl	800103c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*) "LED is ON.\n",
 8000532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000536:	220b      	movs	r2, #11
 8000538:	4924      	ldr	r1, [pc, #144]	; (80005cc <Message_handler+0xc0>)
 800053a:	4825      	ldr	r0, [pc, #148]	; (80005d0 <Message_handler+0xc4>)
 800053c:	f001 fe1d 	bl	800217a <HAL_UART_Transmit>
 8000540:	e02f      	b.n	80005a2 <Message_handler+0x96>
				strlen("LED is ON.\n"), 500);
	} else if (string_compare(buffer, "LED OFF", strlen("LED OFF"))) { // Если получили сообщение "LED OFF"
 8000542:	2207      	movs	r2, #7
 8000544:	4923      	ldr	r1, [pc, #140]	; (80005d4 <Message_handler+0xc8>)
 8000546:	481e      	ldr	r0, [pc, #120]	; (80005c0 <Message_handler+0xb4>)
 8000548:	f7ff ffae 	bl	80004a8 <string_compare>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d010      	beq.n	8000574 <Message_handler+0x68>
		//} else if (string_compare(buffer, "2", strlen("2"))) {
		printf("LED is OFF");
 8000552:	4821      	ldr	r0, [pc, #132]	; (80005d8 <Message_handler+0xcc>)
 8000554:	f002 fa80 	bl	8002a58 <iprintf>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	481a      	ldr	r0, [pc, #104]	; (80005c8 <Message_handler+0xbc>)
 8000560:	f000 fd6c 	bl	800103c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*) "LED is OFF.\n",
 8000564:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000568:	220c      	movs	r2, #12
 800056a:	491c      	ldr	r1, [pc, #112]	; (80005dc <Message_handler+0xd0>)
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <Message_handler+0xc4>)
 800056e:	f001 fe04 	bl	800217a <HAL_UART_Transmit>
 8000572:	e016      	b.n	80005a2 <Message_handler+0x96>
				strlen("LED is OFF.\n"), 500);
	} else {
		strcat(buffer, "\n");
 8000574:	4812      	ldr	r0, [pc, #72]	; (80005c0 <Message_handler+0xb4>)
 8000576:	f7ff fde9 	bl	800014c <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <Message_handler+0xb4>)
 8000580:	4413      	add	r3, r2
 8000582:	4917      	ldr	r1, [pc, #92]	; (80005e0 <Message_handler+0xd4>)
 8000584:	461a      	mov	r2, r3
 8000586:	460b      	mov	r3, r1
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <Message_handler+0xb4>)
 800058e:	f7ff fddd 	bl	800014c <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059a:	4909      	ldr	r1, [pc, #36]	; (80005c0 <Message_handler+0xb4>)
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <Message_handler+0xc4>)
 800059e:	f001 fdec 	bl	800217a <HAL_UART_Transmit>
	}
	// Обнуляем переменные.
	memset(buffer, 0, sizeof(buffer));
 80005a2:	2232      	movs	r2, #50	; 0x32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <Message_handler+0xb4>)
 80005a8:	f002 fa4e 	bl	8002a48 <memset>
	buffer_index = 0;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <Message_handler+0xd8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <Message_handler+0xdc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	0800384c 	.word	0x0800384c
 80005c0:	20000124 	.word	0x20000124
 80005c4:	08003854 	.word	0x08003854
 80005c8:	40011000 	.word	0x40011000
 80005cc:	08003860 	.word	0x08003860
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	0800386c 	.word	0x0800386c
 80005d8:	08003874 	.word	0x08003874
 80005dc:	08003880 	.word	0x08003880
 80005e0:	08003890 	.word	0x08003890
 80005e4:	2000008d 	.word	0x2000008d
 80005e8:	2000008c 	.word	0x2000008c

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x60>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_MspInit+0x60>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000660:	d113      	bne.n	800068a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_TIM_Base_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	201c      	movs	r0, #28
 8000680:	f000 fae1 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000684:	201c      	movs	r0, #28
 8000686:	f000 fafa 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <HAL_UART_MspInit+0x98>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d137      	bne.n	8000728 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_UART_MspInit+0x9c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	480f      	ldr	r0, [pc, #60]	; (8000738 <HAL_UART_MspInit+0xa0>)
 80006fc:	f000 fb44 	bl	8000d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000700:	2308      	movs	r3, #8
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_UART_MspInit+0xa0>)
 8000714:	f000 fb38 	bl	8000d88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2026      	movs	r0, #38	; 0x26
 800071e:	f000 fa92 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000722:	2026      	movs	r0, #38	; 0x26
 8000724:	f000 faab 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	201e      	movs	r0, #30
 8000752:	f000 fa78 	bl	8000c46 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000756:	201e      	movs	r0, #30
 8000758:	f000 fa91 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_InitTick+0xa0>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <HAL_InitTick+0xa0>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_InitTick+0xa0>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000774:	f107 0210 	add.w	r2, r7, #16
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f872 	bl	8001868 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000784:	f001 f848 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8000788:	4603      	mov	r3, r0
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_InitTick+0xa4>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	0c9b      	lsrs	r3, r3, #18
 8000798:	3b01      	subs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <HAL_InitTick+0xa8>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <HAL_InitTick+0xac>)
 80007a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_InitTick+0xa8>)
 80007a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_InitTick+0xa8>)
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_InitTick+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_InitTick+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <HAL_InitTick+0xa8>)
 80007be:	f001 f8a1 	bl	8001904 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HAL_InitTick+0xa8>)
 80007ca:	f001 f8eb 	bl	80019a4 <HAL_TIM_Base_Start_IT>
 80007ce:	4603      	mov	r3, r0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	431bde83 	.word	0x431bde83
 80007e4:	20000158 	.word	0x20000158
 80007e8:	40000800 	.word	0x40000800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
	...

0800083c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (strlen(buffer) > 0)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <TIM2_IRQHandler+0x30>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <TIM2_IRQHandler+0x18>
		timer_count++;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <TIM2_IRQHandler+0x34>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <TIM2_IRQHandler+0x34>)
 8000852:	701a      	strb	r2, [r3, #0]

	if (timer_count > 5)
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <TIM2_IRQHandler+0x34>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b05      	cmp	r3, #5
 800085a:	d901      	bls.n	8000860 <TIM2_IRQHandler+0x24>
		Message_handler();
 800085c:	f7ff fe56 	bl	800050c <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <TIM2_IRQHandler+0x38>)
 8000862:	f001 f8f1 	bl	8001a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000124 	.word	0x20000124
 8000870:	2000008c 	.word	0x2000008c
 8000874:	2000009c 	.word	0x2000009c

08000878 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM4_IRQHandler+0x10>)
 800087e:	f001 f8e3 	bl	8001a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000158 	.word	0x20000158

0800088c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*) &buffer[buffer_index++], 1, 10);
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <USART2_IRQHandler+0x3c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	b2d1      	uxtb	r1, r2
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <USART2_IRQHandler+0x3c>)
 800089a:	7011      	strb	r1, [r2, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <USART2_IRQHandler+0x40>)
 80008a0:	18d1      	adds	r1, r2, r3
 80008a2:	230a      	movs	r3, #10
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <USART2_IRQHandler+0x44>)
 80008a8:	f001 fcf9 	bl	800229e <HAL_UART_Receive>

	if (buffer[buffer_index - 1] == '\n')
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <USART2_IRQHandler+0x3c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <USART2_IRQHandler+0x40>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	2b0a      	cmp	r3, #10
 80008b8:	d101      	bne.n	80008be <USART2_IRQHandler+0x32>
		Message_handler();
 80008ba:	f7ff fe27 	bl	800050c <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <USART2_IRQHandler+0x44>)
 80008c0:	f001 fd8c 	bl	80023dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008d 	.word	0x2000008d
 80008cc:	20000124 	.word	0x20000124
 80008d0:	200000e4 	.word	0x200000e4

080008d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
	}

return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:
	}
	return len;
}

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	605a      	str	r2, [r3, #4]
	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <_isatty>:

int _isatty(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	return 1;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
	...

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <_sbrk+0x5c>)
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <_sbrk+0x60>)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_sbrk+0x64>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <_sbrk+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d207      	bcs.n	80009b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a0:	f002 f828 	bl	80029f4 <__errno>
 80009a4:	4602      	mov	r2, r0
 80009a6:	230c      	movs	r3, #12
 80009a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20005000 	.word	0x20005000
 80009d0:	00000400 	.word	0x00000400
 80009d4:	20000090 	.word	0x20000090
 80009d8:	200001a8 	.word	0x200001a8

080009dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ffe5 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fff5 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fbe3 	bl	80001e0 <main>
  bx lr
 8000a1a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a1c:	08003960 	.word	0x08003960
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a24:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a28:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000a2c:	200001a8 	.word	0x200001a8

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f8f3 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fe76 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fdcc 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200001a0 	.word	0x200001a0

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	200001a0 	.word	0x200001a0

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_Delay+0x40>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000008 	.word	0x20000008

08000adc <__NVIC_SetPriorityGrouping>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4906      	ldr	r1, [pc, #24]	; (8000b74 <__NVIC_EnableIRQ+0x34>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff4f 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff64 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ffb2 	bl	8000bcc <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff81 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff57 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d005      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e051      	b.n	8000d62 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 020e 	bic.w	r2, r2, #14
 8000ccc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0201 	bic.w	r2, r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_DMA_Abort_IT+0xd0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d029      	beq.n	8000d3c <HAL_DMA_Abort_IT+0xa0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <HAL_DMA_Abort_IT+0xd4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d022      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x9c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_DMA_Abort_IT+0xd8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d01a      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x96>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_DMA_Abort_IT+0xdc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d012      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x90>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_DMA_Abort_IT+0xe0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00a      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x8a>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_DMA_Abort_IT+0xe4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d102      	bne.n	8000d20 <HAL_DMA_Abort_IT+0x84>
 8000d1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d1e:	e00e      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d24:	e00b      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2a:	e008      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	e005      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	e002      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d38:	2310      	movs	r3, #16
 8000d3a:	e000      	b.n	8000d3e <HAL_DMA_Abort_IT+0xa2>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_DMA_Abort_IT+0xe8>)
 8000d40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
    } 
  }
  return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020008 	.word	0x40020008
 8000d70:	4002001c 	.word	0x4002001c
 8000d74:	40020030 	.word	0x40020030
 8000d78:	40020044 	.word	0x40020044
 8000d7c:	40020058 	.word	0x40020058
 8000d80:	4002006c 	.word	0x4002006c
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e127      	b.n	8000fec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8116 	bne.w	8000fe6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d034      	beq.n	8000e2c <HAL_GPIO_Init+0xa4>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d80d      	bhi.n	8000de2 <HAL_GPIO_Init+0x5a>
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d02b      	beq.n	8000e22 <HAL_GPIO_Init+0x9a>
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d804      	bhi.n	8000dd8 <HAL_GPIO_Init+0x50>
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d031      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d01c      	beq.n	8000e10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd6:	e048      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d043      	beq.n	8000e64 <HAL_GPIO_Init+0xdc>
 8000ddc:	2b11      	cmp	r3, #17
 8000dde:	d01b      	beq.n	8000e18 <HAL_GPIO_Init+0x90>
          break;
 8000de0:	e043      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000de2:	4a89      	ldr	r2, [pc, #548]	; (8001008 <HAL_GPIO_Init+0x280>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d026      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
 8000de8:	4a87      	ldr	r2, [pc, #540]	; (8001008 <HAL_GPIO_Init+0x280>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d806      	bhi.n	8000dfc <HAL_GPIO_Init+0x74>
 8000dee:	4a87      	ldr	r2, [pc, #540]	; (800100c <HAL_GPIO_Init+0x284>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d020      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
 8000df4:	4a86      	ldr	r2, [pc, #536]	; (8001010 <HAL_GPIO_Init+0x288>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01d      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
          break;
 8000dfa:	e036      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dfc:	4a85      	ldr	r2, [pc, #532]	; (8001014 <HAL_GPIO_Init+0x28c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
 8000e02:	4a85      	ldr	r2, [pc, #532]	; (8001018 <HAL_GPIO_Init+0x290>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d016      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
 8000e08:	4a84      	ldr	r2, [pc, #528]	; (800101c <HAL_GPIO_Init+0x294>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0xae>
          break;
 8000e0e:	e02c      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e028      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e023      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	3308      	adds	r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e01e      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	330c      	adds	r3, #12
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e019      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e012      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	611a      	str	r2, [r3, #16]
          break;
 8000e56:	e008      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	615a      	str	r2, [r3, #20]
          break;
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2bff      	cmp	r3, #255	; 0xff
 8000e6e:	d801      	bhi.n	8000e74 <HAL_GPIO_Init+0xec>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	e001      	b.n	8000e78 <HAL_GPIO_Init+0xf0>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	2bff      	cmp	r3, #255	; 0xff
 8000e7e:	d802      	bhi.n	8000e86 <HAL_GPIO_Init+0xfe>
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x104>
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	3b08      	subs	r3, #8
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	210f      	movs	r1, #15
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	6a39      	ldr	r1, [r7, #32]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8096 	beq.w	8000fe6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <HAL_GPIO_Init+0x298>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a58      	ldr	r2, [pc, #352]	; (8001020 <HAL_GPIO_Init+0x298>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HAL_GPIO_Init+0x298>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed2:	4a54      	ldr	r2, [pc, #336]	; (8001024 <HAL_GPIO_Init+0x29c>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <HAL_GPIO_Init+0x2a0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x19e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	; (800102c <HAL_GPIO_Init+0x2a4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x19a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a49      	ldr	r2, [pc, #292]	; (8001030 <HAL_GPIO_Init+0x2a8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x196>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a48      	ldr	r2, [pc, #288]	; (8001034 <HAL_GPIO_Init+0x2ac>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x192>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x1a0>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x1a0>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x1a0>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x1a0>
 8000f26:	2300      	movs	r3, #0
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f38:	493a      	ldr	r1, [pc, #232]	; (8001024 <HAL_GPIO_Init+0x29c>)
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4938      	ldr	r1, [pc, #224]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4933      	ldr	r1, [pc, #204]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	492e      	ldr	r1, [pc, #184]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4929      	ldr	r1, [pc, #164]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4924      	ldr	r1, [pc, #144]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	608b      	str	r3, [r1, #8]
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	491f      	ldr	r1, [pc, #124]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	491a      	ldr	r1, [pc, #104]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60cb      	str	r3, [r1, #12]
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4915      	ldr	r1, [pc, #84]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f aed0 	bne.w	8000d9c <HAL_GPIO_Init+0x14>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	372c      	adds	r7, #44	; 0x2c
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	10210000 	.word	0x10210000
 800100c:	10110000 	.word	0x10110000
 8001010:	10120000 	.word	0x10120000
 8001014:	10310000 	.word	0x10310000
 8001018:	10320000 	.word	0x10320000
 800101c:	10220000 	.word	0x10220000
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	40010800 	.word	0x40010800
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40011000 	.word	0x40011000
 8001034:	40011400 	.word	0x40011400
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	611a      	str	r2, [r3, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e26c      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8087 	beq.w	800119a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800108c:	4b92      	ldr	r3, [pc, #584]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b04      	cmp	r3, #4
 8001096:	d00c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001098:	4b8f      	ldr	r3, [pc, #572]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d112      	bne.n	80010ca <HAL_RCC_OscConfig+0x5e>
 80010a4:	4b8c      	ldr	r3, [pc, #560]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b0:	d10b      	bne.n	80010ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b2:	4b89      	ldr	r3, [pc, #548]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d06c      	beq.n	8001198 <HAL_RCC_OscConfig+0x12c>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d168      	bne.n	8001198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e246      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x76>
 80010d4:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a7f      	ldr	r2, [pc, #508]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e02e      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b7b      	ldr	r3, [pc, #492]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7a      	ldr	r2, [pc, #488]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b78      	ldr	r3, [pc, #480]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a77      	ldr	r2, [pc, #476]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e01d      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0xbc>
 800110e:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a71      	ldr	r2, [pc, #452]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6e      	ldr	r2, [pc, #440]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 8001128:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a6a      	ldr	r2, [pc, #424]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a67      	ldr	r2, [pc, #412]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc9c 	bl	8000a84 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fc98 	bl	8000a84 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1fa      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0xe4>
 800116e:	e014      	b.n	800119a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fc88 	bl	8000a84 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fc84 	bl	8000a84 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e1e6      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x10c>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d063      	beq.n	800126e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d11c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x18c>
 80011be:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1ba      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4939      	ldr	r1, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	e03a      	b.n	800126e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x270>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fc3d 	bl	8000a84 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fc39 	bl	8000a84 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e19b      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4927      	ldr	r1, [pc, #156]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_RCC_OscConfig+0x270>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fc1c 	bl	8000a84 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc18 	bl	8000a84 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e17a      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d03a      	beq.n	80012f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d019      	beq.n	80012b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_RCC_OscConfig+0x274>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fbfc 	bl	8000a84 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fbf8 	bl	8000a84 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e15a      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fb0a 	bl	80018c8 <RCC_Delay>
 80012b4:	e01c      	b.n	80012f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fbe2 	bl	8000a84 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	e00f      	b.n	80012e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fbde 	bl	8000a84 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d908      	bls.n	80012e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e140      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	42420000 	.word	0x42420000
 80012e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b9e      	ldr	r3, [pc, #632]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e9      	bne.n	80012c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a6 	beq.w	800144a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b97      	ldr	r3, [pc, #604]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10d      	bne.n	800132a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b94      	ldr	r3, [pc, #592]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a93      	ldr	r2, [pc, #588]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b91      	ldr	r3, [pc, #580]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b8e      	ldr	r3, [pc, #568]	; (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x4f8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001342:	f7ff fb9f 	bl	8000a84 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134a:	f7ff fb9b 	bl	8000a84 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0fd      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x4f8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x312>
 8001370:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	e02d      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x334>
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a75      	ldr	r2, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	4b73      	ldr	r3, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a72      	ldr	r2, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	e01c      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x356>
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a6c      	ldr	r2, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a69      	ldr	r2, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e00b      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d015      	beq.n	800140e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb4f 	bl	8000a84 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb4b 	bl	8000a84 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0ab      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ee      	beq.n	80013ea <HAL_RCC_OscConfig+0x37e>
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb39 	bl	8000a84 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fb35 	bl	8000a84 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	; 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e095      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ee      	bne.n	8001416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d105      	bne.n	800144a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8081 	beq.w	8001556 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d061      	beq.n	8001524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d146      	bne.n	80014f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x4fc>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb09 	bl	8000a84 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb05 	bl	8000a84 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e067      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d108      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	492d      	ldr	r1, [pc, #180]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a19      	ldr	r1, [r3, #32]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	430b      	orrs	r3, r1
 80014c2:	4927      	ldr	r1, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x4fc>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fad9 	bl	8000a84 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fad5 	bl	8000a84 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e037      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46a>
 80014f4:	e02f      	b.n	8001556 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_RCC_OscConfig+0x4fc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fac2 	bl	8000a84 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fabe 	bl	8000a84 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e020      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x498>
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e013      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	429a      	cmp	r2, r3
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	40007000 	.word	0x40007000
 8001568:	42420060 	.word	0x42420060

0800156c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0d0      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b6a      	ldr	r3, [pc, #424]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d910      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0207 	bic.w	r2, r3, #7
 8001596:	4965      	ldr	r1, [pc, #404]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d040      	beq.n	800168c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d115      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e073      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06b      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4936      	ldr	r1, [pc, #216]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800165c:	f7ff fa12 	bl	8000a84 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff fa0e 	bl	8000a84 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e053      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 020c 	and.w	r2, r3, #12
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	429a      	cmp	r2, r3
 800168a:	d1eb      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d210      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	4922      	ldr	r1, [pc, #136]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4601      	mov	r1, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	fa21 f303 	lsr.w	r3, r1, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1cc>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1d0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f80e 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000
 8001730:	40021000 	.word	0x40021000
 8001734:	080038a8 	.word	0x080038a8
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	b490      	push	{r4, r7}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001748:	1d3c      	adds	r4, r7, #4
 800174a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b04      	cmp	r3, #4
 8001778:	d002      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x40>
 800177a:	2b08      	cmp	r3, #8
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x46>
 800177e:	e02d      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001782:	623b      	str	r3, [r7, #32]
      break;
 8001784:	e02d      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001792:	4413      	add	r3, r2
 8001794:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001798:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c5b      	lsrs	r3, r3, #17
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017b2:	4413      	add	r3, r2
 80017b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017be:	fb02 f203 	mul.w	r2, r2, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	e004      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	623b      	str	r3, [r7, #32]
      break;
 80017da:	e002      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017de:	623b      	str	r3, [r7, #32]
      break;
 80017e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e2:	6a3b      	ldr	r3, [r7, #32]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc90      	pop	{r4, r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	08003894 	.word	0x08003894
 80017f4:	080038a4 	.word	0x080038a4
 80017f8:	40021000 	.word	0x40021000
 80017fc:	007a1200 	.word	0x007a1200
 8001800:	003d0900 	.word	0x003d0900

08001804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_RCC_GetHCLKFreq+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff2 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	080038b8 	.word	0x080038b8

08001840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001844:	f7ff ffde 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001848:	4601      	mov	r1, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0adb      	lsrs	r3, r3, #11
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	080038b8 	.word	0x080038b8

08001868 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	220f      	movs	r2, #15
 8001876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0207 	and.w	r2, r3, #7
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40022000 	.word	0x40022000

080018c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_Delay+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_Delay+0x38>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e4:	bf00      	nop
  }
  while (Delay --);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <RCC_Delay+0x1c>
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e041      	b.n	800199a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fe90 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 fa64 	bl	8001e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e03a      	b.n	8001a32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_TIM_Base_Start_IT+0x98>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e6:	d009      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d010      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	e007      	b.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800

08001a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0202 	mvn.w	r2, #2
 8001a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f9a4 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f997 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f9a6 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0204 	mvn.w	r2, #4
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f97a 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f96d 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f97c 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0208 	mvn.w	r2, #8
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f950 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f943 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f952 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0210 	mvn.w	r2, #16
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2208      	movs	r2, #8
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f926 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f919 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f928 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0201 	mvn.w	r2, #1
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fc58 	bl	800047c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b80      	cmp	r3, #128	; 0x80
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fa6b 	bl	80020ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d107      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8ec 	bl	8001dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d107      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0220 	mvn.w	r2, #32
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa36 	bl	80020bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_TIM_ConfigClockSource+0x18>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e0a6      	b.n	8001dbe <HAL_TIM_ConfigClockSource+0x166>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d067      	beq.n	8001d78 <HAL_TIM_ConfigClockSource+0x120>
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	d80b      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x6c>
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d073      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x140>
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d802      	bhi.n	8001cba <HAL_TIM_ConfigClockSource+0x62>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d06f      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001cb8:	e078      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d06c      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x140>
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d06a      	beq.n	8001d98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001cc2:	e073      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cc4:	2b70      	cmp	r3, #112	; 0x70
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_TIM_ConfigClockSource+0x8c>
 8001cc8:	2b70      	cmp	r3, #112	; 0x70
 8001cca:	d804      	bhi.n	8001cd6 <HAL_TIM_ConfigClockSource+0x7e>
 8001ccc:	2b50      	cmp	r3, #80	; 0x50
 8001cce:	d033      	beq.n	8001d38 <HAL_TIM_ConfigClockSource+0xe0>
 8001cd0:	2b60      	cmp	r3, #96	; 0x60
 8001cd2:	d041      	beq.n	8001d58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001cd4:	e06a      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cda:	d066      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x152>
 8001cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce0:	d017      	beq.n	8001d12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001ce2:	e063      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f000 f965 	bl	8001fc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]
      break;
 8001d10:	e04c      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f000 f94e 	bl	8001fc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d34:	609a      	str	r2, [r3, #8]
      break;
 8001d36:	e039      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f000 f8c5 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2150      	movs	r1, #80	; 0x50
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f91c 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d56:	e029      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f000 f8e3 	bl	8001f30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2160      	movs	r1, #96	; 0x60
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f90c 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d76:	e019      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f000 f8a5 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f8fc 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d96:	e009      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f8f3 	bl	8001f8e <TIM_ITRx_SetConfig>
        break;
 8001da8:	e000      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
	...

08001e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00b      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d007      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <TIM_Base_SetConfig+0xbc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d003      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d108      	bne.n	8001e52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <TIM_Base_SetConfig+0xbc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d103      	bne.n	8001eb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	615a      	str	r2, [r3, #20]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800

08001ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0201 	bic.w	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f023 030a 	bic.w	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f023 0210 	bic.w	r2, r3, #16
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	031b      	lsls	r3, r3, #12
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	621a      	str	r2, [r3, #32]
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f043 0307 	orr.w	r3, r3, #7
 8001fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	021a      	lsls	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	609a      	str	r2, [r3, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e046      	b.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d009      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10c      	bne.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4313      	orrs	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800

080020bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e03f      	b.n	8002172 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fac6 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fbd7 	bl	80028d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b08a      	sub	sp, #40	; 0x28
 800217e:	af02      	add	r7, sp, #8
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	d17c      	bne.n	8002294 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_UART_Transmit+0x2c>
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e075      	b.n	8002296 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_UART_Transmit+0x3e>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e06e      	b.n	8002296 <HAL_UART_Transmit+0x11c>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2221      	movs	r2, #33	; 0x21
 80021ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fc59 	bl	8000a84 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d108      	bne.n	80021fc <HAL_UART_Transmit+0x82>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e003      	b.n	8002204 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800220c:	e02a      	b.n	8002264 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f9fa 	bl	8002612 <UART_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e036      	b.n	8002296 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800223c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	3302      	adds	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e007      	b.n	8002256 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1cf      	bne.n	800220e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f9ca 	bl	8002612 <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b08a      	sub	sp, #40	; 0x28
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	f040 8089 	bne.w	80023d2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_UART_Receive+0x2e>
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e081      	b.n	80023d4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_UART_Receive+0x40>
 80022da:	2302      	movs	r3, #2
 80022dc:	e07a      	b.n	80023d4 <HAL_UART_Receive+0x136>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2222      	movs	r2, #34	; 0x22
 80022f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022f4:	f7fe fbc6 	bl	8000a84 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d108      	bne.n	8002322 <HAL_UART_Receive+0x84>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e003      	b.n	800232a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002332:	e043      	b.n	80023bc <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2200      	movs	r2, #0
 800233c:	2120      	movs	r1, #32
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f967 	bl	8002612 <UART_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e042      	b.n	80023d4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002360:	b29a      	uxth	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	3302      	adds	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	e01f      	b.n	80023ae <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d007      	beq.n	8002388 <HAL_UART_Receive+0xea>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_UART_Receive+0xf8>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e008      	b.n	80023a8 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1b6      	bne.n	8002334 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_UART_IRQHandler+0x52>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f9d5 	bl	80027d6 <UART_Receive_IT>
      return;
 800242c:	e0d1      	b.n	80025d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80b0 	beq.w	8002596 <HAL_UART_IRQHandler+0x1ba>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_UART_IRQHandler+0x70>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80a5 	beq.w	8002596 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_UART_IRQHandler+0x90>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_UART_IRQHandler+0xb0>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	f043 0202 	orr.w	r2, r3, #2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_UART_IRQHandler+0xd0>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00f      	beq.n	80024d6 <HAL_UART_IRQHandler+0xfa>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <HAL_UART_IRQHandler+0xee>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	f043 0208 	orr.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d078      	beq.n	80025d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_UART_IRQHandler+0x11c>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f96f 	bl	80027d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_UART_IRQHandler+0x144>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d031      	beq.n	8002584 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8c0 	bl	80026a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002542:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_UART_IRQHandler+0x1fc>)
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fb9f 	bl	8000c9c <HAL_DMA_Abort_IT>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d016      	beq.n	8002592 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800256e:	4610      	mov	r0, r2
 8002570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002572:	e00e      	b.n	8002592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f843 	bl	8002600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257a:	e00a      	b.n	8002592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f83f 	bl	8002600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002582:	e006      	b.n	8002592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f83b 	bl	8002600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002590:	e01e      	b.n	80025d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002592:	bf00      	nop
    return;
 8002594:	e01c      	b.n	80025d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_UART_IRQHandler+0x1d6>
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8ac 	bl	8002708 <UART_Transmit_IT>
    return;
 80025b0:	e00f      	b.n	80025d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_UART_IRQHandler+0x1f6>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8ed 	bl	80027a6 <UART_EndTransmit_IT>
    return;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80025d0:	bf00      	nop
  }
}
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	080026e1 	.word	0x080026e1

080025dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002622:	e02c      	b.n	800267e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800262a:	d028      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x30>
 8002632:	f7fe fa27 	bl	8000a84 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	429a      	cmp	r2, r3
 8002640:	d21d      	bcs.n	800267e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002650:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e00f      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	429a      	cmp	r2, r3
 800269a:	d0c3      	beq.n	8002624 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ff80 	bl	8002600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b21      	cmp	r3, #33	; 0x21
 800271a:	d13e      	bne.n	800279a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002724:	d114      	bne.n	8002750 <UART_Transmit_IT+0x48>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d110      	bne.n	8002750 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]
 800274e:	e008      	b.n	8002762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6211      	str	r1, [r2, #32]
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4619      	mov	r1, r3
 8002770:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff08 	bl	80025dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b22      	cmp	r3, #34	; 0x22
 80027e8:	d170      	bne.n	80028cc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d117      	bne.n	8002824 <UART_Receive_IT+0x4e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	b29a      	uxth	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	1c9a      	adds	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
 8002822:	e026      	b.n	8002872 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d007      	beq.n	8002848 <UART_Receive_IT+0x72>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <UART_Receive_IT+0x80>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e008      	b.n	8002868 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29b      	uxth	r3, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4619      	mov	r1, r3
 8002880:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002882:	2b00      	cmp	r3, #0
 8002884:	d120      	bne.n	80028c8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0220 	bic.w	r2, r2, #32
 8002894:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fe95 	bl	80025ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e002      	b.n	80028ce <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002912:	f023 030c 	bic.w	r3, r3, #12
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	430b      	orrs	r3, r1
 800291e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <UART_SetConfig+0x114>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002940:	f7fe ff7e 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	e002      	b.n	800294e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002948:	f7fe ff66 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 800294c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009a      	lsls	r2, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <UART_SetConfig+0x118>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	0119      	lsls	r1, r3, #4
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009a      	lsls	r2, r3, #2
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fbb2 f2f3 	udiv	r2, r2, r3
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <UART_SetConfig+0x118>)
 8002986:	fba3 0302 	umull	r0, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2064      	movs	r0, #100	; 0x64
 800298e:	fb00 f303 	mul.w	r3, r0, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	3332      	adds	r3, #50	; 0x32
 8002998:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <UART_SetConfig+0x118>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a4:	4419      	add	r1, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009a      	lsls	r2, r3, #2
 80029b0:	441a      	add	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <UART_SetConfig+0x118>)
 80029be:	fba3 0302 	umull	r0, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2064      	movs	r0, #100	; 0x64
 80029c6:	fb00 f303 	mul.w	r3, r0, r3
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	3332      	adds	r3, #50	; 0x32
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <UART_SetConfig+0x118>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	440a      	add	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40013800 	.word	0x40013800
 80029f0:	51eb851f 	.word	0x51eb851f

080029f4 <__errno>:
 80029f4:	4b01      	ldr	r3, [pc, #4]	; (80029fc <__errno+0x8>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	2500      	movs	r5, #0
 8002a04:	4e0c      	ldr	r6, [pc, #48]	; (8002a38 <__libc_init_array+0x38>)
 8002a06:	4c0d      	ldr	r4, [pc, #52]	; (8002a3c <__libc_init_array+0x3c>)
 8002a08:	1ba4      	subs	r4, r4, r6
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	42a5      	cmp	r5, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	f000 ff10 	bl	8003834 <_init>
 8002a14:	2500      	movs	r5, #0
 8002a16:	4e0a      	ldr	r6, [pc, #40]	; (8002a40 <__libc_init_array+0x40>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <__libc_init_array+0x44>)
 8002a1a:	1ba4      	subs	r4, r4, r6
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	42a5      	cmp	r5, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a28:	4798      	blx	r3
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a32:	4798      	blx	r3
 8002a34:	3501      	adds	r5, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08003958 	.word	0x08003958
 8002a3c:	08003958 	.word	0x08003958
 8002a40:	08003958 	.word	0x08003958
 8002a44:	0800395c 	.word	0x0800395c

08002a48 <memset>:
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4402      	add	r2, r0
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <memset+0xa>
 8002a50:	4770      	bx	lr
 8002a52:	f803 1b01 	strb.w	r1, [r3], #1
 8002a56:	e7f9      	b.n	8002a4c <memset+0x4>

08002a58 <iprintf>:
 8002a58:	b40f      	push	{r0, r1, r2, r3}
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <iprintf+0x2c>)
 8002a5c:	b513      	push	{r0, r1, r4, lr}
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	b124      	cbz	r4, 8002a6c <iprintf+0x14>
 8002a62:	69a3      	ldr	r3, [r4, #24]
 8002a64:	b913      	cbnz	r3, 8002a6c <iprintf+0x14>
 8002a66:	4620      	mov	r0, r4
 8002a68:	f000 f84e 	bl	8002b08 <__sinit>
 8002a6c:	ab05      	add	r3, sp, #20
 8002a6e:	9a04      	ldr	r2, [sp, #16]
 8002a70:	68a1      	ldr	r1, [r4, #8]
 8002a72:	4620      	mov	r0, r4
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	f000 f953 	bl	8002d20 <_vfiprintf_r>
 8002a7a:	b002      	add	sp, #8
 8002a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a80:	b004      	add	sp, #16
 8002a82:	4770      	bx	lr
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <std>:
 8002a88:	2300      	movs	r3, #0
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a92:	6083      	str	r3, [r0, #8]
 8002a94:	8181      	strh	r1, [r0, #12]
 8002a96:	6643      	str	r3, [r0, #100]	; 0x64
 8002a98:	81c2      	strh	r2, [r0, #14]
 8002a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a9e:	6183      	str	r3, [r0, #24]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	305c      	adds	r0, #92	; 0x5c
 8002aa6:	f7ff ffcf 	bl	8002a48 <memset>
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <std+0x38>)
 8002aac:	6224      	str	r4, [r4, #32]
 8002aae:	6263      	str	r3, [r4, #36]	; 0x24
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <std+0x3c>)
 8002ab2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <std+0x40>)
 8002ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <std+0x44>)
 8002aba:	6323      	str	r3, [r4, #48]	; 0x30
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	0800327d 	.word	0x0800327d
 8002ac4:	0800329f 	.word	0x0800329f
 8002ac8:	080032d7 	.word	0x080032d7
 8002acc:	080032fb 	.word	0x080032fb

08002ad0 <_cleanup_r>:
 8002ad0:	4901      	ldr	r1, [pc, #4]	; (8002ad8 <_cleanup_r+0x8>)
 8002ad2:	f000 b885 	b.w	8002be0 <_fwalk_reent>
 8002ad6:	bf00      	nop
 8002ad8:	080035d5 	.word	0x080035d5

08002adc <__sfmoreglue>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	2568      	movs	r5, #104	; 0x68
 8002ae0:	1e4a      	subs	r2, r1, #1
 8002ae2:	4355      	muls	r5, r2
 8002ae4:	460e      	mov	r6, r1
 8002ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aea:	f000 f897 	bl	8002c1c <_malloc_r>
 8002aee:	4604      	mov	r4, r0
 8002af0:	b140      	cbz	r0, 8002b04 <__sfmoreglue+0x28>
 8002af2:	2100      	movs	r1, #0
 8002af4:	e9c0 1600 	strd	r1, r6, [r0]
 8002af8:	300c      	adds	r0, #12
 8002afa:	60a0      	str	r0, [r4, #8]
 8002afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b00:	f7ff ffa2 	bl	8002a48 <memset>
 8002b04:	4620      	mov	r0, r4
 8002b06:	bd70      	pop	{r4, r5, r6, pc}

08002b08 <__sinit>:
 8002b08:	6983      	ldr	r3, [r0, #24]
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	bb33      	cbnz	r3, 8002b5e <__sinit+0x56>
 8002b10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002b14:	6503      	str	r3, [r0, #80]	; 0x50
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <__sinit+0x58>)
 8002b18:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <__sinit+0x5c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6282      	str	r2, [r0, #40]	; 0x28
 8002b1e:	4298      	cmp	r0, r3
 8002b20:	bf04      	itt	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	6183      	streq	r3, [r0, #24]
 8002b26:	f000 f81f 	bl	8002b68 <__sfp>
 8002b2a:	6060      	str	r0, [r4, #4]
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 f81b 	bl	8002b68 <__sfp>
 8002b32:	60a0      	str	r0, [r4, #8]
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 f817 	bl	8002b68 <__sfp>
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60e0      	str	r0, [r4, #12]
 8002b3e:	2104      	movs	r1, #4
 8002b40:	6860      	ldr	r0, [r4, #4]
 8002b42:	f7ff ffa1 	bl	8002a88 <std>
 8002b46:	2201      	movs	r2, #1
 8002b48:	2109      	movs	r1, #9
 8002b4a:	68a0      	ldr	r0, [r4, #8]
 8002b4c:	f7ff ff9c 	bl	8002a88 <std>
 8002b50:	2202      	movs	r2, #2
 8002b52:	2112      	movs	r1, #18
 8002b54:	68e0      	ldr	r0, [r4, #12]
 8002b56:	f7ff ff97 	bl	8002a88 <std>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61a3      	str	r3, [r4, #24]
 8002b5e:	bd10      	pop	{r4, pc}
 8002b60:	080038c0 	.word	0x080038c0
 8002b64:	08002ad1 	.word	0x08002ad1

08002b68 <__sfp>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <__sfp+0x70>)
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	681e      	ldr	r6, [r3, #0]
 8002b70:	69b3      	ldr	r3, [r6, #24]
 8002b72:	b913      	cbnz	r3, 8002b7a <__sfp+0x12>
 8002b74:	4630      	mov	r0, r6
 8002b76:	f7ff ffc7 	bl	8002b08 <__sinit>
 8002b7a:	3648      	adds	r6, #72	; 0x48
 8002b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	d503      	bpl.n	8002b8c <__sfp+0x24>
 8002b84:	6833      	ldr	r3, [r6, #0]
 8002b86:	b133      	cbz	r3, 8002b96 <__sfp+0x2e>
 8002b88:	6836      	ldr	r6, [r6, #0]
 8002b8a:	e7f7      	b.n	8002b7c <__sfp+0x14>
 8002b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b90:	b16d      	cbz	r5, 8002bae <__sfp+0x46>
 8002b92:	3468      	adds	r4, #104	; 0x68
 8002b94:	e7f4      	b.n	8002b80 <__sfp+0x18>
 8002b96:	2104      	movs	r1, #4
 8002b98:	4638      	mov	r0, r7
 8002b9a:	f7ff ff9f 	bl	8002adc <__sfmoreglue>
 8002b9e:	6030      	str	r0, [r6, #0]
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d1f1      	bne.n	8002b88 <__sfp+0x20>
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4620      	mov	r0, r4
 8002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <__sfp+0x74>)
 8002bb0:	6665      	str	r5, [r4, #100]	; 0x64
 8002bb2:	e9c4 5500 	strd	r5, r5, [r4]
 8002bb6:	60a5      	str	r5, [r4, #8]
 8002bb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002bbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bc8:	f7ff ff3e 	bl	8002a48 <memset>
 8002bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bd4:	e7e9      	b.n	8002baa <__sfp+0x42>
 8002bd6:	bf00      	nop
 8002bd8:	080038c0 	.word	0x080038c0
 8002bdc:	ffff0001 	.word	0xffff0001

08002be0 <_fwalk_reent>:
 8002be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be4:	4680      	mov	r8, r0
 8002be6:	4689      	mov	r9, r1
 8002be8:	2600      	movs	r6, #0
 8002bea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bee:	b914      	cbnz	r4, 8002bf6 <_fwalk_reent+0x16>
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002bfa:	3f01      	subs	r7, #1
 8002bfc:	d501      	bpl.n	8002c02 <_fwalk_reent+0x22>
 8002bfe:	6824      	ldr	r4, [r4, #0]
 8002c00:	e7f5      	b.n	8002bee <_fwalk_reent+0xe>
 8002c02:	89ab      	ldrh	r3, [r5, #12]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d907      	bls.n	8002c18 <_fwalk_reent+0x38>
 8002c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	d003      	beq.n	8002c18 <_fwalk_reent+0x38>
 8002c10:	4629      	mov	r1, r5
 8002c12:	4640      	mov	r0, r8
 8002c14:	47c8      	blx	r9
 8002c16:	4306      	orrs	r6, r0
 8002c18:	3568      	adds	r5, #104	; 0x68
 8002c1a:	e7ee      	b.n	8002bfa <_fwalk_reent+0x1a>

08002c1c <_malloc_r>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	1ccd      	adds	r5, r1, #3
 8002c20:	f025 0503 	bic.w	r5, r5, #3
 8002c24:	3508      	adds	r5, #8
 8002c26:	2d0c      	cmp	r5, #12
 8002c28:	bf38      	it	cc
 8002c2a:	250c      	movcc	r5, #12
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	4606      	mov	r6, r0
 8002c30:	db01      	blt.n	8002c36 <_malloc_r+0x1a>
 8002c32:	42a9      	cmp	r1, r5
 8002c34:	d903      	bls.n	8002c3e <_malloc_r+0x22>
 8002c36:	230c      	movs	r3, #12
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	f000 fd77 	bl	8003730 <__malloc_lock>
 8002c42:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <_malloc_r+0xac>)
 8002c44:	6814      	ldr	r4, [r2, #0]
 8002c46:	4621      	mov	r1, r4
 8002c48:	b991      	cbnz	r1, 8002c70 <_malloc_r+0x54>
 8002c4a:	4c20      	ldr	r4, [pc, #128]	; (8002ccc <_malloc_r+0xb0>)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	b91b      	cbnz	r3, 8002c58 <_malloc_r+0x3c>
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 fb03 	bl	800325c <_sbrk_r>
 8002c56:	6020      	str	r0, [r4, #0]
 8002c58:	4629      	mov	r1, r5
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	f000 fafe 	bl	800325c <_sbrk_r>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d124      	bne.n	8002cae <_malloc_r+0x92>
 8002c64:	230c      	movs	r3, #12
 8002c66:	4630      	mov	r0, r6
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	f000 fd62 	bl	8003732 <__malloc_unlock>
 8002c6e:	e7e4      	b.n	8002c3a <_malloc_r+0x1e>
 8002c70:	680b      	ldr	r3, [r1, #0]
 8002c72:	1b5b      	subs	r3, r3, r5
 8002c74:	d418      	bmi.n	8002ca8 <_malloc_r+0x8c>
 8002c76:	2b0b      	cmp	r3, #11
 8002c78:	d90f      	bls.n	8002c9a <_malloc_r+0x7e>
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	18cc      	adds	r4, r1, r3
 8002c7e:	50cd      	str	r5, [r1, r3]
 8002c80:	4630      	mov	r0, r6
 8002c82:	f000 fd56 	bl	8003732 <__malloc_unlock>
 8002c86:	f104 000b 	add.w	r0, r4, #11
 8002c8a:	1d23      	adds	r3, r4, #4
 8002c8c:	f020 0007 	bic.w	r0, r0, #7
 8002c90:	1ac3      	subs	r3, r0, r3
 8002c92:	d0d3      	beq.n	8002c3c <_malloc_r+0x20>
 8002c94:	425a      	negs	r2, r3
 8002c96:	50e2      	str	r2, [r4, r3]
 8002c98:	e7d0      	b.n	8002c3c <_malloc_r+0x20>
 8002c9a:	684b      	ldr	r3, [r1, #4]
 8002c9c:	428c      	cmp	r4, r1
 8002c9e:	bf16      	itet	ne
 8002ca0:	6063      	strne	r3, [r4, #4]
 8002ca2:	6013      	streq	r3, [r2, #0]
 8002ca4:	460c      	movne	r4, r1
 8002ca6:	e7eb      	b.n	8002c80 <_malloc_r+0x64>
 8002ca8:	460c      	mov	r4, r1
 8002caa:	6849      	ldr	r1, [r1, #4]
 8002cac:	e7cc      	b.n	8002c48 <_malloc_r+0x2c>
 8002cae:	1cc4      	adds	r4, r0, #3
 8002cb0:	f024 0403 	bic.w	r4, r4, #3
 8002cb4:	42a0      	cmp	r0, r4
 8002cb6:	d005      	beq.n	8002cc4 <_malloc_r+0xa8>
 8002cb8:	1a21      	subs	r1, r4, r0
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 face 	bl	800325c <_sbrk_r>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d0cf      	beq.n	8002c64 <_malloc_r+0x48>
 8002cc4:	6025      	str	r5, [r4, #0]
 8002cc6:	e7db      	b.n	8002c80 <_malloc_r+0x64>
 8002cc8:	20000094 	.word	0x20000094
 8002ccc:	20000098 	.word	0x20000098

08002cd0 <__sfputc_r>:
 8002cd0:	6893      	ldr	r3, [r2, #8]
 8002cd2:	b410      	push	{r4}
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	6093      	str	r3, [r2, #8]
 8002cda:	da07      	bge.n	8002cec <__sfputc_r+0x1c>
 8002cdc:	6994      	ldr	r4, [r2, #24]
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	db01      	blt.n	8002ce6 <__sfputc_r+0x16>
 8002ce2:	290a      	cmp	r1, #10
 8002ce4:	d102      	bne.n	8002cec <__sfputc_r+0x1c>
 8002ce6:	bc10      	pop	{r4}
 8002ce8:	f000 bb0c 	b.w	8003304 <__swbuf_r>
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	1c58      	adds	r0, r3, #1
 8002cf0:	6010      	str	r0, [r2, #0]
 8002cf2:	7019      	strb	r1, [r3, #0]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	bc10      	pop	{r4}
 8002cf8:	4770      	bx	lr

08002cfa <__sfputs_r>:
 8002cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfc:	4606      	mov	r6, r0
 8002cfe:	460f      	mov	r7, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	18d5      	adds	r5, r2, r3
 8002d04:	42ac      	cmp	r4, r5
 8002d06:	d101      	bne.n	8002d0c <__sfputs_r+0x12>
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e007      	b.n	8002d1c <__sfputs_r+0x22>
 8002d0c:	463a      	mov	r2, r7
 8002d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d12:	4630      	mov	r0, r6
 8002d14:	f7ff ffdc 	bl	8002cd0 <__sfputc_r>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d1f3      	bne.n	8002d04 <__sfputs_r+0xa>
 8002d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d20 <_vfiprintf_r>:
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	460c      	mov	r4, r1
 8002d26:	b09d      	sub	sp, #116	; 0x74
 8002d28:	4617      	mov	r7, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	b118      	cbz	r0, 8002d38 <_vfiprintf_r+0x18>
 8002d30:	6983      	ldr	r3, [r0, #24]
 8002d32:	b90b      	cbnz	r3, 8002d38 <_vfiprintf_r+0x18>
 8002d34:	f7ff fee8 	bl	8002b08 <__sinit>
 8002d38:	4b7c      	ldr	r3, [pc, #496]	; (8002f2c <_vfiprintf_r+0x20c>)
 8002d3a:	429c      	cmp	r4, r3
 8002d3c:	d158      	bne.n	8002df0 <_vfiprintf_r+0xd0>
 8002d3e:	6874      	ldr	r4, [r6, #4]
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	0718      	lsls	r0, r3, #28
 8002d44:	d55e      	bpl.n	8002e04 <_vfiprintf_r+0xe4>
 8002d46:	6923      	ldr	r3, [r4, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <_vfiprintf_r+0xe4>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d50:	2320      	movs	r3, #32
 8002d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d56:	2330      	movs	r3, #48	; 0x30
 8002d58:	f04f 0b01 	mov.w	fp, #1
 8002d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d60:	9503      	str	r5, [sp, #12]
 8002d62:	46b8      	mov	r8, r7
 8002d64:	4645      	mov	r5, r8
 8002d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d6a:	b10b      	cbz	r3, 8002d70 <_vfiprintf_r+0x50>
 8002d6c:	2b25      	cmp	r3, #37	; 0x25
 8002d6e:	d154      	bne.n	8002e1a <_vfiprintf_r+0xfa>
 8002d70:	ebb8 0a07 	subs.w	sl, r8, r7
 8002d74:	d00b      	beq.n	8002d8e <_vfiprintf_r+0x6e>
 8002d76:	4653      	mov	r3, sl
 8002d78:	463a      	mov	r2, r7
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f7ff ffbc 	bl	8002cfa <__sfputs_r>
 8002d82:	3001      	adds	r0, #1
 8002d84:	f000 80c2 	beq.w	8002f0c <_vfiprintf_r+0x1ec>
 8002d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8a:	4453      	add	r3, sl
 8002d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8e:	f898 3000 	ldrb.w	r3, [r8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80ba 	beq.w	8002f0c <_vfiprintf_r+0x1ec>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da2:	9304      	str	r3, [sp, #16]
 8002da4:	9307      	str	r3, [sp, #28]
 8002da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002daa:	931a      	str	r3, [sp, #104]	; 0x68
 8002dac:	46a8      	mov	r8, r5
 8002dae:	2205      	movs	r2, #5
 8002db0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002db4:	485e      	ldr	r0, [pc, #376]	; (8002f30 <_vfiprintf_r+0x210>)
 8002db6:	f000 fcad 	bl	8003714 <memchr>
 8002dba:	9b04      	ldr	r3, [sp, #16]
 8002dbc:	bb78      	cbnz	r0, 8002e1e <_vfiprintf_r+0xfe>
 8002dbe:	06d9      	lsls	r1, r3, #27
 8002dc0:	bf44      	itt	mi
 8002dc2:	2220      	movmi	r2, #32
 8002dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dc8:	071a      	lsls	r2, r3, #28
 8002dca:	bf44      	itt	mi
 8002dcc:	222b      	movmi	r2, #43	; 0x2b
 8002dce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dd2:	782a      	ldrb	r2, [r5, #0]
 8002dd4:	2a2a      	cmp	r2, #42	; 0x2a
 8002dd6:	d02a      	beq.n	8002e2e <_vfiprintf_r+0x10e>
 8002dd8:	46a8      	mov	r8, r5
 8002dda:	2000      	movs	r0, #0
 8002ddc:	250a      	movs	r5, #10
 8002dde:	9a07      	ldr	r2, [sp, #28]
 8002de0:	4641      	mov	r1, r8
 8002de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de6:	3b30      	subs	r3, #48	; 0x30
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	d969      	bls.n	8002ec0 <_vfiprintf_r+0x1a0>
 8002dec:	b360      	cbz	r0, 8002e48 <_vfiprintf_r+0x128>
 8002dee:	e024      	b.n	8002e3a <_vfiprintf_r+0x11a>
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <_vfiprintf_r+0x214>)
 8002df2:	429c      	cmp	r4, r3
 8002df4:	d101      	bne.n	8002dfa <_vfiprintf_r+0xda>
 8002df6:	68b4      	ldr	r4, [r6, #8]
 8002df8:	e7a2      	b.n	8002d40 <_vfiprintf_r+0x20>
 8002dfa:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <_vfiprintf_r+0x218>)
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	bf08      	it	eq
 8002e00:	68f4      	ldreq	r4, [r6, #12]
 8002e02:	e79d      	b.n	8002d40 <_vfiprintf_r+0x20>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 fae0 	bl	80033cc <__swsetup_r>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d09d      	beq.n	8002d4c <_vfiprintf_r+0x2c>
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e14:	b01d      	add	sp, #116	; 0x74
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1a:	46a8      	mov	r8, r5
 8002e1c:	e7a2      	b.n	8002d64 <_vfiprintf_r+0x44>
 8002e1e:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <_vfiprintf_r+0x210>)
 8002e20:	4645      	mov	r5, r8
 8002e22:	1a80      	subs	r0, r0, r2
 8002e24:	fa0b f000 	lsl.w	r0, fp, r0
 8002e28:	4318      	orrs	r0, r3
 8002e2a:	9004      	str	r0, [sp, #16]
 8002e2c:	e7be      	b.n	8002dac <_vfiprintf_r+0x8c>
 8002e2e:	9a03      	ldr	r2, [sp, #12]
 8002e30:	1d11      	adds	r1, r2, #4
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	9103      	str	r1, [sp, #12]
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	db01      	blt.n	8002e3e <_vfiprintf_r+0x11e>
 8002e3a:	9207      	str	r2, [sp, #28]
 8002e3c:	e004      	b.n	8002e48 <_vfiprintf_r+0x128>
 8002e3e:	4252      	negs	r2, r2
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	9207      	str	r2, [sp, #28]
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	f898 3000 	ldrb.w	r3, [r8]
 8002e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e4e:	d10e      	bne.n	8002e6e <_vfiprintf_r+0x14e>
 8002e50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002e54:	2b2a      	cmp	r3, #42	; 0x2a
 8002e56:	d138      	bne.n	8002eca <_vfiprintf_r+0x1aa>
 8002e58:	9b03      	ldr	r3, [sp, #12]
 8002e5a:	f108 0802 	add.w	r8, r8, #2
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	9203      	str	r2, [sp, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bfb8      	it	lt
 8002e68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e6c:	9305      	str	r3, [sp, #20]
 8002e6e:	4d33      	ldr	r5, [pc, #204]	; (8002f3c <_vfiprintf_r+0x21c>)
 8002e70:	2203      	movs	r2, #3
 8002e72:	f898 1000 	ldrb.w	r1, [r8]
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 fc4c 	bl	8003714 <memchr>
 8002e7c:	b140      	cbz	r0, 8002e90 <_vfiprintf_r+0x170>
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	1b40      	subs	r0, r0, r5
 8002e82:	fa03 f000 	lsl.w	r0, r3, r0
 8002e86:	9b04      	ldr	r3, [sp, #16]
 8002e88:	f108 0801 	add.w	r8, r8, #1
 8002e8c:	4303      	orrs	r3, r0
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	f898 1000 	ldrb.w	r1, [r8]
 8002e94:	2206      	movs	r2, #6
 8002e96:	482a      	ldr	r0, [pc, #168]	; (8002f40 <_vfiprintf_r+0x220>)
 8002e98:	f108 0701 	add.w	r7, r8, #1
 8002e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ea0:	f000 fc38 	bl	8003714 <memchr>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d037      	beq.n	8002f18 <_vfiprintf_r+0x1f8>
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <_vfiprintf_r+0x224>)
 8002eaa:	bb1b      	cbnz	r3, 8002ef4 <_vfiprintf_r+0x1d4>
 8002eac:	9b03      	ldr	r3, [sp, #12]
 8002eae:	3307      	adds	r3, #7
 8002eb0:	f023 0307 	bic.w	r3, r3, #7
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eba:	444b      	add	r3, r9
 8002ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ebe:	e750      	b.n	8002d62 <_vfiprintf_r+0x42>
 8002ec0:	fb05 3202 	mla	r2, r5, r2, r3
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	4688      	mov	r8, r1
 8002ec8:	e78a      	b.n	8002de0 <_vfiprintf_r+0xc0>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	250a      	movs	r5, #10
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f108 0801 	add.w	r8, r8, #1
 8002ed4:	9305      	str	r3, [sp, #20]
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002edc:	3a30      	subs	r2, #48	; 0x30
 8002ede:	2a09      	cmp	r2, #9
 8002ee0:	d903      	bls.n	8002eea <_vfiprintf_r+0x1ca>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0c3      	beq.n	8002e6e <_vfiprintf_r+0x14e>
 8002ee6:	9105      	str	r1, [sp, #20]
 8002ee8:	e7c1      	b.n	8002e6e <_vfiprintf_r+0x14e>
 8002eea:	fb05 2101 	mla	r1, r5, r1, r2
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4680      	mov	r8, r0
 8002ef2:	e7f0      	b.n	8002ed6 <_vfiprintf_r+0x1b6>
 8002ef4:	ab03      	add	r3, sp, #12
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4622      	mov	r2, r4
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <_vfiprintf_r+0x228>)
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	4630      	mov	r0, r6
 8002f00:	f3af 8000 	nop.w
 8002f04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002f08:	4681      	mov	r9, r0
 8002f0a:	d1d5      	bne.n	8002eb8 <_vfiprintf_r+0x198>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	065b      	lsls	r3, r3, #25
 8002f10:	f53f af7e 	bmi.w	8002e10 <_vfiprintf_r+0xf0>
 8002f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f16:	e77d      	b.n	8002e14 <_vfiprintf_r+0xf4>
 8002f18:	ab03      	add	r3, sp, #12
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <_vfiprintf_r+0x228>)
 8002f20:	a904      	add	r1, sp, #16
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 f888 	bl	8003038 <_printf_i>
 8002f28:	e7ec      	b.n	8002f04 <_vfiprintf_r+0x1e4>
 8002f2a:	bf00      	nop
 8002f2c:	080038e4 	.word	0x080038e4
 8002f30:	08003924 	.word	0x08003924
 8002f34:	08003904 	.word	0x08003904
 8002f38:	080038c4 	.word	0x080038c4
 8002f3c:	0800392a 	.word	0x0800392a
 8002f40:	0800392e 	.word	0x0800392e
 8002f44:	00000000 	.word	0x00000000
 8002f48:	08002cfb 	.word	0x08002cfb

08002f4c <_printf_common>:
 8002f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f50:	4691      	mov	r9, r2
 8002f52:	461f      	mov	r7, r3
 8002f54:	688a      	ldr	r2, [r1, #8]
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	4606      	mov	r6, r0
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	bfb8      	it	lt
 8002f5e:	4613      	movlt	r3, r2
 8002f60:	f8c9 3000 	str.w	r3, [r9]
 8002f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f68:	460c      	mov	r4, r1
 8002f6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f6e:	b112      	cbz	r2, 8002f76 <_printf_common+0x2a>
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8c9 3000 	str.w	r3, [r9]
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	0699      	lsls	r1, r3, #26
 8002f7a:	bf42      	ittt	mi
 8002f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f80:	3302      	addmi	r3, #2
 8002f82:	f8c9 3000 	strmi.w	r3, [r9]
 8002f86:	6825      	ldr	r5, [r4, #0]
 8002f88:	f015 0506 	ands.w	r5, r5, #6
 8002f8c:	d107      	bne.n	8002f9e <_printf_common+0x52>
 8002f8e:	f104 0a19 	add.w	sl, r4, #25
 8002f92:	68e3      	ldr	r3, [r4, #12]
 8002f94:	f8d9 2000 	ldr.w	r2, [r9]
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	42ab      	cmp	r3, r5
 8002f9c:	dc29      	bgt.n	8002ff2 <_printf_common+0xa6>
 8002f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	3300      	adds	r3, #0
 8002fa6:	bf18      	it	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	0692      	lsls	r2, r2, #26
 8002fac:	d42e      	bmi.n	800300c <_printf_common+0xc0>
 8002fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fb2:	4639      	mov	r1, r7
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	47c0      	blx	r8
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d021      	beq.n	8003000 <_printf_common+0xb4>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	68e5      	ldr	r5, [r4, #12]
 8002fc0:	f003 0306 	and.w	r3, r3, #6
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	bf18      	it	ne
 8002fc8:	2500      	movne	r5, #0
 8002fca:	f8d9 2000 	ldr.w	r2, [r9]
 8002fce:	f04f 0900 	mov.w	r9, #0
 8002fd2:	bf08      	it	eq
 8002fd4:	1aad      	subeq	r5, r5, r2
 8002fd6:	68a3      	ldr	r3, [r4, #8]
 8002fd8:	6922      	ldr	r2, [r4, #16]
 8002fda:	bf08      	it	eq
 8002fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bfc4      	itt	gt
 8002fe4:	1a9b      	subgt	r3, r3, r2
 8002fe6:	18ed      	addgt	r5, r5, r3
 8002fe8:	341a      	adds	r4, #26
 8002fea:	454d      	cmp	r5, r9
 8002fec:	d11a      	bne.n	8003024 <_printf_common+0xd8>
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e008      	b.n	8003004 <_printf_common+0xb8>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4652      	mov	r2, sl
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	47c0      	blx	r8
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d103      	bne.n	8003008 <_printf_common+0xbc>
 8003000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003008:	3501      	adds	r5, #1
 800300a:	e7c2      	b.n	8002f92 <_printf_common+0x46>
 800300c:	2030      	movs	r0, #48	; 0x30
 800300e:	18e1      	adds	r1, r4, r3
 8003010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800301a:	4422      	add	r2, r4
 800301c:	3302      	adds	r3, #2
 800301e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003022:	e7c4      	b.n	8002fae <_printf_common+0x62>
 8003024:	2301      	movs	r3, #1
 8003026:	4622      	mov	r2, r4
 8003028:	4639      	mov	r1, r7
 800302a:	4630      	mov	r0, r6
 800302c:	47c0      	blx	r8
 800302e:	3001      	adds	r0, #1
 8003030:	d0e6      	beq.n	8003000 <_printf_common+0xb4>
 8003032:	f109 0901 	add.w	r9, r9, #1
 8003036:	e7d8      	b.n	8002fea <_printf_common+0x9e>

08003038 <_printf_i>:
 8003038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800303c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003040:	460c      	mov	r4, r1
 8003042:	7e09      	ldrb	r1, [r1, #24]
 8003044:	b085      	sub	sp, #20
 8003046:	296e      	cmp	r1, #110	; 0x6e
 8003048:	4617      	mov	r7, r2
 800304a:	4606      	mov	r6, r0
 800304c:	4698      	mov	r8, r3
 800304e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003050:	f000 80b3 	beq.w	80031ba <_printf_i+0x182>
 8003054:	d822      	bhi.n	800309c <_printf_i+0x64>
 8003056:	2963      	cmp	r1, #99	; 0x63
 8003058:	d036      	beq.n	80030c8 <_printf_i+0x90>
 800305a:	d80a      	bhi.n	8003072 <_printf_i+0x3a>
 800305c:	2900      	cmp	r1, #0
 800305e:	f000 80b9 	beq.w	80031d4 <_printf_i+0x19c>
 8003062:	2958      	cmp	r1, #88	; 0x58
 8003064:	f000 8083 	beq.w	800316e <_printf_i+0x136>
 8003068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800306c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003070:	e032      	b.n	80030d8 <_printf_i+0xa0>
 8003072:	2964      	cmp	r1, #100	; 0x64
 8003074:	d001      	beq.n	800307a <_printf_i+0x42>
 8003076:	2969      	cmp	r1, #105	; 0x69
 8003078:	d1f6      	bne.n	8003068 <_printf_i+0x30>
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	0605      	lsls	r5, r0, #24
 8003080:	f103 0104 	add.w	r1, r3, #4
 8003084:	d52a      	bpl.n	80030dc <_printf_i+0xa4>
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da03      	bge.n	8003096 <_printf_i+0x5e>
 800308e:	222d      	movs	r2, #45	; 0x2d
 8003090:	425b      	negs	r3, r3
 8003092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003096:	486f      	ldr	r0, [pc, #444]	; (8003254 <_printf_i+0x21c>)
 8003098:	220a      	movs	r2, #10
 800309a:	e039      	b.n	8003110 <_printf_i+0xd8>
 800309c:	2973      	cmp	r1, #115	; 0x73
 800309e:	f000 809d 	beq.w	80031dc <_printf_i+0x1a4>
 80030a2:	d808      	bhi.n	80030b6 <_printf_i+0x7e>
 80030a4:	296f      	cmp	r1, #111	; 0x6f
 80030a6:	d020      	beq.n	80030ea <_printf_i+0xb2>
 80030a8:	2970      	cmp	r1, #112	; 0x70
 80030aa:	d1dd      	bne.n	8003068 <_printf_i+0x30>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	e003      	b.n	80030be <_printf_i+0x86>
 80030b6:	2975      	cmp	r1, #117	; 0x75
 80030b8:	d017      	beq.n	80030ea <_printf_i+0xb2>
 80030ba:	2978      	cmp	r1, #120	; 0x78
 80030bc:	d1d4      	bne.n	8003068 <_printf_i+0x30>
 80030be:	2378      	movs	r3, #120	; 0x78
 80030c0:	4865      	ldr	r0, [pc, #404]	; (8003258 <_printf_i+0x220>)
 80030c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030c6:	e055      	b.n	8003174 <_printf_i+0x13c>
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ce:	1d19      	adds	r1, r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6011      	str	r1, [r2, #0]
 80030d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d8:	2301      	movs	r3, #1
 80030da:	e08c      	b.n	80031f6 <_printf_i+0x1be>
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030e2:	6011      	str	r1, [r2, #0]
 80030e4:	bf18      	it	ne
 80030e6:	b21b      	sxthne	r3, r3
 80030e8:	e7cf      	b.n	800308a <_printf_i+0x52>
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	6825      	ldr	r5, [r4, #0]
 80030ee:	1d18      	adds	r0, r3, #4
 80030f0:	6010      	str	r0, [r2, #0]
 80030f2:	0628      	lsls	r0, r5, #24
 80030f4:	d501      	bpl.n	80030fa <_printf_i+0xc2>
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	e002      	b.n	8003100 <_printf_i+0xc8>
 80030fa:	0668      	lsls	r0, r5, #25
 80030fc:	d5fb      	bpl.n	80030f6 <_printf_i+0xbe>
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	296f      	cmp	r1, #111	; 0x6f
 8003102:	bf14      	ite	ne
 8003104:	220a      	movne	r2, #10
 8003106:	2208      	moveq	r2, #8
 8003108:	4852      	ldr	r0, [pc, #328]	; (8003254 <_printf_i+0x21c>)
 800310a:	2100      	movs	r1, #0
 800310c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003110:	6865      	ldr	r5, [r4, #4]
 8003112:	2d00      	cmp	r5, #0
 8003114:	60a5      	str	r5, [r4, #8]
 8003116:	f2c0 8095 	blt.w	8003244 <_printf_i+0x20c>
 800311a:	6821      	ldr	r1, [r4, #0]
 800311c:	f021 0104 	bic.w	r1, r1, #4
 8003120:	6021      	str	r1, [r4, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <_printf_i+0x16a>
 8003126:	2d00      	cmp	r5, #0
 8003128:	f040 808e 	bne.w	8003248 <_printf_i+0x210>
 800312c:	4665      	mov	r5, ip
 800312e:	2a08      	cmp	r2, #8
 8003130:	d10b      	bne.n	800314a <_printf_i+0x112>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d508      	bpl.n	800314a <_printf_i+0x112>
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	bfde      	ittt	le
 8003140:	2330      	movle	r3, #48	; 0x30
 8003142:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003146:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800314a:	ebac 0305 	sub.w	r3, ip, r5
 800314e:	6123      	str	r3, [r4, #16]
 8003150:	f8cd 8000 	str.w	r8, [sp]
 8003154:	463b      	mov	r3, r7
 8003156:	aa03      	add	r2, sp, #12
 8003158:	4621      	mov	r1, r4
 800315a:	4630      	mov	r0, r6
 800315c:	f7ff fef6 	bl	8002f4c <_printf_common>
 8003160:	3001      	adds	r0, #1
 8003162:	d14d      	bne.n	8003200 <_printf_i+0x1c8>
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003168:	b005      	add	sp, #20
 800316a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800316e:	4839      	ldr	r0, [pc, #228]	; (8003254 <_printf_i+0x21c>)
 8003170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1d1d      	adds	r5, r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6015      	str	r5, [r2, #0]
 800317e:	060a      	lsls	r2, r1, #24
 8003180:	d50b      	bpl.n	800319a <_printf_i+0x162>
 8003182:	07ca      	lsls	r2, r1, #31
 8003184:	bf44      	itt	mi
 8003186:	f041 0120 	orrmi.w	r1, r1, #32
 800318a:	6021      	strmi	r1, [r4, #0]
 800318c:	b91b      	cbnz	r3, 8003196 <_printf_i+0x15e>
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	f022 0220 	bic.w	r2, r2, #32
 8003194:	6022      	str	r2, [r4, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	e7b7      	b.n	800310a <_printf_i+0xd2>
 800319a:	064d      	lsls	r5, r1, #25
 800319c:	bf48      	it	mi
 800319e:	b29b      	uxthmi	r3, r3
 80031a0:	e7ef      	b.n	8003182 <_printf_i+0x14a>
 80031a2:	4665      	mov	r5, ip
 80031a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80031a8:	fb02 3311 	mls	r3, r2, r1, r3
 80031ac:	5cc3      	ldrb	r3, [r0, r3]
 80031ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031b2:	460b      	mov	r3, r1
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d1f5      	bne.n	80031a4 <_printf_i+0x16c>
 80031b8:	e7b9      	b.n	800312e <_printf_i+0xf6>
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	6825      	ldr	r5, [r4, #0]
 80031be:	1d18      	adds	r0, r3, #4
 80031c0:	6961      	ldr	r1, [r4, #20]
 80031c2:	6010      	str	r0, [r2, #0]
 80031c4:	0628      	lsls	r0, r5, #24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	d501      	bpl.n	80031ce <_printf_i+0x196>
 80031ca:	6019      	str	r1, [r3, #0]
 80031cc:	e002      	b.n	80031d4 <_printf_i+0x19c>
 80031ce:	066a      	lsls	r2, r5, #25
 80031d0:	d5fb      	bpl.n	80031ca <_printf_i+0x192>
 80031d2:	8019      	strh	r1, [r3, #0]
 80031d4:	2300      	movs	r3, #0
 80031d6:	4665      	mov	r5, ip
 80031d8:	6123      	str	r3, [r4, #16]
 80031da:	e7b9      	b.n	8003150 <_printf_i+0x118>
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	1d19      	adds	r1, r3, #4
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	681d      	ldr	r5, [r3, #0]
 80031e4:	6862      	ldr	r2, [r4, #4]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 fa93 	bl	8003714 <memchr>
 80031ee:	b108      	cbz	r0, 80031f4 <_printf_i+0x1bc>
 80031f0:	1b40      	subs	r0, r0, r5
 80031f2:	6060      	str	r0, [r4, #4]
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	6123      	str	r3, [r4, #16]
 80031f8:	2300      	movs	r3, #0
 80031fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031fe:	e7a7      	b.n	8003150 <_printf_i+0x118>
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	462a      	mov	r2, r5
 8003204:	4639      	mov	r1, r7
 8003206:	4630      	mov	r0, r6
 8003208:	47c0      	blx	r8
 800320a:	3001      	adds	r0, #1
 800320c:	d0aa      	beq.n	8003164 <_printf_i+0x12c>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	d413      	bmi.n	800323c <_printf_i+0x204>
 8003214:	68e0      	ldr	r0, [r4, #12]
 8003216:	9b03      	ldr	r3, [sp, #12]
 8003218:	4298      	cmp	r0, r3
 800321a:	bfb8      	it	lt
 800321c:	4618      	movlt	r0, r3
 800321e:	e7a3      	b.n	8003168 <_printf_i+0x130>
 8003220:	2301      	movs	r3, #1
 8003222:	464a      	mov	r2, r9
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	47c0      	blx	r8
 800322a:	3001      	adds	r0, #1
 800322c:	d09a      	beq.n	8003164 <_printf_i+0x12c>
 800322e:	3501      	adds	r5, #1
 8003230:	68e3      	ldr	r3, [r4, #12]
 8003232:	9a03      	ldr	r2, [sp, #12]
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	42ab      	cmp	r3, r5
 8003238:	dcf2      	bgt.n	8003220 <_printf_i+0x1e8>
 800323a:	e7eb      	b.n	8003214 <_printf_i+0x1dc>
 800323c:	2500      	movs	r5, #0
 800323e:	f104 0919 	add.w	r9, r4, #25
 8003242:	e7f5      	b.n	8003230 <_printf_i+0x1f8>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ac      	bne.n	80031a2 <_printf_i+0x16a>
 8003248:	7803      	ldrb	r3, [r0, #0]
 800324a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800324e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003252:	e76c      	b.n	800312e <_printf_i+0xf6>
 8003254:	08003935 	.word	0x08003935
 8003258:	08003946 	.word	0x08003946

0800325c <_sbrk_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	2300      	movs	r3, #0
 8003260:	4c05      	ldr	r4, [pc, #20]	; (8003278 <_sbrk_r+0x1c>)
 8003262:	4605      	mov	r5, r0
 8003264:	4608      	mov	r0, r1
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	f7fd fb82 	bl	8000970 <_sbrk>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_sbrk_r+0x1a>
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	b103      	cbz	r3, 8003276 <_sbrk_r+0x1a>
 8003274:	602b      	str	r3, [r5, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	200001a4 	.word	0x200001a4

0800327c <__sread>:
 800327c:	b510      	push	{r4, lr}
 800327e:	460c      	mov	r4, r1
 8003280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003284:	f000 faa2 	bl	80037cc <_read_r>
 8003288:	2800      	cmp	r0, #0
 800328a:	bfab      	itete	ge
 800328c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800328e:	89a3      	ldrhlt	r3, [r4, #12]
 8003290:	181b      	addge	r3, r3, r0
 8003292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003296:	bfac      	ite	ge
 8003298:	6563      	strge	r3, [r4, #84]	; 0x54
 800329a:	81a3      	strhlt	r3, [r4, #12]
 800329c:	bd10      	pop	{r4, pc}

0800329e <__swrite>:
 800329e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a2:	461f      	mov	r7, r3
 80032a4:	898b      	ldrh	r3, [r1, #12]
 80032a6:	4605      	mov	r5, r0
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	460c      	mov	r4, r1
 80032ac:	4616      	mov	r6, r2
 80032ae:	d505      	bpl.n	80032bc <__swrite+0x1e>
 80032b0:	2302      	movs	r3, #2
 80032b2:	2200      	movs	r2, #0
 80032b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b8:	f000 f9b6 	bl	8003628 <_lseek_r>
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	4632      	mov	r2, r6
 80032c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ca:	463b      	mov	r3, r7
 80032cc:	4628      	mov	r0, r5
 80032ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d2:	f000 b869 	b.w	80033a8 <_write_r>

080032d6 <__sseek>:
 80032d6:	b510      	push	{r4, lr}
 80032d8:	460c      	mov	r4, r1
 80032da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032de:	f000 f9a3 	bl	8003628 <_lseek_r>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	bf15      	itete	ne
 80032e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032f2:	81a3      	strheq	r3, [r4, #12]
 80032f4:	bf18      	it	ne
 80032f6:	81a3      	strhne	r3, [r4, #12]
 80032f8:	bd10      	pop	{r4, pc}

080032fa <__sclose>:
 80032fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fe:	f000 b8d3 	b.w	80034a8 <_close_r>
	...

08003304 <__swbuf_r>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	460e      	mov	r6, r1
 8003308:	4614      	mov	r4, r2
 800330a:	4605      	mov	r5, r0
 800330c:	b118      	cbz	r0, 8003316 <__swbuf_r+0x12>
 800330e:	6983      	ldr	r3, [r0, #24]
 8003310:	b90b      	cbnz	r3, 8003316 <__swbuf_r+0x12>
 8003312:	f7ff fbf9 	bl	8002b08 <__sinit>
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <__swbuf_r+0x98>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d12a      	bne.n	8003372 <__swbuf_r+0x6e>
 800331c:	686c      	ldr	r4, [r5, #4]
 800331e:	69a3      	ldr	r3, [r4, #24]
 8003320:	60a3      	str	r3, [r4, #8]
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	071a      	lsls	r2, r3, #28
 8003326:	d52e      	bpl.n	8003386 <__swbuf_r+0x82>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	b363      	cbz	r3, 8003386 <__swbuf_r+0x82>
 800332c:	6923      	ldr	r3, [r4, #16]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	b2f6      	uxtb	r6, r6
 8003332:	1ac0      	subs	r0, r0, r3
 8003334:	6963      	ldr	r3, [r4, #20]
 8003336:	4637      	mov	r7, r6
 8003338:	4283      	cmp	r3, r0
 800333a:	dc04      	bgt.n	8003346 <__swbuf_r+0x42>
 800333c:	4621      	mov	r1, r4
 800333e:	4628      	mov	r0, r5
 8003340:	f000 f948 	bl	80035d4 <_fflush_r>
 8003344:	bb28      	cbnz	r0, 8003392 <__swbuf_r+0x8e>
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	3001      	adds	r0, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	60a3      	str	r3, [r4, #8]
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	6022      	str	r2, [r4, #0]
 8003354:	701e      	strb	r6, [r3, #0]
 8003356:	6963      	ldr	r3, [r4, #20]
 8003358:	4283      	cmp	r3, r0
 800335a:	d004      	beq.n	8003366 <__swbuf_r+0x62>
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	07db      	lsls	r3, r3, #31
 8003360:	d519      	bpl.n	8003396 <__swbuf_r+0x92>
 8003362:	2e0a      	cmp	r6, #10
 8003364:	d117      	bne.n	8003396 <__swbuf_r+0x92>
 8003366:	4621      	mov	r1, r4
 8003368:	4628      	mov	r0, r5
 800336a:	f000 f933 	bl	80035d4 <_fflush_r>
 800336e:	b190      	cbz	r0, 8003396 <__swbuf_r+0x92>
 8003370:	e00f      	b.n	8003392 <__swbuf_r+0x8e>
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <__swbuf_r+0x9c>)
 8003374:	429c      	cmp	r4, r3
 8003376:	d101      	bne.n	800337c <__swbuf_r+0x78>
 8003378:	68ac      	ldr	r4, [r5, #8]
 800337a:	e7d0      	b.n	800331e <__swbuf_r+0x1a>
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <__swbuf_r+0xa0>)
 800337e:	429c      	cmp	r4, r3
 8003380:	bf08      	it	eq
 8003382:	68ec      	ldreq	r4, [r5, #12]
 8003384:	e7cb      	b.n	800331e <__swbuf_r+0x1a>
 8003386:	4621      	mov	r1, r4
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f81f 	bl	80033cc <__swsetup_r>
 800338e:	2800      	cmp	r0, #0
 8003390:	d0cc      	beq.n	800332c <__swbuf_r+0x28>
 8003392:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003396:	4638      	mov	r0, r7
 8003398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339a:	bf00      	nop
 800339c:	080038e4 	.word	0x080038e4
 80033a0:	08003904 	.word	0x08003904
 80033a4:	080038c4 	.word	0x080038c4

080033a8 <_write_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4605      	mov	r5, r0
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	2200      	movs	r2, #0
 80033b2:	4c05      	ldr	r4, [pc, #20]	; (80033c8 <_write_r+0x20>)
 80033b4:	6022      	str	r2, [r4, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7fc fef6 	bl	80001a8 <_write>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_write_r+0x1e>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_write_r+0x1e>
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	200001a4 	.word	0x200001a4

080033cc <__swsetup_r>:
 80033cc:	4b32      	ldr	r3, [pc, #200]	; (8003498 <__swsetup_r+0xcc>)
 80033ce:	b570      	push	{r4, r5, r6, lr}
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	4606      	mov	r6, r0
 80033d4:	460c      	mov	r4, r1
 80033d6:	b125      	cbz	r5, 80033e2 <__swsetup_r+0x16>
 80033d8:	69ab      	ldr	r3, [r5, #24]
 80033da:	b913      	cbnz	r3, 80033e2 <__swsetup_r+0x16>
 80033dc:	4628      	mov	r0, r5
 80033de:	f7ff fb93 	bl	8002b08 <__sinit>
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <__swsetup_r+0xd0>)
 80033e4:	429c      	cmp	r4, r3
 80033e6:	d10f      	bne.n	8003408 <__swsetup_r+0x3c>
 80033e8:	686c      	ldr	r4, [r5, #4]
 80033ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	0715      	lsls	r5, r2, #28
 80033f2:	d42c      	bmi.n	800344e <__swsetup_r+0x82>
 80033f4:	06d0      	lsls	r0, r2, #27
 80033f6:	d411      	bmi.n	800341c <__swsetup_r+0x50>
 80033f8:	2209      	movs	r2, #9
 80033fa:	6032      	str	r2, [r6, #0]
 80033fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003400:	81a3      	strh	r3, [r4, #12]
 8003402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003406:	e03e      	b.n	8003486 <__swsetup_r+0xba>
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <__swsetup_r+0xd4>)
 800340a:	429c      	cmp	r4, r3
 800340c:	d101      	bne.n	8003412 <__swsetup_r+0x46>
 800340e:	68ac      	ldr	r4, [r5, #8]
 8003410:	e7eb      	b.n	80033ea <__swsetup_r+0x1e>
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <__swsetup_r+0xd8>)
 8003414:	429c      	cmp	r4, r3
 8003416:	bf08      	it	eq
 8003418:	68ec      	ldreq	r4, [r5, #12]
 800341a:	e7e6      	b.n	80033ea <__swsetup_r+0x1e>
 800341c:	0751      	lsls	r1, r2, #29
 800341e:	d512      	bpl.n	8003446 <__swsetup_r+0x7a>
 8003420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003422:	b141      	cbz	r1, 8003436 <__swsetup_r+0x6a>
 8003424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003428:	4299      	cmp	r1, r3
 800342a:	d002      	beq.n	8003432 <__swsetup_r+0x66>
 800342c:	4630      	mov	r0, r6
 800342e:	f000 f981 	bl	8003734 <_free_r>
 8003432:	2300      	movs	r3, #0
 8003434:	6363      	str	r3, [r4, #52]	; 0x34
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	2300      	movs	r3, #0
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	b94b      	cbnz	r3, 8003466 <__swsetup_r+0x9a>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d003      	beq.n	8003466 <__swsetup_r+0x9a>
 800345e:	4621      	mov	r1, r4
 8003460:	4630      	mov	r0, r6
 8003462:	f000 f917 	bl	8003694 <__smakebuf_r>
 8003466:	89a2      	ldrh	r2, [r4, #12]
 8003468:	f012 0301 	ands.w	r3, r2, #1
 800346c:	d00c      	beq.n	8003488 <__swsetup_r+0xbc>
 800346e:	2300      	movs	r3, #0
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6963      	ldr	r3, [r4, #20]
 8003474:	425b      	negs	r3, r3
 8003476:	61a3      	str	r3, [r4, #24]
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b953      	cbnz	r3, 8003492 <__swsetup_r+0xc6>
 800347c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003480:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003484:	d1ba      	bne.n	80033fc <__swsetup_r+0x30>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	0792      	lsls	r2, r2, #30
 800348a:	bf58      	it	pl
 800348c:	6963      	ldrpl	r3, [r4, #20]
 800348e:	60a3      	str	r3, [r4, #8]
 8003490:	e7f2      	b.n	8003478 <__swsetup_r+0xac>
 8003492:	2000      	movs	r0, #0
 8003494:	e7f7      	b.n	8003486 <__swsetup_r+0xba>
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c
 800349c:	080038e4 	.word	0x080038e4
 80034a0:	08003904 	.word	0x08003904
 80034a4:	080038c4 	.word	0x080038c4

080034a8 <_close_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	2300      	movs	r3, #0
 80034ac:	4c05      	ldr	r4, [pc, #20]	; (80034c4 <_close_r+0x1c>)
 80034ae:	4605      	mov	r5, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	f7fd fa2b 	bl	800090e <_close>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_close_r+0x1a>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_close_r+0x1a>
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200001a4 	.word	0x200001a4

080034c8 <__sflush_r>:
 80034c8:	898a      	ldrh	r2, [r1, #12]
 80034ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ce:	4605      	mov	r5, r0
 80034d0:	0710      	lsls	r0, r2, #28
 80034d2:	460c      	mov	r4, r1
 80034d4:	d458      	bmi.n	8003588 <__sflush_r+0xc0>
 80034d6:	684b      	ldr	r3, [r1, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dc05      	bgt.n	80034e8 <__sflush_r+0x20>
 80034dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	dc02      	bgt.n	80034e8 <__sflush_r+0x20>
 80034e2:	2000      	movs	r0, #0
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	d0f9      	beq.n	80034e2 <__sflush_r+0x1a>
 80034ee:	2300      	movs	r3, #0
 80034f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034f4:	682f      	ldr	r7, [r5, #0]
 80034f6:	6a21      	ldr	r1, [r4, #32]
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	d032      	beq.n	8003562 <__sflush_r+0x9a>
 80034fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	075a      	lsls	r2, r3, #29
 8003502:	d505      	bpl.n	8003510 <__sflush_r+0x48>
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	1ac0      	subs	r0, r0, r3
 8003508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800350a:	b10b      	cbz	r3, 8003510 <__sflush_r+0x48>
 800350c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800350e:	1ac0      	subs	r0, r0, r3
 8003510:	2300      	movs	r3, #0
 8003512:	4602      	mov	r2, r0
 8003514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003516:	6a21      	ldr	r1, [r4, #32]
 8003518:	4628      	mov	r0, r5
 800351a:	47b0      	blx	r6
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	d106      	bne.n	8003530 <__sflush_r+0x68>
 8003522:	6829      	ldr	r1, [r5, #0]
 8003524:	291d      	cmp	r1, #29
 8003526:	d848      	bhi.n	80035ba <__sflush_r+0xf2>
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <__sflush_r+0x108>)
 800352a:	40ca      	lsrs	r2, r1
 800352c:	07d6      	lsls	r6, r2, #31
 800352e:	d544      	bpl.n	80035ba <__sflush_r+0xf2>
 8003530:	2200      	movs	r2, #0
 8003532:	6062      	str	r2, [r4, #4]
 8003534:	6922      	ldr	r2, [r4, #16]
 8003536:	04d9      	lsls	r1, r3, #19
 8003538:	6022      	str	r2, [r4, #0]
 800353a:	d504      	bpl.n	8003546 <__sflush_r+0x7e>
 800353c:	1c42      	adds	r2, r0, #1
 800353e:	d101      	bne.n	8003544 <__sflush_r+0x7c>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b903      	cbnz	r3, 8003546 <__sflush_r+0x7e>
 8003544:	6560      	str	r0, [r4, #84]	; 0x54
 8003546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003548:	602f      	str	r7, [r5, #0]
 800354a:	2900      	cmp	r1, #0
 800354c:	d0c9      	beq.n	80034e2 <__sflush_r+0x1a>
 800354e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003552:	4299      	cmp	r1, r3
 8003554:	d002      	beq.n	800355c <__sflush_r+0x94>
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f8ec 	bl	8003734 <_free_r>
 800355c:	2000      	movs	r0, #0
 800355e:	6360      	str	r0, [r4, #52]	; 0x34
 8003560:	e7c0      	b.n	80034e4 <__sflush_r+0x1c>
 8003562:	2301      	movs	r3, #1
 8003564:	4628      	mov	r0, r5
 8003566:	47b0      	blx	r6
 8003568:	1c41      	adds	r1, r0, #1
 800356a:	d1c8      	bne.n	80034fe <__sflush_r+0x36>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0c5      	beq.n	80034fe <__sflush_r+0x36>
 8003572:	2b1d      	cmp	r3, #29
 8003574:	d001      	beq.n	800357a <__sflush_r+0xb2>
 8003576:	2b16      	cmp	r3, #22
 8003578:	d101      	bne.n	800357e <__sflush_r+0xb6>
 800357a:	602f      	str	r7, [r5, #0]
 800357c:	e7b1      	b.n	80034e2 <__sflush_r+0x1a>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	e7ad      	b.n	80034e4 <__sflush_r+0x1c>
 8003588:	690f      	ldr	r7, [r1, #16]
 800358a:	2f00      	cmp	r7, #0
 800358c:	d0a9      	beq.n	80034e2 <__sflush_r+0x1a>
 800358e:	0793      	lsls	r3, r2, #30
 8003590:	bf18      	it	ne
 8003592:	2300      	movne	r3, #0
 8003594:	680e      	ldr	r6, [r1, #0]
 8003596:	bf08      	it	eq
 8003598:	694b      	ldreq	r3, [r1, #20]
 800359a:	eba6 0807 	sub.w	r8, r6, r7
 800359e:	600f      	str	r7, [r1, #0]
 80035a0:	608b      	str	r3, [r1, #8]
 80035a2:	f1b8 0f00 	cmp.w	r8, #0
 80035a6:	dd9c      	ble.n	80034e2 <__sflush_r+0x1a>
 80035a8:	4643      	mov	r3, r8
 80035aa:	463a      	mov	r2, r7
 80035ac:	6a21      	ldr	r1, [r4, #32]
 80035ae:	4628      	mov	r0, r5
 80035b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035b2:	47b0      	blx	r6
 80035b4:	2800      	cmp	r0, #0
 80035b6:	dc06      	bgt.n	80035c6 <__sflush_r+0xfe>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c4:	e78e      	b.n	80034e4 <__sflush_r+0x1c>
 80035c6:	4407      	add	r7, r0
 80035c8:	eba8 0800 	sub.w	r8, r8, r0
 80035cc:	e7e9      	b.n	80035a2 <__sflush_r+0xda>
 80035ce:	bf00      	nop
 80035d0:	20400001 	.word	0x20400001

080035d4 <_fflush_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	690b      	ldr	r3, [r1, #16]
 80035d8:	4605      	mov	r5, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	b1db      	cbz	r3, 8003616 <_fflush_r+0x42>
 80035de:	b118      	cbz	r0, 80035e8 <_fflush_r+0x14>
 80035e0:	6983      	ldr	r3, [r0, #24]
 80035e2:	b90b      	cbnz	r3, 80035e8 <_fflush_r+0x14>
 80035e4:	f7ff fa90 	bl	8002b08 <__sinit>
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <_fflush_r+0x48>)
 80035ea:	429c      	cmp	r4, r3
 80035ec:	d109      	bne.n	8003602 <_fflush_r+0x2e>
 80035ee:	686c      	ldr	r4, [r5, #4]
 80035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f4:	b17b      	cbz	r3, 8003616 <_fflush_r+0x42>
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035fe:	f7ff bf63 	b.w	80034c8 <__sflush_r>
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <_fflush_r+0x4c>)
 8003604:	429c      	cmp	r4, r3
 8003606:	d101      	bne.n	800360c <_fflush_r+0x38>
 8003608:	68ac      	ldr	r4, [r5, #8]
 800360a:	e7f1      	b.n	80035f0 <_fflush_r+0x1c>
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <_fflush_r+0x50>)
 800360e:	429c      	cmp	r4, r3
 8003610:	bf08      	it	eq
 8003612:	68ec      	ldreq	r4, [r5, #12]
 8003614:	e7ec      	b.n	80035f0 <_fflush_r+0x1c>
 8003616:	2000      	movs	r0, #0
 8003618:	bd38      	pop	{r3, r4, r5, pc}
 800361a:	bf00      	nop
 800361c:	080038e4 	.word	0x080038e4
 8003620:	08003904 	.word	0x08003904
 8003624:	080038c4 	.word	0x080038c4

08003628 <_lseek_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4605      	mov	r5, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	2200      	movs	r2, #0
 8003632:	4c05      	ldr	r4, [pc, #20]	; (8003648 <_lseek_r+0x20>)
 8003634:	6022      	str	r2, [r4, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	f7fd f98d 	bl	8000956 <_lseek>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d102      	bne.n	8003646 <_lseek_r+0x1e>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	b103      	cbz	r3, 8003646 <_lseek_r+0x1e>
 8003644:	602b      	str	r3, [r5, #0]
 8003646:	bd38      	pop	{r3, r4, r5, pc}
 8003648:	200001a4 	.word	0x200001a4

0800364c <__swhatbuf_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	b096      	sub	sp, #88	; 0x58
 8003656:	2900      	cmp	r1, #0
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	da07      	bge.n	800366e <__swhatbuf_r+0x22>
 800365e:	2300      	movs	r3, #0
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	89b3      	ldrh	r3, [r6, #12]
 8003664:	061a      	lsls	r2, r3, #24
 8003666:	d410      	bmi.n	800368a <__swhatbuf_r+0x3e>
 8003668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366c:	e00e      	b.n	800368c <__swhatbuf_r+0x40>
 800366e:	466a      	mov	r2, sp
 8003670:	f000 f8be 	bl	80037f0 <_fstat_r>
 8003674:	2800      	cmp	r0, #0
 8003676:	dbf2      	blt.n	800365e <__swhatbuf_r+0x12>
 8003678:	9a01      	ldr	r2, [sp, #4]
 800367a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800367e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003682:	425a      	negs	r2, r3
 8003684:	415a      	adcs	r2, r3
 8003686:	602a      	str	r2, [r5, #0]
 8003688:	e7ee      	b.n	8003668 <__swhatbuf_r+0x1c>
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	2000      	movs	r0, #0
 800368e:	6023      	str	r3, [r4, #0]
 8003690:	b016      	add	sp, #88	; 0x58
 8003692:	bd70      	pop	{r4, r5, r6, pc}

08003694 <__smakebuf_r>:
 8003694:	898b      	ldrh	r3, [r1, #12]
 8003696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003698:	079d      	lsls	r5, r3, #30
 800369a:	4606      	mov	r6, r0
 800369c:	460c      	mov	r4, r1
 800369e:	d507      	bpl.n	80036b0 <__smakebuf_r+0x1c>
 80036a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	2301      	movs	r3, #1
 80036aa:	6163      	str	r3, [r4, #20]
 80036ac:	b002      	add	sp, #8
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	ab01      	add	r3, sp, #4
 80036b2:	466a      	mov	r2, sp
 80036b4:	f7ff ffca 	bl	800364c <__swhatbuf_r>
 80036b8:	9900      	ldr	r1, [sp, #0]
 80036ba:	4605      	mov	r5, r0
 80036bc:	4630      	mov	r0, r6
 80036be:	f7ff faad 	bl	8002c1c <_malloc_r>
 80036c2:	b948      	cbnz	r0, 80036d8 <__smakebuf_r+0x44>
 80036c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c8:	059a      	lsls	r2, r3, #22
 80036ca:	d4ef      	bmi.n	80036ac <__smakebuf_r+0x18>
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	e7e3      	b.n	80036a0 <__smakebuf_r+0xc>
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <__smakebuf_r+0x7c>)
 80036da:	62b3      	str	r3, [r6, #40]	; 0x28
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	6020      	str	r0, [r4, #0]
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	9b00      	ldr	r3, [sp, #0]
 80036e8:	6120      	str	r0, [r4, #16]
 80036ea:	6163      	str	r3, [r4, #20]
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	b15b      	cbz	r3, 8003708 <__smakebuf_r+0x74>
 80036f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f4:	4630      	mov	r0, r6
 80036f6:	f000 f88d 	bl	8003814 <_isatty_r>
 80036fa:	b128      	cbz	r0, 8003708 <__smakebuf_r+0x74>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	431d      	orrs	r5, r3
 800370c:	81a5      	strh	r5, [r4, #12]
 800370e:	e7cd      	b.n	80036ac <__smakebuf_r+0x18>
 8003710:	08002ad1 	.word	0x08002ad1

08003714 <memchr>:
 8003714:	b510      	push	{r4, lr}
 8003716:	b2c9      	uxtb	r1, r1
 8003718:	4402      	add	r2, r0
 800371a:	4290      	cmp	r0, r2
 800371c:	4603      	mov	r3, r0
 800371e:	d101      	bne.n	8003724 <memchr+0x10>
 8003720:	2300      	movs	r3, #0
 8003722:	e003      	b.n	800372c <memchr+0x18>
 8003724:	781c      	ldrb	r4, [r3, #0]
 8003726:	3001      	adds	r0, #1
 8003728:	428c      	cmp	r4, r1
 800372a:	d1f6      	bne.n	800371a <memchr+0x6>
 800372c:	4618      	mov	r0, r3
 800372e:	bd10      	pop	{r4, pc}

08003730 <__malloc_lock>:
 8003730:	4770      	bx	lr

08003732 <__malloc_unlock>:
 8003732:	4770      	bx	lr

08003734 <_free_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4605      	mov	r5, r0
 8003738:	2900      	cmp	r1, #0
 800373a:	d043      	beq.n	80037c4 <_free_r+0x90>
 800373c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003740:	1f0c      	subs	r4, r1, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfb8      	it	lt
 8003746:	18e4      	addlt	r4, r4, r3
 8003748:	f7ff fff2 	bl	8003730 <__malloc_lock>
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <_free_r+0x94>)
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	4610      	mov	r0, r2
 8003752:	b933      	cbnz	r3, 8003762 <_free_r+0x2e>
 8003754:	6063      	str	r3, [r4, #4]
 8003756:	6014      	str	r4, [r2, #0]
 8003758:	4628      	mov	r0, r5
 800375a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800375e:	f7ff bfe8 	b.w	8003732 <__malloc_unlock>
 8003762:	42a3      	cmp	r3, r4
 8003764:	d90b      	bls.n	800377e <_free_r+0x4a>
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	1862      	adds	r2, r4, r1
 800376a:	4293      	cmp	r3, r2
 800376c:	bf01      	itttt	eq
 800376e:	681a      	ldreq	r2, [r3, #0]
 8003770:	685b      	ldreq	r3, [r3, #4]
 8003772:	1852      	addeq	r2, r2, r1
 8003774:	6022      	streq	r2, [r4, #0]
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	6004      	str	r4, [r0, #0]
 800377a:	e7ed      	b.n	8003758 <_free_r+0x24>
 800377c:	4613      	mov	r3, r2
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	b10a      	cbz	r2, 8003786 <_free_r+0x52>
 8003782:	42a2      	cmp	r2, r4
 8003784:	d9fa      	bls.n	800377c <_free_r+0x48>
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	1858      	adds	r0, r3, r1
 800378a:	42a0      	cmp	r0, r4
 800378c:	d10b      	bne.n	80037a6 <_free_r+0x72>
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	4401      	add	r1, r0
 8003792:	1858      	adds	r0, r3, r1
 8003794:	4282      	cmp	r2, r0
 8003796:	6019      	str	r1, [r3, #0]
 8003798:	d1de      	bne.n	8003758 <_free_r+0x24>
 800379a:	6810      	ldr	r0, [r2, #0]
 800379c:	6852      	ldr	r2, [r2, #4]
 800379e:	4401      	add	r1, r0
 80037a0:	6019      	str	r1, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	e7d8      	b.n	8003758 <_free_r+0x24>
 80037a6:	d902      	bls.n	80037ae <_free_r+0x7a>
 80037a8:	230c      	movs	r3, #12
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	e7d4      	b.n	8003758 <_free_r+0x24>
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	1821      	adds	r1, r4, r0
 80037b2:	428a      	cmp	r2, r1
 80037b4:	bf01      	itttt	eq
 80037b6:	6811      	ldreq	r1, [r2, #0]
 80037b8:	6852      	ldreq	r2, [r2, #4]
 80037ba:	1809      	addeq	r1, r1, r0
 80037bc:	6021      	streq	r1, [r4, #0]
 80037be:	6062      	str	r2, [r4, #4]
 80037c0:	605c      	str	r4, [r3, #4]
 80037c2:	e7c9      	b.n	8003758 <_free_r+0x24>
 80037c4:	bd38      	pop	{r3, r4, r5, pc}
 80037c6:	bf00      	nop
 80037c8:	20000094 	.word	0x20000094

080037cc <_read_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4605      	mov	r5, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	2200      	movs	r2, #0
 80037d6:	4c05      	ldr	r4, [pc, #20]	; (80037ec <_read_r+0x20>)
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	f7fd f87a 	bl	80008d4 <_read>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_read_r+0x1e>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_read_r+0x1e>
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	200001a4 	.word	0x200001a4

080037f0 <_fstat_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	2300      	movs	r3, #0
 80037f4:	4c06      	ldr	r4, [pc, #24]	; (8003810 <_fstat_r+0x20>)
 80037f6:	4605      	mov	r5, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	f7fd f891 	bl	8000924 <_fstat>
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d102      	bne.n	800380c <_fstat_r+0x1c>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	b103      	cbz	r3, 800380c <_fstat_r+0x1c>
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	bf00      	nop
 8003810:	200001a4 	.word	0x200001a4

08003814 <_isatty_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	2300      	movs	r3, #0
 8003818:	4c05      	ldr	r4, [pc, #20]	; (8003830 <_isatty_r+0x1c>)
 800381a:	4605      	mov	r5, r0
 800381c:	4608      	mov	r0, r1
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	f7fd f88f 	bl	8000942 <_isatty>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_isatty_r+0x1a>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	b103      	cbz	r3, 800382e <_isatty_r+0x1a>
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	200001a4 	.word	0x200001a4

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
