
QSPI_memory_mapped_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  080044d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  24000014  080044ec  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400008c  080044ec  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c5dd  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c62  00000000  00000000  0002c61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000958  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000870  00000000  00000000  0002ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035ff8  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bae9  00000000  00000000  00065448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00153fa3  00000000  00000000  00070f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c4ed4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002440  00000000  00000000  001c4f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004458 	.word	0x08004458

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08004458 	.word	0x08004458

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0xa8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0xa8>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0xa8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0xa8>)
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_GPIO_Init+0xa8>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	f003 0308 	and.w	r3, r3, #8
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <MX_GPIO_Init+0xa8>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

}
 8000374:	bf00      	nop
 8000376:	371c      	adds	r7, #28
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	58024400 	.word	0x58024400

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b70      	ldr	r3, [pc, #448]	; (800054c <main+0x1c8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b6a      	ldr	r3, [pc, #424]	; (800054c <main+0x1c8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b65      	ldr	r3, [pc, #404]	; (800054c <main+0x1c8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a64      	ldr	r2, [pc, #400]	; (800054c <main+0x1c8>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b5e      	ldr	r3, [pc, #376]	; (800054c <main+0x1c8>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b5b      	ldr	r3, [pc, #364]	; (800054c <main+0x1c8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b58      	ldr	r3, [pc, #352]	; (800054c <main+0x1c8>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	494d      	ldr	r1, [pc, #308]	; (800054c <main+0x1c8>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x82>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b45      	ldr	r3, [pc, #276]	; (800054c <main+0x1c8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a44      	ldr	r2, [pc, #272]	; (800054c <main+0x1c8>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 ffbc 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f886 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f7ff ff3e 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800045c:	f000 f936 	bl	80006cc <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  w25qxx_Init();
 8000460:	f000 faf4 	bl	8000a4c <w25qxx_Init>
  w25qxx_GetID();
 8000464:	f000 fb06 	bl	8000a74 <w25qxx_GetID>
  //W25qxx_EraseChip(); // approx 13 second to execute
  W25qxx_Write((uint8_t*)TEXT_Buffer, 0, SIZE);
 8000468:	222b      	movs	r2, #43	; 0x2b
 800046a:	2100      	movs	r1, #0
 800046c:	4838      	ldr	r0, [pc, #224]	; (8000550 <main+0x1cc>)
 800046e:	f000 fd05 	bl	8000e7c <W25qxx_Write>
  W25qxx_Write((uint8_t*)TEXT_Buffer2, SIZE, SIZE2);
 8000472:	2224      	movs	r2, #36	; 0x24
 8000474:	212b      	movs	r1, #43	; 0x2b
 8000476:	4837      	ldr	r0, [pc, #220]	; (8000554 <main+0x1d0>)
 8000478:	f000 fd00 	bl	8000e7c <W25qxx_Write>
  //W25qxx_Read(datatemp, 0, SIZE+SIZE2);

  /* Configure the memory mapped mode */
  w25qxx_Startup(w25qxx_QPIMode);
 800047c:	2004      	movs	r0, #4
 800047e:	f000 fbb3 	bl	8000be8 <w25qxx_Startup>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000482:	4b32      	ldr	r3, [pc, #200]	; (800054c <main+0x1c8>)
 8000484:	2200      	movs	r2, #0
 8000486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <main+0x1c8>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a2d      	ldr	r2, [pc, #180]	; (800054c <main+0x1c8>)
 8000496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800049a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800049c:	f3bf 8f4f 	dsb	sy
}
 80004a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <main+0x1c8>)
 80004a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004a8:	61bb      	str	r3, [r7, #24]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	0b5b      	lsrs	r3, r3, #13
 80004ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004b2:	617b      	str	r3, [r7, #20]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004bc:	613b      	str	r3, [r7, #16]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	015a      	lsls	r2, r3, #5
 80004c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004c6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80004cc:	491f      	ldr	r1, [pc, #124]	; (800054c <main+0x1c8>)
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	1e5a      	subs	r2, r3, #1
 80004d8:	613a      	str	r2, [r7, #16]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1ef      	bne.n	80004be <main+0x13a>
    } while(sets-- != 0U);
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	617a      	str	r2, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1e5      	bne.n	80004b4 <main+0x130>
  __ASM volatile ("dsb 0xF":::"memory");
 80004e8:	f3bf 8f4f 	dsb	sy
}
 80004ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ee:	f3bf 8f6f 	isb	sy
}
 80004f2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80004f4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0x1c8>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x1c8>)
 8000508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800050c:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <main+0x1c8>)
 8000510:	2200      	movs	r2, #0
 8000512:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000516:	f3bf 8f4f 	dsb	sy
}
 800051a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051c:	f3bf 8f6f 	isb	sy
}
 8000520:	bf00      	nop
}
 8000522:	bf00      	nop

	/* Disable CPU Cache before jumping to the QSPI code execution */
    SCB_DisableDCache();
    SCB_DisableICache();
	/* Disable Systick interrupt */
	SysTick->CTRL = 0;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x1d4>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

	/* Initialize user application's Stack Pointer & Jump to user application */
	JumpToApplication = (pFunction)(*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x1d8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <main+0x1dc>)
 8000532:	601a      	str	r2, [r3, #0]
	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000534:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	f383 8808 	msr	MSP, r3
}
 8000542:	bf00      	nop
	JumpToApplication();
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <main+0x1dc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4798      	blx	r3
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x1c6>
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	08004470 	.word	0x08004470
 8000554:	0800449c 	.word	0x0800449c
 8000558:	e000e010 	.word	0xe000e010
 800055c:	90000004 	.word	0x90000004
 8000560:	24000030 	.word	0x24000030

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09e      	sub	sp, #120	; 0x78
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800056e:	224c      	movs	r2, #76	; 0x4c
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 ff68 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2220      	movs	r2, #32
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 ff61 	bl	8004448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000586:	2002      	movs	r0, #2
 8000588:	f001 fa52 	bl	8001a30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <SystemClock_Config+0x150>)
 8000592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000594:	4a47      	ldr	r2, [pc, #284]	; (80006b4 <SystemClock_Config+0x150>)
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800059c:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <SystemClock_Config+0x150>)
 800059e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <SystemClock_Config+0x154>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a43      	ldr	r2, [pc, #268]	; (80006b8 <SystemClock_Config+0x154>)
 80005ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <SystemClock_Config+0x154>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005be:	bf00      	nop
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <SystemClock_Config+0x154>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005cc:	d1f8      	bne.n	80005c0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <SystemClock_Config+0x158>)
 80005d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005d4:	4a39      	ldr	r2, [pc, #228]	; (80006bc <SystemClock_Config+0x158>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <SystemClock_Config+0x158>)
 80005e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <SystemClock_Config+0x154>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <SystemClock_Config+0x154>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <SystemClock_Config+0x154>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <SystemClock_Config+0x150>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <SystemClock_Config+0x150>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0x150>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061e:	bf00      	nop
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0x154>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d1f8      	bne.n	8000620 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	2302      	movs	r3, #2
 800063e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000640:	2305      	movs	r3, #5
 8000642:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000644:	23c0      	movs	r3, #192	; 0xc0
 8000646:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000654:	2308      	movs	r3, #8
 8000656:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000658:	2300      	movs	r3, #0
 800065a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fec3 	bl	80023f0 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000670:	f000 f826 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	233f      	movs	r3, #63	; 0x3f
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000680:	2308      	movs	r3, #8
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fad5 	bl	8002c4c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x148>
  {
    Error_Handler();
 80006a8:	f000 f80a 	bl	80006c0 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3778      	adds	r7, #120	; 0x78
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58000400 	.word	0x58000400
 80006b8:	58024800 	.word	0x58024800
 80006bc:	58024400 	.word	0x58024400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_QUADSPI_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4-1;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006d8:	2203      	movs	r2, #3
 80006da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006de:	2204      	movs	r2, #4
 80006e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006ea:	2216      	movs	r2, #22
 80006ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_QUADSPI_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_QUADSPI_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_QUADSPI_Init+0x50>)
 800070a:	f001 f9cb 	bl	8001aa4 <HAL_QSPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000714:	f7ff ffd4 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24000034 	.word	0x24000034
 8000720:	52005000 	.word	0x52005000

08000724 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ba      	sub	sp, #232	; 0xe8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	22bc      	movs	r2, #188	; 0xbc
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fe7f 	bl	8004448 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a54      	ldr	r2, [pc, #336]	; (80008a0 <HAL_QSPI_MspInit+0x17c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	f040 80a0 	bne.w	8000896 <HAL_QSPI_MspInit+0x172>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800075a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800075c:	2300      	movs	r3, #0
 800075e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fda1 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000770:	f7ff ffa6 	bl	80006c0 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000774:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 8000776:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800077a:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 8000786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	f003 0310 	and.w	r3, r3, #16
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b6:	4a3b      	ldr	r2, [pc, #236]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d4:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <HAL_QSPI_MspInit+0x180>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ec:	2304      	movs	r3, #4
 80007ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000804:	2309      	movs	r3, #9
 8000806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800080e:	4619      	mov	r1, r3
 8000810:	4825      	ldr	r0, [pc, #148]	; (80008a8 <HAL_QSPI_MspInit+0x184>)
 8000812:	f000 ff5d 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000816:	2304      	movs	r3, #4
 8000818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800082e:	2309      	movs	r3, #9
 8000830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000838:	4619      	mov	r1, r3
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <HAL_QSPI_MspInit+0x188>)
 800083c:	f000 ff48 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000840:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800085a:	2309      	movs	r3, #9
 800085c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000860:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000864:	4619      	mov	r1, r3
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <HAL_QSPI_MspInit+0x18c>)
 8000868:	f000 ff32 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800086c:	2340      	movs	r3, #64	; 0x40
 800086e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000884:	230a      	movs	r3, #10
 8000886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_QSPI_MspInit+0x188>)
 8000892:	f000 ff1d 	bl	80016d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	37e8      	adds	r7, #232	; 0xe8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	52005000 	.word	0x52005000
 80008a4:	58024400 	.word	0x58024400
 80008a8:	58021000 	.word	0x58021000
 80008ac:	58020400 	.word	0x58020400
 80008b0:	58020c00 	.word	0x58020c00

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_MspInit+0x30>)
 80008bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x30>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x30>)
 80008cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	58024400 	.word	0x58024400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 fdbc 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <SystemInit+0xe4>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <SystemInit+0xe4>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <SystemInit+0xe8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	2b06      	cmp	r3, #6
 800095a:	d807      	bhi.n	800096c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <SystemInit+0xe8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f023 030f 	bic.w	r3, r3, #15
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <SystemInit+0xe8>)
 8000966:	f043 0307 	orr.w	r3, r3, #7
 800096a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <SystemInit+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <SystemInit+0xec>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <SystemInit+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <SystemInit+0xec>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4929      	ldr	r1, [pc, #164]	; (8000a28 <SystemInit+0xec>)
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <SystemInit+0xf0>)
 8000986:	4013      	ands	r3, r2
 8000988:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <SystemInit+0xe8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemInit+0xe8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f023 030f 	bic.w	r3, r3, #15
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <SystemInit+0xe8>)
 80009a0:	f043 0307 	orr.w	r3, r3, #7
 80009a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <SystemInit+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <SystemInit+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <SystemInit+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <SystemInit+0xec>)
 80009ba:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <SystemInit+0xf4>)
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <SystemInit+0xec>)
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <SystemInit+0xf8>)
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <SystemInit+0xec>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <SystemInit+0xfc>)
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <SystemInit+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <SystemInit+0xec>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <SystemInit+0xfc>)
 80009d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <SystemInit+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <SystemInit+0xec>)
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <SystemInit+0xfc>)
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <SystemInit+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0xec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <SystemInit+0xec>)
 80009ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <SystemInit+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <SystemInit+0x100>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemInit+0x104>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a06:	d202      	bcs.n	8000a0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <SystemInit+0x108>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <SystemInit+0x10c>)
 8000a10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	52002000 	.word	0x52002000
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a30:	02020200 	.word	0x02020200
 8000a34:	01ff0000 	.word	0x01ff0000
 8000a38:	01010280 	.word	0x01010280
 8000a3c:	5c001000 	.word	0x5c001000
 8000a40:	ffff0000 	.word	0xffff0000
 8000a44:	51008108 	.word	0x51008108
 8000a48:	52004000 	.word	0x52004000

08000a4c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
//	HAL_Delay(5);
//	MX_QUADSPI_Init();
	QSPI_ResetDevice(&hqspi);
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <w25qxx_Init+0x20>)
 8000a52:	f000 fba7 	bl	80011a4 <QSPI_ResetDevice>
//	HAL_Delay(0); // 1ms wait device stable
	w25qxx_ID = w25qxx_GetID();
 8000a56:	f000 f80d 	bl	8000a74 <w25qxx_GetID>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <w25qxx_Init+0x24>)
 8000a60:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8000a62:	f000 f897 	bl	8000b94 <w25qxx_ReadAllStatusReg>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000034 	.word	0x24000034
 8000a70:	24000084 	.word	0x24000084

08000a74 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <w25qxx_GetID+0x94>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	d114      	bne.n	8000aac <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000a82:	2306      	movs	r3, #6
 8000a84:	9304      	str	r3, [sp, #16]
 8000a86:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a8a:	9303      	str	r3, [sp, #12]
 8000a8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	2306      	movs	r3, #6
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2194      	movs	r1, #148	; 0x94
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <w25qxx_GetID+0x98>)
 8000aa6:	f000 fbd6 	bl	8001256 <QSPI_Send_CMD>
 8000aaa:	e013      	b.n	8000ad4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000aac:	2306      	movs	r3, #6
 8000aae:	9304      	str	r3, [sp, #16]
 8000ab0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000ab4:	9303      	str	r3, [sp, #12]
 8000ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	2200      	movs	r2, #0
 8000acc:	2190      	movs	r1, #144	; 0x90
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <w25qxx_GetID+0x98>)
 8000ad0:	f000 fbc1 	bl	8001256 <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ada:	4619      	mov	r1, r3
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <w25qxx_GetID+0x98>)
 8000ade:	f001 f945 	bl	8001d6c <HAL_QSPI_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e008      	b.n	8000afe <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 8000aec:	783b      	ldrb	r3, [r7, #0]
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	787b      	ldrb	r3, [r7, #1]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 8000afc:	88fb      	ldrh	r3, [r7, #6]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24000008 	.word	0x24000008
 8000b0c:	24000034 	.word	0x24000034

08000b10 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af06      	add	r7, sp, #24
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <w25qxx_ReadSR+0x7c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d112      	bne.n	8000b4c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8000b26:	79f9      	ldrb	r1, [r7, #7]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	9304      	str	r3, [sp, #16]
 8000b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b30:	9303      	str	r3, [sp, #12]
 8000b32:	2300      	movs	r3, #0
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <w25qxx_ReadSR+0x80>)
 8000b46:	f000 fb86 	bl	8001256 <QSPI_Send_CMD>
 8000b4a:	e011      	b.n	8000b70 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 8000b4c:	79f9      	ldrb	r1, [r7, #7]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	9304      	str	r3, [sp, #16]
 8000b52:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <w25qxx_ReadSR+0x80>)
 8000b6c:	f000 fb73 	bl	8001256 <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b70:	f107 030f 	add.w	r3, r7, #15
 8000b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <w25qxx_ReadSR+0x80>)
 8000b7c:	f001 f8f6 	bl	8001d6c <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000008 	.word	0x24000008
 8000b90:	24000034 	.word	0x24000034

08000b94 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8000b98:	2005      	movs	r0, #5
 8000b9a:	f7ff ffb9 	bl	8000b10 <w25qxx_ReadSR>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <w25qxx_ReadAllStatusReg+0x34>)
 8000ba4:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 8000ba6:	2035      	movs	r0, #53	; 0x35
 8000ba8:	f7ff ffb2 	bl	8000b10 <w25qxx_ReadSR>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <w25qxx_ReadAllStatusReg+0x34>)
 8000bb2:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f7ff ffab 	bl	8000b10 <w25qxx_ReadSR>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <w25qxx_ReadAllStatusReg+0x34>)
 8000bc0:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000080 	.word	0x24000080

08000bcc <W25QXX_Wait_Busy>:

void W25QXX_Wait_Busy(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 8000bd0:	bf00      	nop
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f7ff ff9c 	bl	8000b10 <w25qxx_ReadSR>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d0f7      	beq.n	8000bd2 <W25QXX_Wait_Busy+0x6>
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <w25qxx_Startup>:
/**
  * @brief  Initializes and configure the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t w25qxx_Startup(uint8_t DTRMode)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  /* Enable MemoryMapped mode */
  if( QSPI_EnableMemoryMappedMode(&hqspi,DTRMode) != w25qxx_OK )
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <w25qxx_Startup+0x28>)
 8000bf8:	f000 fa7c 	bl	80010f4 <QSPI_EnableMemoryMappedMode>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <w25qxx_Startup+0x1e>
  {
    return w25qxx_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <w25qxx_Startup+0x20>
  }
  return w25qxx_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000034 	.word	0x24000034

08000c14 <W25qxx_WriteEnable>:

uint8_t W25qxx_WriteEnable(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <W25qxx_WriteEnable+0x14>)
 8000c1a:	f000 fb51 	bl	80012c0 <QSPI_WriteEnable>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000034 	.word	0x24000034

08000c2c <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af06      	add	r7, sp, #24
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000c34:	f7ff ffee 	bl	8000c14 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8000c38:	f7ff ffc8 	bl	8000bcc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <W25qxx_EraseSector+0x84>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d115      	bne.n	8000c70 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8000c44:	2300      	movs	r3, #0
 8000c46:	9304      	str	r3, [sp, #16]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9303      	str	r3, [sp, #12]
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	2120      	movs	r1, #32
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <W25qxx_EraseSector+0x88>)
 8000c66:	f000 faf6 	bl	8001256 <QSPI_Send_CMD>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e014      	b.n	8000c9a <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8000c70:	2300      	movs	r3, #0
 8000c72:	9304      	str	r3, [sp, #16]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9303      	str	r3, [sp, #12]
 8000c78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2300      	movs	r3, #0
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	2120      	movs	r1, #32
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <W25qxx_EraseSector+0x88>)
 8000c92:	f000 fae0 	bl	8001256 <QSPI_Send_CMD>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
	

	if(result == w25qxx_OK)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8000ca0:	f7ff ff94 	bl	8000bcc <W25QXX_Wait_Busy>

	return result;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000008 	.word	0x24000008
 8000cb4:	24000034 	.word	0x24000034

08000cb8 <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af06      	add	r7, sp, #24
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000cc4:	f7ff ffa6 	bl	8000c14 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <W25qxx_PageProgram+0x9c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	d116      	bne.n	8000cfe <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	9304      	str	r3, [sp, #16]
 8000cd4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	2132      	movs	r1, #50	; 0x32
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <W25qxx_PageProgram+0xa0>)
 8000cf4:	f000 faaf 	bl	8001256 <QSPI_Send_CMD>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
 8000cfc:	e015      	b.n	8000d2a <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	2102      	movs	r1, #2
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <W25qxx_PageProgram+0xa0>)
 8000d22:	f000 fa98 	bl	8001256 <QSPI_Send_CMD>
 8000d26:	4603      	mov	r3, r0
 8000d28:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d107      	bne.n	8000d40 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <W25qxx_PageProgram+0xa0>)
 8000d38:	f000 ff86 	bl	8001c48 <HAL_QSPI_Transmit>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 8000d46:	f7ff ff41 	bl	8000bcc <W25QXX_Wait_Busy>
	
  return result;
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24000008 	.word	0x24000008
 8000d58:	24000034 	.word	0x24000034

08000d5c <W25qxx_Read>:


uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	; 0x50
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <W25qxx_Read+0xa4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d107      	bne.n	8000d80 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000d70:	23eb      	movs	r3, #235	; 0xeb
 8000d72:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000d74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7e:	e006      	b.n	8000d8e <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000d80:	23eb      	movs	r3, #235	; 0xeb
 8000d82:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000d9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8000dac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <W25qxx_Read+0xa8>)
 8000dce:	f000 fedd 	bl	8001b8c <HAL_QSPI_Command>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 8000dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d108      	bne.n	8000df2 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de4:	68f9      	ldr	r1, [r7, #12]
 8000de6:	4807      	ldr	r0, [pc, #28]	; (8000e04 <W25qxx_Read+0xa8>)
 8000de8:	f000 ffc0 	bl	8001d6c <HAL_QSPI_Receive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 8000df2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3750      	adds	r7, #80	; 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000008 	.word	0x24000008
 8000e04:	24000034 	.word	0x24000034

08000e08 <W25qxx_WriteNoCheck>:


void W25qxx_WriteNoCheck(uint8_t *pBuffer,uint32_t WriteAddr,uint32_t NumByteToWrite)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	uint16_t pageremain;	   
	pageremain = 256 - WriteAddr % 256;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e20:	82fb      	strh	r3, [r7, #22]
	if (NumByteToWrite <= pageremain)
 8000e22:	8afb      	ldrh	r3, [r7, #22]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d801      	bhi.n	8000e2e <W25qxx_WriteNoCheck+0x26>
	{
		pageremain = NumByteToWrite;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	82fb      	strh	r3, [r7, #22]
	}
	while(1)
	{
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000e2e:	8afb      	ldrh	r3, [r7, #22]
 8000e30:	461a      	mov	r2, r3
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff ff3f 	bl	8000cb8 <W25qxx_PageProgram>
		if (NumByteToWrite == pageremain)
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d016      	beq.n	8000e70 <W25qxx_WriteNoCheck+0x68>
		{
			break;
		}
	 	else //NumByteToWrite>pageremain
		{
			pBuffer += pageremain;
 8000e42:	8afb      	ldrh	r3, [r7, #22]
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
			WriteAddr += pageremain;
 8000e4a:	8afb      	ldrh	r3, [r7, #22]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]

			NumByteToWrite -= pageremain;
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	607b      	str	r3, [r7, #4]
			if (NumByteToWrite > 256)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e60:	d903      	bls.n	8000e6a <W25qxx_WriteNoCheck+0x62>
				pageremain = 256;
 8000e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e66:	82fb      	strh	r3, [r7, #22]
 8000e68:	e7e1      	b.n	8000e2e <W25qxx_WriteNoCheck+0x26>
			else
				pageremain = NumByteToWrite;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	82fb      	strh	r3, [r7, #22]
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000e6e:	e7de      	b.n	8000e2e <W25qxx_WriteNoCheck+0x26>
			break;
 8000e70:	bf00      	nop
		}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <W25qxx_Write>:


void W25qxx_Write(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	f843 0c14 	str.w	r0, [r3, #-20]
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	f843 1c18 	str.w	r1, [r3, #-24]
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	f823 2c1a 	strh.w	r2, [r3, #-26]
	uint16_t secoff;
	uint16_t secremain;
 	uint16_t i;
	uint8_t W25QXX_BUF[4096];

 	secpos = WriteAddr / 4096;
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000ea4:	0b1b      	lsrs	r3, r3, #12
 8000ea6:	f241 021c 	movw	r2, #4124	; 0x101c
 8000eaa:	443a      	add	r2, r7
 8000eac:	6013      	str	r3, [r2, #0]
	secoff = WriteAddr % 4096;
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ebc:	f241 021a 	movw	r2, #4122	; 0x101a
 8000ec0:	443a      	add	r2, r7
 8000ec2:	8013      	strh	r3, [r2, #0]
	secremain = 4096 - secoff;
 8000ec4:	f241 031a 	movw	r3, #4122	; 0x101a
 8000ec8:	443b      	add	r3, r7
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000ed0:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ed4:	443a      	add	r2, r7
 8000ed6:	8013      	strh	r3, [r2, #0]

 	if (NumByteToWrite <= secremain) secremain = NumByteToWrite;
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8000ee0:	f241 0318 	movw	r3, #4120	; 0x1018
 8000ee4:	443b      	add	r3, r7
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d807      	bhi.n	8000efc <W25qxx_Write+0x80>
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8000ef4:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ef8:	443a      	add	r2, r7
 8000efa:	8013      	strh	r3, [r2, #0]
	while(1)
	{
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8000efc:	f241 031c 	movw	r3, #4124	; 0x101c
 8000f00:	443b      	add	r3, r7
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	0319      	lsls	r1, r3, #12
 8000f06:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <W25qxx_Write+0x274>)
 8000f08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000f0c:	443b      	add	r3, r7
 8000f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff22 	bl	8000d5c <W25qxx_Read>
		for (i = 0;i < secremain; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f241 0216 	movw	r2, #4118	; 0x1016
 8000f1e:	443a      	add	r2, r7
 8000f20:	8013      	strh	r3, [r2, #0]
 8000f22:	e018      	b.n	8000f56 <W25qxx_Write+0xda>
		{
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8000f24:	f241 031a 	movw	r3, #4122	; 0x101a
 8000f28:	443b      	add	r3, r7
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f30:	443b      	add	r3, r7
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	f107 0220 	add.w	r2, r7, #32
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f40:	2bff      	cmp	r3, #255	; 0xff
 8000f42:	d113      	bne.n	8000f6c <W25qxx_Write+0xf0>
		for (i = 0;i < secremain; i++)
 8000f44:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f48:	443b      	add	r3, r7
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	f241 0216 	movw	r2, #4118	; 0x1016
 8000f52:	443a      	add	r2, r7
 8000f54:	8013      	strh	r3, [r2, #0]
 8000f56:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f5a:	443b      	add	r3, r7
 8000f5c:	881a      	ldrh	r2, [r3, #0]
 8000f5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f62:	443b      	add	r3, r7
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3dc      	bcc.n	8000f24 <W25qxx_Write+0xa8>
 8000f6a:	e000      	b.n	8000f6e <W25qxx_Write+0xf2>
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8000f6c:	bf00      	nop
		}
		if (i < secremain)
 8000f6e:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f72:	443b      	add	r3, r7
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f7a:	443b      	add	r3, r7
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d245      	bcs.n	800100e <W25qxx_Write+0x192>
		{
			W25qxx_EraseSector(secpos);
 8000f82:	f241 031c 	movw	r3, #4124	; 0x101c
 8000f86:	443b      	add	r3, r7
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	f7ff fe4f 	bl	8000c2c <W25qxx_EraseSector>
			for (i = 0; i < secremain; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f241 0216 	movw	r2, #4118	; 0x1016
 8000f94:	443a      	add	r2, r7
 8000f96:	8013      	strh	r3, [r2, #0]
 8000f98:	e020      	b.n	8000fdc <W25qxx_Write+0x160>
			{
				W25QXX_BUF[i + secoff] = pBuffer[i];
 8000f9a:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f9e:	443b      	add	r3, r7
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	f107 0220 	add.w	r2, r7, #32
 8000fa6:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8000faa:	441a      	add	r2, r3
 8000fac:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fb0:	443b      	add	r3, r7
 8000fb2:	8819      	ldrh	r1, [r3, #0]
 8000fb4:	f241 031a 	movw	r3, #4122	; 0x101a
 8000fb8:	443b      	add	r3, r7
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	f107 0120 	add.w	r1, r7, #32
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < secremain; i++)
 8000fca:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fce:	443b      	add	r3, r7
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f241 0216 	movw	r2, #4118	; 0x1016
 8000fd8:	443a      	add	r2, r7
 8000fda:	8013      	strh	r3, [r2, #0]
 8000fdc:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fe0:	443b      	add	r3, r7
 8000fe2:	881a      	ldrh	r2, [r3, #0]
 8000fe4:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fe8:	443b      	add	r3, r7
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3d4      	bcc.n	8000f9a <W25qxx_Write+0x11e>
			}
			W25qxx_WriteNoCheck(W25QXX_BUF, secpos * 4096, 4096);
 8000ff0:	f241 031c 	movw	r3, #4124	; 0x101c
 8000ff4:	443b      	add	r3, r7
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0319      	lsls	r1, r3, #12
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <W25qxx_Write+0x274>)
 8000ffc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001000:	443b      	add	r3, r7
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fefe 	bl	8000e08 <W25qxx_WriteNoCheck>
 800100c:	e010      	b.n	8001030 <W25qxx_Write+0x1b4>
		}
		else
		{
			W25qxx_WriteNoCheck(pBuffer, WriteAddr, secremain);
 800100e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001012:	443b      	add	r3, r7
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	f107 0220 	add.w	r2, r7, #32
 800101a:	4611      	mov	r1, r2
 800101c:	f107 0220 	add.w	r2, r7, #32
 8001020:	4610      	mov	r0, r2
 8001022:	461a      	mov	r2, r3
 8001024:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8001028:	f850 0c14 	ldr.w	r0, [r0, #-20]
 800102c:	f7ff feec 	bl	8000e08 <W25qxx_WriteNoCheck>
		}
		if (NumByteToWrite == secremain)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8001038:	f241 0318 	movw	r3, #4120	; 0x1018
 800103c:	443b      	add	r3, r7
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d04e      	beq.n	80010e2 <W25qxx_Write+0x266>
		{
			break;
		}
		else
		{
			secpos++;
 8001044:	f241 031c 	movw	r3, #4124	; 0x101c
 8001048:	443b      	add	r3, r7
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	f241 021c 	movw	r2, #4124	; 0x101c
 8001052:	443a      	add	r2, r7
 8001054:	6013      	str	r3, [r2, #0]
			secoff = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f241 021a 	movw	r2, #4122	; 0x101a
 800105c:	443a      	add	r2, r7
 800105e:	8013      	strh	r3, [r2, #0]

			pBuffer += secremain;
 8001060:	f241 0318 	movw	r3, #4120	; 0x1018
 8001064:	443b      	add	r3, r7
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	f107 0220 	add.w	r2, r7, #32
 800106c:	4611      	mov	r1, r2
 800106e:	f107 0220 	add.w	r2, r7, #32
 8001072:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001076:	4413      	add	r3, r2
 8001078:	f841 3c14 	str.w	r3, [r1, #-20]
			WriteAddr += secremain;
 800107c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001080:	443b      	add	r3, r7
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	f107 0220 	add.w	r2, r7, #32
 8001088:	4611      	mov	r1, r2
 800108a:	f107 0220 	add.w	r2, r7, #32
 800108e:	f852 2c18 	ldr.w	r2, [r2, #-24]
 8001092:	4413      	add	r3, r2
 8001094:	f841 3c18 	str.w	r3, [r1, #-24]
			NumByteToWrite -= secremain;
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4619      	mov	r1, r3
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 80010a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80010aa:	443b      	add	r3, r7
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f821 3c1a 	strh.w	r3, [r1, #-26]
			if (NumByteToWrite > 4096)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 80010bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c0:	d906      	bls.n	80010d0 <W25qxx_Write+0x254>
				secremain = 4096;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	f241 0218 	movw	r2, #4120	; 0x1018
 80010ca:	443a      	add	r2, r7
 80010cc:	8013      	strh	r3, [r2, #0]
 80010ce:	e715      	b.n	8000efc <W25qxx_Write+0x80>
			else
				secremain = NumByteToWrite;
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 80010d8:	f241 0218 	movw	r2, #4120	; 0x1018
 80010dc:	443a      	add	r2, r7
 80010de:	8013      	strh	r3, [r2, #0]
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 80010e0:	e70c      	b.n	8000efc <W25qxx_Write+0x80>
			break;
 80010e2:	bf00      	nop
		}
	}
}
 80010e4:	bf00      	nop
 80010e6:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	ffffeff4 	.word	0xffffeff4

080010f4 <QSPI_EnableMemoryMappedMode>:
	* @param  hqspi: QSPI handle
  * @param  DTRMode: w25qxx_DTRMode DTR mode ,w25qxx_NormalMode Normal mode
  * @retval QSPI memory status
  */
static uint32_t QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi,uint8_t DTRMode)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <QSPI_EnableMemoryMappedMode+0xac>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d103      	bne.n	8001110 <QSPI_EnableMemoryMappedMode+0x1c>
		s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
 800110e:	e002      	b.n	8001116 <QSPI_EnableMemoryMappedMode+0x22>
	else 
		s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
	
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001116:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.Address           = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001124:	61fb      	str	r3, [r7, #28]
	
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8001126:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AlternateBytes    = 0xEF;
 800112c:	23ef      	movs	r3, #239	; 0xef
 800112e:	61bb      	str	r3, [r7, #24]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]

  s_command.DataMode          = QSPI_DATA_4_LINES;	
 8001134:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
	
	if(DTRMode == w25qxx_DTRMode)
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b06      	cmp	r3, #6
 800113e:	d107      	bne.n	8001150 <QSPI_EnableMemoryMappedMode+0x5c>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_DTR_CMD; 
 8001140:	23ed      	movs	r3, #237	; 0xed
 8001142:	613b      	str	r3, [r7, #16]
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD_DTR;
 8001144:	2304      	movs	r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
		s_command.DdrMode         = QSPI_DDR_MODE_ENABLE;
 8001148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800114e:	e00c      	b.n	800116a <QSPI_EnableMemoryMappedMode+0x76>
	}
	else
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8001150:	23eb      	movs	r3, #235	; 0xeb
 8001152:	613b      	str	r3, [r7, #16]
		
		if(w25qxx_Mode == w25qxx_QPIMode)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <QSPI_EnableMemoryMappedMode+0xac>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d102      	bne.n	8001162 <QSPI_EnableMemoryMappedMode+0x6e>
			s_command.DummyCycles   = W25X_DUMMY_CYCLES_READ_QUAD;
 800115c:	2306      	movs	r3, #6
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	e001      	b.n	8001166 <QSPI_EnableMemoryMappedMode+0x72>
		else
			s_command.DummyCycles   = W25X_DUMMY_CYCLES_READ_QUAD-2;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
		
		s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800116a:	2300      	movs	r3, #0
 800116c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 800116e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001172:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 ff04 	bl	8001f94 <HAL_QSPI_MemoryMapped>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <QSPI_EnableMemoryMappedMode+0xa2>
  {
    return w25qxx_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <QSPI_EnableMemoryMappedMode+0xa4>
  }

  return w25qxx_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3748      	adds	r7, #72	; 0x48
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24000008 	.word	0x24000008

080011a4 <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80011b2:	2366      	movs	r3, #102	; 0x66
 80011b4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fcd5 	bl	8001b8c <HAL_QSPI_Command>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e030      	b.n	800124e <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 80011ec:	2399      	movs	r3, #153	; 0x99
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fcc6 	bl	8001b8c <HAL_QSPI_Command>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e021      	b.n	800124e <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8001210:	2366      	movs	r3, #102	; 0x66
 8001212:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fcb4 	bl	8001b8c <HAL_QSPI_Command>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command*/
  s_command.Instruction = W25X_ResetDevice;
 800122e:	2399      	movs	r3, #153	; 0x99
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fca5 	bl	8001b8c <HAL_QSPI_Command>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <QSPI_ResetDevice+0xaa>
  }

  return w25qxx_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3740      	adds	r7, #64	; 0x40
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <QSPI_Send_CMD>:


static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b092      	sub	sp, #72	; 0x48
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 8001268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 8001274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 8001284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 8001288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 800128c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001294:	2300      	movs	r3, #0
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8001298:	2300      	movs	r3, #0
 800129a:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4619      	mov	r1, r3
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fc70 	bl	8001b8c <HAL_QSPI_Command>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3748      	adds	r7, #72	; 0x48
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <QSPI_WriteEnable+0xb4>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d103      	bne.n	80012d8 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80012d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80012d6:	e002      	b.n	80012de <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 80012de:	2306      	movs	r3, #6
 80012e0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012f6:	2300      	movs	r3, #0
 80012f8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012fa:	2300      	movs	r3, #0
 80012fc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fc3f 	bl	8001b8c <HAL_QSPI_Command>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e028      	b.n	800136a <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8001318:	2302      	movs	r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 800131c:	2302      	movs	r3, #2
 800131e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001328:	2310      	movs	r3, #16
 800132a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800132c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001330:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 8001332:	2305      	movs	r3, #5
 8001334:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <QSPI_WriteEnable+0xb4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d103      	bne.n	8001346 <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 800133e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
 8001344:	e002      	b.n	800134c <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 8001346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800134a:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	f107 0120 	add.w	r1, r7, #32
 8001354:	f241 3388 	movw	r3, #5000	; 0x1388
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fda4 	bl	8001ea6 <HAL_QSPI_AutoPolling>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3758      	adds	r7, #88	; 0x58
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000008 	.word	0x24000008

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff fade 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a6:	f003 f82b 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7fe ffeb 	bl	8000384 <main>
  bx  lr
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80013bc:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 80013c0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80013c4:	2400008c 	.word	0x2400008c

080013c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC3_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f94a 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d8:	f001 fdee 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_Init+0x68>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4913      	ldr	r1, [pc, #76]	; (8001438 <HAL_Init+0x6c>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_Init+0x6c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x70>)
 800140e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_Init+0x74>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f814 	bl	8001444 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e002      	b.n	800142c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001426:	f7ff fa45 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400
 8001438:	080044c0 	.word	0x080044c0
 800143c:	24000004 	.word	0x24000004
 8001440:	24000000 	.word	0x24000000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_InitTick+0x60>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e021      	b.n	800149c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_InitTick+0x64>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_InitTick+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f921 	bl	80016b6 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800148c:	f000 f8f9 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x68>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000010 	.word	0x24000010
 80014a8:	24000000 	.word	0x24000000
 80014ac:	2400000c 	.word	0x2400000c

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	24000010 	.word	0x24000010
 80014d4:	24000088 	.word	0x24000088

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	24000088 	.word	0x24000088

080014f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetREVID+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <__NVIC_SetPriorityGrouping>:
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0000 	.word	0x05fa0000

08001550 <__NVIC_GetPriorityGrouping>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_SetPriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff47 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff5e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb2 	bl	8001628 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016de:	4b89      	ldr	r3, [pc, #548]	; (8001904 <HAL_GPIO_Init+0x234>)
 80016e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016e2:	e194      	b.n	8001a0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8186 	beq.w	8001a08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_Init+0x44>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d130      	bne.n	8001776 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174a:	2201      	movs	r2, #1
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 0201 	and.w	r2, r3, #1
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b03      	cmp	r3, #3
 8001780:	d017      	beq.n	80017b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d123      	bne.n	8001806 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0203 	and.w	r2, r3, #3
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80e0 	beq.w	8001a08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x238>)
 800184a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800184e:	4a2e      	ldr	r2, [pc, #184]	; (8001908 <HAL_GPIO_Init+0x238>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_GPIO_Init+0x238>)
 800185a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_GPIO_Init+0x23c>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_GPIO_Init+0x240>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d052      	beq.n	8001938 <HAL_GPIO_Init+0x268>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <HAL_GPIO_Init+0x244>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d031      	beq.n	80018fe <HAL_GPIO_Init+0x22e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_GPIO_Init+0x248>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d02b      	beq.n	80018fa <HAL_GPIO_Init+0x22a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_GPIO_Init+0x24c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d025      	beq.n	80018f6 <HAL_GPIO_Init+0x226>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_GPIO_Init+0x250>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01f      	beq.n	80018f2 <HAL_GPIO_Init+0x222>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_GPIO_Init+0x254>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d019      	beq.n	80018ee <HAL_GPIO_Init+0x21e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_GPIO_Init+0x258>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0x21a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_GPIO_Init+0x25c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_GPIO_Init+0x216>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x260>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d007      	beq.n	80018e2 <HAL_GPIO_Init+0x212>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_GPIO_Init+0x264>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_GPIO_Init+0x20e>
 80018da:	2309      	movs	r3, #9
 80018dc:	e02d      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018de:	230a      	movs	r3, #10
 80018e0:	e02b      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018e2:	2308      	movs	r3, #8
 80018e4:	e029      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e027      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018ea:	2306      	movs	r3, #6
 80018ec:	e025      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e023      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e021      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e01f      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e01d      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e01b      	b.n	800193a <HAL_GPIO_Init+0x26a>
 8001902:	bf00      	nop
 8001904:	58000080 	.word	0x58000080
 8001908:	58024400 	.word	0x58024400
 800190c:	58000400 	.word	0x58000400
 8001910:	58020000 	.word	0x58020000
 8001914:	58020400 	.word	0x58020400
 8001918:	58020800 	.word	0x58020800
 800191c:	58020c00 	.word	0x58020c00
 8001920:	58021000 	.word	0x58021000
 8001924:	58021400 	.word	0x58021400
 8001928:	58021800 	.word	0x58021800
 800192c:	58021c00 	.word	0x58021c00
 8001930:	58022000 	.word	0x58022000
 8001934:	58022400 	.word	0x58022400
 8001938:	2300      	movs	r3, #0
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194a:	4938      	ldr	r1, [pc, #224]	; (8001a2c <HAL_GPIO_Init+0x35c>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f ae63 	bne.w	80016e4 <HAL_GPIO_Init+0x14>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3724      	adds	r7, #36	; 0x24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	58000400 	.word	0x58000400

08001a30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00a      	beq.n	8001a5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e01f      	b.n	8001a96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e01d      	b.n	8001a96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	490f      	ldr	r1, [pc, #60]	; (8001aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a6a:	f7ff fd35 	bl	80014d8 <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a70:	e009      	b.n	8001a86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a72:	f7ff fd31 	bl	80014d8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a80:	d901      	bls.n	8001a86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e007      	b.n	8001a96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a92:	d1ee      	bne.n	8001a72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	58024800 	.word	0x58024800

08001aa4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fd14 	bl	80014d8 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e05f      	b.n	8001b7c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fe2b 	bl	8000724 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001ace:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fac0 	bl	8002058 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	021a      	lsls	r2, r3, #8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2120      	movs	r1, #32
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fab8 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d135      	bne.n	8001b7a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_QSPI_Init+0xe0>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6852      	ldr	r2, [r2, #4]
 8001b1c:	0611      	lsls	r1, r2, #24
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68d2      	ldr	r2, [r2, #12]
 8001b22:	4311      	orrs	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	69d2      	ldr	r2, [r2, #28]
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6a12      	ldr	r2, [r2, #32]
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_QSPI_Init+0xe4>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6912      	ldr	r2, [r2, #16]
 8001b46:	0411      	lsls	r1, r2, #16
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6952      	ldr	r2, [r2, #20]
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6992      	ldr	r2, [r2, #24]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	00ffff2f 	.word	0x00ffff2f
 8001b88:	ffe0f8fe 	.word	0xffe0f8fe

08001b8c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fc9e 	bl	80014d8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_QSPI_Command+0x22>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e048      	b.n	8001c40 <HAL_QSPI_Command+0xb4>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d137      	bne.n	8001c32 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fa4a 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d125      	bne.n	8001c36 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001bea:	2200      	movs	r2, #0
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa77 	bl	80020e2 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d115      	bne.n	8001c28 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2201      	movs	r2, #1
 8001c04:	2102      	movs	r1, #2
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fa34 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c26:	e006      	b.n	8001c36 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c30:	e001      	b.n	8001c36 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff fc3e 	bl	80014d8 <HAL_GetTick>
 8001c5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3320      	adds	r3, #32
 8001c64:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_QSPI_Transmit+0x2e>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e076      	b.n	8001d64 <HAL_QSPI_Transmit+0x11c>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d165      	bne.n	8001d56 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d056      	beq.n	8001d44 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2212      	movs	r2, #18
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001cca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001ccc:	e01b      	b.n	8001d06 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f9cb 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d113      	bne.n	8001d10 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1df      	bne.n	8001cce <HAL_QSPI_Transmit+0x86>
 8001d0e:	e000      	b.n	8001d12 <HAL_QSPI_Transmit+0xca>
          break;
 8001d10:	bf00      	nop
      }

      if (status == HAL_OK)
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d110      	bne.n	8001d3a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2102      	movs	r1, #2
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9a6 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d42:	e00a      	b.n	8001d5a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f043 0208 	orr.w	r2, r3, #8
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	77fb      	strb	r3, [r7, #31]
 8001d54:	e001      	b.n	8001d5a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
 8001d58:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff fbac 	bl	80014d8 <HAL_GetTick>
 8001d80:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3320      	adds	r3, #32
 8001d90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_QSPI_Receive+0x36>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e07d      	b.n	8001e9e <HAL_QSPI_Receive+0x132>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d16c      	bne.n	8001e90 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d05d      	beq.n	8001e7e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2222      	movs	r2, #34	; 0x22
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dfa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001e04:	e01c      	b.n	8001e40 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2106      	movs	r1, #6
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f92f 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d114      	bne.n	8001e4a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	1e5a      	subs	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1de      	bne.n	8001e06 <HAL_QSPI_Receive+0x9a>
 8001e48:	e000      	b.n	8001e4c <HAL_QSPI_Receive+0xe0>
          break;
 8001e4a:	bf00      	nop
      }

      if (status == HAL_OK)
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d110      	bne.n	8001e74 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f909 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e7c:	e00a      	b.n	8001e94 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0208 	orr.w	r2, r3, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	77fb      	strb	r3, [r7, #31]
 8001e8e:	e001      	b.n	8001e94 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af02      	add	r7, sp, #8
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fb10 	bl	80014d8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_QSPI_AutoPolling+0x24>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e060      	b.n	8001f8c <HAL_QSPI_AutoPolling+0xe6>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d14f      	bne.n	8001f7e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2242      	movs	r2, #66	; 0x42
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f8bc 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d13d      	bne.n	8001f82 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6852      	ldr	r2, [r2, #4]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f3c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f8c8 	bl	80020e2 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f889 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2208      	movs	r2, #8
 8001f72:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f7c:	e001      	b.n	8001f82 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fa9a 	bl	80014d8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_QSPI_MemoryMapped+0x22>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e04c      	b.n	8002050 <HAL_QSPI_MemoryMapped+0xbc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d13b      	bne.n	8002042 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2282      	movs	r2, #130	; 0x82
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f845 	bl	8002074 <QSPI_WaitFlagStateUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d128      	bne.n	8002046 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0108 	bic.w	r1, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b08      	cmp	r3, #8
 8002010:	d110      	bne.n	8002034 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002032:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002034:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f851 	bl	80020e2 <QSPI_Config>
 8002040:	e001      	b.n	8002046 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002042:	2302      	movs	r3, #2
 8002044:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800204e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002084:	e01a      	b.n	80020bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800208c:	d016      	beq.n	80020bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7ff fa23 	bl	80014d8 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2204      	movs	r2, #4
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e00e      	b.n	80020da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1d6      	bne.n	8002086 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <QSPI_Config+0x28>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80020fc:	d005      	beq.n	800210a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3a01      	subs	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80b9 	beq.w	8002286 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05f      	beq.n	80021dc <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d031      	beq.n	8002192 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	431a      	orrs	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	431a      	orrs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	431a      	orrs	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	049b      	lsls	r3, r3, #18
 800214a:	431a      	orrs	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	431a      	orrs	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	431a      	orrs	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	431a      	orrs	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	431a      	orrs	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	ea42 0103 	orr.w	r1, r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	430a      	orrs	r2, r1
 800217a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002182:	f000 812e 	beq.w	80023e2 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	6852      	ldr	r2, [r2, #4]
 800218e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002190:	e127      	b.n	80023e2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	431a      	orrs	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	049b      	lsls	r3, r3, #18
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	615a      	str	r2, [r3, #20]
}
 80021da:	e102      	b.n	80023e2 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02e      	beq.n	8002242 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	049b      	lsls	r3, r3, #18
 8002200:	431a      	orrs	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	431a      	orrs	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	431a      	orrs	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	431a      	orrs	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	ea42 0103 	orr.w	r1, r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	430a      	orrs	r2, r1
 800222a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002232:	f000 80d6 	beq.w	80023e2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	619a      	str	r2, [r3, #24]
}
 8002240:	e0cf      	b.n	80023e2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	431a      	orrs	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	431a      	orrs	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	431a      	orrs	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	049b      	lsls	r3, r3, #18
 800225e:	431a      	orrs	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	431a      	orrs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	431a      	orrs	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	430a      	orrs	r2, r1
 8002282:	615a      	str	r2, [r3, #20]
}
 8002284:	e0ad      	b.n	80023e2 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d058      	beq.n	8002340 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	6892      	ldr	r2, [r2, #8]
 8002296:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02d      	beq.n	80022fc <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	049b      	lsls	r3, r3, #18
 80022bc:	431a      	orrs	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	ea42 0103 	orr.w	r1, r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80022ee:	d078      	beq.n	80023e2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	6852      	ldr	r2, [r2, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	e072      	b.n	80023e2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	431a      	orrs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	431a      	orrs	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	431a      	orrs	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	049b      	lsls	r3, r3, #18
 8002318:	431a      	orrs	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	431a      	orrs	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	431a      	orrs	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	431a      	orrs	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	430a      	orrs	r2, r1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	e050      	b.n	80023e2 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02a      	beq.n	800239e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	431a      	orrs	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	431a      	orrs	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	431a      	orrs	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	049b      	lsls	r3, r3, #18
 8002364:	431a      	orrs	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	431a      	orrs	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	431a      	orrs	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	ea42 0103 	orr.w	r1, r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	430a      	orrs	r2, r1
 8002388:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002390:	d027      	beq.n	80023e2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	619a      	str	r2, [r3, #24]
}
 800239c:	e021      	b.n	80023e2 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01d      	beq.n	80023e2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	049b      	lsls	r3, r3, #18
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	ea42 0103 	orr.w	r1, r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	430a      	orrs	r2, r1
 80023e0:	615a      	str	r2, [r3, #20]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f000 bc1d 	b.w	8002c3e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8087 	beq.w	8002520 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800241c:	4b96      	ldr	r3, [pc, #600]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	2b10      	cmp	r3, #16
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0x48>
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b18      	cmp	r3, #24
 800242c:	d110      	bne.n	8002450 <HAL_RCC_OscConfig+0x60>
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d06c      	beq.n	800251e <HAL_RCC_OscConfig+0x12e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d168      	bne.n	800251e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e3f6      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x78>
 800245a:	4b87      	ldr	r3, [pc, #540]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a86      	ldr	r2, [pc, #536]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e02e      	b.n	80024c6 <HAL_RCC_OscConfig+0xd6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x9a>
 8002470:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e01d      	b.n	80024c6 <HAL_RCC_OscConfig+0xd6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_OscConfig+0xbe>
 8002494:	4b78      	ldr	r3, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800249a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b75      	ldr	r3, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a74      	ldr	r2, [pc, #464]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0xd6>
 80024ae:	4b72      	ldr	r3, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a71      	ldr	r2, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d013      	beq.n	80024f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7ff f803 	bl	80014d8 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d6:	f7fe ffff 	bl	80014d8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e3aa      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e8:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0xe6>
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe ffef 	bl	80014d8 <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fe:	f7fe ffeb 	bl	80014d8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e396      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x10e>
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80cb 	beq.w	80026c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b52      	ldr	r3, [pc, #328]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002536:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002538:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_RCC_OscConfig+0x164>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b18      	cmp	r3, #24
 8002548:	d156      	bne.n	80025f8 <HAL_RCC_OscConfig+0x208>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d151      	bne.n	80025f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b48      	ldr	r3, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x17c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e368      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 0219 	bic.w	r2, r3, #25
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800257e:	f7fe ffab 	bl	80014d8 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7fe ffa7 	bl	80014d8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e352      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002598:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	f7fe ffa4 	bl	80014f0 <HAL_GetREVID>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d817      	bhi.n	80025e2 <HAL_RCC_OscConfig+0x1f2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x1dc>
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ca:	e07b      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	031b      	lsls	r3, r3, #12
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e0:	e070      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	4921      	ldr	r1, [pc, #132]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f6:	e065      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d048      	beq.n	8002692 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0219 	bic.w	r2, r3, #25
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	491a      	ldr	r1, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe ff61 	bl	80014d8 <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe ff5d 	bl	80014d8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e308      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	f7fe ff5a 	bl	80014f0 <HAL_GetREVID>
 800263c:	4603      	mov	r3, r0
 800263e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002642:	4293      	cmp	r3, r2
 8002644:	d81a      	bhi.n	800267c <HAL_RCC_OscConfig+0x28c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x270>
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	6053      	str	r3, [r2, #4]
 800265e:	e031      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	031b      	lsls	r3, r3, #12
 800266e:	4902      	ldr	r1, [pc, #8]	; (8002678 <HAL_RCC_OscConfig+0x288>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	e026      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
 8002676:	bf00      	nop
 8002678:	58024400 	.word	0x58024400
 800267c:	4b9a      	ldr	r3, [pc, #616]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	4997      	ldr	r1, [pc, #604]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e018      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b95      	ldr	r3, [pc, #596]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a94      	ldr	r2, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe ff1b 	bl	80014d8 <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe ff17 	bl	80014d8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e2c2      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b8:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a9 	beq.w	8002824 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d007      	beq.n	80026f8 <HAL_RCC_OscConfig+0x308>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b18      	cmp	r3, #24
 80026ec:	d13a      	bne.n	8002764 <HAL_RCC_OscConfig+0x374>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d135      	bne.n	8002764 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x320>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e296      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002710:	f7fe feee 	bl	80014f0 <HAL_GetREVID>
 8002714:	4603      	mov	r3, r0
 8002716:	f241 0203 	movw	r2, #4099	; 0x1003
 800271a:	4293      	cmp	r3, r2
 800271c:	d817      	bhi.n	800274e <HAL_RCC_OscConfig+0x35e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	2b20      	cmp	r3, #32
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x348>
 8002726:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002734:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002736:	e075      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	069b      	lsls	r3, r3, #26
 8002746:	4968      	ldr	r1, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800274c:	e06a      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274e:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	4962      	ldr	r1, [pc, #392]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002762:	e05f      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d042      	beq.n	80027f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800276c:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe feae 	bl	80014d8 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002780:	f7fe feaa 	bl	80014d8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e255      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002792:	4b55      	ldr	r3, [pc, #340]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800279e:	f7fe fea7 	bl	80014f0 <HAL_GetREVID>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d817      	bhi.n	80027dc <HAL_RCC_OscConfig+0x3ec>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d108      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3d6>
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027bc:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027c2:	6053      	str	r3, [r2, #4]
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	069b      	lsls	r3, r3, #26
 80027d4:	4944      	ldr	r1, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e023      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	493f      	ldr	r1, [pc, #252]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fe6b 	bl	80014d8 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002806:	f7fe fe67 	bl	80014d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e212      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d036      	beq.n	800289e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fe48 	bl	80014d8 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fe44 	bl	80014d8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1ef      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x45c>
 800286a:	e018      	b.n	800289e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fe2e 	bl	80014d8 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe fe2a 	bl	80014d8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1d5      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d039      	beq.n	800291e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028be:	f7fe fe0b 	bl	80014d8 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7fe fe07 	bl	80014d8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1b2      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4d6>
 80028e4:	e01b      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ec:	4b9b      	ldr	r3, [pc, #620]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a9a      	ldr	r2, [pc, #616]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80028f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f8:	f7fe fdee 	bl	80014d8 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002900:	f7fe fdea 	bl	80014d8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e195      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002912:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8081 	beq.w	8002a2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800292c:	4b8c      	ldr	r3, [pc, #560]	; (8002b60 <HAL_RCC_OscConfig+0x770>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a8b      	ldr	r2, [pc, #556]	; (8002b60 <HAL_RCC_OscConfig+0x770>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002938:	f7fe fdce 	bl	80014d8 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fdca 	bl	80014d8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e175      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002952:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_RCC_OscConfig+0x770>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x584>
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	e02d      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x5a6>
 800297c:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a76      	ldr	r2, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c8>
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a6e      	ldr	r2, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	4b6c      	ldr	r3, [pc, #432]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a6b      	ldr	r2, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a64      	ldr	r2, [pc, #400]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fd7e 	bl	80014d8 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fd7a 	bl	80014d8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e123      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x5f0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fd68 	bl	80014d8 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fd64 	bl	80014d8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e10d      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a22:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8102 	beq.w	8002c3c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a38:	4b48      	ldr	r3, [pc, #288]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a40:	2b18      	cmp	r3, #24
 8002a42:	f000 80bd 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 809e 	bne.w	8002b8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a41      	ldr	r2, [pc, #260]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fd3c 	bl	80014d8 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fd38 	bl	80014d8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0e3      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a82:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCC_OscConfig+0x774>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	430a      	orrs	r2, r1
 8002a96:	4931      	ldr	r1, [pc, #196]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002acc:	4923      	ldr	r1, [pc, #140]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_RCC_OscConfig+0x778>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aea:	00d2      	lsls	r2, r2, #3
 8002aec:	491b      	ldr	r1, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f023 020c 	bic.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4917      	ldr	r1, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f023 0202 	bic.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	4912      	ldr	r1, [pc, #72]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fcc1 	bl	80014d8 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x78e>
 8002b5a:	bf00      	nop
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	58024800 	.word	0x58024800
 8002b64:	fffffc0c 	.word	0xfffffc0c
 8002b68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fcb4 	bl	80014d8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e05f      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x77c>
 8002b8a:	e057      	b.n	8002c3c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2d      	ldr	r2, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fc9e 	bl	80014d8 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fc9a 	bl	80014d8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e045      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x7b0>
 8002bbe:	e03d      	b.n	8002c3c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_OscConfig+0x858>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d031      	beq.n	8002c38 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0203 	and.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d12a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d122      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d108      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	0e1b      	lsrs	r3, r3, #24
 8002c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3730      	adds	r7, #48	; 0x30
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400

08002c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e19c      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b8a      	ldr	r3, [pc, #552]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b87      	ldr	r3, [pc, #540]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4985      	ldr	r1, [pc, #532]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b83      	ldr	r3, [pc, #524]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e184      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	4b7b      	ldr	r3, [pc, #492]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d908      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cac:	4b78      	ldr	r3, [pc, #480]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4975      	ldr	r1, [pc, #468]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cda:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	496a      	ldr	r1, [pc, #424]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d908      	bls.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	495e      	ldr	r1, [pc, #376]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d36:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4953      	ldr	r1, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4947      	ldr	r1, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d055      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d82:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4940      	ldr	r1, [pc, #256]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0f6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d115      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ea      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0de      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 0207 	bic.w	r2, r3, #7
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4925      	ldr	r1, [pc, #148]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fb6b 	bl	80014d8 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e06:	f7fe fb67 	bl	80014d8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0be      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d1eb      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d208      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f023 020f 	bic.w	r2, r3, #15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d214      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	4906      	ldr	r1, [pc, #24]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e086      	b.n	8002f9a <HAL_RCC_ClockConfig+0x34e>
 8002e8c:	52002000 	.word	0x52002000
 8002e90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4939      	ldr	r1, [pc, #228]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d208      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	492e      	ldr	r1, [pc, #184]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d208      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4922      	ldr	r1, [pc, #136]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d010      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d208      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4917      	ldr	r1, [pc, #92]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f4c:	f000 f834 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	4912      	ldr	r1, [pc, #72]	; (8002fa8 <HAL_RCC_ClockConfig+0x35c>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_RCC_ClockConfig+0x35c>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_RCC_ClockConfig+0x360>)
 8002f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x364>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x368>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa58 	bl	8001444 <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	080044c0 	.word	0x080044c0
 8002fac:	24000004 	.word	0x24000004
 8002fb0:	24000000 	.word	0x24000000
 8002fb4:	2400000c 	.word	0x2400000c

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbe:	4bb3      	ldr	r3, [pc, #716]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc6:	2b18      	cmp	r3, #24
 8002fc8:	f200 8155 	bhi.w	8003276 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003039 	.word	0x08003039
 8002fd8:	08003277 	.word	0x08003277
 8002fdc:	08003277 	.word	0x08003277
 8002fe0:	08003277 	.word	0x08003277
 8002fe4:	08003277 	.word	0x08003277
 8002fe8:	08003277 	.word	0x08003277
 8002fec:	08003277 	.word	0x08003277
 8002ff0:	08003277 	.word	0x08003277
 8002ff4:	0800305f 	.word	0x0800305f
 8002ff8:	08003277 	.word	0x08003277
 8002ffc:	08003277 	.word	0x08003277
 8003000:	08003277 	.word	0x08003277
 8003004:	08003277 	.word	0x08003277
 8003008:	08003277 	.word	0x08003277
 800300c:	08003277 	.word	0x08003277
 8003010:	08003277 	.word	0x08003277
 8003014:	08003065 	.word	0x08003065
 8003018:	08003277 	.word	0x08003277
 800301c:	08003277 	.word	0x08003277
 8003020:	08003277 	.word	0x08003277
 8003024:	08003277 	.word	0x08003277
 8003028:	08003277 	.word	0x08003277
 800302c:	08003277 	.word	0x08003277
 8003030:	08003277 	.word	0x08003277
 8003034:	0800306b 	.word	0x0800306b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003038:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003044:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003056:	e111      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003058:	4b8d      	ldr	r3, [pc, #564]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305a:	61bb      	str	r3, [r7, #24]
    break;
 800305c:	e10e      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800305e:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003060:	61bb      	str	r3, [r7, #24]
    break;
 8003062:	e10b      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003064:	4b8c      	ldr	r3, [pc, #560]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003066:	61bb      	str	r3, [r7, #24]
    break;
 8003068:	e108      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003074:	4b85      	ldr	r3, [pc, #532]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003080:	4b82      	ldr	r3, [pc, #520]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800308a:	4b80      	ldr	r3, [pc, #512]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80e1 	beq.w	8003270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f000 8083 	beq.w	80031bc <HAL_RCC_GetSysClockFreq+0x204>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	f200 80a1 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x248>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x114>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d056      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ca:	e099      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a02 	vldr	s12, [r7, #8]
 8003116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003132:	e087      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a02 	vldr	s12, [r7, #8]
 800315a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003176:	e065      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a02 	vldr	s12, [r7, #8]
 800319e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ba:	e043      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fe:	e021      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a02 	vldr	s12, [r7, #8]
 8003226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800329c <HAL_RCC_GetSysClockFreq+0x2e4>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	0a5b      	lsrs	r3, r3, #9
 800324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324e:	3301      	adds	r3, #1
 8003250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800325c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003268:	ee17 3a90 	vmov	r3, s15
 800326c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
    break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003278:	61bb      	str	r3, [r7, #24]
    break;
 800327a:	bf00      	nop
  }

  return sysclockfreq;
 800327c:	69bb      	ldr	r3, [r7, #24]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	58024400 	.word	0x58024400
 8003290:	03d09000 	.word	0x03d09000
 8003294:	003d0900 	.word	0x003d0900
 8003298:	017d7840 	.word	0x017d7840
 800329c:	46000000 	.word	0x46000000
 80032a0:	4c742400 	.word	0x4c742400
 80032a4:	4a742400 	.word	0x4a742400
 80032a8:	4bbebc20 	.word	0x4bbebc20

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b8:	2300      	movs	r3, #0
 80032ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032d0:	d02a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032d6:	d824      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032dc:	d018      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e2:	d81e      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ec:	d007      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032ee:	e018      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f0:	4ba3      	ldr	r3, [pc, #652]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	4aa2      	ldr	r2, [pc, #648]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032fc:	e015      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 ff17 	bl	8004138 <RCCEx_PLL2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800330e:	e00c      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3324      	adds	r3, #36	; 0x24
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f000 ffc0 	bl	800429c <RCCEx_PLL3_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003320:	e003      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
      break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003330:	4b93      	ldr	r3, [pc, #588]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333c:	4990      	ldr	r1, [pc, #576]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	650b      	str	r3, [r1, #80]	; 0x50
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d03d      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	2b04      	cmp	r3, #4
 800335a:	d826      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003379 	.word	0x08003379
 8003368:	08003387 	.word	0x08003387
 800336c:	08003399 	.word	0x08003399
 8003370:	080033b1 	.word	0x080033b1
 8003374:	080033b1 	.word	0x080033b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003378:	4b81      	ldr	r3, [pc, #516]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800337e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003384:	e015      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fed3 	bl	8004138 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003396:	e00c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3324      	adds	r3, #36	; 0x24
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 ff7c 	bl	800429c <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
      break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b8:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	f023 0207 	bic.w	r2, r3, #7
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	496e      	ldr	r1, [pc, #440]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	650b      	str	r3, [r1, #80]	; 0x50
 80033ca:	e001      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d042      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e4:	d02b      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ea:	d825      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033ec:	2bc0      	cmp	r3, #192	; 0xc0
 80033ee:	d028      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80033f0:	2bc0      	cmp	r3, #192	; 0xc0
 80033f2:	d821      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d016      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d81d      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d007      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003404:	e018      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a5d      	ldr	r2, [pc, #372]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003412:	e017      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fe8c 	bl	8004138 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003424:	e00e      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f000 ff35 	bl	800429c <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003436:	e005      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	75fb      	strb	r3, [r7, #23]
      break;
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	494a      	ldr	r1, [pc, #296]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	650b      	str	r3, [r1, #80]	; 0x50
 800345c:	e001      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	2b00      	cmp	r3, #0
 800346c:	d049      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003478:	d030      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800347a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347e:	d82a      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003480:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003484:	d02c      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003486:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800348a:	d824      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003490:	d018      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d81e      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800349c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a0:	d007      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80034a2:	e018      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	4a35      	ldr	r2, [pc, #212]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034b0:	e017      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fe3d 	bl	8004138 <RCCEx_PLL2_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034c2:	e00e      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3324      	adds	r3, #36	; 0x24
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fee6 	bl	800429c <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d4:	e005      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
      break;
 80034da:	e002      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80034e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034f6:	4922      	ldr	r1, [pc, #136]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	658b      	str	r3, [r1, #88]	; 0x58
 80034fc:	e001      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04b      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003518:	d030      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800351a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351e:	d82a      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003524:	d02e      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800352a:	d824      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800352c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003530:	d018      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003536:	d81e      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800353c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003540:	d007      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003542:	e018      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003550:	e019      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fded 	bl	8004138 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003562:	e010      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fe96 	bl	800429c <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003574:	e007      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
      break;
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003580:	58024400 	.word	0x58024400
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800358c:	4b99      	ldr	r3, [pc, #612]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800359a:	4996      	ldr	r1, [pc, #600]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800359c:	4313      	orrs	r3, r2
 800359e:	658b      	str	r3, [r1, #88]	; 0x58
 80035a0:	e001      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d032      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	2b30      	cmp	r3, #48	; 0x30
 80035b8:	d01c      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80035ba:	2b30      	cmp	r3, #48	; 0x30
 80035bc:	d817      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d00c      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d813      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d10f      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ce:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4a88      	ldr	r2, [pc, #544]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035da:	e00e      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fda8 	bl	8004138 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035ec:	e005      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003600:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	4979      	ldr	r1, [pc, #484]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800360e:	4313      	orrs	r3, r2
 8003610:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d047      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d030      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800362e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003632:	d82a      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003638:	d02c      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800363a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003644:	d018      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d007      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003664:	e017      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fd63 	bl	8004138 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003676:	e00e      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3324      	adds	r3, #36	; 0x24
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fe0c 	bl	800429c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003688:	e005      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
      break;
 800368e:	e002      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800369c:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	4952      	ldr	r1, [pc, #328]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	650b      	str	r3, [r1, #80]	; 0x50
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d049      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d02e      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ce:	d828      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d4:	d02a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80036d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036da:	d822      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036e0:	d026      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80036e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036e6:	d81c      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ec:	d010      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80036ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f2:	d816      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d111      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fd17 	bl	8004138 <RCCEx_PLL2_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800370e:	e012      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fdc0 	bl	800429c <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003720:	e009      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
      break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003728:	bf00      	nop
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	492a      	ldr	r1, [pc, #168]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800374a:	4313      	orrs	r3, r2
 800374c:	650b      	str	r3, [r1, #80]	; 0x50
 800374e:	e001      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d04d      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376a:	d02e      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003770:	d828      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d02a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d822      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800377e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003782:	d026      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003788:	d81c      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378e:	d010      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003794:	d816      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01d      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800379a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800379e:	d111      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fcc6 	bl	8004138 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037b0:	e012      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3324      	adds	r3, #36	; 0x24
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd6f 	bl	800429c <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037c2:	e009      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
      break;
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037ca:	bf00      	nop
 80037cc:	e004      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037ec:	4901      	ldr	r1, [pc, #4]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	658b      	str	r3, [r1, #88]	; 0x58
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80037f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003810:	d00e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003816:	d814      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800381c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003820:	d10f      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003822:	4baf      	ldr	r3, [pc, #700]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4aae      	ldr	r2, [pc, #696]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800382e:	e00c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc7e 	bl	8004138 <RCCEx_PLL2_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
      break;
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003850:	4ba3      	ldr	r3, [pc, #652]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385c:	49a0      	ldr	r1, [pc, #640]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800385e:	4313      	orrs	r3, r2
 8003860:	650b      	str	r3, [r1, #80]	; 0x50
 8003862:	e001      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d032      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	2b03      	cmp	r3, #3
 800387a:	d81b      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038bb 	.word	0x080038bb
 8003888:	08003895 	.word	0x08003895
 800388c:	080038a3 	.word	0x080038a3
 8003890:	080038bb 	.word	0x080038bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b92      	ldr	r3, [pc, #584]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4a91      	ldr	r2, [pc, #580]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038a0:	e00c      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fc45 	bl	8004138 <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038b2:	e003      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80038ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038c2:	4b87      	ldr	r3, [pc, #540]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4984      	ldr	r1, [pc, #528]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038d4:	e001      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8086 	beq.w	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7d      	ldr	r2, [pc, #500]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f4:	f7fd fdf0 	bl	80014d8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fa:	e009      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd fdec 	bl	80014d8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d902      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	75fb      	strb	r3, [r7, #23]
        break;
 800390e:	e005      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003910:	4b74      	ldr	r3, [pc, #464]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d166      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003922:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800392c:	4053      	eors	r3, r2
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a66      	ldr	r2, [pc, #408]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800394c:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003958:	4a61      	ldr	r2, [pc, #388]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003968:	d115      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fd fdb5 	bl	80014d8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003970:	e00b      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd fdb1 	bl	80014d8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d902      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	75fb      	strb	r3, [r7, #23]
            break;
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800398a:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ed      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d126      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80039ac:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ba:	0919      	lsrs	r1, r3, #4
 80039bc:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80039be:	400b      	ands	r3, r1
 80039c0:	4947      	ldr	r1, [pc, #284]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	610b      	str	r3, [r1, #16]
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	4a44      	ldr	r2, [pc, #272]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039d2:	6113      	str	r3, [r2, #16]
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	493f      	ldr	r1, [pc, #252]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	670b      	str	r3, [r1, #112]	; 0x70
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	75bb      	strb	r3, [r7, #22]
 80039ee:	e001      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8085 	beq.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a06:	2b28      	cmp	r3, #40	; 0x28
 8003a08:	d866      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003aed 	.word	0x08003aed
 8003a14:	08003ad9 	.word	0x08003ad9
 8003a18:	08003ad9 	.word	0x08003ad9
 8003a1c:	08003ad9 	.word	0x08003ad9
 8003a20:	08003ad9 	.word	0x08003ad9
 8003a24:	08003ad9 	.word	0x08003ad9
 8003a28:	08003ad9 	.word	0x08003ad9
 8003a2c:	08003ad9 	.word	0x08003ad9
 8003a30:	08003ab5 	.word	0x08003ab5
 8003a34:	08003ad9 	.word	0x08003ad9
 8003a38:	08003ad9 	.word	0x08003ad9
 8003a3c:	08003ad9 	.word	0x08003ad9
 8003a40:	08003ad9 	.word	0x08003ad9
 8003a44:	08003ad9 	.word	0x08003ad9
 8003a48:	08003ad9 	.word	0x08003ad9
 8003a4c:	08003ad9 	.word	0x08003ad9
 8003a50:	08003ac7 	.word	0x08003ac7
 8003a54:	08003ad9 	.word	0x08003ad9
 8003a58:	08003ad9 	.word	0x08003ad9
 8003a5c:	08003ad9 	.word	0x08003ad9
 8003a60:	08003ad9 	.word	0x08003ad9
 8003a64:	08003ad9 	.word	0x08003ad9
 8003a68:	08003ad9 	.word	0x08003ad9
 8003a6c:	08003ad9 	.word	0x08003ad9
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003ad9 	.word	0x08003ad9
 8003a78:	08003ad9 	.word	0x08003ad9
 8003a7c:	08003ad9 	.word	0x08003ad9
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003ad9 	.word	0x08003ad9
 8003a90:	08003aed 	.word	0x08003aed
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ad9 	.word	0x08003ad9
 8003aa0:	08003ad9 	.word	0x08003ad9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003ad9 	.word	0x08003ad9
 8003ab0:	08003aed 	.word	0x08003aed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb3c 	bl	8004138 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ac4:	e013      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3324      	adds	r3, #36	; 0x24
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fbe5 	bl	800429c <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ad6:	e00a      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
      break;
 8003adc:	e007      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ade:	bf00      	nop
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	58024800 	.word	0x58024800
 8003ae8:	00ffffcf 	.word	0x00ffffcf
      break;
 8003aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b00:	4993      	ldr	r1, [pc, #588]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	654b      	str	r3, [r1, #84]	; 0x54
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d038      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d821      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b6b 	.word	0x08003b6b
 8003b2c:	08003b41 	.word	0x08003b41
 8003b30:	08003b53 	.word	0x08003b53
 8003b34:	08003b6b 	.word	0x08003b6b
 8003b38:	08003b6b 	.word	0x08003b6b
 8003b3c:	08003b6b 	.word	0x08003b6b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	2101      	movs	r1, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 faf6 	bl	8004138 <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b50:	e00c      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fb9f 	bl	800429c <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
      break;
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b72:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	4974      	ldr	r1, [pc, #464]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	654b      	str	r3, [r1, #84]	; 0x54
 8003b84:	e001      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d821      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003beb 	.word	0x08003beb
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bd3 	.word	0x08003bd3
 8003bb4:	08003beb 	.word	0x08003beb
 8003bb8:	08003beb 	.word	0x08003beb
 8003bbc:	08003beb 	.word	0x08003beb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fab6 	bl	8004138 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fb5f 	bl	800429c <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f023 0207 	bic.w	r2, r3, #7
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	4953      	ldr	r1, [pc, #332]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	658b      	str	r3, [r1, #88]	; 0x58
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d04b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c22:	d02e      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c28:	d828      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d02a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d822      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c3a:	d026      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c40:	d81c      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c46:	d010      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d816      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c56:	d111      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fa6a 	bl	8004138 <RCCEx_PLL2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c68:	e012      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fb13 	bl	800429c <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c7a:	e009      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	492a      	ldr	r1, [pc, #168]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	654b      	str	r3, [r1, #84]	; 0x54
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d04d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cc6:	d02e      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003cc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ccc:	d828      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d02a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d822      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cde:	d026      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce4:	d81c      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d010      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf0:	d816      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01d      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fa18 	bl	8004138 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e012      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fac1 	bl	800429c <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d26:	bf00      	nop
 8003d28:	e004      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d48:	4901      	ldr	r1, [pc, #4]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d6e:	d02e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003d70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d74:	d828      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d02a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d80:	d822      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d86:	d026      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003d88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d8c:	d81c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d92:	d010      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d98:	d816      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f9c4 	bl	8004138 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003db4:	e012      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa6d 	bl	800429c <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e009      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003de2:	4b9d      	ldr	r3, [pc, #628]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df0:	4999      	ldr	r1, [pc, #612]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	658b      	str	r3, [r1, #88]	; 0x58
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	d10a      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa3e 	bl	800429c <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e38:	4987      	ldr	r1, [pc, #540]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d10a      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3324      	adds	r3, #36	; 0x24
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa1d 	bl	800429c <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e6c:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	4977      	ldr	r1, [pc, #476]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d034      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e96:	d01d      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e9c:	d817      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d009      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ea8:	e011      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f941 	bl	8004138 <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f9ea 	bl	800429c <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003edc:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eea:	495b      	ldr	r1, [pc, #364]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef0:	e001      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d033      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f0c:	d01c      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f12:	d816      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f18:	d003      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1e:	d007      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003f20:	e00f      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f22:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f9b0 	bl	800429c <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5e:	493e      	ldr	r1, [pc, #248]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	654b      	str	r3, [r1, #84]	; 0x54
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d029      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d007      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f92:	e00b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f8cc 	bl	8004138 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fa4:	e002      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4926      	ldr	r1, [pc, #152]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fc4:	e001      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f95d 	bl	800429c <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d033      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004000:	d017      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004006:	d811      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d013      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d80b      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401c:	d106      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800402a:	e007      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	e004      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404e:	4902      	ldr	r1, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004050:	4313      	orrs	r3, r2
 8004052:	654b      	str	r3, [r1, #84]	; 0x54
 8004054:	e004      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004056:	bf00      	nop
 8004058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800406c:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	492e      	ldr	r1, [pc, #184]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800407a:	4313      	orrs	r3, r2
 800407c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004098:	4926      	ldr	r1, [pc, #152]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b6:	491f      	ldr	r1, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040d2:	6113      	str	r3, [r2, #16]
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040de:	4915      	ldr	r1, [pc, #84]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da08      	bge.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	4906      	ldr	r1, [pc, #24]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800411a:	4313      	orrs	r3, r2
 800411c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800411e:	7dbb      	ldrb	r3, [r7, #22]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400

08004138 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004146:	4b53      	ldr	r3, [pc, #332]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d101      	bne.n	8004156 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e099      	b.n	800428a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004156:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4e      	ldr	r2, [pc, #312]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800415c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004162:	f7fd f9b9 	bl	80014d8 <HAL_GetTick>
 8004166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004168:	e008      	b.n	800417c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800416a:	f7fd f9b5 	bl	80014d8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e086      	b.n	800428a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004188:	4b42      	ldr	r3, [pc, #264]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	493f      	ldr	r1, [pc, #252]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	628b      	str	r3, [r1, #40]	; 0x28
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	025b      	lsls	r3, r3, #9
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041cc:	4931      	ldr	r1, [pc, #196]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	492d      	ldr	r1, [pc, #180]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f023 0220 	bic.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	4928      	ldr	r1, [pc, #160]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	4a26      	ldr	r2, [pc, #152]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f023 0310 	bic.w	r3, r3, #16
 8004200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004206:	4b24      	ldr	r3, [pc, #144]	; (8004298 <RCCEx_PLL2_Config+0x160>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	69d2      	ldr	r2, [r2, #28]
 800420e:	00d2      	lsls	r2, r2, #3
 8004210:	4920      	ldr	r1, [pc, #128]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004216:	4b1f      	ldr	r3, [pc, #124]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800421c:	f043 0310 	orr.w	r3, r3, #16
 8004220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004228:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4a19      	ldr	r2, [pc, #100]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800422e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004234:	e00f      	b.n	8004256 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800423c:	4b15      	ldr	r3, [pc, #84]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004248:	e005      	b.n	8004256 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800425c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004262:	f7fd f939 	bl	80014d8 <HAL_GetTick>
 8004266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004268:	e008      	b.n	800427c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800426a:	f7fd f935 	bl	80014d8 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <RCCEx_PLL2_Config+0x15c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400
 8004298:	ffff0007 	.word	0xffff0007

0800429c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042aa:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d101      	bne.n	80042ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e099      	b.n	80043ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042ba:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4e      	ldr	r2, [pc, #312]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fd f907 	bl	80014d8 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042ce:	f7fd f903 	bl	80014d8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e086      	b.n	80043ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042e0:	4b45      	ldr	r3, [pc, #276]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042ec:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	051b      	lsls	r3, r3, #20
 80042fa:	493f      	ldr	r1, [pc, #252]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	3b01      	subs	r3, #1
 8004306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	3b01      	subs	r3, #1
 8004310:	025b      	lsls	r3, r3, #9
 8004312:	b29b      	uxth	r3, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	3b01      	subs	r3, #1
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004330:	4931      	ldr	r1, [pc, #196]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	492d      	ldr	r1, [pc, #180]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	4928      	ldr	r1, [pc, #160]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <RCCEx_PLL3_Config+0x160>)
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	69d2      	ldr	r2, [r2, #28]
 8004372:	00d2      	lsls	r2, r2, #3
 8004374:	4920      	ldr	r1, [pc, #128]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800437a:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 8004392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004398:	e00f      	b.n	80043ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043ac:	e005      	b.n	80043ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fd f887 	bl	80014d8 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043cc:	e008      	b.n	80043e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043ce:	f7fd f883 	bl	80014d8 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e006      	b.n	80043ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	ffff0007 	.word	0xffff0007

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4d0d      	ldr	r5, [pc, #52]	; (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004406:	1b64      	subs	r4, r4, r5
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2600      	movs	r6, #0
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4d0b      	ldr	r5, [pc, #44]	; (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	; (8004444 <__libc_init_array+0x44>)
 8004414:	f000 f820 	bl	8004458 <_init>
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2600      	movs	r6, #0
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	080044d0 	.word	0x080044d0
 800443c:	080044d0 	.word	0x080044d0
 8004440:	080044d0 	.word	0x080044d0
 8004444:	080044d4 	.word	0x080044d4

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <_init>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr

08004464 <_fini>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr
