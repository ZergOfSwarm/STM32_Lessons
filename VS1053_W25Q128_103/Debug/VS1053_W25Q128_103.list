
VS1053_W25Q128_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003174  08003174  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003174  08003174  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800317c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000078  080031f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080031f4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cea2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d0  00000000  00000000  0002cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019051  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f12d  00000000  00000000  00049f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daa2  00000000  00000000  0005909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004494  00000000  00000000  000e6b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c0 	.word	0x080030c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080030c0 	.word	0x080030c0

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2332      	movs	r3, #50	; 0x32
 80001aa:	68b9      	ldr	r1, [r7, #8]
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001ae:	f002 f8f4 	bl	800239a <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x20>
	}
	return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000144 	.word	0x20000144

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fea0 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f89c 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f976 	bl	80004e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f4:	f000 f8de 	bl	80003b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80001f8:	f000 f912 	bl	8000420 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001fc:	f000 f946 	bl	800048c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	SPI1->CR1 |= SPI_CR1_SPE; //SPI1_ON )
 8000200:	4b40      	ldr	r3, [pc, #256]	; (8000304 <main+0x120>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a3f      	ldr	r2, [pc, #252]	; (8000304 <main+0x120>)
 8000206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800020a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SPE; //SPI2_ON )
 800020c:	4b3e      	ldr	r3, [pc, #248]	; (8000308 <main+0x124>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a3d      	ldr	r2, [pc, #244]	; (8000308 <main+0x124>)
 8000212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000216:	6013      	str	r3, [r2, #0]
	vs1053_init();
 8000218:	f000 fc58 	bl	8000acc <vs1053_init>
	vs1053_reset();
 800021c:	f000 fc76 	bl	8000b0c <vs1053_reset>
	flash_reset();
 8000220:	f000 fdbe 	bl	8000da0 <flash_reset>
	if (get_flash_id())
 8000224:	f000 fe28 	bl	8000e78 <get_flash_id>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d003      	beq.n	8000236 <main+0x52>
	printf("Hello world! \r\n");
 800022e:	4837      	ldr	r0, [pc, #220]	; (800030c <main+0x128>)
 8000230:	f002 fabe 	bl	80027b0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (!vs1053_isDataReq()) { // DREQ == 0 - ждать
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	f000 fccc 	bl	8000bd4 <vs1053_isDataReq>
 800023c:	4603      	mov	r3, r0
 800023e:	f083 0301 	eor.w	r3, r3, #1
 8000242:	b2db      	uxtb	r3, r3
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1f7      	bne.n	8000238 <main+0x54>
		//делаем что-то полезное))
	}
	while (vs1053_isDataReq())	// DREQ == 1 - посылать данные
 8000248:	e056      	b.n	80002f8 <main+0x114>
	{
		if (next_page_flag) {
 800024a:	4b31      	ldr	r3, [pc, #196]	; (8000310 <main+0x12c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d01e      	beq.n	8000290 <main+0xac>
			HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000258:	482e      	ldr	r0, [pc, #184]	; (8000314 <main+0x130>)
 800025a:	f001 f921 	bl	80014a0 <HAL_GPIO_WritePin>
			flash_read_page(music_buf, addr_pointer, 255);//0-255 //1 страница = 256 байт,1 сектор = 256 сраниц
 800025e:	4b2e      	ldr	r3, [pc, #184]	; (8000318 <main+0x134>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	4619      	mov	r1, r3
 8000266:	482d      	ldr	r0, [pc, #180]	; (800031c <main+0x138>)
 8000268:	f000 fdc2 	bl	8000df0 <flash_read_page>
			page_pointer = 0;
 800026c:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <main+0x13c>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
			addr_pointer += 256;	//следующая 1 страница 256 байт
 8000272:	4b29      	ldr	r3, [pc, #164]	; (8000318 <main+0x134>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800027a:	4a27      	ldr	r2, [pc, #156]	; (8000318 <main+0x134>)
 800027c:	6013      	str	r3, [r2, #0]
			next_page_flag = false;
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <main+0x12c>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028a:	4822      	ldr	r0, [pc, #136]	; (8000314 <main+0x130>)
 800028c:	f001 f908 	bl	80014a0 <HAL_GPIO_WritePin>
		}
		vs1053_send32(&(music_buf[page_pointer]));	//256/32=8
 8000290:	4b23      	ldr	r3, [pc, #140]	; (8000320 <main+0x13c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <main+0x138>)
 8000298:	4413      	add	r3, r2
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fcac 	bl	8000bf8 <vs1053_send32>
		if (page_pointer < 193)
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <main+0x13c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2bc0      	cmp	r3, #192	; 0xc0
 80002a6:	d806      	bhi.n	80002b6 <main+0xd2>
			page_pointer += 32;
 80002a8:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <main+0x13c>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	3320      	adds	r3, #32
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <main+0x13c>)
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e020      	b.n	80002f8 <main+0x114>
		else {
			next_page_flag = true;
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <main+0x12c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
			if (addr_pointer > song_and_addr) {
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0x134>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <main+0x140>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d917      	bls.n	80002f8 <main+0x114>
				addr_pointer = 0;
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <main+0x134>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
				while (1) {
					HAL_Delay(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 fe5d 	bl	8000f90 <HAL_Delay>
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <main+0x130>)
 80002de:	f001 f8df 	bl	80014a0 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80002e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e6:	f000 fe53 	bl	8000f90 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f0:	4808      	ldr	r0, [pc, #32]	; (8000314 <main+0x130>)
 80002f2:	f001 f8d5 	bl	80014a0 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80002f6:	e7ea      	b.n	80002ce <main+0xea>
	while (vs1053_isDataReq())	// DREQ == 1 - посылать данные
 80002f8:	f000 fc6c 	bl	8000bd4 <vs1053_isDataReq>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1a3      	bne.n	800024a <main+0x66>
	while (!vs1053_isDataReq()) { // DREQ == 0 - ждать
 8000302:	e798      	b.n	8000236 <main+0x52>
 8000304:	40013000 	.word	0x40013000
 8000308:	40003800 	.word	0x40003800
 800030c:	080030d8 	.word	0x080030d8
 8000310:	20000000 	.word	0x20000000
 8000314:	40011000 	.word	0x40011000
 8000318:	20000288 	.word	0x20000288
 800031c:	20000188 	.word	0x20000188
 8000320:	2000028c 	.word	0x2000028c
 8000324:	20000004 	.word	0x20000004

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 f9c4 	bl	80026c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f8ad 	bl	80014d0 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800037c:	f000 f92e 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fb1a 	bl	80019d4 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003a6:	f000 f919 	bl	80005dc <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_SPI1_Init+0x64>)
 80003ba:	4a18      	ldr	r2, [pc, #96]	; (800041c <MX_SPI1_Init+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_SPI1_Init+0x64>)
 80003c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_SPI1_Init+0x64>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_SPI1_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_SPI1_Init+0x64>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_SPI1_Init+0x64>)
 80003da:	2201      	movs	r2, #1
 80003dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_SPI1_Init+0x64>)
 80003e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SPI1_Init+0x64>)
 80003e8:	2238      	movs	r2, #56	; 0x38
 80003ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <MX_SPI1_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SPI1_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_SPI1_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SPI1_Init+0x64>)
 8000400:	220a      	movs	r2, #10
 8000402:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_SPI1_Init+0x64>)
 8000406:	f001 fcad 	bl	8001d64 <HAL_SPI_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000410:	f000 f8e4 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000094 	.word	0x20000094
 800041c:	40013000 	.word	0x40013000

08000420 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_SPI2_Init+0x64>)
 8000426:	4a18      	ldr	r2, [pc, #96]	; (8000488 <MX_SPI2_Init+0x68>)
 8000428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800042a:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_SPI2_Init+0x64>)
 800042c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_SPI2_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_SPI2_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_SPI2_Init+0x64>)
 8000440:	2202      	movs	r2, #2
 8000442:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_SPI2_Init+0x64>)
 8000446:	2201      	movs	r2, #1
 8000448:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_SPI2_Init+0x64>)
 800044c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000450:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_SPI2_Init+0x64>)
 8000454:	2220      	movs	r2, #32
 8000456:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_SPI2_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_SPI2_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <MX_SPI2_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_SPI2_Init+0x64>)
 800046c:	220a      	movs	r2, #10
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_SPI2_Init+0x64>)
 8000472:	f001 fc77 	bl	8001d64 <HAL_SPI_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800047c:	f000 f8ae 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000ec 	.word	0x200000ec
 8000488:	40003800 	.word	0x40003800

0800048c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_USART1_UART_Init+0x50>)
 8000494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 8000498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800049c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004c4:	f001 ff1c 	bl	8002300 <HAL_UART_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ce:	f000 f885 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000144 	.word	0x20000144
 80004dc:	40013800 	.word	0x40013800

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_GPIO_Init+0xcc>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <MX_GPIO_Init+0xcc>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_GPIO_Init+0xcc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_GPIO_Init+0xcc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <MX_GPIO_Init+0xcc>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_GPIO_Init+0xcc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_GPIO_Init+0xcc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a20      	ldr	r2, [pc, #128]	; (80005ac <MX_GPIO_Init+0xcc>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_GPIO_Init+0xcc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0308 	and.w	r3, r3, #8
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VS1053_RST_Pin|VS1053_XDCS_Pin|VS1053_CS_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	211a      	movs	r1, #26
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000542:	f000 ffad 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054c:	4819      	ldr	r0, [pc, #100]	; (80005b4 <MX_GPIO_Init+0xd4>)
 800054e:	f000 ffa7 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VS1053_RST_Pin VS1053_XDCS_Pin VS1053_CS_Pin */
  GPIO_InitStruct.Pin = VS1053_RST_Pin|VS1053_XDCS_Pin|VS1053_CS_Pin;
 8000552:	231a      	movs	r3, #26
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2302      	movs	r3, #2
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4619      	mov	r1, r3
 8000568:	4811      	ldr	r0, [pc, #68]	; (80005b0 <MX_GPIO_Init+0xd0>)
 800056a:	f000 fe15 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : VS1053_DREQ_Pin */
  GPIO_InitStruct.Pin = VS1053_DREQ_Pin;
 800056e:	2304      	movs	r3, #4
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(VS1053_DREQ_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	4619      	mov	r1, r3
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000582:	f000 fe09 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25QXX_CS_Pin */
  GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2302      	movs	r3, #2
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_GPIO_Init+0xd4>)
 80005a0:	f000 fdfa 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40010c00 	.word	0x40010c00

080005b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d101      	bne.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ca:	f000 fcc5 	bl	8000f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40000800 	.word	0x40000800

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_MspInit+0x5c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x5c>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x60>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0318 	add.w	r3, r7, #24
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a37      	ldr	r2, [pc, #220]	; (8000744 <HAL_SPI_MspInit+0xf8>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d130      	bne.n	80006ce <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a35      	ldr	r2, [pc, #212]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 8000672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b33      	ldr	r3, [pc, #204]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800069c:	23a0      	movs	r3, #160	; 0xa0
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4827      	ldr	r0, [pc, #156]	; (800074c <HAL_SPI_MspInit+0x100>)
 80006b0:	f000 fd72 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4619      	mov	r1, r3
 80006c6:	4821      	ldr	r0, [pc, #132]	; (800074c <HAL_SPI_MspInit+0x100>)
 80006c8:	f000 fd66 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006cc:	e036      	b.n	800073c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <HAL_SPI_MspInit+0x104>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d131      	bne.n	800073c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	61d3      	str	r3, [r2, #28]
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_SPI_MspInit+0xfc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000708:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	4619      	mov	r1, r3
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <HAL_SPI_MspInit+0x108>)
 800071e:	f000 fd3b 	bl	8001198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	4619      	mov	r1, r3
 8000736:	4807      	ldr	r0, [pc, #28]	; (8000754 <HAL_SPI_MspInit+0x108>)
 8000738:	f000 fd2e 	bl	8001198 <HAL_GPIO_Init>
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013000 	.word	0x40013000
 8000748:	40021000 	.word	0x40021000
 800074c:	40010800 	.word	0x40010800
 8000750:	40003800 	.word	0x40003800
 8000754:	40010c00 	.word	0x40010c00

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <HAL_UART_MspInit+0x8c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d131      	bne.n	80007dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <HAL_UART_MspInit+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <HAL_UART_MspInit+0x90>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <HAL_UART_MspInit+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_UART_MspInit+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_UART_MspInit+0x90>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_UART_MspInit+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <HAL_UART_MspInit+0x94>)
 80007be:	f000 fceb 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_UART_MspInit+0x94>)
 80007d8:	f000 fcde 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40013800 	.word	0x40013800
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <HAL_InitTick+0xe8>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a33      	ldr	r2, [pc, #204]	; (80008d8 <HAL_InitTick+0xe8>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <HAL_InitTick+0xe8>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081e:	f107 0210 	add.w	r2, r7, #16
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fa4d 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000838:	f001 fa1e 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800083c:	6378      	str	r0, [r7, #52]	; 0x34
 800083e:	e004      	b.n	800084a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000840:	f001 fa1a 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000844:	4603      	mov	r3, r0
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084c:	4a23      	ldr	r2, [pc, #140]	; (80008dc <HAL_InitTick+0xec>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	0c9b      	lsrs	r3, r3, #18
 8000854:	3b01      	subs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <HAL_InitTick+0xf0>)
 800085a:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <HAL_InitTick+0xf4>)
 800085c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_InitTick+0xf0>)
 8000860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000864:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <HAL_InitTick+0xf0>)
 8000868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_InitTick+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <HAL_InitTick+0xf0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_InitTick+0xf0>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <HAL_InitTick+0xf0>)
 8000880:	f001 faf4 	bl	8001e6c <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800088a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11b      	bne.n	80008ca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000892:	4813      	ldr	r0, [pc, #76]	; (80008e0 <HAL_InitTick+0xf0>)
 8000894:	f001 fb42 	bl	8001f1c <HAL_TIM_Base_Start_IT>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800089e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d111      	bne.n	80008ca <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008a6:	201e      	movs	r0, #30
 80008a8:	f000 fc67 	bl	800117a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d808      	bhi.n	80008c4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008b2:	2200      	movs	r2, #0
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	201e      	movs	r0, #30
 80008b8:	f000 fc43 	bl	8001142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_InitTick+0xf8>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e002      	b.n	80008ca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	431bde83 	.word	0x431bde83
 80008e0:	20000290 	.word	0x20000290
 80008e4:	40000800 	.word	0x40000800
 80008e8:	2000000c 	.word	0x2000000c

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
	...

0800093c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM4_IRQHandler+0x10>)
 8000942:	f001 fb3d 	bl	8001fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000290 	.word	0x20000290

08000950 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
  }

  return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:
  }
  return len;
}

int _close(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b0:	605a      	str	r2, [r3, #4]
  return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f001 fe28 	bl	8002670 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20005000 	.word	0x20005000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200002d8 	.word	0x200002d8
 8000a54:	200002f8 	.word	0x200002f8

08000a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SpiInit>:

//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static void SpiInit ( uint32_t value )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

   SPI1->CR1 |= value;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SpiInit+0x20>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <SpiInit+0x20>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40013000 	.word	0x40013000

08000a88 <SPI_sendByte>:
//============================================================================//
//++++++++++++++++++++++++++++++++  SPI  +++++++++++++++++++++++++++++++++++++//
//============================================================================//
static uint8_t SPI_sendByte ( uint8_t data )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 8000a92:	bf00      	nop
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <SPI_sendByte+0x40>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f9      	beq.n	8000a94 <SPI_sendByte+0xc>
    SPI_PORT -> DR = data;
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <SPI_sendByte+0x40>)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 8000aa6:	bf00      	nop
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SPI_sendByte+0x40>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f9      	beq.n	8000aa8 <SPI_sendByte+0x20>
    rxbyte = SPI_PORT->DR;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SPI_sendByte+0x40>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000

08000acc <vs1053_init>:
//============================================================================//
//++++++++++++++++++++++++++  vs1053_init  +++++++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	VS1053_RESET_RES();		 // XRESET = 0
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <vs1053_init+0x38>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <vs1053_init+0x38>)
 8000ad6:	f023 0302 	bic.w	r3, r3, #2
 8000ada:	60d3      	str	r3, [r2, #12]
	VS1053_SET_XDCS();		 // XDCS = 1
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <vs1053_init+0x38>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <vs1053_init+0x38>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	60d3      	str	r3, [r2, #12]
	VS1053_DCS();			   	 // nCS = 1
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <vs1053_init+0x38>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <vs1053_init+0x38>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	60d3      	str	r3, [r2, #12]
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//256
 8000af4:	2038      	movs	r0, #56	; 0x38
 8000af6:	f7ff ffb5 	bl	8000a64 <SpiInit>
	chip_id = 0xFF;
 8000afa:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <vs1053_init+0x3c>)
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	701a      	strb	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40010800 	.word	0x40010800
 8000b08:	200002dc 	.word	0x200002dc

08000b0c <vs1053_reset>:

//============================================================================//
//+++++++++++++++++++ Perform a vs1053 hard soft reset +++++++++++++++++++++++//
//============================================================================//
void vs1053_reset(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	uint16_t temp;
	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));//НАСТРОЙКУ ПРОИЗВОДИТЬ НА НИЗКОЙ!!!!!
 8000b12:	2038      	movs	r0, #56	; 0x38
 8000b14:	f7ff ffa6 	bl	8000a64 <SpiInit>
	VS1053_RESET_RES();		// XRESET = 0 Harware reset VS1053b is reset and all the control registers and
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <vs1053_reset+0xc0>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <vs1053_reset+0xc0>)
 8000b1e:	f023 0302 	bic.w	r3, r3, #2
 8000b22:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f000 fa33 	bl	8000f90 <HAL_Delay>
	VS1053_SET_RES();			// XRESET = 1 //internal states are set to the initial values
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <vs1053_reset+0xc0>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <vs1053_reset+0xc0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	60d3      	str	r3, [r2, #12]
	HAL_Delay (5); //500
 8000b36:	2005      	movs	r0, #5
 8000b38:	f000 fa2a 	bl	8000f90 <HAL_Delay>

	while(!VS1053_DREQ){};
 8000b3c:	bf00      	nop
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <vs1053_reset+0xc0>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f9      	beq.n	8000b3e <vs1053_reset+0x32>

    temp = vs1053_readData(vs1053_STATUS);	// read status, must be 0x000C
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 f8ca 	bl	8000ce4 <vs1053_readData>
 8000b50:	4603      	mov	r3, r0
 8000b52:	80fb      	strh	r3, [r7, #6]
    temp = vs1053_readData(vs1053_MODE);	// read status, must be 0x4000
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f8c5 	bl	8000ce4 <vs1053_readData>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  	// Soft reset 16
  	vs1053_writeCommand(vs1053_MODE,SM_RESET|SM_SDINEW);//| SM_CLK_RANGE for 24MHz-26
 8000b5e:	f640 0104 	movw	r1, #2052	; 0x804
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f890 	bl	8000c88 <vs1053_writeCommand>
		//SM_RESET-soft Reset
		//SM_SDINEW- by default at startup native SPI modes
  	HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f000 fa10 	bl	8000f90 <HAL_Delay>
    do
    {
    	temp=vs1053_readData(vs1053_MODE);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f8b7 	bl	8000ce4 <vs1053_readData>
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
    } while((temp&SM_RESET)!=0);
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f5      	bne.n	8000b70 <vs1053_reset+0x64>
    vs1053_writeCommand(vs1053_MODE, SM_SDINEW);// | SM_CLK_RANGE 24MHz только для 24MHz
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f87d 	bl	8000c88 <vs1053_writeCommand>

    temp = vs1053_readData(vs1053_STATUS);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 f8a8 	bl	8000ce4 <vs1053_readData>
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
    chip_id=(temp >> 4)&0x0F;// 0 - VS1001, 1 - VS1011, 2 - VS1002, 3 - VS1003, 4 - VS1053
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <vs1053_reset+0xc4>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	  //Для 12.288MHz:
	  //(XTLI_HZ - 8000000) / 4000 = (12288000 - 8000000) / 4000 = 4288000 / 4000 = 1072 = 0x0430 = 0000 0100 0011 0000
		/*The maximum sample rate that can be played with correct speed is XTALI/256 (or XTALI/512
    if SM_CLK_RANGE is set). Thus, XTALI must be at least 12.288 MHz (24.576 MHz) to be able
    to play 48 kHz at correct speed. Reset value is 1.0 × . Recommended SC_MULT=3.5 × , SC_ADD=1.0 × (SCI_CLOCKF=0x8800).*/
    vs1053_writeCommand (vs1053_CLOCKF, 0x8000 | 0x0800 | 0x0430 );// 0x0430 можно было не указывать,ноль в SC_FREQ означает 12,288!!!
 8000baa:	f648 4130 	movw	r1, #35888	; 0x8c30
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f86a 	bl	8000c88 <vs1053_writeCommand>
	  vs1053_setvolume ( 50, 50 );// Начальная громкость чем меньше тем громче))
 8000bb4:	2132      	movs	r1, #50	; 0x32
 8000bb6:	2032      	movs	r0, #50	; 0x32
 8000bb8:	f000 f844 	bl	8000c44 <vs1053_setvolume>
  	SpiInit (SPI_CR1_BR_2);//музыку гоним на высокой скрости
 8000bbc:	2020      	movs	r0, #32
 8000bbe:	f7ff ff51 	bl	8000a64 <SpiInit>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	200002dc 	.word	0x200002dc

08000bd4 <vs1053_isDataReq>:

//============================================================================//
//+++++++++++++++++++++++++++++ VS1053_DREQ STATE ++++++++++++++++++++++++++++//
//============================================================================//
bool vs1053_isDataReq(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  if (VS1053_DREQ == RESET )
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <vs1053_isDataReq+0x20>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <vs1053_isDataReq+0x14>
    return false;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e000      	b.n	8000bea <vs1053_isDataReq+0x16>

  return true;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <vs1053_send32>:
//============================================================================//
//+++++++++++++++++ Send an 32 byte block of audio stream data +++++++++++++++//
//============================================================================//
void vs1053_send32(uint8_t *pData)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint8_t i;
	VS1053_RESET_XDCS();
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <vs1053_send32+0x48>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <vs1053_send32+0x48>)
 8000c06:	f023 0308 	bic.w	r3, r3, #8
 8000c0a:	60d3      	str	r3, [r2, #12]
	for (i=0;i <32;i++)// send 32 bytes
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e009      	b.n	8000c26 <vs1053_send32+0x2e>
		SPI_sendByte(*pData ++ );
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff34 	bl	8000a88 <SPI_sendByte>
	for (i=0;i <32;i++)// send 32 bytes
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	d9f2      	bls.n	8000c12 <vs1053_send32+0x1a>
	VS1053_SET_XDCS();
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <vs1053_send32+0x48>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <vs1053_send32+0x48>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010800 	.word	0x40010800

08000c44 <vs1053_setvolume>:
//============================================================================//
//++++++++++++++++++++++++++++ Set audio volume ++++++++++++++++++++++++++++++//
//============================================================================//
void vs1053_setvolume(uint8_t volumeLeft,uint8_t volumeRight)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
	uint16_t vol;
	vol = volumeLeft;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	81fb      	strh	r3, [r7, #14]
	vol <<= 8;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	81fb      	strh	r3, [r7, #14]
	vol |= volumeRight;
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	81fb      	strh	r3, [r7, #14]
 	SpiInit((uint32_t)(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0));
 8000c68:	2038      	movs	r0, #56	; 0x38
 8000c6a:	f7ff fefb 	bl	8000a64 <SpiInit>
	vs1053_writeCommand (vs1053_VOL,vol);			// set vs1053 volume register
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4619      	mov	r1, r3
 8000c72:	200b      	movs	r0, #11
 8000c74:	f000 f808 	bl	8000c88 <vs1053_writeCommand>
 	SpiInit(SPI_CR1_BR_0);
 8000c78:	2008      	movs	r0, #8
 8000c7a:	f7ff fef3 	bl	8000a64 <SpiInit>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <vs1053_writeCommand>:
//============================================================================//
//+++++++++++++++++++++ Write a data word to specific address ++++++++++++++++//
//============================================================================//
void vs1053_writeCommand(uint8_t addr,uint16_t data)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	80bb      	strh	r3, [r7, #4]
    VS1053_CS();
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <vs1053_writeCommand+0x58>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <vs1053_writeCommand+0x58>)
 8000c9e:	f023 0310 	bic.w	r3, r3, #16
 8000ca2:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_WRITE );// send write opcode 0x02
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f7ff feef 	bl	8000a88 <SPI_sendByte>
    SPI_sendByte(addr);			    // send address
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff feeb 	bl	8000a88 <SPI_sendByte>
    SPI_sendByte(data >> 8);		// send MSB
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fee4 	bl	8000a88 <SPI_sendByte>
    SPI_sendByte(data);			    //send LSB
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fedf 	bl	8000a88 <SPI_sendByte>
    VS1053_DCS();
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <vs1053_writeCommand+0x58>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <vs1053_writeCommand+0x58>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	60d3      	str	r3, [r2, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <vs1053_readData>:

//============================================================================//
//+++++++++++++++ Read a data word from vs1053 specific address ++++++++++++++//
//============================================================================//
uint16_t vs1053_readData(uint8_t addr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    uint16_t tempdata = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
    uint8_t temp;
	  VS1053_SET_XDCS();              // XDCS = 0
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <vs1053_readData+0x74>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <vs1053_readData+0x74>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	60d3      	str	r3, [r2, #12]
    VS1053_CS();			              // xCS = 0
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <vs1053_readData+0x74>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <vs1053_readData+0x74>)
 8000d04:	f023 0310 	bic.w	r3, r3, #16
 8000d08:	60d3      	str	r3, [r2, #12]
    SPI_sendByte(VS1053_CMD_READ );	// send read opcode 0x03
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f7ff febc 	bl	8000a88 <SPI_sendByte>
    SPI_sendByte(addr);				      // send address
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff feb8 	bl	8000a88 <SPI_sendByte>
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff feb5 	bl	8000a88 <SPI_sendByte>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	737b      	strb	r3, [r7, #13]
    tempdata = temp;
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	81fb      	strh	r3, [r7, #14]
    tempdata <<= 8;						      // MSB was sent first
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	81fb      	strh	r3, [r7, #14]
    temp = SPI_sendByte(0);		      // send zero dummy to receive one byte
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff feab 	bl	8000a88 <SPI_sendByte>
 8000d32:	4603      	mov	r3, r0
 8000d34:	737b      	strb	r3, [r7, #13]
    tempdata |= temp;
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	81fb      	strh	r3, [r7, #14]
    VS1053_DCS();			              // xCS = 1
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <vs1053_readData+0x74>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <vs1053_readData+0x74>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	60d3      	str	r3, [r2, #12]
    return tempdata;	             	// return data word
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40010800 	.word	0x40010800

08000d5c <SPI_SendReceiveByte>:
uint8_t response;
#define CS_ON GPIOB->ODR &= ~GPIO_ODR_ODR12
#define CS_OFF GPIOB->ODR |= GPIO_ODR_ODR12

 uint8_t SPI_SendReceiveByte( uint8_t data )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbyte;

    while ( !( SPI_PORT -> SR & SPI_SR_TXE ) );
 8000d66:	bf00      	nop
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <SPI_SendReceiveByte+0x40>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f9      	beq.n	8000d68 <SPI_SendReceiveByte+0xc>
    SPI_PORT -> DR = data;
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <SPI_SendReceiveByte+0x40>)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	60d3      	str	r3, [r2, #12]

    while ( !( SPI_PORT -> SR & SPI_SR_RXNE ) );
 8000d7a:	bf00      	nop
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SPI_SendReceiveByte+0x40>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f9      	beq.n	8000d7c <SPI_SendReceiveByte+0x20>
    rxbyte = SPI_PORT->DR;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SPI_SendReceiveByte+0x40>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	73fb      	strb	r3, [r7, #15]

    return rxbyte;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40003800 	.word	0x40003800

08000da0 <flash_reset>:
//=========================================================================//
//+++++++++++++++сброс флеш и влючение ее в работу+++++++++++++++++++++++++//
//=========================================================================//
void flash_reset()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    CS_ON;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <flash_reset+0x4c>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <flash_reset+0x4c>)
 8000daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dae:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_ENABLE_RESET);
 8000db0:	2066      	movs	r0, #102	; 0x66
 8000db2:	f7ff ffd3 	bl	8000d5c <SPI_SendReceiveByte>
    CS_OFF;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <flash_reset+0x4c>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <flash_reset+0x4c>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	60d3      	str	r3, [r2, #12]

    CS_ON;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <flash_reset+0x4c>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <flash_reset+0x4c>)
 8000dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dcc:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_RESET_DEVICE);
 8000dce:	2099      	movs	r0, #153	; 0x99
 8000dd0:	f7ff ffc4 	bl	8000d5c <SPI_SendReceiveByte>
    CS_OFF;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <flash_reset+0x4c>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <flash_reset+0x4c>)
 8000dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dde:	60d3      	str	r3, [r2, #12]
	  HAL_Delay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f000 f8d4 	bl	8000f90 <HAL_Delay>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <flash_read_page>:
}
//=========================================================================//
//+++++++++++++++++++++++++++чтение страницы+++++++++++++++++++++++++++++++//
//=========================================================================//
 void flash_read_page(uint8_t data[], uint32_t addr, uint8_t len)//len 0 = 1 байт
{//256 bytes max per read / write.Clock frequency for Read Data instruction (03h) max 33 MHz
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71fb      	strb	r3, [r7, #7]
    CS_ON;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <flash_read_page+0x84>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <flash_read_page+0x84>)
 8000e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e08:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_READ);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f7ff ffa6 	bl	8000d5c <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 16) & 0xFF);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ffa0 	bl	8000d5c <SPI_SendReceiveByte>
    SPI_SendReceiveByte((addr >> 8) & 0xFF);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff9a 	bl	8000d5c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(addr & 0xFF);
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff95 	bl	8000d5c <SPI_SendReceiveByte>
	  *data++ = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8000e32:	68fc      	ldr	r4, [r7, #12]
 8000e34:	1c63      	adds	r3, r4, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff8f 	bl	8000d5c <SPI_SendReceiveByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	7023      	strb	r3, [r4, #0]
    while(len--)
 8000e42:	e007      	b.n	8000e54 <flash_read_page+0x64>
    {
        *data++ = SPI_SendReceiveByte(0);
 8000e44:	68fc      	ldr	r4, [r7, #12]
 8000e46:	1c63      	adds	r3, r4, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ff86 	bl	8000d5c <SPI_SendReceiveByte>
 8000e50:	4603      	mov	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]
    while(len--)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	71fa      	strb	r2, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f2      	bne.n	8000e44 <flash_read_page+0x54>
    }
    CS_OFF;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <flash_read_page+0x84>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <flash_read_page+0x84>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	60d3      	str	r3, [r2, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <get_flash_id>:
//=========================================================================//
//++++++++++++++++++++++++чтение айди флэш+++++++++++++++++++++++++++++++++//
//=========================================================================//
uint8_t get_flash_id()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

    uint8_t buff[2];
    CS_ON;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <get_flash_id+0x64>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <get_flash_id+0x64>)
 8000e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e88:	60d3      	str	r3, [r2, #12]
    SPI_SendReceiveByte(F_GET_DEV_ID);
 8000e8a:	2090      	movs	r0, #144	; 0x90
 8000e8c:	f7ff ff66 	bl	8000d5c <SPI_SendReceiveByte>
	  SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff ff63 	bl	8000d5c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff60 	bl	8000d5c <SPI_SendReceiveByte>
    SPI_SendReceiveByte(0x00);//ПОСЫЛАЕМ 000000 24-bit address
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff ff5d 	bl	8000d5c <SPI_SendReceiveByte>
	  buff[1] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff5a 	bl	8000d5c <SPI_SendReceiveByte>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	717b      	strb	r3, [r7, #5]
	  buff[0] = SPI_SendReceiveByte(0);// send zero dummy to receive one byte
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff55 	bl	8000d5c <SPI_SendReceiveByte>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	713b      	strb	r3, [r7, #4]
    CS_OFF;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <get_flash_id+0x64>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <get_flash_id+0x64>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec0:	60d3      	str	r3, [r2, #12]
   //EFh manufaturer id for windbond,17h device ID
    if (buff[0] == 0x17  && buff[1] == 0xEF)
 8000ec2:	793b      	ldrb	r3, [r7, #4]
 8000ec4:	2b17      	cmp	r3, #23
 8000ec6:	d104      	bne.n	8000ed2 <get_flash_id+0x5a>
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	2bef      	cmp	r3, #239	; 0xef
 8000ecc:	d101      	bne.n	8000ed2 <get_flash_id+0x5a>
        return 1;//OK;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <get_flash_id+0x5c>

    return 0;//Problem;
 8000ed2:	2300      	movs	r3, #0


}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f06:	f7ff fda7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f001 fbb7 	bl	800267c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff f969 	bl	80001e4 <main>
  bx lr
 8000f12:	4770      	bx	lr
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f1c:	0800317c 	.word	0x0800317c
  ldr r2, =_sbss
 8000f20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f24:	200002f4 	.word	0x200002f4

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f8f5 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f7ff fc54 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fb4e 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x20>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000010 	.word	0x20000010
 8000f78:	200002e0 	.word	0x200002e0

08000f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GetTick+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	200002e0 	.word	0x200002e0

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff fff0 	bl	8000f7c <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffe0 	bl	8000f7c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000010 	.word	0x20000010

08000fd8 <__NVIC_SetPriorityGrouping>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <__NVIC_EnableIRQ+0x34>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff4f 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff64 	bl	8001020 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ffb2 	bl	80010c8 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff81 	bl	8001074 <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff57 	bl	800103c <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e169      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ac:	2201      	movs	r2, #1
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8158 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a9a      	ldr	r2, [pc, #616]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d05e      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011d4:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d875      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011da:	4a98      	ldr	r2, [pc, #608]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d058      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011e0:	4a96      	ldr	r2, [pc, #600]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d86f      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011e6:	4a96      	ldr	r2, [pc, #600]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d052      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011ec:	4a94      	ldr	r2, [pc, #592]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d869      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011f2:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d04c      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011f8:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d863      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011fe:	4a92      	ldr	r2, [pc, #584]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d046      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 8001204:	4a90      	ldr	r2, [pc, #576]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d85d      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d82a      	bhi.n	8001264 <HAL_GPIO_Init+0xcc>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d859      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <HAL_GPIO_Init+0x80>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001293 	.word	0x08001293
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800127f 	.word	0x0800127f
 8001224:	080012c1 	.word	0x080012c1
 8001228:	080012c7 	.word	0x080012c7
 800122c:	080012c7 	.word	0x080012c7
 8001230:	080012c7 	.word	0x080012c7
 8001234:	080012c7 	.word	0x080012c7
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c7 	.word	0x080012c7
 8001240:	080012c7 	.word	0x080012c7
 8001244:	080012c7 	.word	0x080012c7
 8001248:	080012c7 	.word	0x080012c7
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012c7 	.word	0x080012c7
 8001254:	080012c7 	.word	0x080012c7
 8001258:	080012c7 	.word	0x080012c7
 800125c:	08001275 	.word	0x08001275
 8001260:	08001289 	.word	0x08001289
 8001264:	4a79      	ldr	r2, [pc, #484]	; (800144c <HAL_GPIO_Init+0x2b4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126a:	e02c      	b.n	80012c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e029      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e024      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	3308      	adds	r3, #8
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e01f      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e01a      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129a:	2304      	movs	r3, #4
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e013      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	611a      	str	r2, [r3, #16]
          break;
 80012b2:	e009      	b.n	80012c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	615a      	str	r2, [r3, #20]
          break;
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          break;
 80012c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d801      	bhi.n	80012d2 <HAL_GPIO_Init+0x13a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_Init+0x13e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3304      	adds	r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d802      	bhi.n	80012e4 <HAL_GPIO_Init+0x14c>
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x152>
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3b08      	subs	r3, #8
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	210f      	movs	r1, #15
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	6a39      	ldr	r1, [r7, #32]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80b1 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_GPIO_Init+0x2c0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d013      	beq.n	8001384 <HAL_GPIO_Init+0x1ec>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <HAL_GPIO_Init+0x2c4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1e8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1e4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1e0>
 8001374:	2303      	movs	r3, #3
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001378:	2304      	movs	r3, #4
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001384:	2300      	movs	r3, #0
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001396:	492f      	ldr	r1, [pc, #188]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	492c      	ldr	r1, [pc, #176]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4922      	ldr	r1, [pc, #136]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	491e      	ldr	r1, [pc, #120]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4918      	ldr	r1, [pc, #96]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4914      	ldr	r1, [pc, #80]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d021      	beq.n	800146c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
 8001434:	e021      	b.n	800147a <HAL_GPIO_Init+0x2e2>
 8001436:	bf00      	nop
 8001438:	10320000 	.word	0x10320000
 800143c:	10310000 	.word	0x10310000
 8001440:	10220000 	.word	0x10220000
 8001444:	10210000 	.word	0x10210000
 8001448:	10120000 	.word	0x10120000
 800144c:	10110000 	.word	0x10110000
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	40010800 	.word	0x40010800
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40011000 	.word	0x40011000
 8001464:	40011400 	.word	0x40011400
 8001468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_GPIO_Init+0x304>)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <HAL_GPIO_Init+0x304>)
 8001476:	4013      	ands	r3, r2
 8001478:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f47f ae8e 	bne.w	80011ac <HAL_GPIO_Init+0x14>
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	372c      	adds	r7, #44	; 0x2c
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e272      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8087 	beq.w	80015fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d00c      	beq.n	8001516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fc:	4b8f      	ldr	r3, [pc, #572]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d112      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d10b      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d06c      	beq.n	80015fc <HAL_RCC_OscConfig+0x12c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d168      	bne.n	80015fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e24c      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x76>
 8001538:	4b80      	ldr	r3, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a7f      	ldr	r2, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b7b      	ldr	r3, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7a      	ldr	r2, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a77      	ldr	r2, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0xbc>
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a71      	ldr	r2, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a6a      	ldr	r2, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fce6 	bl	8000f7c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fce2 	bl	8000f7c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e200      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe4>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fcd2 	bl	8000f7c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fcce 	bl	8000f7c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1ec      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x10c>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1c0      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4939      	ldr	r1, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e03a      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fc87 	bl	8000f7c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff fc83 	bl	8000f7c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1a1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4927      	ldr	r1, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc66 	bl	8000f7c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc62 	bl	8000f7c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e180      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03a      	beq.n	8001754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fc46 	bl	8000f7c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fc42 	bl	8000f7c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e160      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f000 fb08 	bl	8001d28 <RCC_Delay>
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fc2c 	bl	8000f7c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fc28 	bl	8000f7c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d908      	bls.n	8001748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e146      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	42420000 	.word	0x42420000
 8001744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e9      	bne.n	8001728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a6 	beq.w	80018ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10d      	bne.n	800178e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a87      	ldr	r2, [pc, #540]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7e      	ldr	r2, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fbe9 	bl	8000f7c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff fbe5 	bl	8000f7c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b64      	cmp	r3, #100	; 0x64
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e103      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x312>
 80017d4:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e02d      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x334>
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a66      	ldr	r2, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	e01c      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x356>
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a60      	ldr	r2, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a5d      	ldr	r2, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001826:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a5a      	ldr	r2, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fb99 	bl	8000f7c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fb95 	bl	8000f7c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0b1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x37e>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fb83 	bl	8000f7c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fb7f 	bl	8000f7c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e09b      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8087 	beq.w	80019c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d061      	beq.n	8001988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d146      	bne.n	800195a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb53 	bl	8000f7c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb4f 	bl	8000f7c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e06d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d108      	bne.n	8001914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a19      	ldr	r1, [r3, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	430b      	orrs	r3, r1
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fb23 	bl	8000f7c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fb1f 	bl	8000f7c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e03d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x46a>
 8001958:	e035      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fb0c 	bl	8000f7c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fb08 	bl	8000f7c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e026      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x498>
 8001986:	e01e      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e019      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x500>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4965      	ldr	r1, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff fa5a 	bl	8000f7c <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff fa56 	bl	8000f7c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fe34 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080030f8 	.word	0x080030f8
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b490      	push	{r4, r7}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bb0:	1d3c      	adds	r4, r7, #4
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb8:	f240 2301 	movw	r3, #513	; 0x201
 8001bbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x46>
 8001be6:	e02b      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bea:	623b      	str	r3, [r7, #32]
      break;
 8001bec:	e02b      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3328      	adds	r3, #40	; 0x28
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bfe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	0c5b      	lsrs	r3, r3, #17
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	3328      	adds	r3, #40	; 0x28
 8001c16:	443b      	add	r3, r7
 8001c18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	e004      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	623b      	str	r3, [r7, #32]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc90      	pop	{r4, r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	080030e8 	.word	0x080030e8
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	007a1200 	.word	0x007a1200
 8001c60:	003d0900 	.word	0x003d0900

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000008 	.word	0x20000008

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff2 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08003108 	.word	0x08003108

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08003108 	.word	0x08003108

08001cc8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_RCC_GetClockConfig+0x58>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_RCC_GetClockConfig+0x58>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_GetClockConfig+0x58>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_RCC_GetClockConfig+0x58>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0207 	and.w	r2, r3, #7
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40022000 	.word	0x40022000

08001d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <RCC_Delay+0x34>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <RCC_Delay+0x38>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d44:	bf00      	nop
  }
  while (Delay --);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <RCC_Delay+0x1c>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e076      	b.n	8001e64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d86:	d009      	beq.n	8001d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
 8001d8e:	e005      	b.n	8001d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fc48 	bl	800064c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	ea42 0103 	orr.w	r1, r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	0c1a      	lsrs	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f002 0204 	and.w	r2, r2, #4
 8001e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f839 	bl	8001f0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 f9b4 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d001      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e03a      	b.n	8001faa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_TIM_Base_Start_IT+0x98>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x58>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d009      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x58>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x58>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_TIM_Base_Start_IT+0xa0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d010      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	e007      	b.n	8001fa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800

08001fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8ed 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8e0 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8ef 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b04      	cmp	r3, #4
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0204 	mvn.w	r2, #4
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8c3 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8b6 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8c5 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b08      	cmp	r3, #8
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b08      	cmp	r3, #8
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0208 	mvn.w	r2, #8
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f899 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f88c 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f89b 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b10      	cmp	r3, #16
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0210 	mvn.w	r2, #16
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2208      	movs	r2, #8
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f86f 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f862 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f871 	bl	80021f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0201 	mvn.w	r2, #1
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fa3a 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b80      	cmp	r3, #128	; 0x80
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d107      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8bf 	bl	80022ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f835 	bl	8002206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0220 	mvn.w	r2, #32
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f88a 	bl	80022dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <TIM_Base_SetConfig+0xbc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <TIM_Base_SetConfig+0xc0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <TIM_Base_SetConfig+0xbc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <TIM_Base_SetConfig+0xc0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800

080022dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e03f      	b.n	8002392 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fa16 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f905 	bl	8002554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b08a      	sub	sp, #40	; 0x28
 800239e:	af02      	add	r7, sp, #8
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d17c      	bne.n	80024b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_UART_Transmit+0x2c>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e075      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit+0x3e>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e06e      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ee:	f7fe fdc5 	bl	8000f7c <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d108      	bne.n	800241c <HAL_UART_Transmit+0x82>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e003      	b.n	8002424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800242c:	e02a      	b.n	8002484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f840 	bl	80024be <UART_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e036      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800245c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	3302      	adds	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e007      	b.n	8002476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1cf      	bne.n	800242e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f810 	bl	80024be <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e006      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e000      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
  }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ce:	e02c      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d6:	d028      	beq.n	800252a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <UART_WaitOnFlagUntilTimeout+0x30>
 80024de:	f7fe fd4d 	bl	8000f7c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d21d      	bcs.n	800252a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e00f      	b.n	800254a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d0c3      	beq.n	80024d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800258e:	f023 030c 	bic.w	r3, r3, #12
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	430b      	orrs	r3, r1
 800259a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <UART_SetConfig+0x114>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d103      	bne.n	80025c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025bc:	f7ff fb70 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	e002      	b.n	80025ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c4:	f7ff fb58 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009a      	lsls	r2, r3, #2
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <UART_SetConfig+0x118>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	0119      	lsls	r1, r3, #4
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	009a      	lsls	r2, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <UART_SetConfig+0x118>)
 8002602:	fba3 0302 	umull	r0, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2064      	movs	r0, #100	; 0x64
 800260a:	fb00 f303 	mul.w	r3, r0, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	3332      	adds	r3, #50	; 0x32
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <UART_SetConfig+0x118>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002620:	4419      	add	r1, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <UART_SetConfig+0x118>)
 800263a:	fba3 0302 	umull	r0, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2064      	movs	r0, #100	; 0x64
 8002642:	fb00 f303 	mul.w	r3, r0, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	3332      	adds	r3, #50	; 0x32
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <UART_SetConfig+0x118>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	440a      	add	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013800 	.word	0x40013800
 800266c:	51eb851f 	.word	0x51eb851f

08002670 <__errno>:
 8002670:	4b01      	ldr	r3, [pc, #4]	; (8002678 <__errno+0x8>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000014 	.word	0x20000014

0800267c <__libc_init_array>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	2600      	movs	r6, #0
 8002680:	4d0c      	ldr	r5, [pc, #48]	; (80026b4 <__libc_init_array+0x38>)
 8002682:	4c0d      	ldr	r4, [pc, #52]	; (80026b8 <__libc_init_array+0x3c>)
 8002684:	1b64      	subs	r4, r4, r5
 8002686:	10a4      	asrs	r4, r4, #2
 8002688:	42a6      	cmp	r6, r4
 800268a:	d109      	bne.n	80026a0 <__libc_init_array+0x24>
 800268c:	f000 fd18 	bl	80030c0 <_init>
 8002690:	2600      	movs	r6, #0
 8002692:	4d0a      	ldr	r5, [pc, #40]	; (80026bc <__libc_init_array+0x40>)
 8002694:	4c0a      	ldr	r4, [pc, #40]	; (80026c0 <__libc_init_array+0x44>)
 8002696:	1b64      	subs	r4, r4, r5
 8002698:	10a4      	asrs	r4, r4, #2
 800269a:	42a6      	cmp	r6, r4
 800269c:	d105      	bne.n	80026aa <__libc_init_array+0x2e>
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a4:	4798      	blx	r3
 80026a6:	3601      	adds	r6, #1
 80026a8:	e7ee      	b.n	8002688 <__libc_init_array+0xc>
 80026aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ae:	4798      	blx	r3
 80026b0:	3601      	adds	r6, #1
 80026b2:	e7f2      	b.n	800269a <__libc_init_array+0x1e>
 80026b4:	08003174 	.word	0x08003174
 80026b8:	08003174 	.word	0x08003174
 80026bc:	08003174 	.word	0x08003174
 80026c0:	08003178 	.word	0x08003178

080026c4 <memset>:
 80026c4:	4603      	mov	r3, r0
 80026c6:	4402      	add	r2, r0
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d100      	bne.n	80026ce <memset+0xa>
 80026cc:	4770      	bx	lr
 80026ce:	f803 1b01 	strb.w	r1, [r3], #1
 80026d2:	e7f9      	b.n	80026c8 <memset+0x4>

080026d4 <_puts_r>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	460e      	mov	r6, r1
 80026d8:	4605      	mov	r5, r0
 80026da:	b118      	cbz	r0, 80026e4 <_puts_r+0x10>
 80026dc:	6983      	ldr	r3, [r0, #24]
 80026de:	b90b      	cbnz	r3, 80026e4 <_puts_r+0x10>
 80026e0:	f000 fa44 	bl	8002b6c <__sinit>
 80026e4:	69ab      	ldr	r3, [r5, #24]
 80026e6:	68ac      	ldr	r4, [r5, #8]
 80026e8:	b913      	cbnz	r3, 80026f0 <_puts_r+0x1c>
 80026ea:	4628      	mov	r0, r5
 80026ec:	f000 fa3e 	bl	8002b6c <__sinit>
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <_puts_r+0xd0>)
 80026f2:	429c      	cmp	r4, r3
 80026f4:	d120      	bne.n	8002738 <_puts_r+0x64>
 80026f6:	686c      	ldr	r4, [r5, #4]
 80026f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026fa:	07db      	lsls	r3, r3, #31
 80026fc:	d405      	bmi.n	800270a <_puts_r+0x36>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	0598      	lsls	r0, r3, #22
 8002702:	d402      	bmi.n	800270a <_puts_r+0x36>
 8002704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002706:	f000 facf 	bl	8002ca8 <__retarget_lock_acquire_recursive>
 800270a:	89a3      	ldrh	r3, [r4, #12]
 800270c:	0719      	lsls	r1, r3, #28
 800270e:	d51d      	bpl.n	800274c <_puts_r+0x78>
 8002710:	6923      	ldr	r3, [r4, #16]
 8002712:	b1db      	cbz	r3, 800274c <_puts_r+0x78>
 8002714:	3e01      	subs	r6, #1
 8002716:	68a3      	ldr	r3, [r4, #8]
 8002718:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800271c:	3b01      	subs	r3, #1
 800271e:	60a3      	str	r3, [r4, #8]
 8002720:	bb39      	cbnz	r1, 8002772 <_puts_r+0x9e>
 8002722:	2b00      	cmp	r3, #0
 8002724:	da38      	bge.n	8002798 <_puts_r+0xc4>
 8002726:	4622      	mov	r2, r4
 8002728:	210a      	movs	r1, #10
 800272a:	4628      	mov	r0, r5
 800272c:	f000 f848 	bl	80027c0 <__swbuf_r>
 8002730:	3001      	adds	r0, #1
 8002732:	d011      	beq.n	8002758 <_puts_r+0x84>
 8002734:	250a      	movs	r5, #10
 8002736:	e011      	b.n	800275c <_puts_r+0x88>
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <_puts_r+0xd4>)
 800273a:	429c      	cmp	r4, r3
 800273c:	d101      	bne.n	8002742 <_puts_r+0x6e>
 800273e:	68ac      	ldr	r4, [r5, #8]
 8002740:	e7da      	b.n	80026f8 <_puts_r+0x24>
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <_puts_r+0xd8>)
 8002744:	429c      	cmp	r4, r3
 8002746:	bf08      	it	eq
 8002748:	68ec      	ldreq	r4, [r5, #12]
 800274a:	e7d5      	b.n	80026f8 <_puts_r+0x24>
 800274c:	4621      	mov	r1, r4
 800274e:	4628      	mov	r0, r5
 8002750:	f000 f888 	bl	8002864 <__swsetup_r>
 8002754:	2800      	cmp	r0, #0
 8002756:	d0dd      	beq.n	8002714 <_puts_r+0x40>
 8002758:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800275c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800275e:	07da      	lsls	r2, r3, #31
 8002760:	d405      	bmi.n	800276e <_puts_r+0x9a>
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	059b      	lsls	r3, r3, #22
 8002766:	d402      	bmi.n	800276e <_puts_r+0x9a>
 8002768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800276a:	f000 fa9e 	bl	8002caa <__retarget_lock_release_recursive>
 800276e:	4628      	mov	r0, r5
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	2b00      	cmp	r3, #0
 8002774:	da04      	bge.n	8002780 <_puts_r+0xac>
 8002776:	69a2      	ldr	r2, [r4, #24]
 8002778:	429a      	cmp	r2, r3
 800277a:	dc06      	bgt.n	800278a <_puts_r+0xb6>
 800277c:	290a      	cmp	r1, #10
 800277e:	d004      	beq.n	800278a <_puts_r+0xb6>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	6022      	str	r2, [r4, #0]
 8002786:	7019      	strb	r1, [r3, #0]
 8002788:	e7c5      	b.n	8002716 <_puts_r+0x42>
 800278a:	4622      	mov	r2, r4
 800278c:	4628      	mov	r0, r5
 800278e:	f000 f817 	bl	80027c0 <__swbuf_r>
 8002792:	3001      	adds	r0, #1
 8002794:	d1bf      	bne.n	8002716 <_puts_r+0x42>
 8002796:	e7df      	b.n	8002758 <_puts_r+0x84>
 8002798:	250a      	movs	r5, #10
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	6022      	str	r2, [r4, #0]
 80027a0:	701d      	strb	r5, [r3, #0]
 80027a2:	e7db      	b.n	800275c <_puts_r+0x88>
 80027a4:	08003134 	.word	0x08003134
 80027a8:	08003154 	.word	0x08003154
 80027ac:	08003114 	.word	0x08003114

080027b0 <puts>:
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <puts+0xc>)
 80027b2:	4601      	mov	r1, r0
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f7ff bf8d 	b.w	80026d4 <_puts_r>
 80027ba:	bf00      	nop
 80027bc:	20000014 	.word	0x20000014

080027c0 <__swbuf_r>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	460e      	mov	r6, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	4605      	mov	r5, r0
 80027c8:	b118      	cbz	r0, 80027d2 <__swbuf_r+0x12>
 80027ca:	6983      	ldr	r3, [r0, #24]
 80027cc:	b90b      	cbnz	r3, 80027d2 <__swbuf_r+0x12>
 80027ce:	f000 f9cd 	bl	8002b6c <__sinit>
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <__swbuf_r+0x98>)
 80027d4:	429c      	cmp	r4, r3
 80027d6:	d12b      	bne.n	8002830 <__swbuf_r+0x70>
 80027d8:	686c      	ldr	r4, [r5, #4]
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	60a3      	str	r3, [r4, #8]
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	071a      	lsls	r2, r3, #28
 80027e2:	d52f      	bpl.n	8002844 <__swbuf_r+0x84>
 80027e4:	6923      	ldr	r3, [r4, #16]
 80027e6:	b36b      	cbz	r3, 8002844 <__swbuf_r+0x84>
 80027e8:	6923      	ldr	r3, [r4, #16]
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	b2f6      	uxtb	r6, r6
 80027ee:	1ac0      	subs	r0, r0, r3
 80027f0:	6963      	ldr	r3, [r4, #20]
 80027f2:	4637      	mov	r7, r6
 80027f4:	4283      	cmp	r3, r0
 80027f6:	dc04      	bgt.n	8002802 <__swbuf_r+0x42>
 80027f8:	4621      	mov	r1, r4
 80027fa:	4628      	mov	r0, r5
 80027fc:	f000 f922 	bl	8002a44 <_fflush_r>
 8002800:	bb30      	cbnz	r0, 8002850 <__swbuf_r+0x90>
 8002802:	68a3      	ldr	r3, [r4, #8]
 8002804:	3001      	adds	r0, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	60a3      	str	r3, [r4, #8]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	6022      	str	r2, [r4, #0]
 8002810:	701e      	strb	r6, [r3, #0]
 8002812:	6963      	ldr	r3, [r4, #20]
 8002814:	4283      	cmp	r3, r0
 8002816:	d004      	beq.n	8002822 <__swbuf_r+0x62>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	07db      	lsls	r3, r3, #31
 800281c:	d506      	bpl.n	800282c <__swbuf_r+0x6c>
 800281e:	2e0a      	cmp	r6, #10
 8002820:	d104      	bne.n	800282c <__swbuf_r+0x6c>
 8002822:	4621      	mov	r1, r4
 8002824:	4628      	mov	r0, r5
 8002826:	f000 f90d 	bl	8002a44 <_fflush_r>
 800282a:	b988      	cbnz	r0, 8002850 <__swbuf_r+0x90>
 800282c:	4638      	mov	r0, r7
 800282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <__swbuf_r+0x9c>)
 8002832:	429c      	cmp	r4, r3
 8002834:	d101      	bne.n	800283a <__swbuf_r+0x7a>
 8002836:	68ac      	ldr	r4, [r5, #8]
 8002838:	e7cf      	b.n	80027da <__swbuf_r+0x1a>
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <__swbuf_r+0xa0>)
 800283c:	429c      	cmp	r4, r3
 800283e:	bf08      	it	eq
 8002840:	68ec      	ldreq	r4, [r5, #12]
 8002842:	e7ca      	b.n	80027da <__swbuf_r+0x1a>
 8002844:	4621      	mov	r1, r4
 8002846:	4628      	mov	r0, r5
 8002848:	f000 f80c 	bl	8002864 <__swsetup_r>
 800284c:	2800      	cmp	r0, #0
 800284e:	d0cb      	beq.n	80027e8 <__swbuf_r+0x28>
 8002850:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002854:	e7ea      	b.n	800282c <__swbuf_r+0x6c>
 8002856:	bf00      	nop
 8002858:	08003134 	.word	0x08003134
 800285c:	08003154 	.word	0x08003154
 8002860:	08003114 	.word	0x08003114

08002864 <__swsetup_r>:
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <__swsetup_r+0xcc>)
 8002866:	b570      	push	{r4, r5, r6, lr}
 8002868:	681d      	ldr	r5, [r3, #0]
 800286a:	4606      	mov	r6, r0
 800286c:	460c      	mov	r4, r1
 800286e:	b125      	cbz	r5, 800287a <__swsetup_r+0x16>
 8002870:	69ab      	ldr	r3, [r5, #24]
 8002872:	b913      	cbnz	r3, 800287a <__swsetup_r+0x16>
 8002874:	4628      	mov	r0, r5
 8002876:	f000 f979 	bl	8002b6c <__sinit>
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <__swsetup_r+0xd0>)
 800287c:	429c      	cmp	r4, r3
 800287e:	d10f      	bne.n	80028a0 <__swsetup_r+0x3c>
 8002880:	686c      	ldr	r4, [r5, #4]
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002888:	0719      	lsls	r1, r3, #28
 800288a:	d42c      	bmi.n	80028e6 <__swsetup_r+0x82>
 800288c:	06dd      	lsls	r5, r3, #27
 800288e:	d411      	bmi.n	80028b4 <__swsetup_r+0x50>
 8002890:	2309      	movs	r3, #9
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800289c:	81a3      	strh	r3, [r4, #12]
 800289e:	e03e      	b.n	800291e <__swsetup_r+0xba>
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <__swsetup_r+0xd4>)
 80028a2:	429c      	cmp	r4, r3
 80028a4:	d101      	bne.n	80028aa <__swsetup_r+0x46>
 80028a6:	68ac      	ldr	r4, [r5, #8]
 80028a8:	e7eb      	b.n	8002882 <__swsetup_r+0x1e>
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <__swsetup_r+0xd8>)
 80028ac:	429c      	cmp	r4, r3
 80028ae:	bf08      	it	eq
 80028b0:	68ec      	ldreq	r4, [r5, #12]
 80028b2:	e7e6      	b.n	8002882 <__swsetup_r+0x1e>
 80028b4:	0758      	lsls	r0, r3, #29
 80028b6:	d512      	bpl.n	80028de <__swsetup_r+0x7a>
 80028b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028ba:	b141      	cbz	r1, 80028ce <__swsetup_r+0x6a>
 80028bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028c0:	4299      	cmp	r1, r3
 80028c2:	d002      	beq.n	80028ca <__swsetup_r+0x66>
 80028c4:	4630      	mov	r0, r6
 80028c6:	f000 fa57 	bl	8002d78 <_free_r>
 80028ca:	2300      	movs	r3, #0
 80028cc:	6363      	str	r3, [r4, #52]	; 0x34
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	6063      	str	r3, [r4, #4]
 80028da:	6923      	ldr	r3, [r4, #16]
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	6923      	ldr	r3, [r4, #16]
 80028e8:	b94b      	cbnz	r3, 80028fe <__swsetup_r+0x9a>
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f4:	d003      	beq.n	80028fe <__swsetup_r+0x9a>
 80028f6:	4621      	mov	r1, r4
 80028f8:	4630      	mov	r0, r6
 80028fa:	f000 f9fd 	bl	8002cf8 <__smakebuf_r>
 80028fe:	89a0      	ldrh	r0, [r4, #12]
 8002900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002904:	f010 0301 	ands.w	r3, r0, #1
 8002908:	d00a      	beq.n	8002920 <__swsetup_r+0xbc>
 800290a:	2300      	movs	r3, #0
 800290c:	60a3      	str	r3, [r4, #8]
 800290e:	6963      	ldr	r3, [r4, #20]
 8002910:	425b      	negs	r3, r3
 8002912:	61a3      	str	r3, [r4, #24]
 8002914:	6923      	ldr	r3, [r4, #16]
 8002916:	b943      	cbnz	r3, 800292a <__swsetup_r+0xc6>
 8002918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800291c:	d1ba      	bne.n	8002894 <__swsetup_r+0x30>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	0781      	lsls	r1, r0, #30
 8002922:	bf58      	it	pl
 8002924:	6963      	ldrpl	r3, [r4, #20]
 8002926:	60a3      	str	r3, [r4, #8]
 8002928:	e7f4      	b.n	8002914 <__swsetup_r+0xb0>
 800292a:	2000      	movs	r0, #0
 800292c:	e7f7      	b.n	800291e <__swsetup_r+0xba>
 800292e:	bf00      	nop
 8002930:	20000014 	.word	0x20000014
 8002934:	08003134 	.word	0x08003134
 8002938:	08003154 	.word	0x08003154
 800293c:	08003114 	.word	0x08003114

08002940 <__sflush_r>:
 8002940:	898a      	ldrh	r2, [r1, #12]
 8002942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002944:	4605      	mov	r5, r0
 8002946:	0710      	lsls	r0, r2, #28
 8002948:	460c      	mov	r4, r1
 800294a:	d457      	bmi.n	80029fc <__sflush_r+0xbc>
 800294c:	684b      	ldr	r3, [r1, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dc04      	bgt.n	800295c <__sflush_r+0x1c>
 8002952:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	dc01      	bgt.n	800295c <__sflush_r+0x1c>
 8002958:	2000      	movs	r0, #0
 800295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800295e:	2e00      	cmp	r6, #0
 8002960:	d0fa      	beq.n	8002958 <__sflush_r+0x18>
 8002962:	2300      	movs	r3, #0
 8002964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002968:	682f      	ldr	r7, [r5, #0]
 800296a:	602b      	str	r3, [r5, #0]
 800296c:	d032      	beq.n	80029d4 <__sflush_r+0x94>
 800296e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	075a      	lsls	r2, r3, #29
 8002974:	d505      	bpl.n	8002982 <__sflush_r+0x42>
 8002976:	6863      	ldr	r3, [r4, #4]
 8002978:	1ac0      	subs	r0, r0, r3
 800297a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800297c:	b10b      	cbz	r3, 8002982 <__sflush_r+0x42>
 800297e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002980:	1ac0      	subs	r0, r0, r3
 8002982:	2300      	movs	r3, #0
 8002984:	4602      	mov	r2, r0
 8002986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002988:	4628      	mov	r0, r5
 800298a:	6a21      	ldr	r1, [r4, #32]
 800298c:	47b0      	blx	r6
 800298e:	1c43      	adds	r3, r0, #1
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	d106      	bne.n	80029a2 <__sflush_r+0x62>
 8002994:	6829      	ldr	r1, [r5, #0]
 8002996:	291d      	cmp	r1, #29
 8002998:	d82c      	bhi.n	80029f4 <__sflush_r+0xb4>
 800299a:	4a29      	ldr	r2, [pc, #164]	; (8002a40 <__sflush_r+0x100>)
 800299c:	40ca      	lsrs	r2, r1
 800299e:	07d6      	lsls	r6, r2, #31
 80029a0:	d528      	bpl.n	80029f4 <__sflush_r+0xb4>
 80029a2:	2200      	movs	r2, #0
 80029a4:	6062      	str	r2, [r4, #4]
 80029a6:	6922      	ldr	r2, [r4, #16]
 80029a8:	04d9      	lsls	r1, r3, #19
 80029aa:	6022      	str	r2, [r4, #0]
 80029ac:	d504      	bpl.n	80029b8 <__sflush_r+0x78>
 80029ae:	1c42      	adds	r2, r0, #1
 80029b0:	d101      	bne.n	80029b6 <__sflush_r+0x76>
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	b903      	cbnz	r3, 80029b8 <__sflush_r+0x78>
 80029b6:	6560      	str	r0, [r4, #84]	; 0x54
 80029b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029ba:	602f      	str	r7, [r5, #0]
 80029bc:	2900      	cmp	r1, #0
 80029be:	d0cb      	beq.n	8002958 <__sflush_r+0x18>
 80029c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029c4:	4299      	cmp	r1, r3
 80029c6:	d002      	beq.n	80029ce <__sflush_r+0x8e>
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f9d5 	bl	8002d78 <_free_r>
 80029ce:	2000      	movs	r0, #0
 80029d0:	6360      	str	r0, [r4, #52]	; 0x34
 80029d2:	e7c2      	b.n	800295a <__sflush_r+0x1a>
 80029d4:	6a21      	ldr	r1, [r4, #32]
 80029d6:	2301      	movs	r3, #1
 80029d8:	4628      	mov	r0, r5
 80029da:	47b0      	blx	r6
 80029dc:	1c41      	adds	r1, r0, #1
 80029de:	d1c7      	bne.n	8002970 <__sflush_r+0x30>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0c4      	beq.n	8002970 <__sflush_r+0x30>
 80029e6:	2b1d      	cmp	r3, #29
 80029e8:	d001      	beq.n	80029ee <__sflush_r+0xae>
 80029ea:	2b16      	cmp	r3, #22
 80029ec:	d101      	bne.n	80029f2 <__sflush_r+0xb2>
 80029ee:	602f      	str	r7, [r5, #0]
 80029f0:	e7b2      	b.n	8002958 <__sflush_r+0x18>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f8:	81a3      	strh	r3, [r4, #12]
 80029fa:	e7ae      	b.n	800295a <__sflush_r+0x1a>
 80029fc:	690f      	ldr	r7, [r1, #16]
 80029fe:	2f00      	cmp	r7, #0
 8002a00:	d0aa      	beq.n	8002958 <__sflush_r+0x18>
 8002a02:	0793      	lsls	r3, r2, #30
 8002a04:	bf18      	it	ne
 8002a06:	2300      	movne	r3, #0
 8002a08:	680e      	ldr	r6, [r1, #0]
 8002a0a:	bf08      	it	eq
 8002a0c:	694b      	ldreq	r3, [r1, #20]
 8002a0e:	1bf6      	subs	r6, r6, r7
 8002a10:	600f      	str	r7, [r1, #0]
 8002a12:	608b      	str	r3, [r1, #8]
 8002a14:	2e00      	cmp	r6, #0
 8002a16:	dd9f      	ble.n	8002958 <__sflush_r+0x18>
 8002a18:	4633      	mov	r3, r6
 8002a1a:	463a      	mov	r2, r7
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	6a21      	ldr	r1, [r4, #32]
 8002a20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a24:	47e0      	blx	ip
 8002a26:	2800      	cmp	r0, #0
 8002a28:	dc06      	bgt.n	8002a38 <__sflush_r+0xf8>
 8002a2a:	89a3      	ldrh	r3, [r4, #12]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	e790      	b.n	800295a <__sflush_r+0x1a>
 8002a38:	4407      	add	r7, r0
 8002a3a:	1a36      	subs	r6, r6, r0
 8002a3c:	e7ea      	b.n	8002a14 <__sflush_r+0xd4>
 8002a3e:	bf00      	nop
 8002a40:	20400001 	.word	0x20400001

08002a44 <_fflush_r>:
 8002a44:	b538      	push	{r3, r4, r5, lr}
 8002a46:	690b      	ldr	r3, [r1, #16]
 8002a48:	4605      	mov	r5, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	b913      	cbnz	r3, 8002a54 <_fflush_r+0x10>
 8002a4e:	2500      	movs	r5, #0
 8002a50:	4628      	mov	r0, r5
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
 8002a54:	b118      	cbz	r0, 8002a5e <_fflush_r+0x1a>
 8002a56:	6983      	ldr	r3, [r0, #24]
 8002a58:	b90b      	cbnz	r3, 8002a5e <_fflush_r+0x1a>
 8002a5a:	f000 f887 	bl	8002b6c <__sinit>
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <_fflush_r+0x6c>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d11b      	bne.n	8002a9c <_fflush_r+0x58>
 8002a64:	686c      	ldr	r4, [r5, #4]
 8002a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ef      	beq.n	8002a4e <_fflush_r+0xa>
 8002a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a70:	07d0      	lsls	r0, r2, #31
 8002a72:	d404      	bmi.n	8002a7e <_fflush_r+0x3a>
 8002a74:	0599      	lsls	r1, r3, #22
 8002a76:	d402      	bmi.n	8002a7e <_fflush_r+0x3a>
 8002a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7a:	f000 f915 	bl	8002ca8 <__retarget_lock_acquire_recursive>
 8002a7e:	4628      	mov	r0, r5
 8002a80:	4621      	mov	r1, r4
 8002a82:	f7ff ff5d 	bl	8002940 <__sflush_r>
 8002a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a88:	4605      	mov	r5, r0
 8002a8a:	07da      	lsls	r2, r3, #31
 8002a8c:	d4e0      	bmi.n	8002a50 <_fflush_r+0xc>
 8002a8e:	89a3      	ldrh	r3, [r4, #12]
 8002a90:	059b      	lsls	r3, r3, #22
 8002a92:	d4dd      	bmi.n	8002a50 <_fflush_r+0xc>
 8002a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a96:	f000 f908 	bl	8002caa <__retarget_lock_release_recursive>
 8002a9a:	e7d9      	b.n	8002a50 <_fflush_r+0xc>
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <_fflush_r+0x70>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	d101      	bne.n	8002aa6 <_fflush_r+0x62>
 8002aa2:	68ac      	ldr	r4, [r5, #8]
 8002aa4:	e7df      	b.n	8002a66 <_fflush_r+0x22>
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <_fflush_r+0x74>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	bf08      	it	eq
 8002aac:	68ec      	ldreq	r4, [r5, #12]
 8002aae:	e7da      	b.n	8002a66 <_fflush_r+0x22>
 8002ab0:	08003134 	.word	0x08003134
 8002ab4:	08003154 	.word	0x08003154
 8002ab8:	08003114 	.word	0x08003114

08002abc <std>:
 8002abc:	2300      	movs	r3, #0
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aca:	6083      	str	r3, [r0, #8]
 8002acc:	8181      	strh	r1, [r0, #12]
 8002ace:	6643      	str	r3, [r0, #100]	; 0x64
 8002ad0:	81c2      	strh	r2, [r0, #14]
 8002ad2:	6183      	str	r3, [r0, #24]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	305c      	adds	r0, #92	; 0x5c
 8002ada:	f7ff fdf3 	bl	80026c4 <memset>
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <std+0x38>)
 8002ae0:	6224      	str	r4, [r4, #32]
 8002ae2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <std+0x3c>)
 8002ae6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <std+0x40>)
 8002aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <std+0x44>)
 8002aee:	6323      	str	r3, [r4, #48]	; 0x30
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	bf00      	nop
 8002af4:	08002f51 	.word	0x08002f51
 8002af8:	08002f73 	.word	0x08002f73
 8002afc:	08002fab 	.word	0x08002fab
 8002b00:	08002fcf 	.word	0x08002fcf

08002b04 <_cleanup_r>:
 8002b04:	4901      	ldr	r1, [pc, #4]	; (8002b0c <_cleanup_r+0x8>)
 8002b06:	f000 b8af 	b.w	8002c68 <_fwalk_reent>
 8002b0a:	bf00      	nop
 8002b0c:	08002a45 	.word	0x08002a45

08002b10 <__sfmoreglue>:
 8002b10:	2268      	movs	r2, #104	; 0x68
 8002b12:	b570      	push	{r4, r5, r6, lr}
 8002b14:	1e4d      	subs	r5, r1, #1
 8002b16:	4355      	muls	r5, r2
 8002b18:	460e      	mov	r6, r1
 8002b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b1e:	f000 f993 	bl	8002e48 <_malloc_r>
 8002b22:	4604      	mov	r4, r0
 8002b24:	b140      	cbz	r0, 8002b38 <__sfmoreglue+0x28>
 8002b26:	2100      	movs	r1, #0
 8002b28:	e9c0 1600 	strd	r1, r6, [r0]
 8002b2c:	300c      	adds	r0, #12
 8002b2e:	60a0      	str	r0, [r4, #8]
 8002b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b34:	f7ff fdc6 	bl	80026c4 <memset>
 8002b38:	4620      	mov	r0, r4
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}

08002b3c <__sfp_lock_acquire>:
 8002b3c:	4801      	ldr	r0, [pc, #4]	; (8002b44 <__sfp_lock_acquire+0x8>)
 8002b3e:	f000 b8b3 	b.w	8002ca8 <__retarget_lock_acquire_recursive>
 8002b42:	bf00      	nop
 8002b44:	200002e5 	.word	0x200002e5

08002b48 <__sfp_lock_release>:
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <__sfp_lock_release+0x8>)
 8002b4a:	f000 b8ae 	b.w	8002caa <__retarget_lock_release_recursive>
 8002b4e:	bf00      	nop
 8002b50:	200002e5 	.word	0x200002e5

08002b54 <__sinit_lock_acquire>:
 8002b54:	4801      	ldr	r0, [pc, #4]	; (8002b5c <__sinit_lock_acquire+0x8>)
 8002b56:	f000 b8a7 	b.w	8002ca8 <__retarget_lock_acquire_recursive>
 8002b5a:	bf00      	nop
 8002b5c:	200002e6 	.word	0x200002e6

08002b60 <__sinit_lock_release>:
 8002b60:	4801      	ldr	r0, [pc, #4]	; (8002b68 <__sinit_lock_release+0x8>)
 8002b62:	f000 b8a2 	b.w	8002caa <__retarget_lock_release_recursive>
 8002b66:	bf00      	nop
 8002b68:	200002e6 	.word	0x200002e6

08002b6c <__sinit>:
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
 8002b70:	f7ff fff0 	bl	8002b54 <__sinit_lock_acquire>
 8002b74:	69a3      	ldr	r3, [r4, #24]
 8002b76:	b11b      	cbz	r3, 8002b80 <__sinit+0x14>
 8002b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b7c:	f7ff bff0 	b.w	8002b60 <__sinit_lock_release>
 8002b80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b84:	6523      	str	r3, [r4, #80]	; 0x50
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <__sinit+0x68>)
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <__sinit+0x6c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b8e:	42a3      	cmp	r3, r4
 8002b90:	bf08      	it	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	4620      	mov	r0, r4
 8002b96:	bf08      	it	eq
 8002b98:	61a3      	streq	r3, [r4, #24]
 8002b9a:	f000 f81f 	bl	8002bdc <__sfp>
 8002b9e:	6060      	str	r0, [r4, #4]
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 f81b 	bl	8002bdc <__sfp>
 8002ba6:	60a0      	str	r0, [r4, #8]
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 f817 	bl	8002bdc <__sfp>
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	60e0      	str	r0, [r4, #12]
 8002bb4:	6860      	ldr	r0, [r4, #4]
 8002bb6:	f7ff ff81 	bl	8002abc <std>
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2109      	movs	r1, #9
 8002bbe:	68a0      	ldr	r0, [r4, #8]
 8002bc0:	f7ff ff7c 	bl	8002abc <std>
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	2112      	movs	r1, #18
 8002bc8:	68e0      	ldr	r0, [r4, #12]
 8002bca:	f7ff ff77 	bl	8002abc <std>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61a3      	str	r3, [r4, #24]
 8002bd2:	e7d1      	b.n	8002b78 <__sinit+0xc>
 8002bd4:	08003110 	.word	0x08003110
 8002bd8:	08002b05 	.word	0x08002b05

08002bdc <__sfp>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	4607      	mov	r7, r0
 8002be0:	f7ff ffac 	bl	8002b3c <__sfp_lock_acquire>
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <__sfp+0x84>)
 8002be6:	681e      	ldr	r6, [r3, #0]
 8002be8:	69b3      	ldr	r3, [r6, #24]
 8002bea:	b913      	cbnz	r3, 8002bf2 <__sfp+0x16>
 8002bec:	4630      	mov	r0, r6
 8002bee:	f7ff ffbd 	bl	8002b6c <__sinit>
 8002bf2:	3648      	adds	r6, #72	; 0x48
 8002bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	d503      	bpl.n	8002c04 <__sfp+0x28>
 8002bfc:	6833      	ldr	r3, [r6, #0]
 8002bfe:	b30b      	cbz	r3, 8002c44 <__sfp+0x68>
 8002c00:	6836      	ldr	r6, [r6, #0]
 8002c02:	e7f7      	b.n	8002bf4 <__sfp+0x18>
 8002c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c08:	b9d5      	cbnz	r5, 8002c40 <__sfp+0x64>
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <__sfp+0x88>)
 8002c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c10:	60e3      	str	r3, [r4, #12]
 8002c12:	6665      	str	r5, [r4, #100]	; 0x64
 8002c14:	f000 f847 	bl	8002ca6 <__retarget_lock_init_recursive>
 8002c18:	f7ff ff96 	bl	8002b48 <__sfp_lock_release>
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4629      	mov	r1, r5
 8002c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c28:	6025      	str	r5, [r4, #0]
 8002c2a:	61a5      	str	r5, [r4, #24]
 8002c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c30:	f7ff fd48 	bl	80026c4 <memset>
 8002c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c40:	3468      	adds	r4, #104	; 0x68
 8002c42:	e7d9      	b.n	8002bf8 <__sfp+0x1c>
 8002c44:	2104      	movs	r1, #4
 8002c46:	4638      	mov	r0, r7
 8002c48:	f7ff ff62 	bl	8002b10 <__sfmoreglue>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	6030      	str	r0, [r6, #0]
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d1d5      	bne.n	8002c00 <__sfp+0x24>
 8002c54:	f7ff ff78 	bl	8002b48 <__sfp_lock_release>
 8002c58:	230c      	movs	r3, #12
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	e7ee      	b.n	8002c3c <__sfp+0x60>
 8002c5e:	bf00      	nop
 8002c60:	08003110 	.word	0x08003110
 8002c64:	ffff0001 	.word	0xffff0001

08002c68 <_fwalk_reent>:
 8002c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	4688      	mov	r8, r1
 8002c70:	2700      	movs	r7, #0
 8002c72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c7a:	f1b9 0901 	subs.w	r9, r9, #1
 8002c7e:	d505      	bpl.n	8002c8c <_fwalk_reent+0x24>
 8002c80:	6824      	ldr	r4, [r4, #0]
 8002c82:	2c00      	cmp	r4, #0
 8002c84:	d1f7      	bne.n	8002c76 <_fwalk_reent+0xe>
 8002c86:	4638      	mov	r0, r7
 8002c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c8c:	89ab      	ldrh	r3, [r5, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d907      	bls.n	8002ca2 <_fwalk_reent+0x3a>
 8002c92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c96:	3301      	adds	r3, #1
 8002c98:	d003      	beq.n	8002ca2 <_fwalk_reent+0x3a>
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	47c0      	blx	r8
 8002ca0:	4307      	orrs	r7, r0
 8002ca2:	3568      	adds	r5, #104	; 0x68
 8002ca4:	e7e9      	b.n	8002c7a <_fwalk_reent+0x12>

08002ca6 <__retarget_lock_init_recursive>:
 8002ca6:	4770      	bx	lr

08002ca8 <__retarget_lock_acquire_recursive>:
 8002ca8:	4770      	bx	lr

08002caa <__retarget_lock_release_recursive>:
 8002caa:	4770      	bx	lr

08002cac <__swhatbuf_r>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	460e      	mov	r6, r1
 8002cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	2900      	cmp	r1, #0
 8002cb8:	461d      	mov	r5, r3
 8002cba:	b096      	sub	sp, #88	; 0x58
 8002cbc:	da08      	bge.n	8002cd0 <__swhatbuf_r+0x24>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002cc4:	602a      	str	r2, [r5, #0]
 8002cc6:	061a      	lsls	r2, r3, #24
 8002cc8:	d410      	bmi.n	8002cec <__swhatbuf_r+0x40>
 8002cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cce:	e00e      	b.n	8002cee <__swhatbuf_r+0x42>
 8002cd0:	466a      	mov	r2, sp
 8002cd2:	f000 f9a3 	bl	800301c <_fstat_r>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	dbf1      	blt.n	8002cbe <__swhatbuf_r+0x12>
 8002cda:	9a01      	ldr	r2, [sp, #4]
 8002cdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ce4:	425a      	negs	r2, r3
 8002ce6:	415a      	adcs	r2, r3
 8002ce8:	602a      	str	r2, [r5, #0]
 8002cea:	e7ee      	b.n	8002cca <__swhatbuf_r+0x1e>
 8002cec:	2340      	movs	r3, #64	; 0x40
 8002cee:	2000      	movs	r0, #0
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	b016      	add	sp, #88	; 0x58
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cf8 <__smakebuf_r>:
 8002cf8:	898b      	ldrh	r3, [r1, #12]
 8002cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cfc:	079d      	lsls	r5, r3, #30
 8002cfe:	4606      	mov	r6, r0
 8002d00:	460c      	mov	r4, r1
 8002d02:	d507      	bpl.n	8002d14 <__smakebuf_r+0x1c>
 8002d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	6123      	str	r3, [r4, #16]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	6163      	str	r3, [r4, #20]
 8002d10:	b002      	add	sp, #8
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	466a      	mov	r2, sp
 8002d16:	ab01      	add	r3, sp, #4
 8002d18:	f7ff ffc8 	bl	8002cac <__swhatbuf_r>
 8002d1c:	9900      	ldr	r1, [sp, #0]
 8002d1e:	4605      	mov	r5, r0
 8002d20:	4630      	mov	r0, r6
 8002d22:	f000 f891 	bl	8002e48 <_malloc_r>
 8002d26:	b948      	cbnz	r0, 8002d3c <__smakebuf_r+0x44>
 8002d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d2c:	059a      	lsls	r2, r3, #22
 8002d2e:	d4ef      	bmi.n	8002d10 <__smakebuf_r+0x18>
 8002d30:	f023 0303 	bic.w	r3, r3, #3
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	81a3      	strh	r3, [r4, #12]
 8002d3a:	e7e3      	b.n	8002d04 <__smakebuf_r+0xc>
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <__smakebuf_r+0x7c>)
 8002d3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	6020      	str	r0, [r4, #0]
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	81a3      	strh	r3, [r4, #12]
 8002d4a:	9b00      	ldr	r3, [sp, #0]
 8002d4c:	6120      	str	r0, [r4, #16]
 8002d4e:	6163      	str	r3, [r4, #20]
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	b15b      	cbz	r3, 8002d6c <__smakebuf_r+0x74>
 8002d54:	4630      	mov	r0, r6
 8002d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d5a:	f000 f971 	bl	8003040 <_isatty_r>
 8002d5e:	b128      	cbz	r0, 8002d6c <__smakebuf_r+0x74>
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	f023 0303 	bic.w	r3, r3, #3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	81a3      	strh	r3, [r4, #12]
 8002d6c:	89a0      	ldrh	r0, [r4, #12]
 8002d6e:	4305      	orrs	r5, r0
 8002d70:	81a5      	strh	r5, [r4, #12]
 8002d72:	e7cd      	b.n	8002d10 <__smakebuf_r+0x18>
 8002d74:	08002b05 	.word	0x08002b05

08002d78 <_free_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	d040      	beq.n	8002e02 <_free_r+0x8a>
 8002d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d84:	1f0c      	subs	r4, r1, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfb8      	it	lt
 8002d8a:	18e4      	addlt	r4, r4, r3
 8002d8c:	f000 f97a 	bl	8003084 <__malloc_lock>
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <_free_r+0x8c>)
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	b933      	cbnz	r3, 8002da4 <_free_r+0x2c>
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	6014      	str	r4, [r2, #0]
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da0:	f000 b976 	b.w	8003090 <__malloc_unlock>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d908      	bls.n	8002dba <_free_r+0x42>
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	1821      	adds	r1, r4, r0
 8002dac:	428b      	cmp	r3, r1
 8002dae:	bf01      	itttt	eq
 8002db0:	6819      	ldreq	r1, [r3, #0]
 8002db2:	685b      	ldreq	r3, [r3, #4]
 8002db4:	1809      	addeq	r1, r1, r0
 8002db6:	6021      	streq	r1, [r4, #0]
 8002db8:	e7ed      	b.n	8002d96 <_free_r+0x1e>
 8002dba:	461a      	mov	r2, r3
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b10b      	cbz	r3, 8002dc4 <_free_r+0x4c>
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d9fa      	bls.n	8002dba <_free_r+0x42>
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	1850      	adds	r0, r2, r1
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d10b      	bne.n	8002de4 <_free_r+0x6c>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4401      	add	r1, r0
 8002dd0:	1850      	adds	r0, r2, r1
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	d1e0      	bne.n	8002d9a <_free_r+0x22>
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4401      	add	r1, r0
 8002dde:	6011      	str	r1, [r2, #0]
 8002de0:	6053      	str	r3, [r2, #4]
 8002de2:	e7da      	b.n	8002d9a <_free_r+0x22>
 8002de4:	d902      	bls.n	8002dec <_free_r+0x74>
 8002de6:	230c      	movs	r3, #12
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	e7d6      	b.n	8002d9a <_free_r+0x22>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6054      	str	r4, [r2, #4]
 8002e00:	e7cb      	b.n	8002d9a <_free_r+0x22>
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	200002e8 	.word	0x200002e8

08002e08 <sbrk_aligned>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0e      	ldr	r6, [pc, #56]	; (8002e44 <sbrk_aligned+0x3c>)
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6831      	ldr	r1, [r6, #0]
 8002e10:	4605      	mov	r5, r0
 8002e12:	b911      	cbnz	r1, 8002e1a <sbrk_aligned+0x12>
 8002e14:	f000 f88c 	bl	8002f30 <_sbrk_r>
 8002e18:	6030      	str	r0, [r6, #0]
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f887 	bl	8002f30 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d00a      	beq.n	8002e3c <sbrk_aligned+0x34>
 8002e26:	1cc4      	adds	r4, r0, #3
 8002e28:	f024 0403 	bic.w	r4, r4, #3
 8002e2c:	42a0      	cmp	r0, r4
 8002e2e:	d007      	beq.n	8002e40 <sbrk_aligned+0x38>
 8002e30:	1a21      	subs	r1, r4, r0
 8002e32:	4628      	mov	r0, r5
 8002e34:	f000 f87c 	bl	8002f30 <_sbrk_r>
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d101      	bne.n	8002e40 <sbrk_aligned+0x38>
 8002e3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e40:	4620      	mov	r0, r4
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	200002ec 	.word	0x200002ec

08002e48 <_malloc_r>:
 8002e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4c:	1ccd      	adds	r5, r1, #3
 8002e4e:	f025 0503 	bic.w	r5, r5, #3
 8002e52:	3508      	adds	r5, #8
 8002e54:	2d0c      	cmp	r5, #12
 8002e56:	bf38      	it	cc
 8002e58:	250c      	movcc	r5, #12
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	db01      	blt.n	8002e64 <_malloc_r+0x1c>
 8002e60:	42a9      	cmp	r1, r5
 8002e62:	d905      	bls.n	8002e70 <_malloc_r+0x28>
 8002e64:	230c      	movs	r3, #12
 8002e66:	2600      	movs	r6, #0
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e70:	4e2e      	ldr	r6, [pc, #184]	; (8002f2c <_malloc_r+0xe4>)
 8002e72:	f000 f907 	bl	8003084 <__malloc_lock>
 8002e76:	6833      	ldr	r3, [r6, #0]
 8002e78:	461c      	mov	r4, r3
 8002e7a:	bb34      	cbnz	r4, 8002eca <_malloc_r+0x82>
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f7ff ffc2 	bl	8002e08 <sbrk_aligned>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	4604      	mov	r4, r0
 8002e88:	d14d      	bne.n	8002f26 <_malloc_r+0xde>
 8002e8a:	6834      	ldr	r4, [r6, #0]
 8002e8c:	4626      	mov	r6, r4
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d140      	bne.n	8002f14 <_malloc_r+0xcc>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	4631      	mov	r1, r6
 8002e96:	4638      	mov	r0, r7
 8002e98:	eb04 0803 	add.w	r8, r4, r3
 8002e9c:	f000 f848 	bl	8002f30 <_sbrk_r>
 8002ea0:	4580      	cmp	r8, r0
 8002ea2:	d13a      	bne.n	8002f1a <_malloc_r+0xd2>
 8002ea4:	6821      	ldr	r1, [r4, #0]
 8002ea6:	3503      	adds	r5, #3
 8002ea8:	1a6d      	subs	r5, r5, r1
 8002eaa:	f025 0503 	bic.w	r5, r5, #3
 8002eae:	3508      	adds	r5, #8
 8002eb0:	2d0c      	cmp	r5, #12
 8002eb2:	bf38      	it	cc
 8002eb4:	250c      	movcc	r5, #12
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	4629      	mov	r1, r5
 8002eba:	f7ff ffa5 	bl	8002e08 <sbrk_aligned>
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d02b      	beq.n	8002f1a <_malloc_r+0xd2>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	442b      	add	r3, r5
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	e00e      	b.n	8002ee8 <_malloc_r+0xa0>
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	1b52      	subs	r2, r2, r5
 8002ece:	d41e      	bmi.n	8002f0e <_malloc_r+0xc6>
 8002ed0:	2a0b      	cmp	r2, #11
 8002ed2:	d916      	bls.n	8002f02 <_malloc_r+0xba>
 8002ed4:	1961      	adds	r1, r4, r5
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	6025      	str	r5, [r4, #0]
 8002eda:	bf18      	it	ne
 8002edc:	6059      	strne	r1, [r3, #4]
 8002ede:	6863      	ldr	r3, [r4, #4]
 8002ee0:	bf08      	it	eq
 8002ee2:	6031      	streq	r1, [r6, #0]
 8002ee4:	5162      	str	r2, [r4, r5]
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	4638      	mov	r0, r7
 8002eea:	f104 060b 	add.w	r6, r4, #11
 8002eee:	f000 f8cf 	bl	8003090 <__malloc_unlock>
 8002ef2:	f026 0607 	bic.w	r6, r6, #7
 8002ef6:	1d23      	adds	r3, r4, #4
 8002ef8:	1af2      	subs	r2, r6, r3
 8002efa:	d0b6      	beq.n	8002e6a <_malloc_r+0x22>
 8002efc:	1b9b      	subs	r3, r3, r6
 8002efe:	50a3      	str	r3, [r4, r2]
 8002f00:	e7b3      	b.n	8002e6a <_malloc_r+0x22>
 8002f02:	6862      	ldr	r2, [r4, #4]
 8002f04:	42a3      	cmp	r3, r4
 8002f06:	bf0c      	ite	eq
 8002f08:	6032      	streq	r2, [r6, #0]
 8002f0a:	605a      	strne	r2, [r3, #4]
 8002f0c:	e7ec      	b.n	8002ee8 <_malloc_r+0xa0>
 8002f0e:	4623      	mov	r3, r4
 8002f10:	6864      	ldr	r4, [r4, #4]
 8002f12:	e7b2      	b.n	8002e7a <_malloc_r+0x32>
 8002f14:	4634      	mov	r4, r6
 8002f16:	6876      	ldr	r6, [r6, #4]
 8002f18:	e7b9      	b.n	8002e8e <_malloc_r+0x46>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	f000 f8b6 	bl	8003090 <__malloc_unlock>
 8002f24:	e7a1      	b.n	8002e6a <_malloc_r+0x22>
 8002f26:	6025      	str	r5, [r4, #0]
 8002f28:	e7de      	b.n	8002ee8 <_malloc_r+0xa0>
 8002f2a:	bf00      	nop
 8002f2c:	200002e8 	.word	0x200002e8

08002f30 <_sbrk_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d05      	ldr	r5, [pc, #20]	; (8002f4c <_sbrk_r+0x1c>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	f7fd fd56 	bl	80009ec <_sbrk>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_sbrk_r+0x1a>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_sbrk_r+0x1a>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	200002f0 	.word	0x200002f0

08002f50 <__sread>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	460c      	mov	r4, r1
 8002f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f58:	f000 f8a0 	bl	800309c <_read_r>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	bfab      	itete	ge
 8002f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f62:	89a3      	ldrhlt	r3, [r4, #12]
 8002f64:	181b      	addge	r3, r3, r0
 8002f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f6a:	bfac      	ite	ge
 8002f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f6e:	81a3      	strhlt	r3, [r4, #12]
 8002f70:	bd10      	pop	{r4, pc}

08002f72 <__swrite>:
 8002f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f76:	461f      	mov	r7, r3
 8002f78:	898b      	ldrh	r3, [r1, #12]
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	460c      	mov	r4, r1
 8002f80:	4616      	mov	r6, r2
 8002f82:	d505      	bpl.n	8002f90 <__swrite+0x1e>
 8002f84:	2302      	movs	r3, #2
 8002f86:	2200      	movs	r2, #0
 8002f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8c:	f000 f868 	bl	8003060 <_lseek_r>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	4632      	mov	r2, r6
 8002f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f98:	81a3      	strh	r3, [r4, #12]
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa6:	f000 b817 	b.w	8002fd8 <_write_r>

08002faa <__sseek>:
 8002faa:	b510      	push	{r4, lr}
 8002fac:	460c      	mov	r4, r1
 8002fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb2:	f000 f855 	bl	8003060 <_lseek_r>
 8002fb6:	1c43      	adds	r3, r0, #1
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	bf15      	itete	ne
 8002fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002fc6:	81a3      	strheq	r3, [r4, #12]
 8002fc8:	bf18      	it	ne
 8002fca:	81a3      	strhne	r3, [r4, #12]
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <__sclose>:
 8002fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd2:	f000 b813 	b.w	8002ffc <_close_r>
	...

08002fd8 <_write_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4d05      	ldr	r5, [pc, #20]	; (8002ff8 <_write_r+0x20>)
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd f8d6 	bl	8000198 <_write>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_write_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_write_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	200002f0 	.word	0x200002f0

08002ffc <_close_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	2300      	movs	r3, #0
 8003000:	4d05      	ldr	r5, [pc, #20]	; (8003018 <_close_r+0x1c>)
 8003002:	4604      	mov	r4, r0
 8003004:	4608      	mov	r0, r1
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	f7fd fcbf 	bl	800098a <_close>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_close_r+0x1a>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	b103      	cbz	r3, 8003016 <_close_r+0x1a>
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	200002f0 	.word	0x200002f0

0800301c <_fstat_r>:
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	2300      	movs	r3, #0
 8003020:	4d06      	ldr	r5, [pc, #24]	; (800303c <_fstat_r+0x20>)
 8003022:	4604      	mov	r4, r0
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	f7fd fcb9 	bl	80009a0 <_fstat>
 800302e:	1c43      	adds	r3, r0, #1
 8003030:	d102      	bne.n	8003038 <_fstat_r+0x1c>
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	b103      	cbz	r3, 8003038 <_fstat_r+0x1c>
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	bd38      	pop	{r3, r4, r5, pc}
 800303a:	bf00      	nop
 800303c:	200002f0 	.word	0x200002f0

08003040 <_isatty_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	2300      	movs	r3, #0
 8003044:	4d05      	ldr	r5, [pc, #20]	; (800305c <_isatty_r+0x1c>)
 8003046:	4604      	mov	r4, r0
 8003048:	4608      	mov	r0, r1
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	f7fd fcb7 	bl	80009be <_isatty>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_isatty_r+0x1a>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_isatty_r+0x1a>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	200002f0 	.word	0x200002f0

08003060 <_lseek_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4604      	mov	r4, r0
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	2200      	movs	r2, #0
 800306a:	4d05      	ldr	r5, [pc, #20]	; (8003080 <_lseek_r+0x20>)
 800306c:	602a      	str	r2, [r5, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f7fd fcaf 	bl	80009d2 <_lseek>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_lseek_r+0x1e>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_lseek_r+0x1e>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	200002f0 	.word	0x200002f0

08003084 <__malloc_lock>:
 8003084:	4801      	ldr	r0, [pc, #4]	; (800308c <__malloc_lock+0x8>)
 8003086:	f7ff be0f 	b.w	8002ca8 <__retarget_lock_acquire_recursive>
 800308a:	bf00      	nop
 800308c:	200002e4 	.word	0x200002e4

08003090 <__malloc_unlock>:
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <__malloc_unlock+0x8>)
 8003092:	f7ff be0a 	b.w	8002caa <__retarget_lock_release_recursive>
 8003096:	bf00      	nop
 8003098:	200002e4 	.word	0x200002e4

0800309c <_read_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	2200      	movs	r2, #0
 80030a6:	4d05      	ldr	r5, [pc, #20]	; (80030bc <_read_r+0x20>)
 80030a8:	602a      	str	r2, [r5, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f7fd fc50 	bl	8000950 <_read>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_read_r+0x1e>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_read_r+0x1e>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	200002f0 	.word	0x200002f0

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
