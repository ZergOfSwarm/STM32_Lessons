
SDIO_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08009df4  08009df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3a8  0800a3a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3a8  0800a3a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b0  0800a3b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000043b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004424  20004424  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bbe1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000365b  00000000  00000000  0003bc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  00040670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024029  00000000  00000000  000418d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186c3  00000000  00000000  00065901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d27ff  00000000  00000000  0007dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001507c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005704  00000000  00000000  00150818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ddc 	.word	0x08009ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009ddc 	.word	0x08009ddc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fb19 	bl	80001e4 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Send_Uart+0x28>)
 8000bbe:	f004 f9c0 	bl	8004f42 <HAL_UART_Transmit>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20002318 	.word	0x20002318

08000bd0 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <Mount_SD+0x38>)
 8000bde:	f007 fb07 	bl	80081f0 <f_mount>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <Mount_SD+0x3c>)
 8000be8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <Mount_SD+0x3c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <Mount_SD+0x2a>
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <Mount_SD+0x40>)
 8000bf4:	f7ff ffd6 	bl	8000ba4 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000bf8:	e002      	b.n	8000c00 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <Mount_SD+0x44>)
 8000bfc:	f7ff ffd2 	bl	8000ba4 <Send_Uart>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000f4 	.word	0x200000f4
 8000c0c:	20001138 	.word	0x20001138
 8000c10:	08009df4 	.word	0x08009df4
 8000c14:	08009e18 	.word	0x08009e18

08000c18 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2000      	movs	r0, #0
 8000c26:	f007 fae3 	bl	80081f0 <f_mount>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Unmount_SD+0x38>)
 8000c30:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <Unmount_SD+0x38>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d103      	bne.n	8000c42 <Unmount_SD+0x2a>
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <Unmount_SD+0x3c>)
 8000c3c:	f7ff ffb2 	bl	8000ba4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000c40:	e002      	b.n	8000c48 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Unmount_SD+0x40>)
 8000c44:	f7ff ffae 	bl	8000ba4 <Send_Uart>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20001138 	.word	0x20001138
 8000c54:	08009e3c 	.word	0x08009e3c
 8000c58:	08009e64 	.word	0x08009e64

08000c5c <Scan_SD>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD (char* pat)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b092      	sub	sp, #72	; 0x48
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c64:	2014      	movs	r0, #20
 8000c66:	f008 fc73 	bl	8009550 <malloc>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
    sprintf (path, "%s",pat);
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4940      	ldr	r1, [pc, #256]	; (8000d74 <Scan_SD+0x118>)
 8000c72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c74:	f008 fd3e 	bl	80096f4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f008 f863 	bl	8008d4a <f_opendir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <Scan_SD+0x11c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <Scan_SD+0x11c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d165      	bne.n	8000d60 <Scan_SD+0x104>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4938      	ldr	r1, [pc, #224]	; (8000d7c <Scan_SD+0x120>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 f8ee 	bl	8008e7c <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <Scan_SD+0x11c>)
 8000ca6:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <Scan_SD+0x11c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d152      	bne.n	8000d56 <Scan_SD+0xfa>
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <Scan_SD+0x120>)
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d04e      	beq.n	8000d56 <Scan_SD+0xfa>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <Scan_SD+0x120>)
 8000cba:	7a1b      	ldrb	r3, [r3, #8]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d033      	beq.n	8000d2c <Scan_SD+0xd0>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000cc4:	492e      	ldr	r1, [pc, #184]	; (8000d80 <Scan_SD+0x124>)
 8000cc6:	482f      	ldr	r0, [pc, #188]	; (8000d84 <Scan_SD+0x128>)
 8000cc8:	f7ff fa82 	bl	80001d0 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d03e      	beq.n	8000d50 <Scan_SD+0xf4>
            	char *buf = malloc(30*sizeof(char));
 8000cd2:	201e      	movs	r0, #30
 8000cd4:	f008 fc3c 	bl	8009550 <malloc>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
            	sprintf (buf, "Dir: %s\r\n", fno.fname);
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <Scan_SD+0x124>)
 8000cde:	492a      	ldr	r1, [pc, #168]	; (8000d88 <Scan_SD+0x12c>)
 8000ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ce2:	f008 fd07 	bl	80096f4 <siprintf>
            	Send_Uart(buf);
 8000ce6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ce8:	f7ff ff5c 	bl	8000ba4 <Send_Uart>
            	free(buf);
 8000cec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000cee:	f008 fc37 	bl	8009560 <free>
                i = strlen(path);
 8000cf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cf4:	f7ff fa76 	bl	80001e4 <strlen>
 8000cf8:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <Scan_SD+0x124>)
 8000d02:	4922      	ldr	r1, [pc, #136]	; (8000d8c <Scan_SD+0x130>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 fcf5 	bl	80096f4 <siprintf>
                fresult = Scan_SD(path);                     /* Enter the directory */
 8000d0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d0c:	f7ff ffa6 	bl	8000c5c <Scan_SD>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <Scan_SD+0x11c>)
 8000d16:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <Scan_SD+0x11c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d119      	bne.n	8000d54 <Scan_SD+0xf8>
                path[i] = 0;
 8000d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d24:	4413      	add	r3, r2
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e7b3      	b.n	8000c94 <Scan_SD+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d2c:	201e      	movs	r0, #30
 8000d2e:	f008 fc0f 	bl	8009550 <malloc>
 8000d32:	4603      	mov	r3, r0
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
               sprintf(buf,"File: %s/%s\n", path, fno.fname);
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <Scan_SD+0x124>)
 8000d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d3a:	4915      	ldr	r1, [pc, #84]	; (8000d90 <Scan_SD+0x134>)
 8000d3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d3e:	f008 fcd9 	bl	80096f4 <siprintf>
               Send_Uart(buf);
 8000d42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d44:	f7ff ff2e 	bl	8000ba4 <Send_Uart>
               free(buf);
 8000d48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d4a:	f008 fc09 	bl	8009560 <free>
 8000d4e:	e7a1      	b.n	8000c94 <Scan_SD+0x38>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000d50:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000d52:	e79f      	b.n	8000c94 <Scan_SD+0x38>
                if (fresult != FR_OK) break;
 8000d54:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f008 f868 	bl	8008e30 <f_closedir>
    }
    free(path);
 8000d60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d62:	f008 fbfd 	bl	8009560 <free>
    return fresult;
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <Scan_SD+0x11c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3748      	adds	r7, #72	; 0x48
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08009e88 	.word	0x08009e88
 8000d78:	20001138 	.word	0x20001138
 8000d7c:	200000dc 	.word	0x200000dc
 8000d80:	200000e5 	.word	0x200000e5
 8000d84:	08009e8c 	.word	0x08009e8c
 8000d88:	08009e98 	.word	0x08009e98
 8000d8c:	08009ea4 	.word	0x08009ea4
 8000d90:	08009ea8 	.word	0x08009ea8

08000d94 <Format_SD>:

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000d9a:	2014      	movs	r0, #20
 8000d9c:	f008 fbd8 	bl	8009550 <malloc>
 8000da0:	4603      	mov	r3, r0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <Format_SD+0xb4>)
 8000da6:	4929      	ldr	r1, [pc, #164]	; (8000e4c <Format_SD+0xb8>)
 8000da8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000daa:	f008 fca3 	bl	80096f4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 ffc9 	bl	8008d4a <f_opendir>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <Format_SD+0xbc>)
 8000dbe:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <Format_SD+0xbc>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d136      	bne.n	8000e36 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4922      	ldr	r1, [pc, #136]	; (8000e54 <Format_SD+0xc0>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f008 f855 	bl	8008e7c <f_readdir>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <Format_SD+0xbc>)
 8000dd8:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <Format_SD+0xbc>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d125      	bne.n	8000e2e <Format_SD+0x9a>
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <Format_SD+0xc0>)
 8000de4:	7a5b      	ldrb	r3, [r3, #9]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d021      	beq.n	8000e2e <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <Format_SD+0xc0>)
 8000dec:	7a1b      	ldrb	r3, [r3, #8]
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d011      	beq.n	8000e1a <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000df6:	4918      	ldr	r1, [pc, #96]	; (8000e58 <Format_SD+0xc4>)
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <Format_SD+0xc8>)
 8000dfa:	f7ff f9e9 	bl	80001d0 <strcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d012      	beq.n	8000e2a <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <Format_SD+0xc4>)
 8000e06:	f008 f964 	bl	80090d2 <f_unlink>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <Format_SD+0xbc>)
 8000e10:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <Format_SD+0xbc>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	e7d6      	b.n	8000dc8 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <Format_SD+0xc4>)
 8000e1c:	f008 f959 	bl	80090d2 <f_unlink>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <Format_SD+0xbc>)
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e7ce      	b.n	8000dc8 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000e2a:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e2c:	e7cc      	b.n	8000dc8 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f007 fffd 	bl	8008e30 <f_closedir>
    }
    free(path);
 8000e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e38:	f008 fb92 	bl	8009560 <free>
    return fresult;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <Format_SD+0xbc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08009eb8 	.word	0x08009eb8
 8000e4c:	08009e88 	.word	0x08009e88
 8000e50:	20001138 	.word	0x20001138
 8000e54:	200000dc 	.word	0x200000dc
 8000e58:	200000e5 	.word	0x200000e5
 8000e5c:	08009e8c 	.word	0x08009e8c

08000e60 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000e68:	4953      	ldr	r1, [pc, #332]	; (8000fb8 <Read_File+0x158>)
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f008 f843 	bl	8008ef6 <f_stat>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <Read_File+0x15c>)
 8000e76:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000e78:	4b50      	ldr	r3, [pc, #320]	; (8000fbc <Read_File+0x15c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d012      	beq.n	8000ea6 <Read_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f008 fb65 	bl	8009550 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	494c      	ldr	r1, [pc, #304]	; (8000fc0 <Read_File+0x160>)
 8000e8e:	68b8      	ldr	r0, [r7, #8]
 8000e90:	f008 fc30 	bl	80096f4 <siprintf>
		Send_Uart (buf);
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f7ff fe85 	bl	8000ba4 <Send_Uart>
		free(buf);
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f008 fb60 	bl	8009560 <free>
	    return fresult;
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <Read_File+0x15c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	e084      	b.n	8000fb0 <Read_File+0x150>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4846      	ldr	r0, [pc, #280]	; (8000fc4 <Read_File+0x164>)
 8000eac:	f007 f9e6 	bl	800827c <f_open>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <Read_File+0x15c>)
 8000eb6:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000eb8:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <Read_File+0x15c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d015      	beq.n	8000eec <Read_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f008 fb45 	bl	8009550 <malloc>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <Read_File+0x15c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	493d      	ldr	r1, [pc, #244]	; (8000fc8 <Read_File+0x168>)
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f008 fc0d 	bl	80096f4 <siprintf>
		    Send_Uart(buf);
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fe62 	bl	8000ba4 <Send_Uart>
		    free(buf);
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f008 fb3d 	bl	8009560 <free>
		    return fresult;
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <Read_File+0x15c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	e061      	b.n	8000fb0 <Read_File+0x150>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8000eec:	2004      	movs	r0, #4
 8000eee:	f008 fb2f 	bl	8009550 <malloc>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <Read_File+0x164>)
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <Read_File+0x16c>)
 8000efc:	69f9      	ldr	r1, [r7, #28]
 8000efe:	4831      	ldr	r0, [pc, #196]	; (8000fc4 <Read_File+0x164>)
 8000f00:	f007 fb88 	bl	8008614 <f_read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <Read_File+0x15c>)
 8000f0a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <Read_File+0x15c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d016      	beq.n	8000f42 <Read_File+0xe2>
		{
			char *buf = malloc(100*sizeof(char));
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f008 fb1b 	bl	8009550 <malloc>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]
			free(buffer);
 8000f1e:	69f8      	ldr	r0, [r7, #28]
 8000f20:	f008 fb1e 	bl	8009560 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <Read_File+0x15c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4928      	ldr	r1, [pc, #160]	; (8000fd0 <Read_File+0x170>)
 8000f2e:	6938      	ldr	r0, [r7, #16]
 8000f30:	f008 fbe0 	bl	80096f4 <siprintf>
		  	Send_Uart(buffer);
 8000f34:	69f8      	ldr	r0, [r7, #28]
 8000f36:	f7ff fe35 	bl	8000ba4 <Send_Uart>
		  	free(buf);
 8000f3a:	6938      	ldr	r0, [r7, #16]
 8000f3c:	f008 fb10 	bl	8009560 <free>
 8000f40:	e034      	b.n	8000fac <Read_File+0x14c>
		}

		else
		{
			Send_Uart(buffer);
 8000f42:	69f8      	ldr	r0, [r7, #28]
 8000f44:	f7ff fe2e 	bl	8000ba4 <Send_Uart>
			free(buffer);
 8000f48:	69f8      	ldr	r0, [r7, #28]
 8000f4a:	f008 fb09 	bl	8009560 <free>

			/* Close file */
			fresult = f_close(&fil);
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <Read_File+0x164>)
 8000f50:	f007 fed1 	bl	8008cf6 <f_close>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <Read_File+0x15c>)
 8000f5a:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <Read_File+0x15c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <Read_File+0x12c>
			{
				char *buf = malloc(100*sizeof(char));
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f008 faf3 	bl	8009550 <malloc>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <Read_File+0x15c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4917      	ldr	r1, [pc, #92]	; (8000fd4 <Read_File+0x174>)
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f008 fbbb 	bl	80096f4 <siprintf>
				Send_Uart(buf);
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff fe10 	bl	8000ba4 <Send_Uart>
				free(buf);
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f008 faeb 	bl	8009560 <free>
 8000f8a:	e00f      	b.n	8000fac <Read_File+0x14c>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f008 fadf 	bl	8009550 <malloc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	490f      	ldr	r1, [pc, #60]	; (8000fd8 <Read_File+0x178>)
 8000f9a:	69b8      	ldr	r0, [r7, #24]
 8000f9c:	f008 fbaa 	bl	80096f4 <siprintf>
				Send_Uart(buf);
 8000fa0:	69b8      	ldr	r0, [r7, #24]
 8000fa2:	f7ff fdff 	bl	8000ba4 <Send_Uart>
				free(buf);
 8000fa6:	69b8      	ldr	r0, [r7, #24]
 8000fa8:	f008 fada 	bl	8009560 <free>
			}
		}
	    return fresult;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <Read_File+0x15c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200000dc 	.word	0x200000dc
 8000fbc:	20001138 	.word	0x20001138
 8000fc0:	08009fa0 	.word	0x08009fa0
 8000fc4:	20001140 	.word	0x20001140
 8000fc8:	08009edc 	.word	0x08009edc
 8000fcc:	20001128 	.word	0x20001128
 8000fd0:	08009fc4 	.word	0x08009fc4
 8000fd4:	08009fec 	.word	0x08009fec
 8000fd8:	0800a014 	.word	0x0800a014

08000fdc <Create_File>:

FRESULT Create_File (char *name)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000fe4:	4943      	ldr	r1, [pc, #268]	; (80010f4 <Create_File+0x118>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f007 ff85 	bl	8008ef6 <f_stat>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <Create_File+0x11c>)
 8000ff2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <Create_File+0x11c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d112      	bne.n	8001022 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f008 faa7 	bl	8009550 <malloc>
 8001002:	4603      	mov	r3, r0
 8001004:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	493c      	ldr	r1, [pc, #240]	; (80010fc <Create_File+0x120>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f008 fb72 	bl	80096f4 <siprintf>
		Send_Uart(buf);
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff fdc7 	bl	8000ba4 <Send_Uart>
		free(buf);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f008 faa2 	bl	8009560 <free>
	    return fresult;
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <Create_File+0x11c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e063      	b.n	80010ea <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001022:	220b      	movs	r2, #11
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4836      	ldr	r0, [pc, #216]	; (8001100 <Create_File+0x124>)
 8001028:	f007 f928 	bl	800827c <f_open>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <Create_File+0x11c>)
 8001032:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <Create_File+0x11c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d015      	beq.n	8001068 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	f008 fa87 	bl	8009550 <malloc>
 8001042:	4603      	mov	r3, r0
 8001044:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <Create_File+0x11c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	492d      	ldr	r1, [pc, #180]	; (8001104 <Create_File+0x128>)
 8001050:	6938      	ldr	r0, [r7, #16]
 8001052:	f008 fb4f 	bl	80096f4 <siprintf>
			Send_Uart(buf);
 8001056:	6938      	ldr	r0, [r7, #16]
 8001058:	f7ff fda4 	bl	8000ba4 <Send_Uart>
			free(buf);
 800105c:	6938      	ldr	r0, [r7, #16]
 800105e:	f008 fa7f 	bl	8009560 <free>
		    return fresult;
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <Create_File+0x11c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	e040      	b.n	80010ea <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f008 fa71 	bl	8009550 <malloc>
 800106e:	4603      	mov	r3, r0
 8001070:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4924      	ldr	r1, [pc, #144]	; (8001108 <Create_File+0x12c>)
 8001076:	69f8      	ldr	r0, [r7, #28]
 8001078:	f008 fb3c 	bl	80096f4 <siprintf>
			Send_Uart(buf);
 800107c:	69f8      	ldr	r0, [r7, #28]
 800107e:	f7ff fd91 	bl	8000ba4 <Send_Uart>
			free(buf);
 8001082:	69f8      	ldr	r0, [r7, #28]
 8001084:	f008 fa6c 	bl	8009560 <free>
		}

		fresult = f_close(&fil);
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <Create_File+0x124>)
 800108a:	f007 fe34 	bl	8008cf6 <f_close>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <Create_File+0x11c>)
 8001094:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <Create_File+0x11c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d013      	beq.n	80010c6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800109e:	2064      	movs	r0, #100	; 0x64
 80010a0:	f008 fa56 	bl	8009550 <malloc>
 80010a4:	4603      	mov	r3, r0
 80010a6:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <Create_File+0x11c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <Create_File+0x130>)
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f008 fb1e 	bl	80096f4 <siprintf>
			Send_Uart(buf);
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff fd73 	bl	8000ba4 <Send_Uart>
			free(buf);
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f008 fa4e 	bl	8009560 <free>
 80010c4:	e00f      	b.n	80010e6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f008 fa42 	bl	8009550 <malloc>
 80010cc:	4603      	mov	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	490f      	ldr	r1, [pc, #60]	; (8001110 <Create_File+0x134>)
 80010d4:	69b8      	ldr	r0, [r7, #24]
 80010d6:	f008 fb0d 	bl	80096f4 <siprintf>
			Send_Uart(buf);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f7ff fd62 	bl	8000ba4 <Send_Uart>
			free(buf);
 80010e0:	69b8      	ldr	r0, [r7, #24]
 80010e2:	f008 fa3d 	bl	8009560 <free>
		}
	}
    return fresult;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <Create_File+0x11c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000dc 	.word	0x200000dc
 80010f8:	20001138 	.word	0x20001138
 80010fc:	0800a034 	.word	0x0800a034
 8001100:	20001140 	.word	0x20001140
 8001104:	0800a06c 	.word	0x0800a06c
 8001108:	0800a094 	.word	0x0800a094
 800110c:	0800a0d4 	.word	0x0800a0d4
 8001110:	0800a014 	.word	0x0800a014

08001114 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800111e:	4956      	ldr	r1, [pc, #344]	; (8001278 <Update_File+0x164>)
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f007 fee8 	bl	8008ef6 <f_stat>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <Update_File+0x168>)
 800112c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800112e:	4b53      	ldr	r3, [pc, #332]	; (800127c <Update_File+0x168>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d012      	beq.n	800115c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f008 fa0a 	bl	8009550 <malloc>
 800113c:	4603      	mov	r3, r0
 800113e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	494f      	ldr	r1, [pc, #316]	; (8001280 <Update_File+0x16c>)
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f008 fad5 	bl	80096f4 <siprintf>
		Send_Uart (buf);
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f7ff fd2a 	bl	8000ba4 <Send_Uart>
		free(buf);
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f008 fa05 	bl	8009560 <free>
	    return fresult;
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <Update_File+0x168>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	e088      	b.n	800126e <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800115c:	2232      	movs	r2, #50	; 0x32
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4848      	ldr	r0, [pc, #288]	; (8001284 <Update_File+0x170>)
 8001162:	f007 f88b 	bl	800827c <f_open>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <Update_File+0x168>)
 800116c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <Update_File+0x168>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d015      	beq.n	80011a2 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001176:	2064      	movs	r0, #100	; 0x64
 8001178:	f008 f9ea 	bl	8009550 <malloc>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <Update_File+0x168>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	493f      	ldr	r1, [pc, #252]	; (8001288 <Update_File+0x174>)
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f008 fab2 	bl	80096f4 <siprintf>
	    	Send_Uart(buf);
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff fd07 	bl	8000ba4 <Send_Uart>
	        free(buf);
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f008 f9e2 	bl	8009560 <free>
	        return fresult;
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <Update_File+0x168>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	e065      	b.n	800126e <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f7ff f81e 	bl	80001e4 <strlen>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <Update_File+0x178>)
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4835      	ldr	r0, [pc, #212]	; (8001284 <Update_File+0x170>)
 80011b0:	f007 fb8f 	bl	80088d2 <f_write>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <Update_File+0x168>)
 80011ba:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <Update_File+0x168>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011c4:	2064      	movs	r0, #100	; 0x64
 80011c6:	f008 f9c3 	bl	8009550 <malloc>
 80011ca:	4603      	mov	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <Update_File+0x168>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	492e      	ldr	r1, [pc, #184]	; (8001290 <Update_File+0x17c>)
 80011d8:	69b8      	ldr	r0, [r7, #24]
 80011da:	f008 fa8b 	bl	80096f4 <siprintf>
	    	Send_Uart(buf);
 80011de:	69b8      	ldr	r0, [r7, #24]
 80011e0:	f7ff fce0 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f008 f9bb 	bl	8009560 <free>
 80011ea:	e00f      	b.n	800120c <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011ec:	2064      	movs	r0, #100	; 0x64
 80011ee:	f008 f9af 	bl	8009550 <malloc>
 80011f2:	4603      	mov	r3, r0
 80011f4:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4926      	ldr	r1, [pc, #152]	; (8001294 <Update_File+0x180>)
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f008 fa7a 	bl	80096f4 <siprintf>
	    	Send_Uart(buf);
 8001200:	69f8      	ldr	r0, [r7, #28]
 8001202:	f7ff fccf 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 8001206:	69f8      	ldr	r0, [r7, #28]
 8001208:	f008 f9aa 	bl	8009560 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800120c:	481d      	ldr	r0, [pc, #116]	; (8001284 <Update_File+0x170>)
 800120e:	f007 fd72 	bl	8008cf6 <f_close>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <Update_File+0x168>)
 8001218:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <Update_File+0x168>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d013      	beq.n	800124a <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f008 f994 	bl	8009550 <malloc>
 8001228:	4603      	mov	r3, r0
 800122a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <Update_File+0x168>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4918      	ldr	r1, [pc, #96]	; (8001298 <Update_File+0x184>)
 8001236:	6938      	ldr	r0, [r7, #16]
 8001238:	f008 fa5c 	bl	80096f4 <siprintf>
	    	Send_Uart(buf);
 800123c:	6938      	ldr	r0, [r7, #16]
 800123e:	f7ff fcb1 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 8001242:	6938      	ldr	r0, [r7, #16]
 8001244:	f008 f98c 	bl	8009560 <free>
 8001248:	e00f      	b.n	800126a <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800124a:	2064      	movs	r0, #100	; 0x64
 800124c:	f008 f980 	bl	8009550 <malloc>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <Update_File+0x188>)
 8001258:	6978      	ldr	r0, [r7, #20]
 800125a:	f008 fa4b 	bl	80096f4 <siprintf>
	    	Send_Uart(buf);
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff fca0 	bl	8000ba4 <Send_Uart>
	    	free(buf);
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f008 f97b 	bl	8009560 <free>
	     }
	}
    return fresult;
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <Update_File+0x168>)
 800126c:	781b      	ldrb	r3, [r3, #0]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000dc 	.word	0x200000dc
 800127c:	20001138 	.word	0x20001138
 8001280:	08009ebc 	.word	0x08009ebc
 8001284:	20001140 	.word	0x20001140
 8001288:	08009edc 	.word	0x08009edc
 800128c:	20001130 	.word	0x20001130
 8001290:	0800a0f8 	.word	0x0800a0f8
 8001294:	0800a120 	.word	0x0800a120
 8001298:	08009fec 	.word	0x08009fec
 800129c:	0800a014 	.word	0x0800a014

080012a0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f007 ffbd 	bl	8009228 <f_mkdir>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <Create_Dir+0x74>)
 80012b4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <Create_Dir+0x74>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d110      	bne.n	80012e0 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f008 f946 	bl	8009550 <malloc>
 80012c4:	4603      	mov	r3, r0
 80012c6:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4913      	ldr	r1, [pc, #76]	; (8001318 <Create_Dir+0x78>)
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f008 fa11 	bl	80096f4 <siprintf>
    	Send_Uart (buf);
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f7ff fc66 	bl	8000ba4 <Send_Uart>
    	free(buf);
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f008 f941 	bl	8009560 <free>
 80012de:	e012      	b.n	8001306 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f008 f935 	bl	8009550 <malloc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <Create_Dir+0x74>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	490a      	ldr	r1, [pc, #40]	; (800131c <Create_Dir+0x7c>)
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f008 f9fd 	bl	80096f4 <siprintf>
    	Send_Uart(buf);
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff fc52 	bl	8000ba4 <Send_Uart>
    	free(buf);
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f008 f92d 	bl	8009560 <free>
    }
    return fresult;
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <Create_Dir+0x74>)
 8001308:	781b      	ldrb	r3, [r3, #0]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20001138 	.word	0x20001138
 8001318:	0800a180 	.word	0x0800a180
 800131c:	0800a1a4 	.word	0x0800a1a4

08001320 <Check_SD_Space>:

void Check_SD_Space (void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001326:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <Check_SD_Space+0xc8>)
 8001328:	4930      	ldr	r1, [pc, #192]	; (80013ec <Check_SD_Space+0xcc>)
 800132a:	4831      	ldr	r0, [pc, #196]	; (80013f0 <Check_SD_Space+0xd0>)
 800132c:	f007 fe1c 	bl	8008f68 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <Check_SD_Space+0xc8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	3b02      	subs	r3, #2
 8001338:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <Check_SD_Space+0xc8>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	8952      	ldrh	r2, [r2, #10]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fa18 	bl	8000778 <__aeabi_ui2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <Check_SD_Space+0xd4>)
 800134e:	f7fe ffa7 	bl	80002a0 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fa87 	bl	800086c <__aeabi_d2uiz>
 800135e:	4603      	mov	r3, r0
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <Check_SD_Space+0xd8>)
 8001362:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001364:	201e      	movs	r0, #30
 8001366:	f008 f8f3 	bl	8009550 <malloc>
 800136a:	4603      	mov	r3, r0
 800136c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <Check_SD_Space+0xd8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4921      	ldr	r1, [pc, #132]	; (80013fc <Check_SD_Space+0xdc>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f008 f9bc 	bl	80096f4 <siprintf>
    Send_Uart(buf);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fc11 	bl	8000ba4 <Send_Uart>
    free(buf);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f008 f8ec 	bl	8009560 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <Check_SD_Space+0xc8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	895b      	ldrh	r3, [r3, #10]
 800138e:	461a      	mov	r2, r3
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <Check_SD_Space+0xcc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	fb03 f302 	mul.w	r3, r3, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f9ed 	bl	8000778 <__aeabi_ui2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <Check_SD_Space+0xd4>)
 80013a4:	f7fe ff7c 	bl	80002a0 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fa5c 	bl	800086c <__aeabi_d2uiz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <Check_SD_Space+0xe0>)
 80013b8:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80013ba:	201e      	movs	r0, #30
 80013bc:	f008 f8c8 	bl	8009550 <malloc>
 80013c0:	4603      	mov	r3, r0
 80013c2:	607b      	str	r3, [r7, #4]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <Check_SD_Space+0xe0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <Check_SD_Space+0xe4>)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f008 f991 	bl	80096f4 <siprintf>
    Send_Uart(buf);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fbe6 	bl	8000ba4 <Send_Uart>
    free(buf);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f008 f8c1 	bl	8009560 <free>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20001134 	.word	0x20001134
 80013ec:	200000d8 	.word	0x200000d8
 80013f0:	0800a1d0 	.word	0x0800a1d0
 80013f4:	3fe00000 	.word	0x3fe00000
 80013f8:	2000113c 	.word	0x2000113c
 80013fc:	0800a1d4 	.word	0x0800a1d4
 8001400:	2000112c 	.word	0x2000112c
 8001404:	0800a1f0 	.word	0x0800a1f0

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fc47 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f87d 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 f957 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800141a:	f000 f92d 	bl	8001678 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800141e:	f000 f8e1 	bl	80015e4 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001422:	f000 f8ff 	bl	8001624 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001426:	f004 fdc9 	bl	8005fbc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD("/");
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <main+0xdc>)
 800142c:	f7ff fbd0 	bl	8000bd0 <Mount_SD>
  Format_SD();
 8001430:	f7ff fcb0 	bl	8000d94 <Format_SD>
  Create_File("FILE1.TXT");
 8001434:	482c      	ldr	r0, [pc, #176]	; (80014e8 <main+0xe0>)
 8001436:	f7ff fdd1 	bl	8000fdc <Create_File>
  sprintf(buffer, "Zerg hello!");
 800143a:	492c      	ldr	r1, [pc, #176]	; (80014ec <main+0xe4>)
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <main+0xe8>)
 800143e:	f008 f959 	bl	80096f4 <siprintf>
  Update_File("FILE1.TXT",buffer);
 8001442:	492b      	ldr	r1, [pc, #172]	; (80014f0 <main+0xe8>)
 8001444:	4828      	ldr	r0, [pc, #160]	; (80014e8 <main+0xe0>)
 8001446:	f7ff fe65 	bl	8001114 <Update_File>
  Create_File("FILE2.TXT");
 800144a:	482a      	ldr	r0, [pc, #168]	; (80014f4 <main+0xec>)
 800144c:	f7ff fdc6 	bl	8000fdc <Create_File>
  sprintf(buffer, "Swarm hello!");
 8001450:	4929      	ldr	r1, [pc, #164]	; (80014f8 <main+0xf0>)
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <main+0xe8>)
 8001454:	f008 f94e 	bl	80096f4 <siprintf>
  Update_File("FILE2.TXT",buffer);
 8001458:	4925      	ldr	r1, [pc, #148]	; (80014f0 <main+0xe8>)
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <main+0xec>)
 800145c:	f7ff fe5a 	bl	8001114 <Update_File>
  Create_Dir("sub1"); // В названии нельзя испоьзовать символы "_"!
 8001460:	4826      	ldr	r0, [pc, #152]	; (80014fc <main+0xf4>)
 8001462:	f7ff ff1d 	bl	80012a0 <Create_Dir>
  Create_File("sub1/Zerg.txt");
 8001466:	4826      	ldr	r0, [pc, #152]	; (8001500 <main+0xf8>)
 8001468:	f7ff fdb8 	bl	8000fdc <Create_File>
  Read_File ("sub1/Zerg.txt");
 800146c:	4824      	ldr	r0, [pc, #144]	; (8001500 <main+0xf8>)
 800146e:	f7ff fcf7 	bl	8000e60 <Read_File>
  Unmount_SD("/");
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <main+0xdc>)
 8001474:	f7ff fbd0 	bl	8000c18 <Unmount_SD>

  Check_SD_Space();
 8001478:	f7ff ff52 	bl	8001320 <Check_SD_Space>
  Scan_SD ("/");
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <main+0xdc>)
 800147e:	f7ff fbed 	bl	8000c5c <Scan_SD>
	int num=1;	//initializing the variable
 8001482:	2301      	movs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while(num<=1)	//while loop with condition
 8001486:	e029      	b.n	80014dc <main+0xd4>
		{

		Mount_SD("/");
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <main+0xdc>)
 800148a:	f7ff fba1 	bl	8000bd0 <Mount_SD>
		sprintf(buffer, "Hello ---> %d\n", indx);
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <main+0xfc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	491c      	ldr	r1, [pc, #112]	; (8001508 <main+0x100>)
 8001496:	4816      	ldr	r0, [pc, #88]	; (80014f0 <main+0xe8>)
 8001498:	f008 f92c 	bl	80096f4 <siprintf>
		Update_File("FILE1.TXT", buffer);
 800149c:	4914      	ldr	r1, [pc, #80]	; (80014f0 <main+0xe8>)
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <main+0xe0>)
 80014a0:	f7ff fe38 	bl	8001114 <Update_File>
		sprintf(buffer, "world ---> %d\n", indx);
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <main+0xfc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4918      	ldr	r1, [pc, #96]	; (800150c <main+0x104>)
 80014ac:	4810      	ldr	r0, [pc, #64]	; (80014f0 <main+0xe8>)
 80014ae:	f008 f921 	bl	80096f4 <siprintf>
		Update_File("FILE2.TXT", buffer);
 80014b2:	490f      	ldr	r1, [pc, #60]	; (80014f0 <main+0xe8>)
 80014b4:	480f      	ldr	r0, [pc, #60]	; (80014f4 <main+0xec>)
 80014b6:	f7ff fe2d 	bl	8001114 <Update_File>
		Unmount_SD("/");
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <main+0xdc>)
 80014bc:	f7ff fbac 	bl	8000c18 <Unmount_SD>

		indx++;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <main+0xfc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <main+0xfc>)
 80014c8:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);
 80014ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014ce:	f000 fc29 	bl	8001d24 <HAL_Delay>
		Check_SD_Space();
 80014d2:	f7ff ff25 	bl	8001320 <Check_SD_Space>
		num++;		//incrementing operation
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3301      	adds	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
		while(num<=1)	//while loop with condition
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	ddd2      	ble.n	8001488 <main+0x80>
 80014e2:	e7fb      	b.n	80014dc <main+0xd4>
 80014e4:	0800a20c 	.word	0x0800a20c
 80014e8:	0800a210 	.word	0x0800a210
 80014ec:	0800a21c 	.word	0x0800a21c
 80014f0:	200021d0 	.word	0x200021d0
 80014f4:	0800a228 	.word	0x0800a228
 80014f8:	0800a234 	.word	0x0800a234
 80014fc:	0800a244 	.word	0x0800a244
 8001500:	0800a24c 	.word	0x0800a24c
 8001504:	2000008c 	.word	0x2000008c
 8001508:	0800a25c 	.word	0x0800a25c
 800150c:	0800a26c 	.word	0x0800a26c

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	2230      	movs	r2, #48	; 0x30
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f008 f826 	bl	8009570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <SystemClock_Config+0xcc>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <SystemClock_Config+0xcc>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <SystemClock_Config+0xcc>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <SystemClock_Config+0xd0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <SystemClock_Config+0xd0>)
 800155a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <SystemClock_Config+0xd0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001576:	2302      	movs	r3, #2
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001584:	23a8      	movs	r3, #168	; 0xa8
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001588:	2302      	movs	r3, #2
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800158c:	2307      	movs	r3, #7
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fa05 	bl	80029a4 <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a0:	f000 f8e8 	bl	8001774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2105      	movs	r1, #5
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fc66 	bl	8002e94 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ce:	f000 f8d1 	bl	8001774 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	; 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SDIO_SD_Init+0x38>)
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <MX_SDIO_SD_Init+0x3c>)
 80015ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_SDIO_SD_Init+0x38>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SDIO_SD_Init+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_SDIO_SD_Init+0x38>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SDIO_SD_Init+0x38>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <MX_SDIO_SD_Init+0x38>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <MX_SDIO_SD_Init+0x38>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	20002294 	.word	0x20002294
 8001620:	40012c00 	.word	0x40012c00

08001624 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART6_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART6_UART_Init+0x4c>)
 800165c:	f003 fc24 	bl	8004ea8 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f885 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20002318 	.word	0x20002318
 8001674:	40011400 	.word	0x40011400

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_DMA_Init+0x4c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <MX_DMA_Init+0x4c>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <MX_DMA_Init+0x4c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	203b      	movs	r0, #59	; 0x3b
 80016a0:	f000 fc1c 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016a4:	203b      	movs	r0, #59	; 0x3b
 80016a6:	f000 fc35 	bl	8001f14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2045      	movs	r0, #69	; 0x45
 80016b0:	f000 fc14 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016b4:	2045      	movs	r0, #69	; 0x45
 80016b6:	f000 fc2d 	bl	8001f14 <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_GPIO_Init+0x84>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <MX_GPIO_Init+0x84>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_GPIO_Init+0x84>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_GPIO_Init+0x84>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <MX_GPIO_Init+0x84>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_GPIO_Init+0x84>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_GPIO_Init+0x84>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <MX_GPIO_Init+0x84>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MX_GPIO_Init+0x84>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_GPIO_Init+0x84>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <MX_GPIO_Init+0x84>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_GPIO_Init+0x84>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001762:	f000 fabf 	bl	8001ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40002000 	.word	0x40002000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a70      	ldr	r2, [pc, #448]	; (80019b0 <HAL_SD_MspInit+0x1e0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	f040 80da 	bne.w	80019a8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 80017fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a5f      	ldr	r2, [pc, #380]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_SD_MspInit+0x1e4>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001848:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800185a:	230c      	movs	r3, #12
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4854      	ldr	r0, [pc, #336]	; (80019b8 <HAL_SD_MspInit+0x1e8>)
 8001866:	f000 ff01 	bl	800266c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800187c:	230c      	movs	r3, #12
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	484c      	ldr	r0, [pc, #304]	; (80019b8 <HAL_SD_MspInit+0x1e8>)
 8001888:	f000 fef0 	bl	800266c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188c:	2304      	movs	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800189c:	230c      	movs	r3, #12
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4845      	ldr	r0, [pc, #276]	; (80019bc <HAL_SD_MspInit+0x1ec>)
 80018a8:	f000 fee0 	bl	800266c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018ae:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <HAL_SD_MspInit+0x1f4>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018dc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018e0:	2220      	movs	r2, #32
 80018e2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018f2:	2203      	movs	r2, #3
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 80018f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 8001900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001906:	482e      	ldr	r0, [pc, #184]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 8001908:	f000 fb12 	bl	8001f30 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001912:	f7ff ff2f 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_SD_MspInit+0x1f0>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <HAL_SD_MspInit+0x1fc>)
 8001926:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800192a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001952:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001956:	2220      	movs	r2, #32
 8001958:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001962:	2204      	movs	r2, #4
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001968:	2203      	movs	r2, #3
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800196e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001976:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800197c:	4812      	ldr	r0, [pc, #72]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 800197e:	f000 fad7 	bl	8001f30 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001988:	f7ff fef4 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c
 8001992:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_SD_MspInit+0x1f8>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2031      	movs	r0, #49	; 0x31
 800199e:	f000 fa9d 	bl	8001edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80019a2:	2031      	movs	r0, #49	; 0x31
 80019a4:	f000 fab6 	bl	8001f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	20002170 	.word	0x20002170
 80019c4:	40026458 	.word	0x40026458
 80019c8:	20002234 	.word	0x20002234
 80019cc:	400264a0 	.word	0x400264a0

080019d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_UART_MspInit+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12b      	bne.n	8001a4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_UART_MspInit+0x88>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_UART_MspInit+0x88>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_UART_MspInit+0x88>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_UART_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_UART_MspInit+0x88>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_UART_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_UART_MspInit+0x8c>)
 8001a46:	f000 fe11 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40011400 	.word	0x40011400
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800

08001a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	202d      	movs	r0, #45	; 0x2d
 8001a76:	f000 fa31 	bl	8001edc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a7a:	202d      	movs	r0, #45	; 0x2d
 8001a7c:	f000 fa4a 	bl	8001f14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_InitTick+0xa4>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_InitTick+0xa4>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_InitTick+0xa4>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a9c:	f107 0210 	add.w	r2, r7, #16
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fbf0 	bl	800328c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001aac:	f001 fbc6 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_InitTick+0xa8>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_InitTick+0xac>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_InitTick+0xb0>)
 8001ac8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_InitTick+0xac>)
 8001acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_InitTick+0xac>)
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_InitTick+0xac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_InitTick+0xac>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001ae4:	4809      	ldr	r0, [pc, #36]	; (8001b0c <HAL_InitTick+0xac>)
 8001ae6:	f002 ff32 	bl	800494e <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_InitTick+0xac>)
 8001af2:	f002 ff85 	bl	8004a00 <HAL_TIM_Base_Start_IT>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3730      	adds	r7, #48	; 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	431bde83 	.word	0x431bde83
 8001b0c:	2000235c 	.word	0x2000235c
 8001b10:	40002000 	.word	0x40002000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001b72:	f002 ffb5 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000235c 	.word	0x2000235c

08001b80 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <SDIO_IRQHandler+0x10>)
 8001b86:	f001 fe29 	bl	80037dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20002294 	.word	0x20002294

08001b94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DMA2_Stream3_IRQHandler+0x10>)
 8001b9a:	f000 faf1 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20002170 	.word	0x20002170

08001ba8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA2_Stream6_IRQHandler+0x10>)
 8001bae:	f000 fae7 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002234 	.word	0x20002234

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f007 fc86 	bl	80094fc <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20020000 	.word	0x20020000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	20000090 	.word	0x20000090
 8001c24:	20004428 	.word	0x20004428

08001c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c76:	f7ff ffd7 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f007 fc45 	bl	8009508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7ff fbc3 	bl	8001408 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c90:	0800a3b8 	.word	0x0800a3b8
  ldr r2, =_sbss
 8001c94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c98:	20004424 	.word	0x20004424

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_Init+0x40>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x40>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x40>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f8fc 	bl	8001ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f7ff fec6 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fd54 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008
 8001d08:	200023a4 	.word	0x200023a4

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200023a4 	.word	0x200023a4

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff4c 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eee:	f7ff ff61 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	6978      	ldr	r0, [r7, #20]
 8001efa:	f7ff ffb1 	bl	8001e60 <NVIC_EncodePriority>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff80 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff54 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff fee6 	bl	8001d0c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e099      	b.n	8002080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6c:	e00f      	b.n	8001f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f6e:	f7ff fecd 	bl	8001d0c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d908      	bls.n	8001f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2203      	movs	r2, #3
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e078      	b.n	8002080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e8      	bne.n	8001f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_DMA_Init+0x158>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d107      	bne.n	8001ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2b04      	cmp	r3, #4
 8002020:	d117      	bne.n	8002052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fa9d 	bl	8002574 <DMA_CheckFifoParam>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800204e:	2301      	movs	r3, #1
 8002050:	e016      	b.n	8002080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa54 	bl	8002508 <DMA_CalcBaseAndBitshift>
 8002060:	4603      	mov	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	223f      	movs	r2, #63	; 0x3f
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	f010803f 	.word	0xf010803f

0800208c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Start_IT+0x26>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e040      	b.n	8002134 <HAL_DMA_Start_IT+0xa8>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d12f      	bne.n	8002126 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f9e6 	bl	80024ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	223f      	movs	r2, #63	; 0x3f
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0216 	orr.w	r2, r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0208 	orr.w	r2, r2, #8
 8002112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e005      	b.n	8002132 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002132:	7dfb      	ldrb	r3, [r7, #23]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d004      	beq.n	800215a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00c      	b.n	8002174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800218c:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <HAL_DMA_IRQHandler+0x258>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_DMA_IRQHandler+0x25c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0a9b      	lsrs	r3, r3, #10
 8002198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2208      	movs	r2, #8
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01a      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2208      	movs	r2, #8
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f043 0202 	orr.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2204      	movs	r2, #4
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2204      	movs	r2, #4
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f043 0204 	orr.w	r2, r3, #4
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	2210      	movs	r2, #16
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d043      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03c      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	2210      	movs	r2, #16
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d024      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
 80022ae:	e01f      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0208 	bic.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2220      	movs	r2, #32
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 808e 	beq.w	800241e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8086 	beq.w	800241e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	2220      	movs	r2, #32
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d136      	bne.n	8002398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_IRQHandler+0x1da>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	223f      	movs	r2, #63	; 0x3f
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07d      	beq.n	800248a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
        }
        return;
 8002396:	e078      	b.n	800248a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01c      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d030      	beq.n	800241e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e02b      	b.n	800241e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d027      	beq.n	800241e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
 80023d6:	e022      	b.n	800241e <HAL_DMA_IRQHandler+0x29e>
 80023d8:	20000000 	.word	0x20000000
 80023dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0210 	bic.w	r2, r2, #16
 80023fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	2b00      	cmp	r3, #0
 8002424:	d032      	beq.n	800248c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d022      	beq.n	8002478 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	429a      	cmp	r2, r3
 8002454:	d307      	bcc.n	8002466 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f2      	bne.n	800244a <HAL_DMA_IRQHandler+0x2ca>
 8002464:	e000      	b.n	8002468 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002466:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
 8002488:	e000      	b.n	800248c <HAL_DMA_IRQHandler+0x30c>
        return;
 800248a:	bf00      	nop
    }
  }
}
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop

08002494 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	d108      	bne.n	80024ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ea:	e007      	b.n	80024fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3b10      	subs	r3, #16
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <DMA_CalcBaseAndBitshift+0x64>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <DMA_CalcBaseAndBitshift+0x68>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d909      	bls.n	800254a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	; 0x58
 8002548:	e007      	b.n	800255a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	aaaaaaab 	.word	0xaaaaaaab
 8002570:	0800a2d8 	.word	0x0800a2d8

08002574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0x5a>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d856      	bhi.n	8002642 <DMA_CheckFifoParam+0xce>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <DMA_CheckFifoParam+0x28>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bf 	.word	0x080025bf
 80025a4:	080025ad 	.word	0x080025ad
 80025a8:	08002643 	.word	0x08002643
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d046      	beq.n	8002646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e043      	b.n	8002646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c6:	d140      	bne.n	800264a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e03d      	b.n	800264a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	d121      	bne.n	800261c <DMA_CheckFifoParam+0xa8>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d837      	bhi.n	800264e <DMA_CheckFifoParam+0xda>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <DMA_CheckFifoParam+0x70>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	080025fb 	.word	0x080025fb
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800260d 	.word	0x0800260d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e030      	b.n	800265c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d025      	beq.n	8002652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e022      	b.n	8002652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800261a:	e01c      	b.n	8002656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d903      	bls.n	800262a <DMA_CheckFifoParam+0xb6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002628:	e018      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      break;
 800262e:	e015      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e00b      	b.n	800265a <DMA_CheckFifoParam+0xe6>
      break;
 8002642:	bf00      	nop
 8002644:	e00a      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e008      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e006      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;   
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
    }
  } 
  
  return status; 
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e16b      	b.n	8002960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 815a 	bne.w	800295a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d005      	beq.n	80026be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80b4 	beq.w	800295a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b60      	ldr	r3, [pc, #384]	; (8002978 <HAL_GPIO_Init+0x30c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a5f      	ldr	r2, [pc, #380]	; (8002978 <HAL_GPIO_Init+0x30c>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_GPIO_Init+0x30c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280e:	4a5b      	ldr	r2, [pc, #364]	; (800297c <HAL_GPIO_Init+0x310>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02b      	beq.n	8002892 <HAL_GPIO_Init+0x226>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a51      	ldr	r2, [pc, #324]	; (8002984 <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x222>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x21e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4f      	ldr	r2, [pc, #316]	; (800298c <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x21a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4e      	ldr	r2, [pc, #312]	; (8002990 <HAL_GPIO_Init+0x324>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x216>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <HAL_GPIO_Init+0x328>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x212>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4c      	ldr	r2, [pc, #304]	; (8002998 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x20e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4b      	ldr	r2, [pc, #300]	; (800299c <HAL_GPIO_Init+0x330>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x20a>
 8002872:	2307      	movs	r3, #7
 8002874:	e00e      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002876:	2308      	movs	r3, #8
 8002878:	e00c      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800287a:	2306      	movs	r3, #6
 800287c:	e00a      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800287e:	2305      	movs	r3, #5
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002882:	2304      	movs	r3, #4
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002892:	2300      	movs	r3, #0
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a4:	4935      	ldr	r1, [pc, #212]	; (800297c <HAL_GPIO_Init+0x310>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_GPIO_Init+0x334>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d6:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <HAL_GPIO_Init+0x334>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_GPIO_Init+0x334>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002900:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <HAL_GPIO_Init+0x334>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_GPIO_Init+0x334>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_GPIO_Init+0x334>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_GPIO_Init+0x334>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_GPIO_Init+0x334>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	f67f ae90 	bls.w	8002688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021400 	.word	0x40021400
 8002998:	40021800 	.word	0x40021800
 800299c:	40021c00 	.word	0x40021c00
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e264      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	4ba3      	ldr	r3, [pc, #652]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b9d      	ldr	r3, [pc, #628]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e23f      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a90      	ldr	r2, [pc, #576]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f956 	bl	8001d0c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff f952 	bl	8001d0c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e204      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff f942 	bl	8001d0c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff f93e 	bl	8001d0c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1f0      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c4      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4952      	ldr	r1, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f8f7 	bl	8001d0c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f8f3 	bl	8001d0c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a5      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4940      	ldr	r1, [pc, #256]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_OscConfig+0x2b0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f8d6 	bl	8001d0c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f8d2 	bl	8001d0c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e184      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d030      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f8b6 	bl	8001d0c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f8b2 	bl	8001d0c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e164      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e015      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x2b4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f89f 	bl	8001d0c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f89b 	bl	8001d0c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e14d      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a0 	beq.w	8002d3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d121      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_RCC_OscConfig+0x2b8>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7ff f861 	bl	8001d0c <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	42470000 	.word	0x42470000
 8002c58:	42470e80 	.word	0x42470e80
 8002c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7ff f854 	bl	8001d0c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e106      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x4e4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002c86:	4b81      	ldr	r3, [pc, #516]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x32a>
 8002cb6:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a74      	ldr	r2, [pc, #464]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a71      	ldr	r2, [pc, #452]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7ff f819 	bl	8001d0c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7ff f815 	bl	8001d0c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0c5      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x33a>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff f803 	bl	8001d0c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe ffff 	bl	8001d0c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0af      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b56      	ldr	r3, [pc, #344]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 809b 	beq.w	8002e7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d05c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d141      	bne.n	8002de0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe ffd3 	bl	8001d0c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe ffcf 	bl	8001d0c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e081      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	019b      	lsls	r3, r3, #6
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	4937      	ldr	r1, [pc, #220]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe ffa8 	bl	8001d0c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe ffa4 	bl	8001d0c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e056      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
 8002dde:	e04e      	b.n	8002e7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe ff91 	bl	8001d0c <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe ff8d 	bl	8001d0c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e03f      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x44a>
 8002e0c:	e037      	b.n	8002e7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e032      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d028      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d11a      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	42470060 	.word	0x42470060

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fec2 	bl	8001d0c <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe febe 	bl	8001d0c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f821 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fd10 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	0800a2c0 	.word	0x0800a2c0
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	2300      	movs	r3, #0
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003078:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d00d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003084:	2b08      	cmp	r3, #8
 8003086:	f200 80bd 	bhi.w	8003204 <HAL_RCC_GetSysClockFreq+0x1a4>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003092:	e0b7      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003096:	60bb      	str	r3, [r7, #8]
       break;
 8003098:	e0b7      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b61      	ldr	r3, [pc, #388]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800309c:	60bb      	str	r3, [r7, #8]
      break;
 800309e:	e0b4      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d04d      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	ea02 0800 	and.w	r8, r2, r0
 80030ce:	ea03 0901 	and.w	r9, r3, r1
 80030d2:	4640      	mov	r0, r8
 80030d4:	4649      	mov	r1, r9
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	014b      	lsls	r3, r1, #5
 80030e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030e4:	0142      	lsls	r2, r0, #5
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	ebb0 0008 	subs.w	r0, r0, r8
 80030ee:	eb61 0109 	sbc.w	r1, r1, r9
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	018b      	lsls	r3, r1, #6
 80030fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003100:	0182      	lsls	r2, r0, #6
 8003102:	1a12      	subs	r2, r2, r0
 8003104:	eb63 0301 	sbc.w	r3, r3, r1
 8003108:	f04f 0000 	mov.w	r0, #0
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	00d9      	lsls	r1, r3, #3
 8003112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003116:	00d0      	lsls	r0, r2, #3
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	eb12 0208 	adds.w	r2, r2, r8
 8003120:	eb43 0309 	adc.w	r3, r3, r9
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	f04f 0100 	mov.w	r1, #0
 800312c:	0259      	lsls	r1, r3, #9
 800312e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003132:	0250      	lsls	r0, r2, #9
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f7fd fbb2 	bl	80008ac <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e04a      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	461a      	mov	r2, r3
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	ea02 0400 	and.w	r4, r2, r0
 800316a:	ea03 0501 	and.w	r5, r3, r1
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	014b      	lsls	r3, r1, #5
 800317c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003180:	0142      	lsls	r2, r0, #5
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	1b00      	subs	r0, r0, r4
 8003188:	eb61 0105 	sbc.w	r1, r1, r5
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	018b      	lsls	r3, r1, #6
 8003196:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800319a:	0182      	lsls	r2, r0, #6
 800319c:	1a12      	subs	r2, r2, r0
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	00d9      	lsls	r1, r3, #3
 80031ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b0:	00d0      	lsls	r0, r2, #3
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	1912      	adds	r2, r2, r4
 80031b8:	eb45 0303 	adc.w	r3, r5, r3
 80031bc:	f04f 0000 	mov.w	r0, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	0299      	lsls	r1, r3, #10
 80031c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031ca:	0290      	lsls	r0, r2, #10
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f7fd fb66 	bl	80008ac <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4613      	mov	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	60bb      	str	r3, [r7, #8]
      break;
 8003202:	e002      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003206:	60bb      	str	r3, [r7, #8]
      break;
 8003208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320a:	68bb      	ldr	r3, [r7, #8]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	00f42400 	.word	0x00f42400
 8003220:	007a1200 	.word	0x007a1200

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	0800a2d0 	.word	0x0800a2d0

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003268:	f7ff ffdc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0b5b      	lsrs	r3, r3, #13
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4903      	ldr	r1, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	0800a2d0 	.word	0x0800a2d0

0800328c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	220f      	movs	r2, #15
 800329a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_GetClockConfig+0x5c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_RCC_GetClockConfig+0x5c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_RCC_GetClockConfig+0x5c>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_GetClockConfig+0x5c>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RCC_GetClockConfig+0x60>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0207 	and.w	r2, r3, #7
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40023c00 	.word	0x40023c00

080032f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fe fa5b 	bl	80017d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f814 	bl	8003350 <HAL_SD_InitCard>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00a      	b.n	8003348 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800336c:	2376      	movs	r3, #118	; 0x76
 800336e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681d      	ldr	r5, [r3, #0]
 8003374:	466c      	mov	r4, sp
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003388:	4628      	mov	r0, r5
 800338a:	f002 f8a3 	bl	80054d4 <SDIO_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04c      	b.n	800343a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_SD_InitCard+0xf4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 f8db 	bl	8005566 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_SD_InitCard+0xf4>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 f804 	bl	80043c4 <SD_PowerON>
 80033bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e02e      	b.n	800343a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 ff25 	bl	800422c <SD_InitCard>
 80033e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e01b      	b.n	800343a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800340a:	4618      	mov	r0, r3
 800340c:	f002 f93e 	bl	800568c <SDMMC_CmdBlockLength>
 8003410:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_SD_InitCard+0xf8>)
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bdb0      	pop	{r4, r5, r7, pc}
 8003442:	bf00      	nop
 8003444:	422580a0 	.word	0x422580a0
 8003448:	004005ff 	.word	0x004005ff

0800344c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0c0      	b.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	f040 80b9 	bne.w	80035f4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	441a      	add	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	429a      	cmp	r2, r3
 8003494:	d907      	bls.n	80034a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0a7      	b.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2203      	movs	r2, #3
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80034d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2200      	movs	r2, #0
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3380      	adds	r3, #128	; 0x80
 8003510:	4619      	mov	r1, r3
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	025b      	lsls	r3, r3, #9
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	f7fe fdb7 	bl	800208c <HAL_DMA_Start_IT>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d017      	beq.n	8003554 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a33      	ldr	r2, [pc, #204]	; (8003608 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800353a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e050      	b.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	2b01      	cmp	r3, #1
 8003560:	d002      	beq.n	8003568 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	025b      	lsls	r3, r3, #9
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800356c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003574:	2390      	movs	r3, #144	; 0x90
 8003576:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003578:	2302      	movs	r3, #2
 800357a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003580:	2301      	movs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f107 0210 	add.w	r2, r7, #16
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f002 f850 	bl	8005634 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d90a      	bls.n	80035b0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2282      	movs	r2, #130	; 0x82
 800359e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a6:	4618      	mov	r0, r3
 80035a8:	f002 f8b4 	bl	8005714 <SDMMC_CmdReadMultiBlock>
 80035ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80035ae:	e009      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2281      	movs	r2, #129	; 0x81
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 f887 	bl	80056d0 <SDMMC_CmdReadSingleBlock>
 80035c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e002      	b.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3730      	adds	r7, #48	; 0x30
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	0800403b 	.word	0x0800403b
 8003604:	080040ad 	.word	0x080040ad
 8003608:	004005ff 	.word	0x004005ff
 800360c:	4225858c 	.word	0x4225858c

08003610 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0c5      	b.n	80037c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 80be 	bne.w	80037c2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800364c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	429a      	cmp	r2, r3
 8003658:	d907      	bls.n	800366a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0ac      	b.n	80037c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	4a4e      	ldr	r2, [pc, #312]	; (80037cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2200      	movs	r2, #0
 80036a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d002      	beq.n	80036b4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	025b      	lsls	r3, r3, #9
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d90a      	bls.n	80036d0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22a0      	movs	r2, #160	; 0xa0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 f868 	bl	800579c <SDMMC_CmdWriteMultiBlock>
 80036cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036ce:	e009      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2290      	movs	r2, #144	; 0x90
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 f83b 	bl	8005758 <SDMMC_CmdWriteSingleBlock>
 80036e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a39      	ldr	r2, [pc, #228]	; (80037d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e059      	b.n	80037c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3380      	adds	r3, #128	; 0x80
 8003746:	461a      	mov	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	f7fe fc9d 	bl	800208c <HAL_DMA_Start_IT>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003766:	f023 0302 	bic.w	r3, r3, #2
 800376a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e018      	b.n	80037c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003796:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800379e:	2390      	movs	r3, #144	; 0x90
 80037a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f107 0210 	add.w	r2, r7, #16
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 ff3b 	bl	8005634 <SDIO_ConfigData>

      return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	08004011 	.word	0x08004011
 80037d0:	080040ad 	.word	0x080040ad
 80037d4:	004005ff 	.word	0x004005ff
 80037d8:	4225858c 	.word	0x4225858c

080037dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_SD_IRQHandler+0x2e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fffd 	bl	8004802 <SD_Read_IT>
 8003808:	e165      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 808f 	beq.w	8003938 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003832:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003836:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d039      	beq.n	80038c6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_SD_IRQHandler+0x8a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f001 ffb8 	bl	80057e0 <SDMMC_CmdStopTransfer>
 8003870:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f92f 	bl	8003ae8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003892:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_SD_IRQHandler+0xda>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f002 fc26 	bl	8006108 <HAL_SD_RxCpltCallback>
 80038bc:	e10b      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f002 fc18 	bl	80060f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038c4:	e107      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8102 	beq.w	8003ad6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d011      	beq.n	8003900 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 ff7d 	bl	80057e0 <SDMMC_CmdStopTransfer>
 80038e6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8f4 	bl	8003ae8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 80e5 	bne.w	8003ad6 <HAL_SD_IRQHandler+0x2fa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 80df 	bne.w	8003ad6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f002 fbdf 	bl	80060f4 <HAL_SD_TxCpltCallback>
}
 8003936:	e0ce      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_SD_IRQHandler+0x17c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 ffa7 	bl	80048a4 <SD_Write_IT>
 8003956:	e0be      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	f240 233a 	movw	r3, #570	; 0x23a
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80b6 	beq.w	8003ad6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	f043 0208 	orr.w	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	f043 0210 	orr.w	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f043 0208 	orr.w	r2, r3, #8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f240 723a 	movw	r2, #1850	; 0x73a
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fee6 	bl	80057e0 <SDMMC_CmdStopTransfer>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f855 	bl	8003ae8 <HAL_SD_ErrorCallback>
}
 8003a3e:	e04a      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d045      	beq.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_SD_IRQHandler+0x282>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d011      	beq.n	8003a82 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <HAL_SD_IRQHandler+0x304>)
 8003a64:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fb66 	bl	800213c <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02f      	beq.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb68 	bl	8004150 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a80:	e029      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_SD_IRQHandler+0x2ba>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <HAL_SD_IRQHandler+0x308>)
 8003a9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fb4a 	bl	800213c <HAL_DMA_Abort_IT>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fb83 	bl	80041be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ab8:	e00d      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f002 fb06 	bl	80060e0 <HAL_SD_AbortCallback>
}
 8003ad4:	e7ff      	b.n	8003ad6 <HAL_SD_IRQHandler+0x2fa>
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	08004151 	.word	0x08004151
 8003ae4:	080041bf 	.word	0x080041bf

08003ae8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0a:	0f9b      	lsrs	r3, r3, #30
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b28:	0e1b      	lsrs	r3, r3, #24
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5c:	0d1b      	lsrs	r3, r3, #20
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7a:	0bdb      	lsrs	r3, r3, #15
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8c:	0b9b      	lsrs	r3, r3, #14
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb0:	0b1b      	lsrs	r3, r3, #12
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d163      	bne.n	8003c94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd0:	009a      	lsls	r2, r3, #2
 8003bd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003bdc:	0f92      	lsrs	r2, r2, #30
 8003bde:	431a      	orrs	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be8:	0edb      	lsrs	r3, r3, #27
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	0e1b      	lsrs	r3, r3, #24
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	0d5b      	lsrs	r3, r3, #21
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1e:	0c9b      	lsrs	r3, r3, #18
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c30:	0bdb      	lsrs	r3, r3, #15
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7e1b      	ldrb	r3, [r3, #24]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3302      	adds	r3, #2
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c5e:	fb02 f203 	mul.w	r2, r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7a1b      	ldrb	r3, [r3, #8]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c80:	0a52      	lsrs	r2, r2, #9
 8003c82:	fb02 f203 	mul.w	r2, r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60
 8003c92:	e031      	b.n	8003cf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d11d      	bne.n	8003cd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	029a      	lsls	r2, r3, #10
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8003cd6:	e00f      	b.n	8003cf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_SD_GetCardCSD+0x344>)
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e09d      	b.n	8003e34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfc:	0b9b      	lsrs	r3, r3, #14
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0e:	09db      	lsrs	r3, r3, #7
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	0fdb      	lsrs	r3, r3, #31
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	0f5b      	lsrs	r3, r3, #29
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	0d9b      	lsrs	r3, r3, #22
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	0d5b      	lsrs	r3, r3, #21
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	0bdb      	lsrs	r3, r3, #15
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	0b9b      	lsrs	r3, r3, #14
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	0b1b      	lsrs	r3, r3, #12
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	0a9b      	lsrs	r3, r3, #10
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	004005ff 	.word	0x004005ff

08003e44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b08e      	sub	sp, #56	; 0x38
 8003ea0:	af04      	add	r7, sp, #16
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d02e      	beq.n	8003f1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
 8003ed0:	e029      	b.n	8003f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb28 	bl	8004530 <SD_WideBus_Enable>
 8003ee0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
 8003eee:	e01a      	b.n	8003f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fb65 	bl	80045c6 <SD_WideBus_Disable>
 8003efc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
 8003f0a:	e00c      	b.n	8003f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
 8003f18:	e005      	b.n	8003f26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_SD_ConfigWideBusOperation+0x130>)
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f44:	e01f      	b.n	8003f86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681d      	ldr	r5, [r3, #0]
 8003f6c:	466c      	mov	r4, sp
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f80:	4628      	mov	r0, r5
 8003f82:	f001 faa7 	bl	80054d4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fb7c 	bl	800568c <SDMMC_CmdBlockLength>
 8003f94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_SD_ConfigWideBusOperation+0x130>)
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	004005ff 	.word	0x004005ff

08003fd0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa7c 	bl	80044e0 <SD_SendStatus>
 8003fe8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004006:	693b      	ldr	r3, [r7, #16]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b82      	cmp	r3, #130	; 0x82
 800404e:	d111      	bne.n	8004074 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fbc3 	bl	80057e0 <SDMMC_CmdStopTransfer>
 800405a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fd3a 	bl	8003ae8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0208 	bic.w	r2, r2, #8
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f240 523a 	movw	r2, #1338	; 0x53a
 800408c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f002 f833 	bl	8006108 <HAL_SD_RxCpltCallback>
#endif
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe f9ea 	bl	8002494 <HAL_DMA_GetError>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d03e      	beq.n	8004144 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d002      	beq.n	80040e2 <SD_DMAError+0x36>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d12d      	bne.n	800413e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <SD_DMAError+0xa0>)
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff ff62 	bl	8003fd0 <HAL_SD_GetCardState>
 800410c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d002      	beq.n	800411a <SD_DMAError+0x6e>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d10a      	bne.n	8004130 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fb5e 	bl	80057e0 <SDMMC_CmdStopTransfer>
 8004124:	4602      	mov	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	431a      	orrs	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff fcd2 	bl	8003ae8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	004005ff 	.word	0x004005ff

08004150 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f240 523a 	movw	r2, #1338	; 0x53a
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff ff31 	bl	8003fd0 <HAL_SD_GetCardState>
 800416e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d002      	beq.n	800418a <SD_DMATxAbort+0x3a>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10a      	bne.n	80041a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fb26 	bl	80057e0 <SDMMC_CmdStopTransfer>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	431a      	orrs	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f001 ff99 	bl	80060e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041ae:	e002      	b.n	80041b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fc99 	bl	8003ae8 <HAL_SD_ErrorCallback>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff fefa 	bl	8003fd0 <HAL_SD_GetCardState>
 80041dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d002      	beq.n	80041f8 <SD_DMARxAbort+0x3a>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d10a      	bne.n	800420e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 faef 	bl	80057e0 <SDMMC_CmdStopTransfer>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f001 ff62 	bl	80060e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800421c:	e002      	b.n	8004224 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fc62 	bl	8003ae8 <HAL_SD_ErrorCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b094      	sub	sp, #80	; 0x50
 8004230:	af04      	add	r7, sp, #16
 8004232:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f9a1 	bl	8005584 <SDIO_GetPowerState>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004248:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800424c:	e0b6      	b.n	80043bc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	2b03      	cmp	r3, #3
 8004254:	d02f      	beq.n	80042b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 fbca 	bl	80059f4 <SDMMC_CmdSendCID>
 8004260:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <SD_InitCard+0x40>
    {
      return errorstate;
 8004268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426a:	e0a7      	b.n	80043bc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f9cb 	bl	800560e <SDIO_GetResponse>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2104      	movs	r1, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f9c2 	bl	800560e <SDIO_GetResponse>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2108      	movs	r1, #8
 8004296:	4618      	mov	r0, r3
 8004298:	f001 f9b9 	bl	800560e <SDIO_GetResponse>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	210c      	movs	r1, #12
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f9b0 	bl	800560e <SDIO_GetResponse>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d00d      	beq.n	80042da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f107 020e 	add.w	r2, r7, #14
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fbd0 	bl	8005a6e <SDMMC_CmdSetRelAdd>
 80042ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <SD_InitCard+0xae>
    {
      return errorstate;
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	e070      	b.n	80043bc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d036      	beq.n	8004350 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f001 fb9a 	bl	8005a30 <SDMMC_CmdSendCSD>
 80042fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	e059      	b.n	80043bc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f97d 	bl	800560e <SDIO_GetResponse>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2104      	movs	r1, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f974 	bl	800560e <SDIO_GetResponse>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2108      	movs	r1, #8
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f96b 	bl	800560e <SDIO_GetResponse>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	210c      	movs	r1, #12
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f962 	bl	800560e <SDIO_GetResponse>
 800434a:	4602      	mov	r2, r0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2104      	movs	r1, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f001 f959 	bl	800560e <SDIO_GetResponse>
 800435c:	4603      	mov	r3, r0
 800435e:	0d1a      	lsrs	r2, r3, #20
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fbc6 	bl	8003afc <HAL_SD_GetCardCSD>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004376:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800437a:	e01f      	b.n	80043bc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	4608      	mov	r0, r1
 800438e:	f001 fa49 	bl	8005824 <SDMMC_CmdSelDesel>
 8004392:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <SD_InitCard+0x172>
  {
    return errorstate;
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e00e      	b.n	80043bc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	466c      	mov	r4, sp
 80043a6:	f103 0210 	add.w	r2, r3, #16
 80043aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80043ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043b0:	3304      	adds	r3, #4
 80043b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b4:	4628      	mov	r0, r5
 80043b6:	f001 f88d 	bl	80054d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}

080043c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fa44 	bl	800586a <SDMMC_CmdGoIdleState>
 80043e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	e072      	b.n	80044d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 fa57 	bl	80058a6 <SDMMC_CmdOperCond>
 80043f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fa2d 	bl	800586a <SDMMC_CmdGoIdleState>
 8004410:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e05b      	b.n	80044d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004426:	2b01      	cmp	r3, #1
 8004428:	d137      	bne.n	800449a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f001 fa57 	bl	80058e4 <SDMMC_CmdAppCommand>
 8004436:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02d      	beq.n	800449a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800443e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004442:	e047      	b.n	80044d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fa4a 	bl	80058e4 <SDMMC_CmdAppCommand>
 8004450:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <SD_PowerON+0x98>
    {
      return errorstate;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e03b      	b.n	80044d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	491e      	ldr	r1, [pc, #120]	; (80044dc <SD_PowerON+0x118>)
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fa60 	bl	8005928 <SDMMC_CmdAppOperCommand>
 8004468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004474:	e02e      	b.n	80044d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f8c6 	bl	800560e <SDIO_GetResponse>
 8004482:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0fdb      	lsrs	r3, r3, #31
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <SD_PowerON+0xcc>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <SD_PowerON+0xce>
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

    count++;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d802      	bhi.n	80044aa <SD_PowerON+0xe6>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0cc      	beq.n	8004444 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d902      	bls.n	80044ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	e00c      	b.n	80044d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
 80044ca:	e002      	b.n	80044d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	c1100000 	.word	0xc1100000

080044e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80044f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044f4:	e018      	b.n	8004528 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f001 fad4 	bl	8005ab0 <SDMMC_CmdSendStatus>
 8004508:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e009      	b.n	8004528 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f877 	bl	800560e <SDIO_GetResponse>
 8004520:	4602      	mov	r2, r0
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 f861 	bl	800560e <SDIO_GetResponse>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004556:	d102      	bne.n	800455e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800455c:	e02f      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f879 	bl	800465c <SD_FindSCR>
 800456a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	e023      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01c      	beq.n	80045ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f001 f9a9 	bl	80058e4 <SDMMC_CmdAppCommand>
 8004592:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	e00f      	b.n	80045be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 f9e2 	bl	800596e <SDMMC_CmdBusWidth>
 80045aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e003      	b.n	80045be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e001      	b.n	80045be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f816 	bl	800560e <SDIO_GetResponse>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ec:	d102      	bne.n	80045f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045f2:	e02f      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f82e 	bl	800465c <SD_FindSCR>
 8004600:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e023      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01c      	beq.n	8004650 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f001 f95e 	bl	80058e4 <SDMMC_CmdAppCommand>
 8004628:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	e00f      	b.n	8004654 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f997 	bl	800596e <SDMMC_CmdBusWidth>
 8004640:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	e003      	b.n	8004654 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800464c:	2300      	movs	r3, #0
 800464e:	e001      	b.n	8004654 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b08f      	sub	sp, #60	; 0x3c
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004666:	f7fd fb51 	bl	8001d0c <HAL_GetTick>
 800466a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2108      	movs	r1, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f802 	bl	800568c <SDMMC_CmdBlockLength>
 8004688:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	e0b2      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f001 f91f 	bl	80058e4 <SDMMC_CmdAppCommand>
 80046a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	e0a3      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80046b8:	2308      	movs	r3, #8
 80046ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80046bc:	2330      	movs	r3, #48	; 0x30
 80046be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f107 0210 	add.w	r2, r7, #16
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ffac 	bl	8005634 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f966 	bl	80059b2 <SDMMC_CmdSendSCR>
 80046e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02a      	beq.n	8004744 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	e083      	b.n	80047fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f107 0208 	add.w	r2, r7, #8
 800470c:	18d4      	adds	r4, r2, r3
 800470e:	4608      	mov	r0, r1
 8004710:	f000 ff0b 	bl	800552a <SDIO_ReadFIFO>
 8004714:	4603      	mov	r3, r0
 8004716:	6023      	str	r3, [r4, #0]
      index++;
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	3301      	adds	r3, #1
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
 800471e:	e006      	b.n	800472e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800472e:	f7fd faed 	bl	8001d0c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473c:	d102      	bne.n	8004744 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800473e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004742:	e05a      	b.n	80047fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0cf      	beq.n	80046f2 <SD_FindSCR+0x96>
 8004752:	e000      	b.n	8004756 <SD_FindSCR+0xfa>
      break;
 8004754:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2208      	movs	r2, #8
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800476c:	2308      	movs	r3, #8
 800476e:	e044      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004786:	2302      	movs	r3, #2
 8004788:	e037      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2220      	movs	r2, #32
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e02a      	b.n	80047fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	061a      	lsls	r2, r3, #24
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	0e1b      	lsrs	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	601a      	str	r2, [r3, #0]
    scr++;
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	3304      	adds	r3, #4
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	061a      	lsls	r2, r3, #24
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	373c      	adds	r7, #60	; 0x3c
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d03f      	beq.n	800489c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e033      	b.n	800488a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fe7f 	bl	800552a <SDIO_ReadFIFO>
 800482c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0e1b      	lsrs	r3, r3, #24
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3b01      	subs	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3301      	adds	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b07      	cmp	r3, #7
 800488e:	d9c8      	bls.n	8004822 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d043      	beq.n	8004946 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e037      	b.n	8004934 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	041a      	lsls	r2, r3, #16
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3b01      	subs	r3, #1
 8004904:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	061a      	lsls	r2, r3, #24
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3b01      	subs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0208 	add.w	r2, r7, #8
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe0b 	bl	8005544 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d9c4      	bls.n	80048c4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e041      	b.n	80049e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f839 	bl	80049ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 f9d7 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e04e      	b.n	8004ab6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d01d      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1e      	ldr	r2, [pc, #120]	; (8004acc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x80>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d111      	bne.n	8004aa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d010      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	e007      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0202 	mvn.w	r2, #2
 8004b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f8ee 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8e0 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8f1 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0204 	mvn.w	r2, #4
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8c4 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8b6 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8c7 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0208 	mvn.w	r2, #8
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f89a 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f88c 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f89d 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f870 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f862 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f873 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d107      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0201 	mvn.w	r2, #1
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fd76 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d10e      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f902 	bl	8004e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d10e      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d107      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f838 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0220 	mvn.w	r2, #32
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8cc 	bl	8004e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d027      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d023      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <TIM_Base_SetConfig+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <TIM_Base_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <TIM_Base_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <TIM_Base_SetConfig+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <TIM_Base_SetConfig+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0xf8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40010400 	.word	0x40010400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	40001800 	.word	0x40001800
 8004e78:	40001c00 	.word	0x40001c00
 8004e7c:	40002000 	.word	0x40002000

08004e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e03f      	b.n	8004f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fd7e 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f929 	bl	8005144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b08a      	sub	sp, #40	; 0x28
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d17c      	bne.n	800505c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_Transmit+0x2c>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e075      	b.n	800505e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UART_Transmit+0x3e>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e06e      	b.n	800505e <HAL_UART_Transmit+0x11c>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2221      	movs	r2, #33	; 0x21
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f96:	f7fc feb9 	bl	8001d0c <HAL_GetTick>
 8004f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d108      	bne.n	8004fc4 <HAL_UART_Transmit+0x82>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	e003      	b.n	8004fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fd4:	e02a      	b.n	800502c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f840 	bl	8005066 <UART_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e036      	b.n	800505e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	3302      	adds	r3, #2
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e007      	b.n	800501e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3301      	adds	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1cf      	bne.n	8004fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	2140      	movs	r1, #64	; 0x40
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f810 	bl	8005066 <UART_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e006      	b.n	800505e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b090      	sub	sp, #64	; 0x40
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	e050      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507e:	d04c      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x30>
 8005086:	f7fc fe41 	bl	8001d0c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005092:	429a      	cmp	r2, r3
 8005094:	d241      	bcs.n	800511a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050b6:	637a      	str	r2, [r7, #52]	; 0x34
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ea:	623a      	str	r2, [r7, #32]
 80050ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	69f9      	ldr	r1, [r7, #28]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e00f      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d09f      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3740      	adds	r7, #64	; 0x40
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	b09f      	sub	sp, #124	; 0x7c
 800514a:	af00      	add	r7, sp, #0
 800514c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	68d9      	ldr	r1, [r3, #12]
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	ea40 0301 	orr.w	r3, r0, r1
 8005164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	431a      	orrs	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	4313      	orrs	r3, r2
 800517c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800517e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005188:	f021 010c 	bic.w	r1, r1, #12
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005192:	430b      	orrs	r3, r1
 8005194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a2:	6999      	ldr	r1, [r3, #24]
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	ea40 0301 	orr.w	r3, r0, r1
 80051ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4bc5      	ldr	r3, [pc, #788]	; (80054c8 <UART_SetConfig+0x384>)
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d004      	beq.n	80051c2 <UART_SetConfig+0x7e>
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4bc3      	ldr	r3, [pc, #780]	; (80054cc <UART_SetConfig+0x388>)
 80051be:	429a      	cmp	r2, r3
 80051c0:	d103      	bne.n	80051ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051c2:	f7fe f84f 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 80051c6:	6778      	str	r0, [r7, #116]	; 0x74
 80051c8:	e002      	b.n	80051d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ca:	f7fe f837 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 80051ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	f040 80b6 	bne.w	8005348 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051de:	461c      	mov	r4, r3
 80051e0:	f04f 0500 	mov.w	r5, #0
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	6439      	str	r1, [r7, #64]	; 0x40
 80051ec:	415b      	adcs	r3, r3
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051f4:	1912      	adds	r2, r2, r4
 80051f6:	eb45 0303 	adc.w	r3, r5, r3
 80051fa:	f04f 0000 	mov.w	r0, #0
 80051fe:	f04f 0100 	mov.w	r1, #0
 8005202:	00d9      	lsls	r1, r3, #3
 8005204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005208:	00d0      	lsls	r0, r2, #3
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	1911      	adds	r1, r2, r4
 8005210:	6639      	str	r1, [r7, #96]	; 0x60
 8005212:	416b      	adcs	r3, r5
 8005214:	667b      	str	r3, [r7, #100]	; 0x64
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	461a      	mov	r2, r3
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	1891      	adds	r1, r2, r2
 8005222:	63b9      	str	r1, [r7, #56]	; 0x38
 8005224:	415b      	adcs	r3, r3
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800522c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005230:	f7fb fb3c 	bl	80008ac <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4ba5      	ldr	r3, [pc, #660]	; (80054d0 <UART_SetConfig+0x38c>)
 800523a:	fba3 2302 	umull	r2, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	011e      	lsls	r6, r3, #4
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	461c      	mov	r4, r3
 8005246:	f04f 0500 	mov.w	r5, #0
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	1891      	adds	r1, r2, r2
 8005250:	6339      	str	r1, [r7, #48]	; 0x30
 8005252:	415b      	adcs	r3, r3
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
 8005256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800525a:	1912      	adds	r2, r2, r4
 800525c:	eb45 0303 	adc.w	r3, r5, r3
 8005260:	f04f 0000 	mov.w	r0, #0
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	00d9      	lsls	r1, r3, #3
 800526a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800526e:	00d0      	lsls	r0, r2, #3
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	1911      	adds	r1, r2, r4
 8005276:	65b9      	str	r1, [r7, #88]	; 0x58
 8005278:	416b      	adcs	r3, r5
 800527a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	1891      	adds	r1, r2, r2
 8005288:	62b9      	str	r1, [r7, #40]	; 0x28
 800528a:	415b      	adcs	r3, r3
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005292:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005296:	f7fb fb09 	bl	80008ac <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <UART_SetConfig+0x38c>)
 80052a0:	fba3 1302 	umull	r1, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2164      	movs	r1, #100	; 0x64
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	3332      	adds	r3, #50	; 0x32
 80052b2:	4a87      	ldr	r2, [pc, #540]	; (80054d0 <UART_SetConfig+0x38c>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052c0:	441e      	add	r6, r3
 80052c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c4:	4618      	mov	r0, r3
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	1894      	adds	r4, r2, r2
 80052d0:	623c      	str	r4, [r7, #32]
 80052d2:	415b      	adcs	r3, r3
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052da:	1812      	adds	r2, r2, r0
 80052dc:	eb41 0303 	adc.w	r3, r1, r3
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	f04f 0500 	mov.w	r5, #0
 80052e8:	00dd      	lsls	r5, r3, #3
 80052ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ee:	00d4      	lsls	r4, r2, #3
 80052f0:	4622      	mov	r2, r4
 80052f2:	462b      	mov	r3, r5
 80052f4:	1814      	adds	r4, r2, r0
 80052f6:	653c      	str	r4, [r7, #80]	; 0x50
 80052f8:	414b      	adcs	r3, r1
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	1891      	adds	r1, r2, r2
 8005308:	61b9      	str	r1, [r7, #24]
 800530a:	415b      	adcs	r3, r3
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005316:	f7fb fac9 	bl	80008ac <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4b6c      	ldr	r3, [pc, #432]	; (80054d0 <UART_SetConfig+0x38c>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	; 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3332      	adds	r3, #50	; 0x32
 8005332:	4a67      	ldr	r2, [pc, #412]	; (80054d0 <UART_SetConfig+0x38c>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 0207 	and.w	r2, r3, #7
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4432      	add	r2, r6
 8005344:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005346:	e0b9      	b.n	80054bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800534a:	461c      	mov	r4, r3
 800534c:	f04f 0500 	mov.w	r5, #0
 8005350:	4622      	mov	r2, r4
 8005352:	462b      	mov	r3, r5
 8005354:	1891      	adds	r1, r2, r2
 8005356:	6139      	str	r1, [r7, #16]
 8005358:	415b      	adcs	r3, r3
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005360:	1912      	adds	r2, r2, r4
 8005362:	eb45 0303 	adc.w	r3, r5, r3
 8005366:	f04f 0000 	mov.w	r0, #0
 800536a:	f04f 0100 	mov.w	r1, #0
 800536e:	00d9      	lsls	r1, r3, #3
 8005370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005374:	00d0      	lsls	r0, r2, #3
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	eb12 0804 	adds.w	r8, r2, r4
 800537e:	eb43 0905 	adc.w	r9, r3, r5
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4618      	mov	r0, r3
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	008b      	lsls	r3, r1, #2
 8005396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800539a:	0082      	lsls	r2, r0, #2
 800539c:	4640      	mov	r0, r8
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fa84 	bl	80008ac <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <UART_SetConfig+0x38c>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011e      	lsls	r6, r3, #4
 80053b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b4:	4618      	mov	r0, r3
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	1894      	adds	r4, r2, r2
 80053c0:	60bc      	str	r4, [r7, #8]
 80053c2:	415b      	adcs	r3, r3
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ca:	1812      	adds	r2, r2, r0
 80053cc:	eb41 0303 	adc.w	r3, r1, r3
 80053d0:	f04f 0400 	mov.w	r4, #0
 80053d4:	f04f 0500 	mov.w	r5, #0
 80053d8:	00dd      	lsls	r5, r3, #3
 80053da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053de:	00d4      	lsls	r4, r2, #3
 80053e0:	4622      	mov	r2, r4
 80053e2:	462b      	mov	r3, r5
 80053e4:	1814      	adds	r4, r2, r0
 80053e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80053e8:	414b      	adcs	r3, r1
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	008b      	lsls	r3, r1, #2
 8005400:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005404:	0082      	lsls	r2, r0, #2
 8005406:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800540a:	f7fb fa4f 	bl	80008ac <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <UART_SetConfig+0x38c>)
 8005414:	fba3 1302 	umull	r1, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2164      	movs	r1, #100	; 0x64
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	3332      	adds	r3, #50	; 0x32
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <UART_SetConfig+0x38c>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005432:	441e      	add	r6, r3
 8005434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005436:	4618      	mov	r0, r3
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	1894      	adds	r4, r2, r2
 8005442:	603c      	str	r4, [r7, #0]
 8005444:	415b      	adcs	r3, r3
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800544c:	1812      	adds	r2, r2, r0
 800544e:	eb41 0303 	adc.w	r3, r1, r3
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	f04f 0500 	mov.w	r5, #0
 800545a:	00dd      	lsls	r5, r3, #3
 800545c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005460:	00d4      	lsls	r4, r2, #3
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	eb12 0a00 	adds.w	sl, r2, r0
 800546a:	eb43 0b01 	adc.w	fp, r3, r1
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005486:	0082      	lsls	r2, r0, #2
 8005488:	4650      	mov	r0, sl
 800548a:	4659      	mov	r1, fp
 800548c:	f7fb fa0e 	bl	80008ac <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <UART_SetConfig+0x38c>)
 8005496:	fba3 1302 	umull	r1, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2164      	movs	r1, #100	; 0x64
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	3332      	adds	r3, #50	; 0x32
 80054a8:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <UART_SetConfig+0x38c>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4432      	add	r2, r6
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	377c      	adds	r7, #124	; 0x7c
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40011000 	.word	0x40011000
 80054cc:	40011400 	.word	0x40011400
 80054d0:	51eb851f 	.word	0x51eb851f

080054d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80054d4:	b084      	sub	sp, #16
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	f107 001c 	add.w	r0, r7, #28
 80054e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80054ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80054ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80054ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80054f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80054f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80054fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80054fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800550e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	b004      	add	sp, #16
 8005528:	4770      	bx	lr

0800552a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2203      	movs	r2, #3
 8005572:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005574:	2002      	movs	r0, #2
 8005576:	f7fc fbd5 	bl	8001d24 <HAL_Delay>
  
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0303 	and.w	r3, r3, #3
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80055c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80055ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055da:	f023 030f 	bic.w	r3, r3, #15
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	b2db      	uxtb	r3, r3
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3314      	adds	r3, #20
 800561c:	461a      	mov	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
}  
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800565a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005660:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005666:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800567e:	2300      	movs	r3, #0

}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800569a:	2310      	movs	r3, #16
 800569c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800569e:	2340      	movs	r3, #64	; 0x40
 80056a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ff74 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	2110      	movs	r1, #16
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa44 	bl	8005b4c <SDMMC_GetCmdResp1>
 80056c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056c6:	69fb      	ldr	r3, [r7, #28]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80056de:	2311      	movs	r3, #17
 80056e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056e2:	2340      	movs	r3, #64	; 0x40
 80056e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff52 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	2111      	movs	r1, #17
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa22 	bl	8005b4c <SDMMC_GetCmdResp1>
 8005708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005722:	2312      	movs	r3, #18
 8005724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800572e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff ff30 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	2112      	movs	r1, #18
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa00 	bl	8005b4c <SDMMC_GetCmdResp1>
 800574c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800574e:	69fb      	ldr	r3, [r7, #28]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005766:	2318      	movs	r3, #24
 8005768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005778:	f107 0308 	add.w	r3, r7, #8
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff ff0e 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	2118      	movs	r1, #24
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9de 	bl	8005b4c <SDMMC_GetCmdResp1>
 8005790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005792:	69fb      	ldr	r3, [r7, #28]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80057aa:	2319      	movs	r3, #25
 80057ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057bc:	f107 0308 	add.w	r3, r7, #8
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff feec 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	2119      	movs	r1, #25
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9bc 	bl	8005b4c <SDMMC_GetCmdResp1>
 80057d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057d6:	69fb      	ldr	r3, [r7, #28]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80057ec:	230c      	movs	r3, #12
 80057ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057fe:	f107 0308 	add.w	r3, r7, #8
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fecb 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800580a:	4a05      	ldr	r2, [pc, #20]	; (8005820 <SDMMC_CmdStopTransfer+0x40>)
 800580c:	210c      	movs	r1, #12
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f99c 	bl	8005b4c <SDMMC_GetCmdResp1>
 8005814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005816:	69fb      	ldr	r3, [r7, #28]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	05f5e100 	.word	0x05f5e100

08005824 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005834:	2307      	movs	r3, #7
 8005836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005838:	2340      	movs	r3, #64	; 0x40
 800583a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005844:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005846:	f107 0310 	add.w	r3, r7, #16
 800584a:	4619      	mov	r1, r3
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff fea7 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	2107      	movs	r1, #7
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f977 	bl	8005b4c <SDMMC_GetCmdResp1>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005862:	4618      	mov	r0, r3
 8005864:	3728      	adds	r7, #40	; 0x28
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005886:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff fe86 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f92d 	bl	8005af4 <SDMMC_GetCmdError>
 800589a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800589c:	69fb      	ldr	r3, [r7, #28]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b088      	sub	sp, #32
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80058b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80058b4:	2308      	movs	r3, #8
 80058b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058b8:	2340      	movs	r3, #64	; 0x40
 80058ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058c6:	f107 0308 	add.w	r3, r7, #8
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fe67 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fb24 	bl	8005f20 <SDMMC_GetCmdResp7>
 80058d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058da:	69fb      	ldr	r3, [r7, #28]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80058f2:	2337      	movs	r3, #55	; 0x37
 80058f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058f6:	2340      	movs	r3, #64	; 0x40
 80058f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fe48 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	2137      	movs	r1, #55	; 0x37
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f918 	bl	8005b4c <SDMMC_GetCmdResp1>
 800591c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800591e:	69fb      	ldr	r3, [r7, #28]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800593e:	2329      	movs	r3, #41	; 0x29
 8005940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800594a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800594e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005950:	f107 0308 	add.w	r3, r7, #8
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fe22 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa2b 	bl	8005db8 <SDMMC_GetCmdResp3>
 8005962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b088      	sub	sp, #32
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800597c:	2306      	movs	r3, #6
 800597e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800598c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff fe03 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800599a:	f241 3288 	movw	r2, #5000	; 0x1388
 800599e:	2106      	movs	r1, #6
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8d3 	bl	8005b4c <SDMMC_GetCmdResp1>
 80059a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a8:	69fb      	ldr	r3, [r7, #28]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b088      	sub	sp, #32
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80059be:	2333      	movs	r3, #51	; 0x33
 80059c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059d0:	f107 0308 	add.w	r3, r7, #8
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fde2 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	2133      	movs	r1, #51	; 0x33
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8b2 	bl	8005b4c <SDMMC_GetCmdResp1>
 80059e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059ea:	69fb      	ldr	r3, [r7, #28]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a00:	2302      	movs	r3, #2
 8005a02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a04:	23c0      	movs	r3, #192	; 0xc0
 8005a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a12:	f107 0308 	add.w	r3, r7, #8
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fdc1 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f982 	bl	8005d28 <SDMMC_GetCmdResp2>
 8005a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a26:	69fb      	ldr	r3, [r7, #28]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a3e:	2309      	movs	r3, #9
 8005a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a42:	23c0      	movs	r3, #192	; 0xc0
 8005a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a50:	f107 0308 	add.w	r3, r7, #8
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fda2 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f963 	bl	8005d28 <SDMMC_GetCmdResp2>
 8005a62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a64:	69fb      	ldr	r3, [r7, #28]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fd83 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	2103      	movs	r1, #3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f9c8 	bl	8005e34 <SDMMC_GetCmdResp6>
 8005aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005abe:	230d      	movs	r3, #13
 8005ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ac2:	2340      	movs	r3, #64	; 0x40
 8005ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fd62 	bl	80055a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	210d      	movs	r1, #13
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f832 	bl	8005b4c <SDMMC_GetCmdResp1>
 8005ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <SDMMC_GetCmdError+0x50>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <SDMMC_GetCmdError+0x54>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0a5b      	lsrs	r3, r3, #9
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	60fa      	str	r2, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b20:	e009      	b.n	8005b36 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f1      	beq.n	8005b12 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	22c5      	movs	r2, #197	; 0xc5
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000000 	.word	0x20000000
 8005b48:	10624dd3 	.word	0x10624dd3

08005b4c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	460b      	mov	r3, r1
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b5a:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <SDMMC_GetCmdResp1+0x1d0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a70      	ldr	r2, [pc, #448]	; (8005d20 <SDMMC_GetCmdResp1+0x1d4>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	0a5a      	lsrs	r2, r3, #9
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	61fa      	str	r2, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b7c:	e0c9      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ef      	beq.n	8005b6e <SDMMC_GetCmdResp1+0x22>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ea      	bne.n	8005b6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005baa:	2304      	movs	r3, #4
 8005bac:	e0b1      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0a6      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	22c5      	movs	r2, #197	; 0xc5
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fd12 	bl	80055f4 <SDIO_GetCommandResponse>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d001      	beq.n	8005bde <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e099      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005bde:	2100      	movs	r1, #0
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fd14 	bl	800560e <SDIO_GetResponse>
 8005be6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <SDMMC_GetCmdResp1+0x1d8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e08d      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da02      	bge.n	8005c02 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c00:	e087      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	e080      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	e079      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c2c:	e071      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c3c:	e069      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4c:	e061      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c5c:	e059      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c6c:	e051      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c7c:	e049      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8c:	e041      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9c:	e039      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cac:	e031      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cbc:	e029      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005cc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ccc:	e021      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cdc:	e019      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cec:	e011      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005cf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cfc:	e009      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d0c:	e001      	b.n	8005d12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000000 	.word	0x20000000
 8005d20:	10624dd3 	.word	0x10624dd3
 8005d24:	fdffe008 	.word	0xfdffe008

08005d28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d30:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <SDMMC_GetCmdResp2+0x88>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <SDMMC_GetCmdResp2+0x8c>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0a5b      	lsrs	r3, r3, #9
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	60fa      	str	r2, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d54:	e026      	b.n	8005da4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ef      	beq.n	8005d46 <SDMMC_GetCmdResp2+0x1e>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ea      	bne.n	8005d46 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d82:	2304      	movs	r3, #4
 8005d84:	e00e      	b.n	8005da4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e003      	b.n	8005da4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	22c5      	movs	r2, #197	; 0xc5
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	20000000 	.word	0x20000000
 8005db4:	10624dd3 	.word	0x10624dd3

08005db8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <SDMMC_GetCmdResp3+0x74>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <SDMMC_GetCmdResp3+0x78>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0a5b      	lsrs	r3, r3, #9
 8005dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005de4:	e01b      	b.n	8005e1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0ef      	beq.n	8005dd6 <SDMMC_GetCmdResp3+0x1e>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ea      	bne.n	8005dd6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e12:	2304      	movs	r3, #4
 8005e14:	e003      	b.n	8005e1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	22c5      	movs	r2, #197	; 0xc5
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	10624dd3 	.word	0x10624dd3

08005e34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e42:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <SDMMC_GetCmdResp6+0xe4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <SDMMC_GetCmdResp6+0xe8>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e66:	e052      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ef      	beq.n	8005e58 <SDMMC_GetCmdResp6+0x24>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ea      	bne.n	8005e58 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2204      	movs	r2, #4
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e94:	2304      	movs	r3, #4
 8005e96:	e03a      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e02f      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fba0 	bl	80055f4 <SDIO_GetCommandResponse>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d001      	beq.n	8005ec2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e025      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22c5      	movs	r2, #197	; 0xc5
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff fb9f 	bl	800560e <SDIO_GetResponse>
 8005ed0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e011      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ef8:	e009      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f08:	e001      	b.n	8005f0e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3

08005f20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f28:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <SDMMC_GetCmdResp7+0x94>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a22      	ldr	r2, [pc, #136]	; (8005fb8 <SDMMC_GetCmdResp7+0x98>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0a5b      	lsrs	r3, r3, #9
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1e5a      	subs	r2, r3, #1
 8005f42:	60fa      	str	r2, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f4c:	e02c      	b.n	8005fa8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ef      	beq.n	8005f3e <SDMMC_GetCmdResp7+0x1e>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1ea      	bne.n	8005f3e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2204      	movs	r2, #4
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	e014      	b.n	8005fa8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e009      	b.n	8005fa8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fa6:	2300      	movs	r3, #0
  
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	10624dd3 	.word	0x10624dd3

08005fbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fc0:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <MX_FATFS_Init+0x18>)
 8005fc2:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <MX_FATFS_Init+0x1c>)
 8005fc4:	f003 fa8a 	bl	80094dc <FATFS_LinkDriver>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <MX_FATFS_Init+0x20>)
 8005fce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200023ac 	.word	0x200023ac
 8005fd8:	0800a2e0 	.word	0x0800a2e0
 8005fdc:	200023a8 	.word	0x200023a8

08005fe0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005fe4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005ffa:	f000 f896 	bl	800612a <BSP_SD_IsDetected>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e012      	b.n	800602e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006008:	480b      	ldr	r0, [pc, #44]	; (8006038 <BSP_SD_Init+0x48>)
 800600a:	f7fd f971 	bl	80032f0 <HAL_SD_Init>
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800601c:	4806      	ldr	r0, [pc, #24]	; (8006038 <BSP_SD_Init+0x48>)
 800601e:	f7fd ff3d 	bl	8003e9c <HAL_SD_ConfigWideBusOperation>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800602c:	79fb      	ldrb	r3, [r7, #7]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20002294 	.word	0x20002294

0800603c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	4806      	ldr	r0, [pc, #24]	; (800606c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006054:	f7fd f9fa 	bl	800344c <HAL_SD_ReadBlocks_DMA>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20002294 	.word	0x20002294

08006070 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	4806      	ldr	r0, [pc, #24]	; (80060a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006088:	f7fd fac2 	bl	8003610 <HAL_SD_WriteBlocks_DMA>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20002294 	.word	0x20002294

080060a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060a8:	4805      	ldr	r0, [pc, #20]	; (80060c0 <BSP_SD_GetCardState+0x1c>)
 80060aa:	f7fd ff91 	bl	8003fd0 <HAL_SD_GetCardState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20002294 	.word	0x20002294

080060c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4803      	ldr	r0, [pc, #12]	; (80060dc <BSP_SD_GetCardInfo+0x18>)
 80060d0:	f7fd feb8 	bl	8003e44 <HAL_SD_GetCardInfo>
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20002294 	.word	0x20002294

080060e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80060e8:	f000 f818 	bl	800611c <BSP_SD_AbortCallback>
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80060fc:	f000 f98c 	bl	8006418 <BSP_SD_WriteCpltCallback>
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006110:	f000 f98e 	bl	8006430 <BSP_SD_ReadCpltCallback>
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0

}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006130:	2301      	movs	r3, #1
 8006132:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	b2db      	uxtb	r3, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800614c:	f7fb fdde 	bl	8001d0c <HAL_GetTick>
 8006150:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006152:	e006      	b.n	8006162 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006154:	f7ff ffa6 	bl	80060a4 <BSP_SD_GetCardState>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800615e:	2300      	movs	r3, #0
 8006160:	e009      	b.n	8006176 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006162:	f7fb fdd3 	bl	8001d0c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d8f0      	bhi.n	8006154 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800618a:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <SD_CheckStatus+0x38>)
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006190:	f7ff ff88 	bl	80060a4 <BSP_SD_GetCardState>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <SD_CheckStatus+0x38>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <SD_CheckStatus+0x38>)
 80061a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <SD_CheckStatus+0x38>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000009 	.word	0x20000009

080061bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80061c6:	f7ff ff13 	bl	8005ff0 <BSP_SD_Init>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ffd4 	bl	8006180 <SD_CheckStatus>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <SD_initialize+0x34>)
 80061de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <SD_initialize+0x34>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b2db      	uxtb	r3, r3
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000009 	.word	0x20000009

080061f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff ffbd 	bl	8006180 <SD_CheckStatus>
 8006206:	4603      	mov	r3, r0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006224:	f247 5030 	movw	r0, #30000	; 0x7530
 8006228:	f7ff ff8c 	bl	8006144 <SD_CheckStatusWithTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	da01      	bge.n	8006236 <SD_read+0x26>
  {
    return res;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	e03b      	b.n	80062ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68b8      	ldr	r0, [r7, #8]
 800623c:	f7ff fefe 	bl	800603c <BSP_SD_ReadBlocks_DMA>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d132      	bne.n	80062ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006246:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <SD_read+0xa8>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800624c:	f7fb fd5e 	bl	8001d0c <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006252:	bf00      	nop
 8006254:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <SD_read+0xa8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d108      	bne.n	800626e <SD_read+0x5e>
 800625c:	f7fb fd56 	bl	8001d0c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f247 522f 	movw	r2, #29999	; 0x752f
 800626a:	4293      	cmp	r3, r2
 800626c:	d9f2      	bls.n	8006254 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <SD_read+0xa8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
 800627a:	e017      	b.n	80062ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800627c:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <SD_read+0xa8>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006282:	f7fb fd43 	bl	8001d0c <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006288:	e007      	b.n	800629a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800628a:	f7ff ff0b 	bl	80060a4 <BSP_SD_GetCardState>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <SD_read+0x8a>
          {
            res = RES_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006298:	e008      	b.n	80062ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800629a:	f7fb fd37 	bl	8001d0c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d9ee      	bls.n	800628a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000098 	.word	0x20000098

080062bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80062d0:	4b24      	ldr	r3, [pc, #144]	; (8006364 <SD_write+0xa8>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80062da:	f7ff ff33 	bl	8006144 <SD_CheckStatusWithTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da01      	bge.n	80062e8 <SD_write+0x2c>
  {
    return res;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	e038      	b.n	800635a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7ff febf 	bl	8006070 <BSP_SD_WriteBlocks_DMA>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d12f      	bne.n	8006358 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80062f8:	f7fb fd08 	bl	8001d0c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062fe:	bf00      	nop
 8006300:	4b18      	ldr	r3, [pc, #96]	; (8006364 <SD_write+0xa8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <SD_write+0x5e>
 8006308:	f7fb fd00 	bl	8001d0c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f247 522f 	movw	r2, #29999	; 0x752f
 8006316:	4293      	cmp	r3, r2
 8006318:	d9f2      	bls.n	8006300 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <SD_write+0xa8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
 8006326:	e017      	b.n	8006358 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <SD_write+0xa8>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800632e:	f7fb fced 	bl	8001d0c <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006334:	e007      	b.n	8006346 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006336:	f7ff feb5 	bl	80060a4 <BSP_SD_GetCardState>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <SD_write+0x8a>
          {
            res = RES_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
            break;
 8006344:	e008      	b.n	8006358 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006346:	f7fb fce1 	bl	8001d0c <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f247 522f 	movw	r2, #29999	; 0x752f
 8006354:	4293      	cmp	r3, r2
 8006356:	d9ee      	bls.n	8006336 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000094 	.word	0x20000094

08006368 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	603a      	str	r2, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	460b      	mov	r3, r1
 8006376:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800637e:	4b25      	ldr	r3, [pc, #148]	; (8006414 <SD_ioctl+0xac>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SD_ioctl+0x28>
 800638c:	2303      	movs	r3, #3
 800638e:	e03c      	b.n	800640a <SD_ioctl+0xa2>

  switch (cmd)
 8006390:	79bb      	ldrb	r3, [r7, #6]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d834      	bhi.n	8006400 <SD_ioctl+0x98>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <SD_ioctl+0x34>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063e7 	.word	0x080063e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063b2:	e028      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80063b4:	f107 030c 	add.w	r3, r7, #12
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fe83 	bl	80060c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80063be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063ca:	e01c      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fe77 	bl	80060c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	b29a      	uxth	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063e4:	e00f      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff fe6a 	bl	80060c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	0a5a      	lsrs	r2, r3, #9
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063fe:	e002      	b.n	8006406 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006400:	2304      	movs	r3, #4
 8006402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800640a:	4618      	mov	r0, r3
 800640c:	3730      	adds	r7, #48	; 0x30
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000009 	.word	0x20000009

08006418 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <BSP_SD_WriteCpltCallback+0x14>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20000094 	.word	0x20000094

08006430 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006434:	4b03      	ldr	r3, [pc, #12]	; (8006444 <BSP_SD_ReadCpltCallback+0x14>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
}
 800643a:	bf00      	nop
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000098 	.word	0x20000098

08006448 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <disk_status+0x30>)
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	79fa      	ldrb	r2, [r7, #7]
 8006460:	4905      	ldr	r1, [pc, #20]	; (8006478 <disk_status+0x30>)
 8006462:	440a      	add	r2, r1
 8006464:	7a12      	ldrb	r2, [r2, #8]
 8006466:	4610      	mov	r0, r2
 8006468:	4798      	blx	r3
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	200000c4 	.word	0x200000c4

0800647c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	4a0d      	ldr	r2, [pc, #52]	; (80064c4 <disk_initialize+0x48>)
 800648e:	5cd3      	ldrb	r3, [r2, r3]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d111      	bne.n	80064b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	4a0b      	ldr	r2, [pc, #44]	; (80064c4 <disk_initialize+0x48>)
 8006498:	2101      	movs	r1, #1
 800649a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <disk_initialize+0x48>)
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	79fa      	ldrb	r2, [r7, #7]
 80064aa:	4906      	ldr	r1, [pc, #24]	; (80064c4 <disk_initialize+0x48>)
 80064ac:	440a      	add	r2, r1
 80064ae:	7a12      	ldrb	r2, [r2, #8]
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200000c4 	.word	0x200000c4

080064c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <disk_read+0x3c>)
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	689c      	ldr	r4, [r3, #8]
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4a07      	ldr	r2, [pc, #28]	; (8006504 <disk_read+0x3c>)
 80064e8:	4413      	add	r3, r2
 80064ea:	7a18      	ldrb	r0, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	47a0      	blx	r4
 80064f4:	4603      	mov	r3, r0
 80064f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	bf00      	nop
 8006504:	200000c4 	.word	0x200000c4

08006508 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <disk_write+0x3c>)
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68dc      	ldr	r4, [r3, #12]
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	4a07      	ldr	r2, [pc, #28]	; (8006544 <disk_write+0x3c>)
 8006528:	4413      	add	r3, r2
 800652a:	7a18      	ldrb	r0, [r3, #8]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	47a0      	blx	r4
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]
  return res;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	bf00      	nop
 8006544:	200000c4 	.word	0x200000c4

08006548 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	603a      	str	r2, [r7, #0]
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	460b      	mov	r3, r1
 8006556:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <disk_ioctl+0x38>)
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	79fa      	ldrb	r2, [r7, #7]
 8006566:	4906      	ldr	r1, [pc, #24]	; (8006580 <disk_ioctl+0x38>)
 8006568:	440a      	add	r2, r1
 800656a:	7a10      	ldrb	r0, [r2, #8]
 800656c:	79b9      	ldrb	r1, [r7, #6]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4798      	blx	r3
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
  return res;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	200000c4 	.word	0x200000c4

08006584 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3301      	adds	r3, #1
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	b21a      	sxth	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b21b      	sxth	r3, r3
 80065a0:	4313      	orrs	r3, r2
 80065a2:	b21b      	sxth	r3, r3
 80065a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065a6:	89fb      	ldrh	r3, [r7, #14]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3303      	adds	r3, #3
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	3202      	adds	r2, #2
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	3201      	adds	r2, #1
 80065da:	7812      	ldrb	r2, [r2, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	887a      	ldrh	r2, [r7, #2]
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	887a      	ldrh	r2, [r7, #2]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	1c53      	adds	r3, r2, #1
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6179      	str	r1, [r7, #20]
 80066ae:	7812      	ldrb	r2, [r2, #0]
 80066b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f1      	bne.n	80066a2 <mem_cpy+0x1a>
	}
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	617a      	str	r2, [r7, #20]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f3      	bne.n	80066da <mem_set+0x10>
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	; 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	61fa      	str	r2, [r7, #28]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	61ba      	str	r2, [r7, #24]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	1acb      	subs	r3, r1, r3
 800672c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3b01      	subs	r3, #1
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <mem_cmp+0x40>
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0eb      	beq.n	8006718 <mem_cmp+0x18>

	return r;
 8006740:	697b      	ldr	r3, [r7, #20]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3724      	adds	r7, #36	; 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006758:	e002      	b.n	8006760 <chk_chr+0x12>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3301      	adds	r3, #1
 800675e:	607b      	str	r3, [r7, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <chk_chr+0x26>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	4293      	cmp	r3, r2
 8006772:	d1f2      	bne.n	800675a <chk_chr+0xc>
	return *str;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	781b      	ldrb	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e029      	b.n	80067ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006798:	4a27      	ldr	r2, [pc, #156]	; (8006838 <chk_lock+0xb4>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4413      	add	r3, r2
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01d      	beq.n	80067e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067a6:	4a24      	ldr	r2, [pc, #144]	; (8006838 <chk_lock+0xb4>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	4413      	add	r3, r2
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d116      	bne.n	80067e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80067b8:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <chk_lock+0xb4>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d10c      	bne.n	80067e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067cc:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <chk_lock+0xb4>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	4413      	add	r3, r2
 80067d4:	3308      	adds	r3, #8
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80067dc:	429a      	cmp	r2, r3
 80067de:	d102      	bne.n	80067e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067e0:	e007      	b.n	80067f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d9d2      	bls.n	8006798 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d109      	bne.n	800680c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <chk_lock+0x80>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d101      	bne.n	8006808 <chk_lock+0x84>
 8006804:	2300      	movs	r3, #0
 8006806:	e010      	b.n	800682a <chk_lock+0xa6>
 8006808:	2312      	movs	r3, #18
 800680a:	e00e      	b.n	800682a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d108      	bne.n	8006824 <chk_lock+0xa0>
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <chk_lock+0xb4>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	4413      	add	r3, r2
 800681a:	330c      	adds	r3, #12
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006822:	d101      	bne.n	8006828 <chk_lock+0xa4>
 8006824:	2310      	movs	r3, #16
 8006826:	e000      	b.n	800682a <chk_lock+0xa6>
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	200000a4 	.word	0x200000a4

0800683c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	e002      	b.n	800684e <enq_lock+0x12>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3301      	adds	r3, #1
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d806      	bhi.n	8006862 <enq_lock+0x26>
 8006854:	4a09      	ldr	r2, [pc, #36]	; (800687c <enq_lock+0x40>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	4413      	add	r3, r2
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f2      	bne.n	8006848 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b02      	cmp	r3, #2
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	200000a4 	.word	0x200000a4

08006880 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e01f      	b.n	80068d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006890:	4a41      	ldr	r2, [pc, #260]	; (8006998 <inc_lock+0x118>)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	4413      	add	r3, r2
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d113      	bne.n	80068ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80068a2:	4a3d      	ldr	r2, [pc, #244]	; (8006998 <inc_lock+0x118>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	3304      	adds	r3, #4
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d109      	bne.n	80068ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80068b6:	4a38      	ldr	r2, [pc, #224]	; (8006998 <inc_lock+0x118>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4413      	add	r3, r2
 80068be:	3308      	adds	r3, #8
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d006      	beq.n	80068d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d9dc      	bls.n	8006890 <inc_lock+0x10>
 80068d6:	e000      	b.n	80068da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80068d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d132      	bne.n	8006946 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <inc_lock+0x6c>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d806      	bhi.n	8006900 <inc_lock+0x80>
 80068f2:	4a29      	ldr	r2, [pc, #164]	; (8006998 <inc_lock+0x118>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	4413      	add	r3, r2
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f2      	bne.n	80068e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d101      	bne.n	800690a <inc_lock+0x8a>
 8006906:	2300      	movs	r3, #0
 8006908:	e040      	b.n	800698c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4922      	ldr	r1, [pc, #136]	; (8006998 <inc_lock+0x118>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	440b      	add	r3, r1
 8006916:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	491e      	ldr	r1, [pc, #120]	; (8006998 <inc_lock+0x118>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	440b      	add	r3, r1
 8006924:	3304      	adds	r3, #4
 8006926:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	491a      	ldr	r1, [pc, #104]	; (8006998 <inc_lock+0x118>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	440b      	add	r3, r1
 8006934:	3308      	adds	r3, #8
 8006936:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006938:	4a17      	ldr	r2, [pc, #92]	; (8006998 <inc_lock+0x118>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	330c      	adds	r3, #12
 8006942:	2200      	movs	r2, #0
 8006944:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <inc_lock+0xe0>
 800694c:	4a12      	ldr	r2, [pc, #72]	; (8006998 <inc_lock+0x118>)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	4413      	add	r3, r2
 8006954:	330c      	adds	r3, #12
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <inc_lock+0xe0>
 800695c:	2300      	movs	r3, #0
 800695e:	e015      	b.n	800698c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <inc_lock+0xf8>
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <inc_lock+0x118>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	330c      	adds	r3, #12
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	e001      	b.n	800697c <inc_lock+0xfc>
 8006978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697c:	4906      	ldr	r1, [pc, #24]	; (8006998 <inc_lock+0x118>)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	440b      	add	r3, r1
 8006984:	330c      	adds	r3, #12
 8006986:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200000a4 	.word	0x200000a4

0800699c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d825      	bhi.n	80069fc <dec_lock+0x60>
		n = Files[i].ctr;
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <dec_lock+0x74>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	4413      	add	r3, r2
 80069b8:	330c      	adds	r3, #12
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c4:	d101      	bne.n	80069ca <dec_lock+0x2e>
 80069c6:	2300      	movs	r3, #0
 80069c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80069ca:	89fb      	ldrh	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <dec_lock+0x3a>
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80069d6:	4a0e      	ldr	r2, [pc, #56]	; (8006a10 <dec_lock+0x74>)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4413      	add	r3, r2
 80069de:	330c      	adds	r3, #12
 80069e0:	89fa      	ldrh	r2, [r7, #14]
 80069e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <dec_lock+0x5a>
 80069ea:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <dec_lock+0x74>)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	4413      	add	r3, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	737b      	strb	r3, [r7, #13]
 80069fa:	e001      	b.n	8006a00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80069fc:	2302      	movs	r3, #2
 80069fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a00:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	200000a4 	.word	0x200000a4

08006a14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e010      	b.n	8006a44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a22:	4a0d      	ldr	r2, [pc, #52]	; (8006a58 <clear_lock+0x44>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	4413      	add	r3, r2
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d105      	bne.n	8006a3e <clear_lock+0x2a>
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <clear_lock+0x44>)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	4413      	add	r3, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d9eb      	bls.n	8006a22 <clear_lock+0xe>
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200000a4 	.word	0x200000a4

08006a5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	78db      	ldrb	r3, [r3, #3]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d034      	beq.n	8006ada <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7858      	ldrb	r0, [r3, #1]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a80:	2301      	movs	r3, #1
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	f7ff fd40 	bl	8006508 <disk_write>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	e022      	b.n	8006ada <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d217      	bcs.n	8006ada <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	789b      	ldrb	r3, [r3, #2]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e010      	b.n	8006ad4 <sync_window+0x78>
					wsect += fs->fsize;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7858      	ldrb	r0, [r3, #1]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	f7ff fd1d 	bl	8006508 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d8eb      	bhi.n	8006ab2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d01b      	beq.n	8006b34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ffad 	bl	8006a5c <sync_window>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7858      	ldrb	r0, [r3, #1]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b16:	2301      	movs	r3, #1
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	f7ff fcd5 	bl	80064c8 <disk_read>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff87 	bl	8006a5c <sync_window>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d159      	bne.n	8006c0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d149      	bne.n	8006bf4 <sync_fs+0xb4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d145      	bne.n	8006bf4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	461a      	mov	r2, r3
 8006b74:	2100      	movs	r1, #0
 8006b76:	f7ff fda8 	bl	80066ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3334      	adds	r3, #52	; 0x34
 8006b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b82:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fd37 	bl	80065fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3334      	adds	r3, #52	; 0x34
 8006b90:	4921      	ldr	r1, [pc, #132]	; (8006c18 <sync_fs+0xd8>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fd4c 	bl	8006630 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3334      	adds	r3, #52	; 0x34
 8006b9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ba0:	491e      	ldr	r1, [pc, #120]	; (8006c1c <sync_fs+0xdc>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fd44 	bl	8006630 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3334      	adds	r3, #52	; 0x34
 8006bac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f7ff fd3a 	bl	8006630 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3334      	adds	r3, #52	; 0x34
 8006bc0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7ff fd30 	bl	8006630 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7858      	ldrb	r0, [r3, #1]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be8:	2301      	movs	r3, #1
 8006bea:	f7ff fc8d 	bl	8006508 <disk_write>
			fs->fsi_flag = 0;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fca3 	bl	8006548 <disk_ioctl>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <sync_fs+0xcc>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	41615252 	.word	0x41615252
 8006c1c:	61417272 	.word	0x61417272

08006c20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	3b02      	subs	r3, #2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d301      	bcc.n	8006c40 <clust2sect+0x20>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e008      	b.n	8006c52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	895b      	ldrh	r3, [r3, #10]
 8006c44:	461a      	mov	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	fb03 f202 	mul.w	r2, r3, r2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4413      	add	r3, r2
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d904      	bls.n	8006c7e <get_fat+0x20>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e0bb      	b.n	8006dfc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	f000 8083 	beq.w	8006d9a <get_fat+0x13c>
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	f300 80a7 	bgt.w	8006de8 <get_fat+0x18a>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d002      	beq.n	8006ca4 <get_fat+0x46>
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d056      	beq.n	8006d50 <get_fat+0xf2>
 8006ca2:	e0a1      	b.n	8006de8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	899b      	ldrh	r3, [r3, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6938      	ldr	r0, [r7, #16]
 8006cc8:	f7ff ff0c 	bl	8006ae4 <move_window>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 808d 	bne.w	8006dee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	60fa      	str	r2, [r7, #12]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	8992      	ldrh	r2, [r2, #12]
 8006cde:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce2:	fb02 f201 	mul.w	r2, r2, r1
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	899b      	ldrh	r3, [r3, #12]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d02:	4413      	add	r3, r2
 8006d04:	4619      	mov	r1, r3
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f7ff feec 	bl	8006ae4 <move_window>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d16f      	bne.n	8006df2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	899b      	ldrh	r3, [r3, #12]
 8006d16:	461a      	mov	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d1e:	fb02 f201 	mul.w	r2, r2, r1
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4413      	add	r3, r2
 8006d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <get_fat+0xe8>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	e002      	b.n	8006d4c <get_fat+0xee>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d4c:	617b      	str	r3, [r7, #20]
			break;
 8006d4e:	e055      	b.n	8006dfc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	899b      	ldrh	r3, [r3, #12]
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d64:	4413      	add	r3, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	6938      	ldr	r0, [r7, #16]
 8006d6a:	f7ff febb 	bl	8006ae4 <move_window>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d140      	bne.n	8006df6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	8992      	ldrh	r2, [r2, #12]
 8006d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d86:	fb02 f200 	mul.w	r2, r2, r0
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fbf8 	bl	8006584 <ld_word>
 8006d94:	4603      	mov	r3, r0
 8006d96:	617b      	str	r3, [r7, #20]
			break;
 8006d98:	e030      	b.n	8006dfc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	899b      	ldrh	r3, [r3, #12]
 8006da2:	089b      	lsrs	r3, r3, #2
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4619      	mov	r1, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dae:	4413      	add	r3, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	6938      	ldr	r0, [r7, #16]
 8006db4:	f7ff fe96 	bl	8006ae4 <move_window>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11d      	bne.n	8006dfa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	8992      	ldrh	r2, [r2, #12]
 8006dcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd0:	fb02 f200 	mul.w	r2, r2, r0
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fbeb 	bl	80065b4 <ld_dword>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006de4:	617b      	str	r3, [r7, #20]
			break;
 8006de6:	e009      	b.n	8006dfc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e006      	b.n	8006dfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dee:	bf00      	nop
 8006df0:	e004      	b.n	8006dfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006dfa:	bf00      	nop
		}
	}

	return val;
 8006dfc:	697b      	ldr	r3, [r7, #20]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e06:	b590      	push	{r4, r7, lr}
 8006e08:	b089      	sub	sp, #36	; 0x24
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e12:	2302      	movs	r3, #2
 8006e14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	f240 8102 	bls.w	8007022 <put_fat+0x21c>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	f080 80fc 	bcs.w	8007022 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	f000 80b6 	beq.w	8006fa0 <put_fat+0x19a>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	f300 80fd 	bgt.w	8007034 <put_fat+0x22e>
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <put_fat+0x40>
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	f000 8083 	beq.w	8006f4a <put_fat+0x144>
 8006e44:	e0f6      	b.n	8007034 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4413      	add	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	899b      	ldrh	r3, [r3, #12]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e64:	4413      	add	r3, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fe3b 	bl	8006ae4 <move_window>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e72:	7ffb      	ldrb	r3, [r7, #31]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f040 80d6 	bne.w	8007026 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	61ba      	str	r2, [r7, #24]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	8992      	ldrh	r2, [r2, #12]
 8006e8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e8e:	fb02 f200 	mul.w	r2, r2, r0
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	440b      	add	r3, r1
 8006e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00d      	beq.n	8006ebe <put_fat+0xb8>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	b25b      	sxtb	r3, r3
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	b25a      	sxtb	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	e001      	b.n	8006ec2 <put_fat+0xbc>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	899b      	ldrh	r3, [r3, #12]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006edc:	4413      	add	r3, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff fdff 	bl	8006ae4 <move_window>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 809c 	bne.w	800702a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	899b      	ldrh	r3, [r3, #12]
 8006efc:	461a      	mov	r2, r3
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f04:	fb02 f200 	mul.w	r2, r2, r0
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <put_fat+0x11a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e00e      	b.n	8006f3e <put_fat+0x138>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f023 030f 	bic.w	r3, r3, #15
 8006f2a:	b25a      	sxtb	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	0a1b      	lsrs	r3, r3, #8
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	b25b      	sxtb	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	70da      	strb	r2, [r3, #3]
			break;
 8006f48:	e074      	b.n	8007034 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	899b      	ldrh	r3, [r3, #12]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4619      	mov	r1, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f5e:	4413      	add	r3, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fdbe 	bl	8006ae4 <move_window>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f6c:	7ffb      	ldrb	r3, [r7, #31]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d15d      	bne.n	800702e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	8992      	ldrh	r2, [r2, #12]
 8006f80:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f84:	fb02 f200 	mul.w	r2, r2, r0
 8006f88:	1a9b      	subs	r3, r3, r2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fb31 	bl	80065fa <st_word>
			fs->wflag = 1;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	70da      	strb	r2, [r3, #3]
			break;
 8006f9e:	e049      	b.n	8007034 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	899b      	ldrh	r3, [r3, #12]
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff fd93 	bl	8006ae4 <move_window>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fc2:	7ffb      	ldrb	r3, [r7, #31]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d134      	bne.n	8007032 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	8992      	ldrh	r2, [r2, #12]
 8006fdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fe0:	fb02 f200 	mul.w	r2, r2, r0
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fae3 	bl	80065b4 <ld_dword>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ff4:	4323      	orrs	r3, r4
 8006ff6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	8992      	ldrh	r2, [r2, #12]
 8007006:	fbb3 f0f2 	udiv	r0, r3, r2
 800700a:	fb02 f200 	mul.w	r2, r2, r0
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	440b      	add	r3, r1
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fb0b 	bl	8006630 <st_dword>
			fs->wflag = 1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	70da      	strb	r2, [r3, #3]
			break;
 8007020:	e008      	b.n	8007034 <put_fat+0x22e>
		}
	}
 8007022:	bf00      	nop
 8007024:	e006      	b.n	8007034 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007026:	bf00      	nop
 8007028:	e004      	b.n	8007034 <put_fat+0x22e>
			if (res != FR_OK) break;
 800702a:	bf00      	nop
 800702c:	e002      	b.n	8007034 <put_fat+0x22e>
			if (res != FR_OK) break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007032:	bf00      	nop
	return res;
 8007034:	7ffb      	ldrb	r3, [r7, #31]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3724      	adds	r7, #36	; 0x24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}

0800703e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b088      	sub	sp, #32
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d904      	bls.n	8007064 <remove_chain+0x26>
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d301      	bcc.n	8007068 <remove_chain+0x2a>
 8007064:	2302      	movs	r3, #2
 8007066:	e04b      	b.n	8007100 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800706e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	69b8      	ldr	r0, [r7, #24]
 8007076:	f7ff fec6 	bl	8006e06 <put_fat>
 800707a:	4603      	mov	r3, r0
 800707c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800707e:	7ffb      	ldrb	r3, [r7, #31]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <remove_chain+0x4a>
 8007084:	7ffb      	ldrb	r3, [r7, #31]
 8007086:	e03b      	b.n	8007100 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fde7 	bl	8006c5e <get_fat>
 8007090:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d031      	beq.n	80070fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <remove_chain+0x64>
 800709e:	2302      	movs	r3, #2
 80070a0:	e02e      	b.n	8007100 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a8:	d101      	bne.n	80070ae <remove_chain+0x70>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e028      	b.n	8007100 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80070ae:	2200      	movs	r2, #0
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	69b8      	ldr	r0, [r7, #24]
 80070b4:	f7ff fea7 	bl	8006e06 <put_fat>
 80070b8:	4603      	mov	r3, r0
 80070ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80070bc:	7ffb      	ldrb	r3, [r7, #31]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <remove_chain+0x88>
 80070c2:	7ffb      	ldrb	r3, [r7, #31]
 80070c4:	e01c      	b.n	8007100 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	3b02      	subs	r3, #2
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d20b      	bcs.n	80070ec <remove_chain+0xae>
			fs->free_clst++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	791b      	ldrb	r3, [r3, #4]
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d3c6      	bcc.n	8007088 <remove_chain+0x4a>
 80070fa:	e000      	b.n	80070fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80070fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <create_chain+0x2c>
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	429a      	cmp	r2, r3
 8007132:	d31b      	bcc.n	800716c <create_chain+0x64>
 8007134:	2301      	movs	r3, #1
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e018      	b.n	800716c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff fd8e 	bl	8006c5e <get_fat>
 8007142:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d801      	bhi.n	800714e <create_chain+0x46>
 800714a:	2301      	movs	r3, #1
 800714c:	e070      	b.n	8007230 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007154:	d101      	bne.n	800715a <create_chain+0x52>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	e06a      	b.n	8007230 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d201      	bcs.n	8007168 <create_chain+0x60>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	e063      	b.n	8007230 <create_chain+0x128>
		scl = clst;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	3301      	adds	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	429a      	cmp	r2, r3
 800717e:	d307      	bcc.n	8007190 <create_chain+0x88>
				ncl = 2;
 8007180:	2302      	movs	r3, #2
 8007182:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	429a      	cmp	r2, r3
 800718a:	d901      	bls.n	8007190 <create_chain+0x88>
 800718c:	2300      	movs	r3, #0
 800718e:	e04f      	b.n	8007230 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fd63 	bl	8006c5e <get_fat>
 8007198:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d003      	beq.n	80071ae <create_chain+0xa6>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ac:	d101      	bne.n	80071b2 <create_chain+0xaa>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e03e      	b.n	8007230 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d1da      	bne.n	8007170 <create_chain+0x68>
 80071ba:	2300      	movs	r3, #0
 80071bc:	e038      	b.n	8007230 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80071be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80071c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f7ff fe1d 	bl	8006e06 <put_fat>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <create_chain+0xe2>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7ff fe10 	bl	8006e06 <put_fat>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d116      	bne.n	800721e <create_chain+0x116>
		fs->last_clst = ncl;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	3b02      	subs	r3, #2
 8007200:	429a      	cmp	r2, r3
 8007202:	d804      	bhi.n	800720e <create_chain+0x106>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	1e5a      	subs	r2, r3, #1
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	b2da      	uxtb	r2, r3
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	711a      	strb	r2, [r3, #4]
 800721c:	e007      	b.n	800722e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d102      	bne.n	800722a <create_chain+0x122>
 8007224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007228:	e000      	b.n	800722c <create_chain+0x124>
 800722a:	2301      	movs	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800722e:	69fb      	ldr	r3, [r7, #28]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	3304      	adds	r3, #4
 800724e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	899b      	ldrh	r3, [r3, #12]
 8007254:	461a      	mov	r2, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	fbb3 f3f2 	udiv	r3, r3, r2
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	8952      	ldrh	r2, [r2, #10]
 8007260:	fbb3 f3f2 	udiv	r3, r3, r2
 8007264:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	613a      	str	r2, [r7, #16]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <clmt_clust+0x42>
 8007276:	2300      	movs	r3, #0
 8007278:	e010      	b.n	800729c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d307      	bcc.n	8007292 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3304      	adds	r3, #4
 800728e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007290:	e7e9      	b.n	8007266 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007292:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072be:	d204      	bcs.n	80072ca <dir_sdi+0x22>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80072ca:	2302      	movs	r3, #2
 80072cc:	e071      	b.n	80073b2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <dir_sdi+0x46>
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d902      	bls.n	80072ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	8912      	ldrh	r2, [r2, #8]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d301      	bcc.n	8007304 <dir_sdi+0x5c>
 8007300:	2302      	movs	r3, #2
 8007302:	e056      	b.n	80073b2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	61da      	str	r2, [r3, #28]
 800730c:	e02d      	b.n	800736a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	895b      	ldrh	r3, [r3, #10]
 8007312:	461a      	mov	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	899b      	ldrh	r3, [r3, #12]
 8007318:	fb03 f302 	mul.w	r3, r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800731e:	e019      	b.n	8007354 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6979      	ldr	r1, [r7, #20]
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fc9a 	bl	8006c5e <get_fat>
 800732a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007332:	d101      	bne.n	8007338 <dir_sdi+0x90>
 8007334:	2301      	movs	r3, #1
 8007336:	e03c      	b.n	80073b2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d904      	bls.n	8007348 <dir_sdi+0xa0>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	429a      	cmp	r2, r3
 8007346:	d301      	bcc.n	800734c <dir_sdi+0xa4>
 8007348:	2302      	movs	r3, #2
 800734a:	e032      	b.n	80073b2 <dir_sdi+0x10a>
			ofs -= csz;
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	429a      	cmp	r2, r3
 800735a:	d2e1      	bcs.n	8007320 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7ff fc5e 	bl	8006c20 <clust2sect>
 8007364:	4602      	mov	r2, r0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <dir_sdi+0xd4>
 8007378:	2302      	movs	r3, #2
 800737a:	e01a      	b.n	80073b2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	899b      	ldrh	r3, [r3, #12]
 8007384:	4619      	mov	r1, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	fbb3 f3f1 	udiv	r3, r3, r1
 800738c:	441a      	add	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	899b      	ldrh	r3, [r3, #12]
 800739c:	461a      	mov	r2, r3
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a4:	fb02 f200 	mul.w	r2, r2, r0
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	18ca      	adds	r2, r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	3320      	adds	r3, #32
 80073d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <dir_next+0x28>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073e0:	d301      	bcc.n	80073e6 <dir_next+0x2c>
 80073e2:	2304      	movs	r3, #4
 80073e4:	e0bb      	b.n	800755e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	899b      	ldrh	r3, [r3, #12]
 80073ea:	461a      	mov	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80073f2:	fb02 f201 	mul.w	r2, r2, r1
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 809d 	bne.w	8007538 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	8912      	ldrh	r2, [r2, #8]
 8007418:	4293      	cmp	r3, r2
 800741a:	f0c0 808d 	bcc.w	8007538 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	61da      	str	r2, [r3, #28]
 8007424:	2304      	movs	r3, #4
 8007426:	e09a      	b.n	800755e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	899b      	ldrh	r3, [r3, #12]
 800742c:	461a      	mov	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	fbb3 f3f2 	udiv	r3, r3, r2
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	8952      	ldrh	r2, [r2, #10]
 8007438:	3a01      	subs	r2, #1
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d17b      	bne.n	8007538 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7ff fc08 	bl	8006c5e <get_fat>
 800744e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d801      	bhi.n	800745a <dir_next+0xa0>
 8007456:	2302      	movs	r3, #2
 8007458:	e081      	b.n	800755e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007460:	d101      	bne.n	8007466 <dir_next+0xac>
 8007462:	2301      	movs	r3, #1
 8007464:	e07b      	b.n	800755e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	429a      	cmp	r2, r3
 800746e:	d359      	bcc.n	8007524 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	61da      	str	r2, [r3, #28]
 800747c:	2304      	movs	r3, #4
 800747e:	e06e      	b.n	800755e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7ff fe3d 	bl	8007108 <create_chain>
 800748e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <dir_next+0xe0>
 8007496:	2307      	movs	r3, #7
 8007498:	e061      	b.n	800755e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <dir_next+0xea>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e05c      	b.n	800755e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074aa:	d101      	bne.n	80074b0 <dir_next+0xf6>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e056      	b.n	800755e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fad3 	bl	8006a5c <sync_window>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <dir_next+0x106>
 80074bc:	2301      	movs	r3, #1
 80074be:	e04e      	b.n	800755e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	899b      	ldrh	r3, [r3, #12]
 80074ca:	461a      	mov	r2, r3
 80074cc:	2100      	movs	r1, #0
 80074ce:	f7ff f8fc 	bl	80066ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	6979      	ldr	r1, [r7, #20]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff fba1 	bl	8006c20 <clust2sect>
 80074de:	4602      	mov	r2, r0
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
 80074e4:	e012      	b.n	800750c <dir_next+0x152>
						fs->wflag = 1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fab5 	bl	8006a5c <sync_window>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <dir_next+0x142>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e030      	b.n	800755e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	3301      	adds	r3, #1
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	895b      	ldrh	r3, [r3, #10]
 8007510:	461a      	mov	r2, r3
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4293      	cmp	r3, r2
 8007516:	d3e6      	bcc.n	80074e6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fb77 	bl	8006c20 <clust2sect>
 8007532:	4602      	mov	r2, r0
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	899b      	ldrh	r3, [r3, #12]
 8007548:	461a      	mov	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007550:	fb02 f200 	mul.w	r2, r2, r0
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	18ca      	adds	r2, r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff fe95 	bl	80072a8 <dir_sdi>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d12b      	bne.n	80075e0 <dir_alloc+0x7a>
		n = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	4619      	mov	r1, r3
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff faa6 	bl	8006ae4 <move_window>
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d11d      	bne.n	80075de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2be5      	cmp	r3, #229	; 0xe5
 80075aa:	d004      	beq.n	80075b6 <dir_alloc+0x50>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d102      	bne.n	80075ca <dir_alloc+0x64>
 80075c4:	e00c      	b.n	80075e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fef4 	bl	80073ba <dir_next>
 80075d2:	4603      	mov	r3, r0
 80075d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0d7      	beq.n	800758c <dir_alloc+0x26>
 80075dc:	e000      	b.n	80075e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80075de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d101      	bne.n	80075ea <dir_alloc+0x84>
 80075e6:	2307      	movs	r3, #7
 80075e8:	75fb      	strb	r3, [r7, #23]
	return res;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	331a      	adds	r3, #26
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe ffbe 	bl	8006584 <ld_word>
 8007608:	4603      	mov	r3, r0
 800760a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d109      	bne.n	8007628 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe ffb3 	bl	8006584 <ld_word>
 800761e:	4603      	mov	r3, r0
 8007620:	041b      	lsls	r3, r3, #16
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007628:	68fb      	ldr	r3, [r7, #12]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	331a      	adds	r3, #26
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	b292      	uxth	r2, r2
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe ffd6 	bl	80065fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b03      	cmp	r3, #3
 8007654:	d109      	bne.n	800766a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f103 0214 	add.w	r2, r3, #20
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	b29b      	uxth	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7fe ffc8 	bl	80065fa <st_word>
	}
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800767c:	2304      	movs	r3, #4
 800767e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007686:	e03c      	b.n	8007702 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	4619      	mov	r1, r3
 800768e:	6938      	ldr	r0, [r7, #16]
 8007690:	f7ff fa28 	bl	8006ae4 <move_window>
 8007694:	4603      	mov	r3, r0
 8007696:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d136      	bne.n	800770c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80076ac:	2304      	movs	r3, #4
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	e031      	b.n	8007716 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	330b      	adds	r3, #11
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076be:	73bb      	strb	r3, [r7, #14]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7bba      	ldrb	r2, [r7, #14]
 80076c4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2be5      	cmp	r3, #229	; 0xe5
 80076ca:	d011      	beq.n	80076f0 <dir_read+0x7e>
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b2e      	cmp	r3, #46	; 0x2e
 80076d0:	d00e      	beq.n	80076f0 <dir_read+0x7e>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b0f      	cmp	r3, #15
 80076d6:	d00b      	beq.n	80076f0 <dir_read+0x7e>
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	f023 0320 	bic.w	r3, r3, #32
 80076de:	2b08      	cmp	r3, #8
 80076e0:	bf0c      	ite	eq
 80076e2:	2301      	moveq	r3, #1
 80076e4:	2300      	movne	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00f      	beq.n	8007710 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fe61 	bl	80073ba <dir_next>
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d108      	bne.n	8007714 <dir_read+0xa2>
	while (dp->sect) {
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1be      	bne.n	8007688 <dir_read+0x16>
 800770a:	e004      	b.n	8007716 <dir_read+0xa4>
		if (res != FR_OK) break;
 800770c:	bf00      	nop
 800770e:	e002      	b.n	8007716 <dir_read+0xa4>
				break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007714:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <dir_read+0xb0>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	61da      	str	r2, [r3, #28]
	return res;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fdb3 	bl	80072a8 <dir_sdi>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <dir_find+0x24>
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	e03e      	b.n	80077ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4619      	mov	r1, r3
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f7ff f9c4 	bl	8006ae4 <move_window>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d12f      	bne.n	80077c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <dir_find+0x4e>
 8007774:	2304      	movs	r3, #4
 8007776:	75fb      	strb	r3, [r7, #23]
 8007778:	e028      	b.n	80077cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	330b      	adds	r3, #11
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007786:	b2da      	uxtb	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	330b      	adds	r3, #11
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <dir_find+0x86>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a18      	ldr	r0, [r3, #32]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3324      	adds	r3, #36	; 0x24
 80077a4:	220b      	movs	r2, #11
 80077a6:	4619      	mov	r1, r3
 80077a8:	f7fe ffaa 	bl	8006700 <mem_cmp>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077b2:	2100      	movs	r1, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fe00 	bl	80073ba <dir_next>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0c5      	beq.n	8007750 <dir_find+0x24>
 80077c4:	e002      	b.n	80077cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077ca:	bf00      	nop

	return res;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077e4:	2101      	movs	r1, #1
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff febd 	bl	8007566 <dir_alloc>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d11c      	bne.n	8007830 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	4619      	mov	r1, r3
 80077fc:	68b8      	ldr	r0, [r7, #8]
 80077fe:	f7ff f971 	bl	8006ae4 <move_window>
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d111      	bne.n	8007830 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	2220      	movs	r2, #32
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe ff58 	bl	80066ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a18      	ldr	r0, [r3, #32]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3324      	adds	r3, #36	; 0x24
 8007822:	220b      	movs	r2, #11
 8007824:	4619      	mov	r1, r3
 8007826:	f7fe ff2f 	bl	8006688 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2201      	movs	r2, #1
 800782e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff f948 	bl	8006ae4 <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	22e5      	movs	r2, #229	; 0xe5
 8007864:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800786c:	7afb      	ldrb	r3, [r7, #11]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04e      	beq.n	800792c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007896:	e021      	b.n	80078dc <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	6179      	str	r1, [r7, #20]
 80078a2:	4413      	add	r3, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d100      	bne.n	80078b0 <get_fileinfo+0x3a>
 80078ae:	e015      	b.n	80078dc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d101      	bne.n	80078ba <get_fileinfo+0x44>
 80078b6:	23e5      	movs	r3, #229	; 0xe5
 80078b8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b09      	cmp	r3, #9
 80078be:	d106      	bne.n	80078ce <get_fileinfo+0x58>
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	613a      	str	r2, [r7, #16]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4413      	add	r3, r2
 80078ca:	222e      	movs	r2, #46	; 0x2e
 80078cc:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	613a      	str	r2, [r7, #16]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	4413      	add	r3, r2
 80078d8:	7bfa      	ldrb	r2, [r7, #15]
 80078da:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b0a      	cmp	r3, #10
 80078e0:	d9da      	bls.n	8007898 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	3309      	adds	r3, #9
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	7ada      	ldrb	r2, [r3, #11]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	331c      	adds	r3, #28
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fe58 	bl	80065b4 <ld_dword>
 8007904:	4602      	mov	r2, r0
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	3316      	adds	r3, #22
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fe4f 	bl	80065b4 <ld_dword>
 8007916:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	b29a      	uxth	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	80da      	strh	r2, [r3, #6]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	0c1b      	lsrs	r3, r3, #16
 8007924:	b29a      	uxth	r2, r3
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	809a      	strh	r2, [r3, #4]
 800792a:	e000      	b.n	800792e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800792c:	bf00      	nop
}
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800794a:	220b      	movs	r2, #11
 800794c:	2120      	movs	r1, #32
 800794e:	68b8      	ldr	r0, [r7, #8]
 8007950:	f7fe febb 	bl	80066ca <mem_set>
	si = i = 0; ni = 8;
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	2308      	movs	r3, #8
 800795e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800796e:	7efb      	ldrb	r3, [r7, #27]
 8007970:	2b20      	cmp	r3, #32
 8007972:	d94e      	bls.n	8007a12 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007974:	7efb      	ldrb	r3, [r7, #27]
 8007976:	2b2f      	cmp	r3, #47	; 0x2f
 8007978:	d006      	beq.n	8007988 <create_name+0x54>
 800797a:	7efb      	ldrb	r3, [r7, #27]
 800797c:	2b5c      	cmp	r3, #92	; 0x5c
 800797e:	d110      	bne.n	80079a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007980:	e002      	b.n	8007988 <create_name+0x54>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	3301      	adds	r3, #1
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b2f      	cmp	r3, #47	; 0x2f
 8007992:	d0f6      	beq.n	8007982 <create_name+0x4e>
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b5c      	cmp	r3, #92	; 0x5c
 800799e:	d0f0      	beq.n	8007982 <create_name+0x4e>
			break;
 80079a0:	e038      	b.n	8007a14 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80079a2:	7efb      	ldrb	r3, [r7, #27]
 80079a4:	2b2e      	cmp	r3, #46	; 0x2e
 80079a6:	d003      	beq.n	80079b0 <create_name+0x7c>
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d30c      	bcc.n	80079ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d002      	beq.n	80079bc <create_name+0x88>
 80079b6:	7efb      	ldrb	r3, [r7, #27]
 80079b8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ba:	d001      	beq.n	80079c0 <create_name+0x8c>
 80079bc:	2306      	movs	r3, #6
 80079be:	e044      	b.n	8007a4a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80079c0:	2308      	movs	r3, #8
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	230b      	movs	r3, #11
 80079c6:	617b      	str	r3, [r7, #20]
			continue;
 80079c8:	e022      	b.n	8007a10 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80079ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da04      	bge.n	80079dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80079d2:	7efb      	ldrb	r3, [r7, #27]
 80079d4:	3b80      	subs	r3, #128	; 0x80
 80079d6:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <create_name+0x120>)
 80079d8:	5cd3      	ldrb	r3, [r2, r3]
 80079da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80079dc:	7efb      	ldrb	r3, [r7, #27]
 80079de:	4619      	mov	r1, r3
 80079e0:	481d      	ldr	r0, [pc, #116]	; (8007a58 <create_name+0x124>)
 80079e2:	f7fe feb4 	bl	800674e <chk_chr>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <create_name+0xbc>
 80079ec:	2306      	movs	r3, #6
 80079ee:	e02c      	b.n	8007a4a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80079f0:	7efb      	ldrb	r3, [r7, #27]
 80079f2:	2b60      	cmp	r3, #96	; 0x60
 80079f4:	d905      	bls.n	8007a02 <create_name+0xce>
 80079f6:	7efb      	ldrb	r3, [r7, #27]
 80079f8:	2b7a      	cmp	r3, #122	; 0x7a
 80079fa:	d802      	bhi.n	8007a02 <create_name+0xce>
 80079fc:	7efb      	ldrb	r3, [r7, #27]
 80079fe:	3b20      	subs	r3, #32
 8007a00:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	613a      	str	r2, [r7, #16]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	7efa      	ldrb	r2, [r7, #27]
 8007a0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007a10:	e7a6      	b.n	8007960 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	441a      	add	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <create_name+0xf4>
 8007a24:	2306      	movs	r3, #6
 8007a26:	e010      	b.n	8007a4a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2be5      	cmp	r3, #229	; 0xe5
 8007a2e:	d102      	bne.n	8007a36 <create_name+0x102>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2205      	movs	r2, #5
 8007a34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a36:	7efb      	ldrb	r3, [r7, #27]
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d801      	bhi.n	8007a40 <create_name+0x10c>
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	e000      	b.n	8007a42 <create_name+0x10e>
 8007a40:	2200      	movs	r2, #0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	330b      	adds	r3, #11
 8007a46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007a48:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	0800a2f4 	.word	0x0800a2f4
 8007a58:	0800a27c 	.word	0x0800a27c

08007a5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a70:	e002      	b.n	8007a78 <follow_path+0x1c>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8007a7e:	d0f8      	beq.n	8007a72 <follow_path+0x16>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b5c      	cmp	r3, #92	; 0x5c
 8007a86:	d0f4      	beq.n	8007a72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b1f      	cmp	r3, #31
 8007a94:	d80a      	bhi.n	8007aac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2280      	movs	r2, #128	; 0x80
 8007a9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fc01 	bl	80072a8 <dir_sdi>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
 8007aaa:	e048      	b.n	8007b3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007aac:	463b      	mov	r3, r7
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ff3f 	bl	8007934 <create_name>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d139      	bne.n	8007b34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fe33 	bl	800772c <dir_find>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ad0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d12c      	bne.n	8007b38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d127      	bne.n	8007b38 <follow_path+0xdc>
 8007ae8:	2305      	movs	r3, #5
 8007aea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007aec:	e024      	b.n	8007b38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d121      	bne.n	8007b3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	799b      	ldrb	r3, [r3, #6]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b04:	2305      	movs	r3, #5
 8007b06:	75fb      	strb	r3, [r7, #23]
 8007b08:	e019      	b.n	8007b3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	8992      	ldrh	r2, [r2, #12]
 8007b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b1c:	fb02 f200 	mul.w	r2, r2, r0
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	440b      	add	r3, r1
 8007b24:	4619      	mov	r1, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fd64 	bl	80075f4 <ld_clust>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b32:	e7bb      	b.n	8007aac <follow_path+0x50>
			if (res != FR_OK) break;
 8007b34:	bf00      	nop
 8007b36:	e002      	b.n	8007b3e <follow_path+0xe2>
				break;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b3c:	bf00      	nop
			}
		}
	}

	return res;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d031      	beq.n	8007bc2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e002      	b.n	8007b6c <get_ldnumber+0x24>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d903      	bls.n	8007b7c <get_ldnumber+0x34>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b3a      	cmp	r3, #58	; 0x3a
 8007b7a:	d1f4      	bne.n	8007b66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b3a      	cmp	r3, #58	; 0x3a
 8007b82:	d11c      	bne.n	8007bbe <get_ldnumber+0x76>
			tp = *path;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	60fa      	str	r2, [r7, #12]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	3b30      	subs	r3, #48	; 0x30
 8007b94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	d80e      	bhi.n	8007bba <get_ldnumber+0x72>
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d10a      	bne.n	8007bba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <get_ldnumber+0x72>
					vol = (int)i;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	e002      	b.n	8007bc4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007bc2:	693b      	ldr	r3, [r7, #16]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	371c      	adds	r7, #28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	70da      	strb	r2, [r3, #3]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe ff7a 	bl	8006ae4 <move_window>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <check_fs+0x2a>
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	e038      	b.n	8007c6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3334      	adds	r3, #52	; 0x34
 8007bfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fcbe 	bl	8006584 <ld_word>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d001      	beq.n	8007c18 <check_fs+0x48>
 8007c14:	2303      	movs	r3, #3
 8007c16:	e029      	b.n	8007c6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c1e:	2be9      	cmp	r3, #233	; 0xe9
 8007c20:	d009      	beq.n	8007c36 <check_fs+0x66>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c28:	2beb      	cmp	r3, #235	; 0xeb
 8007c2a:	d11e      	bne.n	8007c6a <check_fs+0x9a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c32:	2b90      	cmp	r3, #144	; 0x90
 8007c34:	d119      	bne.n	8007c6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3334      	adds	r3, #52	; 0x34
 8007c3a:	3336      	adds	r3, #54	; 0x36
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fcb9 	bl	80065b4 <ld_dword>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c48:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <check_fs+0xa4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d101      	bne.n	8007c52 <check_fs+0x82>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e00c      	b.n	8007c6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3334      	adds	r3, #52	; 0x34
 8007c56:	3352      	adds	r3, #82	; 0x52
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fcab 	bl	80065b4 <ld_dword>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4a05      	ldr	r2, [pc, #20]	; (8007c78 <check_fs+0xa8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <check_fs+0x9a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c6a:	2302      	movs	r3, #2
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	00544146 	.word	0x00544146
 8007c78:	33544146 	.word	0x33544146

08007c7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b096      	sub	sp, #88	; 0x58
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff ff59 	bl	8007b48 <get_ldnumber>
 8007c96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	da01      	bge.n	8007ca2 <find_volume+0x26>
 8007c9e:	230b      	movs	r3, #11
 8007ca0:	e265      	b.n	800816e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ca2:	4ab0      	ldr	r2, [pc, #704]	; (8007f64 <find_volume+0x2e8>)
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007caa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <find_volume+0x3a>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	e25b      	b.n	800816e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01a      	beq.n	8007d02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fbb9 	bl	8006448 <disk_status>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10c      	bne.n	8007d02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <find_volume+0x82>
 8007cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007cfa:	230a      	movs	r3, #10
 8007cfc:	e237      	b.n	800816e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e235      	b.n	800816e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fbb1 	bl	800647c <disk_initialize>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e21e      	b.n	800816e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <find_volume+0xca>
 8007d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d42:	230a      	movs	r3, #10
 8007d44:	e213      	b.n	800816e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	7858      	ldrb	r0, [r3, #1]
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2102      	movs	r1, #2
 8007d52:	f7fe fbf9 	bl	8006548 <disk_ioctl>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <find_volume+0xe4>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e206      	b.n	800816e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	899b      	ldrh	r3, [r3, #12]
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d68:	d80d      	bhi.n	8007d86 <find_volume+0x10a>
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6c:	899b      	ldrh	r3, [r3, #12]
 8007d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d72:	d308      	bcc.n	8007d86 <find_volume+0x10a>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	899b      	ldrh	r3, [r3, #12]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	899b      	ldrh	r3, [r3, #12]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <find_volume+0x10e>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e1f1      	b.n	800816e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d92:	f7ff ff1d 	bl	8007bd0 <check_fs>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d14b      	bne.n	8007e3c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007da4:	2300      	movs	r3, #0
 8007da6:	643b      	str	r3, [r7, #64]	; 0x40
 8007da8:	e01f      	b.n	8007dea <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007db8:	4413      	add	r3, r2
 8007dba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d006      	beq.n	8007dd4 <find_volume+0x158>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	3308      	adds	r3, #8
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fbf2 	bl	80065b4 <ld_dword>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	e000      	b.n	8007dd6 <find_volume+0x15a>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007dde:	440b      	add	r3, r1
 8007de0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	3301      	adds	r3, #1
 8007de8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d9dc      	bls.n	8007daa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007df0:	2300      	movs	r3, #0
 8007df2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <find_volume+0x184>
 8007dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e08:	4413      	add	r3, r2
 8007e0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <find_volume+0x1a6>
 8007e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e1a:	f7ff fed9 	bl	8007bd0 <check_fs>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	e000      	b.n	8007e24 <find_volume+0x1a8>
 8007e22:	2303      	movs	r3, #3
 8007e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d905      	bls.n	8007e3c <find_volume+0x1c0>
 8007e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e32:	3301      	adds	r3, #1
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
 8007e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d9e1      	bls.n	8007e00 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d101      	bne.n	8007e48 <find_volume+0x1cc>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e192      	b.n	800816e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d901      	bls.n	8007e54 <find_volume+0x1d8>
 8007e50:	230d      	movs	r3, #13
 8007e52:	e18c      	b.n	800816e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	3334      	adds	r3, #52	; 0x34
 8007e58:	330b      	adds	r3, #11
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fb92 	bl	8006584 <ld_word>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	899b      	ldrh	r3, [r3, #12]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <find_volume+0x1f4>
 8007e6c:	230d      	movs	r3, #13
 8007e6e:	e17e      	b.n	800816e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	3334      	adds	r3, #52	; 0x34
 8007e74:	3316      	adds	r3, #22
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fb84 	bl	8006584 <ld_word>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <find_volume+0x218>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	3334      	adds	r3, #52	; 0x34
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fb91 	bl	80065b4 <ld_dword>
 8007e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	789b      	ldrb	r3, [r3, #2]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d005      	beq.n	8007eb8 <find_volume+0x23c>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	789b      	ldrb	r3, [r3, #2]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d001      	beq.n	8007eb8 <find_volume+0x23c>
 8007eb4:	230d      	movs	r3, #13
 8007eb6:	e15a      	b.n	800816e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
 8007ec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	895b      	ldrh	r3, [r3, #10]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <find_volume+0x270>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	895b      	ldrh	r3, [r3, #10]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <find_volume+0x274>
 8007eec:	230d      	movs	r3, #13
 8007eee:	e13e      	b.n	800816e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	3334      	adds	r3, #52	; 0x34
 8007ef4:	3311      	adds	r3, #17
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fb44 	bl	8006584 <ld_word>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	891b      	ldrh	r3, [r3, #8]
 8007f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0a:	8992      	ldrh	r2, [r2, #12]
 8007f0c:	0952      	lsrs	r2, r2, #5
 8007f0e:	b292      	uxth	r2, r2
 8007f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f14:	fb02 f201 	mul.w	r2, r2, r1
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <find_volume+0x2a8>
 8007f20:	230d      	movs	r3, #13
 8007f22:	e124      	b.n	800816e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	3334      	adds	r3, #52	; 0x34
 8007f28:	3313      	adds	r3, #19
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fb2a 	bl	8006584 <ld_word>
 8007f30:	4603      	mov	r3, r0
 8007f32:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <find_volume+0x2cc>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	3334      	adds	r3, #52	; 0x34
 8007f3e:	3320      	adds	r3, #32
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe fb37 	bl	80065b4 <ld_dword>
 8007f46:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	3334      	adds	r3, #52	; 0x34
 8007f4c:	330e      	adds	r3, #14
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fb18 	bl	8006584 <ld_word>
 8007f54:	4603      	mov	r3, r0
 8007f56:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <find_volume+0x2ec>
 8007f5e:	230d      	movs	r3, #13
 8007f60:	e105      	b.n	800816e <find_volume+0x4f2>
 8007f62:	bf00      	nop
 8007f64:	2000009c 	.word	0x2000009c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6c:	4413      	add	r3, r2
 8007f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f70:	8911      	ldrh	r1, [r2, #8]
 8007f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f74:	8992      	ldrh	r2, [r2, #12]
 8007f76:	0952      	lsrs	r2, r2, #5
 8007f78:	b292      	uxth	r2, r2
 8007f7a:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	4413      	add	r3, r2
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d201      	bcs.n	8007f90 <find_volume+0x314>
 8007f8c:	230d      	movs	r3, #13
 8007f8e:	e0ee      	b.n	800816e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f98:	8952      	ldrh	r2, [r2, #10]
 8007f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <find_volume+0x32e>
 8007fa6:	230d      	movs	r3, #13
 8007fa8:	e0e1      	b.n	800816e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007faa:	2303      	movs	r3, #3
 8007fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d802      	bhi.n	8007fc0 <find_volume+0x344>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d802      	bhi.n	8007fd0 <find_volume+0x354>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	1c9a      	adds	r2, r3, #2
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fdc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	441a      	add	r2, r3
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007fe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	441a      	add	r2, r3
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d11e      	bne.n	8008038 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	3334      	adds	r3, #52	; 0x34
 8007ffe:	332a      	adds	r3, #42	; 0x2a
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fabf 	bl	8006584 <ld_word>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <find_volume+0x394>
 800800c:	230d      	movs	r3, #13
 800800e:	e0ae      	b.n	800816e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	891b      	ldrh	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <find_volume+0x3a0>
 8008018:	230d      	movs	r3, #13
 800801a:	e0a8      	b.n	800816e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	3334      	adds	r3, #52	; 0x34
 8008020:	332c      	adds	r3, #44	; 0x2c
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fac6 	bl	80065b4 <ld_dword>
 8008028:	4602      	mov	r2, r0
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	647b      	str	r3, [r7, #68]	; 0x44
 8008036:	e01f      	b.n	8008078 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	891b      	ldrh	r3, [r3, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <find_volume+0x3c8>
 8008040:	230d      	movs	r3, #13
 8008042:	e094      	b.n	800816e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804a:	441a      	add	r2, r3
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008054:	2b02      	cmp	r3, #2
 8008056:	d103      	bne.n	8008060 <find_volume+0x3e4>
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	e00a      	b.n	8008076 <find_volume+0x3fa>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	4613      	mov	r3, r2
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	4413      	add	r3, r2
 800806a:	085a      	lsrs	r2, r3, #1
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	899b      	ldrh	r3, [r3, #12]
 8008080:	4619      	mov	r1, r3
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	440b      	add	r3, r1
 8008086:	3b01      	subs	r3, #1
 8008088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800808a:	8989      	ldrh	r1, [r1, #12]
 800808c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008090:	429a      	cmp	r2, r3
 8008092:	d201      	bcs.n	8008098 <find_volume+0x41c>
 8008094:	230d      	movs	r3, #13
 8008096:	e06a      	b.n	800816e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809e:	615a      	str	r2, [r3, #20]
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	695a      	ldr	r2, [r3, #20]
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	2280      	movs	r2, #128	; 0x80
 80080ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80080ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d149      	bne.n	800814a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	3334      	adds	r3, #52	; 0x34
 80080ba:	3330      	adds	r3, #48	; 0x30
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fa61 	bl	8006584 <ld_word>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d140      	bne.n	800814a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ca:	3301      	adds	r3, #1
 80080cc:	4619      	mov	r1, r3
 80080ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080d0:	f7fe fd08 	bl	8006ae4 <move_window>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d137      	bne.n	800814a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	2200      	movs	r2, #0
 80080de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	3334      	adds	r3, #52	; 0x34
 80080e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe fa4b 	bl	8006584 <ld_word>
 80080ee:	4603      	mov	r3, r0
 80080f0:	461a      	mov	r2, r3
 80080f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d127      	bne.n	800814a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	3334      	adds	r3, #52	; 0x34
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fa58 	bl	80065b4 <ld_dword>
 8008104:	4603      	mov	r3, r0
 8008106:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <find_volume+0x4fc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d11e      	bne.n	800814a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	3334      	adds	r3, #52	; 0x34
 8008110:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fa4d 	bl	80065b4 <ld_dword>
 800811a:	4603      	mov	r3, r0
 800811c:	4a17      	ldr	r2, [pc, #92]	; (800817c <find_volume+0x500>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d113      	bne.n	800814a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	3334      	adds	r3, #52	; 0x34
 8008126:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe fa42 	bl	80065b4 <ld_dword>
 8008130:	4602      	mov	r2, r0
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	3334      	adds	r3, #52	; 0x34
 800813a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fa38 	bl	80065b4 <ld_dword>
 8008144:	4602      	mov	r2, r0
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008150:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <find_volume+0x504>)
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <find_volume+0x504>)
 800815c:	801a      	strh	r2, [r3, #0]
 800815e:	4b08      	ldr	r3, [pc, #32]	; (8008180 <find_volume+0x504>)
 8008160:	881a      	ldrh	r2, [r3, #0]
 8008162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008164:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008168:	f7fe fc54 	bl	8006a14 <clear_lock>
#endif
	return FR_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3758      	adds	r7, #88	; 0x58
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	41615252 	.word	0x41615252
 800817c:	61417272 	.word	0x61417272
 8008180:	200000a0 	.word	0x200000a0

08008184 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800818e:	2309      	movs	r3, #9
 8008190:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01c      	beq.n	80081d2 <validate+0x4e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d018      	beq.n	80081d2 <validate+0x4e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d013      	beq.n	80081d2 <validate+0x4e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	889a      	ldrh	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	88db      	ldrh	r3, [r3, #6]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d10c      	bne.n	80081d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f942 	bl	8006448 <disk_status>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <validate+0x4e>
			res = FR_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <validate+0x5a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	e000      	b.n	80081e0 <validate+0x5c>
 80081de:	2300      	movs	r3, #0
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	6013      	str	r3, [r2, #0]
	return res;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fc9e 	bl	8007b48 <get_ldnumber>
 800820c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da01      	bge.n	8008218 <f_mount+0x28>
 8008214:	230b      	movs	r3, #11
 8008216:	e02b      	b.n	8008270 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <f_mount+0x88>)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008220:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008228:	69b8      	ldr	r0, [r7, #24]
 800822a:	f7fe fbf3 	bl	8006a14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	490d      	ldr	r1, [pc, #52]	; (8008278 <f_mount+0x88>)
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <f_mount+0x66>
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <f_mount+0x6a>
 8008256:	2300      	movs	r3, #0
 8008258:	e00a      	b.n	8008270 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800825a:	f107 010c 	add.w	r1, r7, #12
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	2200      	movs	r2, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff fd09 	bl	8007c7c <find_volume>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800826e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	2000009c 	.word	0x2000009c

0800827c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b098      	sub	sp, #96	; 0x60
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <f_open+0x18>
 8008290:	2309      	movs	r3, #9
 8008292:	e1bb      	b.n	800860c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800829a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	f107 0110 	add.w	r1, r7, #16
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fce8 	bl	8007c7c <find_volume>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80082b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 819f 	bne.w	80085fa <f_open+0x37e>
		dj.obj.fs = fs;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	f107 0314 	add.w	r3, r7, #20
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fbc7 	bl	8007a5c <follow_path>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80082dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da03      	bge.n	80082ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80082e6:	2306      	movs	r3, #6
 80082e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082ec:	e011      	b.n	8008312 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fa3c 	bl	8006784 <chk_lock>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f003 031c 	and.w	r3, r3, #28
 8008318:	2b00      	cmp	r3, #0
 800831a:	d07f      	beq.n	800841c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800831c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008328:	2b04      	cmp	r3, #4
 800832a:	d10e      	bne.n	800834a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800832c:	f7fe fa86 	bl	800683c <enq_lock>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d006      	beq.n	8008344 <f_open+0xc8>
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fa4b 	bl	80077d6 <dir_register>
 8008340:	4603      	mov	r3, r0
 8008342:	e000      	b.n	8008346 <f_open+0xca>
 8008344:	2312      	movs	r3, #18
 8008346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	71fb      	strb	r3, [r7, #7]
 8008352:	e010      	b.n	8008376 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008354:	7ebb      	ldrb	r3, [r7, #26]
 8008356:	f003 0311 	and.w	r3, r3, #17
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <f_open+0xea>
					res = FR_DENIED;
 800835e:	2307      	movs	r3, #7
 8008360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008364:	e007      	b.n	8008376 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <f_open+0xfa>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d168      	bne.n	8008450 <f_open+0x1d4>
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d063      	beq.n	8008450 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008388:	f7fd fe2a 	bl	8005fe0 <get_fattime>
 800838c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	330e      	adds	r3, #14
 8008392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe f94b 	bl	8006630 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	3316      	adds	r3, #22
 800839e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe f945 	bl	8006630 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	330b      	adds	r3, #11
 80083aa:	2220      	movs	r2, #32
 80083ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff f91d 	bl	80075f4 <ld_clust>
 80083ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083c0:	2200      	movs	r2, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff f935 	bl	8007632 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	331c      	adds	r3, #28
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe f92e 	bl	8006630 <st_dword>
					fs->wflag = 1;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d037      	beq.n	8008450 <f_open+0x1d4>
						dw = fs->winsect;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	2200      	movs	r2, #0
 80083ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe fe25 	bl	800703e <remove_chain>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80083fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d126      	bne.n	8008450 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fb6c 	bl	8006ae4 <move_window>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008416:	3a01      	subs	r2, #1
 8008418:	611a      	str	r2, [r3, #16]
 800841a:	e019      	b.n	8008450 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800841c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d115      	bne.n	8008450 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008424:	7ebb      	ldrb	r3, [r7, #26]
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <f_open+0x1ba>
					res = FR_NO_FILE;
 800842e:	2304      	movs	r3, #4
 8008430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008434:	e00c      	b.n	8008450 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d007      	beq.n	8008450 <f_open+0x1d4>
 8008440:	7ebb      	ldrb	r3, [r7, #26]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <f_open+0x1d4>
						res = FR_DENIED;
 800844a:	2307      	movs	r3, #7
 800844c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008450:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008454:	2b00      	cmp	r3, #0
 8008456:	d128      	bne.n	80084aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008468:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	bf14      	ite	ne
 8008482:	2301      	movne	r3, #1
 8008484:	2300      	moveq	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	f107 0314 	add.w	r3, r7, #20
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe f9f5 	bl	8006880 <inc_lock>
 8008496:	4602      	mov	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <f_open+0x22e>
 80084a4:	2302      	movs	r3, #2
 80084a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 80a3 	bne.w	80085fa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff f89a 	bl	80075f4 <ld_clust>
 80084c0:	4602      	mov	r2, r0
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	331c      	adds	r3, #28
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe f872 	bl	80065b4 <ld_dword>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	88da      	ldrh	r2, [r3, #6]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3330      	adds	r3, #48	; 0x30
 8008506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe f8dc 	bl	80066ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d06e      	beq.n	80085fa <f_open+0x37e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d06a      	beq.n	80085fa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	895b      	ldrh	r3, [r3, #10]
 8008530:	461a      	mov	r2, r3
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	899b      	ldrh	r3, [r3, #12]
 8008536:	fb03 f302 	mul.w	r3, r3, r2
 800853a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	657b      	str	r3, [r7, #84]	; 0x54
 8008548:	e016      	b.n	8008578 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fb85 	bl	8006c5e <get_fat>
 8008554:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008558:	2b01      	cmp	r3, #1
 800855a:	d802      	bhi.n	8008562 <f_open+0x2e6>
 800855c:	2302      	movs	r3, #2
 800855e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008568:	d102      	bne.n	8008570 <f_open+0x2f4>
 800856a:	2301      	movs	r3, #1
 800856c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	657b      	str	r3, [r7, #84]	; 0x54
 8008578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <f_open+0x30c>
 8008580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008584:	429a      	cmp	r2, r3
 8008586:	d8e0      	bhi.n	800854a <f_open+0x2ce>
				}
				fp->clust = clst;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800858c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800858e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008592:	2b00      	cmp	r3, #0
 8008594:	d131      	bne.n	80085fa <f_open+0x37e>
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	899b      	ldrh	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800859e:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a2:	fb02 f201 	mul.w	r2, r2, r1
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d026      	beq.n	80085fa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fb35 	bl	8006c20 <clust2sect>
 80085b6:	6478      	str	r0, [r7, #68]	; 0x44
 80085b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <f_open+0x34a>
						res = FR_INT_ERR;
 80085be:	2302      	movs	r3, #2
 80085c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085c4:	e019      	b.n	80085fa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	899b      	ldrh	r3, [r3, #12]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80085d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d4:	441a      	add	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	7858      	ldrb	r0, [r3, #1]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	2301      	movs	r3, #1
 80085ea:	f7fd ff6d 	bl	80064c8 <disk_read>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <f_open+0x37e>
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <f_open+0x38c>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800860c:	4618      	mov	r0, r3
 800860e:	3760      	adds	r7, #96	; 0x60
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08e      	sub	sp, #56	; 0x38
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f107 0214 	add.w	r2, r7, #20
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fda5 	bl	8008184 <validate>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008644:	2b00      	cmp	r3, #0
 8008646:	d107      	bne.n	8008658 <f_read+0x44>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	7d5b      	ldrb	r3, [r3, #21]
 800864c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <f_read+0x4a>
 8008658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800865c:	e135      	b.n	80088ca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	7d1b      	ldrb	r3, [r3, #20]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <f_read+0x5a>
 800866a:	2307      	movs	r3, #7
 800866c:	e12d      	b.n	80088ca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	429a      	cmp	r2, r3
 8008680:	f240 811e 	bls.w	80088c0 <f_read+0x2ac>
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008688:	e11a      	b.n	80088c0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	8992      	ldrh	r2, [r2, #12]
 8008692:	fbb3 f1f2 	udiv	r1, r3, r2
 8008696:	fb02 f201 	mul.w	r2, r2, r1
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 80d5 	bne.w	800884c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	8992      	ldrh	r2, [r2, #12]
 80086aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	8952      	ldrh	r2, [r2, #10]
 80086b2:	3a01      	subs	r2, #1
 80086b4:	4013      	ands	r3, r2
 80086b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d12f      	bne.n	800871e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	633b      	str	r3, [r7, #48]	; 0x30
 80086cc:	e013      	b.n	80086f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7fe fdab 	bl	8007238 <clmt_clust>
 80086e2:	6338      	str	r0, [r7, #48]	; 0x30
 80086e4:	e007      	b.n	80086f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fe fab5 	bl	8006c5e <get_fat>
 80086f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d804      	bhi.n	8008706 <f_read+0xf2>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2202      	movs	r2, #2
 8008700:	755a      	strb	r2, [r3, #21]
 8008702:	2302      	movs	r3, #2
 8008704:	e0e1      	b.n	80088ca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800870c:	d104      	bne.n	8008718 <f_read+0x104>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	755a      	strb	r2, [r3, #21]
 8008714:	2301      	movs	r3, #1
 8008716:	e0d8      	b.n	80088ca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe fa7a 	bl	8006c20 <clust2sect>
 800872c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d104      	bne.n	800873e <f_read+0x12a>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2202      	movs	r2, #2
 8008738:	755a      	strb	r2, [r3, #21]
 800873a:	2302      	movs	r3, #2
 800873c:	e0c5      	b.n	80088ca <f_read+0x2b6>
			sect += csect;
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	899b      	ldrh	r3, [r3, #12]
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d041      	beq.n	80087de <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	4413      	add	r3, r2
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	8952      	ldrh	r2, [r2, #10]
 8008764:	4293      	cmp	r3, r2
 8008766:	d905      	bls.n	8008774 <f_read+0x160>
					cc = fs->csize - csect;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	895b      	ldrh	r3, [r3, #10]
 800876c:	461a      	mov	r2, r3
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	7858      	ldrb	r0, [r3, #1]
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800877e:	f7fd fea3 	bl	80064c8 <disk_read>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <f_read+0x17e>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	755a      	strb	r2, [r3, #21]
 800878e:	2301      	movs	r3, #1
 8008790:	e09b      	b.n	80088ca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	7d1b      	ldrb	r3, [r3, #20]
 8008796:	b25b      	sxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	da18      	bge.n	80087ce <f_read+0x1ba>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d911      	bls.n	80087ce <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1a      	ldr	r2, [r3, #32]
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	8992      	ldrh	r2, [r2, #12]
 80087b6:	fb02 f303 	mul.w	r3, r2, r3
 80087ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087bc:	18d0      	adds	r0, r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	899b      	ldrh	r3, [r3, #12]
 80087c8:	461a      	mov	r2, r3
 80087ca:	f7fd ff5d 	bl	8006688 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80087dc:	e05c      	b.n	8008898 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d02e      	beq.n	8008846 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	7d1b      	ldrb	r3, [r3, #20]
 80087ec:	b25b      	sxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da18      	bge.n	8008824 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	7858      	ldrb	r0, [r3, #1]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1a      	ldr	r2, [r3, #32]
 8008800:	2301      	movs	r3, #1
 8008802:	f7fd fe81 	bl	8006508 <disk_write>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <f_read+0x202>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2201      	movs	r2, #1
 8008810:	755a      	strb	r2, [r3, #21]
 8008812:	2301      	movs	r3, #1
 8008814:	e059      	b.n	80088ca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	7d1b      	ldrb	r3, [r3, #20]
 800881a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881e:	b2da      	uxtb	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	7858      	ldrb	r0, [r3, #1]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800882e:	2301      	movs	r3, #1
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	f7fd fe49 	bl	80064c8 <disk_read>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d004      	beq.n	8008846 <f_read+0x232>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	755a      	strb	r2, [r3, #21]
 8008842:	2301      	movs	r3, #1
 8008844:	e041      	b.n	80088ca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	899b      	ldrh	r3, [r3, #12]
 8008850:	4618      	mov	r0, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	8992      	ldrh	r2, [r2, #12]
 800885a:	fbb3 f1f2 	udiv	r1, r3, r2
 800885e:	fb02 f201 	mul.w	r2, r2, r1
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	1ac3      	subs	r3, r0, r3
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d901      	bls.n	8008874 <f_read+0x260>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	8992      	ldrh	r2, [r2, #12]
 8008882:	fbb3 f0f2 	udiv	r0, r3, r2
 8008886:	fb02 f200 	mul.w	r2, r2, r0
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	440b      	add	r3, r1
 800888e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008890:	4619      	mov	r1, r3
 8008892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008894:	f7fd fef8 	bl	8006688 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	4413      	add	r3, r2
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	441a      	add	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	619a      	str	r2, [r3, #24]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	441a      	add	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f47f aee1 	bne.w	800868a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3738      	adds	r7, #56	; 0x38
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b08c      	sub	sp, #48	; 0x30
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f107 0210 	add.w	r2, r7, #16
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fc46 	bl	8008184 <validate>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008902:	2b00      	cmp	r3, #0
 8008904:	d107      	bne.n	8008916 <f_write+0x44>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	7d5b      	ldrb	r3, [r3, #21]
 800890a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800890e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <f_write+0x4a>
 8008916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800891a:	e16a      	b.n	8008bf2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <f_write+0x5a>
 8008928:	2307      	movs	r3, #7
 800892a:	e162      	b.n	8008bf2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	441a      	add	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	429a      	cmp	r2, r3
 800893a:	f080 814c 	bcs.w	8008bd6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	43db      	mvns	r3, r3
 8008944:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008946:	e146      	b.n	8008bd6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	8992      	ldrh	r2, [r2, #12]
 8008950:	fbb3 f1f2 	udiv	r1, r3, r2
 8008954:	fb02 f201 	mul.w	r2, r2, r1
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 80f1 	bne.w	8008b42 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	8992      	ldrh	r2, [r2, #12]
 8008968:	fbb3 f3f2 	udiv	r3, r3, r2
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	8952      	ldrh	r2, [r2, #10]
 8008970:	3a01      	subs	r2, #1
 8008972:	4013      	ands	r3, r2
 8008974:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d143      	bne.n	8008a04 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10c      	bne.n	800899e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11a      	bne.n	80089c6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fbb7 	bl	8007108 <create_chain>
 800899a:	62b8      	str	r0, [r7, #40]	; 0x28
 800899c:	e013      	b.n	80089c6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7fe fc43 	bl	8007238 <clmt_clust>
 80089b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80089b4:	e007      	b.n	80089c6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe fba2 	bl	8007108 <create_chain>
 80089c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8109 	beq.w	8008be0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d104      	bne.n	80089de <f_write+0x10c>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2202      	movs	r2, #2
 80089d8:	755a      	strb	r2, [r3, #21]
 80089da:	2302      	movs	r3, #2
 80089dc:	e109      	b.n	8008bf2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089e4:	d104      	bne.n	80089f0 <f_write+0x11e>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	755a      	strb	r2, [r3, #21]
 80089ec:	2301      	movs	r3, #1
 80089ee:	e100      	b.n	8008bf2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <f_write+0x132>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	7d1b      	ldrb	r3, [r3, #20]
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da18      	bge.n	8008a40 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	7858      	ldrb	r0, [r3, #1]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f7fd fd73 	bl	8006508 <disk_write>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <f_write+0x160>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	755a      	strb	r2, [r3, #21]
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0df      	b.n	8008bf2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	7d1b      	ldrb	r3, [r3, #20]
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fe f8e9 	bl	8006c20 <clust2sect>
 8008a4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d104      	bne.n	8008a60 <f_write+0x18e>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	755a      	strb	r2, [r3, #21]
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e0c8      	b.n	8008bf2 <f_write+0x320>
			sect += csect;
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	4413      	add	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	899b      	ldrh	r3, [r3, #12]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d043      	beq.n	8008b04 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4413      	add	r3, r2
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	8952      	ldrh	r2, [r2, #10]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d905      	bls.n	8008a96 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	895b      	ldrh	r3, [r3, #10]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	7858      	ldrb	r0, [r3, #1]
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	69f9      	ldr	r1, [r7, #28]
 8008aa0:	f7fd fd32 	bl	8006508 <disk_write>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <f_write+0x1e2>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2201      	movs	r2, #1
 8008aae:	755a      	strb	r2, [r3, #21]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e09e      	b.n	8008bf2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	6a3a      	ldr	r2, [r7, #32]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d918      	bls.n	8008af4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a1a      	ldr	r2, [r3, #32]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	8992      	ldrh	r2, [r2, #12]
 8008ad4:	fb02 f303 	mul.w	r3, r2, r3
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	18d1      	adds	r1, r2, r3
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	899b      	ldrh	r3, [r3, #12]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f7fd fdd1 	bl	8006688 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7d1b      	ldrb	r3, [r3, #20]
 8008aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	899b      	ldrh	r3, [r3, #12]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	fb02 f303 	mul.w	r3, r2, r3
 8008b00:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b02:	e04b      	b.n	8008b9c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d016      	beq.n	8008b3c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d210      	bcs.n	8008b3c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	7858      	ldrb	r0, [r3, #1]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b24:	2301      	movs	r3, #1
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	f7fd fcce 	bl	80064c8 <disk_read>
 8008b2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	755a      	strb	r2, [r3, #21]
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e05a      	b.n	8008bf2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	899b      	ldrh	r3, [r3, #12]
 8008b46:	4618      	mov	r0, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	8992      	ldrh	r2, [r2, #12]
 8008b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b54:	fb02 f201 	mul.w	r2, r2, r1
 8008b58:	1a9b      	subs	r3, r3, r2
 8008b5a:	1ac3      	subs	r3, r0, r3
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d901      	bls.n	8008b6a <f_write+0x298>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	8992      	ldrh	r2, [r2, #12]
 8008b78:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b7c:	fb02 f200 	mul.w	r2, r2, r0
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	440b      	add	r3, r1
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	69f9      	ldr	r1, [r7, #28]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd fd7d 	bl	8006688 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	7d1b      	ldrb	r3, [r3, #20]
 8008b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	4413      	add	r3, r2
 8008ba2:	61fb      	str	r3, [r7, #28]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	441a      	add	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	619a      	str	r2, [r3, #24]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bf38      	it	cc
 8008bbc:	461a      	movcc	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	441a      	add	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f47f aeb5 	bne.w	8008948 <f_write+0x76>
 8008bde:	e000      	b.n	8008be2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008be0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	7d1b      	ldrb	r3, [r3, #20]
 8008be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3730      	adds	r7, #48	; 0x30
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f107 0208 	add.w	r2, r7, #8
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faba 	bl	8008184 <validate>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d168      	bne.n	8008cec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7d1b      	ldrb	r3, [r3, #20]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d062      	beq.n	8008cec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7d1b      	ldrb	r3, [r3, #20]
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da15      	bge.n	8008c5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	7858      	ldrb	r0, [r3, #1]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f7fd fc62 	bl	8006508 <disk_write>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <f_sync+0x54>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04f      	b.n	8008cee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7d1b      	ldrb	r3, [r3, #20]
 8008c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c5c:	f7fd f9c0 	bl	8005fe0 <get_fattime>
 8008c60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fd ff3a 	bl	8006ae4 <move_window>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d138      	bne.n	8008cec <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	330b      	adds	r3, #11
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	330b      	adds	r3, #11
 8008c8a:	f042 0220 	orr.w	r2, r2, #32
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	68f9      	ldr	r1, [r7, #12]
 8008c9e:	f7fe fcc8 	bl	8007632 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f103 021c 	add.w	r2, r3, #28
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fd fcbe 	bl	8006630 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3316      	adds	r3, #22
 8008cb8:	6939      	ldr	r1, [r7, #16]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd fcb8 	bl	8006630 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3312      	adds	r3, #18
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fd fc97 	bl	80065fa <st_word>
					fs->wflag = 1;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fd ff33 	bl	8006b40 <sync_fs>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7d1b      	ldrb	r3, [r3, #20]
 8008ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff ff7b 	bl	8008bfa <f_sync>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d118      	bne.n	8008d40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f107 0208 	add.w	r2, r7, #8
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fa34 	bl	8008184 <validate>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10c      	bne.n	8008d40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fd fe36 	bl	800699c <dec_lock>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b086      	sub	sp, #24
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <f_opendir+0x14>
 8008d5a:	2309      	movs	r3, #9
 8008d5c:	e064      	b.n	8008e28 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008d62:	f107 010c 	add.w	r1, r7, #12
 8008d66:	463b      	mov	r3, r7
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe ff86 	bl	8007c7c <find_volume>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d14f      	bne.n	8008e1a <f_opendir+0xd0>
		obj->fs = fs;
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fe fe69 	bl	8007a5c <follow_path>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d13d      	bne.n	8008e10 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	db12      	blt.n	8008dc6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	799b      	ldrb	r3, [r3, #6]
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7fe fc1d 	bl	80075f4 <ld_clust>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	609a      	str	r2, [r3, #8]
 8008dc0:	e001      	b.n	8008dc6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008dc2:	2305      	movs	r3, #5
 8008dc4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d121      	bne.n	8008e10 <f_opendir+0xc6>
				obj->id = fs->id;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88da      	ldrh	r2, [r3, #6]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7fe fa66 	bl	80072a8 <dir_sdi>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d114      	bne.n	8008e10 <f_opendir+0xc6>
					if (obj->sclust) {
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00d      	beq.n	8008e0a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008dee:	2100      	movs	r1, #0
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7fd fd45 	bl	8006880 <inc_lock>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <f_opendir+0xc6>
 8008e04:	2312      	movs	r3, #18
 8008e06:	75fb      	strb	r3, [r7, #23]
 8008e08:	e002      	b.n	8008e10 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d101      	bne.n	8008e1a <f_opendir+0xd0>
 8008e16:	2305      	movs	r3, #5
 8008e18:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <f_opendir+0xdc>
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f107 0208 	add.w	r2, r7, #8
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff f99f 	bl	8008184 <validate>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d110      	bne.n	8008e72 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fd9d 	bl	800699c <dec_lock>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f107 0208 	add.w	r2, r7, #8
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff f978 	bl	8008184 <validate>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d126      	bne.n	8008eec <f_readdir+0x70>
		if (!fno) {
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7fe f9fe 	bl	80072a8 <dir_sdi>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]
 8008eb0:	e01c      	b.n	8008eec <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7fe fbdc 	bl	8007672 <dir_read>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d101      	bne.n	8008ec8 <f_readdir+0x4c>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10e      	bne.n	8008eec <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fe fcd0 	bl	8007876 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7fe fa6e 	bl	80073ba <dir_next>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d101      	bne.n	8008eec <f_readdir+0x70>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b090      	sub	sp, #64	; 0x40
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008f00:	f107 010c 	add.w	r1, r7, #12
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	2200      	movs	r2, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe feb7 	bl	8007c7c <find_volume>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11f      	bne.n	8008f5c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	f107 030c 	add.w	r3, r7, #12
 8008f22:	4611      	mov	r1, r2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fd99 	bl	8007a5c <follow_path>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008f30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d111      	bne.n	8008f5c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008f38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f3c:	b25b      	sxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	da03      	bge.n	8008f4a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008f42:	2306      	movs	r3, #6
 8008f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008f48:	e008      	b.n	8008f5c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d005      	beq.n	8008f5c <f_stat+0x66>
 8008f50:	f107 030c 	add.w	r3, r7, #12
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fc8d 	bl	8007876 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3740      	adds	r7, #64	; 0x40
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b092      	sub	sp, #72	; 0x48
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008f74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fe7c 	bl	8007c7c <find_volume>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f040 8099 	bne.w	80090c6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	3b02      	subs	r3, #2
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d804      	bhi.n	8008fb2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	695a      	ldr	r2, [r3, #20]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	e089      	b.n	80090c6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d128      	bne.n	8009010 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008fc6:	f107 0314 	add.w	r3, r7, #20
 8008fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fd fe46 	bl	8006c5e <get_fat>
 8008fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fda:	d103      	bne.n	8008fe4 <f_getfree+0x7c>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fe2:	e063      	b.n	80090ac <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d103      	bne.n	8008ff2 <f_getfree+0x8a>
 8008fea:	2302      	movs	r3, #2
 8008fec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ff0:	e05c      	b.n	80090ac <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <f_getfree+0x96>
 8008ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	3301      	adds	r3, #1
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800900a:	429a      	cmp	r2, r3
 800900c:	d3db      	bcc.n	8008fc6 <f_getfree+0x5e>
 800900e:	e04d      	b.n	80090ac <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	637b      	str	r3, [r7, #52]	; 0x34
 8009020:	2300      	movs	r3, #0
 8009022:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	2b00      	cmp	r3, #0
 8009028:	d113      	bne.n	8009052 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800902a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	63ba      	str	r2, [r7, #56]	; 0x38
 8009032:	4619      	mov	r1, r3
 8009034:	f7fd fd56 	bl	8006ae4 <move_window>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800903e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009042:	2b00      	cmp	r3, #0
 8009044:	d131      	bne.n	80090aa <f_getfree+0x142>
							p = fs->win;
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	3334      	adds	r3, #52	; 0x34
 800904a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	899b      	ldrh	r3, [r3, #12]
 8009050:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d10f      	bne.n	800907a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800905a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800905c:	f7fd fa92 	bl	8006584 <ld_word>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d102      	bne.n	800906c <f_getfree+0x104>
 8009066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009068:	3301      	adds	r3, #1
 800906a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	3302      	adds	r3, #2
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	3b02      	subs	r3, #2
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
 8009078:	e010      	b.n	800909c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800907a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907c:	f7fd fa9a 	bl	80065b4 <ld_dword>
 8009080:	4603      	mov	r3, r0
 8009082:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <f_getfree+0x128>
 800908a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908c:	3301      	adds	r3, #1
 800908e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	3304      	adds	r3, #4
 8009094:	633b      	str	r3, [r7, #48]	; 0x30
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	3b04      	subs	r3, #4
 800909a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	3b01      	subs	r3, #1
 80090a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1bd      	bne.n	8009024 <f_getfree+0xbc>
 80090a8:	e000      	b.n	80090ac <f_getfree+0x144>
							if (res != FR_OK) break;
 80090aa:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090b0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090b6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	791a      	ldrb	r2, [r3, #4]
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80090c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3748      	adds	r7, #72	; 0x48
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b09e      	sub	sp, #120	; 0x78
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80090de:	f107 010c 	add.w	r1, r7, #12
 80090e2:	1d3b      	adds	r3, r7, #4
 80090e4:	2202      	movs	r2, #2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fdc8 	bl	8007c7c <find_volume>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80090f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f040 808e 	bne.w	800921c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe fca7 	bl	8007a5c <follow_path>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009114:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009118:	2b00      	cmp	r3, #0
 800911a:	d108      	bne.n	800912e <f_unlink+0x5c>
 800911c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009120:	2102      	movs	r1, #2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd fb2e 	bl	8006784 <chk_lock>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800912e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009132:	2b00      	cmp	r3, #0
 8009134:	d172      	bne.n	800921c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800913a:	b25b      	sxtb	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	da03      	bge.n	8009148 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009140:	2306      	movs	r3, #6
 8009142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009146:	e008      	b.n	800915a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009148:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009154:	2307      	movs	r3, #7
 8009156:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800915a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800915e:	2b00      	cmp	r3, #0
 8009160:	d134      	bne.n	80091cc <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe fa43 	bl	80075f4 <ld_clust>
 800916e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009170:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d027      	beq.n	80091cc <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009182:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009184:	f107 0310 	add.w	r3, r7, #16
 8009188:	2100      	movs	r1, #0
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe f88c 	bl	80072a8 <dir_sdi>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009196:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800919a:	2b00      	cmp	r3, #0
 800919c:	d116      	bne.n	80091cc <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800919e:	f107 0310 	add.w	r3, r7, #16
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fa64 	bl	8007672 <dir_read>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80091b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <f_unlink+0xec>
 80091b8:	2307      	movs	r3, #7
 80091ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80091be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d102      	bne.n	80091cc <f_unlink+0xfa>
 80091c6:	2300      	movs	r3, #0
 80091c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80091cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d123      	bne.n	800921c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80091d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fb2e 	bl	800783a <dir_remove>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80091e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10c      	bne.n	8009206 <f_unlink+0x134>
 80091ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80091f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091f6:	2200      	movs	r2, #0
 80091f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fd ff1f 	bl	800703e <remove_chain>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009206:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <f_unlink+0x14a>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4618      	mov	r0, r3
 8009212:	f7fd fc95 	bl	8006b40 <sync_fs>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800921c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009220:	4618      	mov	r0, r3
 8009222:	3778      	adds	r7, #120	; 0x78
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b096      	sub	sp, #88	; 0x58
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	1d3b      	adds	r3, r7, #4
 8009236:	2202      	movs	r2, #2
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fd1f 	bl	8007c7c <find_volume>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 80f2 	bne.w	8009436 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fbfe 	bl	8007a5c <follow_path>
 8009260:	4603      	mov	r3, r0
 8009262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <f_mkdir+0x4c>
 800926e:	2308      	movs	r3, #8
 8009270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009278:	2b04      	cmp	r3, #4
 800927a:	f040 80dc 	bne.w	8009436 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f7fd ff3f 	bl	8007108 <create_chain>
 800928a:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	895b      	ldrh	r3, [r3, #10]
 8009290:	461a      	mov	r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	899b      	ldrh	r3, [r3, #12]
 8009296:	fb03 f302 	mul.w	r3, r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80092a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <f_mkdir+0x86>
 80092a8:	2307      	movs	r3, #7
 80092aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d102      	bne.n	80092ba <f_mkdir+0x92>
 80092b4:	2302      	movs	r3, #2
 80092b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80092ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c0:	d102      	bne.n	80092c8 <f_mkdir+0xa0>
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80092c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <f_mkdir+0xb6>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fd fbc2 	bl	8006a5c <sync_window>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80092de:	f7fc fe7f 	bl	8005fe0 <get_fattime>
 80092e2:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80092e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d16c      	bne.n	80093c6 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fd fc95 	bl	8006c20 <clust2sect>
 80092f6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	3334      	adds	r3, #52	; 0x34
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	899b      	ldrh	r3, [r3, #12]
 8009302:	461a      	mov	r2, r3
 8009304:	2100      	movs	r1, #0
 8009306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009308:	f7fd f9df 	bl	80066ca <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800930c:	220b      	movs	r2, #11
 800930e:	2120      	movs	r1, #32
 8009310:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009312:	f7fd f9da 	bl	80066ca <mem_set>
					dir[DIR_Name] = '.';
 8009316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009318:	222e      	movs	r2, #46	; 0x2e
 800931a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800931c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931e:	330b      	adds	r3, #11
 8009320:	2210      	movs	r2, #16
 8009322:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009326:	3316      	adds	r3, #22
 8009328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd f980 	bl	8006630 <st_dword>
					st_clust(fs, dir, dcl);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe f97b 	bl	8007632 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	3320      	adds	r3, #32
 8009340:	2220      	movs	r2, #32
 8009342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd f99f 	bl	8006688 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	3321      	adds	r3, #33	; 0x21
 800934e:	222e      	movs	r2, #46	; 0x2e
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b03      	cmp	r3, #3
 800935c:	d106      	bne.n	800936c <f_mkdir+0x144>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009364:	429a      	cmp	r2, r3
 8009366:	d101      	bne.n	800936c <f_mkdir+0x144>
 8009368:	2300      	movs	r3, #0
 800936a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800936c:	68b8      	ldr	r0, [r7, #8]
 800936e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009370:	3320      	adds	r3, #32
 8009372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009374:	4619      	mov	r1, r3
 8009376:	f7fe f95c 	bl	8007632 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	895b      	ldrh	r3, [r3, #10]
 800937e:	653b      	str	r3, [r7, #80]	; 0x50
 8009380:	e01c      	b.n	80093bc <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2201      	movs	r2, #1
 8009390:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd fb61 	bl	8006a5c <sync_window>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80093a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10d      	bne.n	80093c4 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	899b      	ldrh	r3, [r3, #12]
 80093ac:	461a      	mov	r2, r3
 80093ae:	2100      	movs	r1, #0
 80093b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093b2:	f7fd f98a 	bl	80066ca <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80093b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b8:	3b01      	subs	r3, #1
 80093ba:	653b      	str	r3, [r7, #80]	; 0x50
 80093bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1df      	bne.n	8009382 <f_mkdir+0x15a>
 80093c2:	e000      	b.n	80093c6 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80093c4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80093c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d107      	bne.n	80093de <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80093ce:	f107 030c 	add.w	r3, r7, #12
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe f9ff 	bl	80077d6 <dir_register>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80093de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d120      	bne.n	8009428 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80093ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ec:	3316      	adds	r3, #22
 80093ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd f91d 	bl	8006630 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe f918 	bl	8007632 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009404:	330b      	adds	r3, #11
 8009406:	2210      	movs	r2, #16
 8009408:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2201      	movs	r2, #1
 800940e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10e      	bne.n	8009436 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fb90 	bl	8006b40 <sync_fs>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009426:	e006      	b.n	8009436 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009428:	f107 030c 	add.w	r3, r7, #12
 800942c:	2200      	movs	r2, #0
 800942e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009430:	4618      	mov	r0, r3
 8009432:	f7fd fe04 	bl	800703e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800943a:	4618      	mov	r0, r3
 800943c:	3758      	adds	r7, #88	; 0x58
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800945a:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 800945c:	7a5b      	ldrb	r3, [r3, #9]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d131      	bne.n	80094c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009464:	4b1c      	ldr	r3, [pc, #112]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 8009466:	7a5b      	ldrb	r3, [r3, #9]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	4b1a      	ldr	r3, [pc, #104]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 800946e:	2100      	movs	r1, #0
 8009470:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009472:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 8009474:	7a5b      	ldrb	r3, [r3, #9]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009482:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 8009484:	7a5b      	ldrb	r3, [r3, #9]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 800948c:	4413      	add	r3, r2
 800948e:	79fa      	ldrb	r2, [r7, #7]
 8009490:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009492:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 8009494:	7a5b      	ldrb	r3, [r3, #9]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	b2d1      	uxtb	r1, r2
 800949c:	4a0e      	ldr	r2, [pc, #56]	; (80094d8 <FATFS_LinkDriverEx+0x94>)
 800949e:	7251      	strb	r1, [r2, #9]
 80094a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094a2:	7dbb      	ldrb	r3, [r7, #22]
 80094a4:	3330      	adds	r3, #48	; 0x30
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	3301      	adds	r3, #1
 80094b0:	223a      	movs	r2, #58	; 0x3a
 80094b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	3302      	adds	r3, #2
 80094b8:	222f      	movs	r2, #47	; 0x2f
 80094ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3303      	adds	r3, #3
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	200000c4 	.word	0x200000c4

080094dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094e6:	2200      	movs	r2, #0
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff ffaa 	bl	8009444 <FATFS_LinkDriverEx>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <__errno>:
 80094fc:	4b01      	ldr	r3, [pc, #4]	; (8009504 <__errno+0x8>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	2000000c 	.word	0x2000000c

08009508 <__libc_init_array>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4d0d      	ldr	r5, [pc, #52]	; (8009540 <__libc_init_array+0x38>)
 800950c:	4c0d      	ldr	r4, [pc, #52]	; (8009544 <__libc_init_array+0x3c>)
 800950e:	1b64      	subs	r4, r4, r5
 8009510:	10a4      	asrs	r4, r4, #2
 8009512:	2600      	movs	r6, #0
 8009514:	42a6      	cmp	r6, r4
 8009516:	d109      	bne.n	800952c <__libc_init_array+0x24>
 8009518:	4d0b      	ldr	r5, [pc, #44]	; (8009548 <__libc_init_array+0x40>)
 800951a:	4c0c      	ldr	r4, [pc, #48]	; (800954c <__libc_init_array+0x44>)
 800951c:	f000 fc5e 	bl	8009ddc <_init>
 8009520:	1b64      	subs	r4, r4, r5
 8009522:	10a4      	asrs	r4, r4, #2
 8009524:	2600      	movs	r6, #0
 8009526:	42a6      	cmp	r6, r4
 8009528:	d105      	bne.n	8009536 <__libc_init_array+0x2e>
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009530:	4798      	blx	r3
 8009532:	3601      	adds	r6, #1
 8009534:	e7ee      	b.n	8009514 <__libc_init_array+0xc>
 8009536:	f855 3b04 	ldr.w	r3, [r5], #4
 800953a:	4798      	blx	r3
 800953c:	3601      	adds	r6, #1
 800953e:	e7f2      	b.n	8009526 <__libc_init_array+0x1e>
 8009540:	0800a3b0 	.word	0x0800a3b0
 8009544:	0800a3b0 	.word	0x0800a3b0
 8009548:	0800a3b0 	.word	0x0800a3b0
 800954c:	0800a3b4 	.word	0x0800a3b4

08009550 <malloc>:
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <malloc+0xc>)
 8009552:	4601      	mov	r1, r0
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f000 b863 	b.w	8009620 <_malloc_r>
 800955a:	bf00      	nop
 800955c:	2000000c 	.word	0x2000000c

08009560 <free>:
 8009560:	4b02      	ldr	r3, [pc, #8]	; (800956c <free+0xc>)
 8009562:	4601      	mov	r1, r0
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f000 b80b 	b.w	8009580 <_free_r>
 800956a:	bf00      	nop
 800956c:	2000000c 	.word	0x2000000c

08009570 <memset>:
 8009570:	4402      	add	r2, r0
 8009572:	4603      	mov	r3, r0
 8009574:	4293      	cmp	r3, r2
 8009576:	d100      	bne.n	800957a <memset+0xa>
 8009578:	4770      	bx	lr
 800957a:	f803 1b01 	strb.w	r1, [r3], #1
 800957e:	e7f9      	b.n	8009574 <memset+0x4>

08009580 <_free_r>:
 8009580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009582:	2900      	cmp	r1, #0
 8009584:	d048      	beq.n	8009618 <_free_r+0x98>
 8009586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958a:	9001      	str	r0, [sp, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f1a1 0404 	sub.w	r4, r1, #4
 8009592:	bfb8      	it	lt
 8009594:	18e4      	addlt	r4, r4, r3
 8009596:	f000 f8cd 	bl	8009734 <__malloc_lock>
 800959a:	4a20      	ldr	r2, [pc, #128]	; (800961c <_free_r+0x9c>)
 800959c:	9801      	ldr	r0, [sp, #4]
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	4615      	mov	r5, r2
 80095a2:	b933      	cbnz	r3, 80095b2 <_free_r+0x32>
 80095a4:	6063      	str	r3, [r4, #4]
 80095a6:	6014      	str	r4, [r2, #0]
 80095a8:	b003      	add	sp, #12
 80095aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095ae:	f000 b8c7 	b.w	8009740 <__malloc_unlock>
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	d90b      	bls.n	80095ce <_free_r+0x4e>
 80095b6:	6821      	ldr	r1, [r4, #0]
 80095b8:	1862      	adds	r2, r4, r1
 80095ba:	4293      	cmp	r3, r2
 80095bc:	bf04      	itt	eq
 80095be:	681a      	ldreq	r2, [r3, #0]
 80095c0:	685b      	ldreq	r3, [r3, #4]
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	bf04      	itt	eq
 80095c6:	1852      	addeq	r2, r2, r1
 80095c8:	6022      	streq	r2, [r4, #0]
 80095ca:	602c      	str	r4, [r5, #0]
 80095cc:	e7ec      	b.n	80095a8 <_free_r+0x28>
 80095ce:	461a      	mov	r2, r3
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b10b      	cbz	r3, 80095d8 <_free_r+0x58>
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	d9fa      	bls.n	80095ce <_free_r+0x4e>
 80095d8:	6811      	ldr	r1, [r2, #0]
 80095da:	1855      	adds	r5, r2, r1
 80095dc:	42a5      	cmp	r5, r4
 80095de:	d10b      	bne.n	80095f8 <_free_r+0x78>
 80095e0:	6824      	ldr	r4, [r4, #0]
 80095e2:	4421      	add	r1, r4
 80095e4:	1854      	adds	r4, r2, r1
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	6011      	str	r1, [r2, #0]
 80095ea:	d1dd      	bne.n	80095a8 <_free_r+0x28>
 80095ec:	681c      	ldr	r4, [r3, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	6053      	str	r3, [r2, #4]
 80095f2:	4421      	add	r1, r4
 80095f4:	6011      	str	r1, [r2, #0]
 80095f6:	e7d7      	b.n	80095a8 <_free_r+0x28>
 80095f8:	d902      	bls.n	8009600 <_free_r+0x80>
 80095fa:	230c      	movs	r3, #12
 80095fc:	6003      	str	r3, [r0, #0]
 80095fe:	e7d3      	b.n	80095a8 <_free_r+0x28>
 8009600:	6825      	ldr	r5, [r4, #0]
 8009602:	1961      	adds	r1, r4, r5
 8009604:	428b      	cmp	r3, r1
 8009606:	bf04      	itt	eq
 8009608:	6819      	ldreq	r1, [r3, #0]
 800960a:	685b      	ldreq	r3, [r3, #4]
 800960c:	6063      	str	r3, [r4, #4]
 800960e:	bf04      	itt	eq
 8009610:	1949      	addeq	r1, r1, r5
 8009612:	6021      	streq	r1, [r4, #0]
 8009614:	6054      	str	r4, [r2, #4]
 8009616:	e7c7      	b.n	80095a8 <_free_r+0x28>
 8009618:	b003      	add	sp, #12
 800961a:	bd30      	pop	{r4, r5, pc}
 800961c:	200000d0 	.word	0x200000d0

08009620 <_malloc_r>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	1ccd      	adds	r5, r1, #3
 8009624:	f025 0503 	bic.w	r5, r5, #3
 8009628:	3508      	adds	r5, #8
 800962a:	2d0c      	cmp	r5, #12
 800962c:	bf38      	it	cc
 800962e:	250c      	movcc	r5, #12
 8009630:	2d00      	cmp	r5, #0
 8009632:	4606      	mov	r6, r0
 8009634:	db01      	blt.n	800963a <_malloc_r+0x1a>
 8009636:	42a9      	cmp	r1, r5
 8009638:	d903      	bls.n	8009642 <_malloc_r+0x22>
 800963a:	230c      	movs	r3, #12
 800963c:	6033      	str	r3, [r6, #0]
 800963e:	2000      	movs	r0, #0
 8009640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009642:	f000 f877 	bl	8009734 <__malloc_lock>
 8009646:	4921      	ldr	r1, [pc, #132]	; (80096cc <_malloc_r+0xac>)
 8009648:	680a      	ldr	r2, [r1, #0]
 800964a:	4614      	mov	r4, r2
 800964c:	b99c      	cbnz	r4, 8009676 <_malloc_r+0x56>
 800964e:	4f20      	ldr	r7, [pc, #128]	; (80096d0 <_malloc_r+0xb0>)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	b923      	cbnz	r3, 800965e <_malloc_r+0x3e>
 8009654:	4621      	mov	r1, r4
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f83c 	bl	80096d4 <_sbrk_r>
 800965c:	6038      	str	r0, [r7, #0]
 800965e:	4629      	mov	r1, r5
 8009660:	4630      	mov	r0, r6
 8009662:	f000 f837 	bl	80096d4 <_sbrk_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d123      	bne.n	80096b2 <_malloc_r+0x92>
 800966a:	230c      	movs	r3, #12
 800966c:	6033      	str	r3, [r6, #0]
 800966e:	4630      	mov	r0, r6
 8009670:	f000 f866 	bl	8009740 <__malloc_unlock>
 8009674:	e7e3      	b.n	800963e <_malloc_r+0x1e>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	1b5b      	subs	r3, r3, r5
 800967a:	d417      	bmi.n	80096ac <_malloc_r+0x8c>
 800967c:	2b0b      	cmp	r3, #11
 800967e:	d903      	bls.n	8009688 <_malloc_r+0x68>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	441c      	add	r4, r3
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	e004      	b.n	8009692 <_malloc_r+0x72>
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	42a2      	cmp	r2, r4
 800968c:	bf0c      	ite	eq
 800968e:	600b      	streq	r3, [r1, #0]
 8009690:	6053      	strne	r3, [r2, #4]
 8009692:	4630      	mov	r0, r6
 8009694:	f000 f854 	bl	8009740 <__malloc_unlock>
 8009698:	f104 000b 	add.w	r0, r4, #11
 800969c:	1d23      	adds	r3, r4, #4
 800969e:	f020 0007 	bic.w	r0, r0, #7
 80096a2:	1ac2      	subs	r2, r0, r3
 80096a4:	d0cc      	beq.n	8009640 <_malloc_r+0x20>
 80096a6:	1a1b      	subs	r3, r3, r0
 80096a8:	50a3      	str	r3, [r4, r2]
 80096aa:	e7c9      	b.n	8009640 <_malloc_r+0x20>
 80096ac:	4622      	mov	r2, r4
 80096ae:	6864      	ldr	r4, [r4, #4]
 80096b0:	e7cc      	b.n	800964c <_malloc_r+0x2c>
 80096b2:	1cc4      	adds	r4, r0, #3
 80096b4:	f024 0403 	bic.w	r4, r4, #3
 80096b8:	42a0      	cmp	r0, r4
 80096ba:	d0e3      	beq.n	8009684 <_malloc_r+0x64>
 80096bc:	1a21      	subs	r1, r4, r0
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 f808 	bl	80096d4 <_sbrk_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	d1dd      	bne.n	8009684 <_malloc_r+0x64>
 80096c8:	e7cf      	b.n	800966a <_malloc_r+0x4a>
 80096ca:	bf00      	nop
 80096cc:	200000d0 	.word	0x200000d0
 80096d0:	200000d4 	.word	0x200000d4

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d06      	ldr	r5, [pc, #24]	; (80096f0 <_sbrk_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f8 fa6c 	bl	8001bbc <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20004414 	.word	0x20004414

080096f4 <siprintf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	b500      	push	{lr}
 80096f8:	b09c      	sub	sp, #112	; 0x70
 80096fa:	ab1d      	add	r3, sp, #116	; 0x74
 80096fc:	9002      	str	r0, [sp, #8]
 80096fe:	9006      	str	r0, [sp, #24]
 8009700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009704:	4809      	ldr	r0, [pc, #36]	; (800972c <siprintf+0x38>)
 8009706:	9107      	str	r1, [sp, #28]
 8009708:	9104      	str	r1, [sp, #16]
 800970a:	4909      	ldr	r1, [pc, #36]	; (8009730 <siprintf+0x3c>)
 800970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009710:	9105      	str	r1, [sp, #20]
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	a902      	add	r1, sp, #8
 8009718:	f000 f874 	bl	8009804 <_svfiprintf_r>
 800971c:	9b02      	ldr	r3, [sp, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	b01c      	add	sp, #112	; 0x70
 8009724:	f85d eb04 	ldr.w	lr, [sp], #4
 8009728:	b003      	add	sp, #12
 800972a:	4770      	bx	lr
 800972c:	2000000c 	.word	0x2000000c
 8009730:	ffff0208 	.word	0xffff0208

08009734 <__malloc_lock>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__malloc_lock+0x8>)
 8009736:	f000 baf9 	b.w	8009d2c <__retarget_lock_acquire_recursive>
 800973a:	bf00      	nop
 800973c:	2000441c 	.word	0x2000441c

08009740 <__malloc_unlock>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__malloc_unlock+0x8>)
 8009742:	f000 baf4 	b.w	8009d2e <__retarget_lock_release_recursive>
 8009746:	bf00      	nop
 8009748:	2000441c 	.word	0x2000441c

0800974c <__ssputs_r>:
 800974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	688e      	ldr	r6, [r1, #8]
 8009752:	429e      	cmp	r6, r3
 8009754:	4682      	mov	sl, r0
 8009756:	460c      	mov	r4, r1
 8009758:	4690      	mov	r8, r2
 800975a:	461f      	mov	r7, r3
 800975c:	d838      	bhi.n	80097d0 <__ssputs_r+0x84>
 800975e:	898a      	ldrh	r2, [r1, #12]
 8009760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009764:	d032      	beq.n	80097cc <__ssputs_r+0x80>
 8009766:	6825      	ldr	r5, [r4, #0]
 8009768:	6909      	ldr	r1, [r1, #16]
 800976a:	eba5 0901 	sub.w	r9, r5, r1
 800976e:	6965      	ldr	r5, [r4, #20]
 8009770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009778:	3301      	adds	r3, #1
 800977a:	444b      	add	r3, r9
 800977c:	106d      	asrs	r5, r5, #1
 800977e:	429d      	cmp	r5, r3
 8009780:	bf38      	it	cc
 8009782:	461d      	movcc	r5, r3
 8009784:	0553      	lsls	r3, r2, #21
 8009786:	d531      	bpl.n	80097ec <__ssputs_r+0xa0>
 8009788:	4629      	mov	r1, r5
 800978a:	f7ff ff49 	bl	8009620 <_malloc_r>
 800978e:	4606      	mov	r6, r0
 8009790:	b950      	cbnz	r0, 80097a8 <__ssputs_r+0x5c>
 8009792:	230c      	movs	r3, #12
 8009794:	f8ca 3000 	str.w	r3, [sl]
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a8:	6921      	ldr	r1, [r4, #16]
 80097aa:	464a      	mov	r2, r9
 80097ac:	f000 fac0 	bl	8009d30 <memcpy>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	6126      	str	r6, [r4, #16]
 80097be:	6165      	str	r5, [r4, #20]
 80097c0:	444e      	add	r6, r9
 80097c2:	eba5 0509 	sub.w	r5, r5, r9
 80097c6:	6026      	str	r6, [r4, #0]
 80097c8:	60a5      	str	r5, [r4, #8]
 80097ca:	463e      	mov	r6, r7
 80097cc:	42be      	cmp	r6, r7
 80097ce:	d900      	bls.n	80097d2 <__ssputs_r+0x86>
 80097d0:	463e      	mov	r6, r7
 80097d2:	4632      	mov	r2, r6
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	4641      	mov	r1, r8
 80097d8:	f000 fab8 	bl	8009d4c <memmove>
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	1b9b      	subs	r3, r3, r6
 80097e2:	4432      	add	r2, r6
 80097e4:	60a3      	str	r3, [r4, #8]
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	2000      	movs	r0, #0
 80097ea:	e7db      	b.n	80097a4 <__ssputs_r+0x58>
 80097ec:	462a      	mov	r2, r5
 80097ee:	f000 fac7 	bl	8009d80 <_realloc_r>
 80097f2:	4606      	mov	r6, r0
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d1e1      	bne.n	80097bc <__ssputs_r+0x70>
 80097f8:	6921      	ldr	r1, [r4, #16]
 80097fa:	4650      	mov	r0, sl
 80097fc:	f7ff fec0 	bl	8009580 <_free_r>
 8009800:	e7c7      	b.n	8009792 <__ssputs_r+0x46>
	...

08009804 <_svfiprintf_r>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4698      	mov	r8, r3
 800980a:	898b      	ldrh	r3, [r1, #12]
 800980c:	061b      	lsls	r3, r3, #24
 800980e:	b09d      	sub	sp, #116	; 0x74
 8009810:	4607      	mov	r7, r0
 8009812:	460d      	mov	r5, r1
 8009814:	4614      	mov	r4, r2
 8009816:	d50e      	bpl.n	8009836 <_svfiprintf_r+0x32>
 8009818:	690b      	ldr	r3, [r1, #16]
 800981a:	b963      	cbnz	r3, 8009836 <_svfiprintf_r+0x32>
 800981c:	2140      	movs	r1, #64	; 0x40
 800981e:	f7ff feff 	bl	8009620 <_malloc_r>
 8009822:	6028      	str	r0, [r5, #0]
 8009824:	6128      	str	r0, [r5, #16]
 8009826:	b920      	cbnz	r0, 8009832 <_svfiprintf_r+0x2e>
 8009828:	230c      	movs	r3, #12
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009830:	e0d1      	b.n	80099d6 <_svfiprintf_r+0x1d2>
 8009832:	2340      	movs	r3, #64	; 0x40
 8009834:	616b      	str	r3, [r5, #20]
 8009836:	2300      	movs	r3, #0
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	2320      	movs	r3, #32
 800983c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009840:	f8cd 800c 	str.w	r8, [sp, #12]
 8009844:	2330      	movs	r3, #48	; 0x30
 8009846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099f0 <_svfiprintf_r+0x1ec>
 800984a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984e:	f04f 0901 	mov.w	r9, #1
 8009852:	4623      	mov	r3, r4
 8009854:	469a      	mov	sl, r3
 8009856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800985a:	b10a      	cbz	r2, 8009860 <_svfiprintf_r+0x5c>
 800985c:	2a25      	cmp	r2, #37	; 0x25
 800985e:	d1f9      	bne.n	8009854 <_svfiprintf_r+0x50>
 8009860:	ebba 0b04 	subs.w	fp, sl, r4
 8009864:	d00b      	beq.n	800987e <_svfiprintf_r+0x7a>
 8009866:	465b      	mov	r3, fp
 8009868:	4622      	mov	r2, r4
 800986a:	4629      	mov	r1, r5
 800986c:	4638      	mov	r0, r7
 800986e:	f7ff ff6d 	bl	800974c <__ssputs_r>
 8009872:	3001      	adds	r0, #1
 8009874:	f000 80aa 	beq.w	80099cc <_svfiprintf_r+0x1c8>
 8009878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800987a:	445a      	add	r2, fp
 800987c:	9209      	str	r2, [sp, #36]	; 0x24
 800987e:	f89a 3000 	ldrb.w	r3, [sl]
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 80a2 	beq.w	80099cc <_svfiprintf_r+0x1c8>
 8009888:	2300      	movs	r3, #0
 800988a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009892:	f10a 0a01 	add.w	sl, sl, #1
 8009896:	9304      	str	r3, [sp, #16]
 8009898:	9307      	str	r3, [sp, #28]
 800989a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989e:	931a      	str	r3, [sp, #104]	; 0x68
 80098a0:	4654      	mov	r4, sl
 80098a2:	2205      	movs	r2, #5
 80098a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a8:	4851      	ldr	r0, [pc, #324]	; (80099f0 <_svfiprintf_r+0x1ec>)
 80098aa:	f7f6 fca9 	bl	8000200 <memchr>
 80098ae:	9a04      	ldr	r2, [sp, #16]
 80098b0:	b9d8      	cbnz	r0, 80098ea <_svfiprintf_r+0xe6>
 80098b2:	06d0      	lsls	r0, r2, #27
 80098b4:	bf44      	itt	mi
 80098b6:	2320      	movmi	r3, #32
 80098b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098bc:	0711      	lsls	r1, r2, #28
 80098be:	bf44      	itt	mi
 80098c0:	232b      	movmi	r3, #43	; 0x2b
 80098c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ca:	2b2a      	cmp	r3, #42	; 0x2a
 80098cc:	d015      	beq.n	80098fa <_svfiprintf_r+0xf6>
 80098ce:	9a07      	ldr	r2, [sp, #28]
 80098d0:	4654      	mov	r4, sl
 80098d2:	2000      	movs	r0, #0
 80098d4:	f04f 0c0a 	mov.w	ip, #10
 80098d8:	4621      	mov	r1, r4
 80098da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098de:	3b30      	subs	r3, #48	; 0x30
 80098e0:	2b09      	cmp	r3, #9
 80098e2:	d94e      	bls.n	8009982 <_svfiprintf_r+0x17e>
 80098e4:	b1b0      	cbz	r0, 8009914 <_svfiprintf_r+0x110>
 80098e6:	9207      	str	r2, [sp, #28]
 80098e8:	e014      	b.n	8009914 <_svfiprintf_r+0x110>
 80098ea:	eba0 0308 	sub.w	r3, r0, r8
 80098ee:	fa09 f303 	lsl.w	r3, r9, r3
 80098f2:	4313      	orrs	r3, r2
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	46a2      	mov	sl, r4
 80098f8:	e7d2      	b.n	80098a0 <_svfiprintf_r+0x9c>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	1d19      	adds	r1, r3, #4
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	9103      	str	r1, [sp, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	bfbb      	ittet	lt
 8009906:	425b      	neglt	r3, r3
 8009908:	f042 0202 	orrlt.w	r2, r2, #2
 800990c:	9307      	strge	r3, [sp, #28]
 800990e:	9307      	strlt	r3, [sp, #28]
 8009910:	bfb8      	it	lt
 8009912:	9204      	strlt	r2, [sp, #16]
 8009914:	7823      	ldrb	r3, [r4, #0]
 8009916:	2b2e      	cmp	r3, #46	; 0x2e
 8009918:	d10c      	bne.n	8009934 <_svfiprintf_r+0x130>
 800991a:	7863      	ldrb	r3, [r4, #1]
 800991c:	2b2a      	cmp	r3, #42	; 0x2a
 800991e:	d135      	bne.n	800998c <_svfiprintf_r+0x188>
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	1d1a      	adds	r2, r3, #4
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	9203      	str	r2, [sp, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	bfb8      	it	lt
 800992c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009930:	3402      	adds	r4, #2
 8009932:	9305      	str	r3, [sp, #20]
 8009934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a00 <_svfiprintf_r+0x1fc>
 8009938:	7821      	ldrb	r1, [r4, #0]
 800993a:	2203      	movs	r2, #3
 800993c:	4650      	mov	r0, sl
 800993e:	f7f6 fc5f 	bl	8000200 <memchr>
 8009942:	b140      	cbz	r0, 8009956 <_svfiprintf_r+0x152>
 8009944:	2340      	movs	r3, #64	; 0x40
 8009946:	eba0 000a 	sub.w	r0, r0, sl
 800994a:	fa03 f000 	lsl.w	r0, r3, r0
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	4303      	orrs	r3, r0
 8009952:	3401      	adds	r4, #1
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995a:	4826      	ldr	r0, [pc, #152]	; (80099f4 <_svfiprintf_r+0x1f0>)
 800995c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009960:	2206      	movs	r2, #6
 8009962:	f7f6 fc4d 	bl	8000200 <memchr>
 8009966:	2800      	cmp	r0, #0
 8009968:	d038      	beq.n	80099dc <_svfiprintf_r+0x1d8>
 800996a:	4b23      	ldr	r3, [pc, #140]	; (80099f8 <_svfiprintf_r+0x1f4>)
 800996c:	bb1b      	cbnz	r3, 80099b6 <_svfiprintf_r+0x1b2>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	3307      	adds	r3, #7
 8009972:	f023 0307 	bic.w	r3, r3, #7
 8009976:	3308      	adds	r3, #8
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997c:	4433      	add	r3, r6
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	e767      	b.n	8009852 <_svfiprintf_r+0x4e>
 8009982:	fb0c 3202 	mla	r2, ip, r2, r3
 8009986:	460c      	mov	r4, r1
 8009988:	2001      	movs	r0, #1
 800998a:	e7a5      	b.n	80098d8 <_svfiprintf_r+0xd4>
 800998c:	2300      	movs	r3, #0
 800998e:	3401      	adds	r4, #1
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	4619      	mov	r1, r3
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4620      	mov	r0, r4
 800999a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999e:	3a30      	subs	r2, #48	; 0x30
 80099a0:	2a09      	cmp	r2, #9
 80099a2:	d903      	bls.n	80099ac <_svfiprintf_r+0x1a8>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0c5      	beq.n	8009934 <_svfiprintf_r+0x130>
 80099a8:	9105      	str	r1, [sp, #20]
 80099aa:	e7c3      	b.n	8009934 <_svfiprintf_r+0x130>
 80099ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b0:	4604      	mov	r4, r0
 80099b2:	2301      	movs	r3, #1
 80099b4:	e7f0      	b.n	8009998 <_svfiprintf_r+0x194>
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	462a      	mov	r2, r5
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <_svfiprintf_r+0x1f8>)
 80099be:	a904      	add	r1, sp, #16
 80099c0:	4638      	mov	r0, r7
 80099c2:	f3af 8000 	nop.w
 80099c6:	1c42      	adds	r2, r0, #1
 80099c8:	4606      	mov	r6, r0
 80099ca:	d1d6      	bne.n	800997a <_svfiprintf_r+0x176>
 80099cc:	89ab      	ldrh	r3, [r5, #12]
 80099ce:	065b      	lsls	r3, r3, #25
 80099d0:	f53f af2c 	bmi.w	800982c <_svfiprintf_r+0x28>
 80099d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d6:	b01d      	add	sp, #116	; 0x74
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	ab03      	add	r3, sp, #12
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	462a      	mov	r2, r5
 80099e2:	4b06      	ldr	r3, [pc, #24]	; (80099fc <_svfiprintf_r+0x1f8>)
 80099e4:	a904      	add	r1, sp, #16
 80099e6:	4638      	mov	r0, r7
 80099e8:	f000 f87a 	bl	8009ae0 <_printf_i>
 80099ec:	e7eb      	b.n	80099c6 <_svfiprintf_r+0x1c2>
 80099ee:	bf00      	nop
 80099f0:	0800a374 	.word	0x0800a374
 80099f4:	0800a37e 	.word	0x0800a37e
 80099f8:	00000000 	.word	0x00000000
 80099fc:	0800974d 	.word	0x0800974d
 8009a00:	0800a37a 	.word	0x0800a37a

08009a04 <_printf_common>:
 8009a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	4616      	mov	r6, r2
 8009a0a:	4699      	mov	r9, r3
 8009a0c:	688a      	ldr	r2, [r1, #8]
 8009a0e:	690b      	ldr	r3, [r1, #16]
 8009a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a14:	4293      	cmp	r3, r2
 8009a16:	bfb8      	it	lt
 8009a18:	4613      	movlt	r3, r2
 8009a1a:	6033      	str	r3, [r6, #0]
 8009a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a20:	4607      	mov	r7, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	b10a      	cbz	r2, 8009a2a <_printf_common+0x26>
 8009a26:	3301      	adds	r3, #1
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	0699      	lsls	r1, r3, #26
 8009a2e:	bf42      	ittt	mi
 8009a30:	6833      	ldrmi	r3, [r6, #0]
 8009a32:	3302      	addmi	r3, #2
 8009a34:	6033      	strmi	r3, [r6, #0]
 8009a36:	6825      	ldr	r5, [r4, #0]
 8009a38:	f015 0506 	ands.w	r5, r5, #6
 8009a3c:	d106      	bne.n	8009a4c <_printf_common+0x48>
 8009a3e:	f104 0a19 	add.w	sl, r4, #25
 8009a42:	68e3      	ldr	r3, [r4, #12]
 8009a44:	6832      	ldr	r2, [r6, #0]
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	dc26      	bgt.n	8009a9a <_printf_common+0x96>
 8009a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a50:	1e13      	subs	r3, r2, #0
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	bf18      	it	ne
 8009a56:	2301      	movne	r3, #1
 8009a58:	0692      	lsls	r2, r2, #26
 8009a5a:	d42b      	bmi.n	8009ab4 <_printf_common+0xb0>
 8009a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a60:	4649      	mov	r1, r9
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c0      	blx	r8
 8009a66:	3001      	adds	r0, #1
 8009a68:	d01e      	beq.n	8009aa8 <_printf_common+0xa4>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	68e5      	ldr	r5, [r4, #12]
 8009a6e:	6832      	ldr	r2, [r6, #0]
 8009a70:	f003 0306 	and.w	r3, r3, #6
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	bf08      	it	eq
 8009a78:	1aad      	subeq	r5, r5, r2
 8009a7a:	68a3      	ldr	r3, [r4, #8]
 8009a7c:	6922      	ldr	r2, [r4, #16]
 8009a7e:	bf0c      	ite	eq
 8009a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a84:	2500      	movne	r5, #0
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bfc4      	itt	gt
 8009a8a:	1a9b      	subgt	r3, r3, r2
 8009a8c:	18ed      	addgt	r5, r5, r3
 8009a8e:	2600      	movs	r6, #0
 8009a90:	341a      	adds	r4, #26
 8009a92:	42b5      	cmp	r5, r6
 8009a94:	d11a      	bne.n	8009acc <_printf_common+0xc8>
 8009a96:	2000      	movs	r0, #0
 8009a98:	e008      	b.n	8009aac <_printf_common+0xa8>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	47c0      	blx	r8
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d103      	bne.n	8009ab0 <_printf_common+0xac>
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab0:	3501      	adds	r5, #1
 8009ab2:	e7c6      	b.n	8009a42 <_printf_common+0x3e>
 8009ab4:	18e1      	adds	r1, r4, r3
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	2030      	movs	r0, #48	; 0x30
 8009aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009abe:	4422      	add	r2, r4
 8009ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ac8:	3302      	adds	r3, #2
 8009aca:	e7c7      	b.n	8009a5c <_printf_common+0x58>
 8009acc:	2301      	movs	r3, #1
 8009ace:	4622      	mov	r2, r4
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d0e6      	beq.n	8009aa8 <_printf_common+0xa4>
 8009ada:	3601      	adds	r6, #1
 8009adc:	e7d9      	b.n	8009a92 <_printf_common+0x8e>
	...

08009ae0 <_printf_i>:
 8009ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	4691      	mov	r9, r2
 8009ae8:	7e27      	ldrb	r7, [r4, #24]
 8009aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009aec:	2f78      	cmp	r7, #120	; 0x78
 8009aee:	4680      	mov	r8, r0
 8009af0:	469a      	mov	sl, r3
 8009af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af6:	d807      	bhi.n	8009b08 <_printf_i+0x28>
 8009af8:	2f62      	cmp	r7, #98	; 0x62
 8009afa:	d80a      	bhi.n	8009b12 <_printf_i+0x32>
 8009afc:	2f00      	cmp	r7, #0
 8009afe:	f000 80d8 	beq.w	8009cb2 <_printf_i+0x1d2>
 8009b02:	2f58      	cmp	r7, #88	; 0x58
 8009b04:	f000 80a3 	beq.w	8009c4e <_printf_i+0x16e>
 8009b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b10:	e03a      	b.n	8009b88 <_printf_i+0xa8>
 8009b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b16:	2b15      	cmp	r3, #21
 8009b18:	d8f6      	bhi.n	8009b08 <_printf_i+0x28>
 8009b1a:	a001      	add	r0, pc, #4	; (adr r0, 8009b20 <_printf_i+0x40>)
 8009b1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b20:	08009b79 	.word	0x08009b79
 8009b24:	08009b8d 	.word	0x08009b8d
 8009b28:	08009b09 	.word	0x08009b09
 8009b2c:	08009b09 	.word	0x08009b09
 8009b30:	08009b09 	.word	0x08009b09
 8009b34:	08009b09 	.word	0x08009b09
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009b09 	.word	0x08009b09
 8009b40:	08009b09 	.word	0x08009b09
 8009b44:	08009b09 	.word	0x08009b09
 8009b48:	08009b09 	.word	0x08009b09
 8009b4c:	08009c99 	.word	0x08009c99
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009c7b 	.word	0x08009c7b
 8009b58:	08009b09 	.word	0x08009b09
 8009b5c:	08009b09 	.word	0x08009b09
 8009b60:	08009cbb 	.word	0x08009cbb
 8009b64:	08009b09 	.word	0x08009b09
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b09 	.word	0x08009b09
 8009b70:	08009b09 	.word	0x08009b09
 8009b74:	08009c83 	.word	0x08009c83
 8009b78:	680b      	ldr	r3, [r1, #0]
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	600a      	str	r2, [r1, #0]
 8009b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e0a3      	b.n	8009cd4 <_printf_i+0x1f4>
 8009b8c:	6825      	ldr	r5, [r4, #0]
 8009b8e:	6808      	ldr	r0, [r1, #0]
 8009b90:	062e      	lsls	r6, r5, #24
 8009b92:	f100 0304 	add.w	r3, r0, #4
 8009b96:	d50a      	bpl.n	8009bae <_printf_i+0xce>
 8009b98:	6805      	ldr	r5, [r0, #0]
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	2d00      	cmp	r5, #0
 8009b9e:	da03      	bge.n	8009ba8 <_printf_i+0xc8>
 8009ba0:	232d      	movs	r3, #45	; 0x2d
 8009ba2:	426d      	negs	r5, r5
 8009ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba8:	485e      	ldr	r0, [pc, #376]	; (8009d24 <_printf_i+0x244>)
 8009baa:	230a      	movs	r3, #10
 8009bac:	e019      	b.n	8009be2 <_printf_i+0x102>
 8009bae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bb2:	6805      	ldr	r5, [r0, #0]
 8009bb4:	600b      	str	r3, [r1, #0]
 8009bb6:	bf18      	it	ne
 8009bb8:	b22d      	sxthne	r5, r5
 8009bba:	e7ef      	b.n	8009b9c <_printf_i+0xbc>
 8009bbc:	680b      	ldr	r3, [r1, #0]
 8009bbe:	6825      	ldr	r5, [r4, #0]
 8009bc0:	1d18      	adds	r0, r3, #4
 8009bc2:	6008      	str	r0, [r1, #0]
 8009bc4:	0628      	lsls	r0, r5, #24
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0xec>
 8009bc8:	681d      	ldr	r5, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <_printf_i+0xf2>
 8009bcc:	0669      	lsls	r1, r5, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0xe8>
 8009bd0:	881d      	ldrh	r5, [r3, #0]
 8009bd2:	4854      	ldr	r0, [pc, #336]	; (8009d24 <_printf_i+0x244>)
 8009bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2308      	moveq	r3, #8
 8009bda:	230a      	movne	r3, #10
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be2:	6866      	ldr	r6, [r4, #4]
 8009be4:	60a6      	str	r6, [r4, #8]
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	bfa2      	ittt	ge
 8009bea:	6821      	ldrge	r1, [r4, #0]
 8009bec:	f021 0104 	bicge.w	r1, r1, #4
 8009bf0:	6021      	strge	r1, [r4, #0]
 8009bf2:	b90d      	cbnz	r5, 8009bf8 <_printf_i+0x118>
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	d04d      	beq.n	8009c94 <_printf_i+0x1b4>
 8009bf8:	4616      	mov	r6, r2
 8009bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8009c02:	5dc7      	ldrb	r7, [r0, r7]
 8009c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c08:	462f      	mov	r7, r5
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	d9f4      	bls.n	8009bfa <_printf_i+0x11a>
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d10b      	bne.n	8009c2c <_printf_i+0x14c>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	07df      	lsls	r7, r3, #31
 8009c18:	d508      	bpl.n	8009c2c <_printf_i+0x14c>
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	bfde      	ittt	le
 8009c22:	2330      	movle	r3, #48	; 0x30
 8009c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009c2c:	1b92      	subs	r2, r2, r6
 8009c2e:	6122      	str	r2, [r4, #16]
 8009c30:	f8cd a000 	str.w	sl, [sp]
 8009c34:	464b      	mov	r3, r9
 8009c36:	aa03      	add	r2, sp, #12
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f7ff fee2 	bl	8009a04 <_printf_common>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d14c      	bne.n	8009cde <_printf_i+0x1fe>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c48:	b004      	add	sp, #16
 8009c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4e:	4835      	ldr	r0, [pc, #212]	; (8009d24 <_printf_i+0x244>)
 8009c50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	680e      	ldr	r6, [r1, #0]
 8009c58:	061f      	lsls	r7, r3, #24
 8009c5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c5e:	600e      	str	r6, [r1, #0]
 8009c60:	d514      	bpl.n	8009c8c <_printf_i+0x1ac>
 8009c62:	07d9      	lsls	r1, r3, #31
 8009c64:	bf44      	itt	mi
 8009c66:	f043 0320 	orrmi.w	r3, r3, #32
 8009c6a:	6023      	strmi	r3, [r4, #0]
 8009c6c:	b91d      	cbnz	r5, 8009c76 <_printf_i+0x196>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f023 0320 	bic.w	r3, r3, #32
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	2310      	movs	r3, #16
 8009c78:	e7b0      	b.n	8009bdc <_printf_i+0xfc>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	f043 0320 	orr.w	r3, r3, #32
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	2378      	movs	r3, #120	; 0x78
 8009c84:	4828      	ldr	r0, [pc, #160]	; (8009d28 <_printf_i+0x248>)
 8009c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c8a:	e7e3      	b.n	8009c54 <_printf_i+0x174>
 8009c8c:	065e      	lsls	r6, r3, #25
 8009c8e:	bf48      	it	mi
 8009c90:	b2ad      	uxthmi	r5, r5
 8009c92:	e7e6      	b.n	8009c62 <_printf_i+0x182>
 8009c94:	4616      	mov	r6, r2
 8009c96:	e7bb      	b.n	8009c10 <_printf_i+0x130>
 8009c98:	680b      	ldr	r3, [r1, #0]
 8009c9a:	6826      	ldr	r6, [r4, #0]
 8009c9c:	6960      	ldr	r0, [r4, #20]
 8009c9e:	1d1d      	adds	r5, r3, #4
 8009ca0:	600d      	str	r5, [r1, #0]
 8009ca2:	0635      	lsls	r5, r6, #24
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	d501      	bpl.n	8009cac <_printf_i+0x1cc>
 8009ca8:	6018      	str	r0, [r3, #0]
 8009caa:	e002      	b.n	8009cb2 <_printf_i+0x1d2>
 8009cac:	0671      	lsls	r1, r6, #25
 8009cae:	d5fb      	bpl.n	8009ca8 <_printf_i+0x1c8>
 8009cb0:	8018      	strh	r0, [r3, #0]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	4616      	mov	r6, r2
 8009cb8:	e7ba      	b.n	8009c30 <_printf_i+0x150>
 8009cba:	680b      	ldr	r3, [r1, #0]
 8009cbc:	1d1a      	adds	r2, r3, #4
 8009cbe:	600a      	str	r2, [r1, #0]
 8009cc0:	681e      	ldr	r6, [r3, #0]
 8009cc2:	6862      	ldr	r2, [r4, #4]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7f6 fa9a 	bl	8000200 <memchr>
 8009ccc:	b108      	cbz	r0, 8009cd2 <_printf_i+0x1f2>
 8009cce:	1b80      	subs	r0, r0, r6
 8009cd0:	6060      	str	r0, [r4, #4]
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cdc:	e7a8      	b.n	8009c30 <_printf_i+0x150>
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d0ab      	beq.n	8009c44 <_printf_i+0x164>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	079b      	lsls	r3, r3, #30
 8009cf0:	d413      	bmi.n	8009d1a <_printf_i+0x23a>
 8009cf2:	68e0      	ldr	r0, [r4, #12]
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	4298      	cmp	r0, r3
 8009cf8:	bfb8      	it	lt
 8009cfa:	4618      	movlt	r0, r3
 8009cfc:	e7a4      	b.n	8009c48 <_printf_i+0x168>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4632      	mov	r2, r6
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	47d0      	blx	sl
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d09b      	beq.n	8009c44 <_printf_i+0x164>
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	9903      	ldr	r1, [sp, #12]
 8009d12:	1a5b      	subs	r3, r3, r1
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dcf2      	bgt.n	8009cfe <_printf_i+0x21e>
 8009d18:	e7eb      	b.n	8009cf2 <_printf_i+0x212>
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	f104 0619 	add.w	r6, r4, #25
 8009d20:	e7f5      	b.n	8009d0e <_printf_i+0x22e>
 8009d22:	bf00      	nop
 8009d24:	0800a385 	.word	0x0800a385
 8009d28:	0800a396 	.word	0x0800a396

08009d2c <__retarget_lock_acquire_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <__retarget_lock_release_recursive>:
 8009d2e:	4770      	bx	lr

08009d30 <memcpy>:
 8009d30:	440a      	add	r2, r1
 8009d32:	4291      	cmp	r1, r2
 8009d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d38:	d100      	bne.n	8009d3c <memcpy+0xc>
 8009d3a:	4770      	bx	lr
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d1f9      	bne.n	8009d3e <memcpy+0xe>
 8009d4a:	bd10      	pop	{r4, pc}

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <_realloc_r>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	4607      	mov	r7, r0
 8009d84:	4614      	mov	r4, r2
 8009d86:	460e      	mov	r6, r1
 8009d88:	b921      	cbnz	r1, 8009d94 <_realloc_r+0x14>
 8009d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d8e:	4611      	mov	r1, r2
 8009d90:	f7ff bc46 	b.w	8009620 <_malloc_r>
 8009d94:	b922      	cbnz	r2, 8009da0 <_realloc_r+0x20>
 8009d96:	f7ff fbf3 	bl	8009580 <_free_r>
 8009d9a:	4625      	mov	r5, r4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da0:	f000 f814 	bl	8009dcc <_malloc_usable_size_r>
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d20f      	bcs.n	8009dc8 <_realloc_r+0x48>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4638      	mov	r0, r7
 8009dac:	f7ff fc38 	bl	8009620 <_malloc_r>
 8009db0:	4605      	mov	r5, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0f2      	beq.n	8009d9c <_realloc_r+0x1c>
 8009db6:	4631      	mov	r1, r6
 8009db8:	4622      	mov	r2, r4
 8009dba:	f7ff ffb9 	bl	8009d30 <memcpy>
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff fbdd 	bl	8009580 <_free_r>
 8009dc6:	e7e9      	b.n	8009d9c <_realloc_r+0x1c>
 8009dc8:	4635      	mov	r5, r6
 8009dca:	e7e7      	b.n	8009d9c <_realloc_r+0x1c>

08009dcc <_malloc_usable_size_r>:
 8009dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd0:	1f18      	subs	r0, r3, #4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfbc      	itt	lt
 8009dd6:	580b      	ldrlt	r3, [r1, r0]
 8009dd8:	18c0      	addlt	r0, r0, r3
 8009dda:	4770      	bx	lr

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
