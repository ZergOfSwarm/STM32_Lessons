
SDIO_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b54c  0800b54c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b54c  0800b54c  0001b54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b554  0800b554  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000043b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004424  20004424  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbe8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038fb  00000000  00000000  0003cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00040588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  000419d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d44  00000000  00000000  00042ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f9b  00000000  00000000  00067a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39c8  00000000  00000000  000809bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154387  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f88  00000000  00000000  001543dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800addc 	.word	0x0800addc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800addc 	.word	0x0800addc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fb1f 	bl	80001d0 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Send_Uart+0x28>)
 8000b9e:	f004 fa0c 	bl	8004fba <HAL_UART_Transmit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20002318 	.word	0x20002318

08000bb0 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <Mount_SD+0x38>)
 8000bbe:	f007 fad9 	bl	8008174 <f_mount>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <Mount_SD+0x3c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <Mount_SD+0x3c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <Mount_SD+0x2a>
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <Mount_SD+0x40>)
 8000bd4:	f7ff ffd6 	bl	8000b84 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000bd8:	e002      	b.n	8000be0 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <Mount_SD+0x44>)
 8000bdc:	f7ff ffd2 	bl	8000b84 <Send_Uart>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	20001138 	.word	0x20001138
 8000bf0:	0800adf4 	.word	0x0800adf4
 8000bf4:	0800ae18 	.word	0x0800ae18

08000bf8 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2000      	movs	r0, #0
 8000c06:	f007 fab5 	bl	8008174 <f_mount>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <Unmount_SD+0x38>)
 8000c10:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <Unmount_SD+0x38>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <Unmount_SD+0x2a>
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <Unmount_SD+0x3c>)
 8000c1c:	f7ff ffb2 	bl	8000b84 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000c20:	e002      	b.n	8000c28 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <Unmount_SD+0x40>)
 8000c24:	f7ff ffae 	bl	8000b84 <Send_Uart>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001138 	.word	0x20001138
 8000c34:	0800ae3c 	.word	0x0800ae3c
 8000c38:	0800ae64 	.word	0x0800ae64

08000c3c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
	BYTE work[_MAX_SS]; /* Work area (larger is better for processing time) */
	// fr = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, buffer, sizeof(buffer));
	// fr = f_mkfs("0:", FM_ANY, 0, buffer, sizeof(buffer));
	FRESULT result;
	result = f_mkfs("", FM_ANY, 0, work, sizeof work);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	2107      	movs	r1, #7
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <Format_SD+0x64>)
 8000c58:	f008 fa34 	bl	80090c4 <f_mkfs>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c62:	f102 0207 	add.w	r2, r2, #7
 8000c66:	7013      	strb	r3, [r2, #0]
	if (result != FR_OK)
 8000c68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c6c:	f103 0307 	add.w	r3, r3, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <Format_SD+0x46>
	{
		printf("Error to format SD-card!\r\n");
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <Format_SD+0x68>)
 8000c78:	f009 f842 	bl	8009d00 <puts>
		Error_Handler();
 8000c7c:	f000 fd64 	bl	8001748 <Error_Handler>
 8000c80:	e002      	b.n	8000c88 <Format_SD+0x4c>
	}
	else
	{
		printf("SD-card formated successfully!\r\n");
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <Format_SD+0x6c>)
 8000c84:	f009 f83c 	bl	8009d00 <puts>
	}
	return result;
 8000c88:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c8c:	f103 0307 	add.w	r3, r3, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	0800aed8 	.word	0x0800aed8
 8000ca4:	0800aedc 	.word	0x0800aedc
 8000ca8:	0800aef8 	.word	0x0800aef8

08000cac <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000cb4:	4953      	ldr	r1, [pc, #332]	; (8000e04 <Read_File+0x158>)
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f008 f809 	bl	8008cce <f_stat>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <Read_File+0x15c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000cc4:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <Read_File+0x15c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d012      	beq.n	8000cf2 <Read_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f008 fecf 	bl	8009a70 <malloc>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	494c      	ldr	r1, [pc, #304]	; (8000e0c <Read_File+0x160>)
 8000cda:	68b8      	ldr	r0, [r7, #8]
 8000cdc:	f009 f828 	bl	8009d30 <siprintf>
		Send_Uart (buf);
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f7ff ff4f 	bl	8000b84 <Send_Uart>
		free(buf);
 8000ce6:	68b8      	ldr	r0, [r7, #8]
 8000ce8:	f008 feca 	bl	8009a80 <free>
	    return fresult;
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <Read_File+0x15c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	e084      	b.n	8000dfc <Read_File+0x150>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4846      	ldr	r0, [pc, #280]	; (8000e10 <Read_File+0x164>)
 8000cf8:	f007 fa82 	bl	8008200 <f_open>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <Read_File+0x15c>)
 8000d02:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000d04:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <Read_File+0x15c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d015      	beq.n	8000d38 <Read_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f008 feaf 	bl	8009a70 <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <Read_File+0x15c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	493d      	ldr	r1, [pc, #244]	; (8000e14 <Read_File+0x168>)
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f009 f805 	bl	8009d30 <siprintf>
		    Send_Uart(buf);
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff ff2c 	bl	8000b84 <Send_Uart>
		    free(buf);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f008 fea7 	bl	8009a80 <free>
		    return fresult;
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <Read_File+0x15c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	e061      	b.n	8000dfc <Read_File+0x150>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8000d38:	2004      	movs	r0, #4
 8000d3a:	f008 fe99 	bl	8009a70 <malloc>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <Read_File+0x164>)
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <Read_File+0x16c>)
 8000d48:	69f9      	ldr	r1, [r7, #28]
 8000d4a:	4831      	ldr	r0, [pc, #196]	; (8000e10 <Read_File+0x164>)
 8000d4c:	f007 fc24 	bl	8008598 <f_read>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <Read_File+0x15c>)
 8000d56:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <Read_File+0x15c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d016      	beq.n	8000d8e <Read_File+0xe2>
		{
			char *buf = malloc(100*sizeof(char));
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f008 fe85 	bl	8009a70 <malloc>
 8000d66:	4603      	mov	r3, r0
 8000d68:	613b      	str	r3, [r7, #16]
			free(buffer);
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f008 fe88 	bl	8009a80 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <Read_File+0x15c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4928      	ldr	r1, [pc, #160]	; (8000e1c <Read_File+0x170>)
 8000d7a:	6938      	ldr	r0, [r7, #16]
 8000d7c:	f008 ffd8 	bl	8009d30 <siprintf>
		  	Send_Uart(buffer);
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f7ff feff 	bl	8000b84 <Send_Uart>
		  	free(buf);
 8000d86:	6938      	ldr	r0, [r7, #16]
 8000d88:	f008 fe7a 	bl	8009a80 <free>
 8000d8c:	e034      	b.n	8000df8 <Read_File+0x14c>
		}

		else
		{
			Send_Uart(buffer);
 8000d8e:	69f8      	ldr	r0, [r7, #28]
 8000d90:	f7ff fef8 	bl	8000b84 <Send_Uart>
			free(buffer);
 8000d94:	69f8      	ldr	r0, [r7, #28]
 8000d96:	f008 fe73 	bl	8009a80 <free>

			/* Close file */
			fresult = f_close(&fil);
 8000d9a:	481d      	ldr	r0, [pc, #116]	; (8000e10 <Read_File+0x164>)
 8000d9c:	f007 ff6d 	bl	8008c7a <f_close>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <Read_File+0x15c>)
 8000da6:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <Read_File+0x15c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <Read_File+0x12c>
			{
				char *buf = malloc(100*sizeof(char));
 8000db0:	2064      	movs	r0, #100	; 0x64
 8000db2:	f008 fe5d 	bl	8009a70 <malloc>
 8000db6:	4603      	mov	r3, r0
 8000db8:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <Read_File+0x15c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4917      	ldr	r1, [pc, #92]	; (8000e20 <Read_File+0x174>)
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f008 ffb3 	bl	8009d30 <siprintf>
				Send_Uart(buf);
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff feda 	bl	8000b84 <Send_Uart>
				free(buf);
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	f008 fe55 	bl	8009a80 <free>
 8000dd6:	e00f      	b.n	8000df8 <Read_File+0x14c>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f008 fe49 	bl	8009a70 <malloc>
 8000dde:	4603      	mov	r3, r0
 8000de0:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	490f      	ldr	r1, [pc, #60]	; (8000e24 <Read_File+0x178>)
 8000de6:	69b8      	ldr	r0, [r7, #24]
 8000de8:	f008 ffa2 	bl	8009d30 <siprintf>
				Send_Uart(buf);
 8000dec:	69b8      	ldr	r0, [r7, #24]
 8000dee:	f7ff fec9 	bl	8000b84 <Send_Uart>
				free(buf);
 8000df2:	69b8      	ldr	r0, [r7, #24]
 8000df4:	f008 fe44 	bl	8009a80 <free>
			}
		}
	    return fresult;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <Read_File+0x15c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000dc 	.word	0x200000dc
 8000e08:	20001138 	.word	0x20001138
 8000e0c:	0800affc 	.word	0x0800affc
 8000e10:	20001140 	.word	0x20001140
 8000e14:	0800af38 	.word	0x0800af38
 8000e18:	20001128 	.word	0x20001128
 8000e1c:	0800b020 	.word	0x0800b020
 8000e20:	0800b048 	.word	0x0800b048
 8000e24:	0800b070 	.word	0x0800b070

08000e28 <Create_File>:

FRESULT Create_File (char *name)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000e30:	4943      	ldr	r1, [pc, #268]	; (8000f40 <Create_File+0x118>)
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f007 ff4b 	bl	8008cce <f_stat>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <Create_File+0x11c>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <Create_File+0x11c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d112      	bne.n	8000e6e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000e48:	2064      	movs	r0, #100	; 0x64
 8000e4a:	f008 fe11 	bl	8009a70 <malloc>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	493c      	ldr	r1, [pc, #240]	; (8000f48 <Create_File+0x120>)
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f008 ff6a 	bl	8009d30 <siprintf>
		Send_Uart(buf);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fe91 	bl	8000b84 <Send_Uart>
		free(buf);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f008 fe0c 	bl	8009a80 <free>
	    return fresult;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <Create_File+0x11c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	e063      	b.n	8000f36 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000e6e:	220b      	movs	r2, #11
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4836      	ldr	r0, [pc, #216]	; (8000f4c <Create_File+0x124>)
 8000e74:	f007 f9c4 	bl	8008200 <f_open>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <Create_File+0x11c>)
 8000e7e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <Create_File+0x11c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d015      	beq.n	8000eb4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000e88:	2064      	movs	r0, #100	; 0x64
 8000e8a:	f008 fdf1 	bl	8009a70 <malloc>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <Create_File+0x11c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	492d      	ldr	r1, [pc, #180]	; (8000f50 <Create_File+0x128>)
 8000e9c:	6938      	ldr	r0, [r7, #16]
 8000e9e:	f008 ff47 	bl	8009d30 <siprintf>
			Send_Uart(buf);
 8000ea2:	6938      	ldr	r0, [r7, #16]
 8000ea4:	f7ff fe6e 	bl	8000b84 <Send_Uart>
			free(buf);
 8000ea8:	6938      	ldr	r0, [r7, #16]
 8000eaa:	f008 fde9 	bl	8009a80 <free>
		    return fresult;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <Create_File+0x11c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	e040      	b.n	8000f36 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f008 fddb 	bl	8009a70 <malloc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4924      	ldr	r1, [pc, #144]	; (8000f54 <Create_File+0x12c>)
 8000ec2:	69f8      	ldr	r0, [r7, #28]
 8000ec4:	f008 ff34 	bl	8009d30 <siprintf>
			Send_Uart(buf);
 8000ec8:	69f8      	ldr	r0, [r7, #28]
 8000eca:	f7ff fe5b 	bl	8000b84 <Send_Uart>
			free(buf);
 8000ece:	69f8      	ldr	r0, [r7, #28]
 8000ed0:	f008 fdd6 	bl	8009a80 <free>
		}

		fresult = f_close(&fil);
 8000ed4:	481d      	ldr	r0, [pc, #116]	; (8000f4c <Create_File+0x124>)
 8000ed6:	f007 fed0 	bl	8008c7a <f_close>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <Create_File+0x11c>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <Create_File+0x11c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d013      	beq.n	8000f12 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f008 fdc0 	bl	8009a70 <malloc>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Create_File+0x11c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4916      	ldr	r1, [pc, #88]	; (8000f58 <Create_File+0x130>)
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f008 ff16 	bl	8009d30 <siprintf>
			Send_Uart(buf);
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff fe3d 	bl	8000b84 <Send_Uart>
			free(buf);
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f008 fdb8 	bl	8009a80 <free>
 8000f10:	e00f      	b.n	8000f32 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f008 fdac 	bl	8009a70 <malloc>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	490f      	ldr	r1, [pc, #60]	; (8000f5c <Create_File+0x134>)
 8000f20:	69b8      	ldr	r0, [r7, #24]
 8000f22:	f008 ff05 	bl	8009d30 <siprintf>
			Send_Uart(buf);
 8000f26:	69b8      	ldr	r0, [r7, #24]
 8000f28:	f7ff fe2c 	bl	8000b84 <Send_Uart>
			free(buf);
 8000f2c:	69b8      	ldr	r0, [r7, #24]
 8000f2e:	f008 fda7 	bl	8009a80 <free>
		}
	}
    return fresult;
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <Create_File+0x11c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000dc 	.word	0x200000dc
 8000f44:	20001138 	.word	0x20001138
 8000f48:	0800b090 	.word	0x0800b090
 8000f4c:	20001140 	.word	0x20001140
 8000f50:	0800b0c8 	.word	0x0800b0c8
 8000f54:	0800b0f0 	.word	0x0800b0f0
 8000f58:	0800b130 	.word	0x0800b130
 8000f5c:	0800b070 	.word	0x0800b070

08000f60 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000f6a:	4956      	ldr	r1, [pc, #344]	; (80010c4 <Update_File+0x164>)
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f007 feae 	bl	8008cce <f_stat>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <Update_File+0x168>)
 8000f78:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000f7a:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <Update_File+0x168>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d012      	beq.n	8000fa8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f008 fd74 	bl	8009a70 <malloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	494f      	ldr	r1, [pc, #316]	; (80010cc <Update_File+0x16c>)
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f008 fecd 	bl	8009d30 <siprintf>
		Send_Uart (buf);
 8000f96:	68b8      	ldr	r0, [r7, #8]
 8000f98:	f7ff fdf4 	bl	8000b84 <Send_Uart>
		free(buf);
 8000f9c:	68b8      	ldr	r0, [r7, #8]
 8000f9e:	f008 fd6f 	bl	8009a80 <free>
	    return fresult;
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <Update_File+0x168>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	e088      	b.n	80010ba <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000fa8:	2232      	movs	r2, #50	; 0x32
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4848      	ldr	r0, [pc, #288]	; (80010d0 <Update_File+0x170>)
 8000fae:	f007 f927 	bl	8008200 <f_open>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <Update_File+0x168>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <Update_File+0x168>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d015      	beq.n	8000fee <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f008 fd54 	bl	8009a70 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <Update_File+0x168>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	493f      	ldr	r1, [pc, #252]	; (80010d4 <Update_File+0x174>)
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f008 feaa 	bl	8009d30 <siprintf>
	    	Send_Uart(buf);
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fdd1 	bl	8000b84 <Send_Uart>
	        free(buf);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f008 fd4c 	bl	8009a80 <free>
	        return fresult;
 8000fe8:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <Update_File+0x168>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	e065      	b.n	80010ba <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff f8ee 	bl	80001d0 <strlen>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <Update_File+0x178>)
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	4835      	ldr	r0, [pc, #212]	; (80010d0 <Update_File+0x170>)
 8000ffc:	f007 fc2b 	bl	8008856 <f_write>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <Update_File+0x168>)
 8001006:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <Update_File+0x168>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f008 fd2d 	bl	8009a70 <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <Update_File+0x168>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	492e      	ldr	r1, [pc, #184]	; (80010dc <Update_File+0x17c>)
 8001024:	69b8      	ldr	r0, [r7, #24]
 8001026:	f008 fe83 	bl	8009d30 <siprintf>
	    	Send_Uart(buf);
 800102a:	69b8      	ldr	r0, [r7, #24]
 800102c:	f7ff fdaa 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8001030:	69b8      	ldr	r0, [r7, #24]
 8001032:	f008 fd25 	bl	8009a80 <free>
 8001036:	e00f      	b.n	8001058 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f008 fd19 	bl	8009a70 <malloc>
 800103e:	4603      	mov	r3, r0
 8001040:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4926      	ldr	r1, [pc, #152]	; (80010e0 <Update_File+0x180>)
 8001046:	69f8      	ldr	r0, [r7, #28]
 8001048:	f008 fe72 	bl	8009d30 <siprintf>
	    	Send_Uart(buf);
 800104c:	69f8      	ldr	r0, [r7, #28]
 800104e:	f7ff fd99 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8001052:	69f8      	ldr	r0, [r7, #28]
 8001054:	f008 fd14 	bl	8009a80 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001058:	481d      	ldr	r0, [pc, #116]	; (80010d0 <Update_File+0x170>)
 800105a:	f007 fe0e 	bl	8008c7a <f_close>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <Update_File+0x168>)
 8001064:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <Update_File+0x168>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d013      	beq.n	8001096 <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f008 fcfe 	bl	8009a70 <malloc>
 8001074:	4603      	mov	r3, r0
 8001076:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <Update_File+0x168>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4918      	ldr	r1, [pc, #96]	; (80010e4 <Update_File+0x184>)
 8001082:	6938      	ldr	r0, [r7, #16]
 8001084:	f008 fe54 	bl	8009d30 <siprintf>
	    	Send_Uart(buf);
 8001088:	6938      	ldr	r0, [r7, #16]
 800108a:	f7ff fd7b 	bl	8000b84 <Send_Uart>
	    	free(buf);
 800108e:	6938      	ldr	r0, [r7, #16]
 8001090:	f008 fcf6 	bl	8009a80 <free>
 8001094:	e00f      	b.n	80010b6 <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f008 fcea 	bl	8009a70 <malloc>
 800109c:	4603      	mov	r3, r0
 800109e:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4911      	ldr	r1, [pc, #68]	; (80010e8 <Update_File+0x188>)
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f008 fe43 	bl	8009d30 <siprintf>
	    	Send_Uart(buf);
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff fd6a 	bl	8000b84 <Send_Uart>
	    	free(buf);
 80010b0:	6978      	ldr	r0, [r7, #20]
 80010b2:	f008 fce5 	bl	8009a80 <free>
	     }
	}
    return fresult;
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <Update_File+0x168>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000dc 	.word	0x200000dc
 80010c8:	20001138 	.word	0x20001138
 80010cc:	0800af18 	.word	0x0800af18
 80010d0:	20001140 	.word	0x20001140
 80010d4:	0800af38 	.word	0x0800af38
 80010d8:	20001130 	.word	0x20001130
 80010dc:	0800b154 	.word	0x0800b154
 80010e0:	0800b17c 	.word	0x0800b17c
 80010e4:	0800b048 	.word	0x0800b048
 80010e8:	0800b070 	.word	0x0800b070

080010ec <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f007 fed8 	bl	8008eaa <f_mkdir>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <Create_Dir+0x74>)
 8001100:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <Create_Dir+0x74>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d110      	bne.n	800112c <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f008 fcb0 	bl	8009a70 <malloc>
 8001110:	4603      	mov	r3, r0
 8001112:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4913      	ldr	r1, [pc, #76]	; (8001164 <Create_Dir+0x78>)
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f008 fe09 	bl	8009d30 <siprintf>
    	Send_Uart (buf);
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff fd30 	bl	8000b84 <Send_Uart>
    	free(buf);
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f008 fcab 	bl	8009a80 <free>
 800112a:	e012      	b.n	8001152 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f008 fc9f 	bl	8009a70 <malloc>
 8001132:	4603      	mov	r3, r0
 8001134:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <Create_Dir+0x74>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	490a      	ldr	r1, [pc, #40]	; (8001168 <Create_Dir+0x7c>)
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f008 fdf5 	bl	8009d30 <siprintf>
    	Send_Uart(buf);
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fd1c 	bl	8000b84 <Send_Uart>
    	free(buf);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f008 fc97 	bl	8009a80 <free>
    }
    return fresult;
 8001152:	4b03      	ldr	r3, [pc, #12]	; (8001160 <Create_Dir+0x74>)
 8001154:	781b      	ldrb	r3, [r3, #0]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20001138 	.word	0x20001138
 8001164:	0800b1dc 	.word	0x0800b1dc
 8001168:	0800b200 	.word	0x0800b200

0800116c <Check_SD_Space>:

void Check_SD_Space (void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("/", &fre_clust, &pfs);
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <Check_SD_Space+0x90>)
 8001172:	4923      	ldr	r1, [pc, #140]	; (8001200 <Check_SD_Space+0x94>)
 8001174:	4823      	ldr	r0, [pc, #140]	; (8001204 <Check_SD_Space+0x98>)
 8001176:	f007 fde3 	bl	8008d40 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <Check_SD_Space+0x90>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	3b02      	subs	r3, #2
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <Check_SD_Space+0x90>)
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	8952      	ldrh	r2, [r2, #10]
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fae3 	bl	8000758 <__aeabi_ui2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <Check_SD_Space+0x9c>)
 8001198:	f7ff f872 	bl	8000280 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fb52 	bl	800084c <__aeabi_d2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a18      	ldr	r2, [pc, #96]	; (800120c <Check_SD_Space+0xa0>)
 80011ac:	6013      	str	r3, [r2, #0]
    //char *buf = malloc(30*sizeof(char));
    //sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
    //Send_Uart(buf);
    //free(buf);
    printf("SD CARD Total Size: \t%lu\n", total);
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <Check_SD_Space+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <Check_SD_Space+0xa4>)
 80011b6:	f008 fd1d 	bl	8009bf4 <iprintf>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Check_SD_Space+0x90>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	895b      	ldrh	r3, [r3, #10]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <Check_SD_Space+0x94>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	fb03 f302 	mul.w	r3, r3, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fac4 	bl	8000758 <__aeabi_ui2d>
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <Check_SD_Space+0x9c>)
 80011d6:	f7ff f853 	bl	8000280 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fb33 	bl	800084c <__aeabi_d2uiz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <Check_SD_Space+0xa8>)
 80011ea:	6013      	str	r3, [r2, #0]
//    buf = malloc(30*sizeof(char));
//    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
//    Send_Uart(buf);
//    free(buf);
    printf("SD CARD Free Space: \t%lu\n", free_space);
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <Check_SD_Space+0xa8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <Check_SD_Space+0xac>)
 80011f4:	f008 fcfe 	bl	8009bf4 <iprintf>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20001134 	.word	0x20001134
 8001200:	200000d8 	.word	0x200000d8
 8001204:	0800aeb8 	.word	0x0800aeb8
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	2000113c 	.word	0x2000113c
 8001210:	0800b22c 	.word	0x0800b22c
 8001214:	2000112c 	.word	0x2000112c
 8001218:	0800b248 	.word	0x0800b248

0800121c <Get_File_Info>:

void Get_File_Info(char *name)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8001224:	493d      	ldr	r1, [pc, #244]	; (800131c <Get_File_Info+0x100>)
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f007 fd51 	bl	8008cce <f_stat>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <Get_File_Info+0x104>)
 8001232:	701a      	strb	r2, [r3, #0]
	switch (fresult)
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <Get_File_Info+0x104>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <Get_File_Info+0x26>
 800123c:	2b04      	cmp	r3, #4
 800123e:	d05d      	beq.n	80012fc <Get_File_Info+0xe0>
 8001240:	e061      	b.n	8001306 <Get_File_Info+0xea>
	{
	case FR_OK:

		printf("Below are the details of the *%s* \nSize: %lu\n", name, fno.fsize);
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <Get_File_Info+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4836      	ldr	r0, [pc, #216]	; (8001324 <Get_File_Info+0x108>)
 800124c:	f008 fcd2 	bl	8009bf4 <iprintf>
		// send_uart(buffer);
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
			   (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <Get_File_Info+0x100>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	0a5b      	lsrs	r3, r3, #9
 8001256:	b29b      	uxth	r3, r3
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001258:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
			   (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <Get_File_Info+0x100>)
 800125e:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	b29b      	uxth	r3, r3
 8001264:	f003 020f 	and.w	r2, r3, #15
			   (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <Get_File_Info+0x100>)
 800126a:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800126c:	f003 001f 	and.w	r0, r3, #31
			   fno.ftime >> 11, fno.ftime >> 5 & 63);
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <Get_File_Info+0x100>)
 8001272:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001274:	0adb      	lsrs	r3, r3, #11
 8001276:	b29b      	uxth	r3, r3
 8001278:	461c      	mov	r4, r3
			   fno.ftime >> 11, fno.ftime >> 5 & 63);
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <Get_File_Info+0x100>)
 800127c:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	b29b      	uxth	r3, r3
 8001282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	9400      	str	r4, [sp, #0]
 800128a:	4603      	mov	r3, r0
 800128c:	4826      	ldr	r0, [pc, #152]	; (8001328 <Get_File_Info+0x10c>)
 800128e:	f008 fcb1 	bl	8009bf4 <iprintf>
		// end_uart(buffer);
		printf("Attributes: %c%c%c%c%c\n",
			   (fno.fattrib & AM_DIR) ? 'D' : '-',
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <Get_File_Info+0x100>)
 8001294:	7a1b      	ldrb	r3, [r3, #8]
 8001296:	f003 0310 	and.w	r3, r3, #16
		printf("Attributes: %c%c%c%c%c\n",
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Get_File_Info+0x86>
 800129e:	2144      	movs	r1, #68	; 0x44
 80012a0:	e000      	b.n	80012a4 <Get_File_Info+0x88>
 80012a2:	212d      	movs	r1, #45	; 0x2d
			   (fno.fattrib & AM_RDO) ? 'R' : '-',
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <Get_File_Info+0x100>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	f003 0301 	and.w	r3, r3, #1
		printf("Attributes: %c%c%c%c%c\n",
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <Get_File_Info+0x98>
 80012b0:	2052      	movs	r0, #82	; 0x52
 80012b2:	e000      	b.n	80012b6 <Get_File_Info+0x9a>
 80012b4:	202d      	movs	r0, #45	; 0x2d
			   (fno.fattrib & AM_HID) ? 'H' : '-',
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <Get_File_Info+0x100>)
 80012b8:	7a1b      	ldrb	r3, [r3, #8]
 80012ba:	f003 0302 	and.w	r3, r3, #2
		printf("Attributes: %c%c%c%c%c\n",
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <Get_File_Info+0xaa>
 80012c2:	2448      	movs	r4, #72	; 0x48
 80012c4:	e000      	b.n	80012c8 <Get_File_Info+0xac>
 80012c6:	242d      	movs	r4, #45	; 0x2d
			   (fno.fattrib & AM_SYS) ? 'S' : '-',
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <Get_File_Info+0x100>)
 80012ca:	7a1b      	ldrb	r3, [r3, #8]
 80012cc:	f003 0304 	and.w	r3, r3, #4
		printf("Attributes: %c%c%c%c%c\n",
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <Get_File_Info+0xbc>
 80012d4:	2353      	movs	r3, #83	; 0x53
 80012d6:	e000      	b.n	80012da <Get_File_Info+0xbe>
 80012d8:	232d      	movs	r3, #45	; 0x2d
			   (fno.fattrib & AM_ARC) ? 'A' : '-');
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <Get_File_Info+0x100>)
 80012dc:	7a12      	ldrb	r2, [r2, #8]
 80012de:	f002 0220 	and.w	r2, r2, #32
		printf("Attributes: %c%c%c%c%c\n",
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d001      	beq.n	80012ea <Get_File_Info+0xce>
 80012e6:	2241      	movs	r2, #65	; 0x41
 80012e8:	e000      	b.n	80012ec <Get_File_Info+0xd0>
 80012ea:	222d      	movs	r2, #45	; 0x2d
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4623      	mov	r3, r4
 80012f2:	4602      	mov	r2, r0
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <Get_File_Info+0x110>)
 80012f6:	f008 fc7d 	bl	8009bf4 <iprintf>
		// send_uart(buffer);
		break;
 80012fa:	e00b      	b.n	8001314 <Get_File_Info+0xf8>

	case FR_NO_FILE:
		printf("*%s* does not exist.\n", name);
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <Get_File_Info+0x114>)
 8001300:	f008 fc78 	bl	8009bf4 <iprintf>
		// send_uart(buffer);
		break;
 8001304:	e006      	b.n	8001314 <Get_File_Info+0xf8>

	default:
		printf("An error occurred. (%d)\n", fresult);
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <Get_File_Info+0x104>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <Get_File_Info+0x118>)
 800130e:	f008 fc71 	bl	8009bf4 <iprintf>
		// send_uart(buffer);
	}
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	200000dc 	.word	0x200000dc
 8001320:	20001138 	.word	0x20001138
 8001324:	0800b264 	.word	0x0800b264
 8001328:	0800b294 	.word	0x0800b294
 800132c:	0800b2b8 	.word	0x0800b2b8
 8001330:	0800b2d0 	.word	0x0800b2d0
 8001334:	0800b2e8 	.word	0x0800b2e8

08001338 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001340:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001344:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001354:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001358:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00b      	beq.n	8001378 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001360:	e000      	b.n	8001364 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001362:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f9      	beq.n	8001362 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800136e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	b29a      	uxth	r2, r3
 8001398:	2332      	movs	r3, #50	; 0x32
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <_write+0x48>)
 800139e:	f003 fe0c 	bl	8004fba <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x34>
		ITM_SendChar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffc1 	bl	8001338 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x20>
	}
	return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20002318 	.word	0x20002318

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fc9d 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f881 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 f95b 	bl	800169c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 f931 	bl	800164c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80013ea:	f000 f8e5 	bl	80015b8 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 80013ee:	f000 f903 	bl	80015f8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80013f2:	f004 fe1f 	bl	8006034 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD("/");
 80013f6:	4830      	ldr	r0, [pc, #192]	; (80014b8 <main+0xe4>)
 80013f8:	f7ff fbda 	bl	8000bb0 <Mount_SD>
  Format_SD();
 80013fc:	f7ff fc1e 	bl	8000c3c <Format_SD>
  Create_Dir("Buttons");// В названии папок нельзя использовать символы "_"!
 8001400:	482e      	ldr	r0, [pc, #184]	; (80014bc <main+0xe8>)
 8001402:	f7ff fe73 	bl	80010ec <Create_Dir>
  Create_File("Buttons/B_config.txt");
 8001406:	482e      	ldr	r0, [pc, #184]	; (80014c0 <main+0xec>)
 8001408:	f7ff fd0e 	bl	8000e28 <Create_File>
  sprintf(buffer, "Buttons hello!");
 800140c:	492d      	ldr	r1, [pc, #180]	; (80014c4 <main+0xf0>)
 800140e:	482e      	ldr	r0, [pc, #184]	; (80014c8 <main+0xf4>)
 8001410:	f008 fc8e 	bl	8009d30 <siprintf>
  Update_File("Buttons/B_config.txt",buffer);
 8001414:	492c      	ldr	r1, [pc, #176]	; (80014c8 <main+0xf4>)
 8001416:	482a      	ldr	r0, [pc, #168]	; (80014c0 <main+0xec>)
 8001418:	f7ff fda2 	bl	8000f60 <Update_File>
  Create_Dir("Relays"); // В названии папок нельзя использовать символы "_"!
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <main+0xf8>)
 800141e:	f7ff fe65 	bl	80010ec <Create_Dir>
  Create_File("Relays/R_config.txt");
 8001422:	482b      	ldr	r0, [pc, #172]	; (80014d0 <main+0xfc>)
 8001424:	f7ff fd00 	bl	8000e28 <Create_File>
  sprintf(buffer, "Relays hello!");
 8001428:	492a      	ldr	r1, [pc, #168]	; (80014d4 <main+0x100>)
 800142a:	4827      	ldr	r0, [pc, #156]	; (80014c8 <main+0xf4>)
 800142c:	f008 fc80 	bl	8009d30 <siprintf>
  Update_File("Relays/R_config.txt",buffer);
 8001430:	4925      	ldr	r1, [pc, #148]	; (80014c8 <main+0xf4>)
 8001432:	4827      	ldr	r0, [pc, #156]	; (80014d0 <main+0xfc>)
 8001434:	f7ff fd94 	bl	8000f60 <Update_File>
  Read_File ("Buttons/B_config.txt");
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <main+0xec>)
 800143a:	f7ff fc37 	bl	8000cac <Read_File>
  Read_File ("Relays/R_config.txt");
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <main+0xfc>)
 8001440:	f7ff fc34 	bl	8000cac <Read_File>

  Get_File_Info("Buttons/B_config.txt");
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <main+0xec>)
 8001446:	f7ff fee9 	bl	800121c <Get_File_Info>
  Get_File_Info("Relays/R_config.txt");
 800144a:	4821      	ldr	r0, [pc, #132]	; (80014d0 <main+0xfc>)
 800144c:	f7ff fee6 	bl	800121c <Get_File_Info>
//   Scan_files(buff); // НЕ РАБОТАЕТ!!!

//   Check_SD_Space();
//   Scan_SD ("/"); // НЕ РАБОТАЕТ!!!

  Unmount_SD("/");
 8001450:	4819      	ldr	r0, [pc, #100]	; (80014b8 <main+0xe4>)
 8001452:	f7ff fbd1 	bl	8000bf8 <Unmount_SD>
  int num=1;	//initializing the variable
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while(num<=2)	//while loop with condition
 800145a:	e029      	b.n	80014b0 <main+0xdc>
		{

		Mount_SD("/");
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <main+0xe4>)
 800145e:	f7ff fba7 	bl	8000bb0 <Mount_SD>
		sprintf(buffer, "Hello from while---> %d\n", indx);
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <main+0x104>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	491c      	ldr	r1, [pc, #112]	; (80014dc <main+0x108>)
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <main+0xf4>)
 800146c:	f008 fc60 	bl	8009d30 <siprintf>
		Update_File("Buttons/B_config.txt", buffer);
 8001470:	4915      	ldr	r1, [pc, #84]	; (80014c8 <main+0xf4>)
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0xec>)
 8001474:	f7ff fd74 	bl	8000f60 <Update_File>
		sprintf(buffer, "world from while ---> %d\n", indx);
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <main+0x104>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4918      	ldr	r1, [pc, #96]	; (80014e0 <main+0x10c>)
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <main+0xf4>)
 8001482:	f008 fc55 	bl	8009d30 <siprintf>
		Update_File("Relays/R_config.txt", buffer);
 8001486:	4910      	ldr	r1, [pc, #64]	; (80014c8 <main+0xf4>)
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <main+0xfc>)
 800148a:	f7ff fd69 	bl	8000f60 <Update_File>
		Unmount_SD("/");
 800148e:	480a      	ldr	r0, [pc, #40]	; (80014b8 <main+0xe4>)
 8001490:	f7ff fbb2 	bl	8000bf8 <Unmount_SD>

		indx++;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <main+0x104>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <main+0x104>)
 800149c:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);
 800149e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a2:	f000 fc7b 	bl	8001d9c <HAL_Delay>
		Check_SD_Space();
 80014a6:	f7ff fe61 	bl	800116c <Check_SD_Space>
		num++;		//incrementing operation
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
		while(num<=2)	//while loop with condition
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	ddd2      	ble.n	800145c <main+0x88>
 80014b6:	e7fb      	b.n	80014b0 <main+0xdc>
 80014b8:	0800b304 	.word	0x0800b304
 80014bc:	0800b308 	.word	0x0800b308
 80014c0:	0800b310 	.word	0x0800b310
 80014c4:	0800b328 	.word	0x0800b328
 80014c8:	200021d0 	.word	0x200021d0
 80014cc:	0800b338 	.word	0x0800b338
 80014d0:	0800b340 	.word	0x0800b340
 80014d4:	0800b354 	.word	0x0800b354
 80014d8:	2000008c 	.word	0x2000008c
 80014dc:	0800b364 	.word	0x0800b364
 80014e0:	0800b380 	.word	0x0800b380

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	2230      	movs	r2, #48	; 0x30
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 facc 	bl	8009a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <SystemClock_Config+0xcc>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <SystemClock_Config+0xcc>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <SystemClock_Config+0xcc>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <SystemClock_Config+0xd0>)
 800152e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <SystemClock_Config+0xd0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	2302      	movs	r3, #2
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001554:	2304      	movs	r3, #4
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001558:	23a8      	movs	r3, #168	; 0xa8
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800155c:	2302      	movs	r3, #2
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fa57 	bl	8002a1c <HAL_RCC_OscConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001574:	f000 f8e8 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2105      	movs	r1, #5
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fcb8 	bl	8002f0c <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015a2:	f000 f8d1 	bl	8001748 <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3750      	adds	r7, #80	; 0x50
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000

080015b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <MX_SDIO_SD_Init+0x3c>)
 80015c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <MX_SDIO_SD_Init+0x38>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	20002294 	.word	0x20002294
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MX_USART6_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART6_UART_Init+0x4c>)
 8001630:	f003 fc76 	bl	8004f20 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f000 f885 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20002318 	.word	0x20002318
 8001648:	40011400 	.word	0x40011400

0800164c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_DMA_Init+0x4c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <MX_DMA_Init+0x4c>)
 800165c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_DMA_Init+0x4c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	203b      	movs	r0, #59	; 0x3b
 8001674:	f000 fc6e 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001678:	203b      	movs	r0, #59	; 0x3b
 800167a:	f000 fc87 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2045      	movs	r0, #69	; 0x45
 8001684:	f000 fc66 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001688:	2045      	movs	r0, #69	; 0x45
 800168a:	f000 fc7f 	bl	8001f8c <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MX_GPIO_Init+0x84>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <MX_GPIO_Init+0x84>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_GPIO_Init+0x84>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_GPIO_Init+0x84>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <MX_GPIO_Init+0x84>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_GPIO_Init+0x84>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_GPIO_Init+0x84>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <MX_GPIO_Init+0x84>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_GPIO_Init+0x84>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_GPIO_Init+0x84>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <MX_GPIO_Init+0x84>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_GPIO_Init+0x84>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001736:	f000 fb11 	bl	8001d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40002000 	.word	0x40002000

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a70      	ldr	r2, [pc, #448]	; (8001984 <HAL_SD_MspInit+0x1e0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 80da 	bne.w	800197c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b6e      	ldr	r3, [pc, #440]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	4a6d      	ldr	r2, [pc, #436]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d6:	6453      	str	r3, [r2, #68]	; 0x44
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a5f      	ldr	r2, [pc, #380]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_SD_MspInit+0x1e4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800181c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800182e:	230c      	movs	r3, #12
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4854      	ldr	r0, [pc, #336]	; (800198c <HAL_SD_MspInit+0x1e8>)
 800183a:	f000 ff53 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001850:	230c      	movs	r3, #12
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	484c      	ldr	r0, [pc, #304]	; (800198c <HAL_SD_MspInit+0x1e8>)
 800185c:	f000 ff42 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001860:	2304      	movs	r3, #4
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001868:	2301      	movs	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001870:	230c      	movs	r3, #12
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4845      	ldr	r0, [pc, #276]	; (8001990 <HAL_SD_MspInit+0x1ec>)
 800187c:	f000 ff32 	bl	80026e4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001882:	4a45      	ldr	r2, [pc, #276]	; (8001998 <HAL_SD_MspInit+0x1f4>)
 8001884:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001886:	4b43      	ldr	r3, [pc, #268]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001888:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800188c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 800189c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018a8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80018b2:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018b4:	2220      	movs	r2, #32
 80018b6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018c0:	2204      	movs	r2, #4
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018c6:	2203      	movs	r2, #3
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018dc:	f000 fb64 	bl	8001fa8 <HAL_DMA_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80018e6:	f7ff ff2f 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a29      	ldr	r2, [pc, #164]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_SD_MspInit+0x1f8>)
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_SD_MspInit+0x1f8>)
 80018fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001902:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_SD_MspInit+0x1f8>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001916:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_SD_MspInit+0x1f8>)
 800191a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_SD_MspInit+0x1f8>)
 800192a:	2220      	movs	r2, #32
 800192c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001936:	2204      	movs	r2, #4
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_SD_MspInit+0x1f8>)
 800193c:	2203      	movs	r2, #3
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_SD_MspInit+0x1f8>)
 800194a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001952:	f000 fb29 	bl	8001fa8 <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800195c:	f7ff fef4 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2031      	movs	r0, #49	; 0x31
 8001972:	f000 faef 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001976:	2031      	movs	r0, #49	; 0x31
 8001978:	f000 fb08 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40023800 	.word	0x40023800
 800198c:	40020800 	.word	0x40020800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	20002170 	.word	0x20002170
 8001998:	40026458 	.word	0x40026458
 800199c:	20002234 	.word	0x20002234
 80019a0:	400264a0 	.word	0x400264a0

080019a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_UART_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_UART_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_UART_MspInit+0x8c>)
 8001a1a:	f000 fe63 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40011400 	.word	0x40011400
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020800 	.word	0x40020800

08001a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	202d      	movs	r0, #45	; 0x2d
 8001a4a:	f000 fa83 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a4e:	202d      	movs	r0, #45	; 0x2d
 8001a50:	f000 fa9c 	bl	8001f8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fc42 	bl	8003304 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a80:	f001 fc18 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8001a84:	4603      	mov	r3, r0
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_InitTick+0xa8>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3b01      	subs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_InitTick+0xac>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_InitTick+0xb0>)
 8001a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_InitTick+0xac>)
 8001aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_InitTick+0xac>)
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_InitTick+0xac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_InitTick+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001ab8:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <HAL_InitTick+0xac>)
 8001aba:	f002 ff84 	bl	80049c6 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d104      	bne.n	8001ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <HAL_InitTick+0xac>)
 8001ac6:	f002 ffd7 	bl	8004a78 <HAL_TIM_Base_Start_IT>
 8001aca:	4603      	mov	r3, r0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3730      	adds	r7, #48	; 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	2000235c 	.word	0x2000235c
 8001ae4:	40002000 	.word	0x40002000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001b46:	f003 f807 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000235c 	.word	0x2000235c

08001b54 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <SDIO_IRQHandler+0x10>)
 8001b5a:	f001 fe7b 	bl	8003854 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20002294 	.word	0x20002294

08001b68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA2_Stream3_IRQHandler+0x10>)
 8001b6e:	f000 fb43 	bl	80021f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20002170 	.word	0x20002170

08001b7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Stream6_IRQHandler+0x10>)
 8001b82:	f000 fb39 	bl	80021f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20002234 	.word	0x20002234

08001b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
	}

return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f007 feda 	bl	8009a1c <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20020000 	.word	0x20020000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20000090 	.word	0x20000090
 8001c9c:	20004428 	.word	0x20004428

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce0:	4c0b      	ldr	r4, [pc, #44]	; (8001d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cee:	f7ff ffd7 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f007 fe99 	bl	8009a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fb6d 	bl	80013d4 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d08:	0800b55c 	.word	0x0800b55c
  ldr r2, =_sbss
 8001d0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d10:	20004424 	.word	0x20004424

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_Init+0x40>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_Init+0x40>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x40>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f8fc 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f7ff fe74 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff fd02 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	200023a4 	.word	0x200023a4

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200023a4 	.word	0x200023a4

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <__NVIC_SetPriorityGrouping>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4c 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f66:	f7ff ff61 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7ff ffb1 	bl	8001ed8 <NVIC_EncodePriority>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff80 	bl	8001e84 <__NVIC_SetPriority>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff54 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fee6 	bl	8001d84 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e099      	b.n	80020f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe4:	e00f      	b.n	8002006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe6:	f7ff fecd 	bl	8001d84 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d908      	bls.n	8002006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e078      	b.n	80020f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_DMA_Init+0x158>)
 8002020:	4013      	ands	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4313      	orrs	r3, r2
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 0307 	bic.w	r3, r3, #7
 8002086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2b04      	cmp	r3, #4
 8002098:	d117      	bne.n	80020ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00e      	beq.n	80020ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fa9d 	bl	80025ec <DMA_CheckFifoParam>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020c6:	2301      	movs	r3, #1
 80020c8:	e016      	b.n	80020f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa54 	bl	8002580 <DMA_CalcBaseAndBitshift>
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	223f      	movs	r2, #63	; 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f010803f 	.word	0xf010803f

08002104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_DMA_Start_IT+0x26>
 8002126:	2302      	movs	r3, #2
 8002128:	e040      	b.n	80021ac <HAL_DMA_Start_IT+0xa8>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d12f      	bne.n	800219e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f9e6 	bl	8002524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	223f      	movs	r2, #63	; 0x3f
 800215e:	409a      	lsls	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0216 	orr.w	r2, r2, #22
 8002172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e005      	b.n	80021aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d004      	beq.n	80021d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00c      	b.n	80021ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2205      	movs	r2, #5
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002204:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_DMA_IRQHandler+0x258>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a92      	ldr	r2, [pc, #584]	; (8002454 <HAL_DMA_IRQHandler+0x25c>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a9b      	lsrs	r3, r3, #10
 8002210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	2208      	movs	r2, #8
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01a      	beq.n	8002264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2208      	movs	r2, #8
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d012      	beq.n	800229a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2201      	movs	r2, #1
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2204      	movs	r2, #4
 80022a0:	409a      	lsls	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2204      	movs	r2, #4
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	2210      	movs	r2, #16
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d043      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03c      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2210      	movs	r2, #16
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d018      	beq.n	800233a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d024      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
 8002326:	e01f      	b.n	8002368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
 8002338:	e016      	b.n	8002368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0208 	bic.w	r2, r2, #8
 8002356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2220      	movs	r2, #32
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 808e 	beq.w	8002496 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8086 	beq.w	8002496 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2220      	movs	r2, #32
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d136      	bne.n	8002410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0216 	bic.w	r2, r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x1da>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	223f      	movs	r2, #63	; 0x3f
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07d      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
        }
        return;
 800240e:	e078      	b.n	8002502 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01c      	beq.n	8002458 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d108      	bne.n	800243e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	d030      	beq.n	8002496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e02b      	b.n	8002496 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d027      	beq.n	8002496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e022      	b.n	8002496 <HAL_DMA_IRQHandler+0x29e>
 8002450:	20000000 	.word	0x20000000
 8002454:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0210 	bic.w	r2, r2, #16
 8002474:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	2b00      	cmp	r3, #0
 800249c:	d032      	beq.n	8002504 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d022      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d307      	bcc.n	80024de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f2      	bne.n	80024c2 <HAL_DMA_IRQHandler+0x2ca>
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e000      	b.n	8002504 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002502:	bf00      	nop
    }
  }
}
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop

0800250c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d108      	bne.n	8002564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002562:	e007      	b.n	8002574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3b10      	subs	r3, #16
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <DMA_CalcBaseAndBitshift+0x68>)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d909      	bls.n	80025c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	1d1a      	adds	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	; 0x58
 80025c0:	e007      	b.n	80025d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	aaaaaaab 	.word	0xaaaaaaab
 80025e8:	0800b3f8 	.word	0x0800b3f8

080025ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11f      	bne.n	8002646 <DMA_CheckFifoParam+0x5a>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d856      	bhi.n	80026ba <DMA_CheckFifoParam+0xce>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <DMA_CheckFifoParam+0x28>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002625 	.word	0x08002625
 8002618:	08002637 	.word	0x08002637
 800261c:	08002625 	.word	0x08002625
 8002620:	080026bb 	.word	0x080026bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d046      	beq.n	80026be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e043      	b.n	80026be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263e:	d140      	bne.n	80026c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e03d      	b.n	80026c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	d121      	bne.n	8002694 <DMA_CheckFifoParam+0xa8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d837      	bhi.n	80026c6 <DMA_CheckFifoParam+0xda>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <DMA_CheckFifoParam+0x70>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	0800266d 	.word	0x0800266d
 8002660:	08002673 	.word	0x08002673
 8002664:	0800266d 	.word	0x0800266d
 8002668:	08002685 	.word	0x08002685
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e030      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d025      	beq.n	80026ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002682:	e022      	b.n	80026ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002692:	e01c      	b.n	80026ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d903      	bls.n	80026a2 <DMA_CheckFifoParam+0xb6>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d003      	beq.n	80026a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026a0:	e018      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      break;
 80026a6:	e015      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e00b      	b.n	80026d2 <DMA_CheckFifoParam+0xe6>
      break;
 80026ba:	bf00      	nop
 80026bc:	e00a      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e008      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e006      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e004      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
    }
  } 
  
  return status; 
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e264      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d075      	beq.n	8002b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3a:	4ba3      	ldr	r3, [pc, #652]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d00c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d112      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b9d      	ldr	r3, [pc, #628]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d05b      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d157      	bne.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e23f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x74>
 8002a82:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a90      	ldr	r2, [pc, #576]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x98>
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8a      	ldr	r2, [pc, #552]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a87      	ldr	r2, [pc, #540]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002ab4:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a83      	ldr	r2, [pc, #524]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b81      	ldr	r3, [pc, #516]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a80      	ldr	r2, [pc, #512]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f956 	bl	8001d84 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff f952 	bl	8001d84 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e204      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff f942 	bl	8001d84 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff f93e 	bl	8001d84 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1f0      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x152>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1c4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4952      	ldr	r1, [pc, #328]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_RCC_OscConfig+0x2b0>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7ff f8f7 	bl	8001d84 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f8f3 	bl	8001d84 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1a5      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4940      	ldr	r1, [pc, #256]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_OscConfig+0x2b0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f8d6 	bl	8001d84 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7ff f8d2 	bl	8001d84 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e184      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d030      	beq.n	8002c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCC_OscConfig+0x2b4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7ff f8b6 	bl	8001d84 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7ff f8b2 	bl	8001d84 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e164      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x200>
 8002c3a:	e015      	b.n	8002c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_OscConfig+0x2b4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7ff f89f 	bl	8001d84 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7ff f89b 	bl	8001d84 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e14d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a0 	beq.w	8002db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff f861 	bl	8001d84 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	e011      	b.n	8002cea <HAL_RCC_OscConfig+0x2ce>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	42470000 	.word	0x42470000
 8002cd0:	42470e80 	.word	0x42470e80
 8002cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7ff f854 	bl	8001d84 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e106      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x4e4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x32a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x312>
 8002d14:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a7a      	ldr	r2, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x32a>
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a74      	ldr	r2, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a71      	ldr	r2, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f819 	bl	8001d84 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff f815 	bl	8001d84 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0c5      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x33a>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f803 	bl	8001d84 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe ffff 	bl	8001d84 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0af      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a55      	ldr	r2, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 809b 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d05c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d141      	bne.n	8002e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe ffd3 	bl	8001d84 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe ffcf 	bl	8001d84 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e081      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	019b      	lsls	r3, r3, #6
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ffa8 	bl	8001d84 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe ffa4 	bl	8001d84 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e056      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x41c>
 8002e56:	e04e      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_OscConfig+0x4ec>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ff91 	bl	8001d84 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe ff8d 	bl	8001d84 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e03f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x44a>
 8002e84:	e037      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e032      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d028      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d11a      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40007000 	.word	0x40007000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470060 	.word	0x42470060

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cc      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90c      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	494d      	ldr	r1, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d044      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e067      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4934      	ldr	r1, [pc, #208]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fec2 	bl	8001d84 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe febe 	bl	8001d84 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d20c      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4916      	ldr	r1, [pc, #88]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003092:	f000 f821 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003096:	4602      	mov	r2, r0
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	5ccb      	ldrb	r3, [r1, r3]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fcbe 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	0800b3e0 	.word	0x0800b3e0
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f0:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d00d      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x40>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	f200 80bd 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x34>
 8003106:	2b04      	cmp	r3, #4
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x3a>
 800310a:	e0b7      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800310e:	60bb      	str	r3, [r7, #8]
       break;
 8003110:	e0b7      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e0b4      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003118:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04d      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	461a      	mov	r2, r3
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	ea02 0800 	and.w	r8, r2, r0
 8003146:	ea03 0901 	and.w	r9, r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	014b      	lsls	r3, r1, #5
 8003158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800315c:	0142      	lsls	r2, r0, #5
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	ebb0 0008 	subs.w	r0, r0, r8
 8003166:	eb61 0109 	sbc.w	r1, r1, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003178:	0182      	lsls	r2, r0, #6
 800317a:	1a12      	subs	r2, r2, r0
 800317c:	eb63 0301 	sbc.w	r3, r3, r1
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	00d9      	lsls	r1, r3, #3
 800318a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318e:	00d0      	lsls	r0, r2, #3
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	eb12 0208 	adds.w	r2, r2, r8
 8003198:	eb43 0309 	adc.w	r3, r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0259      	lsls	r1, r3, #9
 80031a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031aa:	0250      	lsls	r0, r2, #9
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f7fd fb66 	bl	800088c <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e04a      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	ea02 0400 	and.w	r4, r2, r0
 80031e2:	ea03 0501 	and.w	r5, r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f8:	0142      	lsls	r2, r0, #5
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	1b00      	subs	r0, r0, r4
 8003200:	eb61 0105 	sbc.w	r1, r1, r5
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003212:	0182      	lsls	r2, r0, #6
 8003214:	1a12      	subs	r2, r2, r0
 8003216:	eb63 0301 	sbc.w	r3, r3, r1
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003228:	00d0      	lsls	r0, r2, #3
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	1912      	adds	r2, r2, r4
 8003230:	eb45 0303 	adc.w	r3, r5, r3
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	0299      	lsls	r1, r3, #10
 800323e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003242:	0290      	lsls	r0, r2, #10
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f7fd fb1a 	bl	800088c <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327e:	60bb      	str	r3, [r7, #8]
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	68bb      	ldr	r3, [r7, #8]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	0800b3f0 	.word	0x0800b3f0

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffdc 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0b5b      	lsrs	r3, r3, #13
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	0800b3f0 	.word	0x0800b3f0

08003304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCC_GetClockConfig+0x60>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40023c00 	.word	0x40023c00

08003368 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e022      	b.n	80033c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe fa09 	bl	80017a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f814 	bl	80033c8 <HAL_SD_InitCard>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00a      	b.n	80033c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80033e4:	2376      	movs	r3, #118	; 0x76
 80033e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681d      	ldr	r5, [r3, #0]
 80033ec:	466c      	mov	r4, sp
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003400:	4628      	mov	r0, r5
 8003402:	f002 f8a3 	bl	800554c <SDIO_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800340c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e04c      	b.n	80034b2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003418:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_SD_InitCard+0xf4>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f002 f8db 	bl	80055de <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_SD_InitCard+0xf4>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f001 f804 	bl	800443c <SD_PowerON>
 8003434:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e02e      	b.n	80034b2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 ff25 	bl	80042a4 <SD_InitCard>
 800345a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e01b      	b.n	80034b2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003482:	4618      	mov	r0, r3
 8003484:	f002 f93e 	bl	8005704 <SDMMC_CmdBlockLength>
 8003488:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00f      	beq.n	80034b0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_SD_InitCard+0xf8>)
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	422580a0 	.word	0x422580a0
 80034c0:	004005ff 	.word	0x004005ff

080034c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0c0      	b.n	800366e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	f040 80b9 	bne.w	800366c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	429a      	cmp	r2, r3
 800350c:	d907      	bls.n	800351e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0a7      	b.n	800366e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2203      	movs	r2, #3
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a4c      	ldr	r2, [pc, #304]	; (8003678 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2200      	movs	r2, #0
 8003558:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3380      	adds	r3, #128	; 0x80
 8003588:	4619      	mov	r1, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	f7fe fdb7 	bl	8002104 <HAL_DMA_Start_IT>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a33      	ldr	r2, [pc, #204]	; (8003680 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e050      	b.n	800366e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	025b      	lsls	r3, r3, #9
 80035ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80035ec:	2390      	movs	r3, #144	; 0x90
 80035ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f107 0210 	add.w	r2, r7, #16
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f002 f850 	bl	80056ac <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d90a      	bls.n	8003628 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2282      	movs	r2, #130	; 0x82
 8003616:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361e:	4618      	mov	r0, r3
 8003620:	f002 f8b4 	bl	800578c <SDMMC_CmdReadMultiBlock>
 8003624:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003626:	e009      	b.n	800363c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2281      	movs	r2, #129	; 0x81
 800362c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003634:	4618      	mov	r0, r3
 8003636:	f002 f887 	bl	8005748 <SDMMC_CmdReadSingleBlock>
 800363a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0e      	ldr	r2, [pc, #56]	; (8003680 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e002      	b.n	800366e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3730      	adds	r7, #48	; 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	080040b3 	.word	0x080040b3
 800367c:	08004125 	.word	0x08004125
 8003680:	004005ff 	.word	0x004005ff
 8003684:	4225858c 	.word	0x4225858c

08003688 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0c5      	b.n	800383c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	f040 80be 	bne.w	800383a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d907      	bls.n	80036e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ac      	b.n	800383c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4a4e      	ldr	r2, [pc, #312]	; (8003844 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2200      	movs	r2, #0
 800371c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	025b      	lsls	r3, r3, #9
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d90a      	bls.n	8003748 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22a0      	movs	r2, #160	; 0xa0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800373e:	4618      	mov	r0, r3
 8003740:	f002 f868 	bl	8005814 <SDMMC_CmdWriteMultiBlock>
 8003744:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003746:	e009      	b.n	800375c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2290      	movs	r2, #144	; 0x90
 800374c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003754:	4618      	mov	r0, r3
 8003756:	f002 f83b 	bl	80057d0 <SDMMC_CmdWriteSingleBlock>
 800375a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d012      	beq.n	8003788 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a39      	ldr	r2, [pc, #228]	; (800384c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e059      	b.n	800383c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003788:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3380      	adds	r3, #128	; 0x80
 80037be:	461a      	mov	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	025b      	lsls	r3, r3, #9
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	f7fe fc9d 	bl	8002104 <HAL_DMA_Start_IT>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01c      	beq.n	800380a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80037de:	f023 0302 	bic.w	r3, r3, #2
 80037e2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e018      	b.n	800383c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	025b      	lsls	r3, r3, #9
 8003814:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003816:	2390      	movs	r3, #144	; 0x90
 8003818:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f107 0210 	add.w	r2, r7, #16
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f001 ff3b 	bl	80056ac <SDIO_ConfigData>

      return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	; 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	08004089 	.word	0x08004089
 8003848:	08004125 	.word	0x08004125
 800384c:	004005ff 	.word	0x004005ff
 8003850:	4225858c 	.word	0x4225858c

08003854 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_SD_IRQHandler+0x2e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fffd 	bl	800487a <SD_Read_IT>
 8003880:	e165      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 808f 	beq.w	80039b0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800389a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80038aa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80038ae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d039      	beq.n	800393e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_SD_IRQHandler+0x8a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 ffb8 	bl	8005858 <SDMMC_CmdStopTransfer>
 80038e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f92f 	bl	8003b60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f240 523a 	movw	r2, #1338	; 0x53a
 800390a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <HAL_SD_IRQHandler+0xda>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f002 fc26 	bl	8006180 <HAL_SD_RxCpltCallback>
 8003934:	e10b      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f002 fc18 	bl	800616c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800393c:	e107      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8102 	beq.w	8003b4e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d011      	beq.n	8003978 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f001 ff7d 	bl	8005858 <SDMMC_CmdStopTransfer>
 800395e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8f4 	bl	8003b60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 80e5 	bne.w	8003b4e <HAL_SD_IRQHandler+0x2fa>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 80df 	bne.w	8003b4e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0208 	bic.w	r2, r2, #8
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f002 fbdf 	bl	800616c <HAL_SD_TxCpltCallback>
}
 80039ae:	e0ce      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_SD_IRQHandler+0x17c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 ffa7 	bl	800491c <SD_Write_IT>
 80039ce:	e0be      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d6:	f240 233a 	movw	r3, #570	; 0x23a
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80b6 	beq.w	8003b4e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	f043 0202 	orr.w	r2, r3, #2
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f043 0210 	orr.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f043 0208 	orr.w	r2, r3, #8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f240 723a 	movw	r2, #1850	; 0x73a
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fee6 	bl	8005858 <SDMMC_CmdStopTransfer>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f855 	bl	8003b60 <HAL_SD_ErrorCallback>
}
 8003ab6:	e04a      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d045      	beq.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_SD_IRQHandler+0x282>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_SD_IRQHandler+0x304>)
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fb66 	bl	80021b4 <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02f      	beq.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb68 	bl	80041c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003af8:	e029      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_SD_IRQHandler+0x2ba>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_SD_IRQHandler+0x308>)
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fb4a 	bl	80021b4 <HAL_DMA_Abort_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d013      	beq.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fb83 	bl	8004236 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003b30:	e00d      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f002 fb06 	bl	8006158 <HAL_SD_AbortCallback>
}
 8003b4c:	e7ff      	b.n	8003b4e <HAL_SD_IRQHandler+0x2fa>
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	080041c9 	.word	0x080041c9
 8003b5c:	08004237 	.word	0x08004237

08003b60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b82:	0f9b      	lsrs	r3, r3, #30
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8e:	0e9b      	lsrs	r3, r3, #26
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba0:	0e1b      	lsrs	r3, r3, #24
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd4:	0d1b      	lsrs	r3, r3, #20
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf2:	0bdb      	lsrs	r3, r3, #15
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c04:	0b9b      	lsrs	r3, r3, #14
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c16:	0b5b      	lsrs	r3, r3, #13
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c28:	0b1b      	lsrs	r3, r3, #12
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d163      	bne.n	8003d0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c54:	0f92      	lsrs	r2, r2, #30
 8003c56:	431a      	orrs	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c60:	0edb      	lsrs	r3, r3, #27
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c72:	0e1b      	lsrs	r3, r3, #24
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c84:	0d5b      	lsrs	r3, r3, #21
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c96:	0c9b      	lsrs	r3, r3, #18
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	0bdb      	lsrs	r3, r3, #15
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	7e1b      	ldrb	r3, [r3, #24]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	3302      	adds	r3, #2
 8003ccc:	2201      	movs	r2, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cd6:	fb02 f203 	mul.w	r2, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7a1b      	ldrb	r3, [r3, #8]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cf8:	0a52      	lsrs	r2, r2, #9
 8003cfa:	fb02 f203 	mul.w	r2, r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
 8003d0a:	e031      	b.n	8003d70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d11d      	bne.n	8003d50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	029a      	lsls	r2, r3, #10
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	661a      	str	r2, [r3, #96]	; 0x60
 8003d4e:	e00f      	b.n	8003d70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_SD_GetCardCSD+0x344>)
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e09d      	b.n	8003eac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	0b9b      	lsrs	r3, r3, #14
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	09db      	lsrs	r3, r3, #7
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	0fdb      	lsrs	r3, r3, #31
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	0f5b      	lsrs	r3, r3, #29
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	0d9b      	lsrs	r3, r3, #22
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	0d5b      	lsrs	r3, r3, #21
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	0bdb      	lsrs	r3, r3, #15
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	0b9b      	lsrs	r3, r3, #14
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	0b5b      	lsrs	r3, r3, #13
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	0b1b      	lsrs	r3, r3, #12
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	004005ff 	.word	0x004005ff

08003ebc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d02e      	beq.n	8003f92 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3a:	d106      	bne.n	8003f4a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
 8003f48:	e029      	b.n	8003f9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d10a      	bne.n	8003f68 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb28 	bl	80045a8 <SD_WideBus_Enable>
 8003f58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
 8003f66:	e01a      	b.n	8003f9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fb65 	bl	800463e <SD_WideBus_Disable>
 8003f74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
 8003f82:	e00c      	b.n	8003f9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f90:	e005      	b.n	8003f9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fbc:	e01f      	b.n	8003ffe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681d      	ldr	r5, [r3, #0]
 8003fe4:	466c      	mov	r4, sp
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f001 faa7 	bl	800554c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fb7c 	bl	8005704 <SDMMC_CmdBlockLength>
 800400c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <HAL_SD_ConfigWideBusOperation+0x130>)
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bdb0      	pop	{r4, r5, r7, pc}
 8004042:	bf00      	nop
 8004044:	004005ff 	.word	0x004005ff

08004048 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa7c 	bl	8004558 <SD_SendStatus>
 8004060:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0a5b      	lsrs	r3, r3, #9
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800407e:	693b      	ldr	r3, [r7, #16]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	2b82      	cmp	r3, #130	; 0x82
 80040c6:	d111      	bne.n	80040ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fbc3 	bl	8005858 <SDMMC_CmdStopTransfer>
 80040d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fd3a 	bl	8003b60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0208 	bic.w	r2, r2, #8
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f240 523a 	movw	r2, #1338	; 0x53a
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f002 f833 	bl	8006180 <HAL_SD_RxCpltCallback>
#endif
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe f9ea 	bl	800250c <HAL_DMA_GetError>
 8004138:	4603      	mov	r3, r0
 800413a:	2b02      	cmp	r3, #2
 800413c:	d03e      	beq.n	80041bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d002      	beq.n	800415a <SD_DMAError+0x36>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d12d      	bne.n	80041b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <SD_DMAError+0xa0>)
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004170:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff62 	bl	8004048 <HAL_SD_GetCardState>
 8004184:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d002      	beq.n	8004192 <SD_DMAError+0x6e>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d10a      	bne.n	80041a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fb5e 	bl	8005858 <SDMMC_CmdStopTransfer>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	431a      	orrs	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fcd2 	bl	8003b60 <HAL_SD_ErrorCallback>
#endif
  }
}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	004005ff 	.word	0x004005ff

080041c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f240 523a 	movw	r2, #1338	; 0x53a
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff ff31 	bl	8004048 <HAL_SD_GetCardState>
 80041e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d002      	beq.n	8004202 <SD_DMATxAbort+0x3a>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d10a      	bne.n	8004218 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fb26 	bl	8005858 <SDMMC_CmdStopTransfer>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	431a      	orrs	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f001 ff99 	bl	8006158 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004226:	e002      	b.n	800422e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fc99 	bl	8003b60 <HAL_SD_ErrorCallback>
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f240 523a 	movw	r2, #1338	; 0x53a
 800424c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff fefa 	bl	8004048 <HAL_SD_GetCardState>
 8004254:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d002      	beq.n	8004270 <SD_DMARxAbort+0x3a>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b05      	cmp	r3, #5
 800426e:	d10a      	bne.n	8004286 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f001 faef 	bl	8005858 <SDMMC_CmdStopTransfer>
 800427a:	4602      	mov	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 ff62 	bl	8006158 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004294:	e002      	b.n	800429c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fc62 	bl	8003b60 <HAL_SD_ErrorCallback>
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b094      	sub	sp, #80	; 0x50
 80042a8:	af04      	add	r7, sp, #16
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f9a1 	bl	80055fc <SDIO_GetPowerState>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042c4:	e0b6      	b.n	8004434 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d02f      	beq.n	800432e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fbca 	bl	8005a6c <SDMMC_CmdSendCID>
 80042d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	e0a7      	b.n	8004434 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f9cb 	bl	8005686 <SDIO_GetResponse>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2104      	movs	r1, #4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f9c2 	bl	8005686 <SDIO_GetResponse>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2108      	movs	r1, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f9b9 	bl	8005686 <SDIO_GetResponse>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	210c      	movs	r1, #12
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f9b0 	bl	8005686 <SDIO_GetResponse>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	2b03      	cmp	r3, #3
 8004334:	d00d      	beq.n	8004352 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f107 020e 	add.w	r2, r7, #14
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f001 fbd0 	bl	8005ae6 <SDMMC_CmdSetRelAdd>
 8004346:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <SD_InitCard+0xae>
    {
      return errorstate;
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	e070      	b.n	8004434 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	2b03      	cmp	r3, #3
 8004358:	d036      	beq.n	80043c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f001 fb9a 	bl	8005aa8 <SDMMC_CmdSendCSD>
 8004374:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SD_InitCard+0xdc>
    {
      return errorstate;
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	e059      	b.n	8004434 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f97d 	bl	8005686 <SDIO_GetResponse>
 800438c:	4602      	mov	r2, r0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2104      	movs	r1, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f001 f974 	bl	8005686 <SDIO_GetResponse>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2108      	movs	r1, #8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f96b 	bl	8005686 <SDIO_GetResponse>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	210c      	movs	r1, #12
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 f962 	bl	8005686 <SDIO_GetResponse>
 80043c2:	4602      	mov	r2, r0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2104      	movs	r1, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f959 	bl	8005686 <SDIO_GetResponse>
 80043d4:	4603      	mov	r3, r0
 80043d6:	0d1a      	lsrs	r2, r3, #20
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80043dc:	f107 0310 	add.w	r3, r7, #16
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff fbc6 	bl	8003b74 <HAL_SD_GetCardCSD>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043f2:	e01f      	b.n	8004434 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	461a      	mov	r2, r3
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	4608      	mov	r0, r1
 8004406:	f001 fa49 	bl	800589c <SDMMC_CmdSelDesel>
 800440a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800440c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <SD_InitCard+0x172>
  {
    return errorstate;
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004414:	e00e      	b.n	8004434 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681d      	ldr	r5, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	466c      	mov	r4, sp
 800441e:	f103 0210 	add.w	r2, r3, #16
 8004422:	ca07      	ldmia	r2, {r0, r1, r2}
 8004424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004428:	3304      	adds	r3, #4
 800442a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800442c:	4628      	mov	r0, r5
 800442e:	f001 f88d 	bl	800554c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3740      	adds	r7, #64	; 0x40
 8004438:	46bd      	mov	sp, r7
 800443a:	bdb0      	pop	{r4, r5, r7, pc}

0800443c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fa44 	bl	80058e2 <SDMMC_CmdGoIdleState>
 800445a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	e072      	b.n	800454c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fa57 	bl	800591e <SDMMC_CmdOperCond>
 8004470:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fa2d 	bl	80058e2 <SDMMC_CmdGoIdleState>
 8004488:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	e05b      	b.n	800454c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d137      	bne.n	8004512 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fa57 	bl	800595c <SDMMC_CmdAppCommand>
 80044ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d02d      	beq.n	8004512 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044ba:	e047      	b.n	800454c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 fa4a 	bl	800595c <SDMMC_CmdAppCommand>
 80044c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	e03b      	b.n	800454c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	491e      	ldr	r1, [pc, #120]	; (8004554 <SD_PowerON+0x118>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fa60 	bl	80059a0 <SDMMC_CmdAppOperCommand>
 80044e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044ec:	e02e      	b.n	800454c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f8c6 	bl	8005686 <SDIO_GetResponse>
 80044fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	0fdb      	lsrs	r3, r3, #31
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <SD_PowerON+0xcc>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <SD_PowerON+0xce>
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

    count++;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3301      	adds	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004518:	4293      	cmp	r3, r2
 800451a:	d802      	bhi.n	8004522 <SD_PowerON+0xe6>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0cc      	beq.n	80044bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004528:	4293      	cmp	r3, r2
 800452a:	d902      	bls.n	8004532 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800452c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004530:	e00c      	b.n	800454c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
 8004542:	e002      	b.n	800454a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	c1100000 	.word	0xc1100000

08004558 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800456c:	e018      	b.n	80045a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f001 fad4 	bl	8005b28 <SDMMC_CmdSendStatus>
 8004580:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	e009      	b.n	80045a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f877 	bl	8005686 <SDIO_GetResponse>
 8004598:	4602      	mov	r2, r0
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f861 	bl	8005686 <SDIO_GetResponse>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ce:	d102      	bne.n	80045d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045d4:	e02f      	b.n	8004636 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f879 	bl	80046d4 <SD_FindSCR>
 80045e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e023      	b.n	8004636 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f001 f9a9 	bl	800595c <SDMMC_CmdAppCommand>
 800460a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	e00f      	b.n	8004636 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f9e2 	bl	80059e6 <SDMMC_CmdBusWidth>
 8004622:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	e003      	b.n	8004636 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800462e:	2300      	movs	r3, #0
 8004630:	e001      	b.n	8004636 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004632:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f816 	bl	8005686 <SDIO_GetResponse>
 800465a:	4603      	mov	r3, r0
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004664:	d102      	bne.n	800466c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800466a:	e02f      	b.n	80046cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800466c:	f107 030c 	add.w	r3, r7, #12
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f82e 	bl	80046d4 <SD_FindSCR>
 8004678:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	e023      	b.n	80046cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01c      	beq.n	80046c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f001 f95e 	bl	800595c <SDMMC_CmdAppCommand>
 80046a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	e00f      	b.n	80046cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f997 	bl	80059e6 <SDMMC_CmdBusWidth>
 80046b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	e003      	b.n	80046cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e001      	b.n	80046cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08f      	sub	sp, #60	; 0x3c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80046de:	f7fd fb51 	bl	8001d84 <HAL_GetTick>
 80046e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2108      	movs	r1, #8
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f802 	bl	8005704 <SDMMC_CmdBlockLength>
 8004700:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	e0b2      	b.n	8004872 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f001 f91f 	bl	800595c <SDMMC_CmdAppCommand>
 800471e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	e0a3      	b.n	8004872 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800472e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004730:	2308      	movs	r3, #8
 8004732:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004734:	2330      	movs	r3, #48	; 0x30
 8004736:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004738:	2302      	movs	r3, #2
 800473a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004740:	2301      	movs	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f107 0210 	add.w	r2, r7, #16
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f000 ffac 	bl	80056ac <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f001 f966 	bl	8005a2a <SDMMC_CmdSendSCR>
 800475e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02a      	beq.n	80047bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	e083      	b.n	8004872 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	f107 0208 	add.w	r2, r7, #8
 8004784:	18d4      	adds	r4, r2, r3
 8004786:	4608      	mov	r0, r1
 8004788:	f000 ff0b 	bl	80055a2 <SDIO_ReadFIFO>
 800478c:	4603      	mov	r3, r0
 800478e:	6023      	str	r3, [r4, #0]
      index++;
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	3301      	adds	r3, #1
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	e006      	b.n	80047a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80047a6:	f7fd faed 	bl	8001d84 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d102      	bne.n	80047bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80047b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047ba:	e05a      	b.n	8004872 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0cf      	beq.n	800476a <SD_FindSCR+0x96>
 80047ca:	e000      	b.n	80047ce <SD_FindSCR+0xfa>
      break;
 80047cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2208      	movs	r2, #8
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80047e4:	2308      	movs	r3, #8
 80047e6:	e044      	b.n	8004872 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2202      	movs	r2, #2
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80047fe:	2302      	movs	r3, #2
 8004800:	e037      	b.n	8004872 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2220      	movs	r2, #32
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004818:	2320      	movs	r3, #32
 800481a:	e02a      	b.n	8004872 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f240 523a 	movw	r2, #1338	; 0x53a
 8004824:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004832:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800483c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	601a      	str	r2, [r3, #0]
    scr++;
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	3304      	adds	r3, #4
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	061a      	lsls	r2, r3, #24
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800485a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004864:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	0e1b      	lsrs	r3, r3, #24
 800486a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	373c      	adds	r7, #60	; 0x3c
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}

0800487a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d03f      	beq.n	8004914 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e033      	b.n	8004902 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fe7f 	bl	80055a2 <SDIO_ReadFIFO>
 80048a4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3301      	adds	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b07      	cmp	r3, #7
 8004906:	d9c8      	bls.n	800489a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d043      	beq.n	80049be <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e037      	b.n	80049ac <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3b01      	subs	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]
      tmp++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	3b01      	subs	r3, #1
 8004964:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	041a      	lsls	r2, r3, #16
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3b01      	subs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	061a      	lsls	r2, r3, #24
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4313      	orrs	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]
      tmp++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	3b01      	subs	r3, #1
 8004994:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f107 0208 	add.w	r2, r7, #8
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fe0b 	bl	80055bc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b07      	cmp	r3, #7
 80049b0:	d9c4      	bls.n	800493c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e041      	b.n	8004a5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f839 	bl	8004a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 f9d7 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e04e      	b.n	8004b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d01d      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d010      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40001800 	.word	0x40001800

08004b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0202 	mvn.w	r2, #2
 8004b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8ee 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8e0 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8f1 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0204 	mvn.w	r2, #4
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8c4 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8b6 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8c7 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0208 	mvn.w	r2, #8
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f89a 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f88c 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f89d 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f870 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f862 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f873 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc fd24 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f902 	bl	8004f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f838 	bl	8004da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0220 	mvn.w	r2, #32
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8cc 	bl	8004ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a40      	ldr	r2, [pc, #256]	; (8004ecc <TIM_Base_SetConfig+0x114>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d00f      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3d      	ldr	r2, [pc, #244]	; (8004ed0 <TIM_Base_SetConfig+0x118>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <TIM_Base_SetConfig+0x11c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3b      	ldr	r2, [pc, #236]	; (8004ed8 <TIM_Base_SetConfig+0x120>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3a      	ldr	r2, [pc, #232]	; (8004edc <TIM_Base_SetConfig+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d108      	bne.n	8004e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <TIM_Base_SetConfig+0x114>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d027      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	; (8004ed0 <TIM_Base_SetConfig+0x118>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d023      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2b      	ldr	r2, [pc, #172]	; (8004ed4 <TIM_Base_SetConfig+0x11c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01f      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <TIM_Base_SetConfig+0x120>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a29      	ldr	r2, [pc, #164]	; (8004edc <TIM_Base_SetConfig+0x124>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d017      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <TIM_Base_SetConfig+0x128>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	; (8004ee8 <TIM_Base_SetConfig+0x130>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a25      	ldr	r2, [pc, #148]	; (8004eec <TIM_Base_SetConfig+0x134>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <TIM_Base_SetConfig+0x138>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <TIM_Base_SetConfig+0x13c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <TIM_Base_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0xf8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0c      	ldr	r2, [pc, #48]	; (8004edc <TIM_Base_SetConfig+0x124>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800
 8004eec:	40001800 	.word	0x40001800
 8004ef0:	40001c00 	.word	0x40001c00
 8004ef4:	40002000 	.word	0x40002000

08004ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e03f      	b.n	8004fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fc fd2c 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f929 	bl	80051bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b08a      	sub	sp, #40	; 0x28
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d17c      	bne.n	80050d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_UART_Transmit+0x2c>
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e075      	b.n	80050d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Transmit+0x3e>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e06e      	b.n	80050d6 <HAL_UART_Transmit+0x11c>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2221      	movs	r2, #33	; 0x21
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800500e:	f7fc feb9 	bl	8001d84 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d108      	bne.n	800503c <HAL_UART_Transmit+0x82>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e003      	b.n	8005044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800504c:	e02a      	b.n	80050a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	; 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f840 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e036      	b.n	80050d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3302      	adds	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e007      	b.n	8005096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1cf      	bne.n	800504e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f810 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e006      	b.n	80050d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b090      	sub	sp, #64	; 0x40
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ee:	e050      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f6:	d04c      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <UART_WaitOnFlagUntilTimeout+0x30>
 80050fe:	f7fc fe41 	bl	8001d84 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510a:	429a      	cmp	r2, r3
 800510c:	d241      	bcs.n	8005192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512e:	637a      	str	r2, [r7, #52]	; 0x34
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e5      	bne.n	800510e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	63bb      	str	r3, [r7, #56]	; 0x38
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005162:	623a      	str	r2, [r7, #32]
 8005164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e00f      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d09f      	beq.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3740      	adds	r7, #64	; 0x40
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	b09f      	sub	sp, #124	; 0x7c
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d2:	68d9      	ldr	r1, [r3, #12]
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	ea40 0301 	orr.w	r3, r0, r1
 80051dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005200:	f021 010c 	bic.w	r1, r1, #12
 8005204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800520a:	430b      	orrs	r3, r1
 800520c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	6999      	ldr	r1, [r3, #24]
 800521c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	ea40 0301 	orr.w	r3, r0, r1
 8005224:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4bc5      	ldr	r3, [pc, #788]	; (8005540 <UART_SetConfig+0x384>)
 800522c:	429a      	cmp	r2, r3
 800522e:	d004      	beq.n	800523a <UART_SetConfig+0x7e>
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4bc3      	ldr	r3, [pc, #780]	; (8005544 <UART_SetConfig+0x388>)
 8005236:	429a      	cmp	r2, r3
 8005238:	d103      	bne.n	8005242 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800523a:	f7fe f84f 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 800523e:	6778      	str	r0, [r7, #116]	; 0x74
 8005240:	e002      	b.n	8005248 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7fe f837 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8005246:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	f040 80b6 	bne.w	80053c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005256:	461c      	mov	r4, r3
 8005258:	f04f 0500 	mov.w	r5, #0
 800525c:	4622      	mov	r2, r4
 800525e:	462b      	mov	r3, r5
 8005260:	1891      	adds	r1, r2, r2
 8005262:	6439      	str	r1, [r7, #64]	; 0x40
 8005264:	415b      	adcs	r3, r3
 8005266:	647b      	str	r3, [r7, #68]	; 0x44
 8005268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800526c:	1912      	adds	r2, r2, r4
 800526e:	eb45 0303 	adc.w	r3, r5, r3
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	00d9      	lsls	r1, r3, #3
 800527c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005280:	00d0      	lsls	r0, r2, #3
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	1911      	adds	r1, r2, r4
 8005288:	6639      	str	r1, [r7, #96]	; 0x60
 800528a:	416b      	adcs	r3, r5
 800528c:	667b      	str	r3, [r7, #100]	; 0x64
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	1891      	adds	r1, r2, r2
 800529a:	63b9      	str	r1, [r7, #56]	; 0x38
 800529c:	415b      	adcs	r3, r3
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052a8:	f7fb faf0 	bl	800088c <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4ba5      	ldr	r3, [pc, #660]	; (8005548 <UART_SetConfig+0x38c>)
 80052b2:	fba3 2302 	umull	r2, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	011e      	lsls	r6, r3, #4
 80052ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052bc:	461c      	mov	r4, r3
 80052be:	f04f 0500 	mov.w	r5, #0
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	6339      	str	r1, [r7, #48]	; 0x30
 80052ca:	415b      	adcs	r3, r3
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052d2:	1912      	adds	r2, r2, r4
 80052d4:	eb45 0303 	adc.w	r3, r5, r3
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	00d9      	lsls	r1, r3, #3
 80052e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052e6:	00d0      	lsls	r0, r2, #3
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	1911      	adds	r1, r2, r4
 80052ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80052f0:	416b      	adcs	r3, r5
 80052f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	461a      	mov	r2, r3
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	62b9      	str	r1, [r7, #40]	; 0x28
 8005302:	415b      	adcs	r3, r3
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800530a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800530e:	f7fb fabd 	bl	800088c <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4b8c      	ldr	r3, [pc, #560]	; (8005548 <UART_SetConfig+0x38c>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a87      	ldr	r2, [pc, #540]	; (8005548 <UART_SetConfig+0x38c>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005338:	441e      	add	r6, r3
 800533a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800533c:	4618      	mov	r0, r3
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	1894      	adds	r4, r2, r2
 8005348:	623c      	str	r4, [r7, #32]
 800534a:	415b      	adcs	r3, r3
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005352:	1812      	adds	r2, r2, r0
 8005354:	eb41 0303 	adc.w	r3, r1, r3
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	f04f 0500 	mov.w	r5, #0
 8005360:	00dd      	lsls	r5, r3, #3
 8005362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005366:	00d4      	lsls	r4, r2, #3
 8005368:	4622      	mov	r2, r4
 800536a:	462b      	mov	r3, r5
 800536c:	1814      	adds	r4, r2, r0
 800536e:	653c      	str	r4, [r7, #80]	; 0x50
 8005370:	414b      	adcs	r3, r1
 8005372:	657b      	str	r3, [r7, #84]	; 0x54
 8005374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	461a      	mov	r2, r3
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	1891      	adds	r1, r2, r2
 8005380:	61b9      	str	r1, [r7, #24]
 8005382:	415b      	adcs	r3, r3
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800538e:	f7fb fa7d 	bl	800088c <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4b6c      	ldr	r3, [pc, #432]	; (8005548 <UART_SetConfig+0x38c>)
 8005398:	fba3 1302 	umull	r1, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	2164      	movs	r1, #100	; 0x64
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	3332      	adds	r3, #50	; 0x32
 80053aa:	4a67      	ldr	r2, [pc, #412]	; (8005548 <UART_SetConfig+0x38c>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f003 0207 	and.w	r2, r3, #7
 80053b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4432      	add	r2, r6
 80053bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053be:	e0b9      	b.n	8005534 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c2:	461c      	mov	r4, r3
 80053c4:	f04f 0500 	mov.w	r5, #0
 80053c8:	4622      	mov	r2, r4
 80053ca:	462b      	mov	r3, r5
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	6139      	str	r1, [r7, #16]
 80053d0:	415b      	adcs	r3, r3
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053d8:	1912      	adds	r2, r2, r4
 80053da:	eb45 0303 	adc.w	r3, r5, r3
 80053de:	f04f 0000 	mov.w	r0, #0
 80053e2:	f04f 0100 	mov.w	r1, #0
 80053e6:	00d9      	lsls	r1, r3, #3
 80053e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ec:	00d0      	lsls	r0, r2, #3
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	eb12 0804 	adds.w	r8, r2, r4
 80053f6:	eb43 0905 	adc.w	r9, r3, r5
 80053fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	008b      	lsls	r3, r1, #2
 800540e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005412:	0082      	lsls	r2, r0, #2
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fb fa38 	bl	800088c <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4b49      	ldr	r3, [pc, #292]	; (8005548 <UART_SetConfig+0x38c>)
 8005422:	fba3 2302 	umull	r2, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	011e      	lsls	r6, r3, #4
 800542a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800542c:	4618      	mov	r0, r3
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	1894      	adds	r4, r2, r2
 8005438:	60bc      	str	r4, [r7, #8]
 800543a:	415b      	adcs	r3, r3
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005442:	1812      	adds	r2, r2, r0
 8005444:	eb41 0303 	adc.w	r3, r1, r3
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	f04f 0500 	mov.w	r5, #0
 8005450:	00dd      	lsls	r5, r3, #3
 8005452:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005456:	00d4      	lsls	r4, r2, #3
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	1814      	adds	r4, r2, r0
 800545e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005460:	414b      	adcs	r3, r1
 8005462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	008b      	lsls	r3, r1, #2
 8005478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800547c:	0082      	lsls	r2, r0, #2
 800547e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005482:	f7fb fa03 	bl	800088c <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <UART_SetConfig+0x38c>)
 800548c:	fba3 1302 	umull	r1, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2164      	movs	r1, #100	; 0x64
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <UART_SetConfig+0x38c>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054aa:	441e      	add	r6, r3
 80054ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ae:	4618      	mov	r0, r3
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	1894      	adds	r4, r2, r2
 80054ba:	603c      	str	r4, [r7, #0]
 80054bc:	415b      	adcs	r3, r3
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	1812      	adds	r2, r2, r0
 80054c6:	eb41 0303 	adc.w	r3, r1, r3
 80054ca:	f04f 0400 	mov.w	r4, #0
 80054ce:	f04f 0500 	mov.w	r5, #0
 80054d2:	00dd      	lsls	r5, r3, #3
 80054d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054d8:	00d4      	lsls	r4, r2, #3
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	eb12 0a00 	adds.w	sl, r2, r0
 80054e2:	eb43 0b01 	adc.w	fp, r3, r1
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	008b      	lsls	r3, r1, #2
 80054fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054fe:	0082      	lsls	r2, r0, #2
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fb f9c2 	bl	800088c <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <UART_SetConfig+0x38c>)
 800550e:	fba3 1302 	umull	r1, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2164      	movs	r1, #100	; 0x64
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a09      	ldr	r2, [pc, #36]	; (8005548 <UART_SetConfig+0x38c>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4432      	add	r2, r6
 8005532:	609a      	str	r2, [r3, #8]
}
 8005534:	bf00      	nop
 8005536:	377c      	adds	r7, #124	; 0x7c
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	40011000 	.word	0x40011000
 8005544:	40011400 	.word	0x40011400
 8005548:	51eb851f 	.word	0x51eb851f

0800554c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800554c:	b084      	sub	sp, #16
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	f107 001c 	add.w	r0, r7, #28
 800555a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005562:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005564:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005566:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800556a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800556e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005572:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005576:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	b004      	add	sp, #16
 80055a0:	4770      	bx	lr

080055a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2203      	movs	r2, #3
 80055ea:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80055ec:	2002      	movs	r0, #2
 80055ee:	f7fc fbd5 	bl	8001d9c <HAL_Delay>
  
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0303 	and.w	r3, r3, #3
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005636:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800563c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005642:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005652:	f023 030f 	bic.w	r3, r3, #15
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	b2db      	uxtb	r3, r3
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3314      	adds	r3, #20
 8005694:	461a      	mov	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	4413      	add	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
}  
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0

}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005712:	2310      	movs	r3, #16
 8005714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800571e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff ff74 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	2110      	movs	r1, #16
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa44 	bl	8005bc4 <SDMMC_GetCmdResp1>
 800573c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573e:	69fb      	ldr	r3, [r7, #28]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005756:	2311      	movs	r3, #17
 8005758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005768:	f107 0308 	add.w	r3, r7, #8
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ff52 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	2111      	movs	r1, #17
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa22 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005782:	69fb      	ldr	r3, [r7, #28]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800579a:	2312      	movs	r3, #18
 800579c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800579e:	2340      	movs	r3, #64	; 0x40
 80057a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ac:	f107 0308 	add.w	r3, r7, #8
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ff30 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	2112      	movs	r1, #18
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa00 	bl	8005bc4 <SDMMC_GetCmdResp1>
 80057c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c6:	69fb      	ldr	r3, [r7, #28]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057de:	2318      	movs	r3, #24
 80057e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff ff0e 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005800:	2118      	movs	r1, #24
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9de 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005822:	2319      	movs	r3, #25
 8005824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005826:	2340      	movs	r3, #64	; 0x40
 8005828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800582e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff feec 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	2119      	movs	r1, #25
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9bc 	bl	8005bc4 <SDMMC_GetCmdResp1>
 800584c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800584e:	69fb      	ldr	r3, [r7, #28]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005864:	230c      	movs	r3, #12
 8005866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fecb 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <SDMMC_CmdStopTransfer+0x40>)
 8005884:	210c      	movs	r1, #12
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f99c 	bl	8005bc4 <SDMMC_GetCmdResp1>
 800588c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588e:	69fb      	ldr	r3, [r7, #28]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	05f5e100 	.word	0x05f5e100

0800589c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058ac:	2307      	movs	r3, #7
 80058ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058b0:	2340      	movs	r3, #64	; 0x40
 80058b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058bc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058be:	f107 0310 	add.w	r3, r7, #16
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fea7 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	2107      	movs	r1, #7
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f977 	bl	8005bc4 <SDMMC_GetCmdResp1>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b088      	sub	sp, #32
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fe86 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f92d 	bl	8005b6c <SDMMC_GetCmdError>
 8005912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005914:	69fb      	ldr	r3, [r7, #28]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b088      	sub	sp, #32
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005926:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800592a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800592c:	2308      	movs	r3, #8
 800592e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fe67 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fb24 	bl	8005f98 <SDMMC_GetCmdResp7>
 8005950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800596a:	2337      	movs	r3, #55	; 0x37
 800596c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800597c:	f107 0308 	add.w	r3, r7, #8
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fe48 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	2137      	movs	r1, #55	; 0x37
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f918 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059b6:	2329      	movs	r3, #41	; 0x29
 80059b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe22 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa2b 	bl	8005e30 <SDMMC_GetCmdResp3>
 80059da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059dc:	69fb      	ldr	r3, [r7, #28]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059f4:	2306      	movs	r3, #6
 80059f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fe03 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	2106      	movs	r1, #6
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8d3 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a20:	69fb      	ldr	r3, [r7, #28]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a36:	2333      	movs	r3, #51	; 0x33
 8005a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a3a:	2340      	movs	r3, #64	; 0x40
 8005a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff fde2 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	2133      	movs	r1, #51	; 0x33
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8b2 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a7c:	23c0      	movs	r3, #192	; 0xc0
 8005a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fdc1 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f982 	bl	8005da0 <SDMMC_GetCmdResp2>
 8005a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ab6:	2309      	movs	r3, #9
 8005ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005aba:	23c0      	movs	r3, #192	; 0xc0
 8005abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fda2 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f963 	bl	8005da0 <SDMMC_GetCmdResp2>
 8005ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005adc:	69fb      	ldr	r3, [r7, #28]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b088      	sub	sp, #32
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005af4:	2303      	movs	r3, #3
 8005af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005af8:	2340      	movs	r3, #64	; 0x40
 8005afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fd83 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	2103      	movs	r1, #3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f9c8 	bl	8005eac <SDMMC_GetCmdResp6>
 8005b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005b36:	230d      	movs	r3, #13
 8005b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b3a:	2340      	movs	r3, #64	; 0x40
 8005b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b48:	f107 0308 	add.w	r3, r7, #8
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fd62 	bl	8005618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b58:	210d      	movs	r1, #13
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f832 	bl	8005bc4 <SDMMC_GetCmdResp1>
 8005b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b62:	69fb      	ldr	r3, [r7, #28]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <SDMMC_GetCmdError+0x50>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <SDMMC_GetCmdError+0x54>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b98:	e009      	b.n	8005bae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f1      	beq.n	8005b8a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	22c5      	movs	r2, #197	; 0xc5
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000000 	.word	0x20000000
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005bd2:	4b70      	ldr	r3, [pc, #448]	; (8005d94 <SDMMC_GetCmdResp1+0x1d0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a70      	ldr	r2, [pc, #448]	; (8005d98 <SDMMC_GetCmdResp1+0x1d4>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	0a5a      	lsrs	r2, r3, #9
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	61fa      	str	r2, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bf4:	e0c9      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <SDMMC_GetCmdResp1+0x22>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ea      	bne.n	8005be6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c22:	2304      	movs	r3, #4
 8005c24:	e0b1      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a6      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	22c5      	movs	r2, #197	; 0xc5
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7ff fd12 	bl	800566c <SDIO_GetCommandResponse>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d001      	beq.n	8005c56 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e099      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c56:	2100      	movs	r1, #0
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fd14 	bl	8005686 <SDIO_GetResponse>
 8005c5e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4b4e      	ldr	r3, [pc, #312]	; (8005d9c <SDMMC_GetCmdResp1+0x1d8>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e08d      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	da02      	bge.n	8005c7a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c78:	e087      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	e080      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	e079      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca4:	e071      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb4:	e069      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc4:	e061      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cd4:	e059      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce4:	e051      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cf4:	e049      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d04:	e041      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d14:	e039      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d24:	e031      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d34:	e029      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d44:	e021      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d54:	e019      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d64:	e011      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d74:	e009      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d84:	e001      	b.n	8005d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000000 	.word	0x20000000
 8005d98:	10624dd3 	.word	0x10624dd3
 8005d9c:	fdffe008 	.word	0xfdffe008

08005da0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <SDMMC_GetCmdResp2+0x88>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <SDMMC_GetCmdResp2+0x8c>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	0a5b      	lsrs	r3, r3, #9
 8005db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1e5a      	subs	r2, r3, #1
 8005dc2:	60fa      	str	r2, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dcc:	e026      	b.n	8005e1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0ef      	beq.n	8005dbe <SDMMC_GetCmdResp2+0x1e>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ea      	bne.n	8005dbe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2204      	movs	r2, #4
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	e00e      	b.n	8005e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e003      	b.n	8005e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	22c5      	movs	r2, #197	; 0xc5
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	10624dd3 	.word	0x10624dd3

08005e30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e38:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <SDMMC_GetCmdResp3+0x74>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <SDMMC_GetCmdResp3+0x78>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0a5b      	lsrs	r3, r3, #9
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1e5a      	subs	r2, r3, #1
 8005e52:	60fa      	str	r2, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e5c:	e01b      	b.n	8005e96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ef      	beq.n	8005e4e <SDMMC_GetCmdResp3+0x1e>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ea      	bne.n	8005e4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2204      	movs	r2, #4
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e003      	b.n	8005e96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	22c5      	movs	r2, #197	; 0xc5
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000000 	.word	0x20000000
 8005ea8:	10624dd3 	.word	0x10624dd3

08005eac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005eba:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <SDMMC_GetCmdResp6+0xe4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a35      	ldr	r2, [pc, #212]	; (8005f94 <SDMMC_GetCmdResp6+0xe8>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	0a5b      	lsrs	r3, r3, #9
 8005ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	1e5a      	subs	r2, r3, #1
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ede:	e052      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ef      	beq.n	8005ed0 <SDMMC_GetCmdResp6+0x24>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ea      	bne.n	8005ed0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	e03a      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e02f      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fba0 	bl	800566c <SDIO_GetCommandResponse>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d001      	beq.n	8005f3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e025      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	22c5      	movs	r2, #197	; 0xc5
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005f40:	2100      	movs	r1, #0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff fb9f 	bl	8005686 <SDIO_GetResponse>
 8005f48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e011      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f70:	e009      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f80:	e001      	b.n	8005f86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000000 	.word	0x20000000
 8005f94:	10624dd3 	.word	0x10624dd3

08005f98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <SDMMC_GetCmdResp7+0x94>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	; (8006030 <SDMMC_GetCmdResp7+0x98>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fc4:	e02c      	b.n	8006020 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0ef      	beq.n	8005fb6 <SDMMC_GetCmdResp7+0x1e>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1ea      	bne.n	8005fb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	e014      	b.n	8006020 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006008:	2301      	movs	r3, #1
 800600a:	e009      	b.n	8006020 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2240      	movs	r2, #64	; 0x40
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
  
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000000 	.word	0x20000000
 8006030:	10624dd3 	.word	0x10624dd3

08006034 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006038:	4904      	ldr	r1, [pc, #16]	; (800604c <MX_FATFS_Init+0x18>)
 800603a:	4805      	ldr	r0, [pc, #20]	; (8006050 <MX_FATFS_Init+0x1c>)
 800603c:	f003 fcde 	bl	80099fc <FATFS_LinkDriver>
 8006040:	4603      	mov	r3, r0
 8006042:	461a      	mov	r2, r3
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <MX_FATFS_Init+0x20>)
 8006046:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200023ac 	.word	0x200023ac
 8006050:	0800b400 	.word	0x0800b400
 8006054:	200023a8 	.word	0x200023a8

08006058 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800605c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006072:	f000 f896 	bl	80061a2 <BSP_SD_IsDetected>
 8006076:	4603      	mov	r3, r0
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e012      	b.n	80060a6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006080:	480b      	ldr	r0, [pc, #44]	; (80060b0 <BSP_SD_Init+0x48>)
 8006082:	f7fd f971 	bl	8003368 <HAL_SD_Init>
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006094:	4806      	ldr	r0, [pc, #24]	; (80060b0 <BSP_SD_Init+0x48>)
 8006096:	f7fd ff3d 	bl	8003f14 <HAL_SD_ConfigWideBusOperation>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80060a4:	79fb      	ldrb	r3, [r7, #7]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20002294 	.word	0x20002294

080060b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	4806      	ldr	r0, [pc, #24]	; (80060e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80060cc:	f7fd f9fa 	bl	80034c4 <HAL_SD_ReadBlocks_DMA>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20002294 	.word	0x20002294

080060e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	4806      	ldr	r0, [pc, #24]	; (8006118 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006100:	f7fd fac2 	bl	8003688 <HAL_SD_WriteBlocks_DMA>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20002294 	.word	0x20002294

0800611c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006120:	4805      	ldr	r0, [pc, #20]	; (8006138 <BSP_SD_GetCardState+0x1c>)
 8006122:	f7fd ff91 	bl	8004048 <HAL_SD_GetCardState>
 8006126:	4603      	mov	r3, r0
 8006128:	2b04      	cmp	r3, #4
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
}
 8006132:	4618      	mov	r0, r3
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20002294 	.word	0x20002294

0800613c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4803      	ldr	r0, [pc, #12]	; (8006154 <BSP_SD_GetCardInfo+0x18>)
 8006148:	f7fd feb8 	bl	8003ebc <HAL_SD_GetCardInfo>
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20002294 	.word	0x20002294

08006158 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006160:	f000 f818 	bl	8006194 <BSP_SD_AbortCallback>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006174:	f000 f98c 	bl	8006490 <BSP_SD_WriteCpltCallback>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006188:	f000 f98e 	bl	80064a8 <BSP_SD_ReadCpltCallback>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0

}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80061a8:	2301      	movs	r3, #1
 80061aa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80061c4:	f7fb fdde 	bl	8001d84 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80061ca:	e006      	b.n	80061da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061cc:	f7ff ffa6 	bl	800611c <BSP_SD_GetCardState>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e009      	b.n	80061ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80061da:	f7fb fdd3 	bl	8001d84 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d8f0      	bhi.n	80061cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <SD_CheckStatus+0x38>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006208:	f7ff ff88 	bl	800611c <BSP_SD_GetCardState>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <SD_CheckStatus+0x38>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4b04      	ldr	r3, [pc, #16]	; (8006230 <SD_CheckStatus+0x38>)
 8006220:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006222:	4b03      	ldr	r3, [pc, #12]	; (8006230 <SD_CheckStatus+0x38>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000009 	.word	0x20000009

08006234 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800623e:	f7ff ff13 	bl	8006068 <BSP_SD_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ffd4 	bl	80061f8 <SD_CheckStatus>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <SD_initialize+0x34>)
 8006256:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <SD_initialize+0x34>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000009 	.word	0x20000009

0800626c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff ffbd 	bl	80061f8 <SD_CheckStatus>
 800627e:	4603      	mov	r3, r0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800629c:	f247 5030 	movw	r0, #30000	; 0x7530
 80062a0:	f7ff ff8c 	bl	80061bc <SD_CheckStatusWithTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da01      	bge.n	80062ae <SD_read+0x26>
  {
    return res;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	e03b      	b.n	8006326 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	f7ff fefe 	bl	80060b4 <BSP_SD_ReadBlocks_DMA>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d132      	bne.n	8006324 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <SD_read+0xa8>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80062c4:	f7fb fd5e 	bl	8001d84 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062ca:	bf00      	nop
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <SD_read+0xa8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <SD_read+0x5e>
 80062d4:	f7fb fd56 	bl	8001d84 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f247 522f 	movw	r2, #29999	; 0x752f
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d9f2      	bls.n	80062cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <SD_read+0xa8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
 80062f2:	e017      	b.n	8006324 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <SD_read+0xa8>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80062fa:	f7fb fd43 	bl	8001d84 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006300:	e007      	b.n	8006312 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006302:	f7ff ff0b 	bl	800611c <BSP_SD_GetCardState>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <SD_read+0x8a>
          {
            res = RES_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006310:	e008      	b.n	8006324 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006312:	f7fb fd37 	bl	8001d84 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006320:	4293      	cmp	r3, r2
 8006322:	d9ee      	bls.n	8006302 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000098 	.word	0x20000098

08006334 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <SD_write+0xa8>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800634e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006352:	f7ff ff33 	bl	80061bc <SD_CheckStatusWithTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	da01      	bge.n	8006360 <SD_write+0x2c>
  {
    return res;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
 800635e:	e038      	b.n	80063d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	68b8      	ldr	r0, [r7, #8]
 8006366:	f7ff febf 	bl	80060e8 <BSP_SD_WriteBlocks_DMA>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d12f      	bne.n	80063d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006370:	f7fb fd08 	bl	8001d84 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006376:	bf00      	nop
 8006378:	4b18      	ldr	r3, [pc, #96]	; (80063dc <SD_write+0xa8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <SD_write+0x5e>
 8006380:	f7fb fd00 	bl	8001d84 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f247 522f 	movw	r2, #29999	; 0x752f
 800638e:	4293      	cmp	r3, r2
 8006390:	d9f2      	bls.n	8006378 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <SD_write+0xa8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
 800639e:	e017      	b.n	80063d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <SD_write+0xa8>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063a6:	f7fb fced 	bl	8001d84 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063ac:	e007      	b.n	80063be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063ae:	f7ff feb5 	bl	800611c <BSP_SD_GetCardState>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <SD_write+0x8a>
          {
            res = RES_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]
            break;
 80063bc:	e008      	b.n	80063d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063be:	f7fb fce1 	bl	8001d84 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d9ee      	bls.n	80063ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000094 	.word	0x20000094

080063e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	603a      	str	r2, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
 80063ec:	460b      	mov	r3, r1
 80063ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063f6:	4b25      	ldr	r3, [pc, #148]	; (800648c <SD_ioctl+0xac>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <SD_ioctl+0x28>
 8006404:	2303      	movs	r3, #3
 8006406:	e03c      	b.n	8006482 <SD_ioctl+0xa2>

  switch (cmd)
 8006408:	79bb      	ldrb	r3, [r7, #6]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d834      	bhi.n	8006478 <SD_ioctl+0x98>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <SD_ioctl+0x34>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006425 	.word	0x08006425
 8006418:	0800642d 	.word	0x0800642d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800645f 	.word	0x0800645f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800642a:	e028      	b.n	800647e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800642c:	f107 030c 	add.w	r3, r7, #12
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fe83 	bl	800613c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006442:	e01c      	b.n	800647e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006444:	f107 030c 	add.w	r3, r7, #12
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fe77 	bl	800613c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	b29a      	uxth	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800645c:	e00f      	b.n	800647e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fe6a 	bl	800613c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	0a5a      	lsrs	r2, r3, #9
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006476:	e002      	b.n	800647e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006478:	2304      	movs	r3, #4
 800647a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800647e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006482:	4618      	mov	r0, r3
 8006484:	3730      	adds	r7, #48	; 0x30
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000009 	.word	0x20000009

08006490 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <BSP_SD_WriteCpltCallback+0x14>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000094 	.word	0x20000094

080064a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80064ac:	4b03      	ldr	r3, [pc, #12]	; (80064bc <BSP_SD_ReadCpltCallback+0x14>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
}
 80064b2:	bf00      	nop
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000098 	.word	0x20000098

080064c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <disk_status+0x30>)
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	79fa      	ldrb	r2, [r7, #7]
 80064d8:	4905      	ldr	r1, [pc, #20]	; (80064f0 <disk_status+0x30>)
 80064da:	440a      	add	r2, r1
 80064dc:	7a12      	ldrb	r2, [r2, #8]
 80064de:	4610      	mov	r0, r2
 80064e0:	4798      	blx	r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200000c4 	.word	0x200000c4

080064f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	4a0d      	ldr	r2, [pc, #52]	; (800653c <disk_initialize+0x48>)
 8006506:	5cd3      	ldrb	r3, [r2, r3]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d111      	bne.n	8006530 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	4a0b      	ldr	r2, [pc, #44]	; (800653c <disk_initialize+0x48>)
 8006510:	2101      	movs	r1, #1
 8006512:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <disk_initialize+0x48>)
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	79fa      	ldrb	r2, [r7, #7]
 8006522:	4906      	ldr	r1, [pc, #24]	; (800653c <disk_initialize+0x48>)
 8006524:	440a      	add	r2, r1
 8006526:	7a12      	ldrb	r2, [r2, #8]
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200000c4 	.word	0x200000c4

08006540 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	4a0a      	ldr	r2, [pc, #40]	; (800657c <disk_read+0x3c>)
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	689c      	ldr	r4, [r3, #8]
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <disk_read+0x3c>)
 8006560:	4413      	add	r3, r2
 8006562:	7a18      	ldrb	r0, [r3, #8]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	47a0      	blx	r4
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd90      	pop	{r4, r7, pc}
 800657a:	bf00      	nop
 800657c:	200000c4 	.word	0x200000c4

08006580 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <disk_write+0x3c>)
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68dc      	ldr	r4, [r3, #12]
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4a07      	ldr	r2, [pc, #28]	; (80065bc <disk_write+0x3c>)
 80065a0:	4413      	add	r3, r2
 80065a2:	7a18      	ldrb	r0, [r3, #8]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	47a0      	blx	r4
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200000c4 	.word	0x200000c4

080065c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	603a      	str	r2, [r7, #0]
 80065ca:	71fb      	strb	r3, [r7, #7]
 80065cc:	460b      	mov	r3, r1
 80065ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <disk_ioctl+0x38>)
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	79fa      	ldrb	r2, [r7, #7]
 80065de:	4906      	ldr	r1, [pc, #24]	; (80065f8 <disk_ioctl+0x38>)
 80065e0:	440a      	add	r2, r1
 80065e2:	7a10      	ldrb	r0, [r2, #8]
 80065e4:	79b9      	ldrb	r1, [r7, #6]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200000c4 	.word	0x200000c4

080065fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3301      	adds	r3, #1
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b21a      	sxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b21b      	sxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	b21b      	sxth	r3, r3
 800661c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800661e:	89fb      	ldrh	r3, [r7, #14]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3303      	adds	r3, #3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	3202      	adds	r2, #2
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	3201      	adds	r2, #1
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
	return rv;
 8006664:	68fb      	ldr	r3, [r7, #12]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	887a      	ldrh	r2, [r7, #2]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	887b      	ldrh	r3, [r7, #2]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	887a      	ldrh	r2, [r7, #2]
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	1c53      	adds	r3, r2, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6179      	str	r1, [r7, #20]
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3b01      	subs	r3, #1
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f1      	bne.n	800671a <mem_cpy+0x1a>
	}
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006742:	b480      	push	{r7}
 8006744:	b087      	sub	sp, #28
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	617a      	str	r2, [r7, #20]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3b01      	subs	r3, #1
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f3      	bne.n	8006752 <mem_set+0x10>
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006778:	b480      	push	{r7}
 800677a:	b089      	sub	sp, #36	; 0x24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	61fa      	str	r2, [r7, #28]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	61ba      	str	r2, [r7, #24]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <mem_cmp+0x40>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0eb      	beq.n	8006790 <mem_cmp+0x18>

	return r;
 80067b8:	697b      	ldr	r3, [r7, #20]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067d0:	e002      	b.n	80067d8 <chk_chr+0x12>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3301      	adds	r3, #1
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <chk_chr+0x26>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d1f2      	bne.n	80067d2 <chk_chr+0xc>
	return *str;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	781b      	ldrb	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e029      	b.n	8006864 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006810:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <chk_lock+0xb4>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01d      	beq.n	800685a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800681e:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <chk_lock+0xb4>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d116      	bne.n	800685e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006830:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <chk_lock+0xb4>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	4413      	add	r3, r2
 8006838:	3304      	adds	r3, #4
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006840:	429a      	cmp	r2, r3
 8006842:	d10c      	bne.n	800685e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006844:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <chk_lock+0xb4>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	4413      	add	r3, r2
 800684c:	3308      	adds	r3, #8
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d102      	bne.n	800685e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006858:	e007      	b.n	800686a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800685a:	2301      	movs	r3, #1
 800685c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d9d2      	bls.n	8006810 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d109      	bne.n	8006884 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <chk_lock+0x80>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d101      	bne.n	8006880 <chk_lock+0x84>
 800687c:	2300      	movs	r3, #0
 800687e:	e010      	b.n	80068a2 <chk_lock+0xa6>
 8006880:	2312      	movs	r3, #18
 8006882:	e00e      	b.n	80068a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <chk_lock+0xa0>
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <chk_lock+0xb4>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	4413      	add	r3, r2
 8006892:	330c      	adds	r3, #12
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689a:	d101      	bne.n	80068a0 <chk_lock+0xa4>
 800689c:	2310      	movs	r3, #16
 800689e:	e000      	b.n	80068a2 <chk_lock+0xa6>
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	200000a4 	.word	0x200000a4

080068b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	e002      	b.n	80068c6 <enq_lock+0x12>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3301      	adds	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d806      	bhi.n	80068da <enq_lock+0x26>
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <enq_lock+0x40>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4413      	add	r3, r2
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f2      	bne.n	80068c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	200000a4 	.word	0x200000a4

080068f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e01f      	b.n	8006948 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006908:	4a41      	ldr	r2, [pc, #260]	; (8006a10 <inc_lock+0x118>)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4413      	add	r3, r2
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d113      	bne.n	8006942 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800691a:	4a3d      	ldr	r2, [pc, #244]	; (8006a10 <inc_lock+0x118>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	3304      	adds	r3, #4
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800692a:	429a      	cmp	r2, r3
 800692c:	d109      	bne.n	8006942 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800692e:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <inc_lock+0x118>)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	4413      	add	r3, r2
 8006936:	3308      	adds	r3, #8
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800693e:	429a      	cmp	r2, r3
 8006940:	d006      	beq.n	8006950 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d9dc      	bls.n	8006908 <inc_lock+0x10>
 800694e:	e000      	b.n	8006952 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006950:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d132      	bne.n	80069be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e002      	b.n	8006964 <inc_lock+0x6c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d806      	bhi.n	8006978 <inc_lock+0x80>
 800696a:	4a29      	ldr	r2, [pc, #164]	; (8006a10 <inc_lock+0x118>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4413      	add	r3, r2
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f2      	bne.n	800695e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d101      	bne.n	8006982 <inc_lock+0x8a>
 800697e:	2300      	movs	r3, #0
 8006980:	e040      	b.n	8006a04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4922      	ldr	r1, [pc, #136]	; (8006a10 <inc_lock+0x118>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	440b      	add	r3, r1
 800698e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	491e      	ldr	r1, [pc, #120]	; (8006a10 <inc_lock+0x118>)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	440b      	add	r3, r1
 800699c:	3304      	adds	r3, #4
 800699e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	491a      	ldr	r1, [pc, #104]	; (8006a10 <inc_lock+0x118>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	440b      	add	r3, r1
 80069ac:	3308      	adds	r3, #8
 80069ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <inc_lock+0x118>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	4413      	add	r3, r2
 80069b8:	330c      	adds	r3, #12
 80069ba:	2200      	movs	r2, #0
 80069bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <inc_lock+0xe0>
 80069c4:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <inc_lock+0x118>)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	4413      	add	r3, r2
 80069cc:	330c      	adds	r3, #12
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <inc_lock+0xe0>
 80069d4:	2300      	movs	r3, #0
 80069d6:	e015      	b.n	8006a04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <inc_lock+0xf8>
 80069de:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <inc_lock+0x118>)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	4413      	add	r3, r2
 80069e6:	330c      	adds	r3, #12
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	3301      	adds	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	e001      	b.n	80069f4 <inc_lock+0xfc>
 80069f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069f4:	4906      	ldr	r1, [pc, #24]	; (8006a10 <inc_lock+0x118>)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	440b      	add	r3, r1
 80069fc:	330c      	adds	r3, #12
 80069fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	200000a4 	.word	0x200000a4

08006a14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d825      	bhi.n	8006a74 <dec_lock+0x60>
		n = Files[i].ctr;
 8006a28:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <dec_lock+0x74>)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	4413      	add	r3, r2
 8006a30:	330c      	adds	r3, #12
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a36:	89fb      	ldrh	r3, [r7, #14]
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d101      	bne.n	8006a42 <dec_lock+0x2e>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <dec_lock+0x3a>
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a4e:	4a0e      	ldr	r2, [pc, #56]	; (8006a88 <dec_lock+0x74>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	4413      	add	r3, r2
 8006a56:	330c      	adds	r3, #12
 8006a58:	89fa      	ldrh	r2, [r7, #14]
 8006a5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <dec_lock+0x5a>
 8006a62:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <dec_lock+0x74>)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	737b      	strb	r3, [r7, #13]
 8006a72:	e001      	b.n	8006a78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a74:	2302      	movs	r3, #2
 8006a76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a78:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	200000a4 	.word	0x200000a4

08006a8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e010      	b.n	8006abc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <clear_lock+0x44>)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d105      	bne.n	8006ab6 <clear_lock+0x2a>
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <clear_lock+0x44>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d9eb      	bls.n	8006a9a <clear_lock+0xe>
	}
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	200000a4 	.word	0x200000a4

08006ad4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	78db      	ldrb	r3, [r3, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d034      	beq.n	8006b52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7858      	ldrb	r0, [r3, #1]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006af8:	2301      	movs	r3, #1
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	f7ff fd40 	bl	8006580 <disk_write>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e022      	b.n	8006b52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	1ad2      	subs	r2, r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d217      	bcs.n	8006b52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	789b      	ldrb	r3, [r3, #2]
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e010      	b.n	8006b4c <sync_window+0x78>
					wsect += fs->fsize;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7858      	ldrb	r0, [r3, #1]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b3e:	2301      	movs	r3, #1
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	f7ff fd1d 	bl	8006580 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d8eb      	bhi.n	8006b2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d01b      	beq.n	8006bac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ffad 	bl	8006ad4 <sync_window>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7858      	ldrb	r0, [r3, #1]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b8e:	2301      	movs	r3, #1
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	f7ff fcd5 	bl	8006540 <disk_read>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff87 	bl	8006ad4 <sync_window>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d159      	bne.n	8006c84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d149      	bne.n	8006c6c <sync_fs+0xb4>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d145      	bne.n	8006c6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	899b      	ldrh	r3, [r3, #12]
 8006bea:	461a      	mov	r2, r3
 8006bec:	2100      	movs	r1, #0
 8006bee:	f7ff fda8 	bl	8006742 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3334      	adds	r3, #52	; 0x34
 8006bf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bfa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fd37 	bl	8006672 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3334      	adds	r3, #52	; 0x34
 8006c08:	4921      	ldr	r1, [pc, #132]	; (8006c90 <sync_fs+0xd8>)
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fd4c 	bl	80066a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3334      	adds	r3, #52	; 0x34
 8006c14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c18:	491e      	ldr	r1, [pc, #120]	; (8006c94 <sync_fs+0xdc>)
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff fd44 	bl	80066a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3334      	adds	r3, #52	; 0x34
 8006c24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7ff fd3a 	bl	80066a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3334      	adds	r3, #52	; 0x34
 8006c38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7ff fd30 	bl	80066a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7858      	ldrb	r0, [r3, #1]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c60:	2301      	movs	r3, #1
 8006c62:	f7ff fc8d 	bl	8006580 <disk_write>
			fs->fsi_flag = 0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fca3 	bl	80065c0 <disk_ioctl>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <sync_fs+0xcc>
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	41615252 	.word	0x41615252
 8006c94:	61417272 	.word	0x61417272

08006c98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3b02      	subs	r3, #2
 8006ca6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	3b02      	subs	r3, #2
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d301      	bcc.n	8006cb8 <clust2sect+0x20>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e008      	b.n	8006cca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	895b      	ldrh	r3, [r3, #10]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	fb03 f202 	mul.w	r2, r3, r2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	4413      	add	r3, r2
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d904      	bls.n	8006cf6 <get_fat+0x20>
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d302      	bcc.n	8006cfc <get_fat+0x26>
		val = 1;	/* Internal error */
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e0bb      	b.n	8006e74 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	f000 8083 	beq.w	8006e12 <get_fat+0x13c>
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	f300 80a7 	bgt.w	8006e60 <get_fat+0x18a>
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d002      	beq.n	8006d1c <get_fat+0x46>
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d056      	beq.n	8006dc8 <get_fat+0xf2>
 8006d1a:	e0a1      	b.n	8006e60 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	899b      	ldrh	r3, [r3, #12]
 8006d32:	4619      	mov	r1, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f7ff ff0c 	bl	8006b5c <move_window>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f040 808d 	bne.w	8006e66 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	60fa      	str	r2, [r7, #12]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	8992      	ldrh	r2, [r2, #12]
 8006d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d5a:	fb02 f201 	mul.w	r2, r2, r1
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	899b      	ldrh	r3, [r3, #12]
 8006d72:	4619      	mov	r1, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7ff feec 	bl	8006b5c <move_window>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d16f      	bne.n	8006e6a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	899b      	ldrh	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d96:	fb02 f201 	mul.w	r2, r2, r1
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	461a      	mov	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <get_fat+0xe8>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	e002      	b.n	8006dc4 <get_fat+0xee>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc4:	617b      	str	r3, [r7, #20]
			break;
 8006dc6:	e055      	b.n	8006e74 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	899b      	ldrh	r3, [r3, #12]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ddc:	4413      	add	r3, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	6938      	ldr	r0, [r7, #16]
 8006de2:	f7ff febb 	bl	8006b5c <move_window>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d140      	bne.n	8006e6e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	8992      	ldrh	r2, [r2, #12]
 8006dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dfe:	fb02 f200 	mul.w	r2, r2, r0
 8006e02:	1a9b      	subs	r3, r3, r2
 8006e04:	440b      	add	r3, r1
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff fbf8 	bl	80065fc <ld_word>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	617b      	str	r3, [r7, #20]
			break;
 8006e10:	e030      	b.n	8006e74 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	899b      	ldrh	r3, [r3, #12]
 8006e1a:	089b      	lsrs	r3, r3, #2
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e26:	4413      	add	r3, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f7ff fe96 	bl	8006b5c <move_window>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d11d      	bne.n	8006e72 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	8992      	ldrh	r2, [r2, #12]
 8006e44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e48:	fb02 f200 	mul.w	r2, r2, r0
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	440b      	add	r3, r1
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fbeb 	bl	800662c <ld_dword>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e5c:	617b      	str	r3, [r7, #20]
			break;
 8006e5e:	e009      	b.n	8006e74 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e006      	b.n	8006e74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e66:	bf00      	nop
 8006e68:	e004      	b.n	8006e74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e6a:	bf00      	nop
 8006e6c:	e002      	b.n	8006e74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e72:	bf00      	nop
		}
	}

	return val;
 8006e74:	697b      	ldr	r3, [r7, #20]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e7e:	b590      	push	{r4, r7, lr}
 8006e80:	b089      	sub	sp, #36	; 0x24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f240 8102 	bls.w	800709a <put_fat+0x21c>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	f080 80fc 	bcs.w	800709a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	f000 80b6 	beq.w	8007018 <put_fat+0x19a>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	f300 80fd 	bgt.w	80070ac <put_fat+0x22e>
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d003      	beq.n	8006ebe <put_fat+0x40>
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	f000 8083 	beq.w	8006fc2 <put_fat+0x144>
 8006ebc:	e0f6      	b.n	80070ac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4413      	add	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	899b      	ldrh	r3, [r3, #12]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006edc:	4413      	add	r3, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff fe3b 	bl	8006b5c <move_window>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 80d6 	bne.w	800709e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	61ba      	str	r2, [r7, #24]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	8992      	ldrh	r2, [r2, #12]
 8006f02:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f06:	fb02 f200 	mul.w	r2, r2, r0
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <put_fat+0xb8>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b25b      	sxtb	r3, r3
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	b25a      	sxtb	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	e001      	b.n	8006f3a <put_fat+0xbc>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	899b      	ldrh	r3, [r3, #12]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f54:	4413      	add	r3, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fdff 	bl	8006b5c <move_window>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f62:	7ffb      	ldrb	r3, [r7, #31]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 809c 	bne.w	80070a2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	899b      	ldrh	r3, [r3, #12]
 8006f74:	461a      	mov	r2, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f7c:	fb02 f200 	mul.w	r2, r2, r0
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	440b      	add	r3, r1
 8006f84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <put_fat+0x11a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e00e      	b.n	8006fb6 <put_fat+0x138>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	f023 030f 	bic.w	r3, r3, #15
 8006fa2:	b25a      	sxtb	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	70da      	strb	r2, [r3, #3]
			break;
 8006fc0:	e074      	b.n	80070ac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	899b      	ldrh	r3, [r3, #12]
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fdbe 	bl	8006b5c <move_window>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fe4:	7ffb      	ldrb	r3, [r7, #31]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d15d      	bne.n	80070a6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	8992      	ldrh	r2, [r2, #12]
 8006ff8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ffc:	fb02 f200 	mul.w	r2, r2, r0
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	440b      	add	r3, r1
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	b292      	uxth	r2, r2
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fb31 	bl	8006672 <st_word>
			fs->wflag = 1;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	70da      	strb	r2, [r3, #3]
			break;
 8007016:	e049      	b.n	80070ac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	899b      	ldrh	r3, [r3, #12]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	b29b      	uxth	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	fbb3 f3f1 	udiv	r3, r3, r1
 800702c:	4413      	add	r3, r2
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff fd93 	bl	8006b5c <move_window>
 8007036:	4603      	mov	r3, r0
 8007038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800703a:	7ffb      	ldrb	r3, [r7, #31]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d134      	bne.n	80070aa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	8992      	ldrh	r2, [r2, #12]
 8007054:	fbb3 f0f2 	udiv	r0, r3, r2
 8007058:	fb02 f200 	mul.w	r2, r2, r0
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	440b      	add	r3, r1
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fae3 	bl	800662c <ld_dword>
 8007066:	4603      	mov	r3, r0
 8007068:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800706c:	4323      	orrs	r3, r4
 800706e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	8992      	ldrh	r2, [r2, #12]
 800707e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007082:	fb02 f200 	mul.w	r2, r2, r0
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	440b      	add	r3, r1
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fb0b 	bl	80066a8 <st_dword>
			fs->wflag = 1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	70da      	strb	r2, [r3, #3]
			break;
 8007098:	e008      	b.n	80070ac <put_fat+0x22e>
		}
	}
 800709a:	bf00      	nop
 800709c:	e006      	b.n	80070ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800709e:	bf00      	nop
 80070a0:	e004      	b.n	80070ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80070a2:	bf00      	nop
 80070a4:	e002      	b.n	80070ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80070aa:	bf00      	nop
	return res;
 80070ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3724      	adds	r7, #36	; 0x24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}

080070b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b088      	sub	sp, #32
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d904      	bls.n	80070dc <remove_chain+0x26>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d301      	bcc.n	80070e0 <remove_chain+0x2a>
 80070dc:	2302      	movs	r3, #2
 80070de:	e04b      	b.n	8007178 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	69b8      	ldr	r0, [r7, #24]
 80070ee:	f7ff fec6 	bl	8006e7e <put_fat>
 80070f2:	4603      	mov	r3, r0
 80070f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <remove_chain+0x4a>
 80070fc:	7ffb      	ldrb	r3, [r7, #31]
 80070fe:	e03b      	b.n	8007178 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fde7 	bl	8006cd6 <get_fat>
 8007108:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d031      	beq.n	8007174 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <remove_chain+0x64>
 8007116:	2302      	movs	r3, #2
 8007118:	e02e      	b.n	8007178 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007120:	d101      	bne.n	8007126 <remove_chain+0x70>
 8007122:	2301      	movs	r3, #1
 8007124:	e028      	b.n	8007178 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007126:	2200      	movs	r2, #0
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	69b8      	ldr	r0, [r7, #24]
 800712c:	f7ff fea7 	bl	8006e7e <put_fat>
 8007130:	4603      	mov	r3, r0
 8007132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007134:	7ffb      	ldrb	r3, [r7, #31]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <remove_chain+0x88>
 800713a:	7ffb      	ldrb	r3, [r7, #31]
 800713c:	e01c      	b.n	8007178 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	695a      	ldr	r2, [r3, #20]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	3b02      	subs	r3, #2
 8007148:	429a      	cmp	r2, r3
 800714a:	d20b      	bcs.n	8007164 <remove_chain+0xae>
			fs->free_clst++;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	791b      	ldrb	r3, [r3, #4]
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	d3c6      	bcc.n	8007100 <remove_chain+0x4a>
 8007172:	e000      	b.n	8007176 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007174:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10d      	bne.n	80071b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <create_chain+0x2c>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d31b      	bcc.n	80071e4 <create_chain+0x64>
 80071ac:	2301      	movs	r3, #1
 80071ae:	61bb      	str	r3, [r7, #24]
 80071b0:	e018      	b.n	80071e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fd8e 	bl	8006cd6 <get_fat>
 80071ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d801      	bhi.n	80071c6 <create_chain+0x46>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e070      	b.n	80072a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071cc:	d101      	bne.n	80071d2 <create_chain+0x52>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	e06a      	b.n	80072a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d201      	bcs.n	80071e0 <create_chain+0x60>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	e063      	b.n	80072a8 <create_chain+0x128>
		scl = clst;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d307      	bcc.n	8007208 <create_chain+0x88>
				ncl = 2;
 80071f8:	2302      	movs	r3, #2
 80071fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d901      	bls.n	8007208 <create_chain+0x88>
 8007204:	2300      	movs	r3, #0
 8007206:	e04f      	b.n	80072a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007208:	69f9      	ldr	r1, [r7, #28]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fd63 	bl	8006cd6 <get_fat>
 8007210:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00e      	beq.n	8007236 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d003      	beq.n	8007226 <create_chain+0xa6>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d101      	bne.n	800722a <create_chain+0xaa>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	e03e      	b.n	80072a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d1da      	bne.n	80071e8 <create_chain+0x68>
 8007232:	2300      	movs	r3, #0
 8007234:	e038      	b.n	80072a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007236:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800723c:	69f9      	ldr	r1, [r7, #28]
 800723e:	6938      	ldr	r0, [r7, #16]
 8007240:	f7ff fe1d 	bl	8006e7e <put_fat>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <create_chain+0xe2>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6938      	ldr	r0, [r7, #16]
 800725a:	f7ff fe10 	bl	8006e7e <put_fat>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d116      	bne.n	8007296 <create_chain+0x116>
		fs->last_clst = ncl;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	3b02      	subs	r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d804      	bhi.n	8007286 <create_chain+0x106>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	711a      	strb	r2, [r3, #4]
 8007294:	e007      	b.n	80072a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d102      	bne.n	80072a2 <create_chain+0x122>
 800729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072a0:	e000      	b.n	80072a4 <create_chain+0x124>
 80072a2:	2301      	movs	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80072a6:	69fb      	ldr	r3, [r7, #28]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3720      	adds	r7, #32
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	3304      	adds	r3, #4
 80072c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	899b      	ldrh	r3, [r3, #12]
 80072cc:	461a      	mov	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	8952      	ldrh	r2, [r2, #10]
 80072d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	613a      	str	r2, [r7, #16]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <clmt_clust+0x42>
 80072ee:	2300      	movs	r3, #0
 80072f0:	e010      	b.n	8007314 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d307      	bcc.n	800730a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3304      	adds	r3, #4
 8007306:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007308:	e7e9      	b.n	80072de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800730a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007336:	d204      	bcs.n	8007342 <dir_sdi+0x22>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f003 031f 	and.w	r3, r3, #31
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007342:	2302      	movs	r3, #2
 8007344:	e071      	b.n	800742a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <dir_sdi+0x46>
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d902      	bls.n	8007366 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	8912      	ldrh	r2, [r2, #8]
 8007374:	4293      	cmp	r3, r2
 8007376:	d301      	bcc.n	800737c <dir_sdi+0x5c>
 8007378:	2302      	movs	r3, #2
 800737a:	e056      	b.n	800742a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	61da      	str	r2, [r3, #28]
 8007384:	e02d      	b.n	80073e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	895b      	ldrh	r3, [r3, #10]
 800738a:	461a      	mov	r2, r3
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	899b      	ldrh	r3, [r3, #12]
 8007390:	fb03 f302 	mul.w	r3, r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007396:	e019      	b.n	80073cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6979      	ldr	r1, [r7, #20]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fc9a 	bl	8006cd6 <get_fat>
 80073a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073aa:	d101      	bne.n	80073b0 <dir_sdi+0x90>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e03c      	b.n	800742a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d904      	bls.n	80073c0 <dir_sdi+0xa0>
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d301      	bcc.n	80073c4 <dir_sdi+0xa4>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e032      	b.n	800742a <dir_sdi+0x10a>
			ofs -= csz;
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d2e1      	bcs.n	8007398 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f7ff fc5e 	bl	8006c98 <clust2sect>
 80073dc:	4602      	mov	r2, r0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <dir_sdi+0xd4>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e01a      	b.n	800742a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	899b      	ldrh	r3, [r3, #12]
 80073fc:	4619      	mov	r1, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	fbb3 f3f1 	udiv	r3, r3, r1
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	899b      	ldrh	r3, [r3, #12]
 8007414:	461a      	mov	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	fbb3 f0f2 	udiv	r0, r3, r2
 800741c:	fb02 f200 	mul.w	r2, r2, r0
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	18ca      	adds	r2, r1, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	3320      	adds	r3, #32
 8007448:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <dir_next+0x28>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007458:	d301      	bcc.n	800745e <dir_next+0x2c>
 800745a:	2304      	movs	r3, #4
 800745c:	e0bb      	b.n	80075d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	899b      	ldrh	r3, [r3, #12]
 8007462:	461a      	mov	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	fbb3 f1f2 	udiv	r1, r3, r2
 800746a:	fb02 f201 	mul.w	r2, r2, r1
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 809d 	bne.w	80075b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	8912      	ldrh	r2, [r2, #8]
 8007490:	4293      	cmp	r3, r2
 8007492:	f0c0 808d 	bcc.w	80075b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	61da      	str	r2, [r3, #28]
 800749c:	2304      	movs	r3, #4
 800749e:	e09a      	b.n	80075d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	899b      	ldrh	r3, [r3, #12]
 80074a4:	461a      	mov	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	8952      	ldrh	r2, [r2, #10]
 80074b0:	3a01      	subs	r2, #1
 80074b2:	4013      	ands	r3, r2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d17b      	bne.n	80075b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7ff fc08 	bl	8006cd6 <get_fat>
 80074c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d801      	bhi.n	80074d2 <dir_next+0xa0>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e081      	b.n	80075d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d8:	d101      	bne.n	80074de <dir_next+0xac>
 80074da:	2301      	movs	r3, #1
 80074dc:	e07b      	b.n	80075d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d359      	bcc.n	800759c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	61da      	str	r2, [r3, #28]
 80074f4:	2304      	movs	r3, #4
 80074f6:	e06e      	b.n	80075d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7ff fe3d 	bl	8007180 <create_chain>
 8007506:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <dir_next+0xe0>
 800750e:	2307      	movs	r3, #7
 8007510:	e061      	b.n	80075d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <dir_next+0xea>
 8007518:	2302      	movs	r3, #2
 800751a:	e05c      	b.n	80075d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007522:	d101      	bne.n	8007528 <dir_next+0xf6>
 8007524:	2301      	movs	r3, #1
 8007526:	e056      	b.n	80075d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fad3 	bl	8006ad4 <sync_window>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <dir_next+0x106>
 8007534:	2301      	movs	r3, #1
 8007536:	e04e      	b.n	80075d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	899b      	ldrh	r3, [r3, #12]
 8007542:	461a      	mov	r2, r3
 8007544:	2100      	movs	r1, #0
 8007546:	f7ff f8fc 	bl	8006742 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fba1 	bl	8006c98 <clust2sect>
 8007556:	4602      	mov	r2, r0
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
 800755c:	e012      	b.n	8007584 <dir_next+0x152>
						fs->wflag = 1;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff fab5 	bl	8006ad4 <sync_window>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <dir_next+0x142>
 8007570:	2301      	movs	r3, #1
 8007572:	e030      	b.n	80075d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3301      	adds	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	895b      	ldrh	r3, [r3, #10]
 8007588:	461a      	mov	r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4293      	cmp	r3, r2
 800758e:	d3e6      	bcc.n	800755e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80075a2:	6979      	ldr	r1, [r7, #20]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff fb77 	bl	8006c98 <clust2sect>
 80075aa:	4602      	mov	r2, r0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	899b      	ldrh	r3, [r3, #12]
 80075c0:	461a      	mov	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80075c8:	fb02 f200 	mul.w	r2, r2, r0
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	18ca      	adds	r2, r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fe95 	bl	8007320 <dir_sdi>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d12b      	bne.n	8007658 <dir_alloc+0x7a>
		n = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	4619      	mov	r1, r3
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff faa6 	bl	8006b5c <move_window>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11d      	bne.n	8007656 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2be5      	cmp	r3, #229	; 0xe5
 8007622:	d004      	beq.n	800762e <dir_alloc+0x50>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3301      	adds	r3, #1
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d102      	bne.n	8007642 <dir_alloc+0x64>
 800763c:	e00c      	b.n	8007658 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800763e:	2300      	movs	r3, #0
 8007640:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007642:	2101      	movs	r1, #1
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fef4 	bl	8007432 <dir_next>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0d7      	beq.n	8007604 <dir_alloc+0x26>
 8007654:	e000      	b.n	8007658 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007656:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d101      	bne.n	8007662 <dir_alloc+0x84>
 800765e:	2307      	movs	r3, #7
 8007660:	75fb      	strb	r3, [r7, #23]
	return res;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	331a      	adds	r3, #26
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe ffbe 	bl	80065fc <ld_word>
 8007680:	4603      	mov	r3, r0
 8007682:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d109      	bne.n	80076a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe ffb3 	bl	80065fc <ld_word>
 8007696:	4603      	mov	r3, r0
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076a0:	68fb      	ldr	r3, [r7, #12]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	331a      	adds	r3, #26
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	b292      	uxth	r2, r2
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe ffd6 	bl	8006672 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d109      	bne.n	80076e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f103 0214 	add.w	r2, r3, #20
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f7fe ffc8 	bl	8006672 <st_word>
	}
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fe10 	bl	8007320 <dir_sdi>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <dir_find+0x24>
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	e03e      	b.n	800778c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	4619      	mov	r1, r3
 8007714:	6938      	ldr	r0, [r7, #16]
 8007716:	f7ff fa21 	bl	8006b5c <move_window>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d12f      	bne.n	8007784 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <dir_find+0x4e>
 8007732:	2304      	movs	r3, #4
 8007734:	75fb      	strb	r3, [r7, #23]
 8007736:	e028      	b.n	800778a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	330b      	adds	r3, #11
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	330b      	adds	r3, #11
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <dir_find+0x86>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a18      	ldr	r0, [r3, #32]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3324      	adds	r3, #36	; 0x24
 8007762:	220b      	movs	r2, #11
 8007764:	4619      	mov	r1, r3
 8007766:	f7ff f807 	bl	8006778 <mem_cmp>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007770:	2100      	movs	r1, #0
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fe5d 	bl	8007432 <dir_next>
 8007778:	4603      	mov	r3, r0
 800777a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0c5      	beq.n	800770e <dir_find+0x24>
 8007782:	e002      	b.n	800778a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007784:	bf00      	nop
 8007786:	e000      	b.n	800778a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007788:	bf00      	nop

	return res;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077a2:	2101      	movs	r1, #1
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff1a 	bl	80075de <dir_alloc>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11c      	bne.n	80077ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	4619      	mov	r1, r3
 80077ba:	68b8      	ldr	r0, [r7, #8]
 80077bc:	f7ff f9ce 	bl	8006b5c <move_window>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d111      	bne.n	80077ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	2220      	movs	r2, #32
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe ffb5 	bl	8006742 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a18      	ldr	r0, [r3, #32]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	220b      	movs	r2, #11
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7fe ff8c 	bl	8006700 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2201      	movs	r2, #1
 80077ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d04e      	beq.n	80078ae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007818:	e021      	b.n	800785e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1c59      	adds	r1, r3, #1
 8007822:	6179      	str	r1, [r7, #20]
 8007824:	4413      	add	r3, r2
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b20      	cmp	r3, #32
 800782e:	d100      	bne.n	8007832 <get_fileinfo+0x3a>
 8007830:	e015      	b.n	800785e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d101      	bne.n	800783c <get_fileinfo+0x44>
 8007838:	23e5      	movs	r3, #229	; 0xe5
 800783a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b09      	cmp	r3, #9
 8007840:	d106      	bne.n	8007850 <get_fileinfo+0x58>
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	613a      	str	r2, [r7, #16]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	4413      	add	r3, r2
 800784c:	222e      	movs	r2, #46	; 0x2e
 800784e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	613a      	str	r2, [r7, #16]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4413      	add	r3, r2
 800785a:	7bfa      	ldrb	r2, [r7, #15]
 800785c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b0a      	cmp	r3, #10
 8007862:	d9da      	bls.n	800781a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	3309      	adds	r3, #9
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	7ada      	ldrb	r2, [r3, #11]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	331c      	adds	r3, #28
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fed3 	bl	800662c <ld_dword>
 8007886:	4602      	mov	r2, r0
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	3316      	adds	r3, #22
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe feca 	bl	800662c <ld_dword>
 8007898:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	b29a      	uxth	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	80da      	strh	r2, [r3, #6]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	809a      	strh	r2, [r3, #4]
 80078ac:	e000      	b.n	80078b0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078ae:	bf00      	nop
}
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80078ce:	220b      	movs	r2, #11
 80078d0:	2120      	movs	r1, #32
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f7fe ff35 	bl	8006742 <mem_set>
	si = i = 0; ni = 8;
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	2308      	movs	r3, #8
 80078e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	61fa      	str	r2, [r7, #28]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078f2:	7efb      	ldrb	r3, [r7, #27]
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d94e      	bls.n	8007996 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078f8:	7efb      	ldrb	r3, [r7, #27]
 80078fa:	2b2f      	cmp	r3, #47	; 0x2f
 80078fc:	d006      	beq.n	800790c <create_name+0x54>
 80078fe:	7efb      	ldrb	r3, [r7, #27]
 8007900:	2b5c      	cmp	r3, #92	; 0x5c
 8007902:	d110      	bne.n	8007926 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007904:	e002      	b.n	800790c <create_name+0x54>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b2f      	cmp	r3, #47	; 0x2f
 8007916:	d0f6      	beq.n	8007906 <create_name+0x4e>
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b5c      	cmp	r3, #92	; 0x5c
 8007922:	d0f0      	beq.n	8007906 <create_name+0x4e>
			break;
 8007924:	e038      	b.n	8007998 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	2b2e      	cmp	r3, #46	; 0x2e
 800792a:	d003      	beq.n	8007934 <create_name+0x7c>
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	429a      	cmp	r2, r3
 8007932:	d30c      	bcc.n	800794e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b0b      	cmp	r3, #11
 8007938:	d002      	beq.n	8007940 <create_name+0x88>
 800793a:	7efb      	ldrb	r3, [r7, #27]
 800793c:	2b2e      	cmp	r3, #46	; 0x2e
 800793e:	d001      	beq.n	8007944 <create_name+0x8c>
 8007940:	2306      	movs	r3, #6
 8007942:	e044      	b.n	80079ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007944:	2308      	movs	r3, #8
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	230b      	movs	r3, #11
 800794a:	617b      	str	r3, [r7, #20]
			continue;
 800794c:	e022      	b.n	8007994 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800794e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007952:	2b00      	cmp	r3, #0
 8007954:	da04      	bge.n	8007960 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007956:	7efb      	ldrb	r3, [r7, #27]
 8007958:	3b80      	subs	r3, #128	; 0x80
 800795a:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <create_name+0x120>)
 800795c:	5cd3      	ldrb	r3, [r2, r3]
 800795e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007960:	7efb      	ldrb	r3, [r7, #27]
 8007962:	4619      	mov	r1, r3
 8007964:	481d      	ldr	r0, [pc, #116]	; (80079dc <create_name+0x124>)
 8007966:	f7fe ff2e 	bl	80067c6 <chk_chr>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <create_name+0xbc>
 8007970:	2306      	movs	r3, #6
 8007972:	e02c      	b.n	80079ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007974:	7efb      	ldrb	r3, [r7, #27]
 8007976:	2b60      	cmp	r3, #96	; 0x60
 8007978:	d905      	bls.n	8007986 <create_name+0xce>
 800797a:	7efb      	ldrb	r3, [r7, #27]
 800797c:	2b7a      	cmp	r3, #122	; 0x7a
 800797e:	d802      	bhi.n	8007986 <create_name+0xce>
 8007980:	7efb      	ldrb	r3, [r7, #27]
 8007982:	3b20      	subs	r3, #32
 8007984:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	613a      	str	r2, [r7, #16]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4413      	add	r3, r2
 8007990:	7efa      	ldrb	r2, [r7, #27]
 8007992:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007994:	e7a6      	b.n	80078e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007996:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	441a      	add	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <create_name+0xf4>
 80079a8:	2306      	movs	r3, #6
 80079aa:	e010      	b.n	80079ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2be5      	cmp	r3, #229	; 0xe5
 80079b2:	d102      	bne.n	80079ba <create_name+0x102>
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2205      	movs	r2, #5
 80079b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079ba:	7efb      	ldrb	r3, [r7, #27]
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d801      	bhi.n	80079c4 <create_name+0x10c>
 80079c0:	2204      	movs	r2, #4
 80079c2:	e000      	b.n	80079c6 <create_name+0x10e>
 80079c4:	2200      	movs	r2, #0
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	330b      	adds	r3, #11
 80079ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	0800b414 	.word	0x0800b414
 80079dc:	0800b39c 	.word	0x0800b39c

080079e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079f4:	e002      	b.n	80079fc <follow_path+0x1c>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b2f      	cmp	r3, #47	; 0x2f
 8007a02:	d0f8      	beq.n	80079f6 <follow_path+0x16>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b5c      	cmp	r3, #92	; 0x5c
 8007a0a:	d0f4      	beq.n	80079f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b1f      	cmp	r3, #31
 8007a18:	d80a      	bhi.n	8007a30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2280      	movs	r2, #128	; 0x80
 8007a1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a22:	2100      	movs	r1, #0
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fc7b 	bl	8007320 <dir_sdi>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]
 8007a2e:	e048      	b.n	8007ac2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a30:	463b      	mov	r3, r7
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff3f 	bl	80078b8 <create_name>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d139      	bne.n	8007ab8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fe50 	bl	80076ea <dir_find>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d12c      	bne.n	8007abc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a62:	7afb      	ldrb	r3, [r7, #11]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d127      	bne.n	8007abc <follow_path+0xdc>
 8007a6c:	2305      	movs	r3, #5
 8007a6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a70:	e024      	b.n	8007abc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d121      	bne.n	8007ac0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	799b      	ldrb	r3, [r3, #6]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d102      	bne.n	8007a8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a88:	2305      	movs	r3, #5
 8007a8a:	75fb      	strb	r3, [r7, #23]
 8007a8c:	e019      	b.n	8007ac2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	8992      	ldrh	r2, [r2, #12]
 8007a9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aa0:	fb02 f200 	mul.w	r2, r2, r0
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff fdde 	bl	800766c <ld_clust>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ab6:	e7bb      	b.n	8007a30 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ab8:	bf00      	nop
 8007aba:	e002      	b.n	8007ac2 <follow_path+0xe2>
				break;
 8007abc:	bf00      	nop
 8007abe:	e000      	b.n	8007ac2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ac0:	bf00      	nop
			}
		}
	}

	return res;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d031      	beq.n	8007b46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e002      	b.n	8007af0 <get_ldnumber+0x24>
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3301      	adds	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d903      	bls.n	8007b00 <get_ldnumber+0x34>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b3a      	cmp	r3, #58	; 0x3a
 8007afe:	d1f4      	bne.n	8007aea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b3a      	cmp	r3, #58	; 0x3a
 8007b06:	d11c      	bne.n	8007b42 <get_ldnumber+0x76>
			tp = *path;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	60fa      	str	r2, [r7, #12]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	3b30      	subs	r3, #48	; 0x30
 8007b18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d80e      	bhi.n	8007b3e <get_ldnumber+0x72>
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d10a      	bne.n	8007b3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <get_ldnumber+0x72>
					vol = (int)i;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3301      	adds	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	e002      	b.n	8007b48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b46:	693b      	ldr	r3, [r7, #16]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	70da      	strb	r2, [r3, #3]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fe fff4 	bl	8006b5c <move_window>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <check_fs+0x2a>
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	e038      	b.n	8007bf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3334      	adds	r3, #52	; 0x34
 8007b82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fd38 	bl	80065fc <ld_word>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d001      	beq.n	8007b9c <check_fs+0x48>
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e029      	b.n	8007bf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ba2:	2be9      	cmp	r3, #233	; 0xe9
 8007ba4:	d009      	beq.n	8007bba <check_fs+0x66>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bac:	2beb      	cmp	r3, #235	; 0xeb
 8007bae:	d11e      	bne.n	8007bee <check_fs+0x9a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007bb6:	2b90      	cmp	r3, #144	; 0x90
 8007bb8:	d119      	bne.n	8007bee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3334      	adds	r3, #52	; 0x34
 8007bbe:	3336      	adds	r3, #54	; 0x36
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe fd33 	bl	800662c <ld_dword>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bcc:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <check_fs+0xa4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d101      	bne.n	8007bd6 <check_fs+0x82>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e00c      	b.n	8007bf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3334      	adds	r3, #52	; 0x34
 8007bda:	3352      	adds	r3, #82	; 0x52
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fd25 	bl	800662c <ld_dword>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4a05      	ldr	r2, [pc, #20]	; (8007bfc <check_fs+0xa8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d101      	bne.n	8007bee <check_fs+0x9a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bee:	2302      	movs	r3, #2
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	00544146 	.word	0x00544146
 8007bfc:	33544146 	.word	0x33544146

08007c00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b096      	sub	sp, #88	; 0x58
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff ff59 	bl	8007acc <get_ldnumber>
 8007c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da01      	bge.n	8007c26 <find_volume+0x26>
 8007c22:	230b      	movs	r3, #11
 8007c24:	e265      	b.n	80080f2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c26:	4ab0      	ldr	r2, [pc, #704]	; (8007ee8 <find_volume+0x2e8>)
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <find_volume+0x3a>
 8007c36:	230c      	movs	r3, #12
 8007c38:	e25b      	b.n	80080f2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	f023 0301 	bic.w	r3, r3, #1
 8007c46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01a      	beq.n	8007c86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fc33 	bl	80064c0 <disk_status>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <find_volume+0x82>
 8007c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c7e:	230a      	movs	r3, #10
 8007c80:	e237      	b.n	80080f2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007c82:	2300      	movs	r3, #0
 8007c84:	e235      	b.n	80080f2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fc2b 	bl	80064f4 <disk_initialize>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e21e      	b.n	80080f2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <find_volume+0xca>
 8007cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e213      	b.n	80080f2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	7858      	ldrb	r0, [r3, #1]
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	f7fe fc73 	bl	80065c0 <disk_ioctl>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <find_volume+0xe4>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e206      	b.n	80080f2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	899b      	ldrh	r3, [r3, #12]
 8007ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cec:	d80d      	bhi.n	8007d0a <find_volume+0x10a>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	899b      	ldrh	r3, [r3, #12]
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf6:	d308      	bcc.n	8007d0a <find_volume+0x10a>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	899b      	ldrh	r3, [r3, #12]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	899b      	ldrh	r3, [r3, #12]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	4013      	ands	r3, r2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <find_volume+0x10e>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e1f1      	b.n	80080f2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d16:	f7ff ff1d 	bl	8007b54 <check_fs>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d14b      	bne.n	8007dc0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d28:	2300      	movs	r3, #0
 8007d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d2c:	e01f      	b.n	8007d6e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d3c:	4413      	add	r3, r2
 8007d3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	3304      	adds	r3, #4
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d006      	beq.n	8007d58 <find_volume+0x158>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc6c 	bl	800662c <ld_dword>
 8007d54:	4602      	mov	r2, r0
 8007d56:	e000      	b.n	8007d5a <find_volume+0x15a>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007d62:	440b      	add	r3, r1
 8007d64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d9dc      	bls.n	8007d2e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d74:	2300      	movs	r3, #0
 8007d76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <find_volume+0x184>
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d80:	3b01      	subs	r3, #1
 8007d82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <find_volume+0x1a6>
 8007d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d9e:	f7ff fed9 	bl	8007b54 <check_fs>
 8007da2:	4603      	mov	r3, r0
 8007da4:	e000      	b.n	8007da8 <find_volume+0x1a8>
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d905      	bls.n	8007dc0 <find_volume+0x1c0>
 8007db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db6:	3301      	adds	r3, #1
 8007db8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d9e1      	bls.n	8007d84 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d101      	bne.n	8007dcc <find_volume+0x1cc>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e192      	b.n	80080f2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d901      	bls.n	8007dd8 <find_volume+0x1d8>
 8007dd4:	230d      	movs	r3, #13
 8007dd6:	e18c      	b.n	80080f2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	3334      	adds	r3, #52	; 0x34
 8007ddc:	330b      	adds	r3, #11
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fc0c 	bl	80065fc <ld_word>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	899b      	ldrh	r3, [r3, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d001      	beq.n	8007df4 <find_volume+0x1f4>
 8007df0:	230d      	movs	r3, #13
 8007df2:	e17e      	b.n	80080f2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	3334      	adds	r3, #52	; 0x34
 8007df8:	3316      	adds	r3, #22
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fbfe 	bl	80065fc <ld_word>
 8007e00:	4603      	mov	r3, r0
 8007e02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <find_volume+0x218>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	3334      	adds	r3, #52	; 0x34
 8007e0e:	3324      	adds	r3, #36	; 0x24
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fc0b 	bl	800662c <ld_dword>
 8007e16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e1c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d005      	beq.n	8007e3c <find_volume+0x23c>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	789b      	ldrb	r3, [r3, #2]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d001      	beq.n	8007e3c <find_volume+0x23c>
 8007e38:	230d      	movs	r3, #13
 8007e3a:	e15a      	b.n	80080f2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d008      	beq.n	8007e70 <find_volume+0x270>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	895b      	ldrh	r3, [r3, #10]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	895b      	ldrh	r3, [r3, #10]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <find_volume+0x274>
 8007e70:	230d      	movs	r3, #13
 8007e72:	e13e      	b.n	80080f2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	3334      	adds	r3, #52	; 0x34
 8007e78:	3311      	adds	r3, #17
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fbbe 	bl	80065fc <ld_word>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	891b      	ldrh	r3, [r3, #8]
 8007e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e8e:	8992      	ldrh	r2, [r2, #12]
 8007e90:	0952      	lsrs	r2, r2, #5
 8007e92:	b292      	uxth	r2, r2
 8007e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e98:	fb02 f201 	mul.w	r2, r2, r1
 8007e9c:	1a9b      	subs	r3, r3, r2
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <find_volume+0x2a8>
 8007ea4:	230d      	movs	r3, #13
 8007ea6:	e124      	b.n	80080f2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	3334      	adds	r3, #52	; 0x34
 8007eac:	3313      	adds	r3, #19
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fba4 	bl	80065fc <ld_word>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <find_volume+0x2cc>
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	3334      	adds	r3, #52	; 0x34
 8007ec2:	3320      	adds	r3, #32
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fe fbb1 	bl	800662c <ld_dword>
 8007eca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	3334      	adds	r3, #52	; 0x34
 8007ed0:	330e      	adds	r3, #14
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fb92 	bl	80065fc <ld_word>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007edc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <find_volume+0x2ec>
 8007ee2:	230d      	movs	r3, #13
 8007ee4:	e105      	b.n	80080f2 <find_volume+0x4f2>
 8007ee6:	bf00      	nop
 8007ee8:	2000009c 	.word	0x2000009c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007eec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	4413      	add	r3, r2
 8007ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef4:	8911      	ldrh	r1, [r2, #8]
 8007ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef8:	8992      	ldrh	r2, [r2, #12]
 8007efa:	0952      	lsrs	r2, r2, #5
 8007efc:	b292      	uxth	r2, r2
 8007efe:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f02:	b292      	uxth	r2, r2
 8007f04:	4413      	add	r3, r2
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d201      	bcs.n	8007f14 <find_volume+0x314>
 8007f10:	230d      	movs	r3, #13
 8007f12:	e0ee      	b.n	80080f2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f1c:	8952      	ldrh	r2, [r2, #10]
 8007f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <find_volume+0x32e>
 8007f2a:	230d      	movs	r3, #13
 8007f2c:	e0e1      	b.n	80080f2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d802      	bhi.n	8007f44 <find_volume+0x344>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d802      	bhi.n	8007f54 <find_volume+0x354>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f60:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f66:	441a      	add	r2, r3
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007f6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	441a      	add	r2, r3
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007f76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d11e      	bne.n	8007fbc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	3334      	adds	r3, #52	; 0x34
 8007f82:	332a      	adds	r3, #42	; 0x2a
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fb39 	bl	80065fc <ld_word>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <find_volume+0x394>
 8007f90:	230d      	movs	r3, #13
 8007f92:	e0ae      	b.n	80080f2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <find_volume+0x3a0>
 8007f9c:	230d      	movs	r3, #13
 8007f9e:	e0a8      	b.n	80080f2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	3334      	adds	r3, #52	; 0x34
 8007fa4:	332c      	adds	r3, #44	; 0x2c
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fb40 	bl	800662c <ld_dword>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fba:	e01f      	b.n	8007ffc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	891b      	ldrh	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <find_volume+0x3c8>
 8007fc4:	230d      	movs	r3, #13
 8007fc6:	e094      	b.n	80080f2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fce:	441a      	add	r2, r3
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d103      	bne.n	8007fe4 <find_volume+0x3e4>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	e00a      	b.n	8007ffa <find_volume+0x3fa>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	085a      	lsrs	r2, r3, #1
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ffa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	899b      	ldrh	r3, [r3, #12]
 8008004:	4619      	mov	r1, r3
 8008006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008008:	440b      	add	r3, r1
 800800a:	3b01      	subs	r3, #1
 800800c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800800e:	8989      	ldrh	r1, [r1, #12]
 8008010:	fbb3 f3f1 	udiv	r3, r3, r1
 8008014:	429a      	cmp	r2, r3
 8008016:	d201      	bcs.n	800801c <find_volume+0x41c>
 8008018:	230d      	movs	r3, #13
 800801a:	e06a      	b.n	80080f2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008022:	615a      	str	r2, [r3, #20]
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	2280      	movs	r2, #128	; 0x80
 8008030:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008036:	2b03      	cmp	r3, #3
 8008038:	d149      	bne.n	80080ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	3334      	adds	r3, #52	; 0x34
 800803e:	3330      	adds	r3, #48	; 0x30
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe fadb 	bl	80065fc <ld_word>
 8008046:	4603      	mov	r3, r0
 8008048:	2b01      	cmp	r3, #1
 800804a:	d140      	bne.n	80080ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800804c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800804e:	3301      	adds	r3, #1
 8008050:	4619      	mov	r1, r3
 8008052:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008054:	f7fe fd82 	bl	8006b5c <move_window>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d137      	bne.n	80080ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	2200      	movs	r2, #0
 8008062:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	3334      	adds	r3, #52	; 0x34
 8008068:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe fac5 	bl	80065fc <ld_word>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800807a:	429a      	cmp	r2, r3
 800807c:	d127      	bne.n	80080ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	3334      	adds	r3, #52	; 0x34
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fad2 	bl	800662c <ld_dword>
 8008088:	4603      	mov	r3, r0
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <find_volume+0x4fc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d11e      	bne.n	80080ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	3334      	adds	r3, #52	; 0x34
 8008094:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fac7 	bl	800662c <ld_dword>
 800809e:	4603      	mov	r3, r0
 80080a0:	4a17      	ldr	r2, [pc, #92]	; (8008100 <find_volume+0x500>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d113      	bne.n	80080ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	3334      	adds	r3, #52	; 0x34
 80080aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fabc 	bl	800662c <ld_dword>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	3334      	adds	r3, #52	; 0x34
 80080be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fab2 	bl	800662c <ld_dword>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80080d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <find_volume+0x504>)
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <find_volume+0x504>)
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <find_volume+0x504>)
 80080e4:	881a      	ldrh	r2, [r3, #0]
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ec:	f7fe fcce 	bl	8006a8c <clear_lock>
#endif
	return FR_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3758      	adds	r7, #88	; 0x58
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	41615252 	.word	0x41615252
 8008100:	61417272 	.word	0x61417272
 8008104:	200000a0 	.word	0x200000a0

08008108 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008112:	2309      	movs	r3, #9
 8008114:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01c      	beq.n	8008156 <validate+0x4e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d018      	beq.n	8008156 <validate+0x4e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d013      	beq.n	8008156 <validate+0x4e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	889a      	ldrh	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	429a      	cmp	r2, r3
 800813a:	d10c      	bne.n	8008156 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe f9bc 	bl	80064c0 <disk_status>
 8008148:	4603      	mov	r3, r0
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <validate+0x4e>
			res = FR_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <validate+0x5a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	e000      	b.n	8008164 <validate+0x5c>
 8008162:	2300      	movs	r3, #0
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	6013      	str	r3, [r2, #0]
	return res;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008186:	f107 0310 	add.w	r3, r7, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fc9e 	bl	8007acc <get_ldnumber>
 8008190:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da01      	bge.n	800819c <f_mount+0x28>
 8008198:	230b      	movs	r3, #11
 800819a:	e02b      	b.n	80081f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800819c:	4a17      	ldr	r2, [pc, #92]	; (80081fc <f_mount+0x88>)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081ac:	69b8      	ldr	r0, [r7, #24]
 80081ae:	f7fe fc6d 	bl	8006a8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2200      	movs	r2, #0
 80081b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	490d      	ldr	r1, [pc, #52]	; (80081fc <f_mount+0x88>)
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <f_mount+0x66>
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d001      	beq.n	80081de <f_mount+0x6a>
 80081da:	2300      	movs	r3, #0
 80081dc:	e00a      	b.n	80081f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081de:	f107 010c 	add.w	r1, r7, #12
 80081e2:	f107 0308 	add.w	r3, r7, #8
 80081e6:	2200      	movs	r2, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fd09 	bl	8007c00 <find_volume>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	2000009c 	.word	0x2000009c

08008200 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b098      	sub	sp, #96	; 0x60
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <f_open+0x18>
 8008214:	2309      	movs	r3, #9
 8008216:	e1bb      	b.n	8008590 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800821e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008220:	79fa      	ldrb	r2, [r7, #7]
 8008222:	f107 0110 	add.w	r1, r7, #16
 8008226:	f107 0308 	add.w	r3, r7, #8
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fce8 	bl	8007c00 <find_volume>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 819f 	bne.w	800857e <f_open+0x37e>
		dj.obj.fs = fs;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff fbc7 	bl	80079e0 <follow_path>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11a      	bne.n	8008296 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008260:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008264:	b25b      	sxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	da03      	bge.n	8008272 <f_open+0x72>
				res = FR_INVALID_NAME;
 800826a:	2306      	movs	r3, #6
 800826c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008270:	e011      	b.n	8008296 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf14      	ite	ne
 800827c:	2301      	movne	r3, #1
 800827e:	2300      	moveq	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	f107 0314 	add.w	r3, r7, #20
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fab6 	bl	80067fc <chk_lock>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	f003 031c 	and.w	r3, r3, #28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d07f      	beq.n	80083a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80082a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d017      	beq.n	80082d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d10e      	bne.n	80082ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082b0:	f7fe fb00 	bl	80068b4 <enq_lock>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <f_open+0xc8>
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fa68 	bl	8007794 <dir_register>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e000      	b.n	80082ca <f_open+0xca>
 80082c8:	2312      	movs	r3, #18
 80082ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	71fb      	strb	r3, [r7, #7]
 80082d6:	e010      	b.n	80082fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082d8:	7ebb      	ldrb	r3, [r7, #26]
 80082da:	f003 0311 	and.w	r3, r3, #17
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <f_open+0xea>
					res = FR_DENIED;
 80082e2:	2307      	movs	r3, #7
 80082e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082e8:	e007      	b.n	80082fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <f_open+0xfa>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d168      	bne.n	80083d4 <f_open+0x1d4>
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d063      	beq.n	80083d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800830c:	f7fd fea4 	bl	8006058 <get_fattime>
 8008310:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	330e      	adds	r3, #14
 8008316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe f9c5 	bl	80066a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	3316      	adds	r3, #22
 8008322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe f9bf 	bl	80066a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	330b      	adds	r3, #11
 800832e:	2220      	movs	r2, #32
 8008330:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff f997 	bl	800766c <ld_clust>
 800833e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008344:	2200      	movs	r2, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff f9af 	bl	80076aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	331c      	adds	r3, #28
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe f9a8 	bl	80066a8 <st_dword>
					fs->wflag = 1;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2201      	movs	r2, #1
 800835c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800835e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d037      	beq.n	80083d4 <f_open+0x1d4>
						dw = fs->winsect;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	2200      	movs	r2, #0
 8008370:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe fe9f 	bl	80070b6 <remove_chain>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800837e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d126      	bne.n	80083d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fbe6 	bl	8006b5c <move_window>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800839a:	3a01      	subs	r2, #1
 800839c:	611a      	str	r2, [r3, #16]
 800839e:	e019      	b.n	80083d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d115      	bne.n	80083d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083a8:	7ebb      	ldrb	r3, [r7, #26]
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80083b2:	2304      	movs	r3, #4
 80083b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083b8:	e00c      	b.n	80083d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <f_open+0x1d4>
 80083c4:	7ebb      	ldrb	r3, [r7, #26]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <f_open+0x1d4>
						res = FR_DENIED;
 80083ce:	2307      	movs	r3, #7
 80083d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80083d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d128      	bne.n	800842e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80083f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	f023 0301 	bic.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	f107 0314 	add.w	r3, r7, #20
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fa6f 	bl	80068f8 <inc_lock>
 800841a:	4602      	mov	r2, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <f_open+0x22e>
 8008428:	2302      	movs	r3, #2
 800842a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800842e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 80a3 	bne.w	800857e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff f914 	bl	800766c <ld_clust>
 8008444:	4602      	mov	r2, r0
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	331c      	adds	r3, #28
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe f8ec 	bl	800662c <ld_dword>
 8008454:	4602      	mov	r2, r0
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	88da      	ldrh	r2, [r3, #6]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3330      	adds	r3, #48	; 0x30
 800848a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe f956 	bl	8006742 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d06e      	beq.n	800857e <f_open+0x37e>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d06a      	beq.n	800857e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	461a      	mov	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	899b      	ldrh	r3, [r3, #12]
 80084ba:	fb03 f302 	mul.w	r3, r3, r2
 80084be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	657b      	str	r3, [r7, #84]	; 0x54
 80084cc:	e016      	b.n	80084fc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fbff 	bl	8006cd6 <get_fat>
 80084d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80084da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d802      	bhi.n	80084e6 <f_open+0x2e6>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ec:	d102      	bne.n	80084f4 <f_open+0x2f4>
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	657b      	str	r3, [r7, #84]	; 0x54
 80084fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <f_open+0x30c>
 8008504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008508:	429a      	cmp	r2, r3
 800850a:	d8e0      	bhi.n	80084ce <f_open+0x2ce>
				}
				fp->clust = clst;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008510:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008516:	2b00      	cmp	r3, #0
 8008518:	d131      	bne.n	800857e <f_open+0x37e>
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	461a      	mov	r2, r3
 8008520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008522:	fbb3 f1f2 	udiv	r1, r3, r2
 8008526:	fb02 f201 	mul.w	r2, r2, r1
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d026      	beq.n	800857e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fbaf 	bl	8006c98 <clust2sect>
 800853a:	6478      	str	r0, [r7, #68]	; 0x44
 800853c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <f_open+0x34a>
						res = FR_INT_ERR;
 8008542:	2302      	movs	r3, #2
 8008544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008548:	e019      	b.n	800857e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	899b      	ldrh	r3, [r3, #12]
 800854e:	461a      	mov	r2, r3
 8008550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008552:	fbb3 f2f2 	udiv	r2, r3, r2
 8008556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008558:	441a      	add	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	7858      	ldrb	r0, [r3, #1]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1a      	ldr	r2, [r3, #32]
 800856c:	2301      	movs	r3, #1
 800856e:	f7fd ffe7 	bl	8006540 <disk_read>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <f_open+0x37e>
 8008578:	2301      	movs	r3, #1
 800857a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800857e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <f_open+0x38c>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800858c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008590:	4618      	mov	r0, r3
 8008592:	3760      	adds	r7, #96	; 0x60
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08e      	sub	sp, #56	; 0x38
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f107 0214 	add.w	r2, r7, #20
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff fda5 	bl	8008108 <validate>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d107      	bne.n	80085dc <f_read+0x44>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	7d5b      	ldrb	r3, [r3, #21]
 80085d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80085d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <f_read+0x4a>
 80085dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085e0:	e135      	b.n	800884e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	7d1b      	ldrb	r3, [r3, #20]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <f_read+0x5a>
 80085ee:	2307      	movs	r3, #7
 80085f0:	e12d      	b.n	800884e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	429a      	cmp	r2, r3
 8008604:	f240 811e 	bls.w	8008844 <f_read+0x2ac>
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800860c:	e11a      	b.n	8008844 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	8992      	ldrh	r2, [r2, #12]
 8008616:	fbb3 f1f2 	udiv	r1, r3, r2
 800861a:	fb02 f201 	mul.w	r2, r2, r1
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 80d5 	bne.w	80087d0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	8992      	ldrh	r2, [r2, #12]
 800862e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	8952      	ldrh	r2, [r2, #10]
 8008636:	3a01      	subs	r2, #1
 8008638:	4013      	ands	r3, r2
 800863a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d12f      	bne.n	80086a2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
 8008650:	e013      	b.n	800867a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7fe fe25 	bl	80072b0 <clmt_clust>
 8008666:	6338      	str	r0, [r7, #48]	; 0x30
 8008668:	e007      	b.n	800867a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fe fb2f 	bl	8006cd6 <get_fat>
 8008678:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	2b01      	cmp	r3, #1
 800867e:	d804      	bhi.n	800868a <f_read+0xf2>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2202      	movs	r2, #2
 8008684:	755a      	strb	r2, [r3, #21]
 8008686:	2302      	movs	r3, #2
 8008688:	e0e1      	b.n	800884e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008690:	d104      	bne.n	800869c <f_read+0x104>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	755a      	strb	r2, [r3, #21]
 8008698:	2301      	movs	r3, #1
 800869a:	e0d8      	b.n	800884e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7fe faf4 	bl	8006c98 <clust2sect>
 80086b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <f_read+0x12a>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2202      	movs	r2, #2
 80086bc:	755a      	strb	r2, [r3, #21]
 80086be:	2302      	movs	r3, #2
 80086c0:	e0c5      	b.n	800884e <f_read+0x2b6>
			sect += csect;
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	899b      	ldrh	r3, [r3, #12]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d041      	beq.n	8008762 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	4413      	add	r3, r2
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	8952      	ldrh	r2, [r2, #10]
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d905      	bls.n	80086f8 <f_read+0x160>
					cc = fs->csize - csect;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	461a      	mov	r2, r3
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	7858      	ldrb	r0, [r3, #1]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008702:	f7fd ff1d 	bl	8006540 <disk_read>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <f_read+0x17e>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	755a      	strb	r2, [r3, #21]
 8008712:	2301      	movs	r3, #1
 8008714:	e09b      	b.n	800884e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	7d1b      	ldrb	r3, [r3, #20]
 800871a:	b25b      	sxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	da18      	bge.n	8008752 <f_read+0x1ba>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1a      	ldr	r2, [r3, #32]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800872a:	429a      	cmp	r2, r3
 800872c:	d911      	bls.n	8008752 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1a      	ldr	r2, [r3, #32]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	8992      	ldrh	r2, [r2, #12]
 800873a:	fb02 f303 	mul.w	r3, r2, r3
 800873e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008740:	18d0      	adds	r0, r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	899b      	ldrh	r3, [r3, #12]
 800874c:	461a      	mov	r2, r3
 800874e:	f7fd ffd7 	bl	8006700 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008760:	e05c      	b.n	800881c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	429a      	cmp	r2, r3
 800876a:	d02e      	beq.n	80087ca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	7d1b      	ldrb	r3, [r3, #20]
 8008770:	b25b      	sxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	da18      	bge.n	80087a8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	7858      	ldrb	r0, [r3, #1]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	2301      	movs	r3, #1
 8008786:	f7fd fefb 	bl	8006580 <disk_write>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <f_read+0x202>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	755a      	strb	r2, [r3, #21]
 8008796:	2301      	movs	r3, #1
 8008798:	e059      	b.n	800884e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	7d1b      	ldrb	r3, [r3, #20]
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	7858      	ldrb	r0, [r3, #1]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087b2:	2301      	movs	r3, #1
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	f7fd fec3 	bl	8006540 <disk_read>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <f_read+0x232>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	755a      	strb	r2, [r3, #21]
 80087c6:	2301      	movs	r3, #1
 80087c8:	e041      	b.n	800884e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	899b      	ldrh	r3, [r3, #12]
 80087d4:	4618      	mov	r0, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	8992      	ldrh	r2, [r2, #12]
 80087de:	fbb3 f1f2 	udiv	r1, r3, r2
 80087e2:	fb02 f201 	mul.w	r2, r2, r1
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	1ac3      	subs	r3, r0, r3
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d901      	bls.n	80087f8 <f_read+0x260>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	8992      	ldrh	r2, [r2, #12]
 8008806:	fbb3 f0f2 	udiv	r0, r3, r2
 800880a:	fb02 f200 	mul.w	r2, r2, r0
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	440b      	add	r3, r1
 8008812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008814:	4619      	mov	r1, r3
 8008816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008818:	f7fd ff72 	bl	8006700 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800881c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	4413      	add	r3, r2
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	619a      	str	r2, [r3, #24]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	441a      	add	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f47f aee1 	bne.w	800860e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3738      	adds	r7, #56	; 0x38
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b08c      	sub	sp, #48	; 0x30
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f107 0210 	add.w	r2, r7, #16
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fc46 	bl	8008108 <validate>
 800887c:	4603      	mov	r3, r0
 800887e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <f_write+0x44>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	7d5b      	ldrb	r3, [r3, #21]
 800888e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <f_write+0x4a>
 800889a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889e:	e16a      	b.n	8008b76 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	7d1b      	ldrb	r3, [r3, #20]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <f_write+0x5a>
 80088ac:	2307      	movs	r3, #7
 80088ae:	e162      	b.n	8008b76 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	699a      	ldr	r2, [r3, #24]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	441a      	add	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	429a      	cmp	r2, r3
 80088be:	f080 814c 	bcs.w	8008b5a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	43db      	mvns	r3, r3
 80088c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088ca:	e146      	b.n	8008b5a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	8992      	ldrh	r2, [r2, #12]
 80088d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d8:	fb02 f201 	mul.w	r2, r2, r1
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 80f1 	bne.w	8008ac6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	8992      	ldrh	r2, [r2, #12]
 80088ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	8952      	ldrh	r2, [r2, #10]
 80088f4:	3a01      	subs	r2, #1
 80088f6:	4013      	ands	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d143      	bne.n	8008988 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d11a      	bne.n	800894a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2100      	movs	r1, #0
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fc31 	bl	8007180 <create_chain>
 800891e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008920:	e013      	b.n	800894a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	4619      	mov	r1, r3
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7fe fcbd 	bl	80072b0 <clmt_clust>
 8008936:	62b8      	str	r0, [r7, #40]	; 0x28
 8008938:	e007      	b.n	800894a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fe fc1c 	bl	8007180 <create_chain>
 8008948:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8109 	beq.w	8008b64 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	2b01      	cmp	r3, #1
 8008956:	d104      	bne.n	8008962 <f_write+0x10c>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2202      	movs	r2, #2
 800895c:	755a      	strb	r2, [r3, #21]
 800895e:	2302      	movs	r3, #2
 8008960:	e109      	b.n	8008b76 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008968:	d104      	bne.n	8008974 <f_write+0x11e>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	755a      	strb	r2, [r3, #21]
 8008970:	2301      	movs	r3, #1
 8008972:	e100      	b.n	8008b76 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008978:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <f_write+0x132>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008986:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	7d1b      	ldrb	r3, [r3, #20]
 800898c:	b25b      	sxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	da18      	bge.n	80089c4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	7858      	ldrb	r0, [r3, #1]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	2301      	movs	r3, #1
 80089a2:	f7fd fded 	bl	8006580 <disk_write>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <f_write+0x160>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	755a      	strb	r2, [r3, #21]
 80089b2:	2301      	movs	r3, #1
 80089b4:	e0df      	b.n	8008b76 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f7fe f963 	bl	8006c98 <clust2sect>
 80089d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <f_write+0x18e>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2202      	movs	r2, #2
 80089de:	755a      	strb	r2, [r3, #21]
 80089e0:	2302      	movs	r3, #2
 80089e2:	e0c8      	b.n	8008b76 <f_write+0x320>
			sect += csect;
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4413      	add	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	899b      	ldrh	r3, [r3, #12]
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d043      	beq.n	8008a88 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	4413      	add	r3, r2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	8952      	ldrh	r2, [r2, #10]
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d905      	bls.n	8008a1a <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	895b      	ldrh	r3, [r3, #10]
 8008a12:	461a      	mov	r2, r3
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	7858      	ldrb	r0, [r3, #1]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	69f9      	ldr	r1, [r7, #28]
 8008a24:	f7fd fdac 	bl	8006580 <disk_write>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <f_write+0x1e2>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	755a      	strb	r2, [r3, #21]
 8008a34:	2301      	movs	r3, #1
 8008a36:	e09e      	b.n	8008b76 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a1a      	ldr	r2, [r3, #32]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d918      	bls.n	8008a78 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	8992      	ldrh	r2, [r2, #12]
 8008a58:	fb02 f303 	mul.w	r3, r2, r3
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	18d1      	adds	r1, r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	899b      	ldrh	r3, [r3, #12]
 8008a64:	461a      	mov	r2, r3
 8008a66:	f7fd fe4b 	bl	8006700 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7d1b      	ldrb	r3, [r3, #20]
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	899b      	ldrh	r3, [r3, #12]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	fb02 f303 	mul.w	r3, r2, r3
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a86:	e04b      	b.n	8008b20 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d016      	beq.n	8008ac0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d210      	bcs.n	8008ac0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	7858      	ldrb	r0, [r3, #1]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	f7fd fd48 	bl	8006540 <disk_read>
 8008ab0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	755a      	strb	r2, [r3, #21]
 8008abc:	2301      	movs	r3, #1
 8008abe:	e05a      	b.n	8008b76 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	4618      	mov	r0, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	8992      	ldrh	r2, [r2, #12]
 8008ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad8:	fb02 f201 	mul.w	r2, r2, r1
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	1ac3      	subs	r3, r0, r3
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d901      	bls.n	8008aee <f_write+0x298>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	8992      	ldrh	r2, [r2, #12]
 8008afc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b00:	fb02 f200 	mul.w	r2, r2, r0
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	440b      	add	r3, r1
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	69f9      	ldr	r1, [r7, #28]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fd fdf7 	bl	8006700 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	7d1b      	ldrb	r3, [r3, #20]
 8008b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	4413      	add	r3, r2
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	441a      	add	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	619a      	str	r2, [r3, #24]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	bf38      	it	cc
 8008b40:	461a      	movcc	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	60da      	str	r2, [r3, #12]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	441a      	add	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f aeb5 	bne.w	80088cc <f_write+0x76>
 8008b62:	e000      	b.n	8008b66 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3730      	adds	r7, #48	; 0x30
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f107 0208 	add.w	r2, r7, #8
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff faba 	bl	8008108 <validate>
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d168      	bne.n	8008c70 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7d1b      	ldrb	r3, [r3, #20]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d062      	beq.n	8008c70 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da15      	bge.n	8008be0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	7858      	ldrb	r0, [r3, #1]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1a      	ldr	r2, [r3, #32]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f7fd fcdc 	bl	8006580 <disk_write>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <f_sync+0x54>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e04f      	b.n	8008c72 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7d1b      	ldrb	r3, [r3, #20]
 8008bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008be0:	f7fd fa3a 	bl	8006058 <get_fattime>
 8008be4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fd ffb4 	bl	8006b5c <move_window>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d138      	bne.n	8008c70 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	330b      	adds	r3, #11
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	330b      	adds	r3, #11
 8008c0e:	f042 0220 	orr.w	r2, r2, #32
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68f9      	ldr	r1, [r7, #12]
 8008c22:	f7fe fd42 	bl	80076aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f103 021c 	add.w	r2, r3, #28
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f7fd fd38 	bl	80066a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3316      	adds	r3, #22
 8008c3c:	6939      	ldr	r1, [r7, #16]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fd fd32 	bl	80066a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3312      	adds	r3, #18
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd fd11 	bl	8006672 <st_word>
					fs->wflag = 1;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2201      	movs	r2, #1
 8008c54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fd ffad 	bl	8006bb8 <sync_fs>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7d1b      	ldrb	r3, [r3, #20]
 8008c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff7b 	bl	8008b7e <f_sync>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d118      	bne.n	8008cc4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f107 0208 	add.w	r2, r7, #8
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fa34 	bl	8008108 <validate>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10c      	bne.n	8008cc4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd feb0 	bl	8006a14 <dec_lock>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b090      	sub	sp, #64	; 0x40
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008cd8:	f107 010c 	add.w	r1, r7, #12
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ff8d 	bl	8007c00 <find_volume>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11f      	bne.n	8008d34 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f107 030c 	add.w	r3, r7, #12
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fe6f 	bl	80079e0 <follow_path>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d111      	bne.n	8008d34 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008d10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008d14:	b25b      	sxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da03      	bge.n	8008d22 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008d1a:	2306      	movs	r3, #6
 8008d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008d20:	e008      	b.n	8008d34 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <f_stat+0x66>
 8008d28:	f107 030c 	add.w	r3, r7, #12
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fd62 	bl	80077f8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3740      	adds	r7, #64	; 0x40
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b092      	sub	sp, #72	; 0x48
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008d4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d50:	f107 030c 	add.w	r3, r7, #12
 8008d54:	2200      	movs	r2, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe ff52 	bl	8007c00 <find_volume>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008d62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 8099 	bne.w	8008e9e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	695a      	ldr	r2, [r3, #20]
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	3b02      	subs	r3, #2
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d804      	bhi.n	8008d8a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	e089      	b.n	8008e9e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d128      	bne.n	8008de8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d96:	2302      	movs	r3, #2
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd ff96 	bl	8006cd6 <get_fat>
 8008daa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db2:	d103      	bne.n	8008dbc <f_getfree+0x7c>
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dba:	e063      	b.n	8008e84 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d103      	bne.n	8008dca <f_getfree+0x8a>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dc8:	e05c      	b.n	8008e84 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <f_getfree+0x96>
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd8:	3301      	adds	r3, #1
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3db      	bcc.n	8008d9e <f_getfree+0x5e>
 8008de6:	e04d      	b.n	8008e84 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
 8008df8:	2300      	movs	r3, #0
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d113      	bne.n	8008e2a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	f7fd fea6 	bl	8006b5c <move_window>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d131      	bne.n	8008e82 <f_getfree+0x142>
							p = fs->win;
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	3334      	adds	r3, #52	; 0x34
 8008e22:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	899b      	ldrh	r3, [r3, #12]
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d10f      	bne.n	8008e52 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e34:	f7fd fbe2 	bl	80065fc <ld_word>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <f_getfree+0x104>
 8008e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e40:	3301      	adds	r3, #1
 8008e42:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3302      	adds	r3, #2
 8008e48:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4c:	3b02      	subs	r3, #2
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e50:	e010      	b.n	8008e74 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e54:	f7fd fbea 	bl	800662c <ld_dword>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <f_getfree+0x128>
 8008e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e64:	3301      	adds	r3, #1
 8008e66:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e70:	3b04      	subs	r3, #4
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e76:	3b01      	subs	r3, #1
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1bd      	bne.n	8008dfc <f_getfree+0xbc>
 8008e80:	e000      	b.n	8008e84 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e82:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e88:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e8e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	791a      	ldrb	r2, [r3, #4]
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3748      	adds	r7, #72	; 0x48
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b096      	sub	sp, #88	; 0x58
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008eb2:	f107 0108 	add.w	r1, r7, #8
 8008eb6:	1d3b      	adds	r3, r7, #4
 8008eb8:	2202      	movs	r2, #2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fea0 	bl	8007c00 <find_volume>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 80f2 	bne.w	80090b8 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fd7f 	bl	80079e0 <follow_path>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <f_mkdir+0x4c>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8008ef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	f040 80dc 	bne.w	80090b8 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	2100      	movs	r1, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f93a 	bl	8007180 <create_chain>
 8008f0c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	895b      	ldrh	r3, [r3, #10]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	899b      	ldrh	r3, [r3, #12]
 8008f18:	fb03 f302 	mul.w	r3, r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d102      	bne.n	8008f30 <f_mkdir+0x86>
 8008f2a:	2307      	movs	r3, #7
 8008f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8008f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d102      	bne.n	8008f3c <f_mkdir+0x92>
 8008f36:	2302      	movs	r3, #2
 8008f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f42:	d102      	bne.n	8008f4a <f_mkdir+0xa0>
 8008f44:	2301      	movs	r3, #1
 8008f46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8008f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <f_mkdir+0xb6>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fd fdbd 	bl	8006ad4 <sync_window>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8008f60:	f7fd f87a 	bl	8006058 <get_fattime>
 8008f64:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8008f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d16c      	bne.n	8009048 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd fe90 	bl	8006c98 <clust2sect>
 8008f78:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3334      	adds	r3, #52	; 0x34
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	899b      	ldrh	r3, [r3, #12]
 8008f84:	461a      	mov	r2, r3
 8008f86:	2100      	movs	r1, #0
 8008f88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f8a:	f7fd fbda 	bl	8006742 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8008f8e:	220b      	movs	r2, #11
 8008f90:	2120      	movs	r1, #32
 8008f92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f94:	f7fd fbd5 	bl	8006742 <mem_set>
					dir[DIR_Name] = '.';
 8008f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9a:	222e      	movs	r2, #46	; 0x2e
 8008f9c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa0:	330b      	adds	r3, #11
 8008fa2:	2210      	movs	r2, #16
 8008fa4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa8:	3316      	adds	r3, #22
 8008faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd fb7b 	bl	80066a8 <st_dword>
					st_clust(fs, dir, dcl);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fb76 	bl	80076aa <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc0:	3320      	adds	r3, #32
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd fb9a 	bl	8006700 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fce:	3321      	adds	r3, #33	; 0x21
 8008fd0:	222e      	movs	r2, #46	; 0x2e
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d106      	bne.n	8008fee <f_mkdir+0x144>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d101      	bne.n	8008fee <f_mkdir+0x144>
 8008fea:	2300      	movs	r3, #0
 8008fec:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	3320      	adds	r3, #32
 8008ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f7fe fb57 	bl	80076aa <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	895b      	ldrh	r3, [r3, #10]
 8009000:	653b      	str	r3, [r7, #80]	; 0x50
 8009002:	e01c      	b.n	800903e <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	64fa      	str	r2, [r7, #76]	; 0x4c
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2201      	movs	r2, #1
 8009012:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd fd5c 	bl	8006ad4 <sync_window>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8009022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10d      	bne.n	8009046 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	899b      	ldrh	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	2100      	movs	r1, #0
 8009032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009034:	f7fd fb85 	bl	8006742 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903a:	3b01      	subs	r3, #1
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
 800903e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1df      	bne.n	8009004 <f_mkdir+0x15a>
 8009044:	e000      	b.n	8009048 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009046:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800904c:	2b00      	cmp	r3, #0
 800904e:	d107      	bne.n	8009060 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009050:	f107 030c 	add.w	r3, r7, #12
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fb9d 	bl	8007794 <dir_register>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8009060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009064:	2b00      	cmp	r3, #0
 8009066:	d120      	bne.n	80090aa <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906e:	3316      	adds	r3, #22
 8009070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009072:	4618      	mov	r0, r3
 8009074:	f7fd fb18 	bl	80066a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800907c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fb13 	bl	80076aa <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	330b      	adds	r3, #11
 8009088:	2210      	movs	r2, #16
 800908a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2201      	movs	r2, #1
 8009090:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10e      	bne.n	80090b8 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4618      	mov	r0, r3
 800909e:	f7fd fd8b 	bl	8006bb8 <sync_fs>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80090a8:	e006      	b.n	80090b8 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	2200      	movs	r2, #0
 80090b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd ffff 	bl	80070b6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80090b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3758      	adds	r7, #88	; 0x58
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b09d      	sub	sp, #116	; 0x74
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	460b      	mov	r3, r1
 80090d2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80090d4:	2301      	movs	r3, #1
 80090d6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80090d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090dc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fcf2 	bl	8007acc <get_ldnumber>
 80090e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	da02      	bge.n	80090f6 <f_mkfs+0x32>
 80090f0:	230b      	movs	r3, #11
 80090f2:	f000 bc31 	b.w	8009958 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80090f6:	4aa5      	ldr	r2, [pc, #660]	; (800938c <f_mkfs+0x2c8>)
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <f_mkfs+0x4a>
 8009102:	4aa2      	ldr	r2, [pc, #648]	; (800938c <f_mkfs+0x2c8>)
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009114:	2300      	movs	r3, #0
 8009116:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800911a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800911e:	4618      	mov	r0, r3
 8009120:	f7fd f9e8 	bl	80064f4 <disk_initialize>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800912a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <f_mkfs+0x78>
 8009136:	2303      	movs	r3, #3
 8009138:	f000 bc0e 	b.w	8009958 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800913c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <f_mkfs+0x8a>
 8009148:	230a      	movs	r3, #10
 800914a:	f000 bc05 	b.w	8009958 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800914e:	f107 0214 	add.w	r2, r7, #20
 8009152:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009156:	2103      	movs	r1, #3
 8009158:	4618      	mov	r0, r3
 800915a:	f7fd fa31 	bl	80065c0 <disk_ioctl>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10c      	bne.n	800917e <f_mkfs+0xba>
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <f_mkfs+0xba>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009170:	d805      	bhi.n	800917e <f_mkfs+0xba>
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	1e5a      	subs	r2, r3, #1
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <f_mkfs+0xbe>
 800917e:	2301      	movs	r3, #1
 8009180:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8009182:	f107 021a 	add.w	r2, r7, #26
 8009186:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800918a:	2102      	movs	r1, #2
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fa17 	bl	80065c0 <disk_ioctl>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <f_mkfs+0xd8>
 8009198:	2301      	movs	r3, #1
 800919a:	e3dd      	b.n	8009958 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800919c:	8b7b      	ldrh	r3, [r7, #26]
 800919e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a2:	d80a      	bhi.n	80091ba <f_mkfs+0xf6>
 80091a4:	8b7b      	ldrh	r3, [r7, #26]
 80091a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091aa:	d306      	bcc.n	80091ba <f_mkfs+0xf6>
 80091ac:	8b7b      	ldrh	r3, [r7, #26]
 80091ae:	461a      	mov	r2, r3
 80091b0:	8b7b      	ldrh	r3, [r7, #26]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <f_mkfs+0xfa>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e3cc      	b.n	8009958 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <f_mkfs+0x10a>
 80091c4:	8b7b      	ldrh	r3, [r7, #26]
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d309      	bcc.n	80091e2 <f_mkfs+0x11e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091d4:	d805      	bhi.n	80091e2 <f_mkfs+0x11e>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4013      	ands	r3, r2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <f_mkfs+0x122>
 80091e2:	2313      	movs	r3, #19
 80091e4:	e3b8      	b.n	8009958 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 80091e6:	8b7b      	ldrh	r3, [r7, #26]
 80091e8:	461a      	mov	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f0:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80091f6:	8b7b      	ldrh	r3, [r7, #26]
 80091f8:	461a      	mov	r2, r3
 80091fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009204:	8b7b      	ldrh	r3, [r7, #26]
 8009206:	461a      	mov	r2, r3
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	fb02 f303 	mul.w	r3, r2, r3
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <f_mkfs+0x156>
 8009216:	230e      	movs	r3, #14
 8009218:	e39e      	b.n	8009958 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800921a:	f107 0210 	add.w	r2, r7, #16
 800921e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009222:	2101      	movs	r1, #1
 8009224:	4618      	mov	r0, r3
 8009226:	f7fd f9cb 	bl	80065c0 <disk_ioctl>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <f_mkfs+0x170>
 8009230:	2301      	movs	r3, #1
 8009232:	e391      	b.n	8009958 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <f_mkfs+0x17e>
 800923e:	2300      	movs	r3, #0
 8009240:	e000      	b.n	8009244 <f_mkfs+0x180>
 8009242:	233f      	movs	r3, #63	; 0x3f
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800924a:	429a      	cmp	r2, r3
 800924c:	d901      	bls.n	8009252 <f_mkfs+0x18e>
 800924e:	230e      	movs	r3, #14
 8009250:	e382      	b.n	8009958 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b7f      	cmp	r3, #127	; 0x7f
 800925e:	d801      	bhi.n	8009264 <f_mkfs+0x1a0>
 8009260:	230e      	movs	r3, #14
 8009262:	e379      	b.n	8009958 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b80      	cmp	r3, #128	; 0x80
 8009268:	d901      	bls.n	800926e <f_mkfs+0x1aa>
 800926a:	2313      	movs	r3, #19
 800926c:	e374      	b.n	8009958 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00d      	beq.n	8009294 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b02      	cmp	r3, #2
 8009280:	d004      	beq.n	800928c <f_mkfs+0x1c8>
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800928c:	2303      	movs	r3, #3
 800928e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009292:	e009      	b.n	80092a8 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <f_mkfs+0x1de>
 800929e:	2313      	movs	r3, #19
 80092a0:	e35a      	b.n	8009958 <f_mkfs+0x894>
		fmt = FS_FAT16;
 80092a2:	2302      	movs	r3, #2
 80092a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80092ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d13c      	bne.n	800932e <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 80092b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11b      	bne.n	80092f2 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	0c5b      	lsrs	r3, r3, #17
 80092be:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80092c0:	2300      	movs	r3, #0
 80092c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092c4:	2301      	movs	r3, #1
 80092c6:	653b      	str	r3, [r7, #80]	; 0x50
 80092c8:	e005      	b.n	80092d6 <f_mkfs+0x212>
 80092ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092cc:	3301      	adds	r3, #1
 80092ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
 80092d6:	4a2e      	ldr	r2, [pc, #184]	; (8009390 <f_mkfs+0x2cc>)
 80092d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <f_mkfs+0x22e>
 80092e2:	4a2b      	ldr	r2, [pc, #172]	; (8009390 <f_mkfs+0x2cc>)
 80092e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d2eb      	bcs.n	80092ca <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	3302      	adds	r3, #2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	8b7a      	ldrh	r2, [r7, #26]
 8009304:	4413      	add	r3, r2
 8009306:	3b01      	subs	r3, #1
 8009308:	8b7a      	ldrh	r2, [r7, #26]
 800930a:	fbb3 f3f2 	udiv	r3, r3, r2
 800930e:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009310:	2320      	movs	r3, #32
 8009312:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8009314:	2300      	movs	r3, #0
 8009316:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800931e:	4293      	cmp	r3, r2
 8009320:	d903      	bls.n	800932a <f_mkfs+0x266>
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	4a1b      	ldr	r2, [pc, #108]	; (8009394 <f_mkfs+0x2d0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d954      	bls.n	80093d4 <f_mkfs+0x310>
 800932a:	230e      	movs	r3, #14
 800932c:	e314      	b.n	8009958 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800932e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009330:	2b00      	cmp	r3, #0
 8009332:	d11b      	bne.n	800936c <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	0b1b      	lsrs	r3, r3, #12
 8009338:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800933a:	2300      	movs	r3, #0
 800933c:	64bb      	str	r3, [r7, #72]	; 0x48
 800933e:	2301      	movs	r3, #1
 8009340:	653b      	str	r3, [r7, #80]	; 0x50
 8009342:	e005      	b.n	8009350 <f_mkfs+0x28c>
 8009344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009346:	3301      	adds	r3, #1
 8009348:	64bb      	str	r3, [r7, #72]	; 0x48
 800934a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	653b      	str	r3, [r7, #80]	; 0x50
 8009350:	4a11      	ldr	r2, [pc, #68]	; (8009398 <f_mkfs+0x2d4>)
 8009352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d007      	beq.n	800936c <f_mkfs+0x2a8>
 800935c:	4a0e      	ldr	r2, [pc, #56]	; (8009398 <f_mkfs+0x2d4>)
 800935e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009364:	461a      	mov	r2, r3
 8009366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009368:	4293      	cmp	r3, r2
 800936a:	d2eb      	bcs.n	8009344 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	fbb2 f3f3 	udiv	r3, r2, r3
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	f640 72f5 	movw	r2, #4085	; 0xff5
 800937c:	4293      	cmp	r3, r2
 800937e:	d90d      	bls.n	800939c <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	3302      	adds	r3, #2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009388:	e013      	b.n	80093b2 <f_mkfs+0x2ee>
 800938a:	bf00      	nop
 800938c:	2000009c 	.word	0x2000009c
 8009390:	0800b494 	.word	0x0800b494
 8009394:	0ffffff5 	.word	0x0ffffff5
 8009398:	0800b4a4 	.word	0x0800b4a4
				} else {
					fmt = FS_FAT12;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80093a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a4:	4613      	mov	r3, r2
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	4413      	add	r3, r2
 80093aa:	3301      	adds	r3, #1
 80093ac:	085b      	lsrs	r3, r3, #1
 80093ae:	3303      	adds	r3, #3
 80093b0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80093b2:	8b7b      	ldrh	r3, [r7, #26]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b8:	4413      	add	r3, r2
 80093ba:	3b01      	subs	r3, #1
 80093bc:	8b7a      	ldrh	r2, [r7, #26]
 80093be:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c2:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80093c4:	2301      	movs	r3, #1
 80093c6:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80093c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ca:	015b      	lsls	r3, r3, #5
 80093cc:	8b7a      	ldrh	r2, [r7, #26]
 80093ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d2:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80093d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d8:	4413      	add	r3, r2
 80093da:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80093dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093e0:	fb02 f203 	mul.w	r2, r2, r3
 80093e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093e6:	4413      	add	r3, r2
 80093e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093ea:	4413      	add	r3, r2
 80093ec:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	4413      	add	r3, r2
 80093f4:	1e5a      	subs	r2, r3, #1
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	425b      	negs	r3, r3
 80093fa:	401a      	ands	r2, r3
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009402:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009406:	2b03      	cmp	r3, #3
 8009408:	d108      	bne.n	800941c <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800940a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800940c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940e:	4413      	add	r3, r2
 8009410:	657b      	str	r3, [r7, #84]	; 0x54
 8009412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009416:	4413      	add	r3, r2
 8009418:	65bb      	str	r3, [r7, #88]	; 0x58
 800941a:	e006      	b.n	800942a <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800941c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800941e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009420:	fbb2 f3f3 	udiv	r3, r2, r3
 8009424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009426:	4413      	add	r3, r2
 8009428:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800942a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942c:	011a      	lsls	r2, r3, #4
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	441a      	add	r2, r3
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	1ad2      	subs	r2, r2, r3
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	429a      	cmp	r2, r3
 800943a:	d901      	bls.n	8009440 <f_mkfs+0x37c>
 800943c:	230e      	movs	r3, #14
 800943e:	e28b      	b.n	8009958 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009444:	1ad2      	subs	r2, r2, r3
 8009446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009448:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800944a:	fb01 f303 	mul.w	r3, r1, r3
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009456:	fbb2 f3f3 	udiv	r3, r2, r3
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800945c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009460:	2b03      	cmp	r3, #3
 8009462:	d10f      	bne.n	8009484 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800946a:	4293      	cmp	r3, r2
 800946c:	d80a      	bhi.n	8009484 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <f_mkfs+0x3bc>
 8009474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	607b      	str	r3, [r7, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d144      	bne.n	800950a <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8009480:	230e      	movs	r3, #14
 8009482:	e269      	b.n	8009958 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8009484:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009488:	2b02      	cmp	r3, #2
 800948a:	d133      	bne.n	80094f4 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009492:	4293      	cmp	r3, r2
 8009494:	d91e      	bls.n	80094d4 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d107      	bne.n	80094ac <f_mkfs+0x3e8>
 800949c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d803      	bhi.n	80094ac <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80094a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	e033      	b.n	8009514 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80094b6:	2303      	movs	r3, #3
 80094b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80094bc:	e02a      	b.n	8009514 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <f_mkfs+0x40c>
 80094c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b80      	cmp	r3, #128	; 0x80
 80094ce:	d91e      	bls.n	800950e <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 80094d0:	230e      	movs	r3, #14
 80094d2:	e241      	b.n	8009958 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80094da:	4293      	cmp	r3, r2
 80094dc:	d80a      	bhi.n	80094f4 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <f_mkfs+0x42c>
 80094e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b80      	cmp	r3, #128	; 0x80
 80094ee:	d910      	bls.n	8009512 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 80094f0:	230e      	movs	r3, #14
 80094f2:	e231      	b.n	8009958 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80094f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d10c      	bne.n	8009516 <f_mkfs+0x452>
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009502:	4293      	cmp	r3, r2
 8009504:	d907      	bls.n	8009516 <f_mkfs+0x452>
 8009506:	230e      	movs	r3, #14
 8009508:	e226      	b.n	8009958 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800950a:	bf00      	nop
 800950c:	e6cc      	b.n	80092a8 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800950e:	bf00      	nop
 8009510:	e6ca      	b.n	80092a8 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009512:	bf00      	nop
			pau = au;
 8009514:	e6c8      	b.n	80092a8 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8009516:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009518:	8b7b      	ldrh	r3, [r7, #26]
 800951a:	461a      	mov	r2, r3
 800951c:	2100      	movs	r1, #0
 800951e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009520:	f7fd f90f 	bl	8006742 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009524:	220b      	movs	r2, #11
 8009526:	49bd      	ldr	r1, [pc, #756]	; (800981c <f_mkfs+0x758>)
 8009528:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800952a:	f7fd f8e9 	bl	8006700 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	330b      	adds	r3, #11
 8009532:	8b7a      	ldrh	r2, [r7, #26]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd f89b 	bl	8006672 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	330d      	adds	r3, #13
 8009540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009548:	330e      	adds	r3, #14
 800954a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800954c:	b292      	uxth	r2, r2
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7fd f88e 	bl	8006672 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	3310      	adds	r3, #16
 800955a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	f103 0211 	add.w	r2, r3, #17
 8009566:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800956a:	2b03      	cmp	r3, #3
 800956c:	d002      	beq.n	8009574 <f_mkfs+0x4b0>
 800956e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009570:	b29b      	uxth	r3, r3
 8009572:	e000      	b.n	8009576 <f_mkfs+0x4b2>
 8009574:	2300      	movs	r3, #0
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fd f87a 	bl	8006672 <st_word>
		if (sz_vol < 0x10000) {
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009584:	d208      	bcs.n	8009598 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009588:	3313      	adds	r3, #19
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	b292      	uxth	r2, r2
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7fd f86e 	bl	8006672 <st_word>
 8009596:	e006      	b.n	80095a6 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	3320      	adds	r3, #32
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4611      	mov	r1, r2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fd f881 	bl	80066a8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	3315      	adds	r3, #21
 80095aa:	22f8      	movs	r2, #248	; 0xf8
 80095ac:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	3318      	adds	r3, #24
 80095b2:	213f      	movs	r1, #63	; 0x3f
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fd f85c 	bl	8006672 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	331a      	adds	r3, #26
 80095be:	21ff      	movs	r1, #255	; 0xff
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd f856 	bl	8006672 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	331c      	adds	r3, #28
 80095ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd f86b 	bl	80066a8 <st_dword>
		if (fmt == FS_FAT32) {
 80095d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d131      	bne.n	800963e <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80095da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095dc:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80095e0:	f7fc fd3a 	bl	8006058 <get_fattime>
 80095e4:	4603      	mov	r3, r0
 80095e6:	4619      	mov	r1, r3
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7fd f85d 	bl	80066a8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	3324      	adds	r3, #36	; 0x24
 80095f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fd f857 	bl	80066a8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80095fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fc:	332c      	adds	r3, #44	; 0x2c
 80095fe:	2102      	movs	r1, #2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fd f851 	bl	80066a8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	3330      	adds	r3, #48	; 0x30
 800960a:	2101      	movs	r1, #1
 800960c:	4618      	mov	r0, r3
 800960e:	f7fd f830 	bl	8006672 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009614:	3332      	adds	r3, #50	; 0x32
 8009616:	2106      	movs	r1, #6
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd f82a 	bl	8006672 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800961e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009620:	3340      	adds	r3, #64	; 0x40
 8009622:	2280      	movs	r2, #128	; 0x80
 8009624:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	3342      	adds	r3, #66	; 0x42
 800962a:	2229      	movs	r2, #41	; 0x29
 800962c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800962e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009630:	3347      	adds	r3, #71	; 0x47
 8009632:	2213      	movs	r2, #19
 8009634:	497a      	ldr	r1, [pc, #488]	; (8009820 <f_mkfs+0x75c>)
 8009636:	4618      	mov	r0, r3
 8009638:	f7fd f862 	bl	8006700 <mem_cpy>
 800963c:	e020      	b.n	8009680 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009644:	f7fc fd08 	bl	8006058 <get_fattime>
 8009648:	4603      	mov	r3, r0
 800964a:	4619      	mov	r1, r3
 800964c:	4620      	mov	r0, r4
 800964e:	f7fd f82b 	bl	80066a8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	3316      	adds	r3, #22
 8009656:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009658:	b292      	uxth	r2, r2
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd f808 	bl	8006672 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009664:	3324      	adds	r3, #36	; 0x24
 8009666:	2280      	movs	r2, #128	; 0x80
 8009668:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	3326      	adds	r3, #38	; 0x26
 800966e:	2229      	movs	r2, #41	; 0x29
 8009670:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009674:	332b      	adds	r3, #43	; 0x2b
 8009676:	2213      	movs	r2, #19
 8009678:	496a      	ldr	r1, [pc, #424]	; (8009824 <f_mkfs+0x760>)
 800967a:	4618      	mov	r0, r3
 800967c:	f7fd f840 	bl	8006700 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009686:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800968a:	4618      	mov	r0, r3
 800968c:	f7fc fff1 	bl	8006672 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8009690:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009694:	2301      	movs	r3, #1
 8009696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800969a:	f7fc ff71 	bl	8006580 <disk_write>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <f_mkfs+0x5e4>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e157      	b.n	8009958 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80096a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d140      	bne.n	8009732 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	1d9a      	adds	r2, r3, #6
 80096b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80096b8:	2301      	movs	r3, #1
 80096ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096bc:	f7fc ff60 	bl	8006580 <disk_write>
			mem_set(buf, 0, ss);
 80096c0:	8b7b      	ldrh	r3, [r7, #26]
 80096c2:	461a      	mov	r2, r3
 80096c4:	2100      	movs	r1, #0
 80096c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80096c8:	f7fd f83b 	bl	8006742 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80096cc:	4956      	ldr	r1, [pc, #344]	; (8009828 <f_mkfs+0x764>)
 80096ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80096d0:	f7fc ffea 	bl	80066a8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80096da:	4954      	ldr	r1, [pc, #336]	; (800982c <f_mkfs+0x768>)
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fc ffe3 	bl	80066a8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80096e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	3b01      	subs	r3, #1
 80096ec:	4619      	mov	r1, r3
 80096ee:	4610      	mov	r0, r2
 80096f0:	f7fc ffda 	bl	80066a8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80096fa:	2102      	movs	r1, #2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fc ffd3 	bl	80066a8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009708:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800970c:	4618      	mov	r0, r3
 800970e:	f7fc ffb0 	bl	8006672 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	1dda      	adds	r2, r3, #7
 8009716:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800971a:	2301      	movs	r3, #1
 800971c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800971e:	f7fc ff2f 	bl	8006580 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800972a:	2301      	movs	r3, #1
 800972c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800972e:	f7fc ff27 	bl	8006580 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009734:	2100      	movs	r1, #0
 8009736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009738:	f7fd f803 	bl	8006742 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800973c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800973e:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009740:	2300      	movs	r3, #0
 8009742:	64bb      	str	r3, [r7, #72]	; 0x48
 8009744:	e04b      	b.n	80097de <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8009746:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800974a:	2b03      	cmp	r3, #3
 800974c:	d113      	bne.n	8009776 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800974e:	f06f 0107 	mvn.w	r1, #7
 8009752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009754:	f7fc ffa8 	bl	80066a8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	3304      	adds	r3, #4
 800975c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009760:	4618      	mov	r0, r3
 8009762:	f7fc ffa1 	bl	80066a8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	3308      	adds	r3, #8
 800976a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800976e:	4618      	mov	r0, r3
 8009770:	f7fc ff9a 	bl	80066a8 <st_dword>
 8009774:	e00b      	b.n	800978e <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8009776:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <f_mkfs+0x6be>
 800977e:	4b2c      	ldr	r3, [pc, #176]	; (8009830 <f_mkfs+0x76c>)
 8009780:	e001      	b.n	8009786 <f_mkfs+0x6c2>
 8009782:	f06f 0307 	mvn.w	r3, #7
 8009786:	4619      	mov	r1, r3
 8009788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800978a:	f7fc ff8d 	bl	80066a8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800978e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009790:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8009792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	4293      	cmp	r3, r2
 8009798:	bf28      	it	cs
 800979a:	4613      	movcs	r3, r2
 800979c:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800979e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80097a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097a8:	f7fc feea 	bl	8006580 <disk_write>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <f_mkfs+0x6f2>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e0d0      	b.n	8009958 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 80097b6:	8b7b      	ldrh	r3, [r7, #26]
 80097b8:	461a      	mov	r2, r3
 80097ba:	2100      	movs	r1, #0
 80097bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097be:	f7fc ffc0 	bl	8006742 <mem_set>
				sect += n; nsect -= n;
 80097c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097c6:	4413      	add	r3, r2
 80097c8:	667b      	str	r3, [r7, #100]	; 0x64
 80097ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80097d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1dc      	bne.n	8009792 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80097d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097da:	3301      	adds	r3, #1
 80097dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80097de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d3af      	bcc.n	8009746 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80097e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d101      	bne.n	80097f2 <f_mkfs+0x72e>
 80097ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097f0:	e000      	b.n	80097f4 <f_mkfs+0x730>
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80097f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bf28      	it	cs
 80097fe:	4613      	movcs	r3, r2
 8009800:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009802:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009808:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800980a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800980c:	f7fc feb8 	bl	8006580 <disk_write>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <f_mkfs+0x770>
 8009816:	2301      	movs	r3, #1
 8009818:	e09e      	b.n	8009958 <f_mkfs+0x894>
 800981a:	bf00      	nop
 800981c:	0800b3ac 	.word	0x0800b3ac
 8009820:	0800b3b8 	.word	0x0800b3b8
 8009824:	0800b3cc 	.word	0x0800b3cc
 8009828:	41615252 	.word	0x41615252
 800982c:	61417272 	.word	0x61417272
 8009830:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8009834:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009838:	4413      	add	r3, r2
 800983a:	667b      	str	r3, [r7, #100]	; 0x64
 800983c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800983e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8009844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1d5      	bne.n	80097f6 <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800984a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800984e:	2b03      	cmp	r3, #3
 8009850:	d103      	bne.n	800985a <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8009852:	230c      	movs	r3, #12
 8009854:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009858:	e010      	b.n	800987c <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009860:	d303      	bcc.n	800986a <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8009862:	2306      	movs	r3, #6
 8009864:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009868:	e008      	b.n	800987c <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800986a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800986e:	2b02      	cmp	r3, #2
 8009870:	d101      	bne.n	8009876 <f_mkfs+0x7b2>
 8009872:	2304      	movs	r3, #4
 8009874:	e000      	b.n	8009878 <f_mkfs+0x7b4>
 8009876:	2301      	movs	r3, #1
 8009878:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	f003 0308 	and.w	r3, r3, #8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d15b      	bne.n	800993e <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 8009886:	8b7b      	ldrh	r3, [r7, #26]
 8009888:	461a      	mov	r2, r3
 800988a:	2100      	movs	r1, #0
 800988c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800988e:	f7fc ff58 	bl	8006742 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8009892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009894:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009898:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800989c:	4618      	mov	r0, r3
 800989e:	f7fc fee8 	bl	8006672 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80098a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80098a8:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	3301      	adds	r3, #1
 80098b4:	2201      	movs	r2, #1
 80098b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	3302      	adds	r3, #2
 80098bc:	2201      	movs	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	3303      	adds	r3, #3
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	3304      	adds	r3, #4
 80098cc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80098d0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	441a      	add	r2, r3
 80098d8:	4b21      	ldr	r3, [pc, #132]	; (8009960 <f_mkfs+0x89c>)
 80098da:	fba3 1302 	umull	r1, r3, r3, r2
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	0852      	lsrs	r2, r2, #1
 80098e2:	4413      	add	r3, r2
 80098e4:	0b5b      	lsrs	r3, r3, #13
 80098e6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	3305      	adds	r3, #5
 80098ec:	22fe      	movs	r2, #254	; 0xfe
 80098ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80098f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098f2:	089b      	lsrs	r3, r3, #2
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3306      	adds	r3, #6
 80098fa:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80098fe:	b2d2      	uxtb	r2, r2
 8009900:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	3307      	adds	r3, #7
 8009906:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	3308      	adds	r3, #8
 8009910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009912:	4618      	mov	r0, r3
 8009914:	f7fc fec8 	bl	80066a8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	330c      	adds	r3, #12
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f7fc fec1 	bl	80066a8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009926:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800992a:	2301      	movs	r3, #1
 800992c:	2200      	movs	r2, #0
 800992e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009930:	f7fc fe26 	bl	8006580 <disk_write>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <f_mkfs+0x87a>
 800993a:	2301      	movs	r3, #1
 800993c:	e00c      	b.n	8009958 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800993e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009942:	2200      	movs	r2, #0
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f7fc fe3a 	bl	80065c0 <disk_ioctl>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <f_mkfs+0x892>
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <f_mkfs+0x894>

	return FR_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3774      	adds	r7, #116	; 0x74
 800995c:	46bd      	mov	sp, r7
 800995e:	bd90      	pop	{r4, r7, pc}
 8009960:	0515565b 	.word	0x0515565b

08009964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009972:	2301      	movs	r3, #1
 8009974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800997a:	4b1f      	ldr	r3, [pc, #124]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 800997c:	7a5b      	ldrb	r3, [r3, #9]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d131      	bne.n	80099e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009984:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 8009986:	7a5b      	ldrb	r3, [r3, #9]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	4b1a      	ldr	r3, [pc, #104]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 800998e:	2100      	movs	r1, #0
 8009990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009992:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 8009994:	7a5b      	ldrb	r3, [r3, #9]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 80099a4:	7a5b      	ldrb	r3, [r3, #9]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 80099ac:	4413      	add	r3, r2
 80099ae:	79fa      	ldrb	r2, [r7, #7]
 80099b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099b2:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 80099b4:	7a5b      	ldrb	r3, [r3, #9]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	b2d1      	uxtb	r1, r2
 80099bc:	4a0e      	ldr	r2, [pc, #56]	; (80099f8 <FATFS_LinkDriverEx+0x94>)
 80099be:	7251      	strb	r1, [r2, #9]
 80099c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099c2:	7dbb      	ldrb	r3, [r7, #22]
 80099c4:	3330      	adds	r3, #48	; 0x30
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	3301      	adds	r3, #1
 80099d0:	223a      	movs	r2, #58	; 0x3a
 80099d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3302      	adds	r3, #2
 80099d8:	222f      	movs	r2, #47	; 0x2f
 80099da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	3303      	adds	r3, #3
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	200000c4 	.word	0x200000c4

080099fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a06:	2200      	movs	r2, #0
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff ffaa 	bl	8009964 <FATFS_LinkDriverEx>
 8009a10:	4603      	mov	r3, r0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <__errno>:
 8009a1c:	4b01      	ldr	r3, [pc, #4]	; (8009a24 <__errno+0x8>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	2000000c 	.word	0x2000000c

08009a28 <__libc_init_array>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	4d0d      	ldr	r5, [pc, #52]	; (8009a60 <__libc_init_array+0x38>)
 8009a2c:	4c0d      	ldr	r4, [pc, #52]	; (8009a64 <__libc_init_array+0x3c>)
 8009a2e:	1b64      	subs	r4, r4, r5
 8009a30:	10a4      	asrs	r4, r4, #2
 8009a32:	2600      	movs	r6, #0
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	d109      	bne.n	8009a4c <__libc_init_array+0x24>
 8009a38:	4d0b      	ldr	r5, [pc, #44]	; (8009a68 <__libc_init_array+0x40>)
 8009a3a:	4c0c      	ldr	r4, [pc, #48]	; (8009a6c <__libc_init_array+0x44>)
 8009a3c:	f001 f9ce 	bl	800addc <_init>
 8009a40:	1b64      	subs	r4, r4, r5
 8009a42:	10a4      	asrs	r4, r4, #2
 8009a44:	2600      	movs	r6, #0
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	d105      	bne.n	8009a56 <__libc_init_array+0x2e>
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a50:	4798      	blx	r3
 8009a52:	3601      	adds	r6, #1
 8009a54:	e7ee      	b.n	8009a34 <__libc_init_array+0xc>
 8009a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5a:	4798      	blx	r3
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	e7f2      	b.n	8009a46 <__libc_init_array+0x1e>
 8009a60:	0800b554 	.word	0x0800b554
 8009a64:	0800b554 	.word	0x0800b554
 8009a68:	0800b554 	.word	0x0800b554
 8009a6c:	0800b558 	.word	0x0800b558

08009a70 <malloc>:
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <malloc+0xc>)
 8009a72:	4601      	mov	r1, r0
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	f000 b863 	b.w	8009b40 <_malloc_r>
 8009a7a:	bf00      	nop
 8009a7c:	2000000c 	.word	0x2000000c

08009a80 <free>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <free+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f000 b80b 	b.w	8009aa0 <_free_r>
 8009a8a:	bf00      	nop
 8009a8c:	2000000c 	.word	0x2000000c

08009a90 <memset>:
 8009a90:	4402      	add	r2, r0
 8009a92:	4603      	mov	r3, r0
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d100      	bne.n	8009a9a <memset+0xa>
 8009a98:	4770      	bx	lr
 8009a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9e:	e7f9      	b.n	8009a94 <memset+0x4>

08009aa0 <_free_r>:
 8009aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	d048      	beq.n	8009b38 <_free_r+0x98>
 8009aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aaa:	9001      	str	r0, [sp, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f1a1 0404 	sub.w	r4, r1, #4
 8009ab2:	bfb8      	it	lt
 8009ab4:	18e4      	addlt	r4, r4, r3
 8009ab6:	f000 fc39 	bl	800a32c <__malloc_lock>
 8009aba:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <_free_r+0x9c>)
 8009abc:	9801      	ldr	r0, [sp, #4]
 8009abe:	6813      	ldr	r3, [r2, #0]
 8009ac0:	4615      	mov	r5, r2
 8009ac2:	b933      	cbnz	r3, 8009ad2 <_free_r+0x32>
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	6014      	str	r4, [r2, #0]
 8009ac8:	b003      	add	sp, #12
 8009aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ace:	f000 bc33 	b.w	800a338 <__malloc_unlock>
 8009ad2:	42a3      	cmp	r3, r4
 8009ad4:	d90b      	bls.n	8009aee <_free_r+0x4e>
 8009ad6:	6821      	ldr	r1, [r4, #0]
 8009ad8:	1862      	adds	r2, r4, r1
 8009ada:	4293      	cmp	r3, r2
 8009adc:	bf04      	itt	eq
 8009ade:	681a      	ldreq	r2, [r3, #0]
 8009ae0:	685b      	ldreq	r3, [r3, #4]
 8009ae2:	6063      	str	r3, [r4, #4]
 8009ae4:	bf04      	itt	eq
 8009ae6:	1852      	addeq	r2, r2, r1
 8009ae8:	6022      	streq	r2, [r4, #0]
 8009aea:	602c      	str	r4, [r5, #0]
 8009aec:	e7ec      	b.n	8009ac8 <_free_r+0x28>
 8009aee:	461a      	mov	r2, r3
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	b10b      	cbz	r3, 8009af8 <_free_r+0x58>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d9fa      	bls.n	8009aee <_free_r+0x4e>
 8009af8:	6811      	ldr	r1, [r2, #0]
 8009afa:	1855      	adds	r5, r2, r1
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d10b      	bne.n	8009b18 <_free_r+0x78>
 8009b00:	6824      	ldr	r4, [r4, #0]
 8009b02:	4421      	add	r1, r4
 8009b04:	1854      	adds	r4, r2, r1
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	d1dd      	bne.n	8009ac8 <_free_r+0x28>
 8009b0c:	681c      	ldr	r4, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	6053      	str	r3, [r2, #4]
 8009b12:	4421      	add	r1, r4
 8009b14:	6011      	str	r1, [r2, #0]
 8009b16:	e7d7      	b.n	8009ac8 <_free_r+0x28>
 8009b18:	d902      	bls.n	8009b20 <_free_r+0x80>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	e7d3      	b.n	8009ac8 <_free_r+0x28>
 8009b20:	6825      	ldr	r5, [r4, #0]
 8009b22:	1961      	adds	r1, r4, r5
 8009b24:	428b      	cmp	r3, r1
 8009b26:	bf04      	itt	eq
 8009b28:	6819      	ldreq	r1, [r3, #0]
 8009b2a:	685b      	ldreq	r3, [r3, #4]
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	bf04      	itt	eq
 8009b30:	1949      	addeq	r1, r1, r5
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	6054      	str	r4, [r2, #4]
 8009b36:	e7c7      	b.n	8009ac8 <_free_r+0x28>
 8009b38:	b003      	add	sp, #12
 8009b3a:	bd30      	pop	{r4, r5, pc}
 8009b3c:	200000d0 	.word	0x200000d0

08009b40 <_malloc_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	1ccd      	adds	r5, r1, #3
 8009b44:	f025 0503 	bic.w	r5, r5, #3
 8009b48:	3508      	adds	r5, #8
 8009b4a:	2d0c      	cmp	r5, #12
 8009b4c:	bf38      	it	cc
 8009b4e:	250c      	movcc	r5, #12
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	4606      	mov	r6, r0
 8009b54:	db01      	blt.n	8009b5a <_malloc_r+0x1a>
 8009b56:	42a9      	cmp	r1, r5
 8009b58:	d903      	bls.n	8009b62 <_malloc_r+0x22>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6033      	str	r3, [r6, #0]
 8009b5e:	2000      	movs	r0, #0
 8009b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b62:	f000 fbe3 	bl	800a32c <__malloc_lock>
 8009b66:	4921      	ldr	r1, [pc, #132]	; (8009bec <_malloc_r+0xac>)
 8009b68:	680a      	ldr	r2, [r1, #0]
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	b99c      	cbnz	r4, 8009b96 <_malloc_r+0x56>
 8009b6e:	4f20      	ldr	r7, [pc, #128]	; (8009bf0 <_malloc_r+0xb0>)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	b923      	cbnz	r3, 8009b7e <_malloc_r+0x3e>
 8009b74:	4621      	mov	r1, r4
 8009b76:	4630      	mov	r0, r6
 8009b78:	f000 f8ca 	bl	8009d10 <_sbrk_r>
 8009b7c:	6038      	str	r0, [r7, #0]
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 f8c5 	bl	8009d10 <_sbrk_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d123      	bne.n	8009bd2 <_malloc_r+0x92>
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	6033      	str	r3, [r6, #0]
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 fbd2 	bl	800a338 <__malloc_unlock>
 8009b94:	e7e3      	b.n	8009b5e <_malloc_r+0x1e>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	1b5b      	subs	r3, r3, r5
 8009b9a:	d417      	bmi.n	8009bcc <_malloc_r+0x8c>
 8009b9c:	2b0b      	cmp	r3, #11
 8009b9e:	d903      	bls.n	8009ba8 <_malloc_r+0x68>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	441c      	add	r4, r3
 8009ba4:	6025      	str	r5, [r4, #0]
 8009ba6:	e004      	b.n	8009bb2 <_malloc_r+0x72>
 8009ba8:	6863      	ldr	r3, [r4, #4]
 8009baa:	42a2      	cmp	r2, r4
 8009bac:	bf0c      	ite	eq
 8009bae:	600b      	streq	r3, [r1, #0]
 8009bb0:	6053      	strne	r3, [r2, #4]
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f000 fbc0 	bl	800a338 <__malloc_unlock>
 8009bb8:	f104 000b 	add.w	r0, r4, #11
 8009bbc:	1d23      	adds	r3, r4, #4
 8009bbe:	f020 0007 	bic.w	r0, r0, #7
 8009bc2:	1ac2      	subs	r2, r0, r3
 8009bc4:	d0cc      	beq.n	8009b60 <_malloc_r+0x20>
 8009bc6:	1a1b      	subs	r3, r3, r0
 8009bc8:	50a3      	str	r3, [r4, r2]
 8009bca:	e7c9      	b.n	8009b60 <_malloc_r+0x20>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	6864      	ldr	r4, [r4, #4]
 8009bd0:	e7cc      	b.n	8009b6c <_malloc_r+0x2c>
 8009bd2:	1cc4      	adds	r4, r0, #3
 8009bd4:	f024 0403 	bic.w	r4, r4, #3
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d0e3      	beq.n	8009ba4 <_malloc_r+0x64>
 8009bdc:	1a21      	subs	r1, r4, r0
 8009bde:	4630      	mov	r0, r6
 8009be0:	f000 f896 	bl	8009d10 <_sbrk_r>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d1dd      	bne.n	8009ba4 <_malloc_r+0x64>
 8009be8:	e7cf      	b.n	8009b8a <_malloc_r+0x4a>
 8009bea:	bf00      	nop
 8009bec:	200000d0 	.word	0x200000d0
 8009bf0:	200000d4 	.word	0x200000d4

08009bf4 <iprintf>:
 8009bf4:	b40f      	push	{r0, r1, r2, r3}
 8009bf6:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <iprintf+0x2c>)
 8009bf8:	b513      	push	{r0, r1, r4, lr}
 8009bfa:	681c      	ldr	r4, [r3, #0]
 8009bfc:	b124      	cbz	r4, 8009c08 <iprintf+0x14>
 8009bfe:	69a3      	ldr	r3, [r4, #24]
 8009c00:	b913      	cbnz	r3, 8009c08 <iprintf+0x14>
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 fa8e 	bl	800a124 <__sinit>
 8009c08:	ab05      	add	r3, sp, #20
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	68a1      	ldr	r1, [r4, #8]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fd1d 	bl	800a650 <_vfiprintf_r>
 8009c16:	b002      	add	sp, #8
 8009c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1c:	b004      	add	sp, #16
 8009c1e:	4770      	bx	lr
 8009c20:	2000000c 	.word	0x2000000c

08009c24 <_puts_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	460e      	mov	r6, r1
 8009c28:	4605      	mov	r5, r0
 8009c2a:	b118      	cbz	r0, 8009c34 <_puts_r+0x10>
 8009c2c:	6983      	ldr	r3, [r0, #24]
 8009c2e:	b90b      	cbnz	r3, 8009c34 <_puts_r+0x10>
 8009c30:	f000 fa78 	bl	800a124 <__sinit>
 8009c34:	69ab      	ldr	r3, [r5, #24]
 8009c36:	68ac      	ldr	r4, [r5, #8]
 8009c38:	b913      	cbnz	r3, 8009c40 <_puts_r+0x1c>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 fa72 	bl	800a124 <__sinit>
 8009c40:	4b2c      	ldr	r3, [pc, #176]	; (8009cf4 <_puts_r+0xd0>)
 8009c42:	429c      	cmp	r4, r3
 8009c44:	d120      	bne.n	8009c88 <_puts_r+0x64>
 8009c46:	686c      	ldr	r4, [r5, #4]
 8009c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4a:	07db      	lsls	r3, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_puts_r+0x36>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_puts_r+0x36>
 8009c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c56:	f000 fb03 	bl	800a260 <__retarget_lock_acquire_recursive>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	0719      	lsls	r1, r3, #28
 8009c5e:	d51d      	bpl.n	8009c9c <_puts_r+0x78>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	b1db      	cbz	r3, 8009c9c <_puts_r+0x78>
 8009c64:	3e01      	subs	r6, #1
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	bb39      	cbnz	r1, 8009cc2 <_puts_r+0x9e>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da38      	bge.n	8009ce8 <_puts_r+0xc4>
 8009c76:	4622      	mov	r2, r4
 8009c78:	210a      	movs	r1, #10
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 f878 	bl	8009d70 <__swbuf_r>
 8009c80:	3001      	adds	r0, #1
 8009c82:	d011      	beq.n	8009ca8 <_puts_r+0x84>
 8009c84:	250a      	movs	r5, #10
 8009c86:	e011      	b.n	8009cac <_puts_r+0x88>
 8009c88:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <_puts_r+0xd4>)
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	d101      	bne.n	8009c92 <_puts_r+0x6e>
 8009c8e:	68ac      	ldr	r4, [r5, #8]
 8009c90:	e7da      	b.n	8009c48 <_puts_r+0x24>
 8009c92:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <_puts_r+0xd8>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	bf08      	it	eq
 8009c98:	68ec      	ldreq	r4, [r5, #12]
 8009c9a:	e7d5      	b.n	8009c48 <_puts_r+0x24>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f8b8 	bl	8009e14 <__swsetup_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d0dd      	beq.n	8009c64 <_puts_r+0x40>
 8009ca8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cae:	07da      	lsls	r2, r3, #31
 8009cb0:	d405      	bmi.n	8009cbe <_puts_r+0x9a>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	059b      	lsls	r3, r3, #22
 8009cb6:	d402      	bmi.n	8009cbe <_puts_r+0x9a>
 8009cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cba:	f000 fad2 	bl	800a262 <__retarget_lock_release_recursive>
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da04      	bge.n	8009cd0 <_puts_r+0xac>
 8009cc6:	69a2      	ldr	r2, [r4, #24]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	dc06      	bgt.n	8009cda <_puts_r+0xb6>
 8009ccc:	290a      	cmp	r1, #10
 8009cce:	d004      	beq.n	8009cda <_puts_r+0xb6>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	7019      	strb	r1, [r3, #0]
 8009cd8:	e7c5      	b.n	8009c66 <_puts_r+0x42>
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f000 f847 	bl	8009d70 <__swbuf_r>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d1bf      	bne.n	8009c66 <_puts_r+0x42>
 8009ce6:	e7df      	b.n	8009ca8 <_puts_r+0x84>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	250a      	movs	r5, #10
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	701d      	strb	r5, [r3, #0]
 8009cf2:	e7db      	b.n	8009cac <_puts_r+0x88>
 8009cf4:	0800b4d8 	.word	0x0800b4d8
 8009cf8:	0800b4f8 	.word	0x0800b4f8
 8009cfc:	0800b4b8 	.word	0x0800b4b8

08009d00 <puts>:
 8009d00:	4b02      	ldr	r3, [pc, #8]	; (8009d0c <puts+0xc>)
 8009d02:	4601      	mov	r1, r0
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f7ff bf8d 	b.w	8009c24 <_puts_r>
 8009d0a:	bf00      	nop
 8009d0c:	2000000c 	.word	0x2000000c

08009d10 <_sbrk_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d06      	ldr	r5, [pc, #24]	; (8009d2c <_sbrk_r+0x1c>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f7 ff8a 	bl	8001c34 <_sbrk>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_sbrk_r+0x1a>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_sbrk_r+0x1a>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20004420 	.word	0x20004420

08009d30 <siprintf>:
 8009d30:	b40e      	push	{r1, r2, r3}
 8009d32:	b500      	push	{lr}
 8009d34:	b09c      	sub	sp, #112	; 0x70
 8009d36:	ab1d      	add	r3, sp, #116	; 0x74
 8009d38:	9002      	str	r0, [sp, #8]
 8009d3a:	9006      	str	r0, [sp, #24]
 8009d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <siprintf+0x38>)
 8009d42:	9107      	str	r1, [sp, #28]
 8009d44:	9104      	str	r1, [sp, #16]
 8009d46:	4909      	ldr	r1, [pc, #36]	; (8009d6c <siprintf+0x3c>)
 8009d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4c:	9105      	str	r1, [sp, #20]
 8009d4e:	6800      	ldr	r0, [r0, #0]
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	a902      	add	r1, sp, #8
 8009d54:	f000 fb52 	bl	800a3fc <_svfiprintf_r>
 8009d58:	9b02      	ldr	r3, [sp, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	b01c      	add	sp, #112	; 0x70
 8009d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d64:	b003      	add	sp, #12
 8009d66:	4770      	bx	lr
 8009d68:	2000000c 	.word	0x2000000c
 8009d6c:	ffff0208 	.word	0xffff0208

08009d70 <__swbuf_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	4605      	mov	r5, r0
 8009d78:	b118      	cbz	r0, 8009d82 <__swbuf_r+0x12>
 8009d7a:	6983      	ldr	r3, [r0, #24]
 8009d7c:	b90b      	cbnz	r3, 8009d82 <__swbuf_r+0x12>
 8009d7e:	f000 f9d1 	bl	800a124 <__sinit>
 8009d82:	4b21      	ldr	r3, [pc, #132]	; (8009e08 <__swbuf_r+0x98>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	d12b      	bne.n	8009de0 <__swbuf_r+0x70>
 8009d88:	686c      	ldr	r4, [r5, #4]
 8009d8a:	69a3      	ldr	r3, [r4, #24]
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	071a      	lsls	r2, r3, #28
 8009d92:	d52f      	bpl.n	8009df4 <__swbuf_r+0x84>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	b36b      	cbz	r3, 8009df4 <__swbuf_r+0x84>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	6963      	ldr	r3, [r4, #20]
 8009da0:	b2f6      	uxtb	r6, r6
 8009da2:	4283      	cmp	r3, r0
 8009da4:	4637      	mov	r7, r6
 8009da6:	dc04      	bgt.n	8009db2 <__swbuf_r+0x42>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f926 	bl	8009ffc <_fflush_r>
 8009db0:	bb30      	cbnz	r0, 8009e00 <__swbuf_r+0x90>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	701e      	strb	r6, [r3, #0]
 8009dc0:	6963      	ldr	r3, [r4, #20]
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	4283      	cmp	r3, r0
 8009dc6:	d004      	beq.n	8009dd2 <__swbuf_r+0x62>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	07db      	lsls	r3, r3, #31
 8009dcc:	d506      	bpl.n	8009ddc <__swbuf_r+0x6c>
 8009dce:	2e0a      	cmp	r6, #10
 8009dd0:	d104      	bne.n	8009ddc <__swbuf_r+0x6c>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f911 	bl	8009ffc <_fflush_r>
 8009dda:	b988      	cbnz	r0, 8009e00 <__swbuf_r+0x90>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <__swbuf_r+0x9c>)
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d101      	bne.n	8009dea <__swbuf_r+0x7a>
 8009de6:	68ac      	ldr	r4, [r5, #8]
 8009de8:	e7cf      	b.n	8009d8a <__swbuf_r+0x1a>
 8009dea:	4b09      	ldr	r3, [pc, #36]	; (8009e10 <__swbuf_r+0xa0>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	bf08      	it	eq
 8009df0:	68ec      	ldreq	r4, [r5, #12]
 8009df2:	e7ca      	b.n	8009d8a <__swbuf_r+0x1a>
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f80c 	bl	8009e14 <__swsetup_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0cb      	beq.n	8009d98 <__swbuf_r+0x28>
 8009e00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e04:	e7ea      	b.n	8009ddc <__swbuf_r+0x6c>
 8009e06:	bf00      	nop
 8009e08:	0800b4d8 	.word	0x0800b4d8
 8009e0c:	0800b4f8 	.word	0x0800b4f8
 8009e10:	0800b4b8 	.word	0x0800b4b8

08009e14 <__swsetup_r>:
 8009e14:	4b32      	ldr	r3, [pc, #200]	; (8009ee0 <__swsetup_r+0xcc>)
 8009e16:	b570      	push	{r4, r5, r6, lr}
 8009e18:	681d      	ldr	r5, [r3, #0]
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	b125      	cbz	r5, 8009e2a <__swsetup_r+0x16>
 8009e20:	69ab      	ldr	r3, [r5, #24]
 8009e22:	b913      	cbnz	r3, 8009e2a <__swsetup_r+0x16>
 8009e24:	4628      	mov	r0, r5
 8009e26:	f000 f97d 	bl	800a124 <__sinit>
 8009e2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ee4 <__swsetup_r+0xd0>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d10f      	bne.n	8009e50 <__swsetup_r+0x3c>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e38:	0719      	lsls	r1, r3, #28
 8009e3a:	d42c      	bmi.n	8009e96 <__swsetup_r+0x82>
 8009e3c:	06dd      	lsls	r5, r3, #27
 8009e3e:	d411      	bmi.n	8009e64 <__swsetup_r+0x50>
 8009e40:	2309      	movs	r3, #9
 8009e42:	6033      	str	r3, [r6, #0]
 8009e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e4e:	e03e      	b.n	8009ece <__swsetup_r+0xba>
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <__swsetup_r+0xd4>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <__swsetup_r+0x46>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7eb      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <__swsetup_r+0xd8>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7e6      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e64:	0758      	lsls	r0, r3, #29
 8009e66:	d512      	bpl.n	8009e8e <__swsetup_r+0x7a>
 8009e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e6a:	b141      	cbz	r1, 8009e7e <__swsetup_r+0x6a>
 8009e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e70:	4299      	cmp	r1, r3
 8009e72:	d002      	beq.n	8009e7a <__swsetup_r+0x66>
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff fe13 	bl	8009aa0 <_free_r>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0308 	orr.w	r3, r3, #8
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	b94b      	cbnz	r3, 8009eae <__swsetup_r+0x9a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea4:	d003      	beq.n	8009eae <__swsetup_r+0x9a>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 f9ff 	bl	800a2ac <__smakebuf_r>
 8009eae:	89a0      	ldrh	r0, [r4, #12]
 8009eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb4:	f010 0301 	ands.w	r3, r0, #1
 8009eb8:	d00a      	beq.n	8009ed0 <__swsetup_r+0xbc>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	6963      	ldr	r3, [r4, #20]
 8009ec0:	425b      	negs	r3, r3
 8009ec2:	61a3      	str	r3, [r4, #24]
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	b943      	cbnz	r3, 8009eda <__swsetup_r+0xc6>
 8009ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ecc:	d1ba      	bne.n	8009e44 <__swsetup_r+0x30>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	0781      	lsls	r1, r0, #30
 8009ed2:	bf58      	it	pl
 8009ed4:	6963      	ldrpl	r3, [r4, #20]
 8009ed6:	60a3      	str	r3, [r4, #8]
 8009ed8:	e7f4      	b.n	8009ec4 <__swsetup_r+0xb0>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e7f7      	b.n	8009ece <__swsetup_r+0xba>
 8009ede:	bf00      	nop
 8009ee0:	2000000c 	.word	0x2000000c
 8009ee4:	0800b4d8 	.word	0x0800b4d8
 8009ee8:	0800b4f8 	.word	0x0800b4f8
 8009eec:	0800b4b8 	.word	0x0800b4b8

08009ef0 <__sflush_r>:
 8009ef0:	898a      	ldrh	r2, [r1, #12]
 8009ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	0710      	lsls	r0, r2, #28
 8009efa:	460c      	mov	r4, r1
 8009efc:	d458      	bmi.n	8009fb0 <__sflush_r+0xc0>
 8009efe:	684b      	ldr	r3, [r1, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc05      	bgt.n	8009f10 <__sflush_r+0x20>
 8009f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dc02      	bgt.n	8009f10 <__sflush_r+0x20>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	d0f9      	beq.n	8009f0a <__sflush_r+0x1a>
 8009f16:	2300      	movs	r3, #0
 8009f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f1c:	682f      	ldr	r7, [r5, #0]
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	d032      	beq.n	8009f88 <__sflush_r+0x98>
 8009f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	075a      	lsls	r2, r3, #29
 8009f28:	d505      	bpl.n	8009f36 <__sflush_r+0x46>
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	1ac0      	subs	r0, r0, r3
 8009f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f30:	b10b      	cbz	r3, 8009f36 <__sflush_r+0x46>
 8009f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f34:	1ac0      	subs	r0, r0, r3
 8009f36:	2300      	movs	r3, #0
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b0      	blx	r6
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	d106      	bne.n	8009f56 <__sflush_r+0x66>
 8009f48:	6829      	ldr	r1, [r5, #0]
 8009f4a:	291d      	cmp	r1, #29
 8009f4c:	d82c      	bhi.n	8009fa8 <__sflush_r+0xb8>
 8009f4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ff8 <__sflush_r+0x108>)
 8009f50:	40ca      	lsrs	r2, r1
 8009f52:	07d6      	lsls	r6, r2, #31
 8009f54:	d528      	bpl.n	8009fa8 <__sflush_r+0xb8>
 8009f56:	2200      	movs	r2, #0
 8009f58:	6062      	str	r2, [r4, #4]
 8009f5a:	04d9      	lsls	r1, r3, #19
 8009f5c:	6922      	ldr	r2, [r4, #16]
 8009f5e:	6022      	str	r2, [r4, #0]
 8009f60:	d504      	bpl.n	8009f6c <__sflush_r+0x7c>
 8009f62:	1c42      	adds	r2, r0, #1
 8009f64:	d101      	bne.n	8009f6a <__sflush_r+0x7a>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b903      	cbnz	r3, 8009f6c <__sflush_r+0x7c>
 8009f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f6e:	602f      	str	r7, [r5, #0]
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d0ca      	beq.n	8009f0a <__sflush_r+0x1a>
 8009f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f78:	4299      	cmp	r1, r3
 8009f7a:	d002      	beq.n	8009f82 <__sflush_r+0x92>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f7ff fd8f 	bl	8009aa0 <_free_r>
 8009f82:	2000      	movs	r0, #0
 8009f84:	6360      	str	r0, [r4, #52]	; 0x34
 8009f86:	e7c1      	b.n	8009f0c <__sflush_r+0x1c>
 8009f88:	6a21      	ldr	r1, [r4, #32]
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	1c41      	adds	r1, r0, #1
 8009f92:	d1c7      	bne.n	8009f24 <__sflush_r+0x34>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0c4      	beq.n	8009f24 <__sflush_r+0x34>
 8009f9a:	2b1d      	cmp	r3, #29
 8009f9c:	d001      	beq.n	8009fa2 <__sflush_r+0xb2>
 8009f9e:	2b16      	cmp	r3, #22
 8009fa0:	d101      	bne.n	8009fa6 <__sflush_r+0xb6>
 8009fa2:	602f      	str	r7, [r5, #0]
 8009fa4:	e7b1      	b.n	8009f0a <__sflush_r+0x1a>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	e7ad      	b.n	8009f0c <__sflush_r+0x1c>
 8009fb0:	690f      	ldr	r7, [r1, #16]
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	d0a9      	beq.n	8009f0a <__sflush_r+0x1a>
 8009fb6:	0793      	lsls	r3, r2, #30
 8009fb8:	680e      	ldr	r6, [r1, #0]
 8009fba:	bf08      	it	eq
 8009fbc:	694b      	ldreq	r3, [r1, #20]
 8009fbe:	600f      	str	r7, [r1, #0]
 8009fc0:	bf18      	it	ne
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	eba6 0807 	sub.w	r8, r6, r7
 8009fc8:	608b      	str	r3, [r1, #8]
 8009fca:	f1b8 0f00 	cmp.w	r8, #0
 8009fce:	dd9c      	ble.n	8009f0a <__sflush_r+0x1a>
 8009fd0:	6a21      	ldr	r1, [r4, #32]
 8009fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fd4:	4643      	mov	r3, r8
 8009fd6:	463a      	mov	r2, r7
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	dc06      	bgt.n	8009fee <__sflush_r+0xfe>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fec:	e78e      	b.n	8009f0c <__sflush_r+0x1c>
 8009fee:	4407      	add	r7, r0
 8009ff0:	eba8 0800 	sub.w	r8, r8, r0
 8009ff4:	e7e9      	b.n	8009fca <__sflush_r+0xda>
 8009ff6:	bf00      	nop
 8009ff8:	20400001 	.word	0x20400001

08009ffc <_fflush_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	690b      	ldr	r3, [r1, #16]
 800a000:	4605      	mov	r5, r0
 800a002:	460c      	mov	r4, r1
 800a004:	b913      	cbnz	r3, 800a00c <_fflush_r+0x10>
 800a006:	2500      	movs	r5, #0
 800a008:	4628      	mov	r0, r5
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	b118      	cbz	r0, 800a016 <_fflush_r+0x1a>
 800a00e:	6983      	ldr	r3, [r0, #24]
 800a010:	b90b      	cbnz	r3, 800a016 <_fflush_r+0x1a>
 800a012:	f000 f887 	bl	800a124 <__sinit>
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <_fflush_r+0x6c>)
 800a018:	429c      	cmp	r4, r3
 800a01a:	d11b      	bne.n	800a054 <_fflush_r+0x58>
 800a01c:	686c      	ldr	r4, [r5, #4]
 800a01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0ef      	beq.n	800a006 <_fflush_r+0xa>
 800a026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a028:	07d0      	lsls	r0, r2, #31
 800a02a:	d404      	bmi.n	800a036 <_fflush_r+0x3a>
 800a02c:	0599      	lsls	r1, r3, #22
 800a02e:	d402      	bmi.n	800a036 <_fflush_r+0x3a>
 800a030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a032:	f000 f915 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a036:	4628      	mov	r0, r5
 800a038:	4621      	mov	r1, r4
 800a03a:	f7ff ff59 	bl	8009ef0 <__sflush_r>
 800a03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a040:	07da      	lsls	r2, r3, #31
 800a042:	4605      	mov	r5, r0
 800a044:	d4e0      	bmi.n	800a008 <_fflush_r+0xc>
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	059b      	lsls	r3, r3, #22
 800a04a:	d4dd      	bmi.n	800a008 <_fflush_r+0xc>
 800a04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a04e:	f000 f908 	bl	800a262 <__retarget_lock_release_recursive>
 800a052:	e7d9      	b.n	800a008 <_fflush_r+0xc>
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <_fflush_r+0x70>)
 800a056:	429c      	cmp	r4, r3
 800a058:	d101      	bne.n	800a05e <_fflush_r+0x62>
 800a05a:	68ac      	ldr	r4, [r5, #8]
 800a05c:	e7df      	b.n	800a01e <_fflush_r+0x22>
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <_fflush_r+0x74>)
 800a060:	429c      	cmp	r4, r3
 800a062:	bf08      	it	eq
 800a064:	68ec      	ldreq	r4, [r5, #12]
 800a066:	e7da      	b.n	800a01e <_fflush_r+0x22>
 800a068:	0800b4d8 	.word	0x0800b4d8
 800a06c:	0800b4f8 	.word	0x0800b4f8
 800a070:	0800b4b8 	.word	0x0800b4b8

0800a074 <std>:
 800a074:	2300      	movs	r3, #0
 800a076:	b510      	push	{r4, lr}
 800a078:	4604      	mov	r4, r0
 800a07a:	e9c0 3300 	strd	r3, r3, [r0]
 800a07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a082:	6083      	str	r3, [r0, #8]
 800a084:	8181      	strh	r1, [r0, #12]
 800a086:	6643      	str	r3, [r0, #100]	; 0x64
 800a088:	81c2      	strh	r2, [r0, #14]
 800a08a:	6183      	str	r3, [r0, #24]
 800a08c:	4619      	mov	r1, r3
 800a08e:	2208      	movs	r2, #8
 800a090:	305c      	adds	r0, #92	; 0x5c
 800a092:	f7ff fcfd 	bl	8009a90 <memset>
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <std+0x38>)
 800a098:	6263      	str	r3, [r4, #36]	; 0x24
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <std+0x3c>)
 800a09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <std+0x40>)
 800a0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0a2:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <std+0x44>)
 800a0a4:	6224      	str	r4, [r4, #32]
 800a0a6:	6323      	str	r3, [r4, #48]	; 0x30
 800a0a8:	bd10      	pop	{r4, pc}
 800a0aa:	bf00      	nop
 800a0ac:	0800abd9 	.word	0x0800abd9
 800a0b0:	0800abfb 	.word	0x0800abfb
 800a0b4:	0800ac33 	.word	0x0800ac33
 800a0b8:	0800ac57 	.word	0x0800ac57

0800a0bc <_cleanup_r>:
 800a0bc:	4901      	ldr	r1, [pc, #4]	; (800a0c4 <_cleanup_r+0x8>)
 800a0be:	f000 b8af 	b.w	800a220 <_fwalk_reent>
 800a0c2:	bf00      	nop
 800a0c4:	08009ffd 	.word	0x08009ffd

0800a0c8 <__sfmoreglue>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	1e4a      	subs	r2, r1, #1
 800a0cc:	2568      	movs	r5, #104	; 0x68
 800a0ce:	4355      	muls	r5, r2
 800a0d0:	460e      	mov	r6, r1
 800a0d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0d6:	f7ff fd33 	bl	8009b40 <_malloc_r>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	b140      	cbz	r0, 800a0f0 <__sfmoreglue+0x28>
 800a0de:	2100      	movs	r1, #0
 800a0e0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0e4:	300c      	adds	r0, #12
 800a0e6:	60a0      	str	r0, [r4, #8]
 800a0e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0ec:	f7ff fcd0 	bl	8009a90 <memset>
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}

0800a0f4 <__sfp_lock_acquire>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__sfp_lock_acquire+0x8>)
 800a0f6:	f000 b8b3 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	2000441c 	.word	0x2000441c

0800a100 <__sfp_lock_release>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__sfp_lock_release+0x8>)
 800a102:	f000 b8ae 	b.w	800a262 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	2000441c 	.word	0x2000441c

0800a10c <__sinit_lock_acquire>:
 800a10c:	4801      	ldr	r0, [pc, #4]	; (800a114 <__sinit_lock_acquire+0x8>)
 800a10e:	f000 b8a7 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800a112:	bf00      	nop
 800a114:	20004417 	.word	0x20004417

0800a118 <__sinit_lock_release>:
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__sinit_lock_release+0x8>)
 800a11a:	f000 b8a2 	b.w	800a262 <__retarget_lock_release_recursive>
 800a11e:	bf00      	nop
 800a120:	20004417 	.word	0x20004417

0800a124 <__sinit>:
 800a124:	b510      	push	{r4, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	f7ff fff0 	bl	800a10c <__sinit_lock_acquire>
 800a12c:	69a3      	ldr	r3, [r4, #24]
 800a12e:	b11b      	cbz	r3, 800a138 <__sinit+0x14>
 800a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a134:	f7ff bff0 	b.w	800a118 <__sinit_lock_release>
 800a138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a13c:	6523      	str	r3, [r4, #80]	; 0x50
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <__sinit+0x68>)
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <__sinit+0x6c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	62a2      	str	r2, [r4, #40]	; 0x28
 800a146:	42a3      	cmp	r3, r4
 800a148:	bf04      	itt	eq
 800a14a:	2301      	moveq	r3, #1
 800a14c:	61a3      	streq	r3, [r4, #24]
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 f820 	bl	800a194 <__sfp>
 800a154:	6060      	str	r0, [r4, #4]
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f81c 	bl	800a194 <__sfp>
 800a15c:	60a0      	str	r0, [r4, #8]
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 f818 	bl	800a194 <__sfp>
 800a164:	2200      	movs	r2, #0
 800a166:	60e0      	str	r0, [r4, #12]
 800a168:	2104      	movs	r1, #4
 800a16a:	6860      	ldr	r0, [r4, #4]
 800a16c:	f7ff ff82 	bl	800a074 <std>
 800a170:	68a0      	ldr	r0, [r4, #8]
 800a172:	2201      	movs	r2, #1
 800a174:	2109      	movs	r1, #9
 800a176:	f7ff ff7d 	bl	800a074 <std>
 800a17a:	68e0      	ldr	r0, [r4, #12]
 800a17c:	2202      	movs	r2, #2
 800a17e:	2112      	movs	r1, #18
 800a180:	f7ff ff78 	bl	800a074 <std>
 800a184:	2301      	movs	r3, #1
 800a186:	61a3      	str	r3, [r4, #24]
 800a188:	e7d2      	b.n	800a130 <__sinit+0xc>
 800a18a:	bf00      	nop
 800a18c:	0800b4b4 	.word	0x0800b4b4
 800a190:	0800a0bd 	.word	0x0800a0bd

0800a194 <__sfp>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	4607      	mov	r7, r0
 800a198:	f7ff ffac 	bl	800a0f4 <__sfp_lock_acquire>
 800a19c:	4b1e      	ldr	r3, [pc, #120]	; (800a218 <__sfp+0x84>)
 800a19e:	681e      	ldr	r6, [r3, #0]
 800a1a0:	69b3      	ldr	r3, [r6, #24]
 800a1a2:	b913      	cbnz	r3, 800a1aa <__sfp+0x16>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ffbd 	bl	800a124 <__sinit>
 800a1aa:	3648      	adds	r6, #72	; 0x48
 800a1ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	d503      	bpl.n	800a1bc <__sfp+0x28>
 800a1b4:	6833      	ldr	r3, [r6, #0]
 800a1b6:	b30b      	cbz	r3, 800a1fc <__sfp+0x68>
 800a1b8:	6836      	ldr	r6, [r6, #0]
 800a1ba:	e7f7      	b.n	800a1ac <__sfp+0x18>
 800a1bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1c0:	b9d5      	cbnz	r5, 800a1f8 <__sfp+0x64>
 800a1c2:	4b16      	ldr	r3, [pc, #88]	; (800a21c <__sfp+0x88>)
 800a1c4:	60e3      	str	r3, [r4, #12]
 800a1c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1ca:	6665      	str	r5, [r4, #100]	; 0x64
 800a1cc:	f000 f847 	bl	800a25e <__retarget_lock_init_recursive>
 800a1d0:	f7ff ff96 	bl	800a100 <__sfp_lock_release>
 800a1d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1dc:	6025      	str	r5, [r4, #0]
 800a1de:	61a5      	str	r5, [r4, #24]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1e8:	f7ff fc52 	bl	8009a90 <memset>
 800a1ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f8:	3468      	adds	r4, #104	; 0x68
 800a1fa:	e7d9      	b.n	800a1b0 <__sfp+0x1c>
 800a1fc:	2104      	movs	r1, #4
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ff62 	bl	800a0c8 <__sfmoreglue>
 800a204:	4604      	mov	r4, r0
 800a206:	6030      	str	r0, [r6, #0]
 800a208:	2800      	cmp	r0, #0
 800a20a:	d1d5      	bne.n	800a1b8 <__sfp+0x24>
 800a20c:	f7ff ff78 	bl	800a100 <__sfp_lock_release>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	e7ee      	b.n	800a1f4 <__sfp+0x60>
 800a216:	bf00      	nop
 800a218:	0800b4b4 	.word	0x0800b4b4
 800a21c:	ffff0001 	.word	0xffff0001

0800a220 <_fwalk_reent>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4606      	mov	r6, r0
 800a226:	4688      	mov	r8, r1
 800a228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a22c:	2700      	movs	r7, #0
 800a22e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a232:	f1b9 0901 	subs.w	r9, r9, #1
 800a236:	d505      	bpl.n	800a244 <_fwalk_reent+0x24>
 800a238:	6824      	ldr	r4, [r4, #0]
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	d1f7      	bne.n	800a22e <_fwalk_reent+0xe>
 800a23e:	4638      	mov	r0, r7
 800a240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a244:	89ab      	ldrh	r3, [r5, #12]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d907      	bls.n	800a25a <_fwalk_reent+0x3a>
 800a24a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a24e:	3301      	adds	r3, #1
 800a250:	d003      	beq.n	800a25a <_fwalk_reent+0x3a>
 800a252:	4629      	mov	r1, r5
 800a254:	4630      	mov	r0, r6
 800a256:	47c0      	blx	r8
 800a258:	4307      	orrs	r7, r0
 800a25a:	3568      	adds	r5, #104	; 0x68
 800a25c:	e7e9      	b.n	800a232 <_fwalk_reent+0x12>

0800a25e <__retarget_lock_init_recursive>:
 800a25e:	4770      	bx	lr

0800a260 <__retarget_lock_acquire_recursive>:
 800a260:	4770      	bx	lr

0800a262 <__retarget_lock_release_recursive>:
 800a262:	4770      	bx	lr

0800a264 <__swhatbuf_r>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	460e      	mov	r6, r1
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	b096      	sub	sp, #88	; 0x58
 800a270:	4614      	mov	r4, r2
 800a272:	461d      	mov	r5, r3
 800a274:	da07      	bge.n	800a286 <__swhatbuf_r+0x22>
 800a276:	2300      	movs	r3, #0
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	89b3      	ldrh	r3, [r6, #12]
 800a27c:	061a      	lsls	r2, r3, #24
 800a27e:	d410      	bmi.n	800a2a2 <__swhatbuf_r+0x3e>
 800a280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a284:	e00e      	b.n	800a2a4 <__swhatbuf_r+0x40>
 800a286:	466a      	mov	r2, sp
 800a288:	f000 fd0c 	bl	800aca4 <_fstat_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dbf2      	blt.n	800a276 <__swhatbuf_r+0x12>
 800a290:	9a01      	ldr	r2, [sp, #4]
 800a292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a29a:	425a      	negs	r2, r3
 800a29c:	415a      	adcs	r2, r3
 800a29e:	602a      	str	r2, [r5, #0]
 800a2a0:	e7ee      	b.n	800a280 <__swhatbuf_r+0x1c>
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	b016      	add	sp, #88	; 0x58
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}

0800a2ac <__smakebuf_r>:
 800a2ac:	898b      	ldrh	r3, [r1, #12]
 800a2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2b0:	079d      	lsls	r5, r3, #30
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	d507      	bpl.n	800a2c8 <__smakebuf_r+0x1c>
 800a2b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	6123      	str	r3, [r4, #16]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	6163      	str	r3, [r4, #20]
 800a2c4:	b002      	add	sp, #8
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	ab01      	add	r3, sp, #4
 800a2ca:	466a      	mov	r2, sp
 800a2cc:	f7ff ffca 	bl	800a264 <__swhatbuf_r>
 800a2d0:	9900      	ldr	r1, [sp, #0]
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7ff fc33 	bl	8009b40 <_malloc_r>
 800a2da:	b948      	cbnz	r0, 800a2f0 <__smakebuf_r+0x44>
 800a2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e0:	059a      	lsls	r2, r3, #22
 800a2e2:	d4ef      	bmi.n	800a2c4 <__smakebuf_r+0x18>
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	f043 0302 	orr.w	r3, r3, #2
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	e7e3      	b.n	800a2b8 <__smakebuf_r+0xc>
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <__smakebuf_r+0x7c>)
 800a2f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	6020      	str	r0, [r4, #0]
 800a2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	6163      	str	r3, [r4, #20]
 800a302:	9b01      	ldr	r3, [sp, #4]
 800a304:	6120      	str	r0, [r4, #16]
 800a306:	b15b      	cbz	r3, 800a320 <__smakebuf_r+0x74>
 800a308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 fcdb 	bl	800acc8 <_isatty_r>
 800a312:	b128      	cbz	r0, 800a320 <__smakebuf_r+0x74>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f023 0303 	bic.w	r3, r3, #3
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	89a0      	ldrh	r0, [r4, #12]
 800a322:	4305      	orrs	r5, r0
 800a324:	81a5      	strh	r5, [r4, #12]
 800a326:	e7cd      	b.n	800a2c4 <__smakebuf_r+0x18>
 800a328:	0800a0bd 	.word	0x0800a0bd

0800a32c <__malloc_lock>:
 800a32c:	4801      	ldr	r0, [pc, #4]	; (800a334 <__malloc_lock+0x8>)
 800a32e:	f7ff bf97 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800a332:	bf00      	nop
 800a334:	20004418 	.word	0x20004418

0800a338 <__malloc_unlock>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__malloc_unlock+0x8>)
 800a33a:	f7ff bf92 	b.w	800a262 <__retarget_lock_release_recursive>
 800a33e:	bf00      	nop
 800a340:	20004418 	.word	0x20004418

0800a344 <__ssputs_r>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	688e      	ldr	r6, [r1, #8]
 800a34a:	429e      	cmp	r6, r3
 800a34c:	4682      	mov	sl, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	4690      	mov	r8, r2
 800a352:	461f      	mov	r7, r3
 800a354:	d838      	bhi.n	800a3c8 <__ssputs_r+0x84>
 800a356:	898a      	ldrh	r2, [r1, #12]
 800a358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a35c:	d032      	beq.n	800a3c4 <__ssputs_r+0x80>
 800a35e:	6825      	ldr	r5, [r4, #0]
 800a360:	6909      	ldr	r1, [r1, #16]
 800a362:	eba5 0901 	sub.w	r9, r5, r1
 800a366:	6965      	ldr	r5, [r4, #20]
 800a368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a370:	3301      	adds	r3, #1
 800a372:	444b      	add	r3, r9
 800a374:	106d      	asrs	r5, r5, #1
 800a376:	429d      	cmp	r5, r3
 800a378:	bf38      	it	cc
 800a37a:	461d      	movcc	r5, r3
 800a37c:	0553      	lsls	r3, r2, #21
 800a37e:	d531      	bpl.n	800a3e4 <__ssputs_r+0xa0>
 800a380:	4629      	mov	r1, r5
 800a382:	f7ff fbdd 	bl	8009b40 <_malloc_r>
 800a386:	4606      	mov	r6, r0
 800a388:	b950      	cbnz	r0, 800a3a0 <__ssputs_r+0x5c>
 800a38a:	230c      	movs	r3, #12
 800a38c:	f8ca 3000 	str.w	r3, [sl]
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	6921      	ldr	r1, [r4, #16]
 800a3a2:	464a      	mov	r2, r9
 800a3a4:	f000 fcb2 	bl	800ad0c <memcpy>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	6126      	str	r6, [r4, #16]
 800a3b6:	6165      	str	r5, [r4, #20]
 800a3b8:	444e      	add	r6, r9
 800a3ba:	eba5 0509 	sub.w	r5, r5, r9
 800a3be:	6026      	str	r6, [r4, #0]
 800a3c0:	60a5      	str	r5, [r4, #8]
 800a3c2:	463e      	mov	r6, r7
 800a3c4:	42be      	cmp	r6, r7
 800a3c6:	d900      	bls.n	800a3ca <__ssputs_r+0x86>
 800a3c8:	463e      	mov	r6, r7
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	4641      	mov	r1, r8
 800a3d0:	f000 fcaa 	bl	800ad28 <memmove>
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	6822      	ldr	r2, [r4, #0]
 800a3d8:	1b9b      	subs	r3, r3, r6
 800a3da:	4432      	add	r2, r6
 800a3dc:	60a3      	str	r3, [r4, #8]
 800a3de:	6022      	str	r2, [r4, #0]
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7db      	b.n	800a39c <__ssputs_r+0x58>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	f000 fcb9 	bl	800ad5c <_realloc_r>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1e1      	bne.n	800a3b4 <__ssputs_r+0x70>
 800a3f0:	6921      	ldr	r1, [r4, #16]
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	f7ff fb54 	bl	8009aa0 <_free_r>
 800a3f8:	e7c7      	b.n	800a38a <__ssputs_r+0x46>
	...

0800a3fc <_svfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4698      	mov	r8, r3
 800a402:	898b      	ldrh	r3, [r1, #12]
 800a404:	061b      	lsls	r3, r3, #24
 800a406:	b09d      	sub	sp, #116	; 0x74
 800a408:	4607      	mov	r7, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	4614      	mov	r4, r2
 800a40e:	d50e      	bpl.n	800a42e <_svfiprintf_r+0x32>
 800a410:	690b      	ldr	r3, [r1, #16]
 800a412:	b963      	cbnz	r3, 800a42e <_svfiprintf_r+0x32>
 800a414:	2140      	movs	r1, #64	; 0x40
 800a416:	f7ff fb93 	bl	8009b40 <_malloc_r>
 800a41a:	6028      	str	r0, [r5, #0]
 800a41c:	6128      	str	r0, [r5, #16]
 800a41e:	b920      	cbnz	r0, 800a42a <_svfiprintf_r+0x2e>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a428:	e0d1      	b.n	800a5ce <_svfiprintf_r+0x1d2>
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	616b      	str	r3, [r5, #20]
 800a42e:	2300      	movs	r3, #0
 800a430:	9309      	str	r3, [sp, #36]	; 0x24
 800a432:	2320      	movs	r3, #32
 800a434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a438:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43c:	2330      	movs	r3, #48	; 0x30
 800a43e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5e8 <_svfiprintf_r+0x1ec>
 800a442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a446:	f04f 0901 	mov.w	r9, #1
 800a44a:	4623      	mov	r3, r4
 800a44c:	469a      	mov	sl, r3
 800a44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a452:	b10a      	cbz	r2, 800a458 <_svfiprintf_r+0x5c>
 800a454:	2a25      	cmp	r2, #37	; 0x25
 800a456:	d1f9      	bne.n	800a44c <_svfiprintf_r+0x50>
 800a458:	ebba 0b04 	subs.w	fp, sl, r4
 800a45c:	d00b      	beq.n	800a476 <_svfiprintf_r+0x7a>
 800a45e:	465b      	mov	r3, fp
 800a460:	4622      	mov	r2, r4
 800a462:	4629      	mov	r1, r5
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff ff6d 	bl	800a344 <__ssputs_r>
 800a46a:	3001      	adds	r0, #1
 800a46c:	f000 80aa 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a472:	445a      	add	r2, fp
 800a474:	9209      	str	r2, [sp, #36]	; 0x24
 800a476:	f89a 3000 	ldrb.w	r3, [sl]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80a2 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a480:	2300      	movs	r3, #0
 800a482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48a:	f10a 0a01 	add.w	sl, sl, #1
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	9307      	str	r3, [sp, #28]
 800a492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a496:	931a      	str	r3, [sp, #104]	; 0x68
 800a498:	4654      	mov	r4, sl
 800a49a:	2205      	movs	r2, #5
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	4851      	ldr	r0, [pc, #324]	; (800a5e8 <_svfiprintf_r+0x1ec>)
 800a4a2:	f7f5 fe9d 	bl	80001e0 <memchr>
 800a4a6:	9a04      	ldr	r2, [sp, #16]
 800a4a8:	b9d8      	cbnz	r0, 800a4e2 <_svfiprintf_r+0xe6>
 800a4aa:	06d0      	lsls	r0, r2, #27
 800a4ac:	bf44      	itt	mi
 800a4ae:	2320      	movmi	r3, #32
 800a4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b4:	0711      	lsls	r1, r2, #28
 800a4b6:	bf44      	itt	mi
 800a4b8:	232b      	movmi	r3, #43	; 0x2b
 800a4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c4:	d015      	beq.n	800a4f2 <_svfiprintf_r+0xf6>
 800a4c6:	9a07      	ldr	r2, [sp, #28]
 800a4c8:	4654      	mov	r4, sl
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f04f 0c0a 	mov.w	ip, #10
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d6:	3b30      	subs	r3, #48	; 0x30
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d94e      	bls.n	800a57a <_svfiprintf_r+0x17e>
 800a4dc:	b1b0      	cbz	r0, 800a50c <_svfiprintf_r+0x110>
 800a4de:	9207      	str	r2, [sp, #28]
 800a4e0:	e014      	b.n	800a50c <_svfiprintf_r+0x110>
 800a4e2:	eba0 0308 	sub.w	r3, r0, r8
 800a4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	46a2      	mov	sl, r4
 800a4f0:	e7d2      	b.n	800a498 <_svfiprintf_r+0x9c>
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	1d19      	adds	r1, r3, #4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	9103      	str	r1, [sp, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bfbb      	ittet	lt
 800a4fe:	425b      	neglt	r3, r3
 800a500:	f042 0202 	orrlt.w	r2, r2, #2
 800a504:	9307      	strge	r3, [sp, #28]
 800a506:	9307      	strlt	r3, [sp, #28]
 800a508:	bfb8      	it	lt
 800a50a:	9204      	strlt	r2, [sp, #16]
 800a50c:	7823      	ldrb	r3, [r4, #0]
 800a50e:	2b2e      	cmp	r3, #46	; 0x2e
 800a510:	d10c      	bne.n	800a52c <_svfiprintf_r+0x130>
 800a512:	7863      	ldrb	r3, [r4, #1]
 800a514:	2b2a      	cmp	r3, #42	; 0x2a
 800a516:	d135      	bne.n	800a584 <_svfiprintf_r+0x188>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9203      	str	r2, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfb8      	it	lt
 800a524:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a528:	3402      	adds	r4, #2
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5f8 <_svfiprintf_r+0x1fc>
 800a530:	7821      	ldrb	r1, [r4, #0]
 800a532:	2203      	movs	r2, #3
 800a534:	4650      	mov	r0, sl
 800a536:	f7f5 fe53 	bl	80001e0 <memchr>
 800a53a:	b140      	cbz	r0, 800a54e <_svfiprintf_r+0x152>
 800a53c:	2340      	movs	r3, #64	; 0x40
 800a53e:	eba0 000a 	sub.w	r0, r0, sl
 800a542:	fa03 f000 	lsl.w	r0, r3, r0
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	4303      	orrs	r3, r0
 800a54a:	3401      	adds	r4, #1
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	4826      	ldr	r0, [pc, #152]	; (800a5ec <_svfiprintf_r+0x1f0>)
 800a554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a558:	2206      	movs	r2, #6
 800a55a:	f7f5 fe41 	bl	80001e0 <memchr>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d038      	beq.n	800a5d4 <_svfiprintf_r+0x1d8>
 800a562:	4b23      	ldr	r3, [pc, #140]	; (800a5f0 <_svfiprintf_r+0x1f4>)
 800a564:	bb1b      	cbnz	r3, 800a5ae <_svfiprintf_r+0x1b2>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	3308      	adds	r3, #8
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a574:	4433      	add	r3, r6
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	e767      	b.n	800a44a <_svfiprintf_r+0x4e>
 800a57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	2001      	movs	r0, #1
 800a582:	e7a5      	b.n	800a4d0 <_svfiprintf_r+0xd4>
 800a584:	2300      	movs	r3, #0
 800a586:	3401      	adds	r4, #1
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	4619      	mov	r1, r3
 800a58c:	f04f 0c0a 	mov.w	ip, #10
 800a590:	4620      	mov	r0, r4
 800a592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a596:	3a30      	subs	r2, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d903      	bls.n	800a5a4 <_svfiprintf_r+0x1a8>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0c5      	beq.n	800a52c <_svfiprintf_r+0x130>
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	e7c3      	b.n	800a52c <_svfiprintf_r+0x130>
 800a5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e7f0      	b.n	800a590 <_svfiprintf_r+0x194>
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <_svfiprintf_r+0x1f8>)
 800a5b6:	a904      	add	r1, sp, #16
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f3af 8000 	nop.w
 800a5be:	1c42      	adds	r2, r0, #1
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	d1d6      	bne.n	800a572 <_svfiprintf_r+0x176>
 800a5c4:	89ab      	ldrh	r3, [r5, #12]
 800a5c6:	065b      	lsls	r3, r3, #25
 800a5c8:	f53f af2c 	bmi.w	800a424 <_svfiprintf_r+0x28>
 800a5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ce:	b01d      	add	sp, #116	; 0x74
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <_svfiprintf_r+0x1f8>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4638      	mov	r0, r7
 800a5e0:	f000 f9d4 	bl	800a98c <_printf_i>
 800a5e4:	e7eb      	b.n	800a5be <_svfiprintf_r+0x1c2>
 800a5e6:	bf00      	nop
 800a5e8:	0800b518 	.word	0x0800b518
 800a5ec:	0800b522 	.word	0x0800b522
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	0800a345 	.word	0x0800a345
 800a5f8:	0800b51e 	.word	0x0800b51e

0800a5fc <__sfputc_r>:
 800a5fc:	6893      	ldr	r3, [r2, #8]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	b410      	push	{r4}
 800a604:	6093      	str	r3, [r2, #8]
 800a606:	da08      	bge.n	800a61a <__sfputc_r+0x1e>
 800a608:	6994      	ldr	r4, [r2, #24]
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	db01      	blt.n	800a612 <__sfputc_r+0x16>
 800a60e:	290a      	cmp	r1, #10
 800a610:	d103      	bne.n	800a61a <__sfputc_r+0x1e>
 800a612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a616:	f7ff bbab 	b.w	8009d70 <__swbuf_r>
 800a61a:	6813      	ldr	r3, [r2, #0]
 800a61c:	1c58      	adds	r0, r3, #1
 800a61e:	6010      	str	r0, [r2, #0]
 800a620:	7019      	strb	r1, [r3, #0]
 800a622:	4608      	mov	r0, r1
 800a624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <__sfputs_r>:
 800a62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62c:	4606      	mov	r6, r0
 800a62e:	460f      	mov	r7, r1
 800a630:	4614      	mov	r4, r2
 800a632:	18d5      	adds	r5, r2, r3
 800a634:	42ac      	cmp	r4, r5
 800a636:	d101      	bne.n	800a63c <__sfputs_r+0x12>
 800a638:	2000      	movs	r0, #0
 800a63a:	e007      	b.n	800a64c <__sfputs_r+0x22>
 800a63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a640:	463a      	mov	r2, r7
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff ffda 	bl	800a5fc <__sfputc_r>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d1f3      	bne.n	800a634 <__sfputs_r+0xa>
 800a64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a650 <_vfiprintf_r>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	460d      	mov	r5, r1
 800a656:	b09d      	sub	sp, #116	; 0x74
 800a658:	4614      	mov	r4, r2
 800a65a:	4698      	mov	r8, r3
 800a65c:	4606      	mov	r6, r0
 800a65e:	b118      	cbz	r0, 800a668 <_vfiprintf_r+0x18>
 800a660:	6983      	ldr	r3, [r0, #24]
 800a662:	b90b      	cbnz	r3, 800a668 <_vfiprintf_r+0x18>
 800a664:	f7ff fd5e 	bl	800a124 <__sinit>
 800a668:	4b89      	ldr	r3, [pc, #548]	; (800a890 <_vfiprintf_r+0x240>)
 800a66a:	429d      	cmp	r5, r3
 800a66c:	d11b      	bne.n	800a6a6 <_vfiprintf_r+0x56>
 800a66e:	6875      	ldr	r5, [r6, #4]
 800a670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a672:	07d9      	lsls	r1, r3, #31
 800a674:	d405      	bmi.n	800a682 <_vfiprintf_r+0x32>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_vfiprintf_r+0x32>
 800a67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a67e:	f7ff fdef 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	071b      	lsls	r3, r3, #28
 800a686:	d501      	bpl.n	800a68c <_vfiprintf_r+0x3c>
 800a688:	692b      	ldr	r3, [r5, #16]
 800a68a:	b9eb      	cbnz	r3, 800a6c8 <_vfiprintf_r+0x78>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff fbc0 	bl	8009e14 <__swsetup_r>
 800a694:	b1c0      	cbz	r0, 800a6c8 <_vfiprintf_r+0x78>
 800a696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a698:	07dc      	lsls	r4, r3, #31
 800a69a:	d50e      	bpl.n	800a6ba <_vfiprintf_r+0x6a>
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a0:	b01d      	add	sp, #116	; 0x74
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	4b7b      	ldr	r3, [pc, #492]	; (800a894 <_vfiprintf_r+0x244>)
 800a6a8:	429d      	cmp	r5, r3
 800a6aa:	d101      	bne.n	800a6b0 <_vfiprintf_r+0x60>
 800a6ac:	68b5      	ldr	r5, [r6, #8]
 800a6ae:	e7df      	b.n	800a670 <_vfiprintf_r+0x20>
 800a6b0:	4b79      	ldr	r3, [pc, #484]	; (800a898 <_vfiprintf_r+0x248>)
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	bf08      	it	eq
 800a6b6:	68f5      	ldreq	r5, [r6, #12]
 800a6b8:	e7da      	b.n	800a670 <_vfiprintf_r+0x20>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	0598      	lsls	r0, r3, #22
 800a6be:	d4ed      	bmi.n	800a69c <_vfiprintf_r+0x4c>
 800a6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c2:	f7ff fdce 	bl	800a262 <__retarget_lock_release_recursive>
 800a6c6:	e7e9      	b.n	800a69c <_vfiprintf_r+0x4c>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d6:	2330      	movs	r3, #48	; 0x30
 800a6d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a89c <_vfiprintf_r+0x24c>
 800a6dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e0:	f04f 0901 	mov.w	r9, #1
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	469a      	mov	sl, r3
 800a6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ec:	b10a      	cbz	r2, 800a6f2 <_vfiprintf_r+0xa2>
 800a6ee:	2a25      	cmp	r2, #37	; 0x25
 800a6f0:	d1f9      	bne.n	800a6e6 <_vfiprintf_r+0x96>
 800a6f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f6:	d00b      	beq.n	800a710 <_vfiprintf_r+0xc0>
 800a6f8:	465b      	mov	r3, fp
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7ff ff93 	bl	800a62a <__sfputs_r>
 800a704:	3001      	adds	r0, #1
 800a706:	f000 80aa 	beq.w	800a85e <_vfiprintf_r+0x20e>
 800a70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70c:	445a      	add	r2, fp
 800a70e:	9209      	str	r2, [sp, #36]	; 0x24
 800a710:	f89a 3000 	ldrb.w	r3, [sl]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80a2 	beq.w	800a85e <_vfiprintf_r+0x20e>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a724:	f10a 0a01 	add.w	sl, sl, #1
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a730:	931a      	str	r3, [sp, #104]	; 0x68
 800a732:	4654      	mov	r4, sl
 800a734:	2205      	movs	r2, #5
 800a736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73a:	4858      	ldr	r0, [pc, #352]	; (800a89c <_vfiprintf_r+0x24c>)
 800a73c:	f7f5 fd50 	bl	80001e0 <memchr>
 800a740:	9a04      	ldr	r2, [sp, #16]
 800a742:	b9d8      	cbnz	r0, 800a77c <_vfiprintf_r+0x12c>
 800a744:	06d1      	lsls	r1, r2, #27
 800a746:	bf44      	itt	mi
 800a748:	2320      	movmi	r3, #32
 800a74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74e:	0713      	lsls	r3, r2, #28
 800a750:	bf44      	itt	mi
 800a752:	232b      	movmi	r3, #43	; 0x2b
 800a754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b2a      	cmp	r3, #42	; 0x2a
 800a75e:	d015      	beq.n	800a78c <_vfiprintf_r+0x13c>
 800a760:	9a07      	ldr	r2, [sp, #28]
 800a762:	4654      	mov	r4, sl
 800a764:	2000      	movs	r0, #0
 800a766:	f04f 0c0a 	mov.w	ip, #10
 800a76a:	4621      	mov	r1, r4
 800a76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a770:	3b30      	subs	r3, #48	; 0x30
 800a772:	2b09      	cmp	r3, #9
 800a774:	d94e      	bls.n	800a814 <_vfiprintf_r+0x1c4>
 800a776:	b1b0      	cbz	r0, 800a7a6 <_vfiprintf_r+0x156>
 800a778:	9207      	str	r2, [sp, #28]
 800a77a:	e014      	b.n	800a7a6 <_vfiprintf_r+0x156>
 800a77c:	eba0 0308 	sub.w	r3, r0, r8
 800a780:	fa09 f303 	lsl.w	r3, r9, r3
 800a784:	4313      	orrs	r3, r2
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	46a2      	mov	sl, r4
 800a78a:	e7d2      	b.n	800a732 <_vfiprintf_r+0xe2>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1d19      	adds	r1, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9103      	str	r1, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfbb      	ittet	lt
 800a798:	425b      	neglt	r3, r3
 800a79a:	f042 0202 	orrlt.w	r2, r2, #2
 800a79e:	9307      	strge	r3, [sp, #28]
 800a7a0:	9307      	strlt	r3, [sp, #28]
 800a7a2:	bfb8      	it	lt
 800a7a4:	9204      	strlt	r2, [sp, #16]
 800a7a6:	7823      	ldrb	r3, [r4, #0]
 800a7a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7aa:	d10c      	bne.n	800a7c6 <_vfiprintf_r+0x176>
 800a7ac:	7863      	ldrb	r3, [r4, #1]
 800a7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b0:	d135      	bne.n	800a81e <_vfiprintf_r+0x1ce>
 800a7b2:	9b03      	ldr	r3, [sp, #12]
 800a7b4:	1d1a      	adds	r2, r3, #4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	9203      	str	r2, [sp, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bfb8      	it	lt
 800a7be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7c2:	3402      	adds	r4, #2
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8ac <_vfiprintf_r+0x25c>
 800a7ca:	7821      	ldrb	r1, [r4, #0]
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	f7f5 fd06 	bl	80001e0 <memchr>
 800a7d4:	b140      	cbz	r0, 800a7e8 <_vfiprintf_r+0x198>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	eba0 000a 	sub.w	r0, r0, sl
 800a7dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	4303      	orrs	r3, r0
 800a7e4:	3401      	adds	r4, #1
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ec:	482c      	ldr	r0, [pc, #176]	; (800a8a0 <_vfiprintf_r+0x250>)
 800a7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f2:	2206      	movs	r2, #6
 800a7f4:	f7f5 fcf4 	bl	80001e0 <memchr>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d03f      	beq.n	800a87c <_vfiprintf_r+0x22c>
 800a7fc:	4b29      	ldr	r3, [pc, #164]	; (800a8a4 <_vfiprintf_r+0x254>)
 800a7fe:	bb1b      	cbnz	r3, 800a848 <_vfiprintf_r+0x1f8>
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	3307      	adds	r3, #7
 800a804:	f023 0307 	bic.w	r3, r3, #7
 800a808:	3308      	adds	r3, #8
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80e:	443b      	add	r3, r7
 800a810:	9309      	str	r3, [sp, #36]	; 0x24
 800a812:	e767      	b.n	800a6e4 <_vfiprintf_r+0x94>
 800a814:	fb0c 3202 	mla	r2, ip, r2, r3
 800a818:	460c      	mov	r4, r1
 800a81a:	2001      	movs	r0, #1
 800a81c:	e7a5      	b.n	800a76a <_vfiprintf_r+0x11a>
 800a81e:	2300      	movs	r3, #0
 800a820:	3401      	adds	r4, #1
 800a822:	9305      	str	r3, [sp, #20]
 800a824:	4619      	mov	r1, r3
 800a826:	f04f 0c0a 	mov.w	ip, #10
 800a82a:	4620      	mov	r0, r4
 800a82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a830:	3a30      	subs	r2, #48	; 0x30
 800a832:	2a09      	cmp	r2, #9
 800a834:	d903      	bls.n	800a83e <_vfiprintf_r+0x1ee>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0c5      	beq.n	800a7c6 <_vfiprintf_r+0x176>
 800a83a:	9105      	str	r1, [sp, #20]
 800a83c:	e7c3      	b.n	800a7c6 <_vfiprintf_r+0x176>
 800a83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a842:	4604      	mov	r4, r0
 800a844:	2301      	movs	r3, #1
 800a846:	e7f0      	b.n	800a82a <_vfiprintf_r+0x1da>
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <_vfiprintf_r+0x258>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4630      	mov	r0, r6
 800a854:	f3af 8000 	nop.w
 800a858:	4607      	mov	r7, r0
 800a85a:	1c78      	adds	r0, r7, #1
 800a85c:	d1d6      	bne.n	800a80c <_vfiprintf_r+0x1bc>
 800a85e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a860:	07d9      	lsls	r1, r3, #31
 800a862:	d405      	bmi.n	800a870 <_vfiprintf_r+0x220>
 800a864:	89ab      	ldrh	r3, [r5, #12]
 800a866:	059a      	lsls	r2, r3, #22
 800a868:	d402      	bmi.n	800a870 <_vfiprintf_r+0x220>
 800a86a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a86c:	f7ff fcf9 	bl	800a262 <__retarget_lock_release_recursive>
 800a870:	89ab      	ldrh	r3, [r5, #12]
 800a872:	065b      	lsls	r3, r3, #25
 800a874:	f53f af12 	bmi.w	800a69c <_vfiprintf_r+0x4c>
 800a878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a87a:	e711      	b.n	800a6a0 <_vfiprintf_r+0x50>
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_vfiprintf_r+0x258>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	4630      	mov	r0, r6
 800a888:	f000 f880 	bl	800a98c <_printf_i>
 800a88c:	e7e4      	b.n	800a858 <_vfiprintf_r+0x208>
 800a88e:	bf00      	nop
 800a890:	0800b4d8 	.word	0x0800b4d8
 800a894:	0800b4f8 	.word	0x0800b4f8
 800a898:	0800b4b8 	.word	0x0800b4b8
 800a89c:	0800b518 	.word	0x0800b518
 800a8a0:	0800b522 	.word	0x0800b522
 800a8a4:	00000000 	.word	0x00000000
 800a8a8:	0800a62b 	.word	0x0800a62b
 800a8ac:	0800b51e 	.word	0x0800b51e

0800a8b0 <_printf_common>:
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	4699      	mov	r9, r3
 800a8b8:	688a      	ldr	r2, [r1, #8]
 800a8ba:	690b      	ldr	r3, [r1, #16]
 800a8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bfb8      	it	lt
 800a8c4:	4613      	movlt	r3, r2
 800a8c6:	6033      	str	r3, [r6, #0]
 800a8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	b10a      	cbz	r2, 800a8d6 <_printf_common+0x26>
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	0699      	lsls	r1, r3, #26
 800a8da:	bf42      	ittt	mi
 800a8dc:	6833      	ldrmi	r3, [r6, #0]
 800a8de:	3302      	addmi	r3, #2
 800a8e0:	6033      	strmi	r3, [r6, #0]
 800a8e2:	6825      	ldr	r5, [r4, #0]
 800a8e4:	f015 0506 	ands.w	r5, r5, #6
 800a8e8:	d106      	bne.n	800a8f8 <_printf_common+0x48>
 800a8ea:	f104 0a19 	add.w	sl, r4, #25
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	6832      	ldr	r2, [r6, #0]
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	dc26      	bgt.n	800a946 <_printf_common+0x96>
 800a8f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8fc:	1e13      	subs	r3, r2, #0
 800a8fe:	6822      	ldr	r2, [r4, #0]
 800a900:	bf18      	it	ne
 800a902:	2301      	movne	r3, #1
 800a904:	0692      	lsls	r2, r2, #26
 800a906:	d42b      	bmi.n	800a960 <_printf_common+0xb0>
 800a908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a90c:	4649      	mov	r1, r9
 800a90e:	4638      	mov	r0, r7
 800a910:	47c0      	blx	r8
 800a912:	3001      	adds	r0, #1
 800a914:	d01e      	beq.n	800a954 <_printf_common+0xa4>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	68e5      	ldr	r5, [r4, #12]
 800a91a:	6832      	ldr	r2, [r6, #0]
 800a91c:	f003 0306 	and.w	r3, r3, #6
 800a920:	2b04      	cmp	r3, #4
 800a922:	bf08      	it	eq
 800a924:	1aad      	subeq	r5, r5, r2
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	6922      	ldr	r2, [r4, #16]
 800a92a:	bf0c      	ite	eq
 800a92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a930:	2500      	movne	r5, #0
 800a932:	4293      	cmp	r3, r2
 800a934:	bfc4      	itt	gt
 800a936:	1a9b      	subgt	r3, r3, r2
 800a938:	18ed      	addgt	r5, r5, r3
 800a93a:	2600      	movs	r6, #0
 800a93c:	341a      	adds	r4, #26
 800a93e:	42b5      	cmp	r5, r6
 800a940:	d11a      	bne.n	800a978 <_printf_common+0xc8>
 800a942:	2000      	movs	r0, #0
 800a944:	e008      	b.n	800a958 <_printf_common+0xa8>
 800a946:	2301      	movs	r3, #1
 800a948:	4652      	mov	r2, sl
 800a94a:	4649      	mov	r1, r9
 800a94c:	4638      	mov	r0, r7
 800a94e:	47c0      	blx	r8
 800a950:	3001      	adds	r0, #1
 800a952:	d103      	bne.n	800a95c <_printf_common+0xac>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95c:	3501      	adds	r5, #1
 800a95e:	e7c6      	b.n	800a8ee <_printf_common+0x3e>
 800a960:	18e1      	adds	r1, r4, r3
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	2030      	movs	r0, #48	; 0x30
 800a966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a96a:	4422      	add	r2, r4
 800a96c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a974:	3302      	adds	r3, #2
 800a976:	e7c7      	b.n	800a908 <_printf_common+0x58>
 800a978:	2301      	movs	r3, #1
 800a97a:	4622      	mov	r2, r4
 800a97c:	4649      	mov	r1, r9
 800a97e:	4638      	mov	r0, r7
 800a980:	47c0      	blx	r8
 800a982:	3001      	adds	r0, #1
 800a984:	d0e6      	beq.n	800a954 <_printf_common+0xa4>
 800a986:	3601      	adds	r6, #1
 800a988:	e7d9      	b.n	800a93e <_printf_common+0x8e>
	...

0800a98c <_printf_i>:
 800a98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	460c      	mov	r4, r1
 800a992:	4691      	mov	r9, r2
 800a994:	7e27      	ldrb	r7, [r4, #24]
 800a996:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a998:	2f78      	cmp	r7, #120	; 0x78
 800a99a:	4680      	mov	r8, r0
 800a99c:	469a      	mov	sl, r3
 800a99e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9a2:	d807      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9a4:	2f62      	cmp	r7, #98	; 0x62
 800a9a6:	d80a      	bhi.n	800a9be <_printf_i+0x32>
 800a9a8:	2f00      	cmp	r7, #0
 800a9aa:	f000 80d8 	beq.w	800ab5e <_printf_i+0x1d2>
 800a9ae:	2f58      	cmp	r7, #88	; 0x58
 800a9b0:	f000 80a3 	beq.w	800aafa <_printf_i+0x16e>
 800a9b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9bc:	e03a      	b.n	800aa34 <_printf_i+0xa8>
 800a9be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9c2:	2b15      	cmp	r3, #21
 800a9c4:	d8f6      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9c6:	a001      	add	r0, pc, #4	; (adr r0, 800a9cc <_printf_i+0x40>)
 800a9c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a9cc:	0800aa25 	.word	0x0800aa25
 800a9d0:	0800aa39 	.word	0x0800aa39
 800a9d4:	0800a9b5 	.word	0x0800a9b5
 800a9d8:	0800a9b5 	.word	0x0800a9b5
 800a9dc:	0800a9b5 	.word	0x0800a9b5
 800a9e0:	0800a9b5 	.word	0x0800a9b5
 800a9e4:	0800aa39 	.word	0x0800aa39
 800a9e8:	0800a9b5 	.word	0x0800a9b5
 800a9ec:	0800a9b5 	.word	0x0800a9b5
 800a9f0:	0800a9b5 	.word	0x0800a9b5
 800a9f4:	0800a9b5 	.word	0x0800a9b5
 800a9f8:	0800ab45 	.word	0x0800ab45
 800a9fc:	0800aa69 	.word	0x0800aa69
 800aa00:	0800ab27 	.word	0x0800ab27
 800aa04:	0800a9b5 	.word	0x0800a9b5
 800aa08:	0800a9b5 	.word	0x0800a9b5
 800aa0c:	0800ab67 	.word	0x0800ab67
 800aa10:	0800a9b5 	.word	0x0800a9b5
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800a9b5 	.word	0x0800a9b5
 800aa1c:	0800a9b5 	.word	0x0800a9b5
 800aa20:	0800ab2f 	.word	0x0800ab2f
 800aa24:	680b      	ldr	r3, [r1, #0]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	600a      	str	r2, [r1, #0]
 800aa2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa34:	2301      	movs	r3, #1
 800aa36:	e0a3      	b.n	800ab80 <_printf_i+0x1f4>
 800aa38:	6825      	ldr	r5, [r4, #0]
 800aa3a:	6808      	ldr	r0, [r1, #0]
 800aa3c:	062e      	lsls	r6, r5, #24
 800aa3e:	f100 0304 	add.w	r3, r0, #4
 800aa42:	d50a      	bpl.n	800aa5a <_printf_i+0xce>
 800aa44:	6805      	ldr	r5, [r0, #0]
 800aa46:	600b      	str	r3, [r1, #0]
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	da03      	bge.n	800aa54 <_printf_i+0xc8>
 800aa4c:	232d      	movs	r3, #45	; 0x2d
 800aa4e:	426d      	negs	r5, r5
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa54:	485e      	ldr	r0, [pc, #376]	; (800abd0 <_printf_i+0x244>)
 800aa56:	230a      	movs	r3, #10
 800aa58:	e019      	b.n	800aa8e <_printf_i+0x102>
 800aa5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa5e:	6805      	ldr	r5, [r0, #0]
 800aa60:	600b      	str	r3, [r1, #0]
 800aa62:	bf18      	it	ne
 800aa64:	b22d      	sxthne	r5, r5
 800aa66:	e7ef      	b.n	800aa48 <_printf_i+0xbc>
 800aa68:	680b      	ldr	r3, [r1, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	1d18      	adds	r0, r3, #4
 800aa6e:	6008      	str	r0, [r1, #0]
 800aa70:	0628      	lsls	r0, r5, #24
 800aa72:	d501      	bpl.n	800aa78 <_printf_i+0xec>
 800aa74:	681d      	ldr	r5, [r3, #0]
 800aa76:	e002      	b.n	800aa7e <_printf_i+0xf2>
 800aa78:	0669      	lsls	r1, r5, #25
 800aa7a:	d5fb      	bpl.n	800aa74 <_printf_i+0xe8>
 800aa7c:	881d      	ldrh	r5, [r3, #0]
 800aa7e:	4854      	ldr	r0, [pc, #336]	; (800abd0 <_printf_i+0x244>)
 800aa80:	2f6f      	cmp	r7, #111	; 0x6f
 800aa82:	bf0c      	ite	eq
 800aa84:	2308      	moveq	r3, #8
 800aa86:	230a      	movne	r3, #10
 800aa88:	2100      	movs	r1, #0
 800aa8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa8e:	6866      	ldr	r6, [r4, #4]
 800aa90:	60a6      	str	r6, [r4, #8]
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	bfa2      	ittt	ge
 800aa96:	6821      	ldrge	r1, [r4, #0]
 800aa98:	f021 0104 	bicge.w	r1, r1, #4
 800aa9c:	6021      	strge	r1, [r4, #0]
 800aa9e:	b90d      	cbnz	r5, 800aaa4 <_printf_i+0x118>
 800aaa0:	2e00      	cmp	r6, #0
 800aaa2:	d04d      	beq.n	800ab40 <_printf_i+0x1b4>
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaaa:	fb03 5711 	mls	r7, r3, r1, r5
 800aaae:	5dc7      	ldrb	r7, [r0, r7]
 800aab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aab4:	462f      	mov	r7, r5
 800aab6:	42bb      	cmp	r3, r7
 800aab8:	460d      	mov	r5, r1
 800aaba:	d9f4      	bls.n	800aaa6 <_printf_i+0x11a>
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d10b      	bne.n	800aad8 <_printf_i+0x14c>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	07df      	lsls	r7, r3, #31
 800aac4:	d508      	bpl.n	800aad8 <_printf_i+0x14c>
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	4299      	cmp	r1, r3
 800aacc:	bfde      	ittt	le
 800aace:	2330      	movle	r3, #48	; 0x30
 800aad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aad4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800aad8:	1b92      	subs	r2, r2, r6
 800aada:	6122      	str	r2, [r4, #16]
 800aadc:	f8cd a000 	str.w	sl, [sp]
 800aae0:	464b      	mov	r3, r9
 800aae2:	aa03      	add	r2, sp, #12
 800aae4:	4621      	mov	r1, r4
 800aae6:	4640      	mov	r0, r8
 800aae8:	f7ff fee2 	bl	800a8b0 <_printf_common>
 800aaec:	3001      	adds	r0, #1
 800aaee:	d14c      	bne.n	800ab8a <_printf_i+0x1fe>
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaf4:	b004      	add	sp, #16
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	4835      	ldr	r0, [pc, #212]	; (800abd0 <_printf_i+0x244>)
 800aafc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	680e      	ldr	r6, [r1, #0]
 800ab04:	061f      	lsls	r7, r3, #24
 800ab06:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab0a:	600e      	str	r6, [r1, #0]
 800ab0c:	d514      	bpl.n	800ab38 <_printf_i+0x1ac>
 800ab0e:	07d9      	lsls	r1, r3, #31
 800ab10:	bf44      	itt	mi
 800ab12:	f043 0320 	orrmi.w	r3, r3, #32
 800ab16:	6023      	strmi	r3, [r4, #0]
 800ab18:	b91d      	cbnz	r5, 800ab22 <_printf_i+0x196>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f023 0320 	bic.w	r3, r3, #32
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	2310      	movs	r3, #16
 800ab24:	e7b0      	b.n	800aa88 <_printf_i+0xfc>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f043 0320 	orr.w	r3, r3, #32
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	2378      	movs	r3, #120	; 0x78
 800ab30:	4828      	ldr	r0, [pc, #160]	; (800abd4 <_printf_i+0x248>)
 800ab32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab36:	e7e3      	b.n	800ab00 <_printf_i+0x174>
 800ab38:	065e      	lsls	r6, r3, #25
 800ab3a:	bf48      	it	mi
 800ab3c:	b2ad      	uxthmi	r5, r5
 800ab3e:	e7e6      	b.n	800ab0e <_printf_i+0x182>
 800ab40:	4616      	mov	r6, r2
 800ab42:	e7bb      	b.n	800aabc <_printf_i+0x130>
 800ab44:	680b      	ldr	r3, [r1, #0]
 800ab46:	6826      	ldr	r6, [r4, #0]
 800ab48:	6960      	ldr	r0, [r4, #20]
 800ab4a:	1d1d      	adds	r5, r3, #4
 800ab4c:	600d      	str	r5, [r1, #0]
 800ab4e:	0635      	lsls	r5, r6, #24
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	d501      	bpl.n	800ab58 <_printf_i+0x1cc>
 800ab54:	6018      	str	r0, [r3, #0]
 800ab56:	e002      	b.n	800ab5e <_printf_i+0x1d2>
 800ab58:	0671      	lsls	r1, r6, #25
 800ab5a:	d5fb      	bpl.n	800ab54 <_printf_i+0x1c8>
 800ab5c:	8018      	strh	r0, [r3, #0]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6123      	str	r3, [r4, #16]
 800ab62:	4616      	mov	r6, r2
 800ab64:	e7ba      	b.n	800aadc <_printf_i+0x150>
 800ab66:	680b      	ldr	r3, [r1, #0]
 800ab68:	1d1a      	adds	r2, r3, #4
 800ab6a:	600a      	str	r2, [r1, #0]
 800ab6c:	681e      	ldr	r6, [r3, #0]
 800ab6e:	6862      	ldr	r2, [r4, #4]
 800ab70:	2100      	movs	r1, #0
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7f5 fb34 	bl	80001e0 <memchr>
 800ab78:	b108      	cbz	r0, 800ab7e <_printf_i+0x1f2>
 800ab7a:	1b80      	subs	r0, r0, r6
 800ab7c:	6060      	str	r0, [r4, #4]
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	2300      	movs	r3, #0
 800ab84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab88:	e7a8      	b.n	800aadc <_printf_i+0x150>
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	4649      	mov	r1, r9
 800ab90:	4640      	mov	r0, r8
 800ab92:	47d0      	blx	sl
 800ab94:	3001      	adds	r0, #1
 800ab96:	d0ab      	beq.n	800aaf0 <_printf_i+0x164>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	079b      	lsls	r3, r3, #30
 800ab9c:	d413      	bmi.n	800abc6 <_printf_i+0x23a>
 800ab9e:	68e0      	ldr	r0, [r4, #12]
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	4298      	cmp	r0, r3
 800aba4:	bfb8      	it	lt
 800aba6:	4618      	movlt	r0, r3
 800aba8:	e7a4      	b.n	800aaf4 <_printf_i+0x168>
 800abaa:	2301      	movs	r3, #1
 800abac:	4632      	mov	r2, r6
 800abae:	4649      	mov	r1, r9
 800abb0:	4640      	mov	r0, r8
 800abb2:	47d0      	blx	sl
 800abb4:	3001      	adds	r0, #1
 800abb6:	d09b      	beq.n	800aaf0 <_printf_i+0x164>
 800abb8:	3501      	adds	r5, #1
 800abba:	68e3      	ldr	r3, [r4, #12]
 800abbc:	9903      	ldr	r1, [sp, #12]
 800abbe:	1a5b      	subs	r3, r3, r1
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dcf2      	bgt.n	800abaa <_printf_i+0x21e>
 800abc4:	e7eb      	b.n	800ab9e <_printf_i+0x212>
 800abc6:	2500      	movs	r5, #0
 800abc8:	f104 0619 	add.w	r6, r4, #25
 800abcc:	e7f5      	b.n	800abba <_printf_i+0x22e>
 800abce:	bf00      	nop
 800abd0:	0800b529 	.word	0x0800b529
 800abd4:	0800b53a 	.word	0x0800b53a

0800abd8 <__sread>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	460c      	mov	r4, r1
 800abdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe0:	f000 f8e2 	bl	800ada8 <_read_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	bfab      	itete	ge
 800abe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abea:	89a3      	ldrhlt	r3, [r4, #12]
 800abec:	181b      	addge	r3, r3, r0
 800abee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abf2:	bfac      	ite	ge
 800abf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800abf6:	81a3      	strhlt	r3, [r4, #12]
 800abf8:	bd10      	pop	{r4, pc}

0800abfa <__swrite>:
 800abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfe:	461f      	mov	r7, r3
 800ac00:	898b      	ldrh	r3, [r1, #12]
 800ac02:	05db      	lsls	r3, r3, #23
 800ac04:	4605      	mov	r5, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	4616      	mov	r6, r2
 800ac0a:	d505      	bpl.n	800ac18 <__swrite+0x1e>
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	2302      	movs	r3, #2
 800ac12:	2200      	movs	r2, #0
 800ac14:	f000 f868 	bl	800ace8 <_lseek_r>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	f000 b817 	b.w	800ac60 <_write_r>

0800ac32 <__sseek>:
 800ac32:	b510      	push	{r4, lr}
 800ac34:	460c      	mov	r4, r1
 800ac36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3a:	f000 f855 	bl	800ace8 <_lseek_r>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	bf15      	itete	ne
 800ac44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac4e:	81a3      	strheq	r3, [r4, #12]
 800ac50:	bf18      	it	ne
 800ac52:	81a3      	strhne	r3, [r4, #12]
 800ac54:	bd10      	pop	{r4, pc}

0800ac56 <__sclose>:
 800ac56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5a:	f000 b813 	b.w	800ac84 <_close_r>
	...

0800ac60 <_write_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_write_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f6 fb8a 	bl	8001388 <_write>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_write_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_write_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20004420 	.word	0x20004420

0800ac84 <_close_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d06      	ldr	r5, [pc, #24]	; (800aca0 <_close_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7f6 ff9b 	bl	8001bca <_close>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_close_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_close_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20004420 	.word	0x20004420

0800aca4 <_fstat_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d07      	ldr	r5, [pc, #28]	; (800acc4 <_fstat_r+0x20>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	f7f6 ff96 	bl	8001be2 <_fstat>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d102      	bne.n	800acc0 <_fstat_r+0x1c>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	b103      	cbz	r3, 800acc0 <_fstat_r+0x1c>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	bf00      	nop
 800acc4:	20004420 	.word	0x20004420

0800acc8 <_isatty_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d06      	ldr	r5, [pc, #24]	; (800ace4 <_isatty_r+0x1c>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7f6 ff95 	bl	8001c02 <_isatty>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d102      	bne.n	800ace2 <_isatty_r+0x1a>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	b103      	cbz	r3, 800ace2 <_isatty_r+0x1a>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	20004420 	.word	0x20004420

0800ace8 <_lseek_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	; (800ad08 <_lseek_r+0x20>)
 800acec:	4604      	mov	r4, r0
 800acee:	4608      	mov	r0, r1
 800acf0:	4611      	mov	r1, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f7f6 ff8e 	bl	8001c18 <_lseek>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_lseek_r+0x1e>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_lseek_r+0x1e>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20004420 	.word	0x20004420

0800ad0c <memcpy>:
 800ad0c:	440a      	add	r2, r1
 800ad0e:	4291      	cmp	r1, r2
 800ad10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad14:	d100      	bne.n	800ad18 <memcpy+0xc>
 800ad16:	4770      	bx	lr
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad22:	4291      	cmp	r1, r2
 800ad24:	d1f9      	bne.n	800ad1a <memcpy+0xe>
 800ad26:	bd10      	pop	{r4, pc}

0800ad28 <memmove>:
 800ad28:	4288      	cmp	r0, r1
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	eb01 0402 	add.w	r4, r1, r2
 800ad30:	d902      	bls.n	800ad38 <memmove+0x10>
 800ad32:	4284      	cmp	r4, r0
 800ad34:	4623      	mov	r3, r4
 800ad36:	d807      	bhi.n	800ad48 <memmove+0x20>
 800ad38:	1e43      	subs	r3, r0, #1
 800ad3a:	42a1      	cmp	r1, r4
 800ad3c:	d008      	beq.n	800ad50 <memmove+0x28>
 800ad3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad46:	e7f8      	b.n	800ad3a <memmove+0x12>
 800ad48:	4402      	add	r2, r0
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	428a      	cmp	r2, r1
 800ad4e:	d100      	bne.n	800ad52 <memmove+0x2a>
 800ad50:	bd10      	pop	{r4, pc}
 800ad52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad5a:	e7f7      	b.n	800ad4c <memmove+0x24>

0800ad5c <_realloc_r>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	4607      	mov	r7, r0
 800ad60:	4614      	mov	r4, r2
 800ad62:	460e      	mov	r6, r1
 800ad64:	b921      	cbnz	r1, 800ad70 <_realloc_r+0x14>
 800ad66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	f7fe bee8 	b.w	8009b40 <_malloc_r>
 800ad70:	b922      	cbnz	r2, 800ad7c <_realloc_r+0x20>
 800ad72:	f7fe fe95 	bl	8009aa0 <_free_r>
 800ad76:	4625      	mov	r5, r4
 800ad78:	4628      	mov	r0, r5
 800ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad7c:	f000 f826 	bl	800adcc <_malloc_usable_size_r>
 800ad80:	42a0      	cmp	r0, r4
 800ad82:	d20f      	bcs.n	800ada4 <_realloc_r+0x48>
 800ad84:	4621      	mov	r1, r4
 800ad86:	4638      	mov	r0, r7
 800ad88:	f7fe feda 	bl	8009b40 <_malloc_r>
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0f2      	beq.n	800ad78 <_realloc_r+0x1c>
 800ad92:	4631      	mov	r1, r6
 800ad94:	4622      	mov	r2, r4
 800ad96:	f7ff ffb9 	bl	800ad0c <memcpy>
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7fe fe7f 	bl	8009aa0 <_free_r>
 800ada2:	e7e9      	b.n	800ad78 <_realloc_r+0x1c>
 800ada4:	4635      	mov	r5, r6
 800ada6:	e7e7      	b.n	800ad78 <_realloc_r+0x1c>

0800ada8 <_read_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_read_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f6 feea 	bl	8001b90 <_read>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_read_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_read_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20004420 	.word	0x20004420

0800adcc <_malloc_usable_size_r>:
 800adcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add0:	1f18      	subs	r0, r3, #4
 800add2:	2b00      	cmp	r3, #0
 800add4:	bfbc      	itt	lt
 800add6:	580b      	ldrlt	r3, [r1, r0]
 800add8:	18c0      	addlt	r0, r0, r3
 800adda:	4770      	bx	lr

0800addc <_init>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr

0800ade8 <_fini>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr
