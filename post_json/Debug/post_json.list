
post_json.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000053e8  08012dd4  08012dd4  00022dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181bc  080181bc  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080181bc  080181bc  000281bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181c4  080181c4  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080181c4  080181c4  000281c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181c8  080181c8  000281c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080181cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          0001747c  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20017510  20017510  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031d26  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fa8  00000000  00000000  00061dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00067d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c8  00000000  00000000  000691b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd22  00000000  00000000  0006a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002502b  00000000  00000000  000982a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda7b  00000000  00000000  000bd2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019ad48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d44  00000000  00000000  0019ad9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012dbc 	.word	0x08012dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08012dbc 	.word	0x08012dbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
int indx1 = 0;
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "tab", "test", "jsontag" }; //
char const **TAGS = TAGCHAR;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af08      	add	r7, sp, #32
 800059e:	6178      	str	r0, [r7, #20]
 80005a0:	6139      	str	r1, [r7, #16]
 80005a2:	60fa      	str	r2, [r7, #12]
	switch (iIndex) {
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d022      	beq.n	80005f0 <ssi_handler+0x58>
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	f300 80ca 	bgt.w	8000746 <ssi_handler+0x1ae>
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d003      	beq.n	80005c0 <ssi_handler+0x28>
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d006      	beq.n	80005cc <ssi_handler+0x34>
		memset(json, '\0', sizeof(json));
		memset(arrline, '\0', sizeof(arrline));
		return strlen(pcInsert);
		break;
	default:
		break;
 80005be:	e0c2      	b.n	8000746 <ssi_handler+0x1ae>
		return strlen(pcInsert);
 80005c0:	6938      	ldr	r0, [r7, #16]
 80005c2:	f7ff fe0f 	bl	80001e4 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	e0be      	b.n	800074a <ssi_handler+0x1b2>
		indx1 += 1;
 80005cc:	4b61      	ldr	r3, [pc, #388]	; (8000754 <ssi_handler+0x1bc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a60      	ldr	r2, [pc, #384]	; (8000754 <ssi_handler+0x1bc>)
 80005d4:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 80005d6:	4b5f      	ldr	r3, [pc, #380]	; (8000754 <ssi_handler+0x1bc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	495e      	ldr	r1, [pc, #376]	; (8000758 <ssi_handler+0x1c0>)
 80005de:	6938      	ldr	r0, [r7, #16]
 80005e0:	f011 f9ee 	bl	80119c0 <siprintf>
		return strlen(pcInsert);
 80005e4:	6938      	ldr	r0, [r7, #16]
 80005e6:	f7ff fdfd 	bl	80001e4 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	e0ac      	b.n	800074a <ssi_handler+0x1b2>
		strcat(json, "[");
 80005f0:	485a      	ldr	r0, [pc, #360]	; (800075c <ssi_handler+0x1c4>)
 80005f2:	f7ff fdf7 	bl	80001e4 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <ssi_handler+0x1c4>)
 80005fc:	4413      	add	r3, r2
 80005fe:	4958      	ldr	r1, [pc, #352]	; (8000760 <ssi_handler+0x1c8>)
 8000600:	461a      	mov	r2, r3
 8000602:	460b      	mov	r3, r1
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i <= tabline; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	e06f      	b.n	80006ee <ssi_handler+0x156>
		              T[i].pulluptype, T[i].bounceinterval, T[i].holdinterval, T[i].repeat, T[i].repeatinterval, T[i].doubleclickinterval, T[i].preventclick, T[i].infofield, T[i].onoff);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2258      	movs	r2, #88	; 0x58
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	4a53      	ldr	r2, [pc, #332]	; (8000764 <ssi_handler+0x1cc>)
 8000618:	eb03 0c02 	add.w	ip, r3, r2
		      sprintf(arrline,
 800061c:	4a51      	ldr	r2, [pc, #324]	; (8000764 <ssi_handler+0x1cc>)
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	2158      	movs	r1, #88	; 0x58
 8000622:	fb01 f303 	mul.w	r3, r1, r3
 8000626:	4413      	add	r3, r2
 8000628:	3328      	adds	r3, #40	; 0x28
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4a4d      	ldr	r2, [pc, #308]	; (8000764 <ssi_handler+0x1cc>)
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	2158      	movs	r1, #88	; 0x58
 8000634:	fb01 f303 	mul.w	r3, r1, r3
 8000638:	4413      	add	r3, r2
 800063a:	332c      	adds	r3, #44	; 0x2c
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <ssi_handler+0x1cc>)
 8000640:	69fa      	ldr	r2, [r7, #28]
 8000642:	2058      	movs	r0, #88	; 0x58
 8000644:	fb00 f202 	mul.w	r2, r0, r2
 8000648:	440a      	add	r2, r1
 800064a:	3230      	adds	r2, #48	; 0x30
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	4844      	ldr	r0, [pc, #272]	; (8000764 <ssi_handler+0x1cc>)
 8000652:	69f9      	ldr	r1, [r7, #28]
 8000654:	2458      	movs	r4, #88	; 0x58
 8000656:	fb04 f101 	mul.w	r1, r4, r1
 800065a:	4401      	add	r1, r0
 800065c:	3134      	adds	r1, #52	; 0x34
 800065e:	6809      	ldr	r1, [r1, #0]
 8000660:	4c40      	ldr	r4, [pc, #256]	; (8000764 <ssi_handler+0x1cc>)
 8000662:	69f8      	ldr	r0, [r7, #28]
 8000664:	2558      	movs	r5, #88	; 0x58
 8000666:	fb05 f000 	mul.w	r0, r5, r0
 800066a:	4420      	add	r0, r4
 800066c:	3038      	adds	r0, #56	; 0x38
 800066e:	6800      	ldr	r0, [r0, #0]
 8000670:	4d3c      	ldr	r5, [pc, #240]	; (8000764 <ssi_handler+0x1cc>)
 8000672:	69fc      	ldr	r4, [r7, #28]
 8000674:	2658      	movs	r6, #88	; 0x58
 8000676:	fb06 f404 	mul.w	r4, r6, r4
 800067a:	442c      	add	r4, r5
 800067c:	343c      	adds	r4, #60	; 0x3c
 800067e:	6824      	ldr	r4, [r4, #0]
		              T[i].pulluptype, T[i].bounceinterval, T[i].holdinterval, T[i].repeat, T[i].repeatinterval, T[i].doubleclickinterval, T[i].preventclick, T[i].infofield, T[i].onoff);
 8000680:	69fd      	ldr	r5, [r7, #28]
 8000682:	2658      	movs	r6, #88	; 0x58
 8000684:	fb06 f505 	mul.w	r5, r6, r5
 8000688:	3540      	adds	r5, #64	; 0x40
 800068a:	4e36      	ldr	r6, [pc, #216]	; (8000764 <ssi_handler+0x1cc>)
 800068c:	4435      	add	r5, r6
		      sprintf(arrline,
 800068e:	4e35      	ldr	r6, [pc, #212]	; (8000764 <ssi_handler+0x1cc>)
 8000690:	4632      	mov	r2, r6
 8000692:	69fe      	ldr	r6, [r7, #28]
 8000694:	f04f 0e58 	mov.w	lr, #88	; 0x58
 8000698:	fb0e f606 	mul.w	r6, lr, r6
 800069c:	4416      	add	r6, r2
 800069e:	3654      	adds	r6, #84	; 0x54
 80006a0:	6836      	ldr	r6, [r6, #0]
 80006a2:	9606      	str	r6, [sp, #24]
 80006a4:	9505      	str	r5, [sp, #20]
 80006a6:	9404      	str	r4, [sp, #16]
 80006a8:	9003      	str	r0, [sp, #12]
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4662      	mov	r2, ip
 80006b6:	492c      	ldr	r1, [pc, #176]	; (8000768 <ssi_handler+0x1d0>)
 80006b8:	482c      	ldr	r0, [pc, #176]	; (800076c <ssi_handler+0x1d4>)
 80006ba:	f011 f981 	bl	80119c0 <siprintf>
		      strcat(json, arrline);
 80006be:	492b      	ldr	r1, [pc, #172]	; (800076c <ssi_handler+0x1d4>)
 80006c0:	4826      	ldr	r0, [pc, #152]	; (800075c <ssi_handler+0x1c4>)
 80006c2:	f011 f99d 	bl	8011a00 <strcat>
		      if (i != tabline)
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <ssi_handler+0x1d8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d00b      	beq.n	80006e8 <ssi_handler+0x150>
		         strcat(json, ",");
 80006d0:	4822      	ldr	r0, [pc, #136]	; (800075c <ssi_handler+0x1c4>)
 80006d2:	f7ff fd87 	bl	80001e4 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <ssi_handler+0x1c4>)
 80006dc:	4413      	add	r3, r2
 80006de:	4925      	ldr	r1, [pc, #148]	; (8000774 <ssi_handler+0x1dc>)
 80006e0:	461a      	mov	r2, r3
 80006e2:	460b      	mov	r3, r1
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i <= tabline; i++) {
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3301      	adds	r3, #1
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <ssi_handler+0x1d8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dd8a      	ble.n	800060e <ssi_handler+0x76>
		strcat(json, "]");
 80006f8:	4818      	ldr	r0, [pc, #96]	; (800075c <ssi_handler+0x1c4>)
 80006fa:	f7ff fd73 	bl	80001e4 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <ssi_handler+0x1c4>)
 8000704:	4413      	add	r3, r2
 8000706:	491c      	ldr	r1, [pc, #112]	; (8000778 <ssi_handler+0x1e0>)
 8000708:	461a      	mov	r2, r3
 800070a:	460b      	mov	r3, r1
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	8013      	strh	r3, [r2, #0]
		printf(" %s\n", json);
 8000710:	4912      	ldr	r1, [pc, #72]	; (800075c <ssi_handler+0x1c4>)
 8000712:	481a      	ldr	r0, [pc, #104]	; (800077c <ssi_handler+0x1e4>)
 8000714:	f011 f876 	bl	8011804 <iprintf>
		sprintf(pcInsert, "%s", json);
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <ssi_handler+0x1c4>)
 800071a:	4919      	ldr	r1, [pc, #100]	; (8000780 <ssi_handler+0x1e8>)
 800071c:	6938      	ldr	r0, [r7, #16]
 800071e:	f011 f94f 	bl	80119c0 <siprintf>
		memset(json, '\0', sizeof(json));
 8000722:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000726:	2100      	movs	r1, #0
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <ssi_handler+0x1c4>)
 800072a:	f010 ffb9 	bl	80116a0 <memset>
		memset(arrline, '\0', sizeof(arrline));
 800072e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <ssi_handler+0x1d4>)
 8000736:	f010 ffb3 	bl	80116a0 <memset>
		return strlen(pcInsert);
 800073a:	6938      	ldr	r0, [r7, #16]
 800073c:	f7ff fd52 	bl	80001e4 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29b      	uxth	r3, r3
 8000744:	e001      	b.n	800074a <ssi_handler+0x1b2>
		break;
 8000746:	bf00      	nop
	}

	return 0;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	bf00      	nop
 8000754:	200000b8 	.word	0x200000b8
 8000758:	08012de8 	.word	0x08012de8
 800075c:	20004e6c 	.word	0x20004e6c
 8000760:	08012dec 	.word	0x08012dec
 8000764:	20000af4 	.word	0x20000af4
 8000768:	08012df0 	.word	0x08012df0
 800076c:	20000964 	.word	0x20000964
 8000770:	20000000 	.word	0x20000000
 8000774:	08012e94 	.word	0x08012e94
 8000778:	08012e98 	.word	0x08012e98
 800077c:	08012e9c 	.word	0x08012e9c
 8000780:	08012ea4 	.word	0x08012ea4

08000784 <CGIForm_Handler>:
		char *pcValue[]);
const tCGI FORM_CGI = { "/form.cgi", CGIForm_Handler }; // Создаем структуру CGI
char name[300]; // Если цикл перебора найдет "fname" сохранит в переменную 'name[30]' а если найдет "lname" он сканкатенирует сюда данные "lname".

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 8000792:	487b      	ldr	r0, [pc, #492]	; (8000980 <CGIForm_Handler+0x1fc>)
 8000794:	f011 f8bc 	bl	8011910 <puts>
	if (iIndex == 0) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 80ea 	bne.w	8000974 <CGIForm_Handler+0x1f0>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e0e1      	b.n	800096a <CGIForm_Handler+0x1e6>
				{
			if (strcmp(pcParam[i], "Bounce_interval") == 0) // if the fname string is found
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4974      	ldr	r1, [pc, #464]	; (8000984 <CGIForm_Handler+0x200>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fd0c 	bl	80001d0 <strcmp>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d113      	bne.n	80007e6 <CGIForm_Handler+0x62>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80007be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4870      	ldr	r0, [pc, #448]	; (8000988 <CGIForm_Handler+0x204>)
 80007c6:	f010 ff6b 	bl	80116a0 <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	486c      	ldr	r0, [pc, #432]	; (8000988 <CGIForm_Handler+0x204>)
 80007d8:	f011 f92e 	bl	8011a38 <strcpy>
				printf("Bounce_interval: %s\r\n", name);
 80007dc:	496a      	ldr	r1, [pc, #424]	; (8000988 <CGIForm_Handler+0x204>)
 80007de:	486b      	ldr	r0, [pc, #428]	; (800098c <CGIForm_Handler+0x208>)
 80007e0:	f011 f810 	bl	8011804 <iprintf>
 80007e4:	e0be      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Hold_interval") == 0) // if the lname string is found
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4967      	ldr	r1, [pc, #412]	; (8000990 <CGIForm_Handler+0x20c>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fcec 	bl	80001d0 <strcmp>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d113      	bne.n	8000826 <CGIForm_Handler+0xa2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80007fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000802:	2100      	movs	r1, #0
 8000804:	4860      	ldr	r0, [pc, #384]	; (8000988 <CGIForm_Handler+0x204>)
 8000806:	f010 ff4b 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	485c      	ldr	r0, [pc, #368]	; (8000988 <CGIForm_Handler+0x204>)
 8000818:	f011 f8f2 	bl	8011a00 <strcat>
				printf("Hold_interval: %s\r\n", name);
 800081c:	495a      	ldr	r1, [pc, #360]	; (8000988 <CGIForm_Handler+0x204>)
 800081e:	485d      	ldr	r0, [pc, #372]	; (8000994 <CGIForm_Handler+0x210>)
 8000820:	f010 fff0 	bl	8011804 <iprintf>
 8000824:	e09e      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat") == 0) // if the lname string is found
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4959      	ldr	r1, [pc, #356]	; (8000998 <CGIForm_Handler+0x214>)
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fccc 	bl	80001d0 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d113      	bne.n	8000866 <CGIForm_Handler+0xe2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 800083e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000842:	2100      	movs	r1, #0
 8000844:	4850      	ldr	r0, [pc, #320]	; (8000988 <CGIForm_Handler+0x204>)
 8000846:	f010 ff2b 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	484c      	ldr	r0, [pc, #304]	; (8000988 <CGIForm_Handler+0x204>)
 8000858:	f011 f8d2 	bl	8011a00 <strcat>
				printf("Repeat: %s\r\n", name);
 800085c:	494a      	ldr	r1, [pc, #296]	; (8000988 <CGIForm_Handler+0x204>)
 800085e:	484f      	ldr	r0, [pc, #316]	; (800099c <CGIForm_Handler+0x218>)
 8000860:	f010 ffd0 	bl	8011804 <iprintf>
 8000864:	e07e      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat_interval") == 0) // if the lname string is found
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	494b      	ldr	r1, [pc, #300]	; (80009a0 <CGIForm_Handler+0x21c>)
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fcac 	bl	80001d0 <strcmp>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d113      	bne.n	80008a6 <CGIForm_Handler+0x122>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 800087e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000882:	2100      	movs	r1, #0
 8000884:	4840      	ldr	r0, [pc, #256]	; (8000988 <CGIForm_Handler+0x204>)
 8000886:	f010 ff0b 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	483c      	ldr	r0, [pc, #240]	; (8000988 <CGIForm_Handler+0x204>)
 8000898:	f011 f8b2 	bl	8011a00 <strcat>
				printf("Repeat_interval: %s\r\n", name);
 800089c:	493a      	ldr	r1, [pc, #232]	; (8000988 <CGIForm_Handler+0x204>)
 800089e:	4841      	ldr	r0, [pc, #260]	; (80009a4 <CGIForm_Handler+0x220>)
 80008a0:	f010 ffb0 	bl	8011804 <iprintf>
 80008a4:	e05e      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Double_click_interval") == 0) // if the lname string is found
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	493d      	ldr	r1, [pc, #244]	; (80009a8 <CGIForm_Handler+0x224>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc8c 	bl	80001d0 <strcmp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d113      	bne.n	80008e6 <CGIForm_Handler+0x162>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80008be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008c2:	2100      	movs	r1, #0
 80008c4:	4830      	ldr	r0, [pc, #192]	; (8000988 <CGIForm_Handler+0x204>)
 80008c6:	f010 feeb 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	482c      	ldr	r0, [pc, #176]	; (8000988 <CGIForm_Handler+0x204>)
 80008d8:	f011 f892 	bl	8011a00 <strcat>
				printf("Double_click_interval: %s\r\n", name);
 80008dc:	492a      	ldr	r1, [pc, #168]	; (8000988 <CGIForm_Handler+0x204>)
 80008de:	4833      	ldr	r0, [pc, #204]	; (80009ac <CGIForm_Handler+0x228>)
 80008e0:	f010 ff90 	bl	8011804 <iprintf>
 80008e4:	e03e      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Prevent_Click") == 0) // if the lname string is found
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	492f      	ldr	r1, [pc, #188]	; (80009b0 <CGIForm_Handler+0x22c>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc6c 	bl	80001d0 <strcmp>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d113      	bne.n	8000926 <CGIForm_Handler+0x1a2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80008fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000902:	2100      	movs	r1, #0
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <CGIForm_Handler+0x204>)
 8000906:	f010 fecb 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	481c      	ldr	r0, [pc, #112]	; (8000988 <CGIForm_Handler+0x204>)
 8000918:	f011 f872 	bl	8011a00 <strcat>
				printf("Prevent_Click: %s\r\n", name);
 800091c:	491a      	ldr	r1, [pc, #104]	; (8000988 <CGIForm_Handler+0x204>)
 800091e:	4825      	ldr	r0, [pc, #148]	; (80009b4 <CGIForm_Handler+0x230>)
 8000920:	f010 ff70 	bl	8011804 <iprintf>
 8000924:	e01e      	b.n	8000964 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "OnOff") == 0) // if the lname string is found
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4921      	ldr	r1, [pc, #132]	; (80009b8 <CGIForm_Handler+0x234>)
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d112      	bne.n	8000964 <CGIForm_Handler+0x1e0>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 800093e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000942:	2100      	movs	r1, #0
 8000944:	4810      	ldr	r0, [pc, #64]	; (8000988 <CGIForm_Handler+0x204>)
 8000946:	f010 feab 	bl	80116a0 <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <CGIForm_Handler+0x204>)
 8000958:	f011 f852 	bl	8011a00 <strcat>
				printf("OnOff: %s\r\n", name);
 800095c:	490a      	ldr	r1, [pc, #40]	; (8000988 <CGIForm_Handler+0x204>)
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <CGIForm_Handler+0x238>)
 8000960:	f010 ff50 	bl	8011804 <iprintf>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	f6ff af19 	blt.w	80007a6 <CGIForm_Handler+0x22>
			}
		}
	}
	return "/cgiform.shtml"; // По окончании работы 'CGIForm_Handler' возвращаем указатель в нужный файл.
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <CGIForm_Handler+0x23c>)
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08012eb4 	.word	0x08012eb4
 8000984:	08012ec0 	.word	0x08012ec0
 8000988:	20006db4 	.word	0x20006db4
 800098c:	08012ed0 	.word	0x08012ed0
 8000990:	08012ee8 	.word	0x08012ee8
 8000994:	08012ef8 	.word	0x08012ef8
 8000998:	08012f0c 	.word	0x08012f0c
 800099c:	08012f14 	.word	0x08012f14
 80009a0:	08012f24 	.word	0x08012f24
 80009a4:	08012f34 	.word	0x08012f34
 80009a8:	08012f4c 	.word	0x08012f4c
 80009ac:	08012f64 	.word	0x08012f64
 80009b0:	08012f80 	.word	0x08012f80
 80009b4:	08012f90 	.word	0x08012f90
 80009b8:	08012fa4 	.word	0x08012fa4
 80009bc:	08012fac 	.word	0x08012fac
 80009c0:	08012fb8 	.word	0x08012fb8

080009c4 <find_header_name>:
//////////////////// POST START ////////////////////////
char *content_type;

/* Find Header Key Name in the header. */
const char*
find_header_name(char *header) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

#define HEADER_NAME_TITLE               "name=" // Было "name="
#define HEADER_NAME_TITLE_LEN           5
	printf("HEADER: %s\n", header);
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <find_header_name+0x4c>)
 80009d0:	f010 ff18 	bl	8011804 <iprintf>
	if (header != NULL) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d014      	beq.n	8000a04 <find_header_name+0x40>
		char *header_name_begin = strstr(header, HEADER_NAME_TITLE); // Find name= in Header
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <find_header_name+0x50>)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f011 f858 	bl	8011a92 <strstr>
 80009e2:	60f8      	str	r0, [r7, #12]
		char *header_name = strtok(header_name_begin, "\""); // Find the first "  // Было "\""
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <find_header_name+0x54>)
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f011 f86a 	bl	8011ac0 <strtok>
 80009ec:	60b8      	str	r0, [r7, #8]
		header_name = strtok(NULL, "\""); // Go to the last "           // Было "\""
 80009ee:	490a      	ldr	r1, [pc, #40]	; (8000a18 <find_header_name+0x54>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f011 f865 	bl	8011ac0 <strtok>
 80009f6:	60b8      	str	r0, [r7, #8]
#ifdef  HTTPD_DEBUG
		printf("POST multipart Header Key found: %s\n", header_name);
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <find_header_name+0x58>)
 80009fc:	f010 ff02 	bl	8011804 <iprintf>
#endif

		return header_name;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	e000      	b.n	8000a06 <find_header_name+0x42>
	}
	return NULL;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08012fc8 	.word	0x08012fc8
 8000a14:	08012fd4 	.word	0x08012fd4
 8000a18:	08012fdc 	.word	0x08012fdc
 8000a1c:	08012fe0 	.word	0x08012fe0

08000a20 <find_boundary>:

/* Find boundary value in the Content-Type. */
const char*
find_boundary( content_type) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

#define BOUNDARY_TITLE               "boundary="
#define BOUNDARY_TITLE_LEN           9

	if (content_type != NULL) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <find_boundary+0x24>
		char *boundary_begin = strstr(content_type, BOUNDARY_TITLE); // Find Boundary= in Content-Type
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <find_boundary+0x30>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f011 f82d 	bl	8011a92 <strstr>
 8000a38:	60f8      	str	r0, [r7, #12]
		char *boundary = boundary_begin + BOUNDARY_TITLE_LEN; // Remove the Boundary=
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3309      	adds	r3, #9
 8000a3e:	60bb      	str	r3, [r7, #8]
#ifdef  HTTPD_DEBUG
		//printf("POST multipart Boundary found: %s\n", boundary);
#endif

		return boundary;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	e000      	b.n	8000a46 <find_boundary+0x26>
	}
	return NULL;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	08013008 	.word	0x08013008

08000a54 <read_header_name>:
 */
multipart_parser_settings callbacks;
multipart_parser *_parser;

/* Header which contains the Key with the name / Хедер который содержит ключ с именем  */
int read_header_name(multipart_parser *p, const char *at, size_t length) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	//printf("read_header_name: %.*s: \n", length, at);
#endif

	/* Parse the Header Value / Парсим значение Хедера */
	/* Content-Disposition: read_header_value: form-data; name="variable_name" */
	char *key_name = find_header_name(at);
 8000a60:	68b8      	ldr	r0, [r7, #8]
 8000a62:	f7ff ffaf 	bl	80009c4 <find_header_name>
 8000a66:	6178      	str	r0, [r7, #20]

#ifdef  HTTPD_DEBUG
	//printf("Key Name: %s\n", key_name);
#endif

	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <read_header_value>:

int read_header_value(multipart_parser *p, const char *at, size_t length) {
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_header_value: %.*s\n", length, at);
#endif
	return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <read_part_data>:

/* Value for the latest key */
/* If this is a file, this may be called multiple times. */
/* Wait until part_end for the complete file. */
int read_part_data(multipart_parser *p, const char *at, size_t length) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_part_data: %.*s\n", length, at);
#endif
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <read_on_part_data_begin>:

/* Beginning of a key and value */
int read_on_part_data_begin(multipart_parser *p, const char *at, size_t length) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
	//printf("Total length is - %d\n", http_post_content_len);
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_begin: %.*s\n", length, at);
#endif
	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <read_on_headers_complete>:

/* End of header which contains the key */
int read_on_headers_complete(multipart_parser *p, const char *at, size_t length) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_headers_complete: %.*s\n", length, at);
#endif
	return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <read_on_part_data_end>:

/** End of the key and value */
/* If this is a file, the file is complete. */
/* If this is a value, then the value is complete. */
int read_on_part_data_end(multipart_parser *p, const char *at, size_t length) {
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_end: %.*s\n", length, at);
#endif
	return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <read_on_body_end>:

/* End of the entire form */
int read_on_body_end(multipart_parser *p, const char *at, size_t length) {
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_body_end: %.*s\n", length, at);
#endif
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <http_parse_post>:

static err_t http_parse_post(char *data, uint32_t length) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
#ifdef  HTTPD_DEBUG
	//printf("http_parse_post POST data: %s\n", data);
#endif

	/* Parse the data */
	multipart_parser_execute(_parser, data, length);
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <http_parse_post+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fc36 	bl	8001394 <multipart_parser_execute>

	return ERR_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20006dac 	.word	0x20006dac

08000b38 <httpd_post_begin>:
 * @return ERR_OK: Accept the POST request, data may be passed in
 *         another err_t: Deny the POST request, send back 'bad request'.
 */
err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	807b      	strh	r3, [r7, #2]

	// Check the URI given with the list
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]
 8000b4a:	e03f      	b.n	8000bcc <httpd_post_begin+0x94>
		if (strcmp(uri, a[i]) == 0) {
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <httpd_post_begin+0xa8>)
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f7ff fb3a 	bl	80001d0 <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d131      	bne.n	8000bc6 <httpd_post_begin+0x8e>

			http_post_uri_file_index = i;
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <httpd_post_begin+0xac>)
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	7013      	strb	r3, [r2, #0]
			http_post_content_len = content_len;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <httpd_post_begin+0xb0>)
 8000b6c:	6013      	str	r3, [r2, #0]

#ifdef  HTTPD_DEBUG
			//printf("httpd_post_begin: Post Content: %s\n",  http_request);
#endif

			memset(&callbacks, 0, sizeof(multipart_parser_settings));
 8000b6e:	221c      	movs	r2, #28
 8000b70:	2100      	movs	r1, #0
 8000b72:	481e      	ldr	r0, [pc, #120]	; (8000bec <httpd_post_begin+0xb4>)
 8000b74:	f010 fd94 	bl	80116a0 <memset>

			callbacks.on_header_field = read_header_name;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <httpd_post_begin+0xb4>)
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <httpd_post_begin+0xb8>)
 8000b7c:	601a      	str	r2, [r3, #0]
			callbacks.on_header_value = read_header_value;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <httpd_post_begin+0xb4>)
 8000b80:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <httpd_post_begin+0xbc>)
 8000b82:	605a      	str	r2, [r3, #4]
			callbacks.on_part_data = read_part_data;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <httpd_post_begin+0xb4>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <httpd_post_begin+0xc0>)
 8000b88:	609a      	str	r2, [r3, #8]
			callbacks.on_part_data_begin = read_on_part_data_begin;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <httpd_post_begin+0xb4>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <httpd_post_begin+0xc4>)
 8000b8e:	60da      	str	r2, [r3, #12]
			callbacks.on_headers_complete = read_on_headers_complete;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <httpd_post_begin+0xb4>)
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <httpd_post_begin+0xc8>)
 8000b94:	611a      	str	r2, [r3, #16]
			callbacks.on_part_data_end = read_on_part_data_end;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <httpd_post_begin+0xb4>)
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <httpd_post_begin+0xcc>)
 8000b9a:	615a      	str	r2, [r3, #20]
			callbacks.on_body_end = read_on_body_end;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <httpd_post_begin+0xb4>)
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <httpd_post_begin+0xd0>)
 8000ba0:	619a      	str	r2, [r3, #24]

			/*
			 * Get the boundary from the content-type
			 * Then pass it to the parser
			 */
			const char *boundary = find_boundary(content_type);
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <httpd_post_begin+0xd4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff3a 	bl	8000a20 <find_boundary>
 8000bac:	6138      	str	r0, [r7, #16]
			if (boundary != NULL) {
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <httpd_post_begin+0x8a>
				_parser = multipart_parser_init(boundary, &callbacks);
 8000bb4:	490d      	ldr	r1, [pc, #52]	; (8000bec <httpd_post_begin+0xb4>)
 8000bb6:	6938      	ldr	r0, [r7, #16]
 8000bb8:	f000 fbaa 	bl	8001310 <multipart_parser_init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <httpd_post_begin+0xd8>)
 8000bc0:	6013      	str	r3, [r2, #0]
			}

			return ERR_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e007      	b.n	8000bd6 <httpd_post_begin+0x9e>
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	75fb      	strb	r3, [r7, #23]
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d9bc      	bls.n	8000b4c <httpd_post_begin+0x14>
		}
	}

	//returns /404.html when response_uri is empty
	return ERR_VAL;
 8000bd2:	f06f 0305 	mvn.w	r3, #5
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000014 	.word	0x20000014
 8000be4:	200000bc 	.word	0x200000bc
 8000be8:	200000c0 	.word	0x200000c0
 8000bec:	20000cac 	.word	0x20000cac
 8000bf0:	08000a55 	.word	0x08000a55
 8000bf4:	08000a73 	.word	0x08000a73
 8000bf8:	08000a8d 	.word	0x08000a8d
 8000bfc:	08000aa7 	.word	0x08000aa7
 8000c00:	08000ac1 	.word	0x08000ac1
 8000c04:	08000adb 	.word	0x08000adb
 8000c08:	08000af5 	.word	0x08000af5
 8000c0c:	200006a0 	.word	0x200006a0
 8000c10:	20006dac 	.word	0x20006dac

08000c14 <httpd_post_receive_data>:
 * @param connection Unique connection identifier.
 * @param p Received data.
 * @return ERR_OK: Data accepted.
 *         another err_t: Data denied, http_post_get_response_uri will be called.
 */
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]

	char *data;
	err_t ret_val = ERR_ARG;
 8000c1e:	23f0      	movs	r3, #240	; 0xf0
 8000c20:	74fb      	strb	r3, [r7, #19]

	struct http_state *hs = (struct http_state*) connection;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]
	if (hs != NULL && p != NULL) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d011      	beq.n	8000c50 <httpd_post_receive_data+0x3c>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00e      	beq.n	8000c50 <httpd_post_receive_data+0x3c>
		data = p->payload;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	617b      	str	r3, [r7, #20]
		ret_val = http_parse_post(data, http_post_content_len);	// !!!!!!! ПРОВЕРЬ !!!!!!!!!!!!!
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <httpd_post_receive_data+0x70>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff66 	bl	8000b10 <http_parse_post>
 8000c44:	4603      	mov	r3, r0
 8000c46:	74fb      	strb	r3, [r7, #19]
		printf("+++++++DATA+++++++%s\r\n", data);
 8000c48:	6979      	ldr	r1, [r7, #20]
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <httpd_post_receive_data+0x74>)
 8000c4c:	f010 fdda 	bl	8011804 <iprintf>
	}
	/****************************************************/
	strcat(joined_var, p->payload);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <httpd_post_receive_data+0x78>)
 8000c58:	f010 fed2 	bl	8011a00 <strcat>
	//strcat(joined_var, data); // Объединение строк.
	//printf("+++++++++++++%s\n", joined_var);
	printf("\r\n");
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <httpd_post_receive_data+0x7c>)
 8000c5e:	f010 fe57 	bl	8011910 <puts>
	memset(data, '\0', sizeof(*data));
 8000c62:	2201      	movs	r2, #1
 8000c64:	2100      	movs	r1, #0
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f010 fd1a 	bl	80116a0 <memset>
	if (p != NULL) {
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <httpd_post_receive_data+0x64>
		pbuf_free(p);
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f007 fbfe 	bl	8008474 <pbuf_free>
	}
	//printf("************%d\r\n", ret_val);
	return ret_val;
 8000c78:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000c0 	.word	0x200000c0
 8000c88:	08013014 	.word	0x08013014
 8000c8c:	200006a4 	.word	0x200006a4
 8000c90:	0801302c 	.word	0x0801302c

08000c94 <httpd_post_finished>:
 * @param connection Unique connection identifier.
 * @param response_uri Filename of response file on success
 * @param response_uri_len Size of the 'response_uri' buffer.
 */
void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]

	struct http_state *hs = (struct http_state*) connection;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	61fb      	str	r3, [r7, #28]
	if (hs != NULL) {
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00a      	beq.n	8000cc2 <httpd_post_finished+0x2e>
		strncpy(response_uri, a[http_post_uri_file_index], response_uri_len);
 8000cac:	4b93      	ldr	r3, [pc, #588]	; (8000efc <httpd_post_finished+0x268>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b93      	ldr	r3, [pc, #588]	; (8000f00 <httpd_post_finished+0x26c>)
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f010 fed5 	bl	8011a6c <strncpy>
	}
	char *rest = joined_var;
 8000cc2:	4b90      	ldr	r3, [pc, #576]	; (8000f04 <httpd_post_finished+0x270>)
 8000cc4:	61bb      	str	r3, [r7, #24]
	printf("++++++++joined_var++++++++%s\n", joined_var);
 8000cc6:	498f      	ldr	r1, [pc, #572]	; (8000f04 <httpd_post_finished+0x270>)
 8000cc8:	488f      	ldr	r0, [pc, #572]	; (8000f08 <httpd_post_finished+0x274>)
 8000cca:	f010 fd9b 	bl	8011804 <iprintf>
	//printf("-------rest------%s\n", rest);

	while ((token = strtok_r(rest, "&", &rest))) {
 8000cce:	e171      	b.n	8000fb4 <httpd_post_finished+0x320>
		//printf("%s\n", token); // Имя переменной
		char *rest1 = token;
 8000cd0:	4b8e      	ldr	r3, [pc, #568]	; (8000f0c <httpd_post_finished+0x278>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	617b      	str	r3, [r7, #20]
		y = 0;
 8000cd6:	4b8e      	ldr	r3, [pc, #568]	; (8000f10 <httpd_post_finished+0x27c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000cdc:	e15b      	b.n	8000f96 <httpd_post_finished+0x302>
			k = 0;
 8000cde:	4b8d      	ldr	r3, [pc, #564]	; (8000f14 <httpd_post_finished+0x280>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
			if (y == 0) {
 8000ce4:	4b8a      	ldr	r3, [pc, #552]	; (8000f10 <httpd_post_finished+0x27c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d136      	bne.n	8000d5a <httpd_post_finished+0xc6>
				printf("NAME %s\n", token1); // Value переменной
 8000cec:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <httpd_post_finished+0x284>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	488a      	ldr	r0, [pc, #552]	; (8000f1c <httpd_post_finished+0x288>)
 8000cf4:	f010 fd86 	bl	8011804 <iprintf>
				// имя переменной
				//name = token1;
				// получение id
				char *rest2 = token1;
 8000cf8:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <httpd_post_finished+0x284>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000cfe:	e01e      	b.n	8000d3e <httpd_post_finished+0xaa>
					if (k == 0) {
 8000d00:	4b84      	ldr	r3, [pc, #528]	; (8000f14 <httpd_post_finished+0x280>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d103      	bne.n	8000d10 <httpd_post_finished+0x7c>
						name1 = token2;
 8000d08:	4b85      	ldr	r3, [pc, #532]	; (8000f20 <httpd_post_finished+0x28c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a85      	ldr	r2, [pc, #532]	; (8000f24 <httpd_post_finished+0x290>)
 8000d0e:	6013      	str	r3, [r2, #0]
					}
					if (k == 1) {
 8000d10:	4b80      	ldr	r3, [pc, #512]	; (8000f14 <httpd_post_finished+0x280>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d10d      	bne.n	8000d34 <httpd_post_finished+0xa0>
						id = atoi(token2);
 8000d18:	4b81      	ldr	r3, [pc, #516]	; (8000f20 <httpd_post_finished+0x28c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f010 fc51 	bl	80115c4 <atoi>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a80      	ldr	r2, [pc, #512]	; (8000f28 <httpd_post_finished+0x294>)
 8000d26:	6013      	str	r3, [r2, #0]
						printf("ID %d\n", id);
 8000d28:	4b7f      	ldr	r3, [pc, #508]	; (8000f28 <httpd_post_finished+0x294>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	487f      	ldr	r0, [pc, #508]	; (8000f2c <httpd_post_finished+0x298>)
 8000d30:	f010 fd68 	bl	8011804 <iprintf>
					}
					k++;
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <httpd_post_finished+0x280>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a76      	ldr	r2, [pc, #472]	; (8000f14 <httpd_post_finished+0x280>)
 8000d3c:	6013      	str	r3, [r2, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	f107 0210 	add.w	r2, r7, #16
 8000d44:	497a      	ldr	r1, [pc, #488]	; (8000f30 <httpd_post_finished+0x29c>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f010 ff16 	bl	8011b78 <strtok_r>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a74      	ldr	r2, [pc, #464]	; (8000f20 <httpd_post_finished+0x28c>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b73      	ldr	r3, [pc, #460]	; (8000f20 <httpd_post_finished+0x28c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1d2      	bne.n	8000d00 <httpd_post_finished+0x6c>
				}
			}
			if (y == 1) {
 8000d5a:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <httpd_post_finished+0x27c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	f040 8114 	bne.w	8000f8c <httpd_post_finished+0x2f8>
				// значение переменной
				printf("VALUE %s\n", token1);
 8000d64:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <httpd_post_finished+0x284>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4872      	ldr	r0, [pc, #456]	; (8000f34 <httpd_post_finished+0x2a0>)
 8000d6c:	f010 fd4a 	bl	8011804 <iprintf>
				// записывае в структуру
				if (strcmp(name1, "pulluptype") == 0) {
 8000d70:	4b6c      	ldr	r3, [pc, #432]	; (8000f24 <httpd_post_finished+0x290>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4970      	ldr	r1, [pc, #448]	; (8000f38 <httpd_post_finished+0x2a4>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa2a 	bl	80001d0 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10d      	bne.n	8000d9e <httpd_post_finished+0x10a>
					strcpy(T[id].pulluptype, token1);
 8000d82:	4b69      	ldr	r3, [pc, #420]	; (8000f28 <httpd_post_finished+0x294>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2258      	movs	r2, #88	; 0x58
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4a6b      	ldr	r2, [pc, #428]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a61      	ldr	r2, [pc, #388]	; (8000f18 <httpd_post_finished+0x284>)
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f010 fe4e 	bl	8011a38 <strcpy>
 8000d9c:	e0f6      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000d9e:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <httpd_post_finished+0x290>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4967      	ldr	r1, [pc, #412]	; (8000f40 <httpd_post_finished+0x2ac>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa13 	bl	80001d0 <strcmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10f      	bne.n	8000dd0 <httpd_post_finished+0x13c>
					T[id].bounceinterval = atoi(token1);
 8000db0:	4b59      	ldr	r3, [pc, #356]	; (8000f18 <httpd_post_finished+0x284>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a5c      	ldr	r2, [pc, #368]	; (8000f28 <httpd_post_finished+0x294>)
 8000db6:	6814      	ldr	r4, [r2, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f010 fc03 	bl	80115c4 <atoi>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	495e      	ldr	r1, [pc, #376]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000dc2:	2358      	movs	r3, #88	; 0x58
 8000dc4:	fb03 f304 	mul.w	r3, r3, r4
 8000dc8:	440b      	add	r3, r1
 8000dca:	3328      	adds	r3, #40	; 0x28
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e0dd      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <httpd_post_finished+0x290>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	495b      	ldr	r1, [pc, #364]	; (8000f44 <httpd_post_finished+0x2b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff f9fa 	bl	80001d0 <strcmp>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <httpd_post_finished+0x16e>
					T[id].holdinterval = atoi(token1);
 8000de2:	4b4d      	ldr	r3, [pc, #308]	; (8000f18 <httpd_post_finished+0x284>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <httpd_post_finished+0x294>)
 8000de8:	6814      	ldr	r4, [r2, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f010 fbea 	bl	80115c4 <atoi>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4952      	ldr	r1, [pc, #328]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000df4:	2358      	movs	r3, #88	; 0x58
 8000df6:	fb03 f304 	mul.w	r3, r3, r4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	332c      	adds	r3, #44	; 0x2c
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e0c4      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "repeat") == 0) {
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <httpd_post_finished+0x290>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4950      	ldr	r1, [pc, #320]	; (8000f48 <httpd_post_finished+0x2b4>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff f9e1 	bl	80001d0 <strcmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10f      	bne.n	8000e34 <httpd_post_finished+0x1a0>
					T[id].repeat = atoi(token1);
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <httpd_post_finished+0x284>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a43      	ldr	r2, [pc, #268]	; (8000f28 <httpd_post_finished+0x294>)
 8000e1a:	6814      	ldr	r4, [r2, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f010 fbd1 	bl	80115c4 <atoi>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4945      	ldr	r1, [pc, #276]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000e26:	2358      	movs	r3, #88	; 0x58
 8000e28:	fb03 f304 	mul.w	r3, r3, r4
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3330      	adds	r3, #48	; 0x30
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e0ab      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <httpd_post_finished+0x290>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4944      	ldr	r1, [pc, #272]	; (8000f4c <httpd_post_finished+0x2b8>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f9c8 	bl	80001d0 <strcmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10f      	bne.n	8000e66 <httpd_post_finished+0x1d2>
					T[id].repeatinterval = atoi(token1);
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <httpd_post_finished+0x284>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a37      	ldr	r2, [pc, #220]	; (8000f28 <httpd_post_finished+0x294>)
 8000e4c:	6814      	ldr	r4, [r2, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f010 fbb8 	bl	80115c4 <atoi>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4939      	ldr	r1, [pc, #228]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000e58:	2358      	movs	r3, #88	; 0x58
 8000e5a:	fb03 f304 	mul.w	r3, r3, r4
 8000e5e:	440b      	add	r3, r1
 8000e60:	3334      	adds	r3, #52	; 0x34
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e092      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <httpd_post_finished+0x290>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4939      	ldr	r1, [pc, #228]	; (8000f50 <httpd_post_finished+0x2bc>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9af 	bl	80001d0 <strcmp>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10f      	bne.n	8000e98 <httpd_post_finished+0x204>
					T[id].doubleclickinterval = atoi(token1);
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <httpd_post_finished+0x284>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <httpd_post_finished+0x294>)
 8000e7e:	6814      	ldr	r4, [r2, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f010 fb9f 	bl	80115c4 <atoi>
 8000e86:	4602      	mov	r2, r0
 8000e88:	492c      	ldr	r1, [pc, #176]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000e8a:	2358      	movs	r3, #88	; 0x58
 8000e8c:	fb03 f304 	mul.w	r3, r3, r4
 8000e90:	440b      	add	r3, r1
 8000e92:	3338      	adds	r3, #56	; 0x38
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e079      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <httpd_post_finished+0x290>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	492d      	ldr	r1, [pc, #180]	; (8000f54 <httpd_post_finished+0x2c0>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f996 	bl	80001d0 <strcmp>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <httpd_post_finished+0x236>
					T[id].preventclick = atoi(token1);
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <httpd_post_finished+0x284>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <httpd_post_finished+0x294>)
 8000eb0:	6814      	ldr	r4, [r2, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f010 fb86 	bl	80115c4 <atoi>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4920      	ldr	r1, [pc, #128]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000ebc:	2358      	movs	r3, #88	; 0x58
 8000ebe:	fb03 f304 	mul.w	r3, r3, r4
 8000ec2:	440b      	add	r3, r1
 8000ec4:	333c      	adds	r3, #60	; 0x3c
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e060      	b.n	8000f8c <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "infofield") == 0) {
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <httpd_post_finished+0x290>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4922      	ldr	r1, [pc, #136]	; (8000f58 <httpd_post_finished+0x2c4>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f97d 	bl	80001d0 <strcmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d13f      	bne.n	8000f5c <httpd_post_finished+0x2c8>
					strcpy(T[id].infofield, token1);
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <httpd_post_finished+0x294>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2258      	movs	r2, #88	; 0x58
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	3340      	adds	r3, #64	; 0x40
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <httpd_post_finished+0x2a8>)
 8000eea:	4413      	add	r3, r2
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <httpd_post_finished+0x284>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f010 fda0 	bl	8011a38 <strcpy>
 8000ef8:	e048      	b.n	8000f8c <httpd_post_finished+0x2f8>
 8000efa:	bf00      	nop
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	20000014 	.word	0x20000014
 8000f04:	200006a4 	.word	0x200006a4
 8000f08:	08013030 	.word	0x08013030
 8000f0c:	20006ee0 	.word	0x20006ee0
 8000f10:	200000b4 	.word	0x200000b4
 8000f14:	200000b0 	.word	0x200000b0
 8000f18:	20000698 	.word	0x20000698
 8000f1c:	08013050 	.word	0x08013050
 8000f20:	20006db0 	.word	0x20006db0
 8000f24:	20000960 	.word	0x20000960
 8000f28:	20000cc8 	.word	0x20000cc8
 8000f2c:	0801305c 	.word	0x0801305c
 8000f30:	08013064 	.word	0x08013064
 8000f34:	08013068 	.word	0x08013068
 8000f38:	08013074 	.word	0x08013074
 8000f3c:	20000af4 	.word	0x20000af4
 8000f40:	08013080 	.word	0x08013080
 8000f44:	08013090 	.word	0x08013090
 8000f48:	080130a0 	.word	0x080130a0
 8000f4c:	080130a8 	.word	0x080130a8
 8000f50:	080130b8 	.word	0x080130b8
 8000f54:	080130cc 	.word	0x080130cc
 8000f58:	080130dc 	.word	0x080130dc
				} else if (strcmp(name1, "onoff") == 0) {
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <httpd_post_finished+0x380>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	492d      	ldr	r1, [pc, #180]	; (8001018 <httpd_post_finished+0x384>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f934 	bl	80001d0 <strcmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <httpd_post_finished+0x2f8>
					T[id].onoff = atoi(token1);
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <httpd_post_finished+0x388>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <httpd_post_finished+0x38c>)
 8000f74:	6814      	ldr	r4, [r2, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f010 fb24 	bl	80115c4 <atoi>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4929      	ldr	r1, [pc, #164]	; (8001024 <httpd_post_finished+0x390>)
 8000f80:	2358      	movs	r3, #88	; 0x58
 8000f82:	fb03 f304 	mul.w	r3, r3, r4
 8000f86:	440b      	add	r3, r1
 8000f88:	3354      	adds	r3, #84	; 0x54
 8000f8a:	601a      	str	r2, [r3, #0]
				}
			}
			y++;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <httpd_post_finished+0x394>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <httpd_post_finished+0x394>)
 8000f94:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f107 0214 	add.w	r2, r7, #20
 8000f9c:	4923      	ldr	r1, [pc, #140]	; (800102c <httpd_post_finished+0x398>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f010 fdea 	bl	8011b78 <strtok_r>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <httpd_post_finished+0x388>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <httpd_post_finished+0x388>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae95 	bne.w	8000cde <httpd_post_finished+0x4a>
	while ((token = strtok_r(rest, "&", &rest))) {
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	491d      	ldr	r1, [pc, #116]	; (8001030 <httpd_post_finished+0x39c>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f010 fddb 	bl	8011b78 <strtok_r>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <httpd_post_finished+0x3a0>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <httpd_post_finished+0x3a0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f ae7f 	bne.w	8000cd0 <httpd_post_finished+0x3c>
		}

	}
	k++;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <httpd_post_finished+0x3a4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <httpd_post_finished+0x3a4>)
 8000fda:	6013      	str	r3, [r2, #0]
//	 printf("%s * %s * %s \n", T[0].pulluptype, T[1].pulluptype, T[2].pulluptype);
//	 printf("%d * %d * %d \n", T[0].bounceinterval, T[1].bounceinterval, T[2].bounceinterval);
//	 printf("%d * %d * %d \n", T[0].holdinterval, T[1].holdinterval, T[2].holdinterval);

	/* End the parser */
	multipart_parser_free(_parser);
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <httpd_post_finished+0x3a8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f9cc 	bl	800137e <multipart_parser_free>
	memset(bufervar, '\0', sizeof(bufervar));
 8000fe6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000fea:	2100      	movs	r1, #0
 8000fec:	4814      	ldr	r0, [pc, #80]	; (8001040 <httpd_post_finished+0x3ac>)
 8000fee:	f010 fb57 	bl	80116a0 <memset>
	memset(json, '\0', sizeof(json));
 8000ff2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <httpd_post_finished+0x3b0>)
 8000ffa:	f010 fb51 	bl	80116a0 <memset>
	memset(joined_var, '\0', sizeof(joined_var));
 8000ffe:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001002:	2100      	movs	r1, #0
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <httpd_post_finished+0x3b4>)
 8001006:	f010 fb4b 	bl	80116a0 <memset>
}
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	bf00      	nop
 8001014:	20000960 	.word	0x20000960
 8001018:	080130e8 	.word	0x080130e8
 800101c:	20000698 	.word	0x20000698
 8001020:	20000cc8 	.word	0x20000cc8
 8001024:	20000af4 	.word	0x20000af4
 8001028:	200000b4 	.word	0x200000b4
 800102c:	080130f0 	.word	0x080130f0
 8001030:	080130f4 	.word	0x080130f4
 8001034:	20006ee0 	.word	0x20006ee0
 8001038:	200000b0 	.word	0x200000b0
 800103c:	20006dac 	.word	0x20006dac
 8001040:	20000ccc 	.word	0x20000ccc
 8001044:	20004e6c 	.word	0x20004e6c
 8001048:	200006a4 	.word	0x200006a4

0800104c <http_server_init>:
////////////////////  END of POST request ////////////////////////

void http_server_init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	httpd_init();
 8001050:	f005 fde8 	bl	8006c24 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <http_server_init+0x24>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2203      	movs	r2, #3
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <http_server_init+0x28>)
 800105e:	f005 fe01 	bl	8006c64 <http_set_ssi_handler>
	http_set_cgi_handlers(&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
 8001062:	2101      	movs	r1, #1
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <http_server_init+0x2c>)
 8001066:	f005 fe3f 	bl	8006ce8 <http_set_cgi_handlers>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000010 	.word	0x20000010
 8001074:	08000599 	.word	0x08000599
 8001078:	08016408 	.word	0x08016408

0800107c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001084:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001088:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001094:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001098:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800109c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010a4:	e000      	b.n	80010a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f9      	beq.n	80010a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	2332      	movs	r3, #50	; 0x32
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <_write+0x48>)
 80010e2:	f002 fe9c 	bl	8003e1e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x34>
		ITM_SendChar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffc1 	bl	800107c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x20>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20006f18 	.word	0x20006f18

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f000 fd80 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f810 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 f8a2 	bl	800126c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001128:	f000 f876 	bl	8001218 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 800112c:	f003 f940 	bl	80043b0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001130:	f7ff ff8c 	bl	800104c <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <main+0x28>)
 8001136:	f003 fd13 	bl	8004b60 <ethernetif_input>
      sys_check_timeouts();
 800113a:	f00d fd87 	bl	800ec4c <sys_check_timeouts>
      ethernetif_input(&gnetif);
 800113e:	e7f9      	b.n	8001134 <main+0x1c>
 8001140:	20006ee4 	.word	0x20006ee4

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f010 faa4 	bl	80116a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011b8:	23a8      	movs	r3, #168	; 0xa8
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c0:	2304      	movs	r3, #4
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f967 	bl	800349c <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d4:	f000 f88e 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2105      	movs	r1, #5
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fbc8 	bl	800398c <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 f877 	bl	80012f4 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	; 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_USART6_UART_Init+0x50>)
 8001220:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_USART6_UART_Init+0x4c>)
 8001250:	f002 fd98 	bl	8003d84 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800125a:	f000 f84b 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20006f18 	.word	0x20006f18
 8001268:	40011400 	.word	0x40011400

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <MX_GPIO_Init+0x84>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_GPIO_Init+0x84>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>

080012fe <multipart_log>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

static void multipart_log(const char * format, ...)
{
 80012fe:	b40f      	push	{r0, r1, r2, r3}
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

    fprintf(stderr, "[HTTP_MULTIPART_PARSER] %s:%d: ", __FILE__, __LINE__);
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");
#endif
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	b004      	add	sp, #16
 800130e:	4770      	bx	lr

08001310 <multipart_parser_init>:
  s_part_data_final_hyphen,
  s_end
};

multipart_parser* multipart_parser_init
    (const char *boundary, const multipart_parser_settings* settings) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]

  multipart_parser* p = malloc(sizeof(multipart_parser) +
                               strlen(boundary) +
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7fe ff62 	bl	80001e4 <strlen>
 8001320:	4604      	mov	r4, r0
                               strlen(boundary) + 9);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7fe ff5e 	bl	80001e4 <strlen>
 8001328:	4603      	mov	r3, r0
                               strlen(boundary) +
 800132a:	4423      	add	r3, r4
  multipart_parser* p = malloc(sizeof(multipart_parser) +
 800132c:	3325      	adds	r3, #37	; 0x25
 800132e:	4618      	mov	r0, r3
 8001330:	f010 f970 	bl	8011614 <malloc>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]

  strcpy(p->multipart_boundary, boundary);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3318      	adds	r3, #24
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f010 fb7a 	bl	8011a38 <strcpy>
  p->boundary_length = strlen(boundary);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7fe ff4d 	bl	80001e4 <strlen>
 800134a:	4602      	mov	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]

  p->lookbehind = (p->multipart_boundary + p->boundary_length + 1);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f103 0218 	add.w	r2, r3, #24
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	441a      	add	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	615a      	str	r2, [r3, #20]

  p->index = 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  p->state = s_start;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2202      	movs	r2, #2
 800136c:	731a      	strb	r2, [r3, #12]
  p->settings = settings;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	611a      	str	r2, [r3, #16]

  return p;
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}

0800137e <multipart_parser_free>:

void multipart_parser_free(multipart_parser* p) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  free(p);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f010 f94c 	bl	8011624 <free>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <multipart_parser_execute>:

void *multipart_parser_get_data(multipart_parser *p) {
    return p->data;
}

size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  size_t i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  size_t mark = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  char c, cl;
  int is_last = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  while(i < len) {
 80013ac:	e29a      	b.n	80018e4 <multipart_parser_execute+0x550>
    c = buf[i];
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	74fb      	strb	r3, [r7, #19]
    is_last = (i == (len - 1));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	429a      	cmp	r2, r3
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	617b      	str	r3, [r7, #20]
    switch (p->state) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	7b1b      	ldrb	r3, [r3, #12]
 80013ce:	3b02      	subs	r3, #2
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	f200 8274 	bhi.w	80018be <multipart_parser_execute+0x52a>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <multipart_parser_execute+0x48>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	0800141d 	.word	0x0800141d
 80013e0:	0800142f 	.word	0x0800142f
 80013e4:	080014bb 	.word	0x080014bb
 80013e8:	080014cb 	.word	0x080014cb
 80013ec:	0800158f 	.word	0x0800158f
 80013f0:	080015a7 	.word	0x080015a7
 80013f4:	080015bf 	.word	0x080015bf
 80013f8:	08001639 	.word	0x08001639
 80013fc:	08001651 	.word	0x08001651
 8001400:	080016ab 	.word	0x080016ab
 8001404:	08001731 	.word	0x08001731
 8001408:	08001789 	.word	0x08001789
 800140c:	08001823 	.word	0x08001823
 8001410:	0800187f 	.word	0x0800187f
 8001414:	08001849 	.word	0x08001849
 8001418:	080018b3 	.word	0x080018b3
      case s_start:
        multipart_log("s_start");
 800141c:	4895      	ldr	r0, [pc, #596]	; (8001674 <multipart_parser_execute+0x2e0>)
 800141e:	f7ff ff6e 	bl	80012fe <multipart_log>
        p->index = 0;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
        p->state = s_start_boundary;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2203      	movs	r2, #3
 800142c:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_start_boundary:
        multipart_log("s_start_boundary");
 800142e:	4892      	ldr	r0, [pc, #584]	; (8001678 <multipart_parser_execute+0x2e4>)
 8001430:	f7ff ff65 	bl	80012fe <multipart_log>
        if (p->index == p->boundary_length) {
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	429a      	cmp	r2, r3
 800143e:	d10a      	bne.n	8001456 <multipart_parser_execute+0xc2>
          if (c != CR) {
 8001440:	7cfb      	ldrb	r3, [r7, #19]
 8001442:	2b0d      	cmp	r3, #13
 8001444:	d001      	beq.n	800144a <multipart_parser_execute+0xb6>
            return i;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	e252      	b.n	80018f0 <multipart_parser_execute+0x55c>
          }
          p->index++;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
          break;
 8001454:	e243      	b.n	80018de <multipart_parser_execute+0x54a>
        } else if (p->index == (p->boundary_length + 1)) {
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	3301      	adds	r3, #1
 8001460:	429a      	cmp	r2, r3
 8001462:	d11a      	bne.n	800149a <multipart_parser_execute+0x106>
          if (c != LF) {
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d001      	beq.n	800146e <multipart_parser_execute+0xda>
            return i;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	e240      	b.n	80018f0 <multipart_parser_execute+0x55c>
          }
          p->index = 0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
          NOTIFY_CB(part_data_begin);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <multipart_parser_execute+0xfe>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	4798      	blx	r3
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <multipart_parser_execute+0xfe>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	e22e      	b.n	80018f0 <multipart_parser_execute+0x55c>
          p->state = s_header_field_start;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2204      	movs	r2, #4
 8001496:	731a      	strb	r2, [r3, #12]
          break;
 8001498:	e221      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        if (c != p->multipart_boundary[p->index]) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	7e1b      	ldrb	r3, [r3, #24]
 80014a4:	7cfa      	ldrb	r2, [r7, #19]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d001      	beq.n	80014ae <multipart_parser_execute+0x11a>
          return i;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	e220      	b.n	80018f0 <multipart_parser_execute+0x55c>
        }
        p->index++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
        break;
 80014b8:	e211      	b.n	80018de <multipart_parser_execute+0x54a>

      case s_header_field_start:
        multipart_log("s_header_field_start");
 80014ba:	4870      	ldr	r0, [pc, #448]	; (800167c <multipart_parser_execute+0x2e8>)
 80014bc:	f7ff ff1f 	bl	80012fe <multipart_log>
        mark = i;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	61bb      	str	r3, [r7, #24]
        p->state = s_header_field;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2205      	movs	r2, #5
 80014c8:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_field:
        multipart_log("s_header_field");
 80014ca:	486d      	ldr	r0, [pc, #436]	; (8001680 <multipart_parser_execute+0x2ec>)
 80014cc:	f7ff ff17 	bl	80012fe <multipart_log>
        if (c == CR) {
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	2b0d      	cmp	r3, #13
 80014d4:	d103      	bne.n	80014de <multipart_parser_execute+0x14a>
          p->state = s_headers_almost_done;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2206      	movs	r2, #6
 80014da:	731a      	strb	r2, [r3, #12]
          break;
 80014dc:	e1ff      	b.n	80018de <multipart_parser_execute+0x54a>
        }

        if (c == ':') {
 80014de:	7cfb      	ldrb	r3, [r7, #19]
 80014e0:	2b3a      	cmp	r3, #58	; 0x3a
 80014e2:	d119      	bne.n	8001518 <multipart_parser_execute+0x184>
          EMIT_DATA_CB(header_field, buf + mark, i - mark);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d010      	beq.n	8001510 <multipart_parser_execute+0x17c>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	1888      	adds	r0, r1, r2
 80014fa:	69f9      	ldr	r1, [r7, #28]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	1a8a      	subs	r2, r1, r2
 8001500:	4601      	mov	r1, r0
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	4798      	blx	r3
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <multipart_parser_execute+0x17c>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	e1ef      	b.n	80018f0 <multipart_parser_execute+0x55c>
          p->state = s_header_value_start;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2207      	movs	r2, #7
 8001514:	731a      	strb	r2, [r3, #12]
          break;
 8001516:	e1e2      	b.n	80018de <multipart_parser_execute+0x54a>
        }

        cl = tolower(c);
 8001518:	7cfb      	ldrb	r3, [r7, #19]
 800151a:	74bb      	strb	r3, [r7, #18]
 800151c:	7cbb      	ldrb	r3, [r7, #18]
 800151e:	3301      	adds	r3, #1
 8001520:	4a58      	ldr	r2, [pc, #352]	; (8001684 <multipart_parser_execute+0x2f0>)
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d102      	bne.n	8001534 <multipart_parser_execute+0x1a0>
 800152e:	7cbb      	ldrb	r3, [r7, #18]
 8001530:	3320      	adds	r3, #32
 8001532:	e000      	b.n	8001536 <multipart_parser_execute+0x1a2>
 8001534:	7cbb      	ldrb	r3, [r7, #18]
 8001536:	747b      	strb	r3, [r7, #17]
        if ((c != '-') && (cl < 'a' || cl > 'z')) {
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	2b2d      	cmp	r3, #45	; 0x2d
 800153c:	d00a      	beq.n	8001554 <multipart_parser_execute+0x1c0>
 800153e:	7c7b      	ldrb	r3, [r7, #17]
 8001540:	2b60      	cmp	r3, #96	; 0x60
 8001542:	d902      	bls.n	800154a <multipart_parser_execute+0x1b6>
 8001544:	7c7b      	ldrb	r3, [r7, #17]
 8001546:	2b7a      	cmp	r3, #122	; 0x7a
 8001548:	d904      	bls.n	8001554 <multipart_parser_execute+0x1c0>
          multipart_log("invalid character in header name");
 800154a:	484f      	ldr	r0, [pc, #316]	; (8001688 <multipart_parser_execute+0x2f4>)
 800154c:	f7ff fed7 	bl	80012fe <multipart_log>
          return i;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	e1cd      	b.n	80018f0 <multipart_parser_execute+0x55c>
        }
        if (is_last)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 81b6 	beq.w	80018c8 <multipart_parser_execute+0x534>
            EMIT_DATA_CB(header_field, buf + mark, (i - mark) + 1);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 81b0 	beq.w	80018c8 <multipart_parser_execute+0x534>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	1888      	adds	r0, r1, r2
 8001574:	69f9      	ldr	r1, [r7, #28]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	1a8a      	subs	r2, r1, r2
 800157a:	3201      	adds	r2, #1
 800157c:	4601      	mov	r1, r0
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	4798      	blx	r3
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 819f 	beq.w	80018c8 <multipart_parser_execute+0x534>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	e1b0      	b.n	80018f0 <multipart_parser_execute+0x55c>
        break;

      case s_headers_almost_done:
        multipart_log("s_headers_almost_done");
 800158e:	483f      	ldr	r0, [pc, #252]	; (800168c <multipart_parser_execute+0x2f8>)
 8001590:	f7ff feb5 	bl	80012fe <multipart_log>
        if (c != LF) {
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d001      	beq.n	800159e <multipart_parser_execute+0x20a>
          return i;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	e1a8      	b.n	80018f0 <multipart_parser_execute+0x55c>
        }

        p->state = s_part_data_start;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	220a      	movs	r2, #10
 80015a2:	731a      	strb	r2, [r3, #12]
        break;
 80015a4:	e19b      	b.n	80018de <multipart_parser_execute+0x54a>

      case s_header_value_start:
        multipart_log("s_header_value_start");
 80015a6:	483a      	ldr	r0, [pc, #232]	; (8001690 <multipart_parser_execute+0x2fc>)
 80015a8:	f7ff fea9 	bl	80012fe <multipart_log>
        if (c == ' ') {
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	f000 818c 	beq.w	80018cc <multipart_parser_execute+0x538>
          break;
        }

        mark = i;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	61bb      	str	r3, [r7, #24]
        p->state = s_header_value;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2208      	movs	r2, #8
 80015bc:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_value:
        multipart_log("s_header_value");
 80015be:	4835      	ldr	r0, [pc, #212]	; (8001694 <multipart_parser_execute+0x300>)
 80015c0:	f7ff fe9d 	bl	80012fe <multipart_log>
        if (c == CR) {
 80015c4:	7cfb      	ldrb	r3, [r7, #19]
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	d119      	bne.n	80015fe <multipart_parser_execute+0x26a>
          EMIT_DATA_CB(header_value, buf + mark, i - mark);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <multipart_parser_execute+0x262>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	1888      	adds	r0, r1, r2
 80015e0:	69f9      	ldr	r1, [r7, #28]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	1a8a      	subs	r2, r1, r2
 80015e6:	4601      	mov	r1, r0
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	4798      	blx	r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <multipart_parser_execute+0x262>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	e17c      	b.n	80018f0 <multipart_parser_execute+0x55c>
          p->state = s_header_value_almost_done;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2209      	movs	r2, #9
 80015fa:	731a      	strb	r2, [r3, #12]
          break;
 80015fc:	e16f      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        if (is_last)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8165 	beq.w	80018d0 <multipart_parser_execute+0x53c>
            EMIT_DATA_CB(header_value, buf + mark, (i - mark) + 1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 815f 	beq.w	80018d0 <multipart_parser_execute+0x53c>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	1888      	adds	r0, r1, r2
 800161e:	69f9      	ldr	r1, [r7, #28]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	1a8a      	subs	r2, r1, r2
 8001624:	3201      	adds	r2, #1
 8001626:	4601      	mov	r1, r0
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	4798      	blx	r3
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 814e 	beq.w	80018d0 <multipart_parser_execute+0x53c>
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	e15b      	b.n	80018f0 <multipart_parser_execute+0x55c>
        break;

      case s_header_value_almost_done:
        multipart_log("s_header_value_almost_done");
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <multipart_parser_execute+0x304>)
 800163a:	f7ff fe60 	bl	80012fe <multipart_log>
        if (c != LF) {
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	2b0a      	cmp	r3, #10
 8001642:	d001      	beq.n	8001648 <multipart_parser_execute+0x2b4>
          return i;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	e153      	b.n	80018f0 <multipart_parser_execute+0x55c>
        }
        p->state = s_header_field_start;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2204      	movs	r2, #4
 800164c:	731a      	strb	r2, [r3, #12]
        break;
 800164e:	e146      	b.n	80018de <multipart_parser_execute+0x54a>

      case s_part_data_start:
        multipart_log("s_part_data_start");
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <multipart_parser_execute+0x308>)
 8001652:	f7ff fe54 	bl	80012fe <multipart_log>
        NOTIFY_CB(headers_complete);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01f      	beq.n	80016a0 <multipart_parser_execute+0x30c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	4798      	blx	r3
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <multipart_parser_execute+0x30c>
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	e13d      	b.n	80018f0 <multipart_parser_execute+0x55c>
 8001674:	080130f8 	.word	0x080130f8
 8001678:	08013100 	.word	0x08013100
 800167c:	08013114 	.word	0x08013114
 8001680:	0801312c 	.word	0x0801312c
 8001684:	08017f0e 	.word	0x08017f0e
 8001688:	0801313c 	.word	0x0801313c
 800168c:	08013160 	.word	0x08013160
 8001690:	08013178 	.word	0x08013178
 8001694:	08013190 	.word	0x08013190
 8001698:	080131a0 	.word	0x080131a0
 800169c:	080131bc 	.word	0x080131bc
        mark = i;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	61bb      	str	r3, [r7, #24]
        p->state = s_part_data;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	220b      	movs	r2, #11
 80016a8:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_part_data:
        multipart_log("s_part_data");
 80016aa:	4893      	ldr	r0, [pc, #588]	; (80018f8 <multipart_parser_execute+0x564>)
 80016ac:	f7ff fe27 	bl	80012fe <multipart_log>
        if (c == CR) {
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b0d      	cmp	r3, #13
 80016b4:	d11f      	bne.n	80016f6 <multipart_parser_execute+0x362>
            EMIT_DATA_CB(part_data, buf + mark, i - mark);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d010      	beq.n	80016e2 <multipart_parser_execute+0x34e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	1888      	adds	r0, r1, r2
 80016cc:	69f9      	ldr	r1, [r7, #28]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	4601      	mov	r1, r0
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	4798      	blx	r3
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <multipart_parser_execute+0x34e>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	e106      	b.n	80018f0 <multipart_parser_execute+0x55c>
            mark = i;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	61bb      	str	r3, [r7, #24]
            p->state = s_part_data_almost_boundary;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	220c      	movs	r2, #12
 80016ea:	731a      	strb	r2, [r3, #12]
            p->lookbehind[0] = CR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	220d      	movs	r2, #13
 80016f2:	701a      	strb	r2, [r3, #0]
            break;
 80016f4:	e0f3      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        if (is_last)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80eb 	beq.w	80018d4 <multipart_parser_execute+0x540>
            EMIT_DATA_CB(part_data, buf + mark, (i - mark) + 1);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80e5 	beq.w	80018d4 <multipart_parser_execute+0x540>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	1888      	adds	r0, r1, r2
 8001716:	69f9      	ldr	r1, [r7, #28]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	1a8a      	subs	r2, r1, r2
 800171c:	3201      	adds	r2, #1
 800171e:	4601      	mov	r1, r0
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	4798      	blx	r3
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80d4 	beq.w	80018d4 <multipart_parser_execute+0x540>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	e0df      	b.n	80018f0 <multipart_parser_execute+0x55c>
        break;

      case s_part_data_almost_boundary:
        multipart_log("s_part_data_almost_boundary");
 8001730:	4872      	ldr	r0, [pc, #456]	; (80018fc <multipart_parser_execute+0x568>)
 8001732:	f7ff fde4 	bl	80012fe <multipart_log>
        if (c == LF) {
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	2b0a      	cmp	r3, #10
 800173a:	d10b      	bne.n	8001754 <multipart_parser_execute+0x3c0>
            p->state = s_part_data_boundary;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	220d      	movs	r2, #13
 8001740:	731a      	strb	r2, [r3, #12]
            p->lookbehind[1] = LF;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	220a      	movs	r2, #10
 800174a:	701a      	strb	r2, [r3, #0]
            p->index = 0;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
            break;
 8001752:	e0c4      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        EMIT_DATA_CB(part_data, p->lookbehind, 1);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <multipart_parser_execute+0x3e4>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6951      	ldr	r1, [r2, #20]
 8001768:	2201      	movs	r2, #1
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <multipart_parser_execute+0x3e4>
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	e0bb      	b.n	80018f0 <multipart_parser_execute+0x55c>
        p->state = s_part_data;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	220b      	movs	r2, #11
 800177c:	731a      	strb	r2, [r3, #12]
        mark = i --;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	61fa      	str	r2, [r7, #28]
 8001784:	61bb      	str	r3, [r7, #24]
        break;
 8001786:	e0aa      	b.n	80018de <multipart_parser_execute+0x54a>

      case s_part_data_boundary:
        multipart_log("s_part_data_boundary");
 8001788:	485d      	ldr	r0, [pc, #372]	; (8001900 <multipart_parser_execute+0x56c>)
 800178a:	f7ff fdb8 	bl	80012fe <multipart_log>
        if (p->multipart_boundary[p->index] != c) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	7e1b      	ldrb	r3, [r3, #24]
 8001798:	7cfa      	ldrb	r2, [r7, #19]
 800179a:	429a      	cmp	r2, r3
 800179c:	d01b      	beq.n	80017d6 <multipart_parser_execute+0x442>
          EMIT_DATA_CB(part_data, p->lookbehind, 2 + p->index);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <multipart_parser_execute+0x432>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	6951      	ldr	r1, [r2, #20]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6852      	ldr	r2, [r2, #4]
 80017b6:	3202      	adds	r2, #2
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	4798      	blx	r3
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <multipart_parser_execute+0x432>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	e094      	b.n	80018f0 <multipart_parser_execute+0x55c>
          p->state = s_part_data;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	220b      	movs	r2, #11
 80017ca:	731a      	strb	r2, [r3, #12]
          mark = i --;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	61fa      	str	r2, [r7, #28]
 80017d2:	61bb      	str	r3, [r7, #24]
          break;
 80017d4:	e083      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        p->lookbehind[2 + p->index] = c;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	3302      	adds	r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	7cfa      	ldrb	r2, [r7, #19]
 80017e4:	701a      	strb	r2, [r3, #0]
        if ((++ p->index) == p->boundary_length) {
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d16d      	bne.n	80018d8 <multipart_parser_execute+0x544>
            NOTIFY_CB(part_data_end);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <multipart_parser_execute+0x486>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	4798      	blx	r3
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <multipart_parser_execute+0x486>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	e06a      	b.n	80018f0 <multipart_parser_execute+0x55c>
            p->state = s_part_data_almost_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	220e      	movs	r2, #14
 800181e:	731a      	strb	r2, [r3, #12]
        }
        break;
 8001820:	e05a      	b.n	80018d8 <multipart_parser_execute+0x544>

      case s_part_data_almost_end:
        multipart_log("s_part_data_almost_end");
 8001822:	4838      	ldr	r0, [pc, #224]	; (8001904 <multipart_parser_execute+0x570>)
 8001824:	f7ff fd6b 	bl	80012fe <multipart_log>
        if (c == '-') {
 8001828:	7cfb      	ldrb	r3, [r7, #19]
 800182a:	2b2d      	cmp	r3, #45	; 0x2d
 800182c:	d103      	bne.n	8001836 <multipart_parser_execute+0x4a2>
            p->state = s_part_data_final_hyphen;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2210      	movs	r2, #16
 8001832:	731a      	strb	r2, [r3, #12]
            break;
 8001834:	e053      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        if (c == CR) {
 8001836:	7cfb      	ldrb	r3, [r7, #19]
 8001838:	2b0d      	cmp	r3, #13
 800183a:	d103      	bne.n	8001844 <multipart_parser_execute+0x4b0>
            p->state = s_part_data_end;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	220f      	movs	r2, #15
 8001840:	731a      	strb	r2, [r3, #12]
            break;
 8001842:	e04c      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        return i;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	e053      	b.n	80018f0 <multipart_parser_execute+0x55c>

      case s_part_data_final_hyphen:
        multipart_log("s_part_data_final_hyphen");
 8001848:	482f      	ldr	r0, [pc, #188]	; (8001908 <multipart_parser_execute+0x574>)
 800184a:	f7ff fd58 	bl	80012fe <multipart_log>
        if (c == '-') {
 800184e:	7cfb      	ldrb	r3, [r7, #19]
 8001850:	2b2d      	cmp	r3, #45	; 0x2d
 8001852:	d112      	bne.n	800187a <multipart_parser_execute+0x4e6>
            NOTIFY_CB(body_end);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <multipart_parser_execute+0x4de>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	4798      	blx	r3
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <multipart_parser_execute+0x4de>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	e03e      	b.n	80018f0 <multipart_parser_execute+0x55c>
            p->state = s_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2211      	movs	r2, #17
 8001876:	731a      	strb	r2, [r3, #12]
            break;
 8001878:	e031      	b.n	80018de <multipart_parser_execute+0x54a>
        }
        return i;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	e038      	b.n	80018f0 <multipart_parser_execute+0x55c>

      case s_part_data_end:
        multipart_log("s_part_data_end");
 800187e:	4823      	ldr	r0, [pc, #140]	; (800190c <multipart_parser_execute+0x578>)
 8001880:	f7ff fd3d 	bl	80012fe <multipart_log>
        if (c == LF) {
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d111      	bne.n	80018ae <multipart_parser_execute+0x51a>
            p->state = s_header_field_start;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2204      	movs	r2, #4
 800188e:	731a      	strb	r2, [r3, #12]
            NOTIFY_CB(part_data_begin);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d020      	beq.n	80018dc <multipart_parser_execute+0x548>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d018      	beq.n	80018dc <multipart_parser_execute+0x548>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	e020      	b.n	80018f0 <multipart_parser_execute+0x55c>
            break;
        }
        return i;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	e01e      	b.n	80018f0 <multipart_parser_execute+0x55c>

      case s_end:
        multipart_log("s_end: %02X", (int) c);
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <multipart_parser_execute+0x57c>)
 80018b8:	f7ff fd21 	bl	80012fe <multipart_log>
        break;
 80018bc:	e00f      	b.n	80018de <multipart_parser_execute+0x54a>

      default:
        multipart_log("Multipart parser unrecoverable error");
 80018be:	4815      	ldr	r0, [pc, #84]	; (8001914 <multipart_parser_execute+0x580>)
 80018c0:	f7ff fd1d 	bl	80012fe <multipart_log>
        return 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e013      	b.n	80018f0 <multipart_parser_execute+0x55c>
        break;
 80018c8:	bf00      	nop
 80018ca:	e008      	b.n	80018de <multipart_parser_execute+0x54a>
          break;
 80018cc:	bf00      	nop
 80018ce:	e006      	b.n	80018de <multipart_parser_execute+0x54a>
        break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <multipart_parser_execute+0x54a>
        break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <multipart_parser_execute+0x54a>
        break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <multipart_parser_execute+0x54a>
            break;
 80018dc:	bf00      	nop
    }
    ++ i;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
  while(i < len) {
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f4ff ad60 	bcc.w	80013ae <multipart_parser_execute+0x1a>
  }

  return len;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	080131d0 	.word	0x080131d0
 80018fc:	080131dc 	.word	0x080131dc
 8001900:	080131f8 	.word	0x080131f8
 8001904:	08013210 	.word	0x08013210
 8001908:	08013228 	.word	0x08013228
 800190c:	08013244 	.word	0x08013244
 8001910:	08013254 	.word	0x08013254
 8001914:	08013260 	.word	0x08013260

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_UART_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12b      	bne.n	80019e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_UART_MspInit+0x88>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c2:	23c0      	movs	r3, #192	; 0xc0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019d2:	2308      	movs	r3, #8
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_UART_MspInit+0x8c>)
 80019de:	f001 fbc1 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40011400 	.word	0x40011400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020800 	.word	0x40020800

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f93e 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <_kill+0x20>)
 8001a68:	2216      	movs	r2, #22
 8001a6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20017500 	.word	0x20017500

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe5 	bl	8001a5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d205      	bcs.n	8001b74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <_sbrk+0x6c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20020000 	.word	0x20020000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	200000c4 	.word	0x200000c4
 8001ba0:	20017510 	.word	0x20017510
 8001ba4:	20017500 	.word	0x20017500

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be8:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ffd7 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f00f fce7 	bl	80115cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fa8b 	bl	8001118 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c10:	080181cc 	.word	0x080181cc
  ldr r2, =_sbss
 8001c14:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001c18:	20017510 	.word	0x20017510

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f931 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fe60 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f93b 	bl	8001efe <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca0:	f000 f911 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000001c 	.word	0x2000001c
 8001cbc:	20000024 	.word	0x20000024
 8001cc0:	20000020 	.word	0x20000020

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000024 	.word	0x20000024
 8001ce8:	20006f5c 	.word	0x20006f5c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20006f5c 	.word	0x20006f5c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000024 	.word	0x20000024

08001d4c <__NVIC_SetPriorityGrouping>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_SetPriority>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff47 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff5c 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffb0 	bl	8001e6c <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001f28:	4baa      	ldr	r3, [pc, #680]	; (80021d4 <HAL_ETH_Init+0x2bc>)
 8001f2a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e183      	b.n	8002246 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f002 fb5e 	bl	8004614 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_ETH_Init+0x2c0>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	4a9d      	ldr	r2, [pc, #628]	; (80021d8 <HAL_ETH_Init+0x2c0>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f66:	6453      	str	r3, [r2, #68]	; 0x44
 8001f68:	4b9b      	ldr	r3, [pc, #620]	; (80021d8 <HAL_ETH_Init+0x2c0>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f74:	4b99      	ldr	r3, [pc, #612]	; (80021dc <HAL_ETH_Init+0x2c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a98      	ldr	r2, [pc, #608]	; (80021dc <HAL_ETH_Init+0x2c4>)
 8001f7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f7e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f80:	4b96      	ldr	r3, [pc, #600]	; (80021dc <HAL_ETH_Init+0x2c4>)
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4994      	ldr	r1, [pc, #592]	; (80021dc <HAL_ETH_Init+0x2c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa6:	f7ff fea1 	bl	8001cec <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fac:	e011      	b.n	8001fd2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001fae:	f7ff fe9d 	bl	8001cec <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fbc:	d909      	bls.n	8001fd2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e139      	b.n	8002246 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e4      	bne.n	8001fae <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f023 031c 	bic.w	r3, r3, #28
 8001ff2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ff4:	f001 fe92 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8001ff8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4a78      	ldr	r2, [pc, #480]	; (80021e0 <HAL_ETH_Init+0x2c8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d908      	bls.n	8002014 <HAL_ETH_Init+0xfc>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_ETH_Init+0x2cc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d804      	bhi.n	8002014 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e027      	b.n	8002064 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <HAL_ETH_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d908      	bls.n	800202e <HAL_ETH_Init+0x116>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4a6d      	ldr	r2, [pc, #436]	; (80021d4 <HAL_ETH_Init+0x2bc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d204      	bcs.n	800202e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f043 030c 	orr.w	r3, r3, #12
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	e01a      	b.n	8002064 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4a68      	ldr	r2, [pc, #416]	; (80021d4 <HAL_ETH_Init+0x2bc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d303      	bcc.n	800203e <HAL_ETH_Init+0x126>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <HAL_ETH_Init+0x2d0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d911      	bls.n	8002062 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_ETH_Init+0x2d0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d908      	bls.n	8002058 <HAL_ETH_Init+0x140>
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4a68      	ldr	r2, [pc, #416]	; (80021ec <HAL_ETH_Init+0x2d4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d804      	bhi.n	8002058 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e005      	b.n	8002064 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	e000      	b.n	8002064 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002062:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800206c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fb98 	bl	80027a8 <HAL_ETH_WritePHYRegister>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002082:	6939      	ldr	r1, [r7, #16]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fd4d 	bl	8002b24 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0d7      	b.n	8002246 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002096:	20ff      	movs	r0, #255	; 0xff
 8002098:	f7ff fe34 	bl	8001d04 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a5 	beq.w	80021f0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80020a6:	f7ff fe21 	bl	8001cec <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fb0f 	bl	80026d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80020ba:	f7ff fe17 	bl	8001cec <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d90f      	bls.n	80020ec <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020d0:	6939      	ldr	r1, [r7, #16]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fd26 	bl	8002b24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0ac      	b.n	8002246 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0da      	beq.n	80020ac <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80020f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fb53 	bl	80027a8 <HAL_ETH_WritePHYRegister>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800210c:	6939      	ldr	r1, [r7, #16]
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fd08 	bl	8002b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800211c:	2301      	movs	r3, #1
 800211e:	e092      	b.n	8002246 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff fde4 	bl	8001cec <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	461a      	mov	r2, r3
 800212c:	2101      	movs	r1, #1
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fad2 	bl	80026d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002134:	f7ff fdda 	bl	8001cec <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d90f      	bls.n	8002166 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fce9 	bl	8002b24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e06f      	b.n	8002246 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0da      	beq.n	8002126 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	461a      	mov	r2, r3
 8002176:	2110      	movs	r1, #16
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 faad 	bl	80026d8 <HAL_ETH_ReadPHYRegister>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002188:	6939      	ldr	r1, [r7, #16]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fcca 	bl	8002b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002198:	2301      	movs	r3, #1
 800219a:	e054      	b.n	8002246 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e002      	b.n	80021b6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	e035      	b.n	8002234 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e030      	b.n	8002234 <HAL_ETH_Init+0x31c>
 80021d2:	bf00      	nop
 80021d4:	03938700 	.word	0x03938700
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	01312cff 	.word	0x01312cff
 80021e4:	02160ebf 	.word	0x02160ebf
 80021e8:	05f5e0ff 	.word	0x05f5e0ff
 80021ec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002200:	4313      	orrs	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	2100      	movs	r1, #0
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 facd 	bl	80027a8 <HAL_ETH_WritePHYRegister>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fc82 	bl	8002b24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00c      	b.n	8002246 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800222c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002230:	f7ff fd68 	bl	8001d04 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002234:	6939      	ldr	r1, [r7, #16]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fc74 	bl	8002b24 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_ETH_DMATxDescListInit+0x20>
 800226c:	2302      	movs	r3, #2
 800226e:	e052      	b.n	8002316 <HAL_ETH_DMATxDescListInit+0xc6>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e030      	b.n	80022ee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	015b      	lsls	r3, r3, #5
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800229c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d208      	bcs.n	80022e2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	015b      	lsls	r3, r3, #5
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	461a      	mov	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	e002      	b.n	80022e8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3ca      	bcc.n	800228c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	3310      	adds	r3, #16
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002322:	b480      	push	{r7}
 8002324:	b087      	sub	sp, #28
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ETH_DMARxDescListInit+0x20>
 800233e:	2302      	movs	r3, #2
 8002340:	e056      	b.n	80023f0 <HAL_ETH_DMARxDescListInit+0xce>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e034      	b.n	80023c8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	015b      	lsls	r3, r3, #5
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4413      	add	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800236e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002376:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	461a      	mov	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d208      	bcs.n	80023bc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	4413      	add	r3, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	e002      	b.n	80023c2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3c6      	bcc.n	800235e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	330c      	adds	r3, #12
 80023dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ETH_TransmitFrame+0x24>
 800241c:	2302      	movs	r3, #2
 800241e:	e0cd      	b.n	80025bc <HAL_ETH_TransmitFrame+0x1c0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002446:	2301      	movs	r3, #1
 8002448:	e0b8      	b.n	80025bc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	da09      	bge.n	8002468 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2212      	movs	r2, #18
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0a9      	b.n	80025bc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800246e:	4293      	cmp	r3, r2
 8002470:	d915      	bls.n	800249e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002482:	fba3 1302 	umull	r1, r3, r3, r2
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e001      	b.n	80024a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d11c      	bne.n	80024e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80024b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e0:	e04b      	b.n	800257a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e044      	b.n	8002572 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002516:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	429a      	cmp	r2, r3
 8002520:	d116      	bne.n	8002550 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002530:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4a25      	ldr	r2, [pc, #148]	; (80025cc <HAL_ETH_TransmitFrame+0x1d0>)
 8002536:	fb02 f203 	mul.w	r2, r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002542:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800254e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800255e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	3301      	adds	r3, #1
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	429a      	cmp	r2, r3
 8002578:	d3b6      	bcc.n	80024e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002582:	3314      	adds	r3, #20
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002596:	3314      	adds	r3, #20
 8002598:	2204      	movs	r2, #4
 800259a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a4:	3304      	adds	r3, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	ac02b00b 	.word	0xac02b00b
 80025cc:	fffffa0c 	.word	0xfffffa0c

080025d0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ETH_GetReceivedFrame+0x1a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e070      	b.n	80026cc <HAL_ETH_GetReceivedFrame+0xfc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db5a      	blt.n	80026ba <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d030      	beq.n	8002674 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2b01      	cmp	r3, #1
 8002622:	d103      	bne.n	800262c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002640:	3b04      	subs	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e02b      	b.n	80026cc <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
 80026a2:	e00a      	b.n	80026ba <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	460b      	mov	r3, r1
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b82      	cmp	r3, #130	; 0x82
 80026f8:	d101      	bne.n	80026fe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e050      	b.n	80027a0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2282      	movs	r2, #130	; 0x82
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 031c 	and.w	r3, r3, #28
 8002714:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8a1b      	ldrh	r3, [r3, #16]
 800271a:	02db      	lsls	r3, r3, #11
 800271c:	b29b      	uxth	r3, r3
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800274a:	f7ff facf 	bl	8001cec <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002750:	e015      	b.n	800277e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002752:	f7ff facb 	bl	8001cec <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d309      	bcc.n	8002776 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e014      	b.n	80027a0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e4      	bne.n	8002752 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	460b      	mov	r3, r1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b42      	cmp	r3, #66	; 0x42
 80027c8:	d101      	bne.n	80027ce <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e04e      	b.n	800286c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2242      	movs	r2, #66	; 0x42
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 031c 	and.w	r3, r3, #28
 80027e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8a1b      	ldrh	r3, [r3, #16]
 80027ea:	02db      	lsls	r3, r3, #11
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	019b      	lsls	r3, r3, #6
 80027f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7ff fa62 	bl	8001cec <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800282a:	e015      	b.n	8002858 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800282c:	f7ff fa5e 	bl	8001cec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d309      	bcc.n	8002850 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e00d      	b.n	800286c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e4      	bne.n	800282c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ETH_Start+0x16>
 8002886:	2302      	movs	r3, #2
 8002888:	e01f      	b.n	80028ca <HAL_ETH_Start+0x56>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fb44 	bl	8002f28 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb7b 	bl	8002f9c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fc12 	bl	80030d0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fbaf 	bl	8003010 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fbdc 	bl	8003070 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ETH_Stop+0x16>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e01f      	b.n	8002928 <HAL_ETH_Stop+0x56>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fba1 	bl	8003040 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fbce 	bl	80030a0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fb66 	bl	8002fd6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fbe0 	bl	80030d0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fb26 	bl	8002f62 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ETH_ConfigMAC+0x1c>
 8002948:	2302      	movs	r3, #2
 800294a:	e0e4      	b.n	8002b16 <HAL_ETH_ConfigMAC+0x1e6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80b1 	beq.w	8002ac6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <HAL_ETH_ConfigMAC+0x1f0>)
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800297c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002982:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002988:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800298e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002994:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800299a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80029a0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80029a6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80029ac:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80029b2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80029b8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80029be:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff f994 	bl	8001d04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029ec:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80029f2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80029f8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80029fe:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002a04:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002a16:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a18:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7ff f96e 	bl	8001d04 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a38:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a42:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002a60:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002a66:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002a6c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002a72:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002a78:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7ff f937 	bl	8001d04 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff f924 	bl	8001d04 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	61da      	str	r2, [r3, #28]
 8002ac4:	e01e      	b.n	8002b04 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ad4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff f904 	bl	8001d04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	ff20810f 	.word	0xff20810f

08002b24 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b0b0      	sub	sp, #192	; 0xc0
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b40:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002b52:	2300      	movs	r3, #0
 8002b54:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b70:	e001      	b.n	8002b76 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b80:	2300      	movs	r3, #0
 8002b82:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002bf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfc:	4bac      	ldr	r3, [pc, #688]	; (8002eb0 <ETH_MACDMAConfig+0x38c>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c08:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002c0c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002c10:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002c16:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002c1a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002c1e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002c24:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002c28:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002c2c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002c30:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002c34:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c38:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff f853 	bl	8001d04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c66:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c6c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c70:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c76:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c7c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c82:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c94:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c96:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7ff f82e 	bl	8001d04 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cba:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002cc4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002cd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002cd8:	4013      	ands	r3, r2
 8002cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ce8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002cee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002cf4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002cfa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002d00:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d14:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe ffef 	bl	8001d04 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d2e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d30:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f7fe ffda 	bl	8001d04 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d58:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d62:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d6c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002da2:	2300      	movs	r3, #0
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dae:	3318      	adds	r3, #24
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002db6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dba:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <ETH_MACDMAConfig+0x390>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002dc2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002dc6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002dc8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002dca:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002dcc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002dce:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002dd0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002dd2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002dd4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002dd6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002dda:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002dde:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002de2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002de4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df6:	3318      	adds	r3, #24
 8002df8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dfc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e06:	3318      	adds	r3, #24
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fe ff78 	bl	8001d04 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e22:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e28:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002e2c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e30:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002e34:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e3a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002e3e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7fe ff51 	bl	8001d04 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e6e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10f      	bne.n	8002e98 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e80:	331c      	adds	r3, #28
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	331c      	adds	r3, #28
 8002e96:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f809 	bl	8002eb8 <ETH_MACAddressConfig>
}
 8002ea6:	bf00      	nop
 8002ea8:	37c0      	adds	r7, #192	; 0xc0
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	ff20810f 	.word	0xff20810f
 8002eb4:	f8de3f23 	.word	0xf8de3f23

08002eb8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3305      	adds	r3, #5
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	3204      	adds	r2, #4
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <ETH_MACAddressConfig+0x68>)
 8002eda:	4413      	add	r3, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3303      	adds	r3, #3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	061a      	lsls	r2, r3, #24
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3302      	adds	r3, #2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	4313      	orrs	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <ETH_MACAddressConfig+0x6c>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40028040 	.word	0x40028040
 8002f24:	40028044 	.word	0x40028044

08002f28 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0208 	orr.w	r2, r2, #8
 8002f42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 f8e9 	bl	8003124 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 f8cc 	bl	8003124 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0204 	orr.w	r2, r2, #4
 8002fb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 f8af 	bl	8003124 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f000 f892 	bl	8003124 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	3318      	adds	r3, #24
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	3318      	adds	r3, #24
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003050:	3318      	adds	r3, #24
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003060:	3318      	adds	r3, #24
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003080:	3318      	adds	r3, #24
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0202 	orr.w	r2, r2, #2
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	3318      	adds	r3, #24
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b0:	3318      	adds	r3, #24
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c0:	3318      	adds	r3, #24
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	3318      	adds	r3, #24
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	3318      	adds	r3, #24
 80030f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003100:	3318      	adds	r3, #24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003106:	2001      	movs	r0, #1
 8003108:	f000 f80c 	bl	8003124 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003116:	3318      	adds	r3, #24
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <ETH_Delay+0x38>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <ETH_Delay+0x3c>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003140:	bf00      	nop
  } 
  while (Delay --);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <ETH_Delay+0x1c>
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	2000001c 	.word	0x2000001c
 8003160:	10624dd3 	.word	0x10624dd3

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e16b      	b.n	8003458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 815a 	bne.w	8003452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d005      	beq.n	80031b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d130      	bne.n	8003218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ec:	2201      	movs	r2, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 0201 	and.w	r2, r3, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b03      	cmp	r3, #3
 8003222:	d017      	beq.n	8003254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d123      	bne.n	80032a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	69b9      	ldr	r1, [r7, #24]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b4 	beq.w	8003452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b60      	ldr	r3, [pc, #384]	; (8003470 <HAL_GPIO_Init+0x30c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_GPIO_Init+0x30c>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_GPIO_Init+0x30c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <HAL_GPIO_Init+0x310>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <HAL_GPIO_Init+0x314>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x226>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_GPIO_Init+0x318>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x222>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a50      	ldr	r2, [pc, #320]	; (8003480 <HAL_GPIO_Init+0x31c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x21e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4f      	ldr	r2, [pc, #316]	; (8003484 <HAL_GPIO_Init+0x320>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x21a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4e      	ldr	r2, [pc, #312]	; (8003488 <HAL_GPIO_Init+0x324>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x216>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4d      	ldr	r2, [pc, #308]	; (800348c <HAL_GPIO_Init+0x328>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x212>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_GPIO_Init+0x32c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x20e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4b      	ldr	r2, [pc, #300]	; (8003494 <HAL_GPIO_Init+0x330>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x20a>
 800336a:	2307      	movs	r3, #7
 800336c:	e00e      	b.n	800338c <HAL_GPIO_Init+0x228>
 800336e:	2308      	movs	r3, #8
 8003370:	e00c      	b.n	800338c <HAL_GPIO_Init+0x228>
 8003372:	2306      	movs	r3, #6
 8003374:	e00a      	b.n	800338c <HAL_GPIO_Init+0x228>
 8003376:	2305      	movs	r3, #5
 8003378:	e008      	b.n	800338c <HAL_GPIO_Init+0x228>
 800337a:	2304      	movs	r3, #4
 800337c:	e006      	b.n	800338c <HAL_GPIO_Init+0x228>
 800337e:	2303      	movs	r3, #3
 8003380:	e004      	b.n	800338c <HAL_GPIO_Init+0x228>
 8003382:	2302      	movs	r3, #2
 8003384:	e002      	b.n	800338c <HAL_GPIO_Init+0x228>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_GPIO_Init+0x228>
 800338a:	2300      	movs	r3, #0
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	f002 0203 	and.w	r2, r2, #3
 8003392:	0092      	lsls	r2, r2, #2
 8003394:	4093      	lsls	r3, r2
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800339c:	4935      	ldr	r1, [pc, #212]	; (8003474 <HAL_GPIO_Init+0x310>)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	3302      	adds	r3, #2
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_GPIO_Init+0x334>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ce:	4a32      	ldr	r2, [pc, #200]	; (8003498 <HAL_GPIO_Init+0x334>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033d4:	4b30      	ldr	r3, [pc, #192]	; (8003498 <HAL_GPIO_Init+0x334>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_GPIO_Init+0x334>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_GPIO_Init+0x334>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_GPIO_Init+0x334>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_GPIO_Init+0x334>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_GPIO_Init+0x334>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3301      	adds	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	f67f ae90 	bls.w	8003180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	40013800 	.word	0x40013800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020400 	.word	0x40020400
 8003480:	40020800 	.word	0x40020800
 8003484:	40020c00 	.word	0x40020c00
 8003488:	40021000 	.word	0x40021000
 800348c:	40021400 	.word	0x40021400
 8003490:	40021800 	.word	0x40021800
 8003494:	40021c00 	.word	0x40021c00
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e264      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d075      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	4ba3      	ldr	r3, [pc, #652]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d112      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b9d      	ldr	r3, [pc, #628]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b99      	ldr	r3, [pc, #612]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e23f      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x74>
 8003502:	4b91      	ldr	r3, [pc, #580]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a90      	ldr	r2, [pc, #576]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x98>
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003534:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fbca 	bl	8001cec <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fbc6 	bl	8001cec <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e204      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xc0>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fbb6 	bl	8001cec <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fbb2 	bl	8001cec <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1f0      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0xe8>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c4      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b56      	ldr	r3, [pc, #344]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4952      	ldr	r1, [pc, #328]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <HAL_RCC_OscConfig+0x2b0>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe fb6b 	bl	8001cec <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7fe fb67 	bl	8001cec <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a5      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4940      	ldr	r1, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_OscConfig+0x2b0>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fb4a 	bl	8001cec <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365c:	f7fe fb46 	bl	8001cec <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e184      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d030      	beq.n	80036e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_OscConfig+0x2b4>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fb2a 	bl	8001cec <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369c:	f7fe fb26 	bl	8001cec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e164      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x200>
 80036ba:	e015      	b.n	80036e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x2b4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fe fb13 	bl	8001cec <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ca:	f7fe fb0f 	bl	8001cec <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e14d      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a0 	beq.w	8003836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d121      	bne.n	8003776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_RCC_OscConfig+0x2b8>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7fe fad5 	bl	8001cec <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	e011      	b.n	800376a <HAL_RCC_OscConfig+0x2ce>
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	42470000 	.word	0x42470000
 8003750:	42470e80 	.word	0x42470e80
 8003754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe fac8 	bl	8001cec <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e106      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b85      	ldr	r3, [pc, #532]	; (8003980 <HAL_RCC_OscConfig+0x4e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x2f0>
 800377e:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a80      	ldr	r2, [pc, #512]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e01c      	b.n	80037c6 <HAL_RCC_OscConfig+0x32a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x312>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	4a7a      	ldr	r2, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6713      	str	r3, [r2, #112]	; 0x70
 80037a0:	4b78      	ldr	r3, [pc, #480]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a77      	ldr	r2, [pc, #476]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x32a>
 80037ae:	4b75      	ldr	r3, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a74      	ldr	r2, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	4b72      	ldr	r3, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a71      	ldr	r2, [pc, #452]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7fe fa8d 	bl	8001cec <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe fa89 	bl	8001cec <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0c5      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ee      	beq.n	80037d6 <HAL_RCC_OscConfig+0x33a>
 80037f8:	e014      	b.n	8003824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fe fa77 	bl	8001cec <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fa73 	bl	8001cec <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0af      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003818:	4b5a      	ldr	r3, [pc, #360]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ee      	bne.n	8003802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 809b 	beq.w	8003976 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d05c      	beq.n	8003906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d141      	bne.n	80038d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe fa47 	bl	8001cec <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe fa43 	bl	8001cec <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e081      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	4b43      	ldr	r3, [pc, #268]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	019b      	lsls	r3, r3, #6
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	3b01      	subs	r3, #1
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
 80038a4:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fa1c 	bl	8001cec <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe fa18 	bl	8001cec <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e056      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x41c>
 80038d6:	e04e      	b.n	8003976 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fe fa05 	bl	8001cec <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fe fa01 	bl	8001cec <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e03f      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x44a>
 8003904:	e037      	b.n	8003976 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e032      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_OscConfig+0x4e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d028      	beq.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d121      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d11a      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003942:	4013      	ands	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003948:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40007000 	.word	0x40007000
 8003984:	40023800 	.word	0x40023800
 8003988:	42470060 	.word	0x42470060

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe f936 	bl	8001cec <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe f932 	bl	8001cec <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f896 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08016410 	.word	0x08016410
 8003b50:	2000001c 	.word	0x2000001c
 8003b54:	20000020 	.word	0x20000020

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f200 80bd 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8a:	e0b7      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b8e:	60bb      	str	r3, [r7, #8]
       break;
 8003b90:	e0b7      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b94:	60bb      	str	r3, [r7, #8]
      break;
 8003b96:	e0b4      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d04d      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	ea02 0800 	and.w	r8, r2, r0
 8003bc6:	ea03 0901 	and.w	r9, r3, r1
 8003bca:	4640      	mov	r0, r8
 8003bcc:	4649      	mov	r1, r9
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bdc:	0142      	lsls	r2, r0, #5
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	ebb0 0008 	subs.w	r0, r0, r8
 8003be6:	eb61 0109 	sbc.w	r1, r1, r9
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	018b      	lsls	r3, r1, #6
 8003bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf8:	0182      	lsls	r2, r0, #6
 8003bfa:	1a12      	subs	r2, r2, r0
 8003bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8003c00:	f04f 0000 	mov.w	r0, #0
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	00d9      	lsls	r1, r3, #3
 8003c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0e:	00d0      	lsls	r0, r2, #3
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	eb12 0208 	adds.w	r2, r2, r8
 8003c18:	eb43 0309 	adc.w	r3, r3, r9
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	0259      	lsls	r1, r3, #9
 8003c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c2a:	0250      	lsls	r0, r2, #9
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	f7fc fb30 	bl	80002a0 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4613      	mov	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e04a      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	461a      	mov	r2, r3
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	ea02 0400 	and.w	r4, r2, r0
 8003c62:	ea03 0501 	and.w	r5, r3, r1
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	014b      	lsls	r3, r1, #5
 8003c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c78:	0142      	lsls	r2, r0, #5
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	1b00      	subs	r0, r0, r4
 8003c80:	eb61 0105 	sbc.w	r1, r1, r5
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	018b      	lsls	r3, r1, #6
 8003c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c92:	0182      	lsls	r2, r0, #6
 8003c94:	1a12      	subs	r2, r2, r0
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	00d9      	lsls	r1, r3, #3
 8003ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca8:	00d0      	lsls	r0, r2, #3
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	1912      	adds	r2, r2, r4
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	0299      	lsls	r1, r3, #10
 8003cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cc2:	0290      	lsls	r0, r2, #10
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f7fc fae4 	bl	80002a0 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cfe:	60bb      	str	r3, [r7, #8]
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	68bb      	ldr	r3, [r7, #8]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	2000001c 	.word	0x2000001c

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08016420 	.word	0x08016420

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d60:	f7ff ffdc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0b5b      	lsrs	r3, r3, #13
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	08016420 	.word	0x08016420

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03f      	b.n	8003e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fddc 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f929 	bl	8004020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	; 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d17c      	bne.n	8003f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_UART_Transmit+0x2c>
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e075      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_UART_Transmit+0x3e>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e06e      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2221      	movs	r2, #33	; 0x21
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e72:	f7fd ff3b 	bl	8001cec <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d108      	bne.n	8003ea0 <HAL_UART_Transmit+0x82>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e003      	b.n	8003ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003eb0:	e02a      	b.n	8003f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f840 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e036      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e007      	b.n	8003efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1cf      	bne.n	8003eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f810 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b090      	sub	sp, #64	; 0x40
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	e050      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5a:	d04c      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	f7fd fec3 	bl	8001cec <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d241      	bcs.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f92:	637a      	str	r2, [r7, #52]	; 0x34
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc6:	623a      	str	r2, [r7, #32]
 8003fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	69f9      	ldr	r1, [r7, #28]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d09f      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3740      	adds	r7, #64	; 0x40
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	b09f      	sub	sp, #124	; 0x7c
 8004026:	af00      	add	r7, sp, #0
 8004028:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	68d9      	ldr	r1, [r3, #12]
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	ea40 0301 	orr.w	r3, r0, r1
 8004040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	431a      	orrs	r2, r3
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4313      	orrs	r3, r2
 8004058:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406e:	430b      	orrs	r3, r1
 8004070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800407c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407e:	6999      	ldr	r1, [r3, #24]
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	ea40 0301 	orr.w	r3, r0, r1
 8004088:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4bc5      	ldr	r3, [pc, #788]	; (80043a4 <UART_SetConfig+0x384>)
 8004090:	429a      	cmp	r2, r3
 8004092:	d004      	beq.n	800409e <UART_SetConfig+0x7e>
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4bc3      	ldr	r3, [pc, #780]	; (80043a8 <UART_SetConfig+0x388>)
 800409a:	429a      	cmp	r2, r3
 800409c:	d103      	bne.n	80040a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800409e:	f7ff fe5d 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 80040a2:	6778      	str	r0, [r7, #116]	; 0x74
 80040a4:	e002      	b.n	80040ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a6:	f7ff fe45 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 80040aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b4:	f040 80b6 	bne.w	8004224 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ba:	461c      	mov	r4, r3
 80040bc:	f04f 0500 	mov.w	r5, #0
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	6439      	str	r1, [r7, #64]	; 0x40
 80040c8:	415b      	adcs	r3, r3
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040d0:	1912      	adds	r2, r2, r4
 80040d2:	eb45 0303 	adc.w	r3, r5, r3
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	00d9      	lsls	r1, r3, #3
 80040e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e4:	00d0      	lsls	r0, r2, #3
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	1911      	adds	r1, r2, r4
 80040ec:	6639      	str	r1, [r7, #96]	; 0x60
 80040ee:	416b      	adcs	r3, r5
 80040f0:	667b      	str	r3, [r7, #100]	; 0x64
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004100:	415b      	adcs	r3, r3
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004108:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800410c:	f7fc f8c8 	bl	80002a0 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <UART_SetConfig+0x38c>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	011e      	lsls	r6, r3, #4
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	461c      	mov	r4, r3
 8004122:	f04f 0500 	mov.w	r5, #0
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	1891      	adds	r1, r2, r2
 800412c:	6339      	str	r1, [r7, #48]	; 0x30
 800412e:	415b      	adcs	r3, r3
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
 8004132:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004136:	1912      	adds	r2, r2, r4
 8004138:	eb45 0303 	adc.w	r3, r5, r3
 800413c:	f04f 0000 	mov.w	r0, #0
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	00d9      	lsls	r1, r3, #3
 8004146:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800414a:	00d0      	lsls	r0, r2, #3
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	1911      	adds	r1, r2, r4
 8004152:	65b9      	str	r1, [r7, #88]	; 0x58
 8004154:	416b      	adcs	r3, r5
 8004156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	461a      	mov	r2, r3
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	1891      	adds	r1, r2, r2
 8004164:	62b9      	str	r1, [r7, #40]	; 0x28
 8004166:	415b      	adcs	r3, r3
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004172:	f7fc f895 	bl	80002a0 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <UART_SetConfig+0x38c>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a87      	ldr	r2, [pc, #540]	; (80043ac <UART_SetConfig+0x38c>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800419c:	441e      	add	r6, r3
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	4618      	mov	r0, r3
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	1894      	adds	r4, r2, r2
 80041ac:	623c      	str	r4, [r7, #32]
 80041ae:	415b      	adcs	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041b6:	1812      	adds	r2, r2, r0
 80041b8:	eb41 0303 	adc.w	r3, r1, r3
 80041bc:	f04f 0400 	mov.w	r4, #0
 80041c0:	f04f 0500 	mov.w	r5, #0
 80041c4:	00dd      	lsls	r5, r3, #3
 80041c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ca:	00d4      	lsls	r4, r2, #3
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	1814      	adds	r4, r2, r0
 80041d2:	653c      	str	r4, [r7, #80]	; 0x50
 80041d4:	414b      	adcs	r3, r1
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	461a      	mov	r2, r3
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	1891      	adds	r1, r2, r2
 80041e4:	61b9      	str	r1, [r7, #24]
 80041e6:	415b      	adcs	r3, r3
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041f2:	f7fc f855 	bl	80002a0 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <UART_SetConfig+0x38c>)
 80041fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2164      	movs	r1, #100	; 0x64
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	3332      	adds	r3, #50	; 0x32
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <UART_SetConfig+0x38c>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 0207 	and.w	r2, r3, #7
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4432      	add	r2, r6
 8004220:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004222:	e0b9      	b.n	8004398 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004226:	461c      	mov	r4, r3
 8004228:	f04f 0500 	mov.w	r5, #0
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	1891      	adds	r1, r2, r2
 8004232:	6139      	str	r1, [r7, #16]
 8004234:	415b      	adcs	r3, r3
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800423c:	1912      	adds	r2, r2, r4
 800423e:	eb45 0303 	adc.w	r3, r5, r3
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	00d9      	lsls	r1, r3, #3
 800424c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004250:	00d0      	lsls	r0, r2, #3
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	eb12 0804 	adds.w	r8, r2, r4
 800425a:	eb43 0905 	adc.w	r9, r3, r5
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	008b      	lsls	r3, r1, #2
 8004272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004276:	0082      	lsls	r2, r0, #2
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f810 	bl	80002a0 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b49      	ldr	r3, [pc, #292]	; (80043ac <UART_SetConfig+0x38c>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011e      	lsls	r6, r3, #4
 800428e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004290:	4618      	mov	r0, r3
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	1894      	adds	r4, r2, r2
 800429c:	60bc      	str	r4, [r7, #8]
 800429e:	415b      	adcs	r3, r3
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a6:	1812      	adds	r2, r2, r0
 80042a8:	eb41 0303 	adc.w	r3, r1, r3
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	f04f 0500 	mov.w	r5, #0
 80042b4:	00dd      	lsls	r5, r3, #3
 80042b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042ba:	00d4      	lsls	r4, r2, #3
 80042bc:	4622      	mov	r2, r4
 80042be:	462b      	mov	r3, r5
 80042c0:	1814      	adds	r4, r2, r0
 80042c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80042c4:	414b      	adcs	r3, r1
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042e0:	0082      	lsls	r2, r0, #2
 80042e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042e6:	f7fb ffdb 	bl	80002a0 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <UART_SetConfig+0x38c>)
 80042f0:	fba3 1302 	umull	r1, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2164      	movs	r1, #100	; 0x64
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	3332      	adds	r3, #50	; 0x32
 8004302:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <UART_SetConfig+0x38c>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430e:	441e      	add	r6, r3
 8004310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004312:	4618      	mov	r0, r3
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	1894      	adds	r4, r2, r2
 800431e:	603c      	str	r4, [r7, #0]
 8004320:	415b      	adcs	r3, r3
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004328:	1812      	adds	r2, r2, r0
 800432a:	eb41 0303 	adc.w	r3, r1, r3
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	f04f 0500 	mov.w	r5, #0
 8004336:	00dd      	lsls	r5, r3, #3
 8004338:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800433c:	00d4      	lsls	r4, r2, #3
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	eb12 0a00 	adds.w	sl, r2, r0
 8004346:	eb43 0b01 	adc.w	fp, r3, r1
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004362:	0082      	lsls	r2, r0, #2
 8004364:	4650      	mov	r0, sl
 8004366:	4659      	mov	r1, fp
 8004368:	f7fb ff9a 	bl	80002a0 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <UART_SetConfig+0x38c>)
 8004372:	fba3 1302 	umull	r1, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <UART_SetConfig+0x38c>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4432      	add	r2, r6
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	377c      	adds	r7, #124	; 0x7c
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	51eb851f 	.word	0x51eb851f

080043b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80043b6:	4b8d      	ldr	r3, [pc, #564]	; (80045ec <MX_LWIP_Init+0x23c>)
 80043b8:	22c0      	movs	r2, #192	; 0xc0
 80043ba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80043bc:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <MX_LWIP_Init+0x23c>)
 80043be:	22a8      	movs	r2, #168	; 0xa8
 80043c0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 80043c2:	4b8a      	ldr	r3, [pc, #552]	; (80045ec <MX_LWIP_Init+0x23c>)
 80043c4:	2212      	movs	r2, #18
 80043c6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 80043c8:	4b88      	ldr	r3, [pc, #544]	; (80045ec <MX_LWIP_Init+0x23c>)
 80043ca:	2273      	movs	r2, #115	; 0x73
 80043cc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80043ce:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <MX_LWIP_Init+0x240>)
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80043d4:	4b86      	ldr	r3, [pc, #536]	; (80045f0 <MX_LWIP_Init+0x240>)
 80043d6:	22ff      	movs	r2, #255	; 0xff
 80043d8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80043da:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <MX_LWIP_Init+0x240>)
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80043e0:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <MX_LWIP_Init+0x240>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80043e6:	4b83      	ldr	r3, [pc, #524]	; (80045f4 <MX_LWIP_Init+0x244>)
 80043e8:	22c0      	movs	r2, #192	; 0xc0
 80043ea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80043ec:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <MX_LWIP_Init+0x244>)
 80043ee:	22a8      	movs	r2, #168	; 0xa8
 80043f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80043f2:	4b80      	ldr	r3, [pc, #512]	; (80045f4 <MX_LWIP_Init+0x244>)
 80043f4:	2212      	movs	r2, #18
 80043f6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <MX_LWIP_Init+0x244>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80043fe:	f002 fdaf 	bl	8006f60 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004402:	4b7a      	ldr	r3, [pc, #488]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	061a      	lsls	r2, r3, #24
 8004408:	4b78      	ldr	r3, [pc, #480]	; (80045ec <MX_LWIP_Init+0x23c>)
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	4b76      	ldr	r3, [pc, #472]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004412:	789b      	ldrb	r3, [r3, #2]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4313      	orrs	r3, r2
 8004418:	4a74      	ldr	r2, [pc, #464]	; (80045ec <MX_LWIP_Init+0x23c>)
 800441a:	78d2      	ldrb	r2, [r2, #3]
 800441c:	4313      	orrs	r3, r2
 800441e:	061a      	lsls	r2, r3, #24
 8004420:	4b72      	ldr	r3, [pc, #456]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	0619      	lsls	r1, r3, #24
 8004426:	4b71      	ldr	r3, [pc, #452]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	4319      	orrs	r1, r3
 800442e:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004430:	789b      	ldrb	r3, [r3, #2]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	430b      	orrs	r3, r1
 8004436:	496d      	ldr	r1, [pc, #436]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004438:	78c9      	ldrb	r1, [r1, #3]
 800443a:	430b      	orrs	r3, r1
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004442:	431a      	orrs	r2, r3
 8004444:	4b69      	ldr	r3, [pc, #420]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	0619      	lsls	r1, r3, #24
 800444a:	4b68      	ldr	r3, [pc, #416]	; (80045ec <MX_LWIP_Init+0x23c>)
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	4319      	orrs	r1, r3
 8004452:	4b66      	ldr	r3, [pc, #408]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004454:	789b      	ldrb	r3, [r3, #2]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	430b      	orrs	r3, r1
 800445a:	4964      	ldr	r1, [pc, #400]	; (80045ec <MX_LWIP_Init+0x23c>)
 800445c:	78c9      	ldrb	r1, [r1, #3]
 800445e:	430b      	orrs	r3, r1
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004466:	431a      	orrs	r2, r3
 8004468:	4b60      	ldr	r3, [pc, #384]	; (80045ec <MX_LWIP_Init+0x23c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	0619      	lsls	r1, r3, #24
 800446e:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	4319      	orrs	r1, r3
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004478:	789b      	ldrb	r3, [r3, #2]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	430b      	orrs	r3, r1
 800447e:	495b      	ldr	r1, [pc, #364]	; (80045ec <MX_LWIP_Init+0x23c>)
 8004480:	78c9      	ldrb	r1, [r1, #3]
 8004482:	430b      	orrs	r3, r1
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	4313      	orrs	r3, r2
 8004488:	4a5b      	ldr	r2, [pc, #364]	; (80045f8 <MX_LWIP_Init+0x248>)
 800448a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800448c:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <MX_LWIP_Init+0x240>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	061a      	lsls	r2, r3, #24
 8004492:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <MX_LWIP_Init+0x240>)
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <MX_LWIP_Init+0x240>)
 800449c:	789b      	ldrb	r3, [r3, #2]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	4313      	orrs	r3, r2
 80044a2:	4a53      	ldr	r2, [pc, #332]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044a4:	78d2      	ldrb	r2, [r2, #3]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	061a      	lsls	r2, r3, #24
 80044aa:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	0619      	lsls	r1, r3, #24
 80044b0:	4b4f      	ldr	r3, [pc, #316]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	4319      	orrs	r1, r3
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044ba:	789b      	ldrb	r3, [r3, #2]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	430b      	orrs	r3, r1
 80044c0:	494b      	ldr	r1, [pc, #300]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044c2:	78c9      	ldrb	r1, [r1, #3]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044cc:	431a      	orrs	r2, r3
 80044ce:	4b48      	ldr	r3, [pc, #288]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	0619      	lsls	r1, r3, #24
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	4319      	orrs	r1, r3
 80044dc:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044de:	789b      	ldrb	r3, [r3, #2]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	430b      	orrs	r3, r1
 80044e4:	4942      	ldr	r1, [pc, #264]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044e6:	78c9      	ldrb	r1, [r1, #3]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044f0:	431a      	orrs	r2, r3
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	0619      	lsls	r1, r3, #24
 80044f8:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <MX_LWIP_Init+0x240>)
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	4319      	orrs	r1, r3
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <MX_LWIP_Init+0x240>)
 8004502:	789b      	ldrb	r3, [r3, #2]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	430b      	orrs	r3, r1
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <MX_LWIP_Init+0x240>)
 800450a:	78c9      	ldrb	r1, [r1, #3]
 800450c:	430b      	orrs	r3, r1
 800450e:	0e1b      	lsrs	r3, r3, #24
 8004510:	4313      	orrs	r3, r2
 8004512:	4a3a      	ldr	r2, [pc, #232]	; (80045fc <MX_LWIP_Init+0x24c>)
 8004514:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	061a      	lsls	r2, r3, #24
 800451c:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <MX_LWIP_Init+0x244>)
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004526:	789b      	ldrb	r3, [r3, #2]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	4313      	orrs	r3, r2
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <MX_LWIP_Init+0x244>)
 800452e:	78d2      	ldrb	r2, [r2, #3]
 8004530:	4313      	orrs	r3, r2
 8004532:	061a      	lsls	r2, r3, #24
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	0619      	lsls	r1, r3, #24
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <MX_LWIP_Init+0x244>)
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	4319      	orrs	r1, r3
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004544:	789b      	ldrb	r3, [r3, #2]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	430b      	orrs	r3, r1
 800454a:	492a      	ldr	r1, [pc, #168]	; (80045f4 <MX_LWIP_Init+0x244>)
 800454c:	78c9      	ldrb	r1, [r1, #3]
 800454e:	430b      	orrs	r3, r1
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004556:	431a      	orrs	r2, r3
 8004558:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <MX_LWIP_Init+0x244>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	0619      	lsls	r1, r3, #24
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	4319      	orrs	r1, r3
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004568:	789b      	ldrb	r3, [r3, #2]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	430b      	orrs	r3, r1
 800456e:	4921      	ldr	r1, [pc, #132]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004570:	78c9      	ldrb	r1, [r1, #3]
 8004572:	430b      	orrs	r3, r1
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800457a:	431a      	orrs	r2, r3
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <MX_LWIP_Init+0x244>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	0619      	lsls	r1, r3, #24
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	4319      	orrs	r1, r3
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <MX_LWIP_Init+0x244>)
 800458c:	789b      	ldrb	r3, [r3, #2]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	430b      	orrs	r3, r1
 8004592:	4918      	ldr	r1, [pc, #96]	; (80045f4 <MX_LWIP_Init+0x244>)
 8004594:	78c9      	ldrb	r1, [r1, #3]
 8004596:	430b      	orrs	r3, r1
 8004598:	0e1b      	lsrs	r3, r3, #24
 800459a:	4313      	orrs	r3, r2
 800459c:	4a18      	ldr	r2, [pc, #96]	; (8004600 <MX_LWIP_Init+0x250>)
 800459e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <MX_LWIP_Init+0x254>)
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <MX_LWIP_Init+0x258>)
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	2300      	movs	r3, #0
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <MX_LWIP_Init+0x250>)
 80045ae:	4a13      	ldr	r2, [pc, #76]	; (80045fc <MX_LWIP_Init+0x24c>)
 80045b0:	4911      	ldr	r1, [pc, #68]	; (80045f8 <MX_LWIP_Init+0x248>)
 80045b2:	4816      	ldr	r0, [pc, #88]	; (800460c <MX_LWIP_Init+0x25c>)
 80045b4:	f003 f97a 	bl	80078ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80045b8:	4814      	ldr	r0, [pc, #80]	; (800460c <MX_LWIP_Init+0x25c>)
 80045ba:	f003 fb29 	bl	8007c10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <MX_LWIP_Init+0x25c>)
 80045c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80045d0:	480e      	ldr	r0, [pc, #56]	; (800460c <MX_LWIP_Init+0x25c>)
 80045d2:	f003 fb2d 	bl	8007c30 <netif_set_up>
 80045d6:	e002      	b.n	80045de <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <MX_LWIP_Init+0x25c>)
 80045da:	f003 fb95 	bl	8007d08 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80045de:	490c      	ldr	r1, [pc, #48]	; (8004610 <MX_LWIP_Init+0x260>)
 80045e0:	480a      	ldr	r0, [pc, #40]	; (800460c <MX_LWIP_Init+0x25c>)
 80045e2:	f003 fbc3 	bl	8007d6c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20006f6c 	.word	0x20006f6c
 80045f0:	20006f68 	.word	0x20006f68
 80045f4:	20006f60 	.word	0x20006f60
 80045f8:	20006f64 	.word	0x20006f64
 80045fc:	20006f70 	.word	0x20006f70
 8004600:	20006f74 	.word	0x20006f74
 8004604:	08011419 	.word	0x08011419
 8004608:	08004ba1 	.word	0x08004ba1
 800460c:	20006ee4 	.word	0x20006ee4
 8004610:	08004c0d 	.word	0x08004c0d

08004614 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_ETH_MspInit+0x138>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f040 8085 	bne.w	8004742 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004638:	2300      	movs	r3, #0
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	4b44      	ldr	r3, [pc, #272]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	4a43      	ldr	r2, [pc, #268]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004646:	6313      	str	r3, [r2, #48]	; 0x30
 8004648:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	4a3c      	ldr	r2, [pc, #240]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800465e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004662:	6313      	str	r3, [r2, #48]	; 0x30
 8004664:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4a35      	ldr	r2, [pc, #212]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800467a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800467e:	6313      	str	r3, [r2, #48]	; 0x30
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	4b2f      	ldr	r3, [pc, #188]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	6313      	str	r3, [r2, #48]	; 0x30
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6313      	str	r3, [r2, #48]	; 0x30
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046ce:	f043 0302 	orr.w	r3, r3, #2
 80046d2:	6313      	str	r3, [r2, #48]	; 0x30
 80046d4:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <HAL_ETH_MspInit+0x13c>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80046e0:	2332      	movs	r3, #50	; 0x32
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	2302      	movs	r3, #2
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046f0:	230b      	movs	r3, #11
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f8:	4619      	mov	r1, r3
 80046fa:	4816      	ldr	r0, [pc, #88]	; (8004754 <HAL_ETH_MspInit+0x140>)
 80046fc:	f7fe fd32 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004700:	2386      	movs	r3, #134	; 0x86
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004710:	230b      	movs	r3, #11
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004718:	4619      	mov	r1, r3
 800471a:	480f      	ldr	r0, [pc, #60]	; (8004758 <HAL_ETH_MspInit+0x144>)
 800471c:	f7fe fd22 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004720:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004726:	2302      	movs	r3, #2
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472e:	2303      	movs	r3, #3
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004732:	230b      	movs	r3, #11
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473a:	4619      	mov	r1, r3
 800473c:	4807      	ldr	r0, [pc, #28]	; (800475c <HAL_ETH_MspInit+0x148>)
 800473e:	f7fe fd11 	bl	8003164 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004742:	bf00      	nop
 8004744:	3738      	adds	r7, #56	; 0x38
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40028000 	.word	0x40028000
 8004750:	40023800 	.word	0x40023800
 8004754:	40020800 	.word	0x40020800
 8004758:	40020000 	.word	0x40020000
 800475c:	40020400 	.word	0x40020400

08004760 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <low_level_init+0x144>)
 800476e:	4a4e      	ldr	r2, [pc, #312]	; (80048a8 <low_level_init+0x148>)
 8004770:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004772:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <low_level_init+0x144>)
 8004774:	2201      	movs	r2, #1
 8004776:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004778:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <low_level_init+0x144>)
 800477a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800477e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004780:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <low_level_init+0x144>)
 8004782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004786:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <low_level_init+0x144>)
 800478a:	2201      	movs	r2, #1
 800478c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800478e:	2300      	movs	r3, #0
 8004790:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004796:	23e1      	movs	r3, #225	; 0xe1
 8004798:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800479a:	2300      	movs	r3, #0
 800479c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800479e:	2300      	movs	r3, #0
 80047a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80047a2:	2300      	movs	r3, #0
 80047a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80047a6:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <low_level_init+0x144>)
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <low_level_init+0x144>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <low_level_init+0x144>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <low_level_init+0x144>)
 80047bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047c0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80047c2:	4838      	ldr	r0, [pc, #224]	; (80048a4 <low_level_init+0x144>)
 80047c4:	f7fd fba8 	bl	8001f18 <HAL_ETH_Init>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80047e4:	2304      	movs	r3, #4
 80047e6:	4a31      	ldr	r2, [pc, #196]	; (80048ac <low_level_init+0x14c>)
 80047e8:	4931      	ldr	r1, [pc, #196]	; (80048b0 <low_level_init+0x150>)
 80047ea:	482e      	ldr	r0, [pc, #184]	; (80048a4 <low_level_init+0x144>)
 80047ec:	f7fd fd30 	bl	8002250 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80047f0:	2304      	movs	r3, #4
 80047f2:	4a30      	ldr	r2, [pc, #192]	; (80048b4 <low_level_init+0x154>)
 80047f4:	4930      	ldr	r1, [pc, #192]	; (80048b8 <low_level_init+0x158>)
 80047f6:	482b      	ldr	r0, [pc, #172]	; (80048a4 <low_level_init+0x144>)
 80047f8:	f7fd fd93 	bl	8002322 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2206      	movs	r2, #6
 8004800:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <low_level_init+0x144>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <low_level_init+0x144>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	785a      	ldrb	r2, [r3, #1]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <low_level_init+0x144>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	789a      	ldrb	r2, [r3, #2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004828:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <low_level_init+0x144>)
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	78da      	ldrb	r2, [r3, #3]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <low_level_init+0x144>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	791a      	ldrb	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <low_level_init+0x144>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	795a      	ldrb	r2, [r3, #5]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004852:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800485a:	f043 030a 	orr.w	r3, r3, #10
 800485e:	b2da      	uxtb	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004866:	480f      	ldr	r0, [pc, #60]	; (80048a4 <low_level_init+0x144>)
 8004868:	f7fe f804 	bl	8002874 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800486c:	f107 0310 	add.w	r3, r7, #16
 8004870:	461a      	mov	r2, r3
 8004872:	211d      	movs	r1, #29
 8004874:	480b      	ldr	r0, [pc, #44]	; (80048a4 <low_level_init+0x144>)
 8004876:	f7fd ff2f 	bl	80026d8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f043 030b 	orr.w	r3, r3, #11
 8004880:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	461a      	mov	r2, r3
 8004886:	211d      	movs	r1, #29
 8004888:	4806      	ldr	r0, [pc, #24]	; (80048a4 <low_level_init+0x144>)
 800488a:	f7fd ff8d 	bl	80027a8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800488e:	f107 0310 	add.w	r3, r7, #16
 8004892:	461a      	mov	r2, r3
 8004894:	211d      	movs	r1, #29
 8004896:	4803      	ldr	r0, [pc, #12]	; (80048a4 <low_level_init+0x144>)
 8004898:	f7fd ff1e 	bl	80026d8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20008848 	.word	0x20008848
 80048a8:	40028000 	.word	0x40028000
 80048ac:	20008890 	.word	0x20008890
 80048b0:	20006f78 	.word	0x20006f78
 80048b4:	20006ff8 	.word	0x20006ff8
 80048b8:	200087c8 	.word	0x200087c8

080048bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80048c6:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <low_level_output+0x138>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80048de:	4b45      	ldr	r3, [pc, #276]	; (80049f4 <low_level_output+0x138>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	e05a      	b.n	80049a4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da03      	bge.n	80048fe <low_level_output+0x42>
      {
        errval = ERR_USE;
 80048f6:	23f8      	movs	r3, #248	; 0xf8
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80048fc:	e05c      	b.n	80049b8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	895b      	ldrh	r3, [r3, #10]
 8004902:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004908:	e02f      	b.n	800496a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	18d0      	adds	r0, r2, r3
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800491e:	3304      	adds	r3, #4
 8004920:	461a      	mov	r2, r3
 8004922:	f00c fe95 	bl	8011650 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da03      	bge.n	800493c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004934:	23f8      	movs	r3, #248	; 0xf8
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800493a:	e03d      	b.n	80049b8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800494c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004958:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004964:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004974:	4293      	cmp	r3, r2
 8004976:	d8c8      	bhi.n	800490a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	18d0      	adds	r0, r2, r3
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4413      	add	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4619      	mov	r1, r3
 800498a:	f00c fe61 	bl	8011650 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1a1      	bne.n	80048ee <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80049aa:	6979      	ldr	r1, [r7, #20]
 80049ac:	4811      	ldr	r0, [pc, #68]	; (80049f4 <low_level_output+0x138>)
 80049ae:	f7fd fd25 	bl	80023fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <low_level_output+0x138>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	3314      	adds	r3, #20
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <low_level_output+0x138>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d4:	3314      	adds	r3, #20
 80049d6:	2220      	movs	r2, #32
 80049d8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <low_level_output+0x138>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	3304      	adds	r3, #4
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80049e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3728      	adds	r7, #40	; 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20008848 	.word	0x20008848

080049f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	; 0x30
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004a1c:	484f      	ldr	r0, [pc, #316]	; (8004b5c <low_level_input+0x164>)
 8004a1e:	f7fd fdd7 	bl	80025d0 <HAL_ETH_GetReceivedFrame>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <low_level_input+0x34>

    return NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e092      	b.n	8004b52 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <low_level_input+0x164>)
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004a32:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <low_level_input+0x164>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004a44:	4619      	mov	r1, r3
 8004a46:	2000      	movs	r0, #0
 8004a48:	f003 fa2c 	bl	8007ea4 <pbuf_alloc>
 8004a4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d04b      	beq.n	8004aec <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a54:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <low_level_input+0x164>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a62:	e040      	b.n	8004ae6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	895b      	ldrh	r3, [r3, #10]
 8004a68:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a6e:	e021      	b.n	8004ab4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	18d0      	adds	r0, r2, r3
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	18d1      	adds	r1, r2, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a84:	3304      	adds	r3, #4
 8004a86:	461a      	mov	r2, r3
 8004a88:	f00c fde2 	bl	8011650 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004aa2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004aae:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d8d6      	bhi.n	8004a70 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	18d0      	adds	r0, r2, r3
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f00c fdbc 	bl	8011650 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1bb      	bne.n	8004a64 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <low_level_input+0x164>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e00b      	b.n	8004b10 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <low_level_input+0x164>)
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3ee      	bcc.n	8004af8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <low_level_input+0x164>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <low_level_input+0x164>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b28:	3314      	adds	r3, #20
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <low_level_input+0x164>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <low_level_input+0x164>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3730      	adds	r7, #48	; 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20008848 	.word	0x20008848

08004b60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff45 	bl	80049f8 <low_level_input>
 8004b6e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	4798      	blx	r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004b84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f003 fc71 	bl	8008474 <pbuf_free>
    p = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e000      	b.n	8004b9a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004b98:	bf00      	nop
  }
}
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <ethernetif_init+0x1c>
 8004bae:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <ethernetif_init+0x48>)
 8004bb0:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004bb4:	490d      	ldr	r1, [pc, #52]	; (8004bec <ethernetif_init+0x4c>)
 8004bb6:	480e      	ldr	r0, [pc, #56]	; (8004bf0 <ethernetif_init+0x50>)
 8004bb8:	f00c fe24 	bl	8011804 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2273      	movs	r2, #115	; 0x73
 8004bc0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2274      	movs	r2, #116	; 0x74
 8004bc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <ethernetif_init+0x54>)
 8004bd0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <ethernetif_init+0x58>)
 8004bd6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fdc1 	bl	8004760 <low_level_init>

  return ERR_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08013288 	.word	0x08013288
 8004bec:	080132a4 	.word	0x080132a4
 8004bf0:	080132b4 	.word	0x080132b4
 8004bf4:	0800f8dd 	.word	0x0800f8dd
 8004bf8:	080048bd 	.word	0x080048bd

08004bfc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c00:	f7fd f874 	bl	8001cec <HAL_GetTick>
 8004c04:	4603      	mov	r3, r0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d05d      	beq.n	8004cea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d03f      	beq.n	8004cb6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004c36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4830      	ldr	r0, [pc, #192]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c3e:	f7fd fdb3 	bl	80027a8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004c42:	f7fd f853 	bl	8001cec <HAL_GetTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2101      	movs	r1, #1
 8004c52:	482b      	ldr	r0, [pc, #172]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c54:	f7fd fd40 	bl	80026d8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004c58:	f7fd f848 	bl	8001cec <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c66:	d828      	bhi.n	8004cba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0eb      	beq.n	8004c4a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	461a      	mov	r2, r3
 8004c78:	2110      	movs	r1, #16
 8004c7a:	4821      	ldr	r0, [pc, #132]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c7c:	f7fd fd2c 	bl	80026d8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	e002      	b.n	8004c9a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	e016      	b.n	8004cda <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	e011      	b.n	8004cda <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <ethernetif_update_config+0xb0>
          goto error;
 8004cba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	480a      	ldr	r0, [pc, #40]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cd6:	f7fd fd67 	bl	80027a8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4808      	ldr	r0, [pc, #32]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cde:	f7fd fe27 	bl	8002930 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004ce2:	4807      	ldr	r0, [pc, #28]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004ce4:	f7fd fdc6 	bl	8002874 <HAL_ETH_Start>
 8004ce8:	e002      	b.n	8004cf0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <ethernetif_update_config+0xf4>)
 8004cec:	f7fd fdf1 	bl	80028d2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f807 	bl	8004d04 <ethernetif_notify_conn_changed>
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20008848 	.word	0x20008848

08004d04 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <fs_open+0x16>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <fs_open+0x1c>
    return ERR_ARG;
 8004d2e:	f06f 030f 	mvn.w	r3, #15
 8004d32:	e028      	b.n	8004d86 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004d34:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <fs_open+0x78>)
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e020      	b.n	8004d7c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	f7fb fa45 	bl	80001d0 <strcmp>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d114      	bne.n	8004d76 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	7c1a      	ldrb	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e007      	b.n	8004d86 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1db      	bne.n	8004d3a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004d82:	f06f 0305 	mvn.w	r3, #5
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	08017d2c 	.word	0x08017d2c

08004d94 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	1ad3      	subs	r3, r2, r3
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004dcc:	f640 30e8 	movw	r0, #3048	; 0xbe8
 8004dd0:	f002 fb80 	bl	80074d4 <mem_malloc>
 8004dd4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004ddc:	f640 32e8 	movw	r2, #3048	; 0xbe8
 8004de0:	2100      	movs	r1, #0
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f00c fc5c 	bl	80116a0 <memset>
  }
  return ret;
 8004de8:	687b      	ldr	r3, [r7, #4]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f002 fa01 	bl	8007208 <mem_free>
  }
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004e16:	f241 6238 	movw	r2, #5688	; 0x1638
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f00c fc3f 	bl	80116a0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8004e28:	3312      	adds	r3, #18
 8004e2a:	2205      	movs	r2, #5
 8004e2c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004e3c:	f241 6038 	movw	r0, #5688	; 0x1638
 8004e40:	f002 fb48 	bl	80074d4 <mem_malloc>
 8004e44:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <http_state_alloc+0x1c>
    http_state_init(ret);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ffde 	bl	8004e0e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004e52:	687b      	ldr	r3, [r7, #4]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff8f 	bl	8004d94 <fs_close>
    hs->handle = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ffb2 	bl	8004df2 <http_ssi_state_free>
    hs->ssi = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f003 fae7 	bl	8008474 <pbuf_free>
    hs->req = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <http_state_free+0x1a>
    http_state_eof(hs);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ffca 	bl	8004e5c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f002 f99d 	bl	8007208 <mem_free>
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <http_write+0x22>
 8004eec:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <http_write+0xc8>)
 8004eee:	f240 2219 	movw	r2, #537	; 0x219
 8004ef2:	492c      	ldr	r1, [pc, #176]	; (8004fa4 <http_write+0xcc>)
 8004ef4:	482c      	ldr	r0, [pc, #176]	; (8004fa8 <http_write+0xd0>)
 8004ef6:	f00c fc85 	bl	8011804 <iprintf>
  len = *length;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004f00:	8afb      	ldrh	r3, [r7, #22]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <http_write+0x32>
    return ERR_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e045      	b.n	8004f96 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004f10:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004f12:	8aba      	ldrh	r2, [r7, #20]
 8004f14:	8afb      	ldrh	r3, [r7, #22]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d201      	bcs.n	8004f1e <http_write+0x46>
    len = max_len;
 8004f1a:	8abb      	ldrh	r3, [r7, #20]
 8004f1c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004f26:	8afa      	ldrh	r2, [r7, #22]
 8004f28:	8abb      	ldrh	r3, [r7, #20]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d901      	bls.n	8004f32 <http_write+0x5a>
    len = max_len;
 8004f2e:	8abb      	ldrh	r3, [r7, #20]
 8004f30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	8afa      	ldrh	r2, [r7, #22]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f008 f81f 	bl	800cf7c <tcp_write>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004f42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4a:	d10f      	bne.n	8004f6c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d902      	bls.n	8004f66 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	82fb      	strh	r3, [r7, #22]
 8004f64:	e002      	b.n	8004f6c <http_write+0x94>
      } else {
        len /= 2;
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004f6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	d102      	bne.n	8004f7c <http_write+0xa4>
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d8da      	bhi.n	8004f32 <http_write+0x5a>

  if (err == ERR_OK) {
 8004f7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8afa      	ldrh	r2, [r7, #22]
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004f92:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	080137ac 	.word	0x080137ac
 8004fa4:	080137e4 	.word	0x080137e4
 8004fa8:	080137f4 	.word	0x080137f4

08004fac <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <http_close_or_abort_conn+0x32>
    if ((hs->post_content_len_left != 0)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8004fc6:	3314      	adds	r3, #20
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <http_close_or_abort_conn+0x32>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <http_close_or_abort_conn+0xa0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	491d      	ldr	r1, [pc, #116]	; (800504c <http_close_or_abort_conn+0xa0>)
 8004fd8:	68b8      	ldr	r0, [r7, #8]
 8004fda:	f7fb fe5b 	bl	8000c94 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f005 f88d 	bl	800a100 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f005 f89b 	bl	800a124 <tcp_recv>
  altcp_err(pcb, NULL);
 8004fee:	2100      	movs	r1, #0
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f005 f8db 	bl	800a1ac <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f005 f910 	bl	800a220 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005000:	2100      	movs	r1, #0
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f005 f8b0 	bl	800a168 <tcp_sent>
  if (hs != NULL) {
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <http_close_or_abort_conn+0x68>
    http_state_free(hs);
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f7ff ff50 	bl	8004eb4 <http_state_free>
  }

  if (abort_conn) {
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <http_close_or_abort_conn+0x78>
    altcp_abort(pcb);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f003 ffb2 	bl	8008f84 <tcp_abort>
    return ERR_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e00f      	b.n	8005044 <http_close_or_abort_conn+0x98>
  }
  err = altcp_close(pcb);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f003 fec3 	bl	8008db0 <tcp_close>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800502e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <http_close_or_abort_conn+0x94>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005036:	2204      	movs	r2, #4
 8005038:	4905      	ldr	r1, [pc, #20]	; (8005050 <http_close_or_abort_conn+0xa4>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f005 f8f0 	bl	800a220 <tcp_poll>
  }
  return err;
 8005040:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200004c8 	.word	0x200004c8
 8005050:	08006953 	.word	0x08006953

08005054 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800505e:	2200      	movs	r2, #0
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ffa2 	bl	8004fac <http_close_or_abort_conn>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffe8 	bl	8005054 <http_close_conn>
  }
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <extract_uri_parameters+0x18>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <extract_uri_parameters+0x1c>
    return (0);
 80050a4:	2300      	movs	r3, #0
 80050a6:	e04e      	b.n	8005146 <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e041      	b.n	8005136 <extract_uri_parameters+0xaa>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	320c      	adds	r2, #12
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 80050c2:	2126      	movs	r1, #38	; 0x26
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f00c fcaa 	bl	8011a1e <strchr>
 80050ca:	6178      	str	r0, [r7, #20]
    if (pair) {
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <extract_uri_parameters+0x54>
      *pair = '\0';
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
      pair++;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e00c      	b.n	80050fa <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 80050e0:	2120      	movs	r1, #32
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f00c fc9b 	bl	8011a1e <strchr>
 80050e8:	6178      	str	r0, [r7, #20]
      if (pair) {
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <extract_uri_parameters+0x6a>
        *pair = '\0';
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80050fa:	213d      	movs	r1, #61	; 0x3d
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f00c fc8e 	bl	8011a1e <strchr>
 8005102:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <extract_uri_parameters+0x96>
      *equals = '\0';
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1c59      	adds	r1, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
 800511c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005120:	e006      	b.n	8005130 <extract_uri_parameters+0xa4>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
 800512a:	2100      	movs	r1, #0
 800512c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3301      	adds	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800513c:	da02      	bge.n	8005144 <extract_uri_parameters+0xb8>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1b6      	bne.n	80050b2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005144:	693b      	ldr	r3, [r7, #16]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <get_tag_insert+0x1c>
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <get_tag_insert+0x164>)
 8005160:	f44f 7241 	mov.w	r2, #772	; 0x304
 8005164:	4954      	ldr	r1, [pc, #336]	; (80052b8 <get_tag_insert+0x168>)
 8005166:	4855      	ldr	r0, [pc, #340]	; (80052bc <get_tag_insert+0x16c>)
 8005168:	f00c fb4c 	bl	8011804 <iprintf>
  ssi = hs->ssi;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <get_tag_insert+0x36>
 8005178:	4b4e      	ldr	r3, [pc, #312]	; (80052b4 <get_tag_insert+0x164>)
 800517a:	f240 3206 	movw	r2, #774	; 0x306
 800517e:	4950      	ldr	r1, [pc, #320]	; (80052c0 <get_tag_insert+0x170>)
 8005180:	484e      	ldr	r0, [pc, #312]	; (80052bc <get_tag_insert+0x16c>)
 8005182:	f00c fb3f 	bl	8011804 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8005186:	4b4f      	ldr	r3, [pc, #316]	; (80052c4 <get_tag_insert+0x174>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02f      	beq.n	80051ee <get_tag_insert+0x9e>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800518e:	4b4e      	ldr	r3, [pc, #312]	; (80052c8 <get_tag_insert+0x178>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02b      	beq.n	80051ee <get_tag_insert+0x9e>
 8005196:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <get_tag_insert+0x17c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d027      	beq.n	80051ee <get_tag_insert+0x9e>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e01f      	b.n	80051e4 <get_tag_insert+0x94>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f103 0016 	add.w	r0, r3, #22
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <get_tag_insert+0x178>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb f80a 	bl	80001d0 <strcmp>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <get_tag_insert+0x8e>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80051c2:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <get_tag_insert+0x174>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	f102 012b 	add.w	r1, r2, #43	; 0x2b
 80051cc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80051d0:	6978      	ldr	r0, [r7, #20]
 80051d2:	4798      	blx	r3
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80051dc:	e066      	b.n	80052ac <get_tag_insert+0x15c>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3301      	adds	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	4b39      	ldr	r3, [pc, #228]	; (80052cc <get_tag_insert+0x17c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	dbda      	blt.n	80051a4 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	3316      	adds	r3, #22
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fa fff6 	bl	80001e4 <strlen>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f640 329e 	movw	r2, #2974	; 0xb9e
 80051fe:	4293      	cmp	r3, r2
 8005200:	d81b      	bhi.n	800523a <get_tag_insert+0xea>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3316      	adds	r3, #22
 8005206:	4618      	mov	r0, r3
 8005208:	f7fa ffec 	bl	80001e4 <strlen>
 800520c:	4603      	mov	r3, r0
 800520e:	2b15      	cmp	r3, #21
 8005210:	d813      	bhi.n	800523a <get_tag_insert+0xea>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3316      	adds	r3, #22
 8005216:	4618      	mov	r0, r3
 8005218:	f7fa ffe4 	bl	80001e4 <strlen>
 800521c:	4603      	mov	r3, r0
 800521e:	f640 329e 	movw	r2, #2974	; 0xb9e
 8005222:	4293      	cmp	r3, r2
 8005224:	d806      	bhi.n	8005234 <get_tag_insert+0xe4>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3316      	adds	r3, #22
 800522a:	4618      	mov	r0, r3
 800522c:	f7fa ffda 	bl	80001e4 <strlen>
 8005230:	4603      	mov	r3, r0
 8005232:	e003      	b.n	800523c <get_tag_insert+0xec>
 8005234:	f640 339f 	movw	r3, #2975	; 0xb9f
 8005238:	e000      	b.n	800523c <get_tag_insert+0xec>
 800523a:	2315      	movs	r3, #21
 800523c:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	332b      	adds	r3, #43	; 0x2b
 8005242:	2212      	movs	r2, #18
 8005244:	4922      	ldr	r1, [pc, #136]	; (80052d0 <get_tag_insert+0x180>)
 8005246:	4618      	mov	r0, r3
 8005248:	f00c fa02 	bl	8011650 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3316      	adds	r3, #22
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4619      	mov	r1, r3
 800525a:	f00c f9f9 	bl	8011650 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3312      	adds	r3, #18
 8005262:	3328      	adds	r3, #40	; 0x28
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	3303      	adds	r3, #3
 800526a:	2207      	movs	r2, #7
 800526c:	4919      	ldr	r1, [pc, #100]	; (80052d4 <get_tag_insert+0x184>)
 800526e:	4618      	mov	r0, r3
 8005270:	f00c f9ee 	bl	8011650 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3319      	adds	r3, #25
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	2200      	movs	r2, #0
 800527e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  len = strlen(ssi->tag_insert);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	332b      	adds	r3, #43	; 0x2b
 8005286:	4618      	mov	r0, r3
 8005288:	f7fa ffac 	bl	80001e4 <strlen>
 800528c:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d306      	bcc.n	80052a4 <get_tag_insert+0x154>
 8005296:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <get_tag_insert+0x164>)
 8005298:	f240 323f 	movw	r2, #831	; 0x33f
 800529c:	490e      	ldr	r1, [pc, #56]	; (80052d8 <get_tag_insert+0x188>)
 800529e:	4807      	ldr	r0, [pc, #28]	; (80052bc <get_tag_insert+0x16c>)
 80052a0:	f00c fab0 	bl	8011804 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	825a      	strh	r2, [r3, #18]
}
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	080137ac 	.word	0x080137ac
 80052b8:	0801381c 	.word	0x0801381c
 80052bc:	080137f4 	.word	0x080137f4
 80052c0:	08013828 	.word	0x08013828
 80052c4:	20000508 	.word	0x20000508
 80052c8:	20000510 	.word	0x20000510
 80052cc:	2000050c 	.word	0x2000050c
 80052d0:	08013834 	.word	0x08013834
 80052d4:	08013848 	.word	0x08013848
 80052d8:	08013850 	.word	0x08013850

080052dc <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 80052e6:	4a63      	ldr	r2, [pc, #396]	; (8005474 <get_http_headers+0x198>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80052ee:	3314      	adds	r3, #20
 80052f0:	601a      	str	r2, [r3, #0]
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80052f8:	3318      	adds	r3, #24
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005304:	331c      	adds	r3, #28
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d117      	bne.n	8005340 <get_http_headers+0x64>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005310:	4a59      	ldr	r2, [pc, #356]	; (8005478 <get_http_headers+0x19c>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005318:	3310      	adds	r3, #16
 800531a:	601a      	str	r2, [r3, #0]
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800531c:	4a57      	ldr	r2, [pc, #348]	; (800547c <get_http_headers+0x1a0>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005324:	601a      	str	r2, [r3, #0]
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800532c:	3312      	adds	r3, #18
 800532e:	2200      	movs	r2, #0
 8005330:	801a      	strh	r2, [r3, #0]
    hs->hdr_pos = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005338:	3310      	adds	r3, #16
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
    return;
 800533e:	e096      	b.n	800546e <get_http_headers+0x192>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 8005340:	494f      	ldr	r1, [pc, #316]	; (8005480 <get_http_headers+0x1a4>)
 8005342:	6838      	ldr	r0, [r7, #0]
 8005344:	f00c fba5 	bl	8011a92 <strstr>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <get_http_headers+0x80>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800534e:	4a4a      	ldr	r2, [pc, #296]	; (8005478 <get_http_headers+0x19c>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005356:	3310      	adds	r3, #16
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e021      	b.n	80053a0 <get_http_headers+0xc4>
  } else if (strstr(uri, "400")) {
 800535c:	4949      	ldr	r1, [pc, #292]	; (8005484 <get_http_headers+0x1a8>)
 800535e:	6838      	ldr	r0, [r7, #0]
 8005360:	f00c fb97 	bl	8011a92 <strstr>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <get_http_headers+0x9c>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800536a:	4a47      	ldr	r2, [pc, #284]	; (8005488 <get_http_headers+0x1ac>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005372:	3310      	adds	r3, #16
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e013      	b.n	80053a0 <get_http_headers+0xc4>
  } else if (strstr(uri, "501")) {
 8005378:	4944      	ldr	r1, [pc, #272]	; (800548c <get_http_headers+0x1b0>)
 800537a:	6838      	ldr	r0, [r7, #0]
 800537c:	f00c fb89 	bl	8011a92 <strstr>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <get_http_headers+0xb8>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8005386:	4a42      	ldr	r2, [pc, #264]	; (8005490 <get_http_headers+0x1b4>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800538e:	3310      	adds	r3, #16
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e005      	b.n	80053a0 <get_http_headers+0xc4>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8005394:	4a3f      	ldr	r2, [pc, #252]	; (8005494 <get_http_headers+0x1b8>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800539c:	3310      	adds	r3, #16
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 80053a0:	213f      	movs	r1, #63	; 0x3f
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f00c fb3b 	bl	8011a1e <strchr>
 80053a8:	60b8      	str	r0, [r7, #8]
  if (vars) {
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <get_http_headers+0xda>
    *vars = '\0';
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 80053ba:	212e      	movs	r1, #46	; 0x2e
 80053bc:	6838      	ldr	r0, [r7, #0]
 80053be:	f00c fb2e 	bl	8011a1e <strchr>
 80053c2:	6138      	str	r0, [r7, #16]
  while (tmp) {
 80053c4:	e007      	b.n	80053d6 <get_http_headers+0xfa>
    ext = tmp + 1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 80053cc:	212e      	movs	r1, #46	; 0x2e
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f00c fb25 	bl	8011a1e <strchr>
 80053d4:	6138      	str	r0, [r7, #16]
  while (tmp) {
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f4      	bne.n	80053c6 <get_http_headers+0xea>
  }
  if (ext != NULL) {
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <get_http_headers+0x130>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e00d      	b.n	8005404 <get_http_headers+0x128>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80053e8:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <get_http_headers+0x1bc>)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fd0c 	bl	8006e10 <lwip_stricmp>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <get_http_headers+0x136>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b13      	cmp	r3, #19
 8005408:	d9ee      	bls.n	80053e8 <get_http_headers+0x10c>
 800540a:	e003      	b.n	8005414 <get_http_headers+0x138>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800540c:	2314      	movs	r3, #20
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e000      	b.n	8005414 <get_http_headers+0x138>
        break;
 8005412:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <get_http_headers+0x144>
    *vars = '?';
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	223f      	movs	r2, #63	; 0x3f
 800541e:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b13      	cmp	r3, #19
 8005424:	d809      	bhi.n	800543a <get_http_headers+0x15e>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8005426:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <get_http_headers+0x1bc>)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4413      	add	r3, r2
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e00d      	b.n	8005456 <get_http_headers+0x17a>
  } else if (!ext) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <get_http_headers+0x170>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005446:	4a15      	ldr	r2, [pc, #84]	; (800549c <get_http_headers+0x1c0>)
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e004      	b.n	8005456 <get_http_headers+0x17a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <get_http_headers+0x1c4>)
 8005454:	601a      	str	r2, [r3, #0]
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800545c:	3312      	adds	r3, #18
 800545e:	2200      	movs	r2, #0
 8005460:	801a      	strh	r2, [r3, #0]
  hs->hdr_pos = 0;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005468:	3310      	adds	r3, #16
 800546a:	2200      	movs	r2, #0
 800546c:	801a      	strh	r2, [r3, #0]
}
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	0801342c 	.word	0x0801342c
 8005478:	080132f0 	.word	0x080132f0
 800547c:	0801346c 	.word	0x0801346c
 8005480:	08013860 	.word	0x08013860
 8005484:	08013864 	.word	0x08013864
 8005488:	08013310 	.word	0x08013310
 800548c:	08013868 	.word	0x08013868
 8005490:	0801332c 	.word	0x0801332c
 8005494:	080132dc 	.word	0x080132dc
 8005498:	08017d40 	.word	0x08017d40
 800549c:	08013600 	.word	0x08013600
 80054a0:	0801386c 	.word	0x0801386c

080054a4 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80054b6:	3318      	adds	r3, #24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d006      	beq.n	80054cc <get_http_content_length+0x28>
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <get_http_content_length+0xc8>)
 80054c0:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80054c4:	492a      	ldr	r1, [pc, #168]	; (8005570 <get_http_content_length+0xcc>)
 80054c6:	482b      	ldr	r0, [pc, #172]	; (8005574 <get_http_content_length+0xd0>)
 80054c8:	f00c f99c 	bl	8011804 <iprintf>

  add_content_len = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10c      	bne.n	80054f2 <get_http_content_length+0x4e>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <get_http_content_length+0x4e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	7c1b      	ldrb	r3, [r3, #16]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <get_http_content_length+0x4e>
      add_content_len = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02c      	beq.n	8005552 <get_http_content_length+0xae>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80054fe:	3304      	adds	r3, #4
              hs->handle->len);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6952      	ldr	r2, [r2, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8005504:	6852      	ldr	r2, [r2, #4]
 8005506:	210c      	movs	r1, #12
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fcb5 	bl	8006e78 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7fa fe64 	bl	80001e4 <strlen>
 800551c:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b09      	cmp	r3, #9
 8005522:	d814      	bhi.n	800554e <get_http_content_length+0xaa>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	2203      	movs	r2, #3
 8005532:	4911      	ldr	r1, [pc, #68]	; (8005578 <get_http_content_length+0xd4>)
 8005534:	4618      	mov	r0, r3
 8005536:	f00c f88b 	bl	8011650 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 52b1 	add.w	r2, r3, #5664	; 0x1620
 8005540:	3204      	adds	r2, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005548:	331c      	adds	r3, #28
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e001      	b.n	8005552 <get_http_content_length+0xae>
    } else {
      add_content_len = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <get_http_content_length+0xc0>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005558:	4a08      	ldr	r2, [pc, #32]	; (800557c <get_http_content_length+0xd8>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005560:	3318      	adds	r3, #24
 8005562:	601a      	str	r2, [r3, #0]
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	080137ac 	.word	0x080137ac
 8005570:	0801388c 	.word	0x0801388c
 8005574:	080137f4 	.word	0x080137f4
 8005578:	080138a0 	.word	0x080138a0
 800557c:	080133bc 	.word	0x080133bc

08005580 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800558a:	2300      	movs	r3, #0
 800558c:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005594:	3318      	adds	r3, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <http_send_headers+0x22>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800559c:	6838      	ldr	r0, [r7, #0]
 800559e:	f7ff ff81 	bl	80054a4 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80055a8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 80055aa:	8bfb      	ldrh	r3, [r7, #30]
 80055ac:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80055ae:	e0ae      	b.n	800570e <http_send_headers+0x18e>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80055b6:	3312      	adds	r3, #18
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f202 5284 	addw	r2, r2, #1412	; 0x584
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fa fe0c 	bl	80001e4 <strlen>
 80055cc:	4603      	mov	r3, r0
 80055ce:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 80055d0:	8b7a      	ldrh	r2, [r7, #26]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80055d8:	3310      	adds	r3, #16
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	1ad2      	subs	r2, r2, r3
 80055de:	8bfb      	ldrh	r3, [r7, #30]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	bfa8      	it	ge
 80055e4:	4613      	movge	r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80055f0:	3312      	adds	r3, #18
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f202 5284 	addw	r2, r2, #1412	; 0x584
 80055fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005606:	3310      	adds	r3, #16
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	4413      	add	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800560e:	89fb      	ldrh	r3, [r7, #14]
 8005610:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005612:	2300      	movs	r3, #0
 8005614:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800561c:	3312      	adds	r3, #18
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d103      	bne.n	800562c <http_send_headers+0xac>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8005624:	7f3b      	ldrb	r3, [r7, #28]
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005632:	3312      	adds	r3, #18
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d803      	bhi.n	8005642 <http_send_headers+0xc2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800563a:	7f3b      	ldrb	r3, [r7, #28]
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8005642:	7f3b      	ldrb	r3, [r7, #28]
 8005644:	f107 020e 	add.w	r2, r7, #14
 8005648:	6979      	ldr	r1, [r7, #20]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fc44 	bl	8004ed8 <http_write>
 8005650:	4603      	mov	r3, r0
 8005652:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8005654:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <http_send_headers+0xea>
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	8a7a      	ldrh	r2, [r7, #18]
 8005660:	429a      	cmp	r2, r3
 8005662:	d002      	beq.n	800566a <http_send_headers+0xea>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8005664:	2301      	movs	r3, #1
 8005666:	777b      	strb	r3, [r7, #29]
 8005668:	e005      	b.n	8005676 <http_send_headers+0xf6>
    } else if (err != ERR_OK) {
 800566a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <http_send_headers+0xf6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800567c:	3310      	adds	r3, #16
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	89fb      	ldrh	r3, [r7, #14]
 8005682:	4413      	add	r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800568c:	3310      	adds	r3, #16
 800568e:	801a      	strh	r2, [r3, #0]
    len -= sendlen;
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	8bfa      	ldrh	r2, [r7, #30]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800569e:	3310      	adds	r3, #16
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	8b7a      	ldrh	r2, [r7, #26]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d132      	bne.n	800570e <http_send_headers+0x18e>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056ae:	3312      	adds	r3, #18
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056bc:	3312      	adds	r3, #18
 80056be:	801a      	strh	r2, [r3, #0]
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80056c0:	e00b      	b.n	80056da <http_send_headers+0x15a>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056c8:	3312      	adds	r3, #18
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056d6:	3312      	adds	r3, #18
 80056d8:	801a      	strh	r2, [r3, #0]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056e0:	3312      	adds	r3, #18
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d80c      	bhi.n	8005702 <http_send_headers+0x182>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056ee:	3312      	adds	r3, #18
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f202 5284 	addw	r2, r2, #1412	; 0x584
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0df      	beq.n	80056c2 <http_send_headers+0x142>
      }
      hs->hdr_pos = 0;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005708:	3310      	adds	r3, #16
 800570a:	2200      	movs	r2, #0
 800570c:	801a      	strh	r2, [r3, #0]
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <http_send_headers+0x1aa>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800571a:	3312      	adds	r3, #18
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d803      	bhi.n	800572a <http_send_headers+0x1aa>
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af43 	bne.w	80055b0 <http_send_headers+0x30>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005730:	3312      	adds	r3, #18
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d90f      	bls.n	8005758 <http_send_headers+0x1d8>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <http_send_headers+0x1d8>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f81a 	bl	800577c <http_check_eof>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <http_send_headers+0x1d4>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800574e:	2302      	movs	r3, #2
 8005750:	777b      	strb	r3, [r7, #29]
 8005752:	e001      	b.n	8005758 <http_send_headers+0x1d8>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 8005754:	2303      	movs	r3, #3
 8005756:	e00d      	b.n	8005774 <http_send_headers+0x1f4>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800575e:	3312      	adds	r3, #18
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d903      	bls.n	800576e <http_send_headers+0x1ee>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <http_send_headers+0x1f2>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800576e:	2302      	movs	r3, #2
 8005770:	e000      	b.n	8005774 <http_send_headers+0x1f4>
  }
  return data_to_send;
 8005772:	7f7b      	ldrb	r3, [r7, #29]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fc6e 	bl	8005072 <http_eof>
    return 0;
 8005796:	2300      	movs	r3, #0
 8005798:	e016      	b.n	80057c8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fb02 	bl	8004da8 <fs_bytes_left>
 80057a4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc05      	bgt.n	80057b8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fc5f 	bl	8005072 <http_eof>
    return 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e007      	b.n	80057c8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <http_check_eof+0x54>)
 80057ba:	f240 429d 	movw	r2, #1181	; 0x49d
 80057be:	4905      	ldr	r1, [pc, #20]	; (80057d4 <http_check_eof+0x58>)
 80057c0:	4805      	ldr	r0, [pc, #20]	; (80057d8 <http_check_eof+0x5c>)
 80057c2:	f00c f81f 	bl	8011804 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80057c6:	2301      	movs	r3, #1
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	080137ac 	.word	0x080137ac
 80057d4:	080138a4 	.word	0x080138a4
 80057d8:	080137f4 	.word	0x080137f4

080057dc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d803      	bhi.n	80057fe <http_send_data_nonssi+0x22>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	e001      	b.n	8005802 <http_send_data_nonssi+0x26>
 80057fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005802:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6999      	ldr	r1, [r3, #24]
 8005808:	f107 020c 	add.w	r2, r7, #12
 800580c:	2300      	movs	r3, #0
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fb62 	bl	8004ed8 <http_write>
 8005814:	4603      	mov	r3, r0
 8005816:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	89ba      	ldrh	r2, [r7, #12]
 800582a:	441a      	add	r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	89ba      	ldrh	r2, [r7, #12]
 8005836:	1a9a      	subs	r2, r3, r2
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <http_send_data_ssi+0x2c>
 8005866:	4b89      	ldr	r3, [pc, #548]	; (8005a8c <http_send_data_ssi+0x244>)
 8005868:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800586c:	4988      	ldr	r1, [pc, #544]	; (8005a90 <http_send_data_ssi+0x248>)
 800586e:	4889      	ldr	r0, [pc, #548]	; (8005a94 <http_send_data_ssi+0x24c>)
 8005870:	f00b ffc8 	bl	8011804 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800587a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	429a      	cmp	r2, r3
 8005886:	f240 82ab 	bls.w	8005de0 <http_send_data_ssi+0x598>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005898:	4293      	cmp	r3, r2
 800589a:	dc06      	bgt.n	80058aa <http_send_data_ssi+0x62>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	e001      	b.n	80058ae <http_send_data_ssi+0x66>
 80058aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058ae:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6999      	ldr	r1, [r3, #24]
 80058b4:	f107 020e 	add.w	r2, r7, #14
 80058b8:	2300      	movs	r3, #0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fb0c 	bl	8004ed8 <http_write>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80058c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10d      	bne.n	80058e8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	89fa      	ldrh	r2, [r7, #14]
 80058d6:	441a      	add	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	89fa      	ldrh	r2, [r7, #14]
 80058e2:	1a9a      	subs	r2, r3, r2
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 8276 	bne.w	8005de0 <http_send_data_ssi+0x598>
      return data_to_send;
 80058f4:	7dbb      	ldrb	r3, [r7, #22]
 80058f6:	e2bc      	b.n	8005e72 <http_send_data_ssi+0x62a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <http_send_data_ssi+0xba>
      return data_to_send;
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	e2b7      	b.n	8005e72 <http_send_data_ssi+0x62a>
    }
    switch (ssi->tag_state) {
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f893 3be4 	ldrb.w	r3, [r3, #3044]	; 0xbe4
 8005908:	2b04      	cmp	r3, #4
 800590a:	f200 8268 	bhi.w	8005dde <http_send_data_ssi+0x596>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <http_send_data_ssi+0xcc>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005929 	.word	0x08005929
 8005918:	08005983 	.word	0x08005983
 800591c:	080059f5 	.word	0x080059f5
 8005920:	08005b3d 	.word	0x08005b3d
 8005924:	08005cad 	.word	0x08005cad
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005928:	2300      	movs	r3, #0
 800592a:	757b      	strb	r3, [r7, #21]
 800592c:	e01b      	b.n	8005966 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	7d7b      	ldrb	r3, [r7, #21]
 8005936:	4958      	ldr	r1, [pc, #352]	; (8005a98 <http_send_data_ssi+0x250>)
 8005938:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d10e      	bne.n	8005960 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	7d7a      	ldrb	r2, [r7, #21]
 8005946:	751a      	strb	r2, [r3, #20]
            ssi->tag_state = TAG_LEADIN;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
            ssi->tag_index = 1;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2201      	movs	r2, #1
 8005954:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800595e:	e005      	b.n	800596c <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005960:	7d7b      	ldrb	r3, [r7, #21]
 8005962:	3301      	adds	r3, #1
 8005964:	757b      	strb	r3, [r7, #21]
 8005966:	7d7b      	ldrb	r3, [r7, #21]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d9e0      	bls.n	800592e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	1e5a      	subs	r2, r3, #1
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	601a      	str	r2, [r3, #0]
        break;
 8005980:	e22e      	b.n	8005de0 <http_send_data_ssi+0x598>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	7d1b      	ldrb	r3, [r3, #20]
 8005986:	461a      	mov	r2, r3
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <http_send_data_ssi+0x250>)
 800598a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	8a12      	ldrh	r2, [r2, #16]
 8005992:	4413      	add	r3, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2200      	movs	r2, #0
 800599e:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
 80059a8:	e21a      	b.n	8005de0 <http_send_data_ssi+0x598>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	7d1b      	ldrb	r3, [r3, #20]
 80059b4:	4619      	mov	r1, r3
 80059b6:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <http_send_data_ssi+0x250>)
 80059b8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80059bc:	6939      	ldr	r1, [r7, #16]
 80059be:	8a09      	ldrh	r1, [r1, #16]
 80059c0:	440b      	add	r3, r1
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d106      	bne.n	80059d6 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	8a1b      	ldrh	r3, [r3, #16]
 80059cc:	3301      	adds	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	821a      	strh	r2, [r3, #16]
 80059d4:	e003      	b.n	80059de <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	601a      	str	r2, [r3, #0]
        }
        break;
 80059f2:	e1f5      	b.n	8005de0 <http_send_data_ssi+0x598>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	8a1b      	ldrh	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11e      	bne.n	8005a3a <http_send_data_ssi+0x1f2>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d00e      	beq.n	8005a24 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d009      	beq.n	8005a24 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b0a      	cmp	r3, #10
 8005a18:	d004      	beq.n	8005a24 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a20:	2b0d      	cmp	r3, #13
 8005a22:	d10a      	bne.n	8005a3a <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	601a      	str	r2, [r3, #0]
          break;
 8005a38:	e1d2      	b.n	8005de0 <http_send_data_ssi+0x598>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	7d1b      	ldrb	r3, [r3, #20]
 8005a44:	4914      	ldr	r1, [pc, #80]	; (8005a98 <http_send_data_ssi+0x250>)
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d013      	beq.n	8005a7a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d00e      	beq.n	8005a7a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b09      	cmp	r3, #9
 8005a64:	d009      	beq.n	8005a7a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005a6c:	2b0a      	cmp	r3, #10
 8005a6e:	d004      	beq.n	8005a7a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b0d      	cmp	r3, #13
 8005a78:	d13f      	bne.n	8005afa <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	8a1b      	ldrh	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
          if (ssi->tag_index == 0) {
 8005a8a:	e04c      	b.n	8005b26 <http_send_data_ssi+0x2de>
 8005a8c:	080137ac 	.word	0x080137ac
 8005a90:	08013828 	.word	0x08013828
 8005a94:	080137f4 	.word	0x080137f4
 8005a98:	08017e1c 	.word	0x08017e1c
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	8a1b      	ldrh	r3, [r3, #16]
 8005aa8:	2bff      	cmp	r3, #255	; 0xff
 8005aaa:	d906      	bls.n	8005aba <http_send_data_ssi+0x272>
 8005aac:	4b91      	ldr	r3, [pc, #580]	; (8005cf4 <http_send_data_ssi+0x4ac>)
 8005aae:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ab2:	4991      	ldr	r1, [pc, #580]	; (8005cf8 <http_send_data_ssi+0x4b0>)
 8005ab4:	4891      	ldr	r0, [pc, #580]	; (8005cfc <http_send_data_ssi+0x4b4>)
 8005ab6:	f00b fea5 	bl	8011804 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	8a1b      	ldrh	r3, [r3, #16]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	755a      	strb	r2, [r3, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	8a1b      	ldrh	r3, [r3, #16]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4413      	add	r3, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	759a      	strb	r2, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	7d1b      	ldrb	r3, [r3, #20]
 8005adc:	4988      	ldr	r1, [pc, #544]	; (8005d00 <http_send_data_ssi+0x4b8>)
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	440b      	add	r3, r1
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d103      	bne.n	8005af2 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2201      	movs	r2, #1
 8005aee:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8005af0:	e019      	b.n	8005b26 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2200      	movs	r2, #0
 8005af6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8005af8:	e015      	b.n	8005b26 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	8a1b      	ldrh	r3, [r3, #16]
 8005afe:	2b13      	cmp	r3, #19
 8005b00:	d80d      	bhi.n	8005b1e <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	8a1b      	ldrh	r3, [r3, #16]
 8005b0a:	1c59      	adds	r1, r3, #1
 8005b0c:	b288      	uxth	r0, r1
 8005b0e:	6939      	ldr	r1, [r7, #16]
 8005b10:	8208      	strh	r0, [r1, #16]
 8005b12:	4619      	mov	r1, r3
 8005b14:	7812      	ldrb	r2, [r2, #0]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	440b      	add	r3, r1
 8005b1a:	759a      	strb	r2, [r3, #22]
 8005b1c:	e003      	b.n	8005b26 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	1e5a      	subs	r2, r3, #1
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	601a      	str	r2, [r3, #0]

        break;
 8005b3a:	e151      	b.n	8005de0 <http_send_data_ssi+0x598>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	8a1b      	ldrh	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11e      	bne.n	8005b82 <http_send_data_ssi+0x33a>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d00e      	beq.n	8005b6c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	d009      	beq.n	8005b6c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b0a      	cmp	r3, #10
 8005b60:	d004      	beq.n	8005b6c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005b68:	2b0d      	cmp	r3, #13
 8005b6a:	d10a      	bne.n	8005b82 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	601a      	str	r2, [r3, #0]
          break;
 8005b80:	e12e      	b.n	8005de0 <http_send_data_ssi+0x598>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	7d1b      	ldrb	r3, [r3, #20]
 8005b8c:	495c      	ldr	r1, [pc, #368]	; (8005d00 <http_send_data_ssi+0x4b8>)
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	440b      	add	r3, r1
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6939      	ldr	r1, [r7, #16]
 8005b96:	8a09      	ldrh	r1, [r1, #16]
 8005b98:	440b      	add	r3, r1
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d176      	bne.n	8005c8e <http_send_data_ssi+0x446>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	8a1b      	ldrh	r3, [r3, #16]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	7d1b      	ldrb	r3, [r3, #20]
 8005bc4:	4a4e      	ldr	r2, [pc, #312]	; (8005d00 <http_send_data_ssi+0x4b8>)
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	8a12      	ldrh	r2, [r2, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 8103 	bne.w	8005de0 <http_send_data_ssi+0x598>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f7ff fab8 	bl	8005150 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2200      	movs	r2, #0
 8005be4:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2204      	movs	r2, #4
 8005bea:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
            ssi->tag_end = ssi->parsed;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f240 80ea 	bls.w	8005de0 <http_send_data_ssi+0x598>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	dc06      	bgt.n	8005c2c <http_send_data_ssi+0x3e4>
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	e001      	b.n	8005c30 <http_send_data_ssi+0x3e8>
 8005c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c30:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	f107 020e 	add.w	r2, r7, #14
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff f94b 	bl	8004ed8 <http_write>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 80c8 	bne.w	8005de0 <http_send_data_ssi+0x598>
                data_to_send = 1;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d809      	bhi.n	8005c74 <http_send_data_ssi+0x42c>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	89fa      	ldrh	r2, [r7, #14]
 8005c7a:	441a      	add	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	89fa      	ldrh	r2, [r7, #14]
 8005c86:	1a9a      	subs	r2, r3, r2
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c8c:	e0a8      	b.n	8005de0 <http_send_data_ssi+0x598>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
        }
        break;
 8005caa:	e099      	b.n	8005de0 <http_send_data_ssi+0x598>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d95d      	bls.n	8005d74 <http_send_data_ssi+0x52c>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d206      	bcs.n	8005cd2 <http_send_data_ssi+0x48a>
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <http_send_data_ssi+0x4ac>)
 8005cc6:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8005cca:	490e      	ldr	r1, [pc, #56]	; (8005d04 <http_send_data_ssi+0x4bc>)
 8005ccc:	480b      	ldr	r0, [pc, #44]	; (8005cfc <http_send_data_ssi+0x4b4>)
 8005cce:	f00b fd99 	bl	8011804 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	dc11      	bgt.n	8005d08 <http_send_data_ssi+0x4c0>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	e00c      	b.n	8005d0c <http_send_data_ssi+0x4c4>
 8005cf2:	bf00      	nop
 8005cf4:	080137ac 	.word	0x080137ac
 8005cf8:	080138dc 	.word	0x080138dc
 8005cfc:	080137f4 	.word	0x080137f4
 8005d00:	08017e1c 	.word	0x08017e1c
 8005d04:	080138f4 	.word	0x080138f4
 8005d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d0c:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8005d0e:	89fb      	ldrh	r3, [r7, #14]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <http_send_data_ssi+0x4e2>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6999      	ldr	r1, [r3, #24]
 8005d18:	f107 020e 	add.w	r2, r7, #14
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff f8da 	bl	8004ed8 <http_write>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]
 8005d28:	e001      	b.n	8005d2e <http_send_data_ssi+0x4e6>
          } else {
            err = ERR_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8005d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d154      	bne.n	8005de0 <http_send_data_ssi+0x598>
            data_to_send = 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d809      	bhi.n	8005d5a <http_send_data_ssi+0x512>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	4413      	add	r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	89fa      	ldrh	r2, [r7, #14]
 8005d60:	441a      	add	r2, r3
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	1a9a      	subs	r2, r3, r2
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24
 8005d72:	e035      	b.n	8005de0 <http_send_data_ssi+0x598>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	8a1a      	ldrh	r2, [r3, #16]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	8a5b      	ldrh	r3, [r3, #18]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d222      	bcs.n	8005dc6 <http_send_data_ssi+0x57e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	8a5a      	ldrh	r2, [r3, #18]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	8a1b      	ldrh	r3, [r3, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	8a1b      	ldrh	r3, [r3, #16]
 8005d92:	3328      	adds	r3, #40	; 0x28
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	1cd9      	adds	r1, r3, #3
 8005d9a:	f107 020e 	add.w	r2, r7, #14
 8005d9e:	2301      	movs	r3, #1
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff f899 	bl	8004ed8 <http_write>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <http_send_data_ssi+0x598>
              data_to_send = 1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	8a1a      	ldrh	r2, [r3, #16]
 8005dba:	89fb      	ldrh	r3, [r7, #14]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	821a      	strh	r2, [r3, #16]
 8005dc4:	e00c      	b.n	8005de0 <http_send_data_ssi+0x598>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005ddc:	e000      	b.n	8005de0 <http_send_data_ssi+0x598>
        default:
          break;
 8005dde:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f893 3be4 	ldrb.w	r3, [r3, #3044]	; 0xbe4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d003      	beq.n	8005df2 <http_send_data_ssi+0x5aa>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <http_send_data_ssi+0x5b4>
 8005df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f43f ad7e 	beq.w	80058f8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f893 3be4 	ldrb.w	r3, [r3, #3044]	; 0xbe4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d034      	beq.n	8005e70 <http_send_data_ssi+0x628>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d92e      	bls.n	8005e70 <http_send_data_ssi+0x628>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e20:	4293      	cmp	r3, r2
 8005e22:	dc06      	bgt.n	8005e32 <http_send_data_ssi+0x5ea>
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	e001      	b.n	8005e36 <http_send_data_ssi+0x5ee>
 8005e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e36:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6999      	ldr	r1, [r3, #24]
 8005e3c:	f107 020e 	add.w	r2, r7, #14
 8005e40:	2300      	movs	r3, #0
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff f848 	bl	8004ed8 <http_write>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10d      	bne.n	8005e70 <http_send_data_ssi+0x628>
      data_to_send = 1;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	89fa      	ldrh	r2, [r7, #14]
 8005e5e:	441a      	add	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	89fa      	ldrh	r2, [r7, #14]
 8005e6a:	1a9a      	subs	r2, r3, r2
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005e70:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <http_send+0x18>
    return 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e04c      	b.n	8005f2e <http_send+0xb2>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005e9a:	3312      	adds	r3, #18
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d814      	bhi.n	8005ecc <http_send+0x50>
    data_to_send = http_send_headers(pcb, hs);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fb6b 	bl	8005580 <http_send_headers>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d009      	beq.n	8005ec8 <http_send+0x4c>
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d008      	beq.n	8005ecc <http_send+0x50>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005ec0:	3312      	adds	r3, #18
 8005ec2:	881b      	ldrh	r3, [r3, #0]
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d801      	bhi.n	8005ecc <http_send+0x50>
      return data_to_send;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	e030      	b.n	8005f2e <http_send+0xb2>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d108      	bne.n	8005ee6 <http_send+0x6a>
    if (!http_check_eof(pcb, hs)) {
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fc50 	bl	800577c <http_check_eof>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <http_send+0x6a>
      return 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e023      	b.n	8005f2e <http_send+0xb2>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <http_send+0x80>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fca9 	bl	8005848 <http_send_data_ssi>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	73fb      	strb	r3, [r7, #15]
 8005efa:	e005      	b.n	8005f08 <http_send+0x8c>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fc6c 	bl	80057dc <http_send_data_nonssi>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <http_send+0xb0>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe ff47 	bl	8004da8 <fs_bytes_left>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dc05      	bgt.n	8005f2c <http_send+0xb0>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff f8a5 	bl	8005072 <http_eof>
    return 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <http_send+0xb2>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <http_get_404_file+0x80>)
 8005f46:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fe fee1 	bl	8004d18 <fs_open>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d024      	beq.n	8005fac <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <http_get_404_file+0x84>)
 8005f66:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7fe fed1 	bl	8004d18 <fs_open>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	4a0e      	ldr	r2, [pc, #56]	; (8005fc0 <http_get_404_file+0x88>)
 8005f86:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7fe fec1 	bl	8004d18 <fs_open>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
        return NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005fac:	687b      	ldr	r3, [r7, #4]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	0801390c 	.word	0x0801390c
 8005fbc:	08013918 	.word	0x08013918
 8005fc0:	08013924 	.word	0x08013924

08005fc4 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <http_handle_post_finished+0x2c>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005fd2:	223f      	movs	r2, #63	; 0x3f
 8005fd4:	4906      	ldr	r1, [pc, #24]	; (8005ff0 <http_handle_post_finished+0x2c>)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa fe5c 	bl	8000c94 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <http_handle_post_finished+0x2c>)
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fabb 	bl	800655c <http_find_file>
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200004c8 	.word	0x200004c8

08005ff4 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01c      	beq.n	800603e <http_post_rxpbuf+0x4a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800600a:	3314      	adds	r3, #20
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	8912      	ldrh	r2, [r2, #8]
 8006012:	4293      	cmp	r3, r2
 8006014:	d206      	bcs.n	8006024 <http_post_rxpbuf+0x30>
      hs->post_content_len_left = 0;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800601c:	3314      	adds	r3, #20
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e00c      	b.n	800603e <http_post_rxpbuf+0x4a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800602a:	3314      	adds	r3, #20
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	8912      	ldrh	r2, [r2, #8]
 8006032:	1a9a      	subs	r2, r3, r2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800603a:	3314      	adds	r3, #20
 800603c:	601a      	str	r2, [r3, #0]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <http_post_rxpbuf+0x5e>
    err = httpd_post_receive_data(hs, p);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fa fde4 	bl	8000c14 <httpd_post_receive_data>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e001      	b.n	8006056 <http_post_rxpbuf+0x62>
  } else {
    err = ERR_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8006056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <http_post_rxpbuf+0x76>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006064:	3314      	adds	r3, #20
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
  }
  if (hs->post_content_len_left == 0) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006070:	3314      	adds	r3, #20
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <http_post_rxpbuf+0x8e>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ffa3 	bl	8005fc4 <http_handle_post_finished>
 800607e:	4603      	mov	r3, r0
 8006080:	e000      	b.n	8006084 <http_post_rxpbuf+0x90>
  }

  return ERR_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b092      	sub	sp, #72	; 0x48
 8006090:	af04      	add	r7, sp, #16
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800609a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609c:	1c58      	adds	r0, r3, #1
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	1acb      	subs	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	4967      	ldr	r1, [pc, #412]	; (800624c <http_post_request+0x1c0>)
 80060ae:	f000 fe79 	bl	8006da4 <lwip_strnstr>
 80060b2:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80c2 	beq.w	8006240 <http_post_request+0x1b4>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	1c58      	adds	r0, r3, #1
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	3301      	adds	r3, #1
 80060c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	4961      	ldr	r1, [pc, #388]	; (8006250 <http_post_request+0x1c4>)
 80060cc:	f000 fe6a 	bl	8006da4 <lwip_strnstr>
 80060d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80b0 	beq.w	800623a <http_post_request+0x1ae>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	3310      	adds	r3, #16
 80060de:	220a      	movs	r2, #10
 80060e0:	495c      	ldr	r1, [pc, #368]	; (8006254 <http_post_request+0x1c8>)
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fe5e 	bl	8006da4 <lwip_strnstr>
 80060e8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80a4 	beq.w	800623a <http_post_request+0x1ae>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3310      	adds	r3, #16
 80060f6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 80060f8:	69f8      	ldr	r0, [r7, #28]
 80060fa:	f00b fa63 	bl	80115c4 <atoi>
 80060fe:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d104      	bne.n	8006118 <http_post_request+0x8c>
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3301      	adds	r3, #1
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b0d      	cmp	r3, #13
 8006116:	d002      	beq.n	800611e <http_post_request+0x92>
            content_len = -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	2b00      	cmp	r3, #0
 8006122:	f2c0 8087 	blt.w	8006234 <http_post_request+0x1a8>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	3301      	adds	r3, #1
 800612a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800612c:	887a      	ldrh	r2, [r7, #2]
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	1d19      	adds	r1, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1acb      	subs	r3, r1, r3
 8006136:	429a      	cmp	r2, r3
 8006138:	db05      	blt.n	8006146 <http_post_request+0xba>
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b29b      	uxth	r3, r3
 8006144:	e000      	b.n	8006148 <http_post_request+0xbc>
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	1d19      	adds	r1, r3, #4
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	429a      	cmp	r2, r3
 8006156:	db05      	blt.n	8006164 <http_post_request+0xd8>
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	e000      	b.n	8006166 <http_post_request+0xda>
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8006168:	2301      	movs	r3, #1
 800616a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800616c:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <http_post_request+0x1cc>)
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8006178:	8aba      	ldrh	r2, [r7, #20]
 800617a:	f107 0312 	add.w	r3, r7, #18
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	233f      	movs	r3, #63	; 0x3f
 8006182:	9302      	str	r3, [sp, #8]
 8006184:	4b34      	ldr	r3, [pc, #208]	; (8006258 <http_post_request+0x1cc>)
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006192:	68b8      	ldr	r0, [r7, #8]
 8006194:	f7fa fcd0 	bl	8000b38 <httpd_post_begin>
 8006198:	4603      	mov	r3, r0
 800619a:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800619c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d140      	bne.n	8006226 <http_post_request+0x19a>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80061a8:	8afb      	ldrh	r3, [r7, #22]
 80061aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80061ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80061b4:	3314      	adds	r3, #20
 80061b6:	601a      	str	r2, [r3, #0]

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80061b8:	e007      	b.n	80061ca <http_post_request+0x13e>
              start_offset -= q->len;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	895b      	ldrh	r3, [r3, #10]
 80061be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <http_post_request+0x14e>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	895b      	ldrh	r3, [r3, #10]
 80061d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d2ef      	bcs.n	80061ba <http_post_request+0x12e>
            }
            if (q != NULL) {
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <http_post_request+0x170>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80061e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061e2:	4619      	mov	r1, r3
 80061e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e6:	f002 f8bf 	bl	8008368 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80061ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ec:	f002 f9e2 	bl	80085b4 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80061f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f2:	68b8      	ldr	r0, [r7, #8]
 80061f4:	f7ff fefe 	bl	8005ff4 <http_post_rxpbuf>
 80061f8:	4603      	mov	r3, r0
 80061fa:	e023      	b.n	8006244 <http_post_request+0x1b8>
            } else if (hs->post_content_len_left == 0) {
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006202:	3314      	adds	r3, #20
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <http_post_request+0x196>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800620a:	2241      	movs	r2, #65	; 0x41
 800620c:	2100      	movs	r1, #0
 800620e:	2000      	movs	r0, #0
 8006210:	f001 fe48 	bl	8007ea4 <pbuf_alloc>
 8006214:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8006216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006218:	68b8      	ldr	r0, [r7, #8]
 800621a:	f7ff feeb 	bl	8005ff4 <http_post_rxpbuf>
 800621e:	4603      	mov	r3, r0
 8006220:	e010      	b.n	8006244 <http_post_request+0x1b8>
            } else {
              return ERR_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e00e      	b.n	8006244 <http_post_request+0x1b8>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	490b      	ldr	r1, [pc, #44]	; (8006258 <http_post_request+0x1cc>)
 800622a:	68b8      	ldr	r0, [r7, #8]
 800622c:	f000 f996 	bl	800655c <http_find_file>
 8006230:	4603      	mov	r3, r0
 8006232:	e007      	b.n	8006244 <http_post_request+0x1b8>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8006234:	f06f 030f 	mvn.w	r3, #15
 8006238:	e004      	b.n	8006244 <http_post_request+0x1b8>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800623a:	f06f 030f 	mvn.w	r3, #15
 800623e:	e001      	b.n	8006244 <http_post_request+0x1b8>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8006240:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8006244:	4618      	mov	r0, r3
 8006246:	3738      	adds	r7, #56	; 0x38
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	08013930 	.word	0x08013930
 8006250:	080133bc 	.word	0x080133bc
 8006254:	080138a0 	.word	0x080138a0
 8006258:	200004c8 	.word	0x200004c8

0800625c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b092      	sub	sp, #72	; 0x48
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <http_parse_request+0x24>
 8006272:	4b87      	ldr	r3, [pc, #540]	; (8006490 <http_parse_request+0x234>)
 8006274:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8006278:	4986      	ldr	r1, [pc, #536]	; (8006494 <http_parse_request+0x238>)
 800627a:	4887      	ldr	r0, [pc, #540]	; (8006498 <http_parse_request+0x23c>)
 800627c:	f00b fac2 	bl	8011804 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <http_parse_request+0x38>
 8006286:	4b82      	ldr	r3, [pc, #520]	; (8006490 <http_parse_request+0x234>)
 8006288:	f240 72af 	movw	r2, #1967	; 0x7af
 800628c:	4983      	ldr	r1, [pc, #524]	; (800649c <http_parse_request+0x240>)
 800628e:	4882      	ldr	r0, [pc, #520]	; (8006498 <http_parse_request+0x23c>)
 8006290:	f00b fab8 	bl	8011804 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <http_parse_request+0x48>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80062a4:	f06f 0307 	mvn.w	r3, #7
 80062a8:	e0ed      	b.n	8006486 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	621a      	str	r2, [r3, #32]
 80062b8:	e005      	b.n	80062c6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f002 f999 	bl	80085f8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80062c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c8:	f002 f974 	bl	80085b4 <pbuf_ref>

  if (hs->req->next != NULL) {
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d012      	beq.n	80062fc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	891b      	ldrh	r3, [r3, #8]
 80062dc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bf28      	it	cs
 80062e4:	4613      	movcs	r3, r2
 80062e6:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6a18      	ldr	r0, [r3, #32]
 80062ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80062ee:	2300      	movs	r3, #0
 80062f0:	496b      	ldr	r1, [pc, #428]	; (80064a0 <http_parse_request+0x244>)
 80062f2:	f002 faa9 	bl	8008848 <pbuf_copy_partial>
    data = httpd_req_buf;
 80062f6:	4b6a      	ldr	r3, [pc, #424]	; (80064a0 <http_parse_request+0x244>)
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fa:	e005      	b.n	8006308 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	895b      	ldrh	r3, [r3, #10]
 8006306:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006308:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800630a:	2b06      	cmp	r3, #6
 800630c:	f240 80a1 	bls.w	8006452 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006310:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006312:	461a      	mov	r2, r3
 8006314:	4963      	ldr	r1, [pc, #396]	; (80064a4 <http_parse_request+0x248>)
 8006316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006318:	f000 fd44 	bl	8006da4 <lwip_strnstr>
 800631c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8096 	beq.w	8006452 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800632e:	2204      	movs	r2, #4
 8006330:	495d      	ldr	r1, [pc, #372]	; (80064a8 <http_parse_request+0x24c>)
 8006332:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006334:	f00b fb88 	bl	8011a48 <strncmp>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <http_parse_request+0xea>
        sp1 = data + 3;
 800633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006340:	3303      	adds	r3, #3
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006344:	e014      	b.n	8006370 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8006346:	2205      	movs	r2, #5
 8006348:	4958      	ldr	r1, [pc, #352]	; (80064ac <http_parse_request+0x250>)
 800634a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800634c:	f00b fb7c 	bl	8011a48 <strncmp>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d105      	bne.n	8006362 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8006356:	2301      	movs	r3, #1
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	3304      	adds	r3, #4
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006360:	e006      	b.n	8006370 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	3304      	adds	r3, #4
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800636a:	f06f 030f 	mvn.w	r3, #15
 800636e:	e08a      	b.n	8006486 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	b29b      	uxth	r3, r3
 800637a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	3301      	adds	r3, #1
 8006384:	8bfa      	ldrh	r2, [r7, #30]
 8006386:	494a      	ldr	r1, [pc, #296]	; (80064b0 <http_parse_request+0x254>)
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fd0b 	bl	8006da4 <lwip_strnstr>
 800638e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	3301      	adds	r3, #1
 800639a:	8bfa      	ldrh	r2, [r7, #30]
 800639c:	4941      	ldr	r1, [pc, #260]	; (80064a4 <http_parse_request+0x248>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fd00 	bl	8006da4 <lwip_strnstr>
 80063a4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80063a6:	2301      	movs	r3, #1
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d163      	bne.n	8006478 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	3301      	adds	r3, #1
 80063b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d048      	beq.n	8006452 <http_parse_request+0x1f6>
 80063c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d944      	bls.n	8006452 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80063c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063ca:	461a      	mov	r2, r3
 80063cc:	4939      	ldr	r1, [pc, #228]	; (80064b4 <http_parse_request+0x258>)
 80063ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063d0:	f000 fce8 	bl	8006da4 <lwip_strnstr>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03b      	beq.n	8006452 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	3301      	adds	r3, #1
 80063de:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80063e6:	8bbb      	ldrh	r3, [r7, #28]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4413      	add	r3, r2
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d026      	beq.n	8006444 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 80063fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	6978      	ldr	r0, [r7, #20]
 800640e:	f7ff fe3d 	bl	800608c <http_post_request>
 8006412:	4603      	mov	r3, r0
 8006414:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8006416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	2220      	movs	r2, #32
 8006422:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2220      	movs	r2, #32
 8006428:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800642a:	8bbb      	ldrh	r3, [r7, #28]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4413      	add	r3, r2
 8006430:	2220      	movs	r2, #32
 8006432:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8006434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006438:	f113 0f10 	cmn.w	r3, #16
 800643c:	d01e      	beq.n	800647c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800643e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006442:	e020      	b.n	8006486 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	69b9      	ldr	r1, [r7, #24]
 8006448:	68b8      	ldr	r0, [r7, #8]
 800644a:	f000 f887 	bl	800655c <http_find_file>
 800644e:	4603      	mov	r3, r0
 8006450:	e019      	b.n	8006486 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4618      	mov	r0, r3
 8006458:	f002 f894 	bl	8008584 <pbuf_clen>
 800645c:	4603      	mov	r3, r0
 800645e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	891b      	ldrh	r3, [r3, #8]
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646a:	d209      	bcs.n	8006480 <http_parse_request+0x224>
 800646c:	8a3b      	ldrh	r3, [r7, #16]
 800646e:	2b05      	cmp	r3, #5
 8006470:	d806      	bhi.n	8006480 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006472:	f06f 0304 	mvn.w	r3, #4
 8006476:	e006      	b.n	8006486 <http_parse_request+0x22a>
          goto badrequest;
 8006478:	bf00      	nop
 800647a:	e002      	b.n	8006482 <http_parse_request+0x226>
              goto badrequest;
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8006480:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006482:	f06f 030f 	mvn.w	r3, #15
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3740      	adds	r7, #64	; 0x40
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	080137ac 	.word	0x080137ac
 8006494:	08013938 	.word	0x08013938
 8006498:	080137f4 	.word	0x080137f4
 800649c:	0801381c 	.word	0x0801381c
 80064a0:	200000c8 	.word	0x200000c8
 80064a4:	080138a0 	.word	0x080138a0
 80064a8:	08013944 	.word	0x08013944
 80064ac:	0801394c 	.word	0x0801394c
 80064b0:	08013954 	.word	0x08013954
 80064b4:	08013930 	.word	0x08013930

080064b8 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d040      	beq.n	800654e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80064d0:	213f      	movs	r1, #63	; 0x3f
 80064d2:	6838      	ldr	r0, [r7, #0]
 80064d4:	f00b faa3 	bl	8011a1e <strchr>
 80064d8:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	613b      	str	r3, [r7, #16]
    ext = uri;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80064ee:	212e      	movs	r1, #46	; 0x2e
 80064f0:	6938      	ldr	r0, [r7, #16]
 80064f2:	f00b fa94 	bl	8011a1e <strchr>
 80064f6:	6138      	str	r0, [r7, #16]
 80064f8:	e009      	b.n	800650e <http_uri_is_ssi+0x56>
      ext = sub;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	617b      	str	r3, [r7, #20]
      sub++;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006504:	212e      	movs	r1, #46	; 0x2e
 8006506:	6938      	ldr	r0, [r7, #16]
 8006508:	f00b fa89 	bl	8011a1e <strchr>
 800650c:	6138      	str	r0, [r7, #16]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f2      	bne.n	80064fa <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e010      	b.n	800653c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800651a:	4a0f      	ldr	r2, [pc, #60]	; (8006558 <http_uri_is_ssi+0xa0>)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006522:	4619      	mov	r1, r3
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f000 fc73 	bl	8006e10 <lwip_stricmp>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	76fb      	strb	r3, [r7, #27]
        break;
 8006534:	e005      	b.n	8006542 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3301      	adds	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d9eb      	bls.n	800651a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <http_uri_is_ssi+0x96>
      *param = '?';
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	223f      	movs	r2, #63	; 0x3f
 800654c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800654e:	7efb      	ldrb	r3, [r7, #27]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08017de0 	.word	0x08017de0

0800655c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b093      	sub	sp, #76	; 0x4c
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f7f9 fe33 	bl	80001e4 <strlen>
 800657e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d072      	beq.n	800666c <http_find_file+0x110>
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	3b01      	subs	r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b2f      	cmp	r3, #47	; 0x2f
 8006592:	d16b      	bne.n	800666c <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006594:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006596:	4a80      	ldr	r2, [pc, #512]	; (8006798 <http_find_file+0x23c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d102      	bne.n	80065a2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d164      	bne.n	800666c <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	3b01      	subs	r3, #1
 80065a6:	2b3f      	cmp	r3, #63	; 0x3f
 80065a8:	bf28      	it	cs
 80065aa:	233f      	movcs	r3, #63	; 0x3f
 80065ac:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	4619      	mov	r1, r3
 80065ba:	4877      	ldr	r0, [pc, #476]	; (8006798 <http_find_file+0x23c>)
 80065bc:	f00b f848 	bl	8011650 <memcpy>
      http_uri_buf[copy_len] = 0;
 80065c0:	4a75      	ldr	r2, [pc, #468]	; (8006798 <http_find_file+0x23c>)
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ce:	e04a      	b.n	8006666 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d028      	beq.n	8006628 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80065dc:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01e      	beq.n	8006622 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80065e4:	4a6d      	ldr	r2, [pc, #436]	; (800679c <http_find_file+0x240>)
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7f9 fdf9 	bl	80001e4 <strlen>
 80065f2:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf28      	it	cs
 80065fc:	4613      	movcs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	4a65      	ldr	r2, [pc, #404]	; (8006798 <http_find_file+0x23c>)
 8006604:	1898      	adds	r0, r3, r2
 8006606:	4a65      	ldr	r2, [pc, #404]	; (800679c <http_find_file+0x240>)
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4619      	mov	r1, r3
 8006612:	f00b f81d 	bl	8011650 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4413      	add	r3, r2
 800661c:	4a5e      	ldr	r2, [pc, #376]	; (8006798 <http_find_file+0x23c>)
 800661e:	2100      	movs	r1, #0
 8006620:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <http_find_file+0x23c>)
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
 8006626:	e004      	b.n	8006632 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006628:	4a5c      	ldr	r2, [pc, #368]	; (800679c <http_find_file+0x240>)
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fb6e 	bl	8004d18 <fs_open>
 800663c:	4603      	mov	r3, r0
 800663e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8006640:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <http_find_file+0x104>
        uri = file_name;
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8006650:	4a52      	ldr	r2, [pc, #328]	; (800679c <http_find_file+0x240>)
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800665e:	e005      	b.n	800666c <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006662:	3301      	adds	r3, #1
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006668:	2b04      	cmp	r3, #4
 800666a:	d9b1      	bls.n	80065d0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	2b00      	cmp	r3, #0
 8006670:	d177      	bne.n	8006762 <http_find_file+0x206>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	213f      	movs	r1, #63	; 0x3f
 8006676:	4618      	mov	r0, r3
 8006678:	f00b f9d1 	bl	8011a1e <strchr>
 800667c:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
      params++;
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	3301      	adds	r3, #1
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8006690:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <http_find_file+0x244>)
 8006692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006696:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8006698:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <http_find_file+0x248>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d035      	beq.n	800670c <http_find_file+0x1b0>
 80066a0:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <http_find_file+0x24c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d031      	beq.n	800670c <http_find_file+0x1b0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80066a8:	2300      	movs	r3, #0
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
 80066ac:	e029      	b.n	8006702 <http_find_file+0x1a6>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <http_find_file+0x24c>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	f7f9 fd87 	bl	80001d0 <strcmp>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d119      	bne.n	80066fc <http_find_file+0x1a0>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80066c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7fe fcde 	bl	800508c <extract_uri_parameters>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <http_find_file+0x244>)
 80066d4:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80066d6:	4b34      	ldr	r3, [pc, #208]	; (80067a8 <http_find_file+0x24c>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	685c      	ldr	r4, [r3, #4]
 80066e2:	4b2f      	ldr	r3, [pc, #188]	; (80067a0 <http_find_file+0x244>)
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80066f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f4:	47a0      	blx	r4
 80066f6:	4603      	mov	r3, r0
 80066f8:	60bb      	str	r3, [r7, #8]
          break;
 80066fa:	e007      	b.n	800670c <http_find_file+0x1b0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	3301      	adds	r3, #1
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
 8006702:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <http_find_file+0x248>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006708:	429a      	cmp	r2, r3
 800670a:	dbd0      	blt.n	80066ae <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fb00 	bl	8004d18 <fs_open>
 8006718:	4603      	mov	r3, r0
 800671a:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800671c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <http_find_file+0x1ce>
      file = &hs->file_handle;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
 8006728:	e006      	b.n	8006738 <http_find_file+0x1dc>
    } else {
      file = http_get_404_file(hs, &uri);
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4619      	mov	r1, r3
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fc01 	bl	8005f38 <http_get_404_file>
 8006736:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <http_find_file+0x206>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	7c1b      	ldrb	r3, [r3, #16]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <http_find_file+0x1f6>
        tag_check = 1;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006750:	e007      	b.n	8006762 <http_find_file+0x206>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4619      	mov	r1, r3
 8006756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006758:	f7ff feae 	bl	80064b8 <http_uri_is_ssi>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <http_find_file+0x21a>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fbe2 	bl	8005f38 <http_get_404_file>
 8006774:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f80f 	bl	80067ac <http_init_file>
 800678e:	4603      	mov	r3, r0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3744      	adds	r7, #68	; 0x44
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}
 8006798:	200004c8 	.word	0x200004c8
 800679c:	08017df4 	.word	0x08017df4
 80067a0:	2000051c 	.word	0x2000051c
 80067a4:	20000518 	.word	0x20000518
 80067a8:	20000514 	.word	0x20000514

080067ac <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d06f      	beq.n	80068a0 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <http_init_file+0x2a>
 80067c8:	4b46      	ldr	r3, [pc, #280]	; (80068e4 <http_init_file+0x138>)
 80067ca:	f640 120b 	movw	r2, #2315	; 0x90b
 80067ce:	4946      	ldr	r1, [pc, #280]	; (80068e8 <http_init_file+0x13c>)
 80067d0:	4846      	ldr	r0, [pc, #280]	; (80068ec <http_init_file+0x140>)
 80067d2:	f00b f817 	bl	8011804 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80067d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01c      	beq.n	8006818 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80067de:	f7fe faf2 	bl	8004dc6 <http_ssi_state_alloc>
 80067e2:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <http_init_file+0x6c>
        ssi->tag_index = 0;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2200      	movs	r2, #0
 80067ee:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2be4 	strb.w	r2, [r3, #3044]	; 0xbe4
        ssi->parsed = file->data;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	461a      	mov	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	da06      	bge.n	800683c <http_init_file+0x90>
 800682e:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <http_init_file+0x138>)
 8006830:	f640 1234 	movw	r2, #2356	; 0x934
 8006834:	492e      	ldr	r1, [pc, #184]	; (80068f0 <http_init_file+0x144>)
 8006836:	482d      	ldr	r0, [pc, #180]	; (80068ec <http_init_file+0x140>)
 8006838:	f00a ffe4 	bl	8011804 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	461a      	mov	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d032      	beq.n	80068ba <http_init_file+0x10e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	7c1b      	ldrb	r3, [r3, #16]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02b      	beq.n	80068ba <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6998      	ldr	r0, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	461a      	mov	r2, r3
 800686c:	4921      	ldr	r1, [pc, #132]	; (80068f4 <http_init_file+0x148>)
 800686e:	f000 fa99 	bl	8006da4 <lwip_strnstr>
 8006872:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01f      	beq.n	80068ba <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
 800689e:	e00c      	b.n	80068ba <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d006      	beq.n	80068d0 <http_init_file+0x124>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	7c1b      	ldrb	r3, [r3, #16]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7fe fd02 	bl	80052dc <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	080137ac 	.word	0x080137ac
 80068e8:	08013958 	.word	0x08013958
 80068ec:	080137f4 	.word	0x080137f4
 80068f0:	0801396c 	.word	0x0801396c
 80068f4:	08013930 	.word	0x08013930

080068f8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <http_err+0x1c>
    http_state_free(hs);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7fe fad0 	bl	8004eb4 <http_state_free>
  }
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <http_sent+0x1c>
    return ERR_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e008      	b.n	800694a <http_sent+0x2e>
  }

  hs->retries = 0;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f7ff fa9a 	bl	8005e7c <http_send>

  return ERR_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006966:	2100      	movs	r1, #0
 8006968:	6838      	ldr	r0, [r7, #0]
 800696a:	f7fe fb73 	bl	8005054 <http_close_conn>
 800696e:	4603      	mov	r3, r0
 8006970:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e021      	b.n	80069ba <http_poll+0x68>
  } else {
    hs->retries++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800697c:	3301      	adds	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698c:	2b04      	cmp	r3, #4
 800698e:	d105      	bne.n	800699c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	6838      	ldr	r0, [r7, #0]
 8006994:	f7fe fb5e 	bl	8005054 <http_close_conn>
      return ERR_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e00e      	b.n	80069ba <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80069a4:	68f9      	ldr	r1, [r7, #12]
 80069a6:	6838      	ldr	r0, [r7, #0]
 80069a8:	f7ff fa68 	bl	8005e7c <http_send>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f007 f8cc 	bl	800db50 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80069d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <http_recv+0x26>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <http_recv+0x26>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d111      	bne.n	8006a0e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	891b      	ldrh	r3, [r3, #8]
 80069f4:	4619      	mov	r1, r3
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f002 fc9e 	bl	8009338 <tcp_recved>
      pbuf_free(p);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fd39 	bl	8008474 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006a02:	6979      	ldr	r1, [r7, #20]
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	f7fe fb25 	bl	8005054 <http_close_conn>
    return ERR_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e078      	b.n	8006b00 <http_recv+0x13c>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	891b      	ldrh	r3, [r3, #8]
 8006a12:	4619      	mov	r1, r3
 8006a14:	68b8      	ldr	r0, [r7, #8]
 8006a16:	f002 fc8f 	bl	8009338 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006a20:	3314      	adds	r3, #20
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d014      	beq.n	8006a52 <http_recv+0x8e>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7ff fade 	bl	8005ff4 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006a3e:	3314      	adds	r3, #20
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <http_recv+0x8a>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8006a46:	6979      	ldr	r1, [r7, #20]
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f7ff fa17 	bl	8005e7c <http_send>
    }
    return ERR_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e056      	b.n	8006b00 <http_recv+0x13c>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d14e      	bne.n	8006af8 <http_recv+0x134>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	6979      	ldr	r1, [r7, #20]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fbfc 	bl	800625c <http_parse_request>
 8006a64:	4603      	mov	r3, r0
 8006a66:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d015      	beq.n	8006a9c <http_recv+0xd8>
 8006a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a74:	f113 0f05 	cmn.w	r3, #5
 8006a78:	d010      	beq.n	8006a9c <http_recv+0xd8>
 8006a7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a7e:	f113 0f10 	cmn.w	r3, #16
 8006a82:	d00b      	beq.n	8006a9c <http_recv+0xd8>
 8006a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a88:	f113 0f08 	cmn.w	r3, #8
 8006a8c:	d006      	beq.n	8006a9c <http_recv+0xd8>
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <http_recv+0x144>)
 8006a90:	f640 2204 	movw	r2, #2564	; 0xa04
 8006a94:	491d      	ldr	r1, [pc, #116]	; (8006b0c <http_recv+0x148>)
 8006a96:	481e      	ldr	r0, [pc, #120]	; (8006b10 <http_recv+0x14c>)
 8006a98:	f00a feb4 	bl	8011804 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006aa0:	f113 0f05 	cmn.w	r3, #5
 8006aa4:	d00b      	beq.n	8006abe <http_recv+0xfa>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <http_recv+0xfa>
          pbuf_free(hs->req);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fcde 	bl	8008474 <pbuf_free>
          hs->req = NULL;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2200      	movs	r2, #0
 8006abc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fcd8 	bl	8008474 <pbuf_free>
      if (parsed == ERR_OK) {
 8006ac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <http_recv+0x120>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d111      	bne.n	8006afe <http_recv+0x13a>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006ada:	6979      	ldr	r1, [r7, #20]
 8006adc:	68b8      	ldr	r0, [r7, #8]
 8006ade:	f7ff f9cd 	bl	8005e7c <http_send>
 8006ae2:	e00c      	b.n	8006afe <http_recv+0x13a>
        }
      } else if (parsed == ERR_ARG) {
 8006ae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ae8:	f113 0f10 	cmn.w	r3, #16
 8006aec:	d107      	bne.n	8006afe <http_recv+0x13a>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006aee:	6979      	ldr	r1, [r7, #20]
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f7fe faaf 	bl	8005054 <http_close_conn>
 8006af6:	e002      	b.n	8006afe <http_recv+0x13a>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fcbb 	bl	8008474 <pbuf_free>
    }
  }
  return ERR_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	080137ac 	.word	0x080137ac
 8006b0c:	0801398c 	.word	0x0801398c
 8006b10:	080137f4 	.word	0x080137f4

08006b14 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <http_accept+0x1c>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <http_accept+0x22>
    return ERR_VAL;
 8006b30:	f06f 0305 	mvn.w	r3, #5
 8006b34:	e025      	b.n	8006b82 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006b36:	2101      	movs	r1, #1
 8006b38:	68b8      	ldr	r0, [r7, #8]
 8006b3a:	f003 f8e1 	bl	8009d00 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006b3e:	f7fe f97a 	bl	8004e36 <http_state_alloc>
 8006b42:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4e:	e018      	b.n	8006b82 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006b56:	6979      	ldr	r1, [r7, #20]
 8006b58:	68b8      	ldr	r0, [r7, #8]
 8006b5a:	f003 fad1 	bl	800a100 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006b5e:	490b      	ldr	r1, [pc, #44]	; (8006b8c <http_accept+0x78>)
 8006b60:	68b8      	ldr	r0, [r7, #8]
 8006b62:	f003 fadf 	bl	800a124 <tcp_recv>
  altcp_err(pcb, http_err);
 8006b66:	490a      	ldr	r1, [pc, #40]	; (8006b90 <http_accept+0x7c>)
 8006b68:	68b8      	ldr	r0, [r7, #8]
 8006b6a:	f003 fb1f 	bl	800a1ac <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006b6e:	2204      	movs	r2, #4
 8006b70:	4908      	ldr	r1, [pc, #32]	; (8006b94 <http_accept+0x80>)
 8006b72:	68b8      	ldr	r0, [r7, #8]
 8006b74:	f003 fb54 	bl	800a220 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006b78:	4907      	ldr	r1, [pc, #28]	; (8006b98 <http_accept+0x84>)
 8006b7a:	68b8      	ldr	r0, [r7, #8]
 8006b7c:	f003 faf4 	bl	800a168 <tcp_sent>

  return ERR_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	080069c5 	.word	0x080069c5
 8006b90:	080068f9 	.word	0x080068f9
 8006b94:	08006953 	.word	0x08006953
 8006b98:	0800691d 	.word	0x0800691d

08006b9c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d029      	beq.n	8006c02 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006bae:	2101      	movs	r1, #1
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f003 f8a5 	bl	8009d00 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4914      	ldr	r1, [pc, #80]	; (8006c0c <httpd_init_pcb+0x70>)
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 f9ed 	bl	8008f9c <tcp_bind>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <httpd_init_pcb+0x40>
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <httpd_init_pcb+0x74>)
 8006bd0:	f640 2257 	movw	r2, #2647	; 0xa57
 8006bd4:	490f      	ldr	r1, [pc, #60]	; (8006c14 <httpd_init_pcb+0x78>)
 8006bd6:	4810      	ldr	r0, [pc, #64]	; (8006c18 <httpd_init_pcb+0x7c>)
 8006bd8:	f00a fe14 	bl	8011804 <iprintf>
    pcb = altcp_listen(pcb);
 8006bdc:	21ff      	movs	r1, #255	; 0xff
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 fa94 	bl	800910c <tcp_listen_with_backlog>
 8006be4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <httpd_init_pcb+0x5e>
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <httpd_init_pcb+0x74>)
 8006bee:	f640 2259 	movw	r2, #2649	; 0xa59
 8006bf2:	490a      	ldr	r1, [pc, #40]	; (8006c1c <httpd_init_pcb+0x80>)
 8006bf4:	4808      	ldr	r0, [pc, #32]	; (8006c18 <httpd_init_pcb+0x7c>)
 8006bf6:	f00a fe05 	bl	8011804 <iprintf>
    altcp_accept(pcb, http_accept);
 8006bfa:	4909      	ldr	r1, [pc, #36]	; (8006c20 <httpd_init_pcb+0x84>)
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f003 faf7 	bl	800a1f0 <tcp_accept>
  }
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08017efc 	.word	0x08017efc
 8006c10:	080137ac 	.word	0x080137ac
 8006c14:	080139b8 	.word	0x080139b8
 8006c18:	080137f4 	.word	0x080137f4
 8006c1c:	080139d4 	.word	0x080139d4
 8006c20:	08006b15 	.word	0x08006b15

08006c24 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006c2a:	202e      	movs	r0, #46	; 0x2e
 8006c2c:	f003 fa5a 	bl	800a0e4 <tcp_new_ip_type>
 8006c30:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <httpd_init+0x22>
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <httpd_init+0x34>)
 8006c3a:	f640 2272 	movw	r2, #2674	; 0xa72
 8006c3e:	4907      	ldr	r1, [pc, #28]	; (8006c5c <httpd_init+0x38>)
 8006c40:	4807      	ldr	r0, [pc, #28]	; (8006c60 <httpd_init+0x3c>)
 8006c42:	f00a fddf 	bl	8011804 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006c46:	2150      	movs	r1, #80	; 0x50
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ffa7 	bl	8006b9c <httpd_init_pcb>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	080137ac 	.word	0x080137ac
 8006c5c:	080139f4 	.word	0x080139f4
 8006c60:	080137f4 	.word	0x080137f4

08006c64 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <http_set_ssi_handler+0x20>
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <http_set_ssi_handler+0x64>)
 8006c78:	f640 2297 	movw	r2, #2711	; 0xa97
 8006c7c:	4913      	ldr	r1, [pc, #76]	; (8006ccc <http_set_ssi_handler+0x68>)
 8006c7e:	4814      	ldr	r0, [pc, #80]	; (8006cd0 <http_set_ssi_handler+0x6c>)
 8006c80:	f00a fdc0 	bl	8011804 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <http_set_ssi_handler+0x70>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <http_set_ssi_handler+0x3a>
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <http_set_ssi_handler+0x64>)
 8006c92:	f640 229e 	movw	r2, #2718	; 0xa9e
 8006c96:	4910      	ldr	r1, [pc, #64]	; (8006cd8 <http_set_ssi_handler+0x74>)
 8006c98:	480d      	ldr	r0, [pc, #52]	; (8006cd0 <http_set_ssi_handler+0x6c>)
 8006c9a:	f00a fdb3 	bl	8011804 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc06      	bgt.n	8006cb2 <http_set_ssi_handler+0x4e>
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <http_set_ssi_handler+0x64>)
 8006ca6:	f640 229f 	movw	r2, #2719	; 0xa9f
 8006caa:	490c      	ldr	r1, [pc, #48]	; (8006cdc <http_set_ssi_handler+0x78>)
 8006cac:	4808      	ldr	r0, [pc, #32]	; (8006cd0 <http_set_ssi_handler+0x6c>)
 8006cae:	f00a fda9 	bl	8011804 <iprintf>

  httpd_tags = tags;
 8006cb2:	4a0b      	ldr	r2, [pc, #44]	; (8006ce0 <http_set_ssi_handler+0x7c>)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <http_set_ssi_handler+0x80>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	080137ac 	.word	0x080137ac
 8006ccc:	08013a10 	.word	0x08013a10
 8006cd0:	080137f4 	.word	0x080137f4
 8006cd4:	20000508 	.word	0x20000508
 8006cd8:	08013a28 	.word	0x08013a28
 8006cdc:	08013a38 	.word	0x08013a38
 8006ce0:	20000510 	.word	0x20000510
 8006ce4:	2000050c 	.word	0x2000050c

08006ce8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <http_set_cgi_handlers+0x1e>
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <http_set_cgi_handlers+0x48>)
 8006cfa:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006cfe:	490d      	ldr	r1, [pc, #52]	; (8006d34 <http_set_cgi_handlers+0x4c>)
 8006d00:	480d      	ldr	r0, [pc, #52]	; (8006d38 <http_set_cgi_handlers+0x50>)
 8006d02:	f00a fd7f 	bl	8011804 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dc06      	bgt.n	8006d1a <http_set_cgi_handlers+0x32>
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <http_set_cgi_handlers+0x48>)
 8006d0e:	f640 22b3 	movw	r2, #2739	; 0xab3
 8006d12:	490a      	ldr	r1, [pc, #40]	; (8006d3c <http_set_cgi_handlers+0x54>)
 8006d14:	4808      	ldr	r0, [pc, #32]	; (8006d38 <http_set_cgi_handlers+0x50>)
 8006d16:	f00a fd75 	bl	8011804 <iprintf>

  httpd_cgis = cgis;
 8006d1a:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <http_set_cgi_handlers+0x58>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006d20:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <http_set_cgi_handlers+0x5c>)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6013      	str	r3, [r2, #0]
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	080137ac 	.word	0x080137ac
 8006d34:	08013a50 	.word	0x08013a50
 8006d38:	080137f4 	.word	0x080137f4
 8006d3c:	08013a60 	.word	0x08013a60
 8006d40:	20000514 	.word	0x20000514
 8006d44:	20000518 	.word	0x20000518

08006d48 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	b21a      	sxth	r2, r3
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	4313      	orrs	r3, r2
 8006d62:	b21b      	sxth	r3, r3
 8006d64:	b29b      	uxth	r3, r3
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	061a      	lsls	r2, r3, #24
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0e1b      	lsrs	r3, r3, #24
 8006d96:	4313      	orrs	r3, r2
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006db0:	68b8      	ldr	r0, [r7, #8]
 8006db2:	f7f9 fa17 	bl	80001e4 <strlen>
 8006db6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	e022      	b.n	8006e08 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e012      	b.n	8006dee <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d109      	bne.n	8006de8 <lwip_strnstr+0x44>
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	f00a fe35 	bl	8011a48 <strncmp>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	e00f      	b.n	8006e08 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3301      	adds	r3, #1
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <lwip_strnstr+0x62>
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68f9      	ldr	r1, [r7, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	440b      	add	r3, r1
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d9e0      	bls.n	8006dc8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	603a      	str	r2, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006e2e:	7bfa      	ldrb	r2, [r7, #15]
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d016      	beq.n	8006e64 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	f043 0320 	orr.w	r3, r3, #32
 8006e3c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006e3e:	7b7b      	ldrb	r3, [r7, #13]
 8006e40:	2b60      	cmp	r3, #96	; 0x60
 8006e42:	d90c      	bls.n	8006e5e <lwip_stricmp+0x4e>
 8006e44:	7b7b      	ldrb	r3, [r7, #13]
 8006e46:	2b7a      	cmp	r3, #122	; 0x7a
 8006e48:	d809      	bhi.n	8006e5e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	f043 0320 	orr.w	r3, r3, #32
 8006e50:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8006e52:	7b7a      	ldrb	r2, [r7, #13]
 8006e54:	7b3b      	ldrb	r3, [r7, #12]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d003      	beq.n	8006e62 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e006      	b.n	8006e6c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e004      	b.n	8006e6c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006e62:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1d7      	bne.n	8006e1a <lwip_stricmp+0xa>
  return 0;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  char *res = result;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfb8      	it	lt
 8006e98:	425b      	neglt	r3, r3
 8006e9a:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d806      	bhi.n	8006eb0 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d154      	bne.n	8006f52 <lwip_itoa+0xda>
      *result = 0;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
    }
    return;
 8006eae:	e050      	b.n	8006f52 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da04      	bge.n	8006ec0 <lwip_itoa+0x48>
    *res++ = '-';
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	61fa      	str	r2, [r7, #28]
 8006ebc:	222d      	movs	r2, #45	; 0x2d
 8006ebe:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8006ec6:	e01c      	b.n	8006f02 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <lwip_itoa+0xe4>)
 8006ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8006ed0:	1099      	asrs	r1, r3, #2
 8006ed2:	17d3      	asrs	r3, r2, #31
 8006ed4:	1ac9      	subs	r1, r1, r3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	1ad1      	subs	r1, r2, r3
 8006ee0:	b2cb      	uxtb	r3, r1
 8006ee2:	3330      	adds	r3, #48	; 0x30
 8006ee4:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	7cfa      	ldrb	r2, [r7, #19]
 8006ef0:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <lwip_itoa+0xe4>)
 8006ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8006efa:	1092      	asrs	r2, r2, #2
 8006efc:	17db      	asrs	r3, r3, #31
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <lwip_itoa+0x98>
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d8db      	bhi.n	8006ec8 <lwip_itoa+0x50>
  }
  if (n) {
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
    return;
 8006f1c:	e01a      	b.n	8006f54 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	61fa      	str	r2, [r7, #28]
 8006f2c:	2230      	movs	r2, #48	; 0x30
 8006f2e:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	61fa      	str	r2, [r7, #28]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
    return;
 8006f3a:	e00b      	b.n	8006f54 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	441a      	add	r2, r3
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	69f8      	ldr	r0, [r7, #28]
 8006f4c:	f00a fb8e 	bl	801166c <memmove>
 8006f50:	e000      	b.n	8006f54 <lwip_itoa+0xdc>
    return;
 8006f52:	bf00      	nop
}
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	66666667 	.word	0x66666667

08006f60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006f6a:	f000 f8d5 	bl	8007118 <mem_init>
  memp_init();
 8006f6e:	f000 fbdb 	bl	8007728 <memp_init>
  pbuf_init();
  netif_init();
 8006f72:	f000 fc93 	bl	800789c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006f76:	f007 feab 	bl	800ecd0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006f7a:	f001 fd09 	bl	8008990 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006f7e:	f007 fe1d 	bl	800ebbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <ptr_to_mem+0x20>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	4413      	add	r3, r2
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000520 	.word	0x20000520

08006fb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <mem_to_ptr+0x20>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	b29b      	uxth	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000520 	.word	0x20000520

08006fd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006fd4:	b590      	push	{r4, r7, lr}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006fdc:	4b45      	ldr	r3, [pc, #276]	; (80070f4 <plug_holes+0x120>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d206      	bcs.n	8006ff4 <plug_holes+0x20>
 8006fe6:	4b44      	ldr	r3, [pc, #272]	; (80070f8 <plug_holes+0x124>)
 8006fe8:	f240 12df 	movw	r2, #479	; 0x1df
 8006fec:	4943      	ldr	r1, [pc, #268]	; (80070fc <plug_holes+0x128>)
 8006fee:	4844      	ldr	r0, [pc, #272]	; (8007100 <plug_holes+0x12c>)
 8006ff0:	f00a fc08 	bl	8011804 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ff4:	4b43      	ldr	r3, [pc, #268]	; (8007104 <plug_holes+0x130>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d306      	bcc.n	800700c <plug_holes+0x38>
 8006ffe:	4b3e      	ldr	r3, [pc, #248]	; (80070f8 <plug_holes+0x124>)
 8007000:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007004:	4940      	ldr	r1, [pc, #256]	; (8007108 <plug_holes+0x134>)
 8007006:	483e      	ldr	r0, [pc, #248]	; (8007100 <plug_holes+0x12c>)
 8007008:	f00a fbfc 	bl	8011804 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d006      	beq.n	8007022 <plug_holes+0x4e>
 8007014:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <plug_holes+0x124>)
 8007016:	f240 12e1 	movw	r2, #481	; 0x1e1
 800701a:	493c      	ldr	r1, [pc, #240]	; (800710c <plug_holes+0x138>)
 800701c:	4838      	ldr	r0, [pc, #224]	; (8007100 <plug_holes+0x12c>)
 800701e:	f00a fbf1 	bl	8011804 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800702a:	d906      	bls.n	800703a <plug_holes+0x66>
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <plug_holes+0x124>)
 800702e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007032:	4937      	ldr	r1, [pc, #220]	; (8007110 <plug_holes+0x13c>)
 8007034:	4832      	ldr	r0, [pc, #200]	; (8007100 <plug_holes+0x12c>)
 8007036:	f00a fbe5 	bl	8011804 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff ffa4 	bl	8006f8c <ptr_to_mem>
 8007044:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	429a      	cmp	r2, r3
 800704c:	d024      	beq.n	8007098 <plug_holes+0xc4>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d120      	bne.n	8007098 <plug_holes+0xc4>
 8007056:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <plug_holes+0x130>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d01b      	beq.n	8007098 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007060:	4b2c      	ldr	r3, [pc, #176]	; (8007114 <plug_holes+0x140>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d102      	bne.n	8007070 <plug_holes+0x9c>
      lfree = mem;
 800706a:	4a2a      	ldr	r2, [pc, #168]	; (8007114 <plug_holes+0x140>)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	881a      	ldrh	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007080:	d00a      	beq.n	8007098 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff ff80 	bl	8006f8c <ptr_to_mem>
 800708c:	4604      	mov	r4, r0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff8e 	bl	8006fb0 <mem_to_ptr>
 8007094:	4603      	mov	r3, r0
 8007096:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff ff75 	bl	8006f8c <ptr_to_mem>
 80070a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d01f      	beq.n	80070ec <plug_holes+0x118>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11b      	bne.n	80070ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80070b4:	4b17      	ldr	r3, [pc, #92]	; (8007114 <plug_holes+0x140>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d102      	bne.n	80070c4 <plug_holes+0xf0>
      lfree = pmem;
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <plug_holes+0x140>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070d4:	d00a      	beq.n	80070ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff ff56 	bl	8006f8c <ptr_to_mem>
 80070e0:	4604      	mov	r4, r0
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7ff ff64 	bl	8006fb0 <mem_to_ptr>
 80070e8:	4603      	mov	r3, r0
 80070ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd90      	pop	{r4, r7, pc}
 80070f4:	20000520 	.word	0x20000520
 80070f8:	08013a7c 	.word	0x08013a7c
 80070fc:	08013aac 	.word	0x08013aac
 8007100:	08013ac4 	.word	0x08013ac4
 8007104:	20000524 	.word	0x20000524
 8007108:	08013aec 	.word	0x08013aec
 800710c:	08013b08 	.word	0x08013b08
 8007110:	08013b24 	.word	0x08013b24
 8007114:	20000528 	.word	0x20000528

08007118 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <mem_init+0x68>)
 8007120:	3303      	adds	r3, #3
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	461a      	mov	r2, r3
 8007128:	4b16      	ldr	r3, [pc, #88]	; (8007184 <mem_init+0x6c>)
 800712a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800712c:	4b15      	ldr	r3, [pc, #84]	; (8007184 <mem_init+0x6c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007138:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007146:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800714a:	f7ff ff1f 	bl	8006f8c <ptr_to_mem>
 800714e:	4603      	mov	r3, r0
 8007150:	4a0d      	ldr	r2, [pc, #52]	; (8007188 <mem_init+0x70>)
 8007152:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <mem_init+0x70>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <mem_init+0x70>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007164:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007166:	4b08      	ldr	r3, [pc, #32]	; (8007188 <mem_init+0x70>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800716e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <mem_init+0x6c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <mem_init+0x74>)
 8007176:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000a078 	.word	0x2000a078
 8007184:	20000520 	.word	0x20000520
 8007188:	20000524 	.word	0x20000524
 800718c:	20000528 	.word	0x20000528

08007190 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff09 	bl	8006fb0 <mem_to_ptr>
 800719e:	4603      	mov	r3, r0
 80071a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fef0 	bl	8006f8c <ptr_to_mem>
 80071ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff feea 	bl	8006f8c <ptr_to_mem>
 80071b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80071c2:	d818      	bhi.n	80071f6 <mem_link_valid+0x66>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80071cc:	d813      	bhi.n	80071f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071d2:	8afa      	ldrh	r2, [r7, #22]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d004      	beq.n	80071e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	8afa      	ldrh	r2, [r7, #22]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d109      	bne.n	80071f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <mem_link_valid+0x74>)
 80071e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d006      	beq.n	80071fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	8afa      	ldrh	r2, [r7, #22]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d001      	beq.n	80071fa <mem_link_valid+0x6a>
    return 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <mem_link_valid+0x6c>
  }
  return 1;
 80071fa:	2301      	movs	r3, #1
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000524 	.word	0x20000524

08007208 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d04c      	beq.n	80072b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <mem_free+0xb0>)
 8007222:	f240 2273 	movw	r2, #627	; 0x273
 8007226:	4925      	ldr	r1, [pc, #148]	; (80072bc <mem_free+0xb4>)
 8007228:	4825      	ldr	r0, [pc, #148]	; (80072c0 <mem_free+0xb8>)
 800722a:	f00a faeb 	bl	8011804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800722e:	e040      	b.n	80072b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3b08      	subs	r3, #8
 8007234:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007236:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <mem_free+0xbc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d306      	bcc.n	800724e <mem_free+0x46>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 020c 	add.w	r2, r3, #12
 8007246:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <mem_free+0xc0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d907      	bls.n	800725e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <mem_free+0xb0>)
 8007250:	f240 227f 	movw	r2, #639	; 0x27f
 8007254:	491d      	ldr	r1, [pc, #116]	; (80072cc <mem_free+0xc4>)
 8007256:	481a      	ldr	r0, [pc, #104]	; (80072c0 <mem_free+0xb8>)
 8007258:	f00a fad4 	bl	8011804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800725c:	e029      	b.n	80072b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d107      	bne.n	8007276 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <mem_free+0xb0>)
 8007268:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800726c:	4918      	ldr	r1, [pc, #96]	; (80072d0 <mem_free+0xc8>)
 800726e:	4814      	ldr	r0, [pc, #80]	; (80072c0 <mem_free+0xb8>)
 8007270:	f00a fac8 	bl	8011804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007274:	e01d      	b.n	80072b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7ff ff8a 	bl	8007190 <mem_link_valid>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <mem_free+0xb0>)
 8007284:	f240 2295 	movw	r2, #661	; 0x295
 8007288:	4912      	ldr	r1, [pc, #72]	; (80072d4 <mem_free+0xcc>)
 800728a:	480d      	ldr	r0, [pc, #52]	; (80072c0 <mem_free+0xb8>)
 800728c:	f00a faba 	bl	8011804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007290:	e00f      	b.n	80072b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <mem_free+0xd0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d202      	bcs.n	80072a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80072a2:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <mem_free+0xd0>)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fe93 	bl	8006fd4 <plug_holes>
 80072ae:	e000      	b.n	80072b2 <mem_free+0xaa>
    return;
 80072b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08013a7c 	.word	0x08013a7c
 80072bc:	08013b50 	.word	0x08013b50
 80072c0:	08013ac4 	.word	0x08013ac4
 80072c4:	20000520 	.word	0x20000520
 80072c8:	20000524 	.word	0x20000524
 80072cc:	08013b74 	.word	0x08013b74
 80072d0:	08013b90 	.word	0x08013b90
 80072d4:	08013bb8 	.word	0x08013bb8
 80072d8:	20000528 	.word	0x20000528

080072dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80072e8:	887b      	ldrh	r3, [r7, #2]
 80072ea:	3303      	adds	r3, #3
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80072f4:	8bfb      	ldrh	r3, [r7, #30]
 80072f6:	2b0b      	cmp	r3, #11
 80072f8:	d801      	bhi.n	80072fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80072fa:	230c      	movs	r3, #12
 80072fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80072fe:	8bfb      	ldrh	r3, [r7, #30]
 8007300:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007304:	d803      	bhi.n	800730e <mem_trim+0x32>
 8007306:	8bfa      	ldrh	r2, [r7, #30]
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	429a      	cmp	r2, r3
 800730c:	d201      	bcs.n	8007312 <mem_trim+0x36>
    return NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	e0cc      	b.n	80074ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007312:	4b68      	ldr	r3, [pc, #416]	; (80074b4 <mem_trim+0x1d8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	429a      	cmp	r2, r3
 800731a:	d304      	bcc.n	8007326 <mem_trim+0x4a>
 800731c:	4b66      	ldr	r3, [pc, #408]	; (80074b8 <mem_trim+0x1dc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d306      	bcc.n	8007334 <mem_trim+0x58>
 8007326:	4b65      	ldr	r3, [pc, #404]	; (80074bc <mem_trim+0x1e0>)
 8007328:	f240 22d1 	movw	r2, #721	; 0x2d1
 800732c:	4964      	ldr	r1, [pc, #400]	; (80074c0 <mem_trim+0x1e4>)
 800732e:	4865      	ldr	r0, [pc, #404]	; (80074c4 <mem_trim+0x1e8>)
 8007330:	f00a fa68 	bl	8011804 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007334:	4b5f      	ldr	r3, [pc, #380]	; (80074b4 <mem_trim+0x1d8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d304      	bcc.n	8007348 <mem_trim+0x6c>
 800733e:	4b5e      	ldr	r3, [pc, #376]	; (80074b8 <mem_trim+0x1dc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d301      	bcc.n	800734c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	e0af      	b.n	80074ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b08      	subs	r3, #8
 8007350:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f7ff fe2c 	bl	8006fb0 <mem_to_ptr>
 8007358:	4603      	mov	r3, r0
 800735a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	8afb      	ldrh	r3, [r7, #22]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b08      	subs	r3, #8
 8007368:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800736a:	8bfa      	ldrh	r2, [r7, #30]
 800736c:	8abb      	ldrh	r3, [r7, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	d906      	bls.n	8007380 <mem_trim+0xa4>
 8007372:	4b52      	ldr	r3, [pc, #328]	; (80074bc <mem_trim+0x1e0>)
 8007374:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007378:	4953      	ldr	r1, [pc, #332]	; (80074c8 <mem_trim+0x1ec>)
 800737a:	4852      	ldr	r0, [pc, #328]	; (80074c4 <mem_trim+0x1e8>)
 800737c:	f00a fa42 	bl	8011804 <iprintf>
  if (newsize > size) {
 8007380:	8bfa      	ldrh	r2, [r7, #30]
 8007382:	8abb      	ldrh	r3, [r7, #20]
 8007384:	429a      	cmp	r2, r3
 8007386:	d901      	bls.n	800738c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	e08f      	b.n	80074ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800738c:	8bfa      	ldrh	r2, [r7, #30]
 800738e:	8abb      	ldrh	r3, [r7, #20]
 8007390:	429a      	cmp	r2, r3
 8007392:	d101      	bne.n	8007398 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	e089      	b.n	80074ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fdf5 	bl	8006f8c <ptr_to_mem>
 80073a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	791b      	ldrb	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d13f      	bne.n	800742c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073b4:	d106      	bne.n	80073c4 <mem_trim+0xe8>
 80073b6:	4b41      	ldr	r3, [pc, #260]	; (80074bc <mem_trim+0x1e0>)
 80073b8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80073bc:	4943      	ldr	r1, [pc, #268]	; (80074cc <mem_trim+0x1f0>)
 80073be:	4841      	ldr	r0, [pc, #260]	; (80074c4 <mem_trim+0x1e8>)
 80073c0:	f00a fa20 	bl	8011804 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	8bfb      	ldrh	r3, [r7, #30]
 80073ce:	4413      	add	r3, r2
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3308      	adds	r3, #8
 80073d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80073d6:	4b3e      	ldr	r3, [pc, #248]	; (80074d0 <mem_trim+0x1f4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d106      	bne.n	80073ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fdd2 	bl	8006f8c <ptr_to_mem>
 80073e8:	4603      	mov	r3, r0
 80073ea:	4a39      	ldr	r2, [pc, #228]	; (80074d0 <mem_trim+0x1f4>)
 80073ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80073ee:	89fb      	ldrh	r3, [r7, #14]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fdcb 	bl	8006f8c <ptr_to_mem>
 80073f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2200      	movs	r2, #0
 80073fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	89ba      	ldrh	r2, [r7, #12]
 8007402:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	8afa      	ldrh	r2, [r7, #22]
 8007408:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	89fa      	ldrh	r2, [r7, #14]
 800740e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007418:	d047      	beq.n	80074aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fdb4 	bl	8006f8c <ptr_to_mem>
 8007424:	4602      	mov	r2, r0
 8007426:	89fb      	ldrh	r3, [r7, #14]
 8007428:	8053      	strh	r3, [r2, #2]
 800742a:	e03e      	b.n	80074aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800742c:	8bfb      	ldrh	r3, [r7, #30]
 800742e:	f103 0214 	add.w	r2, r3, #20
 8007432:	8abb      	ldrh	r3, [r7, #20]
 8007434:	429a      	cmp	r2, r3
 8007436:	d838      	bhi.n	80074aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007438:	8afa      	ldrh	r2, [r7, #22]
 800743a:	8bfb      	ldrh	r3, [r7, #30]
 800743c:	4413      	add	r3, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	3308      	adds	r3, #8
 8007442:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800744c:	d106      	bne.n	800745c <mem_trim+0x180>
 800744e:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <mem_trim+0x1e0>)
 8007450:	f240 3216 	movw	r2, #790	; 0x316
 8007454:	491d      	ldr	r1, [pc, #116]	; (80074cc <mem_trim+0x1f0>)
 8007456:	481b      	ldr	r0, [pc, #108]	; (80074c4 <mem_trim+0x1e8>)
 8007458:	f00a f9d4 	bl	8011804 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fd94 	bl	8006f8c <ptr_to_mem>
 8007464:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007466:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <mem_trim+0x1f4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	429a      	cmp	r2, r3
 800746e:	d202      	bcs.n	8007476 <mem_trim+0x19a>
      lfree = mem2;
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <mem_trim+0x1f4>)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2200      	movs	r2, #0
 800747a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	881a      	ldrh	r2, [r3, #0]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	8afa      	ldrh	r2, [r7, #22]
 8007488:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	89fa      	ldrh	r2, [r7, #14]
 800748e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007498:	d007      	beq.n	80074aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fd74 	bl	8006f8c <ptr_to_mem>
 80074a4:	4602      	mov	r2, r0
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80074aa:	687b      	ldr	r3, [r7, #4]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3720      	adds	r7, #32
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000520 	.word	0x20000520
 80074b8:	20000524 	.word	0x20000524
 80074bc:	08013a7c 	.word	0x08013a7c
 80074c0:	08013bec 	.word	0x08013bec
 80074c4:	08013ac4 	.word	0x08013ac4
 80074c8:	08013c04 	.word	0x08013c04
 80074cc:	08013c24 	.word	0x08013c24
 80074d0:	20000528 	.word	0x20000528

080074d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <mem_malloc+0x14>
    return NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e0d9      	b.n	800769c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	3303      	adds	r3, #3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80074f4:	8bbb      	ldrh	r3, [r7, #28]
 80074f6:	2b0b      	cmp	r3, #11
 80074f8:	d801      	bhi.n	80074fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80074fa:	230c      	movs	r3, #12
 80074fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80074fe:	8bbb      	ldrh	r3, [r7, #28]
 8007500:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007504:	d803      	bhi.n	800750e <mem_malloc+0x3a>
 8007506:	8bba      	ldrh	r2, [r7, #28]
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	429a      	cmp	r2, r3
 800750c:	d201      	bcs.n	8007512 <mem_malloc+0x3e>
    return NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	e0c4      	b.n	800769c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007512:	4b64      	ldr	r3, [pc, #400]	; (80076a4 <mem_malloc+0x1d0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fd4a 	bl	8006fb0 <mem_to_ptr>
 800751c:	4603      	mov	r3, r0
 800751e:	83fb      	strh	r3, [r7, #30]
 8007520:	e0b4      	b.n	800768c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007522:	8bfb      	ldrh	r3, [r7, #30]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fd31 	bl	8006f8c <ptr_to_mem>
 800752a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	791b      	ldrb	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f040 80a4 	bne.w	800767e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	8bfb      	ldrh	r3, [r7, #30]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f1a3 0208 	sub.w	r2, r3, #8
 8007544:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007546:	429a      	cmp	r2, r3
 8007548:	f0c0 8099 	bcc.w	800767e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	8bfb      	ldrh	r3, [r7, #30]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	f1a3 0208 	sub.w	r2, r3, #8
 800755a:	8bbb      	ldrh	r3, [r7, #28]
 800755c:	3314      	adds	r3, #20
 800755e:	429a      	cmp	r2, r3
 8007560:	d333      	bcc.n	80075ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007562:	8bfa      	ldrh	r2, [r7, #30]
 8007564:	8bbb      	ldrh	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	b29b      	uxth	r3, r3
 800756a:	3308      	adds	r3, #8
 800756c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800756e:	8a7b      	ldrh	r3, [r7, #18]
 8007570:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007574:	d106      	bne.n	8007584 <mem_malloc+0xb0>
 8007576:	4b4c      	ldr	r3, [pc, #304]	; (80076a8 <mem_malloc+0x1d4>)
 8007578:	f240 3287 	movw	r2, #903	; 0x387
 800757c:	494b      	ldr	r1, [pc, #300]	; (80076ac <mem_malloc+0x1d8>)
 800757e:	484c      	ldr	r0, [pc, #304]	; (80076b0 <mem_malloc+0x1dc>)
 8007580:	f00a f940 	bl	8011804 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007584:	8a7b      	ldrh	r3, [r7, #18]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fd00 	bl	8006f8c <ptr_to_mem>
 800758c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8bfa      	ldrh	r2, [r7, #30]
 80075a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	8a7a      	ldrh	r2, [r7, #18]
 80075a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2201      	movs	r2, #1
 80075ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80075b6:	d00b      	beq.n	80075d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fce5 	bl	8006f8c <ptr_to_mem>
 80075c2:	4602      	mov	r2, r0
 80075c4:	8a7b      	ldrh	r3, [r7, #18]
 80075c6:	8053      	strh	r3, [r2, #2]
 80075c8:	e002      	b.n	80075d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2201      	movs	r2, #1
 80075ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075d0:	4b34      	ldr	r3, [pc, #208]	; (80076a4 <mem_malloc+0x1d0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d127      	bne.n	800762a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80075da:	4b32      	ldr	r3, [pc, #200]	; (80076a4 <mem_malloc+0x1d0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80075e0:	e005      	b.n	80075ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fcd0 	bl	8006f8c <ptr_to_mem>
 80075ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	791b      	ldrb	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <mem_malloc+0x12c>
 80075f6:	4b2f      	ldr	r3, [pc, #188]	; (80076b4 <mem_malloc+0x1e0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d1f0      	bne.n	80075e2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <mem_malloc+0x1d0>)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007606:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <mem_malloc+0x1d0>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b2a      	ldr	r3, [pc, #168]	; (80076b4 <mem_malloc+0x1e0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d00b      	beq.n	800762a <mem_malloc+0x156>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <mem_malloc+0x1d0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	791b      	ldrb	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <mem_malloc+0x156>
 800761c:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <mem_malloc+0x1d4>)
 800761e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007622:	4925      	ldr	r1, [pc, #148]	; (80076b8 <mem_malloc+0x1e4>)
 8007624:	4822      	ldr	r0, [pc, #136]	; (80076b0 <mem_malloc+0x1dc>)
 8007626:	f00a f8ed 	bl	8011804 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800762a:	8bba      	ldrh	r2, [r7, #28]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	3308      	adds	r3, #8
 8007632:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <mem_malloc+0x1e0>)
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	4293      	cmp	r3, r2
 8007638:	d906      	bls.n	8007648 <mem_malloc+0x174>
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <mem_malloc+0x1d4>)
 800763c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007640:	491e      	ldr	r1, [pc, #120]	; (80076bc <mem_malloc+0x1e8>)
 8007642:	481b      	ldr	r0, [pc, #108]	; (80076b0 <mem_malloc+0x1dc>)
 8007644:	f00a f8de 	bl	8011804 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <mem_malloc+0x18c>
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <mem_malloc+0x1d4>)
 8007654:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007658:	4919      	ldr	r1, [pc, #100]	; (80076c0 <mem_malloc+0x1ec>)
 800765a:	4815      	ldr	r0, [pc, #84]	; (80076b0 <mem_malloc+0x1dc>)
 800765c:	f00a f8d2 	bl	8011804 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <mem_malloc+0x1a4>
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <mem_malloc+0x1d4>)
 800766c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007670:	4914      	ldr	r1, [pc, #80]	; (80076c4 <mem_malloc+0x1f0>)
 8007672:	480f      	ldr	r0, [pc, #60]	; (80076b0 <mem_malloc+0x1dc>)
 8007674:	f00a f8c6 	bl	8011804 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	3308      	adds	r3, #8
 800767c:	e00e      	b.n	800769c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800767e:	8bfb      	ldrh	r3, [r7, #30]
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fc83 	bl	8006f8c <ptr_to_mem>
 8007686:	4603      	mov	r3, r0
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800768c:	8bfa      	ldrh	r2, [r7, #30]
 800768e:	8bbb      	ldrh	r3, [r7, #28]
 8007690:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007694:	429a      	cmp	r2, r3
 8007696:	f4ff af44 	bcc.w	8007522 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000528 	.word	0x20000528
 80076a8:	08013a7c 	.word	0x08013a7c
 80076ac:	08013c24 	.word	0x08013c24
 80076b0:	08013ac4 	.word	0x08013ac4
 80076b4:	20000524 	.word	0x20000524
 80076b8:	08013c38 	.word	0x08013c38
 80076bc:	08013c54 	.word	0x08013c54
 80076c0:	08013c84 	.word	0x08013c84
 80076c4:	08013cb4 	.word	0x08013cb4

080076c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	3303      	adds	r3, #3
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e011      	b.n	800770e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	461a      	mov	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4293      	cmp	r3, r2
 8007718:	dbe7      	blt.n	80076ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800772e:	2300      	movs	r3, #0
 8007730:	80fb      	strh	r3, [r7, #6]
 8007732:	e009      	b.n	8007748 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	4a08      	ldr	r2, [pc, #32]	; (8007758 <memp_init+0x30>)
 8007738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff ffc3 	bl	80076c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	3301      	adds	r3, #1
 8007746:	80fb      	strh	r3, [r7, #6]
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	2b08      	cmp	r3, #8
 800774c:	d9f2      	bls.n	8007734 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	08017e98 	.word	0x08017e98

0800775c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d012      	beq.n	8007798 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <do_memp_malloc_pool+0x38>
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <do_memp_malloc_pool+0x48>)
 8007788:	f44f 728c 	mov.w	r2, #280	; 0x118
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <do_memp_malloc_pool+0x4c>)
 800778e:	4807      	ldr	r0, [pc, #28]	; (80077ac <do_memp_malloc_pool+0x50>)
 8007790:	f00a f838 	bl	8011804 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	e000      	b.n	800779a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	08013cd8 	.word	0x08013cd8
 80077a8:	08013d08 	.word	0x08013d08
 80077ac:	08013d2c 	.word	0x08013d2c

080077b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80077ba:	79fb      	ldrb	r3, [r7, #7]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d908      	bls.n	80077d2 <memp_malloc+0x22>
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <memp_malloc+0x3c>)
 80077c2:	f240 1257 	movw	r2, #343	; 0x157
 80077c6:	490a      	ldr	r1, [pc, #40]	; (80077f0 <memp_malloc+0x40>)
 80077c8:	480a      	ldr	r0, [pc, #40]	; (80077f4 <memp_malloc+0x44>)
 80077ca:	f00a f81b 	bl	8011804 <iprintf>
 80077ce:	2300      	movs	r3, #0
 80077d0:	e008      	b.n	80077e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <memp_malloc+0x48>)
 80077d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff ffbe 	bl	800775c <do_memp_malloc_pool>
 80077e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	08013cd8 	.word	0x08013cd8
 80077f0:	08013d68 	.word	0x08013d68
 80077f4:	08013d2c 	.word	0x08013d2c
 80077f8:	08017e98 	.word	0x08017e98

080077fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <do_memp_free_pool+0x22>
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <do_memp_free_pool+0x40>)
 8007812:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007816:	490a      	ldr	r1, [pc, #40]	; (8007840 <do_memp_free_pool+0x44>)
 8007818:	480a      	ldr	r0, [pc, #40]	; (8007844 <do_memp_free_pool+0x48>)
 800781a:	f009 fff3 	bl	8011804 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	08013cd8 	.word	0x08013cd8
 8007840:	08013d88 	.word	0x08013d88
 8007844:	08013d2c 	.word	0x08013d2c

08007848 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d907      	bls.n	800786a <memp_free+0x22>
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <memp_free+0x44>)
 800785c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007860:	490b      	ldr	r1, [pc, #44]	; (8007890 <memp_free+0x48>)
 8007862:	480c      	ldr	r0, [pc, #48]	; (8007894 <memp_free+0x4c>)
 8007864:	f009 ffce 	bl	8011804 <iprintf>
 8007868:	e00c      	b.n	8007884 <memp_free+0x3c>

  if (mem == NULL) {
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <memp_free+0x50>)
 8007874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff ffbe 	bl	80077fc <do_memp_free_pool>
 8007880:	e000      	b.n	8007884 <memp_free+0x3c>
    return;
 8007882:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08013cd8 	.word	0x08013cd8
 8007890:	08013da8 	.word	0x08013da8
 8007894:	08013d2c 	.word	0x08013d2c
 8007898:	08017e98 	.word	0x08017e98

0800789c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d108      	bne.n	80078d2 <netif_add+0x26>
 80078c0:	4b57      	ldr	r3, [pc, #348]	; (8007a20 <netif_add+0x174>)
 80078c2:	f240 1227 	movw	r2, #295	; 0x127
 80078c6:	4957      	ldr	r1, [pc, #348]	; (8007a24 <netif_add+0x178>)
 80078c8:	4857      	ldr	r0, [pc, #348]	; (8007a28 <netif_add+0x17c>)
 80078ca:	f009 ff9b 	bl	8011804 <iprintf>
 80078ce:	2300      	movs	r3, #0
 80078d0:	e0a2      	b.n	8007a18 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d108      	bne.n	80078ea <netif_add+0x3e>
 80078d8:	4b51      	ldr	r3, [pc, #324]	; (8007a20 <netif_add+0x174>)
 80078da:	f44f 7294 	mov.w	r2, #296	; 0x128
 80078de:	4953      	ldr	r1, [pc, #332]	; (8007a2c <netif_add+0x180>)
 80078e0:	4851      	ldr	r0, [pc, #324]	; (8007a28 <netif_add+0x17c>)
 80078e2:	f009 ff8f 	bl	8011804 <iprintf>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e096      	b.n	8007a18 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80078f0:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <netif_add+0x184>)
 80078f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80078fa:	4b4d      	ldr	r3, [pc, #308]	; (8007a30 <netif_add+0x184>)
 80078fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007904:	4b4a      	ldr	r3, [pc, #296]	; (8007a30 <netif_add+0x184>)
 8007906:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4a45      	ldr	r2, [pc, #276]	; (8007a34 <netif_add+0x188>)
 800791e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a3a      	ldr	r2, [r7, #32]
 8007938:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800793a:	4b3f      	ldr	r3, [pc, #252]	; (8007a38 <netif_add+0x18c>)
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007948:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f913 	bl	8007b7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	4798      	blx	r3
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <netif_add+0xba>
    return NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	e058      	b.n	8007a18 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800796c:	2bff      	cmp	r3, #255	; 0xff
 800796e:	d103      	bne.n	8007978 <netif_add+0xcc>
        netif->num = 0;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800797c:	4b2f      	ldr	r3, [pc, #188]	; (8007a3c <netif_add+0x190>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e02b      	b.n	80079dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d106      	bne.n	800799a <netif_add+0xee>
 800798c:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <netif_add+0x174>)
 800798e:	f240 128b 	movw	r2, #395	; 0x18b
 8007992:	492b      	ldr	r1, [pc, #172]	; (8007a40 <netif_add+0x194>)
 8007994:	4824      	ldr	r0, [pc, #144]	; (8007a28 <netif_add+0x17c>)
 8007996:	f009 ff35 	bl	8011804 <iprintf>
        num_netifs++;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	dd06      	ble.n	80079b4 <netif_add+0x108>
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <netif_add+0x174>)
 80079a8:	f240 128d 	movw	r2, #397	; 0x18d
 80079ac:	4925      	ldr	r1, [pc, #148]	; (8007a44 <netif_add+0x198>)
 80079ae:	481e      	ldr	r0, [pc, #120]	; (8007a28 <netif_add+0x17c>)
 80079b0:	f009 ff28 	bl	8011804 <iprintf>
        if (netif2->num == netif->num) {
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d108      	bne.n	80079d6 <netif_add+0x12a>
          netif->num++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079ca:	3301      	adds	r3, #1
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80079d4:	e005      	b.n	80079e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1d0      	bne.n	8007984 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1be      	bne.n	8007966 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079ee:	2bfe      	cmp	r3, #254	; 0xfe
 80079f0:	d103      	bne.n	80079fa <netif_add+0x14e>
    netif_num = 0;
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <netif_add+0x18c>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e006      	b.n	8007a08 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <netif_add+0x18c>)
 8007a06:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <netif_add+0x190>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <netif_add+0x190>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	08013dc4 	.word	0x08013dc4
 8007a24:	08013e58 	.word	0x08013e58
 8007a28:	08013e14 	.word	0x08013e14
 8007a2c:	08013e74 	.word	0x08013e74
 8007a30:	08017efc 	.word	0x08017efc
 8007a34:	08007d8f 	.word	0x08007d8f
 8007a38:	20000550 	.word	0x20000550
 8007a3c:	200174d4 	.word	0x200174d4
 8007a40:	08013e98 	.word	0x08013e98
 8007a44:	08013eac 	.word	0x08013eac

08007a48 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f002 fd89 	bl	800a56c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f007 fac1 	bl	800efe4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <netif_do_set_ipaddr+0x20>
 8007a7e:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <netif_do_set_ipaddr+0x88>)
 8007a80:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007a84:	491c      	ldr	r1, [pc, #112]	; (8007af8 <netif_do_set_ipaddr+0x8c>)
 8007a86:	481d      	ldr	r0, [pc, #116]	; (8007afc <netif_do_set_ipaddr+0x90>)
 8007a88:	f009 febc 	bl	8011804 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <netif_do_set_ipaddr+0x34>
 8007a92:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <netif_do_set_ipaddr+0x88>)
 8007a94:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007a98:	4917      	ldr	r1, [pc, #92]	; (8007af8 <netif_do_set_ipaddr+0x8c>)
 8007a9a:	4818      	ldr	r0, [pc, #96]	; (8007afc <netif_do_set_ipaddr+0x90>)
 8007a9c:	f009 feb2 	bl	8011804 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d01c      	beq.n	8007ae8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007abe:	f107 0314 	add.w	r3, r7, #20
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff ffbf 	bl	8007a48 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <netif_do_set_ipaddr+0x6a>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	e000      	b.n	8007ad8 <netif_do_set_ipaddr+0x6c>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007adc:	2101      	movs	r1, #1
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f8d2 	bl	8007c88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08013dc4 	.word	0x08013dc4
 8007af8:	08013edc 	.word	0x08013edc
 8007afc:	08013e14 	.word	0x08013e14

08007b00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3308      	adds	r3, #8
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d00a      	beq.n	8007b30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <netif_do_set_netmask+0x26>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	e000      	b.n	8007b28 <netif_do_set_netmask+0x28>
 8007b26:	2300      	movs	r3, #0
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	330c      	adds	r3, #12
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d00a      	beq.n	8007b6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <netif_do_set_gw+0x26>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	e000      	b.n	8007b66 <netif_do_set_gw+0x28>
 8007b64:	2300      	movs	r3, #0
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <netif_set_addr+0x90>)
 8007b9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <netif_set_addr+0x90>)
 8007ba4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007bac:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <netif_set_addr+0x90>)
 8007bae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <netif_set_addr+0x42>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <netif_set_addr+0x46>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <netif_set_addr+0x48>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bcc:	f107 0310 	add.w	r3, r7, #16
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff ff49 	bl	8007a6c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff ff8e 	bl	8007b00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f7ff ffa8 	bl	8007b3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bf4:	f107 0310 	add.w	r3, r7, #16
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff ff35 	bl	8007a6c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007c02:	bf00      	nop
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	08017efc 	.word	0x08017efc

08007c10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007c18:	4a04      	ldr	r2, [pc, #16]	; (8007c2c <netif_set_default+0x1c>)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200174d8 	.word	0x200174d8

08007c30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <netif_set_up+0x1e>
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <netif_set_up+0x4c>)
 8007c40:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007c44:	490e      	ldr	r1, [pc, #56]	; (8007c80 <netif_set_up+0x50>)
 8007c46:	480f      	ldr	r0, [pc, #60]	; (8007c84 <netif_set_up+0x54>)
 8007c48:	f009 fddc 	bl	8011804 <iprintf>
 8007c4c:	e013      	b.n	8007c76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10c      	bne.n	8007c76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007c6e:	2103      	movs	r1, #3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f809 	bl	8007c88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	08013dc4 	.word	0x08013dc4
 8007c80:	08013f4c 	.word	0x08013f4c
 8007c84:	08013e14 	.word	0x08013e14

08007c88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <netif_issue_reports+0x20>
 8007c9a:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <netif_issue_reports+0x74>)
 8007c9c:	f240 326d 	movw	r2, #877	; 0x36d
 8007ca0:	4917      	ldr	r1, [pc, #92]	; (8007d00 <netif_issue_reports+0x78>)
 8007ca2:	4818      	ldr	r0, [pc, #96]	; (8007d04 <netif_issue_reports+0x7c>)
 8007ca4:	f009 fdae 	bl	8011804 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01e      	beq.n	8007cf4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cbc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d017      	beq.n	8007cf4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d013      	beq.n	8007cf6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00e      	beq.n	8007cf6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f008 f8e3 	bl	800feb8 <etharp_request>
 8007cf2:	e000      	b.n	8007cf6 <netif_issue_reports+0x6e>
    return;
 8007cf4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08013dc4 	.word	0x08013dc4
 8007d00:	08013f68 	.word	0x08013f68
 8007d04:	08013e14 	.word	0x08013e14

08007d08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <netif_set_down+0x1e>
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <netif_set_down+0x58>)
 8007d18:	f240 329b 	movw	r2, #923	; 0x39b
 8007d1c:	4911      	ldr	r1, [pc, #68]	; (8007d64 <netif_set_down+0x5c>)
 8007d1e:	4812      	ldr	r0, [pc, #72]	; (8007d68 <netif_set_down+0x60>)
 8007d20:	f009 fd70 	bl	8011804 <iprintf>
 8007d24:	e019      	b.n	8007d5a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d012      	beq.n	8007d5a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f007 fc6d 	bl	800f634 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	08013dc4 	.word	0x08013dc4
 8007d64:	08013f8c 	.word	0x08013f8c
 8007d68:	08013e14 	.word	0x08013e14

08007d6c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	61da      	str	r2, [r3, #28]
  }
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007d9a:	f06f 030b 	mvn.w	r3, #11
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d013      	beq.n	8007de4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <netif_get_by_index+0x48>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e00c      	b.n	8007dde <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dca:	3301      	adds	r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	79fa      	ldrb	r2, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d101      	bne.n	8007dd8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	e006      	b.n	8007de6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1ef      	bne.n	8007dc4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	200174d4 	.word	0x200174d4

08007df8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <pbuf_free_ooseq+0x38>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <pbuf_free_ooseq+0x3c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	e00a      	b.n	8007e22 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f002 fbe7 	bl	800a5e8 <tcp_free_ooseq>
      return;
 8007e1a:	e005      	b.n	8007e28 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f1      	bne.n	8007e0c <pbuf_free_ooseq+0x14>
    }
  }
}
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200174dc 	.word	0x200174dc
 8007e34:	200174e4 	.word	0x200174e4

08007e38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <pbuf_pool_is_empty+0x14>)
 8007e3e:	2201      	movs	r2, #1
 8007e40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007e42:	bf00      	nop
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	200174dc 	.word	0x200174dc

08007e50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	460b      	mov	r3, r1
 8007e60:	80fb      	strh	r3, [r7, #6]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	88fa      	ldrh	r2, [r7, #6]
 8007e76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	88ba      	ldrh	r2, [r7, #4]
 8007e7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007e7e:	8b3b      	ldrh	r3, [r7, #24]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	7f3a      	ldrb	r2, [r7, #28]
 8007e8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	73da      	strb	r2, [r3, #15]
}
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08c      	sub	sp, #48	; 0x30
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	80bb      	strh	r3, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007eba:	887b      	ldrh	r3, [r7, #2]
 8007ebc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007ec0:	f000 8082 	beq.w	8007fc8 <pbuf_alloc+0x124>
 8007ec4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007ec8:	f300 80ca 	bgt.w	8008060 <pbuf_alloc+0x1bc>
 8007ecc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007ed0:	d010      	beq.n	8007ef4 <pbuf_alloc+0x50>
 8007ed2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007ed6:	f300 80c3 	bgt.w	8008060 <pbuf_alloc+0x1bc>
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d002      	beq.n	8007ee4 <pbuf_alloc+0x40>
 8007ede:	2b41      	cmp	r3, #65	; 0x41
 8007ee0:	f040 80be 	bne.w	8008060 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007ee4:	887a      	ldrh	r2, [r7, #2]
 8007ee6:	88bb      	ldrh	r3, [r7, #4]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2000      	movs	r0, #0
 8007eec:	f000 f8d4 	bl	8008098 <pbuf_alloc_reference>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007ef2:	e0bf      	b.n	8008074 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007efc:	88bb      	ldrh	r3, [r7, #4]
 8007efe:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007f00:	2008      	movs	r0, #8
 8007f02:	f7ff fc55 	bl	80077b0 <memp_malloc>
 8007f06:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8007f0e:	f7ff ff93 	bl	8007e38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8007f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f1a:	f000 faab 	bl	8008474 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e0a9      	b.n	8008076 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f24:	3303      	adds	r3, #3
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f5c3 6322 	rsb	r3, r3, #2592	; 0xa20
 8007f32:	3308      	adds	r3, #8
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8b7a      	ldrh	r2, [r7, #26]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	bf28      	it	cs
 8007f3c:	4613      	movcs	r3, r2
 8007f3e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f42:	3310      	adds	r3, #16
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4413      	add	r3, r2
 8007f48:	3303      	adds	r3, #3
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	4618      	mov	r0, r3
 8007f50:	89f9      	ldrh	r1, [r7, #14]
 8007f52:	8b7a      	ldrh	r2, [r7, #26]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	887b      	ldrh	r3, [r7, #2]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4601      	mov	r1, r0
 8007f60:	6938      	ldr	r0, [r7, #16]
 8007f62:	f7ff ff75 	bl	8007e50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <pbuf_alloc+0xdc>
 8007f72:	4b43      	ldr	r3, [pc, #268]	; (8008080 <pbuf_alloc+0x1dc>)
 8007f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f78:	4942      	ldr	r1, [pc, #264]	; (8008084 <pbuf_alloc+0x1e0>)
 8007f7a:	4843      	ldr	r0, [pc, #268]	; (8008088 <pbuf_alloc+0x1e4>)
 8007f7c:	f009 fc42 	bl	8011804 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f82:	3303      	adds	r3, #3
 8007f84:	f023 0303 	bic.w	r3, r3, #3
 8007f88:	f640 2228 	movw	r2, #2600	; 0xa28
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d106      	bne.n	8007f9e <pbuf_alloc+0xfa>
 8007f90:	4b3b      	ldr	r3, [pc, #236]	; (8008080 <pbuf_alloc+0x1dc>)
 8007f92:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007f96:	493d      	ldr	r1, [pc, #244]	; (800808c <pbuf_alloc+0x1e8>)
 8007f98:	483b      	ldr	r0, [pc, #236]	; (8008088 <pbuf_alloc+0x1e4>)
 8007f9a:	f009 fc33 	bl	8011804 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa8:	e002      	b.n	8007fb0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007fb4:	8b7a      	ldrh	r2, [r7, #26]
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007fc0:	8b7b      	ldrh	r3, [r7, #26]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d19c      	bne.n	8007f00 <pbuf_alloc+0x5c>
      break;
 8007fc6:	e055      	b.n	8008074 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fca:	3303      	adds	r3, #3
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	88bb      	ldrh	r3, [r7, #4]
 8007fd6:	3303      	adds	r3, #3
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007fe4:	8b3b      	ldrh	r3, [r7, #24]
 8007fe6:	3310      	adds	r3, #16
 8007fe8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007fea:	8b3a      	ldrh	r2, [r7, #24]
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	3303      	adds	r3, #3
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d306      	bcc.n	8008006 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007ff8:	8afa      	ldrh	r2, [r7, #22]
 8007ffa:	88bb      	ldrh	r3, [r7, #4]
 8007ffc:	3303      	adds	r3, #3
 8007ffe:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008002:	429a      	cmp	r2, r3
 8008004:	d201      	bcs.n	800800a <pbuf_alloc+0x166>
        return NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	e035      	b.n	8008076 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800800a:	8afb      	ldrh	r3, [r7, #22]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fa61 	bl	80074d4 <mem_malloc>
 8008012:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <pbuf_alloc+0x17a>
        return NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	e02b      	b.n	8008076 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800801e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008020:	3310      	adds	r3, #16
 8008022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008024:	4413      	add	r3, r2
 8008026:	3303      	adds	r3, #3
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	4618      	mov	r0, r3
 800802e:	88b9      	ldrh	r1, [r7, #4]
 8008030:	88ba      	ldrh	r2, [r7, #4]
 8008032:	2300      	movs	r3, #0
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	887b      	ldrh	r3, [r7, #2]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	460b      	mov	r3, r1
 800803c:	4601      	mov	r1, r0
 800803e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008040:	f7ff ff06 	bl	8007e50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f003 0303 	and.w	r3, r3, #3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <pbuf_alloc+0x1ce>
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <pbuf_alloc+0x1dc>)
 8008052:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008056:	490e      	ldr	r1, [pc, #56]	; (8008090 <pbuf_alloc+0x1ec>)
 8008058:	480b      	ldr	r0, [pc, #44]	; (8008088 <pbuf_alloc+0x1e4>)
 800805a:	f009 fbd3 	bl	8011804 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800805e:	e008      	b.n	8008072 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <pbuf_alloc+0x1dc>)
 8008062:	f240 1227 	movw	r2, #295	; 0x127
 8008066:	490b      	ldr	r1, [pc, #44]	; (8008094 <pbuf_alloc+0x1f0>)
 8008068:	4807      	ldr	r0, [pc, #28]	; (8008088 <pbuf_alloc+0x1e4>)
 800806a:	f009 fbcb 	bl	8011804 <iprintf>
      return NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	e001      	b.n	8008076 <pbuf_alloc+0x1d2>
      break;
 8008072:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	; 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	08013ff4 	.word	0x08013ff4
 8008084:	08014024 	.word	0x08014024
 8008088:	08014054 	.word	0x08014054
 800808c:	0801407c 	.word	0x0801407c
 8008090:	080140b0 	.word	0x080140b0
 8008094:	080140dc 	.word	0x080140dc

08008098 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	807b      	strh	r3, [r7, #2]
 80080a4:	4613      	mov	r3, r2
 80080a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80080a8:	883b      	ldrh	r3, [r7, #0]
 80080aa:	2b41      	cmp	r3, #65	; 0x41
 80080ac:	d009      	beq.n	80080c2 <pbuf_alloc_reference+0x2a>
 80080ae:	883b      	ldrh	r3, [r7, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d006      	beq.n	80080c2 <pbuf_alloc_reference+0x2a>
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <pbuf_alloc_reference+0x5c>)
 80080b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80080ba:	490f      	ldr	r1, [pc, #60]	; (80080f8 <pbuf_alloc_reference+0x60>)
 80080bc:	480f      	ldr	r0, [pc, #60]	; (80080fc <pbuf_alloc_reference+0x64>)
 80080be:	f009 fba1 	bl	8011804 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80080c2:	2007      	movs	r0, #7
 80080c4:	f7ff fb74 	bl	80077b0 <memp_malloc>
 80080c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e00b      	b.n	80080ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80080d4:	8879      	ldrh	r1, [r7, #2]
 80080d6:	887a      	ldrh	r2, [r7, #2]
 80080d8:	2300      	movs	r3, #0
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	883b      	ldrh	r3, [r7, #0]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	460b      	mov	r3, r1
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff feb3 	bl	8007e50 <pbuf_init_alloced_pbuf>
  return p;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	08013ff4 	.word	0x08013ff4
 80080f8:	080140f8 	.word	0x080140f8
 80080fc:	08014054 	.word	0x08014054

08008100 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	607b      	str	r3, [r7, #4]
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	460b      	mov	r3, r1
 800810e:	81bb      	strh	r3, [r7, #12]
 8008110:	4613      	mov	r3, r2
 8008112:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008118:	8a7b      	ldrh	r3, [r7, #18]
 800811a:	3303      	adds	r3, #3
 800811c:	f023 0203 	bic.w	r2, r3, #3
 8008120:	89bb      	ldrh	r3, [r7, #12]
 8008122:	441a      	add	r2, r3
 8008124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008126:	429a      	cmp	r2, r3
 8008128:	d901      	bls.n	800812e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	e018      	b.n	8008160 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008134:	8a7b      	ldrh	r3, [r7, #18]
 8008136:	3303      	adds	r3, #3
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	4413      	add	r3, r2
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e001      	b.n	8008148 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	89b9      	ldrh	r1, [r7, #12]
 800814c:	89ba      	ldrh	r2, [r7, #12]
 800814e:	2302      	movs	r3, #2
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	460b      	mov	r3, r1
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	f7ff fe79 	bl	8007e50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800815e:	687b      	ldr	r3, [r7, #4]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <pbuf_realloc+0x20>
 800817a:	4b3a      	ldr	r3, [pc, #232]	; (8008264 <pbuf_realloc+0xfc>)
 800817c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008180:	4939      	ldr	r1, [pc, #228]	; (8008268 <pbuf_realloc+0x100>)
 8008182:	483a      	ldr	r0, [pc, #232]	; (800826c <pbuf_realloc+0x104>)
 8008184:	f009 fb3e 	bl	8011804 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	891b      	ldrh	r3, [r3, #8]
 800818c:	887a      	ldrh	r2, [r7, #2]
 800818e:	429a      	cmp	r2, r3
 8008190:	d263      	bcs.n	800825a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	891a      	ldrh	r2, [r3, #8]
 8008196:	887b      	ldrh	r3, [r7, #2]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800819c:	887b      	ldrh	r3, [r7, #2]
 800819e:	817b      	strh	r3, [r7, #10]
  q = p;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80081a4:	e018      	b.n	80081d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	895b      	ldrh	r3, [r3, #10]
 80081aa:	897a      	ldrh	r2, [r7, #10]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	891a      	ldrh	r2, [r3, #8]
 80081b4:	893b      	ldrh	r3, [r7, #8]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <pbuf_realloc+0x70>
 80081ca:	4b26      	ldr	r3, [pc, #152]	; (8008264 <pbuf_realloc+0xfc>)
 80081cc:	f240 12af 	movw	r2, #431	; 0x1af
 80081d0:	4927      	ldr	r1, [pc, #156]	; (8008270 <pbuf_realloc+0x108>)
 80081d2:	4826      	ldr	r0, [pc, #152]	; (800826c <pbuf_realloc+0x104>)
 80081d4:	f009 fb16 	bl	8011804 <iprintf>
  while (rem_len > q->len) {
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	895b      	ldrh	r3, [r3, #10]
 80081dc:	897a      	ldrh	r2, [r7, #10]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d8e1      	bhi.n	80081a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	7b1b      	ldrb	r3, [r3, #12]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d121      	bne.n	8008232 <pbuf_realloc+0xca>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	895b      	ldrh	r3, [r3, #10]
 80081f2:	897a      	ldrh	r2, [r7, #10]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d01c      	beq.n	8008232 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	7b5b      	ldrb	r3, [r3, #13]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d116      	bne.n	8008232 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	b29a      	uxth	r2, r3
 800820e:	897b      	ldrh	r3, [r7, #10]
 8008210:	4413      	add	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff f860 	bl	80072dc <mem_trim>
 800821c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <pbuf_realloc+0xca>
 8008224:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <pbuf_realloc+0xfc>)
 8008226:	f240 12bd 	movw	r2, #445	; 0x1bd
 800822a:	4912      	ldr	r1, [pc, #72]	; (8008274 <pbuf_realloc+0x10c>)
 800822c:	480f      	ldr	r0, [pc, #60]	; (800826c <pbuf_realloc+0x104>)
 800822e:	f009 fae9 	bl	8011804 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	897a      	ldrh	r2, [r7, #10]
 8008236:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	895a      	ldrh	r2, [r3, #10]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f911 	bl	8008474 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	e000      	b.n	800825c <pbuf_realloc+0xf4>
    return;
 800825a:	bf00      	nop

}
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	08013ff4 	.word	0x08013ff4
 8008268:	0801410c 	.word	0x0801410c
 800826c:	08014054 	.word	0x08014054
 8008270:	08014124 	.word	0x08014124
 8008274:	0801413c 	.word	0x0801413c

08008278 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <pbuf_add_header_impl+0x22>
 800828c:	4b2b      	ldr	r3, [pc, #172]	; (800833c <pbuf_add_header_impl+0xc4>)
 800828e:	f240 12df 	movw	r2, #479	; 0x1df
 8008292:	492b      	ldr	r1, [pc, #172]	; (8008340 <pbuf_add_header_impl+0xc8>)
 8008294:	482b      	ldr	r0, [pc, #172]	; (8008344 <pbuf_add_header_impl+0xcc>)
 8008296:	f009 fab5 	bl	8011804 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <pbuf_add_header_impl+0x30>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a6:	d301      	bcc.n	80082ac <pbuf_add_header_impl+0x34>
    return 1;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e043      	b.n	8008334 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <pbuf_add_header_impl+0x3e>
    return 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e03e      	b.n	8008334 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	891a      	ldrh	r2, [r3, #8]
 80082be:	8a7b      	ldrh	r3, [r7, #18]
 80082c0:	4413      	add	r3, r2
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	8a7a      	ldrh	r2, [r7, #18]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d901      	bls.n	80082ce <pbuf_add_header_impl+0x56>
    return 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e032      	b.n	8008334 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	7b1b      	ldrb	r3, [r3, #12]
 80082d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80082d4:	8a3b      	ldrh	r3, [r7, #16]
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00c      	beq.n	80082f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	425b      	negs	r3, r3
 80082e6:	4413      	add	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3310      	adds	r3, #16
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d20d      	bcs.n	8008310 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e01d      	b.n	8008334 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	425b      	negs	r3, r3
 8008306:	4413      	add	r3, r2
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e001      	b.n	8008310 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800830c:	2301      	movs	r3, #1
 800830e:	e011      	b.n	8008334 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	895a      	ldrh	r2, [r3, #10]
 800831a:	8a7b      	ldrh	r3, [r7, #18]
 800831c:	4413      	add	r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	891a      	ldrh	r2, [r3, #8]
 8008328:	8a7b      	ldrh	r3, [r7, #18]
 800832a:	4413      	add	r3, r2
 800832c:	b29a      	uxth	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	811a      	strh	r2, [r3, #8]


  return 0;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	08013ff4 	.word	0x08013ff4
 8008340:	08014158 	.word	0x08014158
 8008344:	08014054 	.word	0x08014054

08008348 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008352:	2200      	movs	r2, #0
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff8e 	bl	8008278 <pbuf_add_header_impl>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <pbuf_remove_header+0x1e>
 8008378:	4b20      	ldr	r3, [pc, #128]	; (80083fc <pbuf_remove_header+0x94>)
 800837a:	f240 224b 	movw	r2, #587	; 0x24b
 800837e:	4920      	ldr	r1, [pc, #128]	; (8008400 <pbuf_remove_header+0x98>)
 8008380:	4820      	ldr	r0, [pc, #128]	; (8008404 <pbuf_remove_header+0x9c>)
 8008382:	f009 fa3f 	bl	8011804 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <pbuf_remove_header+0x2c>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008392:	d301      	bcc.n	8008398 <pbuf_remove_header+0x30>
    return 1;
 8008394:	2301      	movs	r3, #1
 8008396:	e02c      	b.n	80083f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <pbuf_remove_header+0x3a>
    return 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	e027      	b.n	80083f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	895b      	ldrh	r3, [r3, #10]
 80083aa:	89fa      	ldrh	r2, [r7, #14]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d908      	bls.n	80083c2 <pbuf_remove_header+0x5a>
 80083b0:	4b12      	ldr	r3, [pc, #72]	; (80083fc <pbuf_remove_header+0x94>)
 80083b2:	f240 2255 	movw	r2, #597	; 0x255
 80083b6:	4914      	ldr	r1, [pc, #80]	; (8008408 <pbuf_remove_header+0xa0>)
 80083b8:	4812      	ldr	r0, [pc, #72]	; (8008404 <pbuf_remove_header+0x9c>)
 80083ba:	f009 fa23 	bl	8011804 <iprintf>
 80083be:	2301      	movs	r3, #1
 80083c0:	e017      	b.n	80083f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	441a      	add	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	895a      	ldrh	r2, [r3, #10]
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	891a      	ldrh	r2, [r3, #8]
 80083e6:	89fb      	ldrh	r3, [r7, #14]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	08013ff4 	.word	0x08013ff4
 8008400:	08014158 	.word	0x08014158
 8008404:	08014054 	.word	0x08014054
 8008408:	08014164 	.word	0x08014164

0800840c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	807b      	strh	r3, [r7, #2]
 8008418:	4613      	mov	r3, r2
 800841a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800841c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008420:	2b00      	cmp	r3, #0
 8008422:	da08      	bge.n	8008436 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008428:	425b      	negs	r3, r3
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ff9b 	bl	8008368 <pbuf_remove_header>
 8008432:	4603      	mov	r3, r0
 8008434:	e007      	b.n	8008446 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800843a:	787a      	ldrb	r2, [r7, #1]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff ff1a 	bl	8008278 <pbuf_add_header_impl>
 8008444:	4603      	mov	r3, r0
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800845a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800845e:	2201      	movs	r2, #1
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff ffd2 	bl	800840c <pbuf_header_impl>
 8008468:	4603      	mov	r3, r0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <pbuf_free+0x22>
 8008488:	4b38      	ldr	r3, [pc, #224]	; (800856c <pbuf_free+0xf8>)
 800848a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800848e:	4938      	ldr	r1, [pc, #224]	; (8008570 <pbuf_free+0xfc>)
 8008490:	4838      	ldr	r0, [pc, #224]	; (8008574 <pbuf_free+0x100>)
 8008492:	f009 f9b7 	bl	8011804 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008496:	2300      	movs	r3, #0
 8008498:	e063      	b.n	8008562 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800849e:	e05c      	b.n	800855a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7b9b      	ldrb	r3, [r3, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d106      	bne.n	80084b6 <pbuf_free+0x42>
 80084a8:	4b30      	ldr	r3, [pc, #192]	; (800856c <pbuf_free+0xf8>)
 80084aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80084ae:	4932      	ldr	r1, [pc, #200]	; (8008578 <pbuf_free+0x104>)
 80084b0:	4830      	ldr	r0, [pc, #192]	; (8008574 <pbuf_free+0x100>)
 80084b2:	f009 f9a7 	bl	8011804 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7b9b      	ldrb	r3, [r3, #14]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	739a      	strb	r2, [r3, #14]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7b9b      	ldrb	r3, [r3, #14]
 80084c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80084c8:	7dbb      	ldrb	r3, [r7, #22]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d143      	bne.n	8008556 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7b1b      	ldrb	r3, [r3, #12]
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7b5b      	ldrb	r3, [r3, #13]
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d011      	beq.n	800850e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <pbuf_free+0x90>
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <pbuf_free+0xf8>)
 80084f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80084fc:	491f      	ldr	r1, [pc, #124]	; (800857c <pbuf_free+0x108>)
 80084fe:	481d      	ldr	r0, [pc, #116]	; (8008574 <pbuf_free+0x100>)
 8008500:	f009 f980 	bl	8011804 <iprintf>
        pc->custom_free_function(p);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
 800850c:	e01d      	b.n	800854a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d104      	bne.n	800851e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	2008      	movs	r0, #8
 8008518:	f7ff f996 	bl	8007848 <memp_free>
 800851c:	e015      	b.n	800854a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d104      	bne.n	800852e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	2007      	movs	r0, #7
 8008528:	f7ff f98e 	bl	8007848 <memp_free>
 800852c:	e00d      	b.n	800854a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <pbuf_free+0xc8>
          mem_free(p);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fe fe67 	bl	8007208 <mem_free>
 800853a:	e006      	b.n	800854a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <pbuf_free+0xf8>)
 800853e:	f240 320f 	movw	r2, #783	; 0x30f
 8008542:	490f      	ldr	r1, [pc, #60]	; (8008580 <pbuf_free+0x10c>)
 8008544:	480b      	ldr	r0, [pc, #44]	; (8008574 <pbuf_free+0x100>)
 8008546:	f009 f95d 	bl	8011804 <iprintf>
        }
      }
      count++;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	3301      	adds	r3, #1
 800854e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	e001      	b.n	800855a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d19f      	bne.n	80084a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	08013ff4 	.word	0x08013ff4
 8008570:	08014158 	.word	0x08014158
 8008574:	08014054 	.word	0x08014054
 8008578:	08014184 	.word	0x08014184
 800857c:	0801419c 	.word	0x0801419c
 8008580:	080141c0 	.word	0x080141c0

08008584 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008590:	e005      	b.n	800859e <pbuf_clen+0x1a>
    ++len;
 8008592:	89fb      	ldrh	r3, [r7, #14]
 8008594:	3301      	adds	r3, #1
 8008596:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1f6      	bne.n	8008592 <pbuf_clen+0xe>
  }
  return len;
 80085a4:	89fb      	ldrh	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d010      	beq.n	80085e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7b9b      	ldrb	r3, [r3, #14]
 80085c6:	3301      	adds	r3, #1
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7b9b      	ldrb	r3, [r3, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <pbuf_ref+0x30>
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <pbuf_ref+0x38>)
 80085d8:	f240 3242 	movw	r2, #834	; 0x342
 80085dc:	4904      	ldr	r1, [pc, #16]	; (80085f0 <pbuf_ref+0x3c>)
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <pbuf_ref+0x40>)
 80085e0:	f009 f910 	bl	8011804 <iprintf>
  }
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	08013ff4 	.word	0x08013ff4
 80085f0:	080141d4 	.word	0x080141d4
 80085f4:	08014054 	.word	0x08014054

080085f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <pbuf_cat+0x16>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d107      	bne.n	800861e <pbuf_cat+0x26>
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <pbuf_cat+0x98>)
 8008610:	f240 3259 	movw	r2, #857	; 0x359
 8008614:	491f      	ldr	r1, [pc, #124]	; (8008694 <pbuf_cat+0x9c>)
 8008616:	4820      	ldr	r0, [pc, #128]	; (8008698 <pbuf_cat+0xa0>)
 8008618:	f009 f8f4 	bl	8011804 <iprintf>
 800861c:	e034      	b.n	8008688 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e00a      	b.n	800863a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	891a      	ldrh	r2, [r3, #8]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	891b      	ldrh	r3, [r3, #8]
 800862c:	4413      	add	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f0      	bne.n	8008624 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	891a      	ldrh	r2, [r3, #8]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	895b      	ldrh	r3, [r3, #10]
 800864a:	429a      	cmp	r2, r3
 800864c:	d006      	beq.n	800865c <pbuf_cat+0x64>
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <pbuf_cat+0x98>)
 8008650:	f240 3262 	movw	r2, #866	; 0x362
 8008654:	4911      	ldr	r1, [pc, #68]	; (800869c <pbuf_cat+0xa4>)
 8008656:	4810      	ldr	r0, [pc, #64]	; (8008698 <pbuf_cat+0xa0>)
 8008658:	f009 f8d4 	bl	8011804 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <pbuf_cat+0x7a>
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <pbuf_cat+0x98>)
 8008666:	f240 3263 	movw	r2, #867	; 0x363
 800866a:	490d      	ldr	r1, [pc, #52]	; (80086a0 <pbuf_cat+0xa8>)
 800866c:	480a      	ldr	r0, [pc, #40]	; (8008698 <pbuf_cat+0xa0>)
 800866e:	f009 f8c9 	bl	8011804 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	891a      	ldrh	r2, [r3, #8]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	891b      	ldrh	r3, [r3, #8]
 800867a:	4413      	add	r3, r2
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	08013ff4 	.word	0x08013ff4
 8008694:	080141e8 	.word	0x080141e8
 8008698:	08014054 	.word	0x08014054
 800869c:	08014220 	.word	0x08014220
 80086a0:	08014250 	.word	0x08014250

080086a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	2300      	movs	r3, #0
 80086b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <pbuf_copy+0x2a>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <pbuf_copy+0x2a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	891a      	ldrh	r2, [r3, #8]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	891b      	ldrh	r3, [r3, #8]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d209      	bcs.n	80086e2 <pbuf_copy+0x3e>
 80086ce:	4b57      	ldr	r3, [pc, #348]	; (800882c <pbuf_copy+0x188>)
 80086d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80086d4:	4956      	ldr	r1, [pc, #344]	; (8008830 <pbuf_copy+0x18c>)
 80086d6:	4857      	ldr	r0, [pc, #348]	; (8008834 <pbuf_copy+0x190>)
 80086d8:	f009 f894 	bl	8011804 <iprintf>
 80086dc:	f06f 030f 	mvn.w	r3, #15
 80086e0:	e09f      	b.n	8008822 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	895b      	ldrh	r3, [r3, #10]
 80086e6:	461a      	mov	r2, r3
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	1ad2      	subs	r2, r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	4619      	mov	r1, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1acb      	subs	r3, r1, r3
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d306      	bcc.n	8008708 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	895b      	ldrh	r3, [r3, #10]
 80086fe:	461a      	mov	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	e005      	b.n	8008714 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	895b      	ldrh	r3, [r3, #10]
 800870c:	461a      	mov	r2, r3
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	18d0      	adds	r0, r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4413      	add	r3, r2
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4619      	mov	r1, r3
 8008728:	f008 ff92 	bl	8011650 <memcpy>
    offset_to += len;
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	895b      	ldrh	r3, [r3, #10]
 8008740:	461a      	mov	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	4293      	cmp	r3, r2
 8008746:	d906      	bls.n	8008756 <pbuf_copy+0xb2>
 8008748:	4b38      	ldr	r3, [pc, #224]	; (800882c <pbuf_copy+0x188>)
 800874a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800874e:	493a      	ldr	r1, [pc, #232]	; (8008838 <pbuf_copy+0x194>)
 8008750:	4838      	ldr	r0, [pc, #224]	; (8008834 <pbuf_copy+0x190>)
 8008752:	f009 f857 	bl	8011804 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	895b      	ldrh	r3, [r3, #10]
 800875a:	461a      	mov	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4293      	cmp	r3, r2
 8008760:	d906      	bls.n	8008770 <pbuf_copy+0xcc>
 8008762:	4b32      	ldr	r3, [pc, #200]	; (800882c <pbuf_copy+0x188>)
 8008764:	f240 32da 	movw	r2, #986	; 0x3da
 8008768:	4934      	ldr	r1, [pc, #208]	; (800883c <pbuf_copy+0x198>)
 800876a:	4832      	ldr	r0, [pc, #200]	; (8008834 <pbuf_copy+0x190>)
 800876c:	f009 f84a 	bl	8011804 <iprintf>
    if (offset_from >= p_from->len) {
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	895b      	ldrh	r3, [r3, #10]
 8008774:	461a      	mov	r2, r3
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4293      	cmp	r3, r2
 800877a:	d304      	bcc.n	8008786 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	895b      	ldrh	r3, [r3, #10]
 800878a:	461a      	mov	r2, r3
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	4293      	cmp	r3, r2
 8008790:	d114      	bne.n	80087bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <pbuf_copy+0x118>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <pbuf_copy+0x118>
 80087a8:	4b20      	ldr	r3, [pc, #128]	; (800882c <pbuf_copy+0x188>)
 80087aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80087ae:	4924      	ldr	r1, [pc, #144]	; (8008840 <pbuf_copy+0x19c>)
 80087b0:	4820      	ldr	r0, [pc, #128]	; (8008834 <pbuf_copy+0x190>)
 80087b2:	f009 f827 	bl	8011804 <iprintf>
 80087b6:	f06f 030f 	mvn.w	r3, #15
 80087ba:	e032      	b.n	8008822 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d013      	beq.n	80087ea <pbuf_copy+0x146>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	895a      	ldrh	r2, [r3, #10]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	891b      	ldrh	r3, [r3, #8]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d10d      	bne.n	80087ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <pbuf_copy+0x146>
 80087d6:	4b15      	ldr	r3, [pc, #84]	; (800882c <pbuf_copy+0x188>)
 80087d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80087dc:	4919      	ldr	r1, [pc, #100]	; (8008844 <pbuf_copy+0x1a0>)
 80087de:	4815      	ldr	r0, [pc, #84]	; (8008834 <pbuf_copy+0x190>)
 80087e0:	f009 f810 	bl	8011804 <iprintf>
 80087e4:	f06f 0305 	mvn.w	r3, #5
 80087e8:	e01b      	b.n	8008822 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d013      	beq.n	8008818 <pbuf_copy+0x174>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	895a      	ldrh	r2, [r3, #10]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	891b      	ldrh	r3, [r3, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10d      	bne.n	8008818 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d009      	beq.n	8008818 <pbuf_copy+0x174>
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <pbuf_copy+0x188>)
 8008806:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800880a:	490e      	ldr	r1, [pc, #56]	; (8008844 <pbuf_copy+0x1a0>)
 800880c:	4809      	ldr	r0, [pc, #36]	; (8008834 <pbuf_copy+0x190>)
 800880e:	f008 fff9 	bl	8011804 <iprintf>
 8008812:	f06f 0305 	mvn.w	r3, #5
 8008816:	e004      	b.n	8008822 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f47f af61 	bne.w	80086e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	08013ff4 	.word	0x08013ff4
 8008830:	0801429c 	.word	0x0801429c
 8008834:	08014054 	.word	0x08014054
 8008838:	080142cc 	.word	0x080142cc
 800883c:	080142e4 	.word	0x080142e4
 8008840:	08014300 	.word	0x08014300
 8008844:	08014310 	.word	0x08014310

08008848 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4611      	mov	r1, r2
 8008854:	461a      	mov	r2, r3
 8008856:	460b      	mov	r3, r1
 8008858:	80fb      	strh	r3, [r7, #6]
 800885a:	4613      	mov	r3, r2
 800885c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d108      	bne.n	800887e <pbuf_copy_partial+0x36>
 800886c:	4b2b      	ldr	r3, [pc, #172]	; (800891c <pbuf_copy_partial+0xd4>)
 800886e:	f240 420a 	movw	r2, #1034	; 0x40a
 8008872:	492b      	ldr	r1, [pc, #172]	; (8008920 <pbuf_copy_partial+0xd8>)
 8008874:	482b      	ldr	r0, [pc, #172]	; (8008924 <pbuf_copy_partial+0xdc>)
 8008876:	f008 ffc5 	bl	8011804 <iprintf>
 800887a:	2300      	movs	r3, #0
 800887c:	e04a      	b.n	8008914 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <pbuf_copy_partial+0x4e>
 8008884:	4b25      	ldr	r3, [pc, #148]	; (800891c <pbuf_copy_partial+0xd4>)
 8008886:	f240 420b 	movw	r2, #1035	; 0x40b
 800888a:	4927      	ldr	r1, [pc, #156]	; (8008928 <pbuf_copy_partial+0xe0>)
 800888c:	4825      	ldr	r0, [pc, #148]	; (8008924 <pbuf_copy_partial+0xdc>)
 800888e:	f008 ffb9 	bl	8011804 <iprintf>
 8008892:	2300      	movs	r3, #0
 8008894:	e03e      	b.n	8008914 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	e034      	b.n	8008906 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800889c:	88bb      	ldrh	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <pbuf_copy_partial+0x70>
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	895b      	ldrh	r3, [r3, #10]
 80088a6:	88ba      	ldrh	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d305      	bcc.n	80088b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	895b      	ldrh	r3, [r3, #10]
 80088b0:	88ba      	ldrh	r2, [r7, #4]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	80bb      	strh	r3, [r7, #4]
 80088b6:	e023      	b.n	8008900 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	895a      	ldrh	r2, [r3, #10]
 80088bc:	88bb      	ldrh	r3, [r7, #4]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80088c2:	8b3a      	ldrh	r2, [r7, #24]
 80088c4:	88fb      	ldrh	r3, [r7, #6]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d901      	bls.n	80088ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80088ce:	8b7b      	ldrh	r3, [r7, #26]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	18d0      	adds	r0, r2, r3
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	88bb      	ldrh	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	8b3a      	ldrh	r2, [r7, #24]
 80088de:	4619      	mov	r1, r3
 80088e0:	f008 feb6 	bl	8011650 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80088e4:	8afa      	ldrh	r2, [r7, #22]
 80088e6:	8b3b      	ldrh	r3, [r7, #24]
 80088e8:	4413      	add	r3, r2
 80088ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80088ec:	8b7a      	ldrh	r2, [r7, #26]
 80088ee:	8b3b      	ldrh	r3, [r7, #24]
 80088f0:	4413      	add	r3, r2
 80088f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	8b3b      	ldrh	r3, [r7, #24]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <pbuf_copy_partial+0xca>
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1c4      	bne.n	800889c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008912:	8afb      	ldrh	r3, [r7, #22]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	08013ff4 	.word	0x08013ff4
 8008920:	0801433c 	.word	0x0801433c
 8008924:	08014054 	.word	0x08014054
 8008928:	0801435c 	.word	0x0801435c

0800892c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	603a      	str	r2, [r7, #0]
 8008936:	71fb      	strb	r3, [r7, #7]
 8008938:	460b      	mov	r3, r1
 800893a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	8919      	ldrh	r1, [r3, #8]
 8008940:	88ba      	ldrh	r2, [r7, #4]
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff faad 	bl	8007ea4 <pbuf_alloc>
 800894a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <pbuf_clone+0x2a>
    return NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	e011      	b.n	800897a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fea3 	bl	80086a4 <pbuf_copy>
 800895e:	4603      	mov	r3, r0
 8008960:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008962:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <pbuf_clone+0x4c>
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <pbuf_clone+0x58>)
 800896c:	f240 5224 	movw	r2, #1316	; 0x524
 8008970:	4905      	ldr	r1, [pc, #20]	; (8008988 <pbuf_clone+0x5c>)
 8008972:	4806      	ldr	r0, [pc, #24]	; (800898c <pbuf_clone+0x60>)
 8008974:	f008 ff46 	bl	8011804 <iprintf>
  return q;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	08013ff4 	.word	0x08013ff4
 8008988:	08014468 	.word	0x08014468
 800898c:	08014054 	.word	0x08014054

08008990 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008994:	f008 ffc4 	bl	8011920 <rand>
 8008998:	4603      	mov	r3, r0
 800899a:	b29b      	uxth	r3, r3
 800899c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	4b01      	ldr	r3, [pc, #4]	; (80089b0 <tcp_init+0x20>)
 80089aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80089ac:	bf00      	nop
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000026 	.word	0x20000026

080089b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7d1b      	ldrb	r3, [r3, #20]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d105      	bne.n	80089d0 <tcp_free+0x1c>
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <tcp_free+0x2c>)
 80089c6:	22d4      	movs	r2, #212	; 0xd4
 80089c8:	4906      	ldr	r1, [pc, #24]	; (80089e4 <tcp_free+0x30>)
 80089ca:	4807      	ldr	r0, [pc, #28]	; (80089e8 <tcp_free+0x34>)
 80089cc:	f008 ff1a 	bl	8011804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	2001      	movs	r0, #1
 80089d4:	f7fe ff38 	bl	8007848 <memp_free>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	080144f4 	.word	0x080144f4
 80089e4:	08014524 	.word	0x08014524
 80089e8:	08014538 	.word	0x08014538

080089ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7d1b      	ldrb	r3, [r3, #20]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d105      	bne.n	8008a08 <tcp_free_listen+0x1c>
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <tcp_free_listen+0x2c>)
 80089fe:	22df      	movs	r2, #223	; 0xdf
 8008a00:	4906      	ldr	r1, [pc, #24]	; (8008a1c <tcp_free_listen+0x30>)
 8008a02:	4807      	ldr	r0, [pc, #28]	; (8008a20 <tcp_free_listen+0x34>)
 8008a04:	f008 fefe 	bl	8011804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	2002      	movs	r0, #2
 8008a0c:	f7fe ff1c 	bl	8007848 <memp_free>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	080144f4 	.word	0x080144f4
 8008a1c:	08014560 	.word	0x08014560
 8008a20:	08014538 	.word	0x08014538

08008a24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008a28:	f001 f85c 	bl	8009ae4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <tcp_tmr+0x28>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <tcp_tmr+0x28>)
 8008a36:	701a      	strb	r2, [r3, #0]
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <tcp_tmr+0x28>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008a44:	f000 fd0e 	bl	8009464 <tcp_slowtmr>
  }
}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000551 	.word	0x20000551

08008a50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <tcp_remove_listener+0x1c>
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <tcp_remove_listener+0x48>)
 8008a62:	22ff      	movs	r2, #255	; 0xff
 8008a64:	490d      	ldr	r1, [pc, #52]	; (8008a9c <tcp_remove_listener+0x4c>)
 8008a66:	480e      	ldr	r0, [pc, #56]	; (8008aa0 <tcp_remove_listener+0x50>)
 8008a68:	f008 fecc 	bl	8011804 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e00a      	b.n	8008a88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d102      	bne.n	8008a82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f1      	bne.n	8008a72 <tcp_remove_listener+0x22>
    }
  }
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	080144f4 	.word	0x080144f4
 8008a9c:	0801457c 	.word	0x0801457c
 8008aa0:	08014538 	.word	0x08014538

08008aa4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <tcp_listen_closed+0x1c>
 8008ab2:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <tcp_listen_closed+0x60>)
 8008ab4:	f240 1211 	movw	r2, #273	; 0x111
 8008ab8:	4913      	ldr	r1, [pc, #76]	; (8008b08 <tcp_listen_closed+0x64>)
 8008aba:	4814      	ldr	r0, [pc, #80]	; (8008b0c <tcp_listen_closed+0x68>)
 8008abc:	f008 fea2 	bl	8011804 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7d1b      	ldrb	r3, [r3, #20]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d006      	beq.n	8008ad6 <tcp_listen_closed+0x32>
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <tcp_listen_closed+0x60>)
 8008aca:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008ace:	4910      	ldr	r1, [pc, #64]	; (8008b10 <tcp_listen_closed+0x6c>)
 8008ad0:	480e      	ldr	r0, [pc, #56]	; (8008b0c <tcp_listen_closed+0x68>)
 8008ad2:	f008 fe97 	bl	8011804 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	e00b      	b.n	8008af4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008adc:	4a0d      	ldr	r2, [pc, #52]	; (8008b14 <tcp_listen_closed+0x70>)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ffb1 	bl	8008a50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d9f0      	bls.n	8008adc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	080144f4 	.word	0x080144f4
 8008b08:	080145a4 	.word	0x080145a4
 8008b0c:	08014538 	.word	0x08014538
 8008b10:	080145b0 	.word	0x080145b0
 8008b14:	08017ed4 	.word	0x08017ed4

08008b18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008b18:	b5b0      	push	{r4, r5, r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <tcp_close_shutdown+0x20>
 8008b2a:	4b63      	ldr	r3, [pc, #396]	; (8008cb8 <tcp_close_shutdown+0x1a0>)
 8008b2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008b30:	4962      	ldr	r1, [pc, #392]	; (8008cbc <tcp_close_shutdown+0x1a4>)
 8008b32:	4863      	ldr	r0, [pc, #396]	; (8008cc0 <tcp_close_shutdown+0x1a8>)
 8008b34:	f008 fe66 	bl	8011804 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d066      	beq.n	8008c0c <tcp_close_shutdown+0xf4>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7d1b      	ldrb	r3, [r3, #20]
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d003      	beq.n	8008b4e <tcp_close_shutdown+0x36>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7d1b      	ldrb	r3, [r3, #20]
 8008b4a:	2b07      	cmp	r3, #7
 8008b4c:	d15e      	bne.n	8008c0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <tcp_close_shutdown+0x48>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b5e:	d055      	beq.n	8008c0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8b5b      	ldrh	r3, [r3, #26]
 8008b64:	f003 0310 	and.w	r3, r3, #16
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <tcp_close_shutdown+0x62>
 8008b6c:	4b52      	ldr	r3, [pc, #328]	; (8008cb8 <tcp_close_shutdown+0x1a0>)
 8008b6e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008b72:	4954      	ldr	r1, [pc, #336]	; (8008cc4 <tcp_close_shutdown+0x1ac>)
 8008b74:	4852      	ldr	r0, [pc, #328]	; (8008cc0 <tcp_close_shutdown+0x1a8>)
 8008b76:	f008 fe45 	bl	8011804 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008b82:	687d      	ldr	r5, [r7, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	8ad2      	ldrh	r2, [r2, #22]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	8b09      	ldrh	r1, [r1, #24]
 8008b90:	9102      	str	r1, [sp, #8]
 8008b92:	9201      	str	r2, [sp, #4]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	462b      	mov	r3, r5
 8008b98:	4622      	mov	r2, r4
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f005 fd8b 	bl	800e6b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fb6c 	bl	800a280 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008ba8:	4b47      	ldr	r3, [pc, #284]	; (8008cc8 <tcp_close_shutdown+0x1b0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d105      	bne.n	8008bbe <tcp_close_shutdown+0xa6>
 8008bb2:	4b45      	ldr	r3, [pc, #276]	; (8008cc8 <tcp_close_shutdown+0x1b0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4a43      	ldr	r2, [pc, #268]	; (8008cc8 <tcp_close_shutdown+0x1b0>)
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	e013      	b.n	8008be6 <tcp_close_shutdown+0xce>
 8008bbe:	4b42      	ldr	r3, [pc, #264]	; (8008cc8 <tcp_close_shutdown+0x1b0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	e00c      	b.n	8008be0 <tcp_close_shutdown+0xc8>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d104      	bne.n	8008bda <tcp_close_shutdown+0xc2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	60da      	str	r2, [r3, #12]
 8008bd8:	e005      	b.n	8008be6 <tcp_close_shutdown+0xce>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1ef      	bne.n	8008bc6 <tcp_close_shutdown+0xae>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	60da      	str	r2, [r3, #12]
 8008bec:	4b37      	ldr	r3, [pc, #220]	; (8008ccc <tcp_close_shutdown+0x1b4>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008bf2:	4b37      	ldr	r3, [pc, #220]	; (8008cd0 <tcp_close_shutdown+0x1b8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d102      	bne.n	8008c02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008bfc:	f004 f800 	bl	800cc00 <tcp_trigger_input_pcb_close>
 8008c00:	e002      	b.n	8008c08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fed6 	bl	80089b4 <tcp_free>
      }
      return ERR_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e050      	b.n	8008cae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d03b      	beq.n	8008c8c <tcp_close_shutdown+0x174>
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	dc44      	bgt.n	8008ca2 <tcp_close_shutdown+0x18a>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <tcp_close_shutdown+0x10a>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d02a      	beq.n	8008c76 <tcp_close_shutdown+0x15e>
 8008c20:	e03f      	b.n	8008ca2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8adb      	ldrh	r3, [r3, #22]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d021      	beq.n	8008c6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c2a:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <tcp_close_shutdown+0x1bc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d105      	bne.n	8008c40 <tcp_close_shutdown+0x128>
 8008c34:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <tcp_close_shutdown+0x1bc>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4a26      	ldr	r2, [pc, #152]	; (8008cd4 <tcp_close_shutdown+0x1bc>)
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e013      	b.n	8008c68 <tcp_close_shutdown+0x150>
 8008c40:	4b24      	ldr	r3, [pc, #144]	; (8008cd4 <tcp_close_shutdown+0x1bc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60bb      	str	r3, [r7, #8]
 8008c46:	e00c      	b.n	8008c62 <tcp_close_shutdown+0x14a>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d104      	bne.n	8008c5c <tcp_close_shutdown+0x144>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	60da      	str	r2, [r3, #12]
 8008c5a:	e005      	b.n	8008c68 <tcp_close_shutdown+0x150>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	60bb      	str	r3, [r7, #8]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1ef      	bne.n	8008c48 <tcp_close_shutdown+0x130>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fea0 	bl	80089b4 <tcp_free>
      break;
 8008c74:	e01a      	b.n	8008cac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff ff14 	bl	8008aa4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4816      	ldr	r0, [pc, #88]	; (8008cd8 <tcp_close_shutdown+0x1c0>)
 8008c80:	f001 fb4e 	bl	800a320 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff feb1 	bl	80089ec <tcp_free_listen>
      break;
 8008c8a:	e00f      	b.n	8008cac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <tcp_close_shutdown+0x1b0>)
 8008c90:	f001 fb46 	bl	800a320 <tcp_pcb_remove>
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <tcp_close_shutdown+0x1b4>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fe8a 	bl	80089b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008ca0:	e004      	b.n	8008cac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f81a 	bl	8008cdc <tcp_close_shutdown_fin>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	e000      	b.n	8008cae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	080144f4 	.word	0x080144f4
 8008cbc:	080145c8 	.word	0x080145c8
 8008cc0:	08014538 	.word	0x08014538
 8008cc4:	080145e8 	.word	0x080145e8
 8008cc8:	200174e4 	.word	0x200174e4
 8008ccc:	200174e0 	.word	0x200174e0
 8008cd0:	200174f8 	.word	0x200174f8
 8008cd4:	200174f0 	.word	0x200174f0
 8008cd8:	200174ec 	.word	0x200174ec

08008cdc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <tcp_close_shutdown_fin+0x1c>
 8008cea:	4b2e      	ldr	r3, [pc, #184]	; (8008da4 <tcp_close_shutdown_fin+0xc8>)
 8008cec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008cf0:	492d      	ldr	r1, [pc, #180]	; (8008da8 <tcp_close_shutdown_fin+0xcc>)
 8008cf2:	482e      	ldr	r0, [pc, #184]	; (8008dac <tcp_close_shutdown_fin+0xd0>)
 8008cf4:	f008 fd86 	bl	8011804 <iprintf>

  switch (pcb->state) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	7d1b      	ldrb	r3, [r3, #20]
 8008cfc:	2b07      	cmp	r3, #7
 8008cfe:	d020      	beq.n	8008d42 <tcp_close_shutdown_fin+0x66>
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	dc2b      	bgt.n	8008d5c <tcp_close_shutdown_fin+0x80>
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d002      	beq.n	8008d0e <tcp_close_shutdown_fin+0x32>
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d00d      	beq.n	8008d28 <tcp_close_shutdown_fin+0x4c>
 8008d0c:	e026      	b.n	8008d5c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f004 fde0 	bl	800d8d4 <tcp_send_fin>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11f      	bne.n	8008d60 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2205      	movs	r2, #5
 8008d24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d26:	e01b      	b.n	8008d60 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f004 fdd3 	bl	800d8d4 <tcp_send_fin>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d114      	bne.n	8008d64 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d40:	e010      	b.n	8008d64 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f004 fdc6 	bl	800d8d4 <tcp_send_fin>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d109      	bne.n	8008d68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2209      	movs	r2, #9
 8008d58:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d5a:	e005      	b.n	8008d68 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e01c      	b.n	8008d9a <tcp_close_shutdown_fin+0xbe>
      break;
 8008d60:	bf00      	nop
 8008d62:	e002      	b.n	8008d6a <tcp_close_shutdown_fin+0x8e>
      break;
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <tcp_close_shutdown_fin+0x8e>
      break;
 8008d68:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f004 feec 	bl	800db50 <tcp_output>
 8008d78:	e00d      	b.n	8008d96 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d82:	d108      	bne.n	8008d96 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8b5b      	ldrh	r3, [r3, #26]
 8008d88:	f043 0308 	orr.w	r3, r3, #8
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e001      	b.n	8008d9a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	080144f4 	.word	0x080144f4
 8008da8:	080145a4 	.word	0x080145a4
 8008dac:	08014538 	.word	0x08014538

08008db0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <tcp_close+0x22>
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <tcp_close+0x4c>)
 8008dc0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008dc4:	490e      	ldr	r1, [pc, #56]	; (8008e00 <tcp_close+0x50>)
 8008dc6:	480f      	ldr	r0, [pc, #60]	; (8008e04 <tcp_close+0x54>)
 8008dc8:	f008 fd1c 	bl	8011804 <iprintf>
 8008dcc:	f06f 030f 	mvn.w	r3, #15
 8008dd0:	e00f      	b.n	8008df2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7d1b      	ldrb	r3, [r3, #20]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d006      	beq.n	8008de8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	8b5b      	ldrh	r3, [r3, #26]
 8008dde:	f043 0310 	orr.w	r3, r3, #16
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008de8:	2101      	movs	r1, #1
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fe94 	bl	8008b18 <tcp_close_shutdown>
 8008df0:	4603      	mov	r3, r0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	080144f4 	.word	0x080144f4
 8008e00:	08014604 	.word	0x08014604
 8008e04:	08014538 	.word	0x08014538

08008e08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d107      	bne.n	8008e28 <tcp_abandon+0x20>
 8008e18:	4b52      	ldr	r3, [pc, #328]	; (8008f64 <tcp_abandon+0x15c>)
 8008e1a:	f240 223d 	movw	r2, #573	; 0x23d
 8008e1e:	4952      	ldr	r1, [pc, #328]	; (8008f68 <tcp_abandon+0x160>)
 8008e20:	4852      	ldr	r0, [pc, #328]	; (8008f6c <tcp_abandon+0x164>)
 8008e22:	f008 fcef 	bl	8011804 <iprintf>
 8008e26:	e099      	b.n	8008f5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d106      	bne.n	8008e3e <tcp_abandon+0x36>
 8008e30:	4b4c      	ldr	r3, [pc, #304]	; (8008f64 <tcp_abandon+0x15c>)
 8008e32:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008e36:	494e      	ldr	r1, [pc, #312]	; (8008f70 <tcp_abandon+0x168>)
 8008e38:	484c      	ldr	r0, [pc, #304]	; (8008f6c <tcp_abandon+0x164>)
 8008e3a:	f008 fce3 	bl	8011804 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7d1b      	ldrb	r3, [r3, #20]
 8008e42:	2b0a      	cmp	r3, #10
 8008e44:	d107      	bne.n	8008e56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	484a      	ldr	r0, [pc, #296]	; (8008f74 <tcp_abandon+0x16c>)
 8008e4a:	f001 fa69 	bl	800a320 <tcp_pcb_remove>
    tcp_free(pcb);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff fdb0 	bl	80089b4 <tcp_free>
 8008e54:	e082      	b.n	8008f5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7d1b      	ldrb	r3, [r3, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d126      	bne.n	8008ece <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	8adb      	ldrh	r3, [r3, #22]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02e      	beq.n	8008ee6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e88:	4b3b      	ldr	r3, [pc, #236]	; (8008f78 <tcp_abandon+0x170>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d105      	bne.n	8008e9e <tcp_abandon+0x96>
 8008e92:	4b39      	ldr	r3, [pc, #228]	; (8008f78 <tcp_abandon+0x170>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <tcp_abandon+0x170>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	e013      	b.n	8008ec6 <tcp_abandon+0xbe>
 8008e9e:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <tcp_abandon+0x170>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e00c      	b.n	8008ec0 <tcp_abandon+0xb8>
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d104      	bne.n	8008eba <tcp_abandon+0xb2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	e005      	b.n	8008ec6 <tcp_abandon+0xbe>
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1ef      	bne.n	8008ea6 <tcp_abandon+0x9e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	60da      	str	r2, [r3, #12]
 8008ecc:	e00b      	b.n	8008ee6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8adb      	ldrh	r3, [r3, #22]
 8008ed6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4828      	ldr	r0, [pc, #160]	; (8008f7c <tcp_abandon+0x174>)
 8008edc:	f001 fa20 	bl	800a320 <tcp_pcb_remove>
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <tcp_abandon+0x178>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fed6 	bl	8009ca4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fecd 	bl	8009ca4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fec4 	bl	8009ca4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	8b12      	ldrh	r2, [r2, #24]
 8008f2c:	9202      	str	r2, [sp, #8]
 8008f2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f30:	9201      	str	r2, [sp, #4]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	460b      	mov	r3, r1
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	69b9      	ldr	r1, [r7, #24]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f005 fbbc 	bl	800e6b8 <tcp_rst>
    }
    last_state = pcb->state;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7d1b      	ldrb	r3, [r3, #20]
 8008f44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fd34 	bl	80089b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <tcp_abandon+0x154>
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f06f 010c 	mvn.w	r1, #12
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	4798      	blx	r3
  }
}
 8008f5c:	3728      	adds	r7, #40	; 0x28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	080144f4 	.word	0x080144f4
 8008f68:	08014638 	.word	0x08014638
 8008f6c:	08014538 	.word	0x08014538
 8008f70:	08014654 	.word	0x08014654
 8008f74:	200174f4 	.word	0x200174f4
 8008f78:	200174f0 	.word	0x200174f0
 8008f7c:	200174e4 	.word	0x200174e4
 8008f80:	200174e0 	.word	0x200174e0

08008f84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ff3a 	bl	8008e08 <tcp_abandon>
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008faa:	2304      	movs	r3, #4
 8008fac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008fb4:	4b3e      	ldr	r3, [pc, #248]	; (80090b0 <tcp_bind+0x114>)
 8008fb6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <tcp_bind+0x36>
 8008fbe:	4b3d      	ldr	r3, [pc, #244]	; (80090b4 <tcp_bind+0x118>)
 8008fc0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008fc4:	493c      	ldr	r1, [pc, #240]	; (80090b8 <tcp_bind+0x11c>)
 8008fc6:	483d      	ldr	r0, [pc, #244]	; (80090bc <tcp_bind+0x120>)
 8008fc8:	f008 fc1c 	bl	8011804 <iprintf>
 8008fcc:	f06f 030f 	mvn.w	r3, #15
 8008fd0:	e06a      	b.n	80090a8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	7d1b      	ldrb	r3, [r3, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <tcp_bind+0x52>
 8008fda:	4b36      	ldr	r3, [pc, #216]	; (80090b4 <tcp_bind+0x118>)
 8008fdc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008fe0:	4937      	ldr	r1, [pc, #220]	; (80090c0 <tcp_bind+0x124>)
 8008fe2:	4836      	ldr	r0, [pc, #216]	; (80090bc <tcp_bind+0x120>)
 8008fe4:	f008 fc0e 	bl	8011804 <iprintf>
 8008fe8:	f06f 0305 	mvn.w	r3, #5
 8008fec:	e05c      	b.n	80090a8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008ff4:	f000 f9f0 	bl	80093d8 <tcp_new_port>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d135      	bne.n	800906e <tcp_bind+0xd2>
      return ERR_BUF;
 8009002:	f06f 0301 	mvn.w	r3, #1
 8009006:	e04f      	b.n	80090a8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e02b      	b.n	8009066 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800900e:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <tcp_bind+0x128>)
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	e01e      	b.n	800905a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	8adb      	ldrh	r3, [r3, #22]
 8009020:	88fa      	ldrh	r2, [r7, #6]
 8009022:	429a      	cmp	r2, r3
 8009024:	d116      	bne.n	8009054 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009026:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009028:	2b00      	cmp	r3, #0
 800902a:	d010      	beq.n	800904e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <tcp_bind+0xb2>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d009      	beq.n	800904e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800904a:	429a      	cmp	r2, r3
 800904c:	d102      	bne.n	8009054 <tcp_bind+0xb8>
              return ERR_USE;
 800904e:	f06f 0307 	mvn.w	r3, #7
 8009052:	e029      	b.n	80090a8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	61bb      	str	r3, [r7, #24]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1dd      	bne.n	800901c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3301      	adds	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	429a      	cmp	r2, r3
 800906c:	dbcf      	blt.n	800900e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <tcp_bind+0xf2>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <tcp_bind+0xec>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	e000      	b.n	800908a <tcp_bind+0xee>
 8009088:	2300      	movs	r3, #0
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	88fa      	ldrh	r2, [r7, #6]
 8009092:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <tcp_bind+0x12c>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	60da      	str	r2, [r3, #12]
 800909c:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <tcp_bind+0x12c>)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	f005 fccb 	bl	800ea3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	08017efc 	.word	0x08017efc
 80090b4:	080144f4 	.word	0x080144f4
 80090b8:	08014688 	.word	0x08014688
 80090bc:	08014538 	.word	0x08014538
 80090c0:	080146a0 	.word	0x080146a0
 80090c4:	08017ed4 	.word	0x08017ed4
 80090c8:	200174f0 	.word	0x200174f0

080090cc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <tcp_accept_null+0x22>
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <tcp_accept_null+0x34>)
 80090e2:	f240 320f 	movw	r2, #783	; 0x30f
 80090e6:	4907      	ldr	r1, [pc, #28]	; (8009104 <tcp_accept_null+0x38>)
 80090e8:	4807      	ldr	r0, [pc, #28]	; (8009108 <tcp_accept_null+0x3c>)
 80090ea:	f008 fb8b 	bl	8011804 <iprintf>

  tcp_abort(pcb);
 80090ee:	68b8      	ldr	r0, [r7, #8]
 80090f0:	f7ff ff48 	bl	8008f84 <tcp_abort>

  return ERR_ABRT;
 80090f4:	f06f 030c 	mvn.w	r3, #12
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	080144f4 	.word	0x080144f4
 8009104:	080146c8 	.word	0x080146c8
 8009108:	08014538 	.word	0x08014538

0800910c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	2200      	movs	r2, #0
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f806 	bl	8009130 <tcp_listen_with_backlog_and_err>
 8009124:	4603      	mov	r3, r0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	460b      	mov	r3, r1
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d109      	bne.n	800915c <tcp_listen_with_backlog_and_err+0x2c>
 8009148:	4b47      	ldr	r3, [pc, #284]	; (8009268 <tcp_listen_with_backlog_and_err+0x138>)
 800914a:	f240 3259 	movw	r2, #857	; 0x359
 800914e:	4947      	ldr	r1, [pc, #284]	; (800926c <tcp_listen_with_backlog_and_err+0x13c>)
 8009150:	4847      	ldr	r0, [pc, #284]	; (8009270 <tcp_listen_with_backlog_and_err+0x140>)
 8009152:	f008 fb57 	bl	8011804 <iprintf>
 8009156:	23f0      	movs	r3, #240	; 0xf0
 8009158:	76fb      	strb	r3, [r7, #27]
 800915a:	e079      	b.n	8009250 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	7d1b      	ldrb	r3, [r3, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <tcp_listen_with_backlog_and_err+0x48>
 8009164:	4b40      	ldr	r3, [pc, #256]	; (8009268 <tcp_listen_with_backlog_and_err+0x138>)
 8009166:	f240 325a 	movw	r2, #858	; 0x35a
 800916a:	4942      	ldr	r1, [pc, #264]	; (8009274 <tcp_listen_with_backlog_and_err+0x144>)
 800916c:	4840      	ldr	r0, [pc, #256]	; (8009270 <tcp_listen_with_backlog_and_err+0x140>)
 800916e:	f008 fb49 	bl	8011804 <iprintf>
 8009172:	23f1      	movs	r3, #241	; 0xf1
 8009174:	76fb      	strb	r3, [r7, #27]
 8009176:	e06b      	b.n	8009250 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	7d1b      	ldrb	r3, [r3, #20]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d104      	bne.n	800918a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009184:	23f7      	movs	r3, #247	; 0xf7
 8009186:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009188:	e062      	b.n	8009250 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800918a:	2002      	movs	r0, #2
 800918c:	f7fe fb10 	bl	80077b0 <memp_malloc>
 8009190:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009198:	23ff      	movs	r3, #255	; 0xff
 800919a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800919c:	e058      	b.n	8009250 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691a      	ldr	r2, [r3, #16]
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8ada      	ldrh	r2, [r3, #22]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2201      	movs	r2, #1
 80091b2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7d5a      	ldrb	r2, [r3, #21]
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7a5a      	ldrb	r2, [r3, #9]
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2200      	movs	r2, #0
 80091c8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	7ada      	ldrb	r2, [r3, #11]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	7a9a      	ldrb	r2, [r3, #10]
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8adb      	ldrh	r3, [r3, #22]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d021      	beq.n	800922e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80091ea:	4b23      	ldr	r3, [pc, #140]	; (8009278 <tcp_listen_with_backlog_and_err+0x148>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d105      	bne.n	8009200 <tcp_listen_with_backlog_and_err+0xd0>
 80091f4:	4b20      	ldr	r3, [pc, #128]	; (8009278 <tcp_listen_with_backlog_and_err+0x148>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <tcp_listen_with_backlog_and_err+0x148>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	e013      	b.n	8009228 <tcp_listen_with_backlog_and_err+0xf8>
 8009200:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <tcp_listen_with_backlog_and_err+0x148>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e00c      	b.n	8009222 <tcp_listen_with_backlog_and_err+0xf2>
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	429a      	cmp	r2, r3
 8009210:	d104      	bne.n	800921c <tcp_listen_with_backlog_and_err+0xec>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	e005      	b.n	8009228 <tcp_listen_with_backlog_and_err+0xf8>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1ef      	bne.n	8009208 <tcp_listen_with_backlog_and_err+0xd8>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fbc0 	bl	80089b4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	4a11      	ldr	r2, [pc, #68]	; (800927c <tcp_listen_with_backlog_and_err+0x14c>)
 8009238:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <tcp_listen_with_backlog_and_err+0x150>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	4a0f      	ldr	r2, [pc, #60]	; (8009280 <tcp_listen_with_backlog_and_err+0x150>)
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	f005 fbf8 	bl	800ea3c <tcp_timer_needed>
  res = ERR_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7efa      	ldrb	r2, [r7, #27]
 800925a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	080144f4 	.word	0x080144f4
 800926c:	080146e8 	.word	0x080146e8
 8009270:	08014538 	.word	0x08014538
 8009274:	08014718 	.word	0x08014718
 8009278:	200174f0 	.word	0x200174f0
 800927c:	080090cd 	.word	0x080090cd
 8009280:	200174ec 	.word	0x200174ec

08009284 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <tcp_update_rcv_ann_wnd+0x1c>
 8009292:	4b25      	ldr	r3, [pc, #148]	; (8009328 <tcp_update_rcv_ann_wnd+0xa4>)
 8009294:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009298:	4924      	ldr	r1, [pc, #144]	; (800932c <tcp_update_rcv_ann_wnd+0xa8>)
 800929a:	4825      	ldr	r0, [pc, #148]	; (8009330 <tcp_update_rcv_ann_wnd+0xac>)
 800929c:	f008 fab2 	bl	8011804 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092a8:	4413      	add	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80092b4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80092b8:	bf28      	it	cs
 80092ba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80092be:	b292      	uxth	r2, r2
 80092c0:	4413      	add	r3, r2
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db08      	blt.n	80092dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	e020      	b.n	800931e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	dd03      	ble.n	80092f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092f0:	e014      	b.n	800931c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009304:	d306      	bcc.n	8009314 <tcp_update_rcv_ann_wnd+0x90>
 8009306:	4b08      	ldr	r3, [pc, #32]	; (8009328 <tcp_update_rcv_ann_wnd+0xa4>)
 8009308:	f240 32b6 	movw	r2, #950	; 0x3b6
 800930c:	4909      	ldr	r1, [pc, #36]	; (8009334 <tcp_update_rcv_ann_wnd+0xb0>)
 800930e:	4808      	ldr	r0, [pc, #32]	; (8009330 <tcp_update_rcv_ann_wnd+0xac>)
 8009310:	f008 fa78 	bl	8011804 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800931c:	2300      	movs	r3, #0
  }
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	080144f4 	.word	0x080144f4
 800932c:	08014750 	.word	0x08014750
 8009330:	08014538 	.word	0x08014538
 8009334:	08014774 	.word	0x08014774

08009338 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d107      	bne.n	800935a <tcp_recved+0x22>
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <tcp_recved+0x90>)
 800934c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009350:	491e      	ldr	r1, [pc, #120]	; (80093cc <tcp_recved+0x94>)
 8009352:	481f      	ldr	r0, [pc, #124]	; (80093d0 <tcp_recved+0x98>)
 8009354:	f008 fa56 	bl	8011804 <iprintf>
 8009358:	e032      	b.n	80093c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7d1b      	ldrb	r3, [r3, #20]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d106      	bne.n	8009370 <tcp_recved+0x38>
 8009362:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <tcp_recved+0x90>)
 8009364:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009368:	491a      	ldr	r1, [pc, #104]	; (80093d4 <tcp_recved+0x9c>)
 800936a:	4819      	ldr	r0, [pc, #100]	; (80093d0 <tcp_recved+0x98>)
 800936c:	f008 fa4a 	bl	8011804 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009374:	887b      	ldrh	r3, [r7, #2]
 8009376:	4413      	add	r3, r2
 8009378:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800937a:	89fb      	ldrh	r3, [r7, #14]
 800937c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009380:	d804      	bhi.n	800938c <tcp_recved+0x54>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009386:	89fa      	ldrh	r2, [r7, #14]
 8009388:	429a      	cmp	r2, r3
 800938a:	d204      	bcs.n	8009396 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009392:	851a      	strh	r2, [r3, #40]	; 0x28
 8009394:	e002      	b.n	800939c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	89fa      	ldrh	r2, [r7, #14]
 800939a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff71 	bl	8009284 <tcp_update_rcv_ann_wnd>
 80093a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80093aa:	d309      	bcc.n	80093c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8b5b      	ldrh	r3, [r3, #26]
 80093b0:	f043 0302 	orr.w	r3, r3, #2
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f004 fbc8 	bl	800db50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	080144f4 	.word	0x080144f4
 80093cc:	08014790 	.word	0x08014790
 80093d0:	08014538 	.word	0x08014538
 80093d4:	080147a8 	.word	0x080147a8

080093d8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80093e2:	4b1e      	ldr	r3, [pc, #120]	; (800945c <tcp_new_port+0x84>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	4b1c      	ldr	r3, [pc, #112]	; (800945c <tcp_new_port+0x84>)
 80093ec:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80093ee:	4b1b      	ldr	r3, [pc, #108]	; (800945c <tcp_new_port+0x84>)
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d103      	bne.n	8009402 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80093fa:	4b18      	ldr	r3, [pc, #96]	; (800945c <tcp_new_port+0x84>)
 80093fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009400:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009402:	2300      	movs	r3, #0
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	e01e      	b.n	8009446 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	4a15      	ldr	r2, [pc, #84]	; (8009460 <tcp_new_port+0x88>)
 800940c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	e011      	b.n	800943a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	8ada      	ldrh	r2, [r3, #22]
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <tcp_new_port+0x84>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d108      	bne.n	8009434 <tcp_new_port+0x5c>
        n++;
 8009422:	88bb      	ldrh	r3, [r7, #4]
 8009424:	3301      	adds	r3, #1
 8009426:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009428:	88bb      	ldrh	r3, [r7, #4]
 800942a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942e:	d3d8      	bcc.n	80093e2 <tcp_new_port+0xa>
          return 0;
 8009430:	2300      	movs	r3, #0
 8009432:	e00d      	b.n	8009450 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1ea      	bne.n	8009416 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	3301      	adds	r3, #1
 8009444:	71fb      	strb	r3, [r7, #7]
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b03      	cmp	r3, #3
 800944a:	d9dd      	bls.n	8009408 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800944c:	4b03      	ldr	r3, [pc, #12]	; (800945c <tcp_new_port+0x84>)
 800944e:	881b      	ldrh	r3, [r3, #0]
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	20000026 	.word	0x20000026
 8009460:	08017ed4 	.word	0x08017ed4

08009464 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009464:	b5b0      	push	{r4, r5, r7, lr}
 8009466:	b090      	sub	sp, #64	; 0x40
 8009468:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009470:	4b94      	ldr	r3, [pc, #592]	; (80096c4 <tcp_slowtmr+0x260>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	4a93      	ldr	r2, [pc, #588]	; (80096c4 <tcp_slowtmr+0x260>)
 8009478:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800947a:	4b93      	ldr	r3, [pc, #588]	; (80096c8 <tcp_slowtmr+0x264>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	3301      	adds	r3, #1
 8009480:	b2da      	uxtb	r2, r3
 8009482:	4b91      	ldr	r3, [pc, #580]	; (80096c8 <tcp_slowtmr+0x264>)
 8009484:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800948a:	4b90      	ldr	r3, [pc, #576]	; (80096cc <tcp_slowtmr+0x268>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009490:	e29f      	b.n	80099d2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	7d1b      	ldrb	r3, [r3, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <tcp_slowtmr+0x44>
 800949a:	4b8d      	ldr	r3, [pc, #564]	; (80096d0 <tcp_slowtmr+0x26c>)
 800949c:	f240 42be 	movw	r2, #1214	; 0x4be
 80094a0:	498c      	ldr	r1, [pc, #560]	; (80096d4 <tcp_slowtmr+0x270>)
 80094a2:	488d      	ldr	r0, [pc, #564]	; (80096d8 <tcp_slowtmr+0x274>)
 80094a4:	f008 f9ae 	bl	8011804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	7d1b      	ldrb	r3, [r3, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d106      	bne.n	80094be <tcp_slowtmr+0x5a>
 80094b0:	4b87      	ldr	r3, [pc, #540]	; (80096d0 <tcp_slowtmr+0x26c>)
 80094b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80094b6:	4989      	ldr	r1, [pc, #548]	; (80096dc <tcp_slowtmr+0x278>)
 80094b8:	4887      	ldr	r0, [pc, #540]	; (80096d8 <tcp_slowtmr+0x274>)
 80094ba:	f008 f9a3 	bl	8011804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	2b0a      	cmp	r3, #10
 80094c4:	d106      	bne.n	80094d4 <tcp_slowtmr+0x70>
 80094c6:	4b82      	ldr	r3, [pc, #520]	; (80096d0 <tcp_slowtmr+0x26c>)
 80094c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80094cc:	4984      	ldr	r1, [pc, #528]	; (80096e0 <tcp_slowtmr+0x27c>)
 80094ce:	4882      	ldr	r0, [pc, #520]	; (80096d8 <tcp_slowtmr+0x274>)
 80094d0:	f008 f998 	bl	8011804 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	7f9a      	ldrb	r2, [r3, #30]
 80094d8:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <tcp_slowtmr+0x264>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d105      	bne.n	80094ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80094ea:	e272      	b.n	80099d2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80094ec:	4b76      	ldr	r3, [pc, #472]	; (80096c8 <tcp_slowtmr+0x264>)
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	7d1b      	ldrb	r3, [r3, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d10a      	bne.n	800951e <tcp_slowtmr+0xba>
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800950e:	2b05      	cmp	r3, #5
 8009510:	d905      	bls.n	800951e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009516:	3301      	adds	r3, #1
 8009518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800951c:	e11e      	b.n	800975c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009524:	2b0b      	cmp	r3, #11
 8009526:	d905      	bls.n	8009534 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800952c:	3301      	adds	r3, #1
 800952e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009532:	e113      	b.n	800975c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800953a:	2b00      	cmp	r3, #0
 800953c:	d075      	beq.n	800962a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	2b00      	cmp	r3, #0
 8009544:	d006      	beq.n	8009554 <tcp_slowtmr+0xf0>
 8009546:	4b62      	ldr	r3, [pc, #392]	; (80096d0 <tcp_slowtmr+0x26c>)
 8009548:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800954c:	4965      	ldr	r1, [pc, #404]	; (80096e4 <tcp_slowtmr+0x280>)
 800954e:	4862      	ldr	r0, [pc, #392]	; (80096d8 <tcp_slowtmr+0x274>)
 8009550:	f008 f958 	bl	8011804 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <tcp_slowtmr+0x106>
 800955c:	4b5c      	ldr	r3, [pc, #368]	; (80096d0 <tcp_slowtmr+0x26c>)
 800955e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009562:	4961      	ldr	r1, [pc, #388]	; (80096e8 <tcp_slowtmr+0x284>)
 8009564:	485c      	ldr	r0, [pc, #368]	; (80096d8 <tcp_slowtmr+0x274>)
 8009566:	f008 f94d 	bl	8011804 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009570:	2b0b      	cmp	r3, #11
 8009572:	d905      	bls.n	8009580 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009578:	3301      	adds	r3, #1
 800957a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800957e:	e0ed      	b.n	800975c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009586:	3b01      	subs	r3, #1
 8009588:	4a58      	ldr	r2, [pc, #352]	; (80096ec <tcp_slowtmr+0x288>)
 800958a:	5cd3      	ldrb	r3, [r2, r3]
 800958c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009594:	7c7a      	ldrb	r2, [r7, #17]
 8009596:	429a      	cmp	r2, r3
 8009598:	d907      	bls.n	80095aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80095a0:	3301      	adds	r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80095b0:	7c7a      	ldrb	r2, [r7, #17]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	f200 80d2 	bhi.w	800975c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80095b8:	2301      	movs	r3, #1
 80095ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d108      	bne.n	80095d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80095c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095c8:	f005 f96a 	bl	800e8a0 <tcp_zero_window_probe>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d014      	beq.n	80095fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80095d2:	2300      	movs	r3, #0
 80095d4:	623b      	str	r3, [r7, #32]
 80095d6:	e011      	b.n	80095fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095de:	4619      	mov	r1, r3
 80095e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095e2:	f004 f82f 	bl	800d644 <tcp_split_unsent_seg>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d107      	bne.n	80095fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80095ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ee:	f004 faaf 	bl	800db50 <tcp_output>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80ac 	beq.w	800975c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009612:	2b06      	cmp	r3, #6
 8009614:	f200 80a2 	bhi.w	800975c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800961e:	3301      	adds	r3, #1
 8009620:	b2da      	uxtb	r2, r3
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009628:	e098      	b.n	800975c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	db0f      	blt.n	8009654 <tcp_slowtmr+0x1f0>
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800963a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800963e:	4293      	cmp	r3, r2
 8009640:	d008      	beq.n	8009654 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009648:	b29b      	uxth	r3, r3
 800964a:	3301      	adds	r3, #1
 800964c:	b29b      	uxth	r3, r3
 800964e:	b21a      	sxth	r2, r3
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009660:	429a      	cmp	r2, r3
 8009662:	db7b      	blt.n	800975c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009666:	f004 fd65 	bl	800e134 <tcp_rexmit_rto_prepare>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d007      	beq.n	8009680 <tcp_slowtmr+0x21c>
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009674:	2b00      	cmp	r3, #0
 8009676:	d171      	bne.n	800975c <tcp_slowtmr+0x2f8>
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d06d      	beq.n	800975c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	7d1b      	ldrb	r3, [r3, #20]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d03a      	beq.n	80096fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800968e:	2b0c      	cmp	r3, #12
 8009690:	bf28      	it	cs
 8009692:	230c      	movcs	r3, #12
 8009694:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800969c:	10db      	asrs	r3, r3, #3
 800969e:	b21b      	sxth	r3, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80096a8:	4413      	add	r3, r2
 80096aa:	7efa      	ldrb	r2, [r7, #27]
 80096ac:	4910      	ldr	r1, [pc, #64]	; (80096f0 <tcp_slowtmr+0x28c>)
 80096ae:	5c8a      	ldrb	r2, [r1, r2]
 80096b0:	4093      	lsls	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80096ba:	4293      	cmp	r3, r2
 80096bc:	dc1a      	bgt.n	80096f4 <tcp_slowtmr+0x290>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	b21a      	sxth	r2, r3
 80096c2:	e019      	b.n	80096f8 <tcp_slowtmr+0x294>
 80096c4:	200174e8 	.word	0x200174e8
 80096c8:	20000552 	.word	0x20000552
 80096cc:	200174e4 	.word	0x200174e4
 80096d0:	080144f4 	.word	0x080144f4
 80096d4:	08014838 	.word	0x08014838
 80096d8:	08014538 	.word	0x08014538
 80096dc:	08014864 	.word	0x08014864
 80096e0:	08014890 	.word	0x08014890
 80096e4:	080148c0 	.word	0x080148c0
 80096e8:	080148f4 	.word	0x080148f4
 80096ec:	08017ecc 	.word	0x08017ecc
 80096f0:	08017ebc 	.word	0x08017ebc
 80096f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2200      	movs	r2, #0
 8009702:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009710:	4293      	cmp	r3, r2
 8009712:	bf28      	it	cs
 8009714:	4613      	movcs	r3, r2
 8009716:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009718:	8a7b      	ldrh	r3, [r7, #18]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	b29b      	uxth	r3, r3
 8009732:	429a      	cmp	r2, r3
 8009734:	d206      	bcs.n	8009744 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	2200      	movs	r2, #0
 8009752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009758:	f004 fd5c 	bl	800e214 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	7d1b      	ldrb	r3, [r3, #20]
 8009760:	2b06      	cmp	r3, #6
 8009762:	d111      	bne.n	8009788 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	8b5b      	ldrh	r3, [r3, #26]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009770:	4b9d      	ldr	r3, [pc, #628]	; (80099e8 <tcp_slowtmr+0x584>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b28      	cmp	r3, #40	; 0x28
 800977c:	d904      	bls.n	8009788 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800977e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009782:	3301      	adds	r3, #1
 8009784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	7a5b      	ldrb	r3, [r3, #9]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d04c      	beq.n	800982e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009798:	2b04      	cmp	r3, #4
 800979a:	d003      	beq.n	80097a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80097a0:	2b07      	cmp	r3, #7
 80097a2:	d144      	bne.n	800982e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097a4:	4b90      	ldr	r3, [pc, #576]	; (80099e8 <tcp_slowtmr+0x584>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097b4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80097b8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80097bc:	498b      	ldr	r1, [pc, #556]	; (80099ec <tcp_slowtmr+0x588>)
 80097be:	fba1 1303 	umull	r1, r3, r1, r3
 80097c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d90a      	bls.n	80097de <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80097c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097cc:	3301      	adds	r3, #1
 80097ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80097d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097d6:	3301      	adds	r3, #1
 80097d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80097dc:	e027      	b.n	800982e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097de:	4b82      	ldr	r3, [pc, #520]	; (80099e8 <tcp_slowtmr+0x584>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80097ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80097f4:	4618      	mov	r0, r3
 80097f6:	4b7e      	ldr	r3, [pc, #504]	; (80099f0 <tcp_slowtmr+0x58c>)
 80097f8:	fb03 f300 	mul.w	r3, r3, r0
 80097fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80097fe:	497b      	ldr	r1, [pc, #492]	; (80099ec <tcp_slowtmr+0x588>)
 8009800:	fba1 1303 	umull	r1, r3, r1, r3
 8009804:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009806:	429a      	cmp	r2, r3
 8009808:	d911      	bls.n	800982e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800980a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800980c:	f005 f808 	bl	800e820 <tcp_keepalive>
 8009810:	4603      	mov	r3, r0
 8009812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009816:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800981a:	2b00      	cmp	r3, #0
 800981c:	d107      	bne.n	800982e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009824:	3301      	adds	r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009832:	2b00      	cmp	r3, #0
 8009834:	d011      	beq.n	800985a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009836:	4b6c      	ldr	r3, [pc, #432]	; (80099e8 <tcp_slowtmr+0x584>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009846:	4619      	mov	r1, r3
 8009848:	460b      	mov	r3, r1
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	440b      	add	r3, r1
 800984e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009856:	f000 fec7 	bl	800a5e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	7d1b      	ldrb	r3, [r3, #20]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d10b      	bne.n	800987a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009862:	4b61      	ldr	r3, [pc, #388]	; (80099e8 <tcp_slowtmr+0x584>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b28      	cmp	r3, #40	; 0x28
 800986e:	d904      	bls.n	800987a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009874:	3301      	adds	r3, #1
 8009876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	2b09      	cmp	r3, #9
 8009880:	d10b      	bne.n	800989a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009882:	4b59      	ldr	r3, [pc, #356]	; (80099e8 <tcp_slowtmr+0x584>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2bf0      	cmp	r3, #240	; 0xf0
 800988e:	d904      	bls.n	800989a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009894:	3301      	adds	r3, #1
 8009896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800989a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d060      	beq.n	8009964 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80098a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80098aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ac:	f000 fce8 	bl	800a280 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d010      	beq.n	80098d8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80098b6:	4b4f      	ldr	r3, [pc, #316]	; (80099f4 <tcp_slowtmr+0x590>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098bc:	429a      	cmp	r2, r3
 80098be:	d106      	bne.n	80098ce <tcp_slowtmr+0x46a>
 80098c0:	4b4d      	ldr	r3, [pc, #308]	; (80099f8 <tcp_slowtmr+0x594>)
 80098c2:	f240 526d 	movw	r2, #1389	; 0x56d
 80098c6:	494d      	ldr	r1, [pc, #308]	; (80099fc <tcp_slowtmr+0x598>)
 80098c8:	484d      	ldr	r0, [pc, #308]	; (8009a00 <tcp_slowtmr+0x59c>)
 80098ca:	f007 ff9b 	bl	8011804 <iprintf>
        prev->next = pcb->next;
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	e00f      	b.n	80098f8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80098d8:	4b46      	ldr	r3, [pc, #280]	; (80099f4 <tcp_slowtmr+0x590>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d006      	beq.n	80098f0 <tcp_slowtmr+0x48c>
 80098e2:	4b45      	ldr	r3, [pc, #276]	; (80099f8 <tcp_slowtmr+0x594>)
 80098e4:	f240 5271 	movw	r2, #1393	; 0x571
 80098e8:	4946      	ldr	r1, [pc, #280]	; (8009a04 <tcp_slowtmr+0x5a0>)
 80098ea:	4845      	ldr	r0, [pc, #276]	; (8009a00 <tcp_slowtmr+0x59c>)
 80098ec:	f007 ff8a 	bl	8011804 <iprintf>
        tcp_active_pcbs = pcb->next;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	4a3f      	ldr	r2, [pc, #252]	; (80099f4 <tcp_slowtmr+0x590>)
 80098f6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80098f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d013      	beq.n	8009928 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009908:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	3304      	adds	r3, #4
 800990e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009910:	8ad2      	ldrh	r2, [r2, #22]
 8009912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009914:	8b09      	ldrh	r1, [r1, #24]
 8009916:	9102      	str	r1, [sp, #8]
 8009918:	9201      	str	r2, [sp, #4]
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462b      	mov	r3, r5
 800991e:	4622      	mov	r2, r4
 8009920:	4601      	mov	r1, r0
 8009922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009924:	f004 fec8 	bl	800e6b8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	7d1b      	ldrb	r3, [r3, #20]
 8009932:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800993e:	6838      	ldr	r0, [r7, #0]
 8009940:	f7ff f838 	bl	80089b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009944:	4b30      	ldr	r3, [pc, #192]	; (8009a08 <tcp_slowtmr+0x5a4>)
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <tcp_slowtmr+0x4f6>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f06f 010c 	mvn.w	r1, #12
 8009956:	68b8      	ldr	r0, [r7, #8]
 8009958:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800995a:	4b2b      	ldr	r3, [pc, #172]	; (8009a08 <tcp_slowtmr+0x5a4>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d037      	beq.n	80099d2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009962:	e590      	b.n	8009486 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	7f1b      	ldrb	r3, [r3, #28]
 8009972:	3301      	adds	r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	7f1a      	ldrb	r2, [r3, #28]
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	7f5b      	ldrb	r3, [r3, #29]
 8009982:	429a      	cmp	r2, r3
 8009984:	d325      	bcc.n	80099d2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	2200      	movs	r2, #0
 800998a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800998c:	4b1e      	ldr	r3, [pc, #120]	; (8009a08 <tcp_slowtmr+0x5a4>)
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <tcp_slowtmr+0x550>
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a4:	6912      	ldr	r2, [r2, #16]
 80099a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80099b2:	e002      	b.n	80099ba <tcp_slowtmr+0x556>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <tcp_slowtmr+0x5a4>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d000      	beq.n	80099c4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80099c2:	e560      	b.n	8009486 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80099c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80099cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ce:	f004 f8bf 	bl	800db50 <tcp_output>
  while (pcb != NULL) {
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f47f ad5c 	bne.w	8009492 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <tcp_slowtmr+0x5a8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80099e4:	e067      	b.n	8009ab6 <tcp_slowtmr+0x652>
 80099e6:	bf00      	nop
 80099e8:	200174e8 	.word	0x200174e8
 80099ec:	10624dd3 	.word	0x10624dd3
 80099f0:	000124f8 	.word	0x000124f8
 80099f4:	200174e4 	.word	0x200174e4
 80099f8:	080144f4 	.word	0x080144f4
 80099fc:	0801492c 	.word	0x0801492c
 8009a00:	08014538 	.word	0x08014538
 8009a04:	08014958 	.word	0x08014958
 8009a08:	200174e0 	.word	0x200174e0
 8009a0c:	200174f4 	.word	0x200174f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	7d1b      	ldrb	r3, [r3, #20]
 8009a14:	2b0a      	cmp	r3, #10
 8009a16:	d006      	beq.n	8009a26 <tcp_slowtmr+0x5c2>
 8009a18:	4b2b      	ldr	r3, [pc, #172]	; (8009ac8 <tcp_slowtmr+0x664>)
 8009a1a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009a1e:	492b      	ldr	r1, [pc, #172]	; (8009acc <tcp_slowtmr+0x668>)
 8009a20:	482b      	ldr	r0, [pc, #172]	; (8009ad0 <tcp_slowtmr+0x66c>)
 8009a22:	f007 feef 	bl	8011804 <iprintf>
    pcb_remove = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009a2c:	4b29      	ldr	r3, [pc, #164]	; (8009ad4 <tcp_slowtmr+0x670>)
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2bf0      	cmp	r3, #240	; 0xf0
 8009a38:	d904      	bls.n	8009a44 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a3e:	3301      	adds	r3, #1
 8009a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d02f      	beq.n	8009aac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a4e:	f000 fc17 	bl	800a280 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d010      	beq.n	8009a7a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009a58:	4b1f      	ldr	r3, [pc, #124]	; (8009ad8 <tcp_slowtmr+0x674>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d106      	bne.n	8009a70 <tcp_slowtmr+0x60c>
 8009a62:	4b19      	ldr	r3, [pc, #100]	; (8009ac8 <tcp_slowtmr+0x664>)
 8009a64:	f240 52af 	movw	r2, #1455	; 0x5af
 8009a68:	491c      	ldr	r1, [pc, #112]	; (8009adc <tcp_slowtmr+0x678>)
 8009a6a:	4819      	ldr	r0, [pc, #100]	; (8009ad0 <tcp_slowtmr+0x66c>)
 8009a6c:	f007 feca 	bl	8011804 <iprintf>
        prev->next = pcb->next;
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	60da      	str	r2, [r3, #12]
 8009a78:	e00f      	b.n	8009a9a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a7a:	4b17      	ldr	r3, [pc, #92]	; (8009ad8 <tcp_slowtmr+0x674>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d006      	beq.n	8009a92 <tcp_slowtmr+0x62e>
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <tcp_slowtmr+0x664>)
 8009a86:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009a8a:	4915      	ldr	r1, [pc, #84]	; (8009ae0 <tcp_slowtmr+0x67c>)
 8009a8c:	4810      	ldr	r0, [pc, #64]	; (8009ad0 <tcp_slowtmr+0x66c>)
 8009a8e:	f007 feb9 	bl	8011804 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	4a10      	ldr	r2, [pc, #64]	; (8009ad8 <tcp_slowtmr+0x674>)
 8009a98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009aa4:	69f8      	ldr	r0, [r7, #28]
 8009aa6:	f7fe ff85 	bl	80089b4 <tcp_free>
 8009aaa:	e004      	b.n	8009ab6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1a9      	bne.n	8009a10 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	3730      	adds	r7, #48	; 0x30
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	080144f4 	.word	0x080144f4
 8009acc:	08014984 	.word	0x08014984
 8009ad0:	08014538 	.word	0x08014538
 8009ad4:	200174e8 	.word	0x200174e8
 8009ad8:	200174f4 	.word	0x200174f4
 8009adc:	080149b4 	.word	0x080149b4
 8009ae0:	080149dc 	.word	0x080149dc

08009ae4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009aea:	4b2d      	ldr	r3, [pc, #180]	; (8009ba0 <tcp_fasttmr+0xbc>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	3301      	adds	r3, #1
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <tcp_fasttmr+0xbc>)
 8009af4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009af6:	4b2b      	ldr	r3, [pc, #172]	; (8009ba4 <tcp_fasttmr+0xc0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009afc:	e048      	b.n	8009b90 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7f9a      	ldrb	r2, [r3, #30]
 8009b02:	4b27      	ldr	r3, [pc, #156]	; (8009ba0 <tcp_fasttmr+0xbc>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d03f      	beq.n	8009b8a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009b0a:	4b25      	ldr	r3, [pc, #148]	; (8009ba0 <tcp_fasttmr+0xbc>)
 8009b0c:	781a      	ldrb	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8b5b      	ldrh	r3, [r3, #26]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d010      	beq.n	8009b40 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8b5b      	ldrh	r3, [r3, #26]
 8009b22:	f043 0302 	orr.w	r3, r3, #2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f004 f80f 	bl	800db50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8b5b      	ldrh	r3, [r3, #26]
 8009b36:	f023 0303 	bic.w	r3, r3, #3
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8b5b      	ldrh	r3, [r3, #26]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d009      	beq.n	8009b60 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8b5b      	ldrh	r3, [r3, #26]
 8009b50:	f023 0308 	bic.w	r3, r3, #8
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff f8be 	bl	8008cdc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009b6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ba8 <tcp_fasttmr+0xc4>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f819 	bl	8009bac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <tcp_fasttmr+0xc4>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d000      	beq.n	8009b84 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b82:	e7b8      	b.n	8009af6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e002      	b.n	8009b90 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1b3      	bne.n	8009afe <tcp_fasttmr+0x1a>
    }
  }
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000552 	.word	0x20000552
 8009ba4:	200174e4 	.word	0x200174e4
 8009ba8:	200174e0 	.word	0x200174e0

08009bac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d109      	bne.n	8009bce <tcp_process_refused_data+0x22>
 8009bba:	4b37      	ldr	r3, [pc, #220]	; (8009c98 <tcp_process_refused_data+0xec>)
 8009bbc:	f240 6209 	movw	r2, #1545	; 0x609
 8009bc0:	4936      	ldr	r1, [pc, #216]	; (8009c9c <tcp_process_refused_data+0xf0>)
 8009bc2:	4837      	ldr	r0, [pc, #220]	; (8009ca0 <tcp_process_refused_data+0xf4>)
 8009bc4:	f007 fe1e 	bl	8011804 <iprintf>
 8009bc8:	f06f 030f 	mvn.w	r3, #15
 8009bcc:	e060      	b.n	8009c90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bd2:	7b5b      	ldrb	r3, [r3, #13]
 8009bd4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bda:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <tcp_process_refused_data+0x58>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6918      	ldr	r0, [r3, #16]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	47a0      	blx	r4
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]
 8009c02:	e007      	b.n	8009c14 <tcp_process_refused_data+0x68>
 8009c04:	2300      	movs	r3, #0
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f000 f8c2 	bl	8009d94 <tcp_recv_null>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d12a      	bne.n	8009c72 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d033      	beq.n	8009c8e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c2e:	d005      	beq.n	8009c3c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c34:	3301      	adds	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00b      	beq.n	8009c5e <tcp_process_refused_data+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6918      	ldr	r0, [r3, #16]
 8009c50:	2300      	movs	r3, #0
 8009c52:	2200      	movs	r2, #0
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	47a0      	blx	r4
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
 8009c5c:	e001      	b.n	8009c62 <tcp_process_refused_data+0xb6>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	f113 0f0d 	cmn.w	r3, #13
 8009c6a:	d110      	bne.n	8009c8e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009c6c:	f06f 030c 	mvn.w	r3, #12
 8009c70:	e00e      	b.n	8009c90 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c76:	f113 0f0d 	cmn.w	r3, #13
 8009c7a:	d102      	bne.n	8009c82 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009c7c:	f06f 030c 	mvn.w	r3, #12
 8009c80:	e006      	b.n	8009c90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009c88:	f06f 0304 	mvn.w	r3, #4
 8009c8c:	e000      	b.n	8009c90 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd90      	pop	{r4, r7, pc}
 8009c98:	080144f4 	.word	0x080144f4
 8009c9c:	08014a04 	.word	0x08014a04
 8009ca0:	08014538 	.word	0x08014538

08009ca4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009cac:	e007      	b.n	8009cbe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f80a 	bl	8009cce <tcp_seg_free>
    seg = next;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1f4      	bne.n	8009cae <tcp_segs_free+0xa>
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00c      	beq.n	8009cf6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fbc3 	bl	8008474 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	2003      	movs	r0, #3
 8009cf2:	f7fd fda9 	bl	8007848 <memp_free>
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d107      	bne.n	8009d22 <tcp_setprio+0x22>
 8009d12:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <tcp_setprio+0x30>)
 8009d14:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009d18:	4906      	ldr	r1, [pc, #24]	; (8009d34 <tcp_setprio+0x34>)
 8009d1a:	4807      	ldr	r0, [pc, #28]	; (8009d38 <tcp_setprio+0x38>)
 8009d1c:	f007 fd72 	bl	8011804 <iprintf>
 8009d20:	e002      	b.n	8009d28 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	755a      	strb	r2, [r3, #21]
}
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	080144f4 	.word	0x080144f4
 8009d34:	08014a2c 	.word	0x08014a2c
 8009d38:	08014538 	.word	0x08014538

08009d3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <tcp_seg_copy+0x1c>
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <tcp_seg_copy+0x4c>)
 8009d4c:	f240 6282 	movw	r2, #1666	; 0x682
 8009d50:	490e      	ldr	r1, [pc, #56]	; (8009d8c <tcp_seg_copy+0x50>)
 8009d52:	480f      	ldr	r0, [pc, #60]	; (8009d90 <tcp_seg_copy+0x54>)
 8009d54:	f007 fd56 	bl	8011804 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009d58:	2003      	movs	r0, #3
 8009d5a:	f7fd fd29 	bl	80077b0 <memp_malloc>
 8009d5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <tcp_seg_copy+0x2e>
    return NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	e00a      	b.n	8009d80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009d6a:	2210      	movs	r2, #16
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f007 fc6e 	bl	8011650 <memcpy>
  pbuf_ref(cseg->p);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fc1b 	bl	80085b4 <pbuf_ref>
  return cseg;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	080144f4 	.word	0x080144f4
 8009d8c:	08014a48 	.word	0x08014a48
 8009d90:	08014538 	.word	0x08014538

08009d94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <tcp_recv_null+0x28>
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <tcp_recv_null+0x60>)
 8009daa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009dae:	4912      	ldr	r1, [pc, #72]	; (8009df8 <tcp_recv_null+0x64>)
 8009db0:	4812      	ldr	r0, [pc, #72]	; (8009dfc <tcp_recv_null+0x68>)
 8009db2:	f007 fd27 	bl	8011804 <iprintf>
 8009db6:	f06f 030f 	mvn.w	r3, #15
 8009dba:	e016      	b.n	8009dea <tcp_recv_null+0x56>

  if (p != NULL) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	891b      	ldrh	r3, [r3, #8]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68b8      	ldr	r0, [r7, #8]
 8009dca:	f7ff fab5 	bl	8009338 <tcp_recved>
    pbuf_free(p);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7fe fb50 	bl	8008474 <pbuf_free>
 8009dd4:	e008      	b.n	8009de8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d104      	bne.n	8009de8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f7fe ffe6 	bl	8008db0 <tcp_close>
 8009de4:	4603      	mov	r3, r0
 8009de6:	e000      	b.n	8009dea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	080144f4 	.word	0x080144f4
 8009df8:	08014a64 	.word	0x08014a64
 8009dfc:	08014538 	.word	0x08014538

08009e00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	db01      	blt.n	8009e16 <tcp_kill_prio+0x16>
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	e000      	b.n	8009e18 <tcp_kill_prio+0x18>
 8009e16:	237f      	movs	r3, #127	; 0x7f
 8009e18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d034      	beq.n	8009e8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e2e:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <tcp_kill_prio+0x94>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e01f      	b.n	8009e76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	7d5b      	ldrb	r3, [r3, #21]
 8009e3a:	7afa      	ldrb	r2, [r7, #11]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d80c      	bhi.n	8009e5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009e44:	7afa      	ldrb	r2, [r7, #11]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d112      	bne.n	8009e70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009e4a:	4b13      	ldr	r3, [pc, #76]	; (8009e98 <tcp_kill_prio+0x98>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d80a      	bhi.n	8009e70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009e5a:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <tcp_kill_prio+0x98>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	7d5b      	ldrb	r3, [r3, #21]
 8009e6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1dc      	bne.n	8009e36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d004      	beq.n	8009e8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e82:	6938      	ldr	r0, [r7, #16]
 8009e84:	f7ff f87e 	bl	8008f84 <tcp_abort>
 8009e88:	e000      	b.n	8009e8c <tcp_kill_prio+0x8c>
    return;
 8009e8a:	bf00      	nop
  }
}
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200174e4 	.word	0x200174e4
 8009e98:	200174e8 	.word	0x200174e8

08009e9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d009      	beq.n	8009ec0 <tcp_kill_state+0x24>
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b09      	cmp	r3, #9
 8009eb0:	d006      	beq.n	8009ec0 <tcp_kill_state+0x24>
 8009eb2:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <tcp_kill_state+0x80>)
 8009eb4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009eb8:	4919      	ldr	r1, [pc, #100]	; (8009f20 <tcp_kill_state+0x84>)
 8009eba:	481a      	ldr	r0, [pc, #104]	; (8009f24 <tcp_kill_state+0x88>)
 8009ebc:	f007 fca2 	bl	8011804 <iprintf>

  inactivity = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ec8:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <tcp_kill_state+0x8c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e017      	b.n	8009f00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	7d1b      	ldrb	r3, [r3, #20]
 8009ed4:	79fa      	ldrb	r2, [r7, #7]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d10f      	bne.n	8009efa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009eda:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <tcp_kill_state+0x90>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d807      	bhi.n	8009efa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009eea:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <tcp_kill_state+0x90>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e4      	bne.n	8009ed0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6938      	ldr	r0, [r7, #16]
 8009f10:	f7fe ff7a 	bl	8008e08 <tcp_abandon>
  }
}
 8009f14:	bf00      	nop
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	080144f4 	.word	0x080144f4
 8009f20:	08014a80 	.word	0x08014a80
 8009f24:	08014538 	.word	0x08014538
 8009f28:	200174e4 	.word	0x200174e4
 8009f2c:	200174e8 	.word	0x200174e8

08009f30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <tcp_kill_timewait+0x58>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e012      	b.n	8009f6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f46:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <tcp_kill_timewait+0x5c>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d807      	bhi.n	8009f66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009f56:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <tcp_kill_timewait+0x5c>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e9      	bne.n	8009f46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f7ff f803 	bl	8008f84 <tcp_abort>
  }
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200174f4 	.word	0x200174f4
 8009f8c:	200174e8 	.word	0x200174e8

08009f90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009f96:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <tcp_handle_closepend+0x48>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009f9c:	e014      	b.n	8009fc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8b5b      	ldrh	r3, [r3, #26]
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8b5b      	ldrh	r3, [r3, #26]
 8009fb4:	f023 0308 	bic.w	r3, r3, #8
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7fe fe8c 	bl	8008cdc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e7      	bne.n	8009f9e <tcp_handle_closepend+0xe>
  }
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200174e4 	.word	0x200174e4

08009fdc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	f7fd fbe2 	bl	80077b0 <memp_malloc>
 8009fec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d126      	bne.n	800a042 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009ff4:	f7ff ffcc 	bl	8009f90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009ff8:	f7ff ff9a 	bl	8009f30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f7fd fbd7 	bl	80077b0 <memp_malloc>
 800a002:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d11b      	bne.n	800a042 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a00a:	2009      	movs	r0, #9
 800a00c:	f7ff ff46 	bl	8009e9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a010:	2001      	movs	r0, #1
 800a012:	f7fd fbcd 	bl	80077b0 <memp_malloc>
 800a016:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d111      	bne.n	800a042 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a01e:	2008      	movs	r0, #8
 800a020:	f7ff ff3c 	bl	8009e9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a024:	2001      	movs	r0, #1
 800a026:	f7fd fbc3 	bl	80077b0 <memp_malloc>
 800a02a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d107      	bne.n	800a042 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fee3 	bl	8009e00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a03a:	2001      	movs	r0, #1
 800a03c:	f7fd fbb8 	bl	80077b0 <memp_malloc>
 800a040:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d03f      	beq.n	800a0c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a048:	229c      	movs	r2, #156	; 0x9c
 800a04a:	2100      	movs	r1, #0
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f007 fb27 	bl	80116a0 <memset>
    pcb->prio = prio;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	79fa      	ldrb	r2, [r7, #7]
 800a056:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a05e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a068:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a07e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2206      	movs	r2, #6
 800a084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2206      	movs	r2, #6
 800a08c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a094:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a09e:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <tcp_alloc+0xf8>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <tcp_alloc+0xfc>)
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a0b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4a08      	ldr	r2, [pc, #32]	; (800a0dc <tcp_alloc+0x100>)
 800a0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a07      	ldr	r2, [pc, #28]	; (800a0e0 <tcp_alloc+0x104>)
 800a0c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	200174e8 	.word	0x200174e8
 800a0d8:	20000552 	.word	0x20000552
 800a0dc:	08009d95 	.word	0x08009d95
 800a0e0:	006ddd00 	.word	0x006ddd00

0800a0e4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a0ee:	2040      	movs	r0, #64	; 0x40
 800a0f0:	f7ff ff74 	bl	8009fdc <tcp_alloc>
 800a0f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	611a      	str	r2, [r3, #16]
  }
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00e      	beq.n	800a152 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7d1b      	ldrb	r3, [r3, #20]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d106      	bne.n	800a14a <tcp_recv+0x26>
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <tcp_recv+0x38>)
 800a13e:	f240 72df 	movw	r2, #2015	; 0x7df
 800a142:	4907      	ldr	r1, [pc, #28]	; (800a160 <tcp_recv+0x3c>)
 800a144:	4807      	ldr	r0, [pc, #28]	; (800a164 <tcp_recv+0x40>)
 800a146:	f007 fb5d 	bl	8011804 <iprintf>
    pcb->recv = recv;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	080144f4 	.word	0x080144f4
 800a160:	08014a90 	.word	0x08014a90
 800a164:	08014538 	.word	0x08014538

0800a168 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00e      	beq.n	800a196 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7d1b      	ldrb	r3, [r3, #20]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d106      	bne.n	800a18e <tcp_sent+0x26>
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <tcp_sent+0x38>)
 800a182:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a186:	4907      	ldr	r1, [pc, #28]	; (800a1a4 <tcp_sent+0x3c>)
 800a188:	4807      	ldr	r0, [pc, #28]	; (800a1a8 <tcp_sent+0x40>)
 800a18a:	f007 fb3b 	bl	8011804 <iprintf>
    pcb->sent = sent;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	080144f4 	.word	0x080144f4
 800a1a4:	08014ab8 	.word	0x08014ab8
 800a1a8:	08014538 	.word	0x08014538

0800a1ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00e      	beq.n	800a1da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7d1b      	ldrb	r3, [r3, #20]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d106      	bne.n	800a1d2 <tcp_err+0x26>
 800a1c4:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <tcp_err+0x38>)
 800a1c6:	f640 020d 	movw	r2, #2061	; 0x80d
 800a1ca:	4907      	ldr	r1, [pc, #28]	; (800a1e8 <tcp_err+0x3c>)
 800a1cc:	4807      	ldr	r0, [pc, #28]	; (800a1ec <tcp_err+0x40>)
 800a1ce:	f007 fb19 	bl	8011804 <iprintf>
    pcb->errf = err;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	080144f4 	.word	0x080144f4
 800a1e8:	08014ae0 	.word	0x08014ae0
 800a1ec:	08014538 	.word	0x08014538

0800a1f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d008      	beq.n	800a212 <tcp_accept+0x22>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d104      	bne.n	800a212 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	619a      	str	r2, [r3, #24]
  }
}
 800a212:	bf00      	nop
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
	...

0800a220 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d107      	bne.n	800a244 <tcp_poll+0x24>
 800a234:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <tcp_poll+0x50>)
 800a236:	f640 023d 	movw	r2, #2109	; 0x83d
 800a23a:	490e      	ldr	r1, [pc, #56]	; (800a274 <tcp_poll+0x54>)
 800a23c:	480e      	ldr	r0, [pc, #56]	; (800a278 <tcp_poll+0x58>)
 800a23e:	f007 fae1 	bl	8011804 <iprintf>
 800a242:	e011      	b.n	800a268 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	7d1b      	ldrb	r3, [r3, #20]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d106      	bne.n	800a25a <tcp_poll+0x3a>
 800a24c:	4b08      	ldr	r3, [pc, #32]	; (800a270 <tcp_poll+0x50>)
 800a24e:	f640 023e 	movw	r2, #2110	; 0x83e
 800a252:	490a      	ldr	r1, [pc, #40]	; (800a27c <tcp_poll+0x5c>)
 800a254:	4808      	ldr	r0, [pc, #32]	; (800a278 <tcp_poll+0x58>)
 800a256:	f007 fad5 	bl	8011804 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	79fa      	ldrb	r2, [r7, #7]
 800a266:	775a      	strb	r2, [r3, #29]
}
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	080144f4 	.word	0x080144f4
 800a274:	08014b08 	.word	0x08014b08
 800a278:	08014538 	.word	0x08014538
 800a27c:	08014b20 	.word	0x08014b20

0800a280 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d107      	bne.n	800a29e <tcp_pcb_purge+0x1e>
 800a28e:	4b21      	ldr	r3, [pc, #132]	; (800a314 <tcp_pcb_purge+0x94>)
 800a290:	f640 0251 	movw	r2, #2129	; 0x851
 800a294:	4920      	ldr	r1, [pc, #128]	; (800a318 <tcp_pcb_purge+0x98>)
 800a296:	4821      	ldr	r0, [pc, #132]	; (800a31c <tcp_pcb_purge+0x9c>)
 800a298:	f007 fab4 	bl	8011804 <iprintf>
 800a29c:	e037      	b.n	800a30e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	7d1b      	ldrb	r3, [r3, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d033      	beq.n	800a30e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a2aa:	2b0a      	cmp	r3, #10
 800a2ac:	d02f      	beq.n	800a30e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d02b      	beq.n	800a30e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe f8d6 	bl	8008474 <pbuf_free>
      pcb->refused_data = NULL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f986 	bl	800a5e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff fcdb 	bl	8009ca4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fcd6 	bl	8009ca4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	080144f4 	.word	0x080144f4
 800a318:	08014b40 	.word	0x08014b40
 800a31c:	08014538 	.word	0x08014538

0800a320 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <tcp_pcb_remove+0x1e>
 800a330:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <tcp_pcb_remove+0x10c>)
 800a332:	f640 0283 	movw	r2, #2179	; 0x883
 800a336:	493e      	ldr	r1, [pc, #248]	; (800a430 <tcp_pcb_remove+0x110>)
 800a338:	483e      	ldr	r0, [pc, #248]	; (800a434 <tcp_pcb_remove+0x114>)
 800a33a:	f007 fa63 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <tcp_pcb_remove+0x32>
 800a344:	4b39      	ldr	r3, [pc, #228]	; (800a42c <tcp_pcb_remove+0x10c>)
 800a346:	f640 0284 	movw	r2, #2180	; 0x884
 800a34a:	493b      	ldr	r1, [pc, #236]	; (800a438 <tcp_pcb_remove+0x118>)
 800a34c:	4839      	ldr	r0, [pc, #228]	; (800a434 <tcp_pcb_remove+0x114>)
 800a34e:	f007 fa59 	bl	8011804 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d105      	bne.n	800a368 <tcp_pcb_remove+0x48>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	e013      	b.n	800a390 <tcp_pcb_remove+0x70>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	e00c      	b.n	800a38a <tcp_pcb_remove+0x6a>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d104      	bne.n	800a384 <tcp_pcb_remove+0x64>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	60da      	str	r2, [r3, #12]
 800a382:	e005      	b.n	800a390 <tcp_pcb_remove+0x70>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1ef      	bne.n	800a370 <tcp_pcb_remove+0x50>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2200      	movs	r2, #0
 800a394:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a396:	6838      	ldr	r0, [r7, #0]
 800a398:	f7ff ff72 	bl	800a280 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	2b0a      	cmp	r3, #10
 800a3a2:	d013      	beq.n	800a3cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d00f      	beq.n	800a3cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	8b5b      	ldrh	r3, [r3, #26]
 800a3b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d009      	beq.n	800a3cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	8b5b      	ldrh	r3, [r3, #26]
 800a3bc:	f043 0302 	orr.w	r3, r3, #2
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a3c6:	6838      	ldr	r0, [r7, #0]
 800a3c8:	f003 fbc2 	bl	800db50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	7d1b      	ldrb	r3, [r3, #20]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d020      	beq.n	800a416 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d006      	beq.n	800a3ea <tcp_pcb_remove+0xca>
 800a3dc:	4b13      	ldr	r3, [pc, #76]	; (800a42c <tcp_pcb_remove+0x10c>)
 800a3de:	f640 0293 	movw	r2, #2195	; 0x893
 800a3e2:	4916      	ldr	r1, [pc, #88]	; (800a43c <tcp_pcb_remove+0x11c>)
 800a3e4:	4813      	ldr	r0, [pc, #76]	; (800a434 <tcp_pcb_remove+0x114>)
 800a3e6:	f007 fa0d 	bl	8011804 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <tcp_pcb_remove+0xe0>
 800a3f2:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <tcp_pcb_remove+0x10c>)
 800a3f4:	f640 0294 	movw	r2, #2196	; 0x894
 800a3f8:	4911      	ldr	r1, [pc, #68]	; (800a440 <tcp_pcb_remove+0x120>)
 800a3fa:	480e      	ldr	r0, [pc, #56]	; (800a434 <tcp_pcb_remove+0x114>)
 800a3fc:	f007 fa02 	bl	8011804 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a404:	2b00      	cmp	r3, #0
 800a406:	d006      	beq.n	800a416 <tcp_pcb_remove+0xf6>
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <tcp_pcb_remove+0x10c>)
 800a40a:	f640 0296 	movw	r2, #2198	; 0x896
 800a40e:	490d      	ldr	r1, [pc, #52]	; (800a444 <tcp_pcb_remove+0x124>)
 800a410:	4808      	ldr	r0, [pc, #32]	; (800a434 <tcp_pcb_remove+0x114>)
 800a412:	f007 f9f7 	bl	8011804 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2200      	movs	r2, #0
 800a41a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	080144f4 	.word	0x080144f4
 800a430:	08014b5c 	.word	0x08014b5c
 800a434:	08014538 	.word	0x08014538
 800a438:	08014b78 	.word	0x08014b78
 800a43c:	08014b98 	.word	0x08014b98
 800a440:	08014bb0 	.word	0x08014bb0
 800a444:	08014bcc 	.word	0x08014bcc

0800a448 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <tcp_next_iss+0x1c>
 800a456:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <tcp_next_iss+0x38>)
 800a458:	f640 02af 	movw	r2, #2223	; 0x8af
 800a45c:	4909      	ldr	r1, [pc, #36]	; (800a484 <tcp_next_iss+0x3c>)
 800a45e:	480a      	ldr	r0, [pc, #40]	; (800a488 <tcp_next_iss+0x40>)
 800a460:	f007 f9d0 	bl	8011804 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a464:	4b09      	ldr	r3, [pc, #36]	; (800a48c <tcp_next_iss+0x44>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <tcp_next_iss+0x48>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4413      	add	r3, r2
 800a46e:	4a07      	ldr	r2, [pc, #28]	; (800a48c <tcp_next_iss+0x44>)
 800a470:	6013      	str	r3, [r2, #0]
  return iss;
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <tcp_next_iss+0x44>)
 800a474:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	080144f4 	.word	0x080144f4
 800a484:	08014be4 	.word	0x08014be4
 800a488:	08014538 	.word	0x08014538
 800a48c:	20000028 	.word	0x20000028
 800a490:	200174e8 	.word	0x200174e8

0800a494 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <tcp_eff_send_mss_netif+0x22>
 800a4a8:	4b14      	ldr	r3, [pc, #80]	; (800a4fc <tcp_eff_send_mss_netif+0x68>)
 800a4aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a4ae:	4914      	ldr	r1, [pc, #80]	; (800a500 <tcp_eff_send_mss_netif+0x6c>)
 800a4b0:	4814      	ldr	r0, [pc, #80]	; (800a504 <tcp_eff_send_mss_netif+0x70>)
 800a4b2:	f007 f9a7 	bl	8011804 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a4bc:	89fb      	ldrh	r3, [r7, #14]
 800a4be:	e019      	b.n	800a4f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a4c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a4c6:	8afb      	ldrh	r3, [r7, #22]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d012      	beq.n	800a4f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a4cc:	2328      	movs	r3, #40	; 0x28
 800a4ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a4d0:	8afa      	ldrh	r2, [r7, #22]
 800a4d2:	8abb      	ldrh	r3, [r7, #20]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d904      	bls.n	800a4e2 <tcp_eff_send_mss_netif+0x4e>
 800a4d8:	8afa      	ldrh	r2, [r7, #22]
 800a4da:	8abb      	ldrh	r3, [r7, #20]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	e000      	b.n	800a4e4 <tcp_eff_send_mss_netif+0x50>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a4e6:	8a7a      	ldrh	r2, [r7, #18]
 800a4e8:	89fb      	ldrh	r3, [r7, #14]
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	bf28      	it	cs
 800a4ee:	4613      	movcs	r3, r2
 800a4f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a4f2:	89fb      	ldrh	r3, [r7, #14]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	080144f4 	.word	0x080144f4
 800a500:	08014c00 	.word	0x08014c00
 800a504:	08014538 	.word	0x08014538

0800a508 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d119      	bne.n	800a550 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a51e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a522:	4910      	ldr	r1, [pc, #64]	; (800a564 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a524:	4810      	ldr	r0, [pc, #64]	; (800a568 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a526:	f007 f96d 	bl	8011804 <iprintf>

  while (pcb != NULL) {
 800a52a:	e011      	b.n	800a550 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d108      	bne.n	800a54a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7fe fd20 	bl	8008f84 <tcp_abort>
      pcb = next;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e002      	b.n	800a550 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1ea      	bne.n	800a52c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	080144f4 	.word	0x080144f4
 800a564:	08014c28 	.word	0x08014c28
 800a568:	08014538 	.word	0x08014538

0800a56c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d02a      	beq.n	800a5d2 <tcp_netif_ip_addr_changed+0x66>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d026      	beq.n	800a5d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a584:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <tcp_netif_ip_addr_changed+0x70>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff ffbc 	bl	800a508 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a590:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <tcp_netif_ip_addr_changed+0x74>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff ffb6 	bl	800a508 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d017      	beq.n	800a5d2 <tcp_netif_ip_addr_changed+0x66>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d013      	beq.n	800a5d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5aa:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <tcp_netif_ip_addr_changed+0x78>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e00c      	b.n	800a5cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d103      	bne.n	800a5c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1ef      	bne.n	800a5b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200174e4 	.word	0x200174e4
 800a5e0:	200174f0 	.word	0x200174f0
 800a5e4:	200174ec 	.word	0x200174ec

0800a5e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d007      	beq.n	800a608 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fb51 	bl	8009ca4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b08d      	sub	sp, #52	; 0x34
 800a614:	af04      	add	r7, sp, #16
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <tcp_input+0x1c>
 800a620:	4b9b      	ldr	r3, [pc, #620]	; (800a890 <tcp_input+0x280>)
 800a622:	2283      	movs	r2, #131	; 0x83
 800a624:	499b      	ldr	r1, [pc, #620]	; (800a894 <tcp_input+0x284>)
 800a626:	489c      	ldr	r0, [pc, #624]	; (800a898 <tcp_input+0x288>)
 800a628:	f007 f8ec 	bl	8011804 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	4a9a      	ldr	r2, [pc, #616]	; (800a89c <tcp_input+0x28c>)
 800a632:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	895b      	ldrh	r3, [r3, #10]
 800a638:	2b13      	cmp	r3, #19
 800a63a:	f240 83c4 	bls.w	800adc6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a63e:	4b98      	ldr	r3, [pc, #608]	; (800a8a0 <tcp_input+0x290>)
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	4a97      	ldr	r2, [pc, #604]	; (800a8a0 <tcp_input+0x290>)
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	4611      	mov	r1, r2
 800a648:	4618      	mov	r0, r3
 800a64a:	f006 f86b 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	f040 83ba 	bne.w	800adca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a656:	4b92      	ldr	r3, [pc, #584]	; (800a8a0 <tcp_input+0x290>)
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a65e:	2be0      	cmp	r3, #224	; 0xe0
 800a660:	f000 83b3 	beq.w	800adca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a664:	4b8d      	ldr	r3, [pc, #564]	; (800a89c <tcp_input+0x28c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fc fb6b 	bl	8006d48 <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	0b1b      	lsrs	r3, r3, #12
 800a676:	b29b      	uxth	r3, r3
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a67e:	7cbb      	ldrb	r3, [r7, #18]
 800a680:	2b13      	cmp	r3, #19
 800a682:	f240 83a4 	bls.w	800adce <tcp_input+0x7be>
 800a686:	7cbb      	ldrb	r3, [r7, #18]
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	891b      	ldrh	r3, [r3, #8]
 800a68e:	429a      	cmp	r2, r3
 800a690:	f200 839d 	bhi.w	800adce <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a694:	7cbb      	ldrb	r3, [r7, #18]
 800a696:	b29b      	uxth	r3, r3
 800a698:	3b14      	subs	r3, #20
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	4b81      	ldr	r3, [pc, #516]	; (800a8a4 <tcp_input+0x294>)
 800a69e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6a0:	4b81      	ldr	r3, [pc, #516]	; (800a8a8 <tcp_input+0x298>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	895a      	ldrh	r2, [r3, #10]
 800a6aa:	7cbb      	ldrb	r3, [r7, #18]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d309      	bcc.n	800a6c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6b2:	4b7c      	ldr	r3, [pc, #496]	; (800a8a4 <tcp_input+0x294>)
 800a6b4:	881a      	ldrh	r2, [r3, #0]
 800a6b6:	4b7d      	ldr	r3, [pc, #500]	; (800a8ac <tcp_input+0x29c>)
 800a6b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a6ba:	7cbb      	ldrb	r3, [r7, #18]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7fd fe52 	bl	8008368 <pbuf_remove_header>
 800a6c4:	e04e      	b.n	800a764 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d105      	bne.n	800a6da <tcp_input+0xca>
 800a6ce:	4b70      	ldr	r3, [pc, #448]	; (800a890 <tcp_input+0x280>)
 800a6d0:	22c2      	movs	r2, #194	; 0xc2
 800a6d2:	4977      	ldr	r1, [pc, #476]	; (800a8b0 <tcp_input+0x2a0>)
 800a6d4:	4870      	ldr	r0, [pc, #448]	; (800a898 <tcp_input+0x288>)
 800a6d6:	f007 f895 	bl	8011804 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a6da:	2114      	movs	r1, #20
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7fd fe43 	bl	8008368 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	895a      	ldrh	r2, [r3, #10]
 800a6e6:	4b71      	ldr	r3, [pc, #452]	; (800a8ac <tcp_input+0x29c>)
 800a6e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a6ea:	4b6e      	ldr	r3, [pc, #440]	; (800a8a4 <tcp_input+0x294>)
 800a6ec:	881a      	ldrh	r2, [r3, #0]
 800a6ee:	4b6f      	ldr	r3, [pc, #444]	; (800a8ac <tcp_input+0x29c>)
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a6f6:	4b6d      	ldr	r3, [pc, #436]	; (800a8ac <tcp_input+0x29c>)
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7fd fe33 	bl	8008368 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	895b      	ldrh	r3, [r3, #10]
 800a708:	8a3a      	ldrh	r2, [r7, #16]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	f200 8361 	bhi.w	800add2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	4a64      	ldr	r2, [pc, #400]	; (800a8a8 <tcp_input+0x298>)
 800a718:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	8a3a      	ldrh	r2, [r7, #16]
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7fd fe20 	bl	8008368 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	891a      	ldrh	r2, [r3, #8]
 800a72c:	8a3b      	ldrh	r3, [r7, #16]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	895b      	ldrh	r3, [r3, #10]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <tcp_input+0x13a>
 800a73e:	4b54      	ldr	r3, [pc, #336]	; (800a890 <tcp_input+0x280>)
 800a740:	22df      	movs	r2, #223	; 0xdf
 800a742:	495c      	ldr	r1, [pc, #368]	; (800a8b4 <tcp_input+0x2a4>)
 800a744:	4854      	ldr	r0, [pc, #336]	; (800a898 <tcp_input+0x288>)
 800a746:	f007 f85d 	bl	8011804 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	891a      	ldrh	r2, [r3, #8]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	891b      	ldrh	r3, [r3, #8]
 800a754:	429a      	cmp	r2, r3
 800a756:	d005      	beq.n	800a764 <tcp_input+0x154>
 800a758:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <tcp_input+0x280>)
 800a75a:	22e0      	movs	r2, #224	; 0xe0
 800a75c:	4956      	ldr	r1, [pc, #344]	; (800a8b8 <tcp_input+0x2a8>)
 800a75e:	484e      	ldr	r0, [pc, #312]	; (800a898 <tcp_input+0x288>)
 800a760:	f007 f850 	bl	8011804 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a764:	4b4d      	ldr	r3, [pc, #308]	; (800a89c <tcp_input+0x28c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	4a4b      	ldr	r2, [pc, #300]	; (800a89c <tcp_input+0x28c>)
 800a76e:	6814      	ldr	r4, [r2, #0]
 800a770:	4618      	mov	r0, r3
 800a772:	f7fc fae9 	bl	8006d48 <lwip_htons>
 800a776:	4603      	mov	r3, r0
 800a778:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a77a:	4b48      	ldr	r3, [pc, #288]	; (800a89c <tcp_input+0x28c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	885b      	ldrh	r3, [r3, #2]
 800a780:	b29b      	uxth	r3, r3
 800a782:	4a46      	ldr	r2, [pc, #280]	; (800a89c <tcp_input+0x28c>)
 800a784:	6814      	ldr	r4, [r2, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7fc fade 	bl	8006d48 <lwip_htons>
 800a78c:	4603      	mov	r3, r0
 800a78e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a790:	4b42      	ldr	r3, [pc, #264]	; (800a89c <tcp_input+0x28c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	4a41      	ldr	r2, [pc, #260]	; (800a89c <tcp_input+0x28c>)
 800a798:	6814      	ldr	r4, [r2, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fc fae9 	bl	8006d72 <lwip_htonl>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	6063      	str	r3, [r4, #4]
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	4a45      	ldr	r2, [pc, #276]	; (800a8bc <tcp_input+0x2ac>)
 800a7a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7aa:	4b3c      	ldr	r3, [pc, #240]	; (800a89c <tcp_input+0x28c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	4a3a      	ldr	r2, [pc, #232]	; (800a89c <tcp_input+0x28c>)
 800a7b2:	6814      	ldr	r4, [r2, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fc fadc 	bl	8006d72 <lwip_htonl>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	60a3      	str	r3, [r4, #8]
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	4a3f      	ldr	r2, [pc, #252]	; (800a8c0 <tcp_input+0x2b0>)
 800a7c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a7c4:	4b35      	ldr	r3, [pc, #212]	; (800a89c <tcp_input+0x28c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	89db      	ldrh	r3, [r3, #14]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4a33      	ldr	r2, [pc, #204]	; (800a89c <tcp_input+0x28c>)
 800a7ce:	6814      	ldr	r4, [r2, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fc fab9 	bl	8006d48 <lwip_htons>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a7da:	4b30      	ldr	r3, [pc, #192]	; (800a89c <tcp_input+0x28c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fc fab0 	bl	8006d48 <lwip_htons>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	4b34      	ldr	r3, [pc, #208]	; (800a8c4 <tcp_input+0x2b4>)
 800a7f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	891a      	ldrh	r2, [r3, #8]
 800a7fa:	4b33      	ldr	r3, [pc, #204]	; (800a8c8 <tcp_input+0x2b8>)
 800a7fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a7fe:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <tcp_input+0x2b4>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <tcp_input+0x214>
    tcplen++;
 800a80a:	4b2f      	ldr	r3, [pc, #188]	; (800a8c8 <tcp_input+0x2b8>)
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	4b2d      	ldr	r3, [pc, #180]	; (800a8c8 <tcp_input+0x2b8>)
 800a814:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	891a      	ldrh	r2, [r3, #8]
 800a81a:	4b2b      	ldr	r3, [pc, #172]	; (800a8c8 <tcp_input+0x2b8>)
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	429a      	cmp	r2, r3
 800a820:	f200 82d9 	bhi.w	800add6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <tcp_input+0x2bc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	61fb      	str	r3, [r7, #28]
 800a82e:	e09d      	b.n	800a96c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	7d1b      	ldrb	r3, [r3, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d105      	bne.n	800a844 <tcp_input+0x234>
 800a838:	4b15      	ldr	r3, [pc, #84]	; (800a890 <tcp_input+0x280>)
 800a83a:	22fb      	movs	r2, #251	; 0xfb
 800a83c:	4924      	ldr	r1, [pc, #144]	; (800a8d0 <tcp_input+0x2c0>)
 800a83e:	4816      	ldr	r0, [pc, #88]	; (800a898 <tcp_input+0x288>)
 800a840:	f006 ffe0 	bl	8011804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	7d1b      	ldrb	r3, [r3, #20]
 800a848:	2b0a      	cmp	r3, #10
 800a84a:	d105      	bne.n	800a858 <tcp_input+0x248>
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <tcp_input+0x280>)
 800a84e:	22fc      	movs	r2, #252	; 0xfc
 800a850:	4920      	ldr	r1, [pc, #128]	; (800a8d4 <tcp_input+0x2c4>)
 800a852:	4811      	ldr	r0, [pc, #68]	; (800a898 <tcp_input+0x288>)
 800a854:	f006 ffd6 	bl	8011804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	7d1b      	ldrb	r3, [r3, #20]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d105      	bne.n	800a86c <tcp_input+0x25c>
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <tcp_input+0x280>)
 800a862:	22fd      	movs	r2, #253	; 0xfd
 800a864:	491c      	ldr	r1, [pc, #112]	; (800a8d8 <tcp_input+0x2c8>)
 800a866:	480c      	ldr	r0, [pc, #48]	; (800a898 <tcp_input+0x288>)
 800a868:	f006 ffcc 	bl	8011804 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	7a1b      	ldrb	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d033      	beq.n	800a8dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	7a1a      	ldrb	r2, [r3, #8]
 800a878:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <tcp_input+0x290>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a880:	3301      	adds	r3, #1
 800a882:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a884:	429a      	cmp	r2, r3
 800a886:	d029      	beq.n	800a8dc <tcp_input+0x2cc>
      prev = pcb;
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	61bb      	str	r3, [r7, #24]
      continue;
 800a88c:	e06b      	b.n	800a966 <tcp_input+0x356>
 800a88e:	bf00      	nop
 800a890:	08014c5c 	.word	0x08014c5c
 800a894:	08014c90 	.word	0x08014c90
 800a898:	08014ca8 	.word	0x08014ca8
 800a89c:	20000564 	.word	0x20000564
 800a8a0:	2000a060 	.word	0x2000a060
 800a8a4:	20000568 	.word	0x20000568
 800a8a8:	2000056c 	.word	0x2000056c
 800a8ac:	2000056a 	.word	0x2000056a
 800a8b0:	08014cd0 	.word	0x08014cd0
 800a8b4:	08014ce0 	.word	0x08014ce0
 800a8b8:	08014cec 	.word	0x08014cec
 800a8bc:	20000574 	.word	0x20000574
 800a8c0:	20000578 	.word	0x20000578
 800a8c4:	20000580 	.word	0x20000580
 800a8c8:	2000057e 	.word	0x2000057e
 800a8cc:	200174e4 	.word	0x200174e4
 800a8d0:	08014d0c 	.word	0x08014d0c
 800a8d4:	08014d34 	.word	0x08014d34
 800a8d8:	08014d60 	.word	0x08014d60
    }

    if (pcb->remote_port == tcphdr->src &&
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	8b1a      	ldrh	r2, [r3, #24]
 800a8e0:	4b94      	ldr	r3, [pc, #592]	; (800ab34 <tcp_input+0x524>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d13a      	bne.n	800a962 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	8ada      	ldrh	r2, [r3, #22]
 800a8f0:	4b90      	ldr	r3, [pc, #576]	; (800ab34 <tcp_input+0x524>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	885b      	ldrh	r3, [r3, #2]
 800a8f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d132      	bne.n	800a962 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	4b8d      	ldr	r3, [pc, #564]	; (800ab38 <tcp_input+0x528>)
 800a902:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a904:	429a      	cmp	r2, r3
 800a906:	d12c      	bne.n	800a962 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	4b8a      	ldr	r3, [pc, #552]	; (800ab38 <tcp_input+0x528>)
 800a90e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a910:	429a      	cmp	r2, r3
 800a912:	d126      	bne.n	800a962 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d106      	bne.n	800a92c <tcp_input+0x31c>
 800a91e:	4b87      	ldr	r3, [pc, #540]	; (800ab3c <tcp_input+0x52c>)
 800a920:	f240 120d 	movw	r2, #269	; 0x10d
 800a924:	4986      	ldr	r1, [pc, #536]	; (800ab40 <tcp_input+0x530>)
 800a926:	4887      	ldr	r0, [pc, #540]	; (800ab44 <tcp_input+0x534>)
 800a928:	f006 ff6c 	bl	8011804 <iprintf>
      if (prev != NULL) {
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <tcp_input+0x338>
        prev->next = pcb->next;
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a93a:	4b83      	ldr	r3, [pc, #524]	; (800ab48 <tcp_input+0x538>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a942:	4a81      	ldr	r2, [pc, #516]	; (800ab48 <tcp_input+0x538>)
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	69fa      	ldr	r2, [r7, #28]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d111      	bne.n	800a976 <tcp_input+0x366>
 800a952:	4b7a      	ldr	r3, [pc, #488]	; (800ab3c <tcp_input+0x52c>)
 800a954:	f240 1215 	movw	r2, #277	; 0x115
 800a958:	497c      	ldr	r1, [pc, #496]	; (800ab4c <tcp_input+0x53c>)
 800a95a:	487a      	ldr	r0, [pc, #488]	; (800ab44 <tcp_input+0x534>)
 800a95c:	f006 ff52 	bl	8011804 <iprintf>
      break;
 800a960:	e009      	b.n	800a976 <tcp_input+0x366>
    }
    prev = pcb;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f47f af5e 	bne.w	800a830 <tcp_input+0x220>
 800a974:	e000      	b.n	800a978 <tcp_input+0x368>
      break;
 800a976:	bf00      	nop
  }

  if (pcb == NULL) {
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f040 8095 	bne.w	800aaaa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a980:	4b73      	ldr	r3, [pc, #460]	; (800ab50 <tcp_input+0x540>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	e03f      	b.n	800aa08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	7d1b      	ldrb	r3, [r3, #20]
 800a98c:	2b0a      	cmp	r3, #10
 800a98e:	d006      	beq.n	800a99e <tcp_input+0x38e>
 800a990:	4b6a      	ldr	r3, [pc, #424]	; (800ab3c <tcp_input+0x52c>)
 800a992:	f240 121f 	movw	r2, #287	; 0x11f
 800a996:	496f      	ldr	r1, [pc, #444]	; (800ab54 <tcp_input+0x544>)
 800a998:	486a      	ldr	r0, [pc, #424]	; (800ab44 <tcp_input+0x534>)
 800a99a:	f006 ff33 	bl	8011804 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	7a1b      	ldrb	r3, [r3, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	7a1a      	ldrb	r2, [r3, #8]
 800a9aa:	4b63      	ldr	r3, [pc, #396]	; (800ab38 <tcp_input+0x528>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d122      	bne.n	800aa00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	8b1a      	ldrh	r2, [r3, #24]
 800a9be:	4b5d      	ldr	r3, [pc, #372]	; (800ab34 <tcp_input+0x524>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d11b      	bne.n	800aa02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	8ada      	ldrh	r2, [r3, #22]
 800a9ce:	4b59      	ldr	r3, [pc, #356]	; (800ab34 <tcp_input+0x524>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d113      	bne.n	800aa02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	4b56      	ldr	r3, [pc, #344]	; (800ab38 <tcp_input+0x528>)
 800a9e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d10d      	bne.n	800aa02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4b53      	ldr	r3, [pc, #332]	; (800ab38 <tcp_input+0x528>)
 800a9ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d107      	bne.n	800aa02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a9f2:	69f8      	ldr	r0, [r7, #28]
 800a9f4:	f000 fb54 	bl	800b0a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7fd fd3b 	bl	8008474 <pbuf_free>
        return;
 800a9fe:	e1f0      	b.n	800ade2 <tcp_input+0x7d2>
        continue;
 800aa00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1bc      	bne.n	800a988 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa12:	4b51      	ldr	r3, [pc, #324]	; (800ab58 <tcp_input+0x548>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	e02a      	b.n	800aa70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	7a1b      	ldrb	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00c      	beq.n	800aa3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	7a1a      	ldrb	r2, [r3, #8]
 800aa26:	4b44      	ldr	r3, [pc, #272]	; (800ab38 <tcp_input+0x528>)
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa2e:	3301      	adds	r3, #1
 800aa30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d002      	beq.n	800aa3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	61bb      	str	r3, [r7, #24]
        continue;
 800aa3a:	e016      	b.n	800aa6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	8ada      	ldrh	r2, [r3, #22]
 800aa40:	4b3c      	ldr	r3, [pc, #240]	; (800ab34 <tcp_input+0x524>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	885b      	ldrh	r3, [r3, #2]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d10c      	bne.n	800aa66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	4b39      	ldr	r3, [pc, #228]	; (800ab38 <tcp_input+0x528>)
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d00f      	beq.n	800aa78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00d      	beq.n	800aa7a <tcp_input+0x46a>
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d009      	beq.n	800aa7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1d1      	bne.n	800aa1a <tcp_input+0x40a>
 800aa76:	e000      	b.n	800aa7a <tcp_input+0x46a>
            break;
 800aa78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d014      	beq.n	800aaaa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa8e:	4b32      	ldr	r3, [pc, #200]	; (800ab58 <tcp_input+0x548>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa96:	4a30      	ldr	r2, [pc, #192]	; (800ab58 <tcp_input+0x548>)
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aa9c:	6978      	ldr	r0, [r7, #20]
 800aa9e:	f000 fa01 	bl	800aea4 <tcp_listen_input>
      }
      pbuf_free(p);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7fd fce6 	bl	8008474 <pbuf_free>
      return;
 800aaa8:	e19b      	b.n	800ade2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 8160 	beq.w	800ad72 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aab2:	4b2a      	ldr	r3, [pc, #168]	; (800ab5c <tcp_input+0x54c>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	891a      	ldrh	r2, [r3, #8]
 800aabc:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <tcp_input+0x54c>)
 800aabe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aac0:	4a26      	ldr	r2, [pc, #152]	; (800ab5c <tcp_input+0x54c>)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aac6:	4b1b      	ldr	r3, [pc, #108]	; (800ab34 <tcp_input+0x524>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a24      	ldr	r2, [pc, #144]	; (800ab5c <tcp_input+0x54c>)
 800aacc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <tcp_input+0x550>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aad4:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <tcp_input+0x554>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aada:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <tcp_input+0x558>)
 800aadc:	2200      	movs	r2, #0
 800aade:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aae0:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <tcp_input+0x55c>)
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d006      	beq.n	800aafa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7b5b      	ldrb	r3, [r3, #13]
 800aaf0:	f043 0301 	orr.w	r3, r3, #1
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d038      	beq.n	800ab74 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab02:	69f8      	ldr	r0, [r7, #28]
 800ab04:	f7ff f852 	bl	8009bac <tcp_process_refused_data>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f113 0f0d 	cmn.w	r3, #13
 800ab0e:	d007      	beq.n	800ab20 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d02d      	beq.n	800ab74 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <tcp_input+0x560>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d029      	beq.n	800ab74 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 8104 	bne.w	800ad32 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab2a:	69f8      	ldr	r0, [r7, #28]
 800ab2c:	f003 fe16 	bl	800e75c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ab30:	e0ff      	b.n	800ad32 <tcp_input+0x722>
 800ab32:	bf00      	nop
 800ab34:	20000564 	.word	0x20000564
 800ab38:	2000a060 	.word	0x2000a060
 800ab3c:	08014c5c 	.word	0x08014c5c
 800ab40:	08014d88 	.word	0x08014d88
 800ab44:	08014ca8 	.word	0x08014ca8
 800ab48:	200174e4 	.word	0x200174e4
 800ab4c:	08014db4 	.word	0x08014db4
 800ab50:	200174f4 	.word	0x200174f4
 800ab54:	08014de0 	.word	0x08014de0
 800ab58:	200174ec 	.word	0x200174ec
 800ab5c:	20000554 	.word	0x20000554
 800ab60:	20000584 	.word	0x20000584
 800ab64:	20000581 	.word	0x20000581
 800ab68:	2000057c 	.word	0x2000057c
 800ab6c:	20000580 	.word	0x20000580
 800ab70:	2000057e 	.word	0x2000057e
      }
    }
    tcp_input_pcb = pcb;
 800ab74:	4a9c      	ldr	r2, [pc, #624]	; (800ade8 <tcp_input+0x7d8>)
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ab7a:	69f8      	ldr	r0, [r7, #28]
 800ab7c:	f000 fb0a 	bl	800b194 <tcp_process>
 800ab80:	4603      	mov	r3, r0
 800ab82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab88:	f113 0f0d 	cmn.w	r3, #13
 800ab8c:	f000 80d3 	beq.w	800ad36 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ab90:	4b96      	ldr	r3, [pc, #600]	; (800adec <tcp_input+0x7dc>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d015      	beq.n	800abc8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d008      	beq.n	800abb8 <tcp_input+0x5a8>
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	6912      	ldr	r2, [r2, #16]
 800abb0:	f06f 010d 	mvn.w	r1, #13
 800abb4:	4610      	mov	r0, r2
 800abb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abb8:	69f9      	ldr	r1, [r7, #28]
 800abba:	488d      	ldr	r0, [pc, #564]	; (800adf0 <tcp_input+0x7e0>)
 800abbc:	f7ff fbb0 	bl	800a320 <tcp_pcb_remove>
        tcp_free(pcb);
 800abc0:	69f8      	ldr	r0, [r7, #28]
 800abc2:	f7fd fef7 	bl	80089b4 <tcp_free>
 800abc6:	e0c1      	b.n	800ad4c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800abcc:	4b89      	ldr	r3, [pc, #548]	; (800adf4 <tcp_input+0x7e4>)
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01d      	beq.n	800ac10 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800abd4:	4b87      	ldr	r3, [pc, #540]	; (800adf4 <tcp_input+0x7e4>)
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <tcp_input+0x5ea>
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	6910      	ldr	r0, [r2, #16]
 800abee:	89fa      	ldrh	r2, [r7, #14]
 800abf0:	69f9      	ldr	r1, [r7, #28]
 800abf2:	4798      	blx	r3
 800abf4:	4603      	mov	r3, r0
 800abf6:	74fb      	strb	r3, [r7, #19]
 800abf8:	e001      	b.n	800abfe <tcp_input+0x5ee>
 800abfa:	2300      	movs	r3, #0
 800abfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac02:	f113 0f0d 	cmn.w	r3, #13
 800ac06:	f000 8098 	beq.w	800ad3a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ac0a:	4b7a      	ldr	r3, [pc, #488]	; (800adf4 <tcp_input+0x7e4>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ac10:	69f8      	ldr	r0, [r7, #28]
 800ac12:	f000 f907 	bl	800ae24 <tcp_input_delayed_close>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 8090 	bne.w	800ad3e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ac1e:	4b76      	ldr	r3, [pc, #472]	; (800adf8 <tcp_input+0x7e8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d041      	beq.n	800acaa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <tcp_input+0x62c>
 800ac2e:	4b73      	ldr	r3, [pc, #460]	; (800adfc <tcp_input+0x7ec>)
 800ac30:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ac34:	4972      	ldr	r1, [pc, #456]	; (800ae00 <tcp_input+0x7f0>)
 800ac36:	4873      	ldr	r0, [pc, #460]	; (800ae04 <tcp_input+0x7f4>)
 800ac38:	f006 fde4 	bl	8011804 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	8b5b      	ldrh	r3, [r3, #26]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d008      	beq.n	800ac5a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac48:	4b6b      	ldr	r3, [pc, #428]	; (800adf8 <tcp_input+0x7e8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fd fc11 	bl	8008474 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac52:	69f8      	ldr	r0, [r7, #28]
 800ac54:	f7fe f996 	bl	8008f84 <tcp_abort>
            goto aborted;
 800ac58:	e078      	b.n	800ad4c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00c      	beq.n	800ac7e <tcp_input+0x66e>
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	6918      	ldr	r0, [r3, #16]
 800ac6e:	4b62      	ldr	r3, [pc, #392]	; (800adf8 <tcp_input+0x7e8>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	2300      	movs	r3, #0
 800ac74:	69f9      	ldr	r1, [r7, #28]
 800ac76:	47a0      	blx	r4
 800ac78:	4603      	mov	r3, r0
 800ac7a:	74fb      	strb	r3, [r7, #19]
 800ac7c:	e008      	b.n	800ac90 <tcp_input+0x680>
 800ac7e:	4b5e      	ldr	r3, [pc, #376]	; (800adf8 <tcp_input+0x7e8>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	2300      	movs	r3, #0
 800ac84:	69f9      	ldr	r1, [r7, #28]
 800ac86:	2000      	movs	r0, #0
 800ac88:	f7ff f884 	bl	8009d94 <tcp_recv_null>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ac90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac94:	f113 0f0d 	cmn.w	r3, #13
 800ac98:	d053      	beq.n	800ad42 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ac9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aca2:	4b55      	ldr	r3, [pc, #340]	; (800adf8 <tcp_input+0x7e8>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800acaa:	4b50      	ldr	r3, [pc, #320]	; (800adec <tcp_input+0x7dc>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d030      	beq.n	800ad18 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d009      	beq.n	800acd2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc2:	7b5a      	ldrb	r2, [r3, #13]
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc8:	f042 0220 	orr.w	r2, r2, #32
 800accc:	b2d2      	uxtb	r2, r2
 800acce:	735a      	strb	r2, [r3, #13]
 800acd0:	e022      	b.n	800ad18 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800acda:	d005      	beq.n	800ace8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ace0:	3301      	adds	r3, #1
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00b      	beq.n	800ad0a <tcp_input+0x6fa>
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	6918      	ldr	r0, [r3, #16]
 800acfc:	2300      	movs	r3, #0
 800acfe:	2200      	movs	r2, #0
 800ad00:	69f9      	ldr	r1, [r7, #28]
 800ad02:	47a0      	blx	r4
 800ad04:	4603      	mov	r3, r0
 800ad06:	74fb      	strb	r3, [r7, #19]
 800ad08:	e001      	b.n	800ad0e <tcp_input+0x6fe>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ad0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad12:	f113 0f0d 	cmn.w	r3, #13
 800ad16:	d016      	beq.n	800ad46 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ad18:	4b33      	ldr	r3, [pc, #204]	; (800ade8 <tcp_input+0x7d8>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad1e:	69f8      	ldr	r0, [r7, #28]
 800ad20:	f000 f880 	bl	800ae24 <tcp_input_delayed_close>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10f      	bne.n	800ad4a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad2a:	69f8      	ldr	r0, [r7, #28]
 800ad2c:	f002 ff10 	bl	800db50 <tcp_output>
 800ad30:	e00c      	b.n	800ad4c <tcp_input+0x73c>
        goto aborted;
 800ad32:	bf00      	nop
 800ad34:	e00a      	b.n	800ad4c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad36:	bf00      	nop
 800ad38:	e008      	b.n	800ad4c <tcp_input+0x73c>
              goto aborted;
 800ad3a:	bf00      	nop
 800ad3c:	e006      	b.n	800ad4c <tcp_input+0x73c>
          goto aborted;
 800ad3e:	bf00      	nop
 800ad40:	e004      	b.n	800ad4c <tcp_input+0x73c>
            goto aborted;
 800ad42:	bf00      	nop
 800ad44:	e002      	b.n	800ad4c <tcp_input+0x73c>
              goto aborted;
 800ad46:	bf00      	nop
 800ad48:	e000      	b.n	800ad4c <tcp_input+0x73c>
          goto aborted;
 800ad4a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad4c:	4b26      	ldr	r3, [pc, #152]	; (800ade8 <tcp_input+0x7d8>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad52:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <tcp_input+0x7e8>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ad58:	4b2b      	ldr	r3, [pc, #172]	; (800ae08 <tcp_input+0x7f8>)
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d03f      	beq.n	800ade0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ad60:	4b29      	ldr	r3, [pc, #164]	; (800ae08 <tcp_input+0x7f8>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fd fb85 	bl	8008474 <pbuf_free>
      inseg.p = NULL;
 800ad6a:	4b27      	ldr	r3, [pc, #156]	; (800ae08 <tcp_input+0x7f8>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad70:	e036      	b.n	800ade0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <tcp_input+0x7fc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fb ffe4 	bl	8006d48 <lwip_htons>
 800ad80:	4603      	mov	r3, r0
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d118      	bne.n	800adbe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad8c:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <tcp_input+0x800>)
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	4b20      	ldr	r3, [pc, #128]	; (800ae14 <tcp_input+0x804>)
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b20      	ldr	r3, [pc, #128]	; (800ae18 <tcp_input+0x808>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad9c:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <tcp_input+0x7fc>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ada0:	885b      	ldrh	r3, [r3, #2]
 800ada2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ada4:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <tcp_input+0x7fc>)
 800ada6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ada8:	8812      	ldrh	r2, [r2, #0]
 800adaa:	b292      	uxth	r2, r2
 800adac:	9202      	str	r2, [sp, #8]
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <tcp_input+0x80c>)
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <tcp_input+0x810>)
 800adb6:	4602      	mov	r2, r0
 800adb8:	2000      	movs	r0, #0
 800adba:	f003 fc7d 	bl	800e6b8 <tcp_rst>
    pbuf_free(p);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7fd fb58 	bl	8008474 <pbuf_free>
  return;
 800adc4:	e00c      	b.n	800ade0 <tcp_input+0x7d0>
    goto dropped;
 800adc6:	bf00      	nop
 800adc8:	e006      	b.n	800add8 <tcp_input+0x7c8>
    goto dropped;
 800adca:	bf00      	nop
 800adcc:	e004      	b.n	800add8 <tcp_input+0x7c8>
    goto dropped;
 800adce:	bf00      	nop
 800add0:	e002      	b.n	800add8 <tcp_input+0x7c8>
      goto dropped;
 800add2:	bf00      	nop
 800add4:	e000      	b.n	800add8 <tcp_input+0x7c8>
      goto dropped;
 800add6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7fd fb4b 	bl	8008474 <pbuf_free>
 800adde:	e000      	b.n	800ade2 <tcp_input+0x7d2>
  return;
 800ade0:	bf00      	nop
}
 800ade2:	3724      	adds	r7, #36	; 0x24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}
 800ade8:	200174f8 	.word	0x200174f8
 800adec:	20000581 	.word	0x20000581
 800adf0:	200174e4 	.word	0x200174e4
 800adf4:	2000057c 	.word	0x2000057c
 800adf8:	20000584 	.word	0x20000584
 800adfc:	08014c5c 	.word	0x08014c5c
 800ae00:	08014e10 	.word	0x08014e10
 800ae04:	08014ca8 	.word	0x08014ca8
 800ae08:	20000554 	.word	0x20000554
 800ae0c:	20000564 	.word	0x20000564
 800ae10:	20000578 	.word	0x20000578
 800ae14:	2000057e 	.word	0x2000057e
 800ae18:	20000574 	.word	0x20000574
 800ae1c:	2000a070 	.word	0x2000a070
 800ae20:	2000a074 	.word	0x2000a074

0800ae24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <tcp_input_delayed_close+0x1c>
 800ae32:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <tcp_input_delayed_close+0x6c>)
 800ae34:	f240 225a 	movw	r2, #602	; 0x25a
 800ae38:	4916      	ldr	r1, [pc, #88]	; (800ae94 <tcp_input_delayed_close+0x70>)
 800ae3a:	4817      	ldr	r0, [pc, #92]	; (800ae98 <tcp_input_delayed_close+0x74>)
 800ae3c:	f006 fce2 	bl	8011804 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ae40:	4b16      	ldr	r3, [pc, #88]	; (800ae9c <tcp_input_delayed_close+0x78>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01c      	beq.n	800ae86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	8b5b      	ldrh	r3, [r3, #26]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10d      	bne.n	800ae74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d008      	beq.n	800ae74 <tcp_input_delayed_close+0x50>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6912      	ldr	r2, [r2, #16]
 800ae6c:	f06f 010e 	mvn.w	r1, #14
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	480a      	ldr	r0, [pc, #40]	; (800aea0 <tcp_input_delayed_close+0x7c>)
 800ae78:	f7ff fa52 	bl	800a320 <tcp_pcb_remove>
    tcp_free(pcb);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7fd fd99 	bl	80089b4 <tcp_free>
    return 1;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	08014c5c 	.word	0x08014c5c
 800ae94:	08014e2c 	.word	0x08014e2c
 800ae98:	08014ca8 	.word	0x08014ca8
 800ae9c:	20000581 	.word	0x20000581
 800aea0:	200174e4 	.word	0x200174e4

0800aea4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aea4:	b590      	push	{r4, r7, lr}
 800aea6:	b08b      	sub	sp, #44	; 0x2c
 800aea8:	af04      	add	r7, sp, #16
 800aeaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aeac:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <tcp_listen_input+0x1c8>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 80d2 	bne.w	800b05e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <tcp_listen_input+0x2a>
 800aec0:	4b6b      	ldr	r3, [pc, #428]	; (800b070 <tcp_listen_input+0x1cc>)
 800aec2:	f240 2281 	movw	r2, #641	; 0x281
 800aec6:	496b      	ldr	r1, [pc, #428]	; (800b074 <tcp_listen_input+0x1d0>)
 800aec8:	486b      	ldr	r0, [pc, #428]	; (800b078 <tcp_listen_input+0x1d4>)
 800aeca:	f006 fc9b 	bl	8011804 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aece:	4b67      	ldr	r3, [pc, #412]	; (800b06c <tcp_listen_input+0x1c8>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 0310 	and.w	r3, r3, #16
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d019      	beq.n	800af0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aeda:	4b68      	ldr	r3, [pc, #416]	; (800b07c <tcp_listen_input+0x1d8>)
 800aedc:	6819      	ldr	r1, [r3, #0]
 800aede:	4b68      	ldr	r3, [pc, #416]	; (800b080 <tcp_listen_input+0x1dc>)
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	4b67      	ldr	r3, [pc, #412]	; (800b084 <tcp_listen_input+0x1e0>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aeea:	4b67      	ldr	r3, [pc, #412]	; (800b088 <tcp_listen_input+0x1e4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aeee:	885b      	ldrh	r3, [r3, #2]
 800aef0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aef2:	4a65      	ldr	r2, [pc, #404]	; (800b088 <tcp_listen_input+0x1e4>)
 800aef4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aef6:	8812      	ldrh	r2, [r2, #0]
 800aef8:	b292      	uxth	r2, r2
 800aefa:	9202      	str	r2, [sp, #8]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	4b63      	ldr	r3, [pc, #396]	; (800b08c <tcp_listen_input+0x1e8>)
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	4b63      	ldr	r3, [pc, #396]	; (800b090 <tcp_listen_input+0x1ec>)
 800af04:	4602      	mov	r2, r0
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f003 fbd6 	bl	800e6b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800af0c:	e0a9      	b.n	800b062 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800af0e:	4b57      	ldr	r3, [pc, #348]	; (800b06c <tcp_listen_input+0x1c8>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 80a3 	beq.w	800b062 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	7d5b      	ldrb	r3, [r3, #21]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff f85b 	bl	8009fdc <tcp_alloc>
 800af26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d111      	bne.n	800af52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <tcp_listen_input+0xa8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6910      	ldr	r0, [r2, #16]
 800af3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af42:	2100      	movs	r1, #0
 800af44:	4798      	blx	r3
 800af46:	4603      	mov	r3, r0
 800af48:	73bb      	strb	r3, [r7, #14]
      return;
 800af4a:	e08b      	b.n	800b064 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af4c:	23f0      	movs	r3, #240	; 0xf0
 800af4e:	73bb      	strb	r3, [r7, #14]
      return;
 800af50:	e088      	b.n	800b064 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800af52:	4b50      	ldr	r3, [pc, #320]	; (800b094 <tcp_listen_input+0x1f0>)
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800af5a:	4b4e      	ldr	r3, [pc, #312]	; (800b094 <tcp_listen_input+0x1f0>)
 800af5c:	691a      	ldr	r2, [r3, #16]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	8ada      	ldrh	r2, [r3, #22]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800af6a:	4b47      	ldr	r3, [pc, #284]	; (800b088 <tcp_listen_input+0x1e4>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	881b      	ldrh	r3, [r3, #0]
 800af70:	b29a      	uxth	r2, r3
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2203      	movs	r2, #3
 800af7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800af7c:	4b41      	ldr	r3, [pc, #260]	; (800b084 <tcp_listen_input+0x1e0>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	1c5a      	adds	r2, r3, #1
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800af8e:	6978      	ldr	r0, [r7, #20]
 800af90:	f7ff fa5a 	bl	800a448 <tcp_next_iss>
 800af94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800afae:	4b35      	ldr	r3, [pc, #212]	; (800b084 <tcp_listen_input+0x1e0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	1e5a      	subs	r2, r3, #1
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7a5b      	ldrb	r3, [r3, #9]
 800afca:	f003 030c 	and.w	r3, r3, #12
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7a1a      	ldrb	r2, [r3, #8]
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800afdc:	4b2e      	ldr	r3, [pc, #184]	; (800b098 <tcp_listen_input+0x1f4>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	60da      	str	r2, [r3, #12]
 800afe4:	4a2c      	ldr	r2, [pc, #176]	; (800b098 <tcp_listen_input+0x1f4>)
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	f003 fd27 	bl	800ea3c <tcp_timer_needed>
 800afee:	4b2b      	ldr	r3, [pc, #172]	; (800b09c <tcp_listen_input+0x1f8>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aff4:	6978      	ldr	r0, [r7, #20]
 800aff6:	f001 fd8d 	bl	800cb14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <tcp_listen_input+0x1e4>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	89db      	ldrh	r3, [r3, #14]
 800b000:	b29a      	uxth	r2, r3
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4618      	mov	r0, r3
 800b01e:	f005 f8eb 	bl	80101f8 <ip4_route>
 800b022:	4601      	mov	r1, r0
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	3304      	adds	r3, #4
 800b028:	461a      	mov	r2, r3
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff fa32 	bl	800a494 <tcp_eff_send_mss_netif>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b038:	2112      	movs	r1, #18
 800b03a:	6978      	ldr	r0, [r7, #20]
 800b03c:	f002 fc9a 	bl	800d974 <tcp_enqueue_flags>
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b04c:	2100      	movs	r1, #0
 800b04e:	6978      	ldr	r0, [r7, #20]
 800b050:	f7fd feda 	bl	8008e08 <tcp_abandon>
      return;
 800b054:	e006      	b.n	800b064 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b056:	6978      	ldr	r0, [r7, #20]
 800b058:	f002 fd7a 	bl	800db50 <tcp_output>
  return;
 800b05c:	e001      	b.n	800b062 <tcp_listen_input+0x1be>
    return;
 800b05e:	bf00      	nop
 800b060:	e000      	b.n	800b064 <tcp_listen_input+0x1c0>
  return;
 800b062:	bf00      	nop
}
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	bd90      	pop	{r4, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000580 	.word	0x20000580
 800b070:	08014c5c 	.word	0x08014c5c
 800b074:	08014e54 	.word	0x08014e54
 800b078:	08014ca8 	.word	0x08014ca8
 800b07c:	20000578 	.word	0x20000578
 800b080:	2000057e 	.word	0x2000057e
 800b084:	20000574 	.word	0x20000574
 800b088:	20000564 	.word	0x20000564
 800b08c:	2000a070 	.word	0x2000a070
 800b090:	2000a074 	.word	0x2000a074
 800b094:	2000a060 	.word	0x2000a060
 800b098:	200174e4 	.word	0x200174e4
 800b09c:	200174e0 	.word	0x200174e0

0800b0a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af04      	add	r7, sp, #16
 800b0a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b0a8:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <tcp_timewait_input+0xc8>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d153      	bne.n	800b15c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <tcp_timewait_input+0x28>
 800b0ba:	4b2c      	ldr	r3, [pc, #176]	; (800b16c <tcp_timewait_input+0xcc>)
 800b0bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b0c0:	492b      	ldr	r1, [pc, #172]	; (800b170 <tcp_timewait_input+0xd0>)
 800b0c2:	482c      	ldr	r0, [pc, #176]	; (800b174 <tcp_timewait_input+0xd4>)
 800b0c4:	f006 fb9e 	bl	8011804 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b0c8:	4b27      	ldr	r3, [pc, #156]	; (800b168 <tcp_timewait_input+0xc8>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d02a      	beq.n	800b12a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b0d4:	4b28      	ldr	r3, [pc, #160]	; (800b178 <tcp_timewait_input+0xd8>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	db2d      	blt.n	800b13e <tcp_timewait_input+0x9e>
 800b0e2:	4b25      	ldr	r3, [pc, #148]	; (800b178 <tcp_timewait_input+0xd8>)
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0ee:	440b      	add	r3, r1
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc23      	bgt.n	800b13e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f6:	4b21      	ldr	r3, [pc, #132]	; (800b17c <tcp_timewait_input+0xdc>)
 800b0f8:	6819      	ldr	r1, [r3, #0]
 800b0fa:	4b21      	ldr	r3, [pc, #132]	; (800b180 <tcp_timewait_input+0xe0>)
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	4b1d      	ldr	r3, [pc, #116]	; (800b178 <tcp_timewait_input+0xd8>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b106:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <tcp_timewait_input+0xe4>)
 800b108:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b10a:	885b      	ldrh	r3, [r3, #2]
 800b10c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b10e:	4a1d      	ldr	r2, [pc, #116]	; (800b184 <tcp_timewait_input+0xe4>)
 800b110:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b112:	8812      	ldrh	r2, [r2, #0]
 800b114:	b292      	uxth	r2, r2
 800b116:	9202      	str	r2, [sp, #8]
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	4b1b      	ldr	r3, [pc, #108]	; (800b188 <tcp_timewait_input+0xe8>)
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	4b1b      	ldr	r3, [pc, #108]	; (800b18c <tcp_timewait_input+0xec>)
 800b120:	4602      	mov	r2, r0
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f003 fac8 	bl	800e6b8 <tcp_rst>
      return;
 800b128:	e01b      	b.n	800b162 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b12a:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <tcp_timewait_input+0xc8>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b136:	4b16      	ldr	r3, [pc, #88]	; (800b190 <tcp_timewait_input+0xf0>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b13e:	4b10      	ldr	r3, [pc, #64]	; (800b180 <tcp_timewait_input+0xe0>)
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00c      	beq.n	800b160 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	8b5b      	ldrh	r3, [r3, #26]
 800b14a:	f043 0302 	orr.w	r3, r3, #2
 800b14e:	b29a      	uxth	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f002 fcfb 	bl	800db50 <tcp_output>
  }
  return;
 800b15a:	e001      	b.n	800b160 <tcp_timewait_input+0xc0>
    return;
 800b15c:	bf00      	nop
 800b15e:	e000      	b.n	800b162 <tcp_timewait_input+0xc2>
  return;
 800b160:	bf00      	nop
}
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20000580 	.word	0x20000580
 800b16c:	08014c5c 	.word	0x08014c5c
 800b170:	08014e74 	.word	0x08014e74
 800b174:	08014ca8 	.word	0x08014ca8
 800b178:	20000574 	.word	0x20000574
 800b17c:	20000578 	.word	0x20000578
 800b180:	2000057e 	.word	0x2000057e
 800b184:	20000564 	.word	0x20000564
 800b188:	2000a070 	.word	0x2000a070
 800b18c:	2000a074 	.word	0x2000a074
 800b190:	200174e8 	.word	0x200174e8

0800b194 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b08d      	sub	sp, #52	; 0x34
 800b198:	af04      	add	r7, sp, #16
 800b19a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <tcp_process+0x24>
 800b1aa:	4ba5      	ldr	r3, [pc, #660]	; (800b440 <tcp_process+0x2ac>)
 800b1ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b1b0:	49a4      	ldr	r1, [pc, #656]	; (800b444 <tcp_process+0x2b0>)
 800b1b2:	48a5      	ldr	r0, [pc, #660]	; (800b448 <tcp_process+0x2b4>)
 800b1b4:	f006 fb26 	bl	8011804 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b1b8:	4ba4      	ldr	r3, [pc, #656]	; (800b44c <tcp_process+0x2b8>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d04e      	beq.n	800b262 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d108      	bne.n	800b1de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1d0:	4b9f      	ldr	r3, [pc, #636]	; (800b450 <tcp_process+0x2bc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d123      	bne.n	800b220 <tcp_process+0x8c>
        acceptable = 1;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	76fb      	strb	r3, [r7, #27]
 800b1dc:	e020      	b.n	800b220 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e2:	4b9c      	ldr	r3, [pc, #624]	; (800b454 <tcp_process+0x2c0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d102      	bne.n	800b1f0 <tcp_process+0x5c>
        acceptable = 1;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	76fb      	strb	r3, [r7, #27]
 800b1ee:	e017      	b.n	800b220 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1f0:	4b98      	ldr	r3, [pc, #608]	; (800b454 <tcp_process+0x2c0>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	db10      	blt.n	800b220 <tcp_process+0x8c>
 800b1fe:	4b95      	ldr	r3, [pc, #596]	; (800b454 <tcp_process+0x2c0>)
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b20a:	440b      	add	r3, r1
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	dc06      	bgt.n	800b220 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	8b5b      	ldrh	r3, [r3, #26]
 800b216:	f043 0302 	orr.w	r3, r3, #2
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b220:	7efb      	ldrb	r3, [r7, #27]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d01b      	beq.n	800b25e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	7d1b      	ldrb	r3, [r3, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <tcp_process+0xa8>
 800b22e:	4b84      	ldr	r3, [pc, #528]	; (800b440 <tcp_process+0x2ac>)
 800b230:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b234:	4988      	ldr	r1, [pc, #544]	; (800b458 <tcp_process+0x2c4>)
 800b236:	4884      	ldr	r0, [pc, #528]	; (800b448 <tcp_process+0x2b4>)
 800b238:	f006 fae4 	bl	8011804 <iprintf>
      recv_flags |= TF_RESET;
 800b23c:	4b87      	ldr	r3, [pc, #540]	; (800b45c <tcp_process+0x2c8>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	f043 0308 	orr.w	r3, r3, #8
 800b244:	b2da      	uxtb	r2, r3
 800b246:	4b85      	ldr	r3, [pc, #532]	; (800b45c <tcp_process+0x2c8>)
 800b248:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	8b5b      	ldrh	r3, [r3, #26]
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b258:	f06f 030d 	mvn.w	r3, #13
 800b25c:	e37a      	b.n	800b954 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	e378      	b.n	800b954 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b262:	4b7a      	ldr	r3, [pc, #488]	; (800b44c <tcp_process+0x2b8>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d010      	beq.n	800b290 <tcp_process+0xfc>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7d1b      	ldrb	r3, [r3, #20]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d00c      	beq.n	800b290 <tcp_process+0xfc>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	7d1b      	ldrb	r3, [r3, #20]
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d008      	beq.n	800b290 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	8b5b      	ldrh	r3, [r3, #26]
 800b282:	f043 0302 	orr.w	r3, r3, #2
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	e361      	b.n	800b954 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8b5b      	ldrh	r3, [r3, #26]
 800b294:	f003 0310 	and.w	r3, r3, #16
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d103      	bne.n	800b2a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b29c:	4b70      	ldr	r3, [pc, #448]	; (800b460 <tcp_process+0x2cc>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f001 fc2d 	bl	800cb14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7d1b      	ldrb	r3, [r3, #20]
 800b2be:	3b02      	subs	r3, #2
 800b2c0:	2b07      	cmp	r3, #7
 800b2c2:	f200 8337 	bhi.w	800b934 <tcp_process+0x7a0>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <tcp_process+0x138>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b2ed 	.word	0x0800b2ed
 800b2d0:	0800b51d 	.word	0x0800b51d
 800b2d4:	0800b695 	.word	0x0800b695
 800b2d8:	0800b6bf 	.word	0x0800b6bf
 800b2dc:	0800b7e3 	.word	0x0800b7e3
 800b2e0:	0800b695 	.word	0x0800b695
 800b2e4:	0800b86f 	.word	0x0800b86f
 800b2e8:	0800b8ff 	.word	0x0800b8ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b2ec:	4b57      	ldr	r3, [pc, #348]	; (800b44c <tcp_process+0x2b8>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 0310 	and.w	r3, r3, #16
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 80e4 	beq.w	800b4c2 <tcp_process+0x32e>
 800b2fa:	4b54      	ldr	r3, [pc, #336]	; (800b44c <tcp_process+0x2b8>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 80dd 	beq.w	800b4c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	4b50      	ldr	r3, [pc, #320]	; (800b450 <tcp_process+0x2bc>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	f040 80d5 	bne.w	800b4c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b318:	4b4e      	ldr	r3, [pc, #312]	; (800b454 <tcp_process+0x2c0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b32a:	4b49      	ldr	r3, [pc, #292]	; (800b450 <tcp_process+0x2bc>)
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b332:	4b4c      	ldr	r3, [pc, #304]	; (800b464 <tcp_process+0x2d0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	89db      	ldrh	r3, [r3, #14]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b34c:	4b41      	ldr	r3, [pc, #260]	; (800b454 <tcp_process+0x2c0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	1e5a      	subs	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2204      	movs	r2, #4
 800b35a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3304      	adds	r3, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f004 ff47 	bl	80101f8 <ip4_route>
 800b36a:	4601      	mov	r1, r0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3304      	adds	r3, #4
 800b370:	461a      	mov	r2, r3
 800b372:	4620      	mov	r0, r4
 800b374:	f7ff f88e 	bl	800a494 <tcp_eff_send_mss_netif>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b384:	009a      	lsls	r2, r3, #2
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	f241 111c 	movw	r1, #4380	; 0x111c
 800b390:	428b      	cmp	r3, r1
 800b392:	bf38      	it	cc
 800b394:	460b      	movcc	r3, r1
 800b396:	429a      	cmp	r2, r3
 800b398:	d204      	bcs.n	800b3a4 <tcp_process+0x210>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	e00d      	b.n	800b3c0 <tcp_process+0x22c>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d904      	bls.n	800b3bc <tcp_process+0x228>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	e001      	b.n	800b3c0 <tcp_process+0x22c>
 800b3bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d106      	bne.n	800b3de <tcp_process+0x24a>
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <tcp_process+0x2ac>)
 800b3d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b3d6:	4924      	ldr	r1, [pc, #144]	; (800b468 <tcp_process+0x2d4>)
 800b3d8:	481b      	ldr	r0, [pc, #108]	; (800b448 <tcp_process+0x2b4>)
 800b3da:	f006 fa13 	bl	8011804 <iprintf>
        --pcb->snd_queuelen;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d111      	bne.n	800b41e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <tcp_process+0x280>
 800b406:	4b0e      	ldr	r3, [pc, #56]	; (800b440 <tcp_process+0x2ac>)
 800b408:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b40c:	4917      	ldr	r1, [pc, #92]	; (800b46c <tcp_process+0x2d8>)
 800b40e:	480e      	ldr	r0, [pc, #56]	; (800b448 <tcp_process+0x2b4>)
 800b410:	f006 f9f8 	bl	8011804 <iprintf>
          pcb->unsent = rseg->next;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b41c:	e003      	b.n	800b426 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b426:	69f8      	ldr	r0, [r7, #28]
 800b428:	f7fe fc51 	bl	8009cce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11d      	bne.n	800b470 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b43a:	861a      	strh	r2, [r3, #48]	; 0x30
 800b43c:	e01f      	b.n	800b47e <tcp_process+0x2ea>
 800b43e:	bf00      	nop
 800b440:	08014c5c 	.word	0x08014c5c
 800b444:	08014e94 	.word	0x08014e94
 800b448:	08014ca8 	.word	0x08014ca8
 800b44c:	20000580 	.word	0x20000580
 800b450:	20000578 	.word	0x20000578
 800b454:	20000574 	.word	0x20000574
 800b458:	08014eb0 	.word	0x08014eb0
 800b45c:	20000581 	.word	0x20000581
 800b460:	200174e8 	.word	0x200174e8
 800b464:	20000564 	.word	0x20000564
 800b468:	08014ed0 	.word	0x08014ed0
 800b46c:	08014ee8 	.word	0x08014ee8
        } else {
          pcb->rtime = 0;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <tcp_process+0x30a>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6910      	ldr	r0, [r2, #16]
 800b492:	2200      	movs	r2, #0
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4798      	blx	r3
 800b498:	4603      	mov	r3, r0
 800b49a:	76bb      	strb	r3, [r7, #26]
 800b49c:	e001      	b.n	800b4a2 <tcp_process+0x30e>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b4a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4a6:	f113 0f0d 	cmn.w	r3, #13
 800b4aa:	d102      	bne.n	800b4b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b4ac:	f06f 030c 	mvn.w	r3, #12
 800b4b0:	e250      	b.n	800b954 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	8b5b      	ldrh	r3, [r3, #26]
 800b4b6:	f043 0302 	orr.w	r3, r3, #2
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b4c0:	e23a      	b.n	800b938 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b4c2:	4b9d      	ldr	r3, [pc, #628]	; (800b738 <tcp_process+0x5a4>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	f003 0310 	and.w	r3, r3, #16
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 8234 	beq.w	800b938 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4d0:	4b9a      	ldr	r3, [pc, #616]	; (800b73c <tcp_process+0x5a8>)
 800b4d2:	6819      	ldr	r1, [r3, #0]
 800b4d4:	4b9a      	ldr	r3, [pc, #616]	; (800b740 <tcp_process+0x5ac>)
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4b9a      	ldr	r3, [pc, #616]	; (800b744 <tcp_process+0x5b0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4e0:	4b99      	ldr	r3, [pc, #612]	; (800b748 <tcp_process+0x5b4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4e8:	4a97      	ldr	r2, [pc, #604]	; (800b748 <tcp_process+0x5b4>)
 800b4ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4ec:	8812      	ldrh	r2, [r2, #0]
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	9202      	str	r2, [sp, #8]
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	4b95      	ldr	r3, [pc, #596]	; (800b74c <tcp_process+0x5b8>)
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4b95      	ldr	r3, [pc, #596]	; (800b750 <tcp_process+0x5bc>)
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f003 f8db 	bl	800e6b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b508:	2b05      	cmp	r3, #5
 800b50a:	f200 8215 	bhi.w	800b938 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f002 fea5 	bl	800e264 <tcp_rexmit_rto>
      break;
 800b51a:	e20d      	b.n	800b938 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b51c:	4b86      	ldr	r3, [pc, #536]	; (800b738 <tcp_process+0x5a4>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 80a1 	beq.w	800b66c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b52a:	4b84      	ldr	r3, [pc, #528]	; (800b73c <tcp_process+0x5a8>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	3b01      	subs	r3, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	db7e      	blt.n	800b638 <tcp_process+0x4a4>
 800b53a:	4b80      	ldr	r3, [pc, #512]	; (800b73c <tcp_process+0x5a8>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc77      	bgt.n	800b638 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2204      	movs	r2, #4
 800b54c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b556:	23fa      	movs	r3, #250	; 0xfa
 800b558:	76bb      	strb	r3, [r7, #26]
 800b55a:	e01d      	b.n	800b598 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <tcp_process+0x3e0>
 800b566:	4b7b      	ldr	r3, [pc, #492]	; (800b754 <tcp_process+0x5c0>)
 800b568:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b56c:	497a      	ldr	r1, [pc, #488]	; (800b758 <tcp_process+0x5c4>)
 800b56e:	487b      	ldr	r0, [pc, #492]	; (800b75c <tcp_process+0x5c8>)
 800b570:	f006 f948 	bl	8011804 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00a      	beq.n	800b594 <tcp_process+0x400>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6910      	ldr	r0, [r2, #16]
 800b588:	2200      	movs	r2, #0
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	4798      	blx	r3
 800b58e:	4603      	mov	r3, r0
 800b590:	76bb      	strb	r3, [r7, #26]
 800b592:	e001      	b.n	800b598 <tcp_process+0x404>
 800b594:	23f0      	movs	r3, #240	; 0xf0
 800b596:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b598:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00a      	beq.n	800b5b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b5a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5a4:	f113 0f0d 	cmn.w	r3, #13
 800b5a8:	d002      	beq.n	800b5b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fd fcea 	bl	8008f84 <tcp_abort>
            }
            return ERR_ABRT;
 800b5b0:	f06f 030c 	mvn.w	r3, #12
 800b5b4:	e1ce      	b.n	800b954 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fae0 	bl	800bb7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b5bc:	4b68      	ldr	r3, [pc, #416]	; (800b760 <tcp_process+0x5cc>)
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <tcp_process+0x43c>
            recv_acked--;
 800b5c4:	4b66      	ldr	r3, [pc, #408]	; (800b760 <tcp_process+0x5cc>)
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	4b64      	ldr	r3, [pc, #400]	; (800b760 <tcp_process+0x5cc>)
 800b5ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5d4:	009a      	lsls	r2, r3, #2
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800b5e0:	428b      	cmp	r3, r1
 800b5e2:	bf38      	it	cc
 800b5e4:	460b      	movcc	r3, r1
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d204      	bcs.n	800b5f4 <tcp_process+0x460>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	e00d      	b.n	800b610 <tcp_process+0x47c>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d904      	bls.n	800b60c <tcp_process+0x478>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	b29b      	uxth	r3, r3
 800b60a:	e001      	b.n	800b610 <tcp_process+0x47c>
 800b60c:	f241 131c 	movw	r3, #4380	; 0x111c
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b616:	4b53      	ldr	r3, [pc, #332]	; (800b764 <tcp_process+0x5d0>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d037      	beq.n	800b692 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	8b5b      	ldrh	r3, [r3, #26]
 800b626:	f043 0302 	orr.w	r3, r3, #2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2207      	movs	r2, #7
 800b634:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b636:	e02c      	b.n	800b692 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b638:	4b40      	ldr	r3, [pc, #256]	; (800b73c <tcp_process+0x5a8>)
 800b63a:	6819      	ldr	r1, [r3, #0]
 800b63c:	4b40      	ldr	r3, [pc, #256]	; (800b740 <tcp_process+0x5ac>)
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	461a      	mov	r2, r3
 800b642:	4b40      	ldr	r3, [pc, #256]	; (800b744 <tcp_process+0x5b0>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b648:	4b3f      	ldr	r3, [pc, #252]	; (800b748 <tcp_process+0x5b4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b650:	4a3d      	ldr	r2, [pc, #244]	; (800b748 <tcp_process+0x5b4>)
 800b652:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b654:	8812      	ldrh	r2, [r2, #0]
 800b656:	b292      	uxth	r2, r2
 800b658:	9202      	str	r2, [sp, #8]
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	4b3b      	ldr	r3, [pc, #236]	; (800b74c <tcp_process+0x5b8>)
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4b3b      	ldr	r3, [pc, #236]	; (800b750 <tcp_process+0x5bc>)
 800b662:	4602      	mov	r2, r0
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f003 f827 	bl	800e6b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b66a:	e167      	b.n	800b93c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b66c:	4b32      	ldr	r3, [pc, #200]	; (800b738 <tcp_process+0x5a4>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8161 	beq.w	800b93c <tcp_process+0x7a8>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	4b30      	ldr	r3, [pc, #192]	; (800b744 <tcp_process+0x5b0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	f040 8159 	bne.w	800b93c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f002 fe0c 	bl	800e2a8 <tcp_rexmit>
      break;
 800b690:	e154      	b.n	800b93c <tcp_process+0x7a8>
 800b692:	e153      	b.n	800b93c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fa71 	bl	800bb7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b69a:	4b32      	ldr	r3, [pc, #200]	; (800b764 <tcp_process+0x5d0>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 814c 	beq.w	800b940 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8b5b      	ldrh	r3, [r3, #26]
 800b6ac:	f043 0302 	orr.w	r3, r3, #2
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2207      	movs	r2, #7
 800b6ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6bc:	e140      	b.n	800b940 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa5c 	bl	800bb7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6c4:	4b27      	ldr	r3, [pc, #156]	; (800b764 <tcp_process+0x5d0>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d071      	beq.n	800b7b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6d0:	4b19      	ldr	r3, [pc, #100]	; (800b738 <tcp_process+0x5a4>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	f003 0310 	and.w	r3, r3, #16
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d060      	beq.n	800b79e <tcp_process+0x60a>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6e0:	4b16      	ldr	r3, [pc, #88]	; (800b73c <tcp_process+0x5a8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d15a      	bne.n	800b79e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d156      	bne.n	800b79e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f043 0302 	orr.w	r3, r3, #2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7fe fdbe 	bl	800a280 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b704:	4b18      	ldr	r3, [pc, #96]	; (800b768 <tcp_process+0x5d4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d105      	bne.n	800b71a <tcp_process+0x586>
 800b70e:	4b16      	ldr	r3, [pc, #88]	; (800b768 <tcp_process+0x5d4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	4a14      	ldr	r2, [pc, #80]	; (800b768 <tcp_process+0x5d4>)
 800b716:	6013      	str	r3, [r2, #0]
 800b718:	e02e      	b.n	800b778 <tcp_process+0x5e4>
 800b71a:	4b13      	ldr	r3, [pc, #76]	; (800b768 <tcp_process+0x5d4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	e027      	b.n	800b772 <tcp_process+0x5de>
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d11f      	bne.n	800b76c <tcp_process+0x5d8>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	60da      	str	r2, [r3, #12]
 800b734:	e020      	b.n	800b778 <tcp_process+0x5e4>
 800b736:	bf00      	nop
 800b738:	20000580 	.word	0x20000580
 800b73c:	20000578 	.word	0x20000578
 800b740:	2000057e 	.word	0x2000057e
 800b744:	20000574 	.word	0x20000574
 800b748:	20000564 	.word	0x20000564
 800b74c:	2000a070 	.word	0x2000a070
 800b750:	2000a074 	.word	0x2000a074
 800b754:	08014c5c 	.word	0x08014c5c
 800b758:	08014efc 	.word	0x08014efc
 800b75c:	08014ca8 	.word	0x08014ca8
 800b760:	2000057c 	.word	0x2000057c
 800b764:	20000581 	.word	0x20000581
 800b768:	200174e4 	.word	0x200174e4
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1d4      	bne.n	800b722 <tcp_process+0x58e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	4b77      	ldr	r3, [pc, #476]	; (800b95c <tcp_process+0x7c8>)
 800b780:	2201      	movs	r2, #1
 800b782:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	220a      	movs	r2, #10
 800b788:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b78a:	4b75      	ldr	r3, [pc, #468]	; (800b960 <tcp_process+0x7cc>)
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60da      	str	r2, [r3, #12]
 800b792:	4a73      	ldr	r2, [pc, #460]	; (800b960 <tcp_process+0x7cc>)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	f003 f950 	bl	800ea3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b79c:	e0d2      	b.n	800b944 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	8b5b      	ldrh	r3, [r3, #26]
 800b7a2:	f043 0302 	orr.w	r3, r3, #2
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	751a      	strb	r2, [r3, #20]
      break;
 800b7b2:	e0c7      	b.n	800b944 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7b4:	4b6b      	ldr	r3, [pc, #428]	; (800b964 <tcp_process+0x7d0>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80c1 	beq.w	800b944 <tcp_process+0x7b0>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7c6:	4b68      	ldr	r3, [pc, #416]	; (800b968 <tcp_process+0x7d4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	f040 80ba 	bne.w	800b944 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f040 80b5 	bne.w	800b944 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2206      	movs	r2, #6
 800b7de:	751a      	strb	r2, [r3, #20]
      break;
 800b7e0:	e0b0      	b.n	800b944 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f9ca 	bl	800bb7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b7e8:	4b60      	ldr	r3, [pc, #384]	; (800b96c <tcp_process+0x7d8>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 0320 	and.w	r3, r3, #32
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 80a9 	beq.w	800b948 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8b5b      	ldrh	r3, [r3, #26]
 800b7fa:	f043 0302 	orr.w	r3, r3, #2
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7fe fd3b 	bl	800a280 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b80a:	4b59      	ldr	r3, [pc, #356]	; (800b970 <tcp_process+0x7dc>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d105      	bne.n	800b820 <tcp_process+0x68c>
 800b814:	4b56      	ldr	r3, [pc, #344]	; (800b970 <tcp_process+0x7dc>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	4a55      	ldr	r2, [pc, #340]	; (800b970 <tcp_process+0x7dc>)
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	e013      	b.n	800b848 <tcp_process+0x6b4>
 800b820:	4b53      	ldr	r3, [pc, #332]	; (800b970 <tcp_process+0x7dc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	e00c      	b.n	800b842 <tcp_process+0x6ae>
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d104      	bne.n	800b83c <tcp_process+0x6a8>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68da      	ldr	r2, [r3, #12]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	60da      	str	r2, [r3, #12]
 800b83a:	e005      	b.n	800b848 <tcp_process+0x6b4>
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	613b      	str	r3, [r7, #16]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1ef      	bne.n	800b828 <tcp_process+0x694>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	60da      	str	r2, [r3, #12]
 800b84e:	4b43      	ldr	r3, [pc, #268]	; (800b95c <tcp_process+0x7c8>)
 800b850:	2201      	movs	r2, #1
 800b852:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	220a      	movs	r2, #10
 800b858:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b85a:	4b41      	ldr	r3, [pc, #260]	; (800b960 <tcp_process+0x7cc>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	60da      	str	r2, [r3, #12]
 800b862:	4a3f      	ldr	r2, [pc, #252]	; (800b960 <tcp_process+0x7cc>)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	f003 f8e8 	bl	800ea3c <tcp_timer_needed>
      }
      break;
 800b86c:	e06c      	b.n	800b948 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f984 	bl	800bb7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b874:	4b3b      	ldr	r3, [pc, #236]	; (800b964 <tcp_process+0x7d0>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	f003 0310 	and.w	r3, r3, #16
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d065      	beq.n	800b94c <tcp_process+0x7b8>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b884:	4b38      	ldr	r3, [pc, #224]	; (800b968 <tcp_process+0x7d4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d15f      	bne.n	800b94c <tcp_process+0x7b8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b890:	2b00      	cmp	r3, #0
 800b892:	d15b      	bne.n	800b94c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7fe fcf3 	bl	800a280 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b89a:	4b35      	ldr	r3, [pc, #212]	; (800b970 <tcp_process+0x7dc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d105      	bne.n	800b8b0 <tcp_process+0x71c>
 800b8a4:	4b32      	ldr	r3, [pc, #200]	; (800b970 <tcp_process+0x7dc>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	4a31      	ldr	r2, [pc, #196]	; (800b970 <tcp_process+0x7dc>)
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	e013      	b.n	800b8d8 <tcp_process+0x744>
 800b8b0:	4b2f      	ldr	r3, [pc, #188]	; (800b970 <tcp_process+0x7dc>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e00c      	b.n	800b8d2 <tcp_process+0x73e>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d104      	bne.n	800b8cc <tcp_process+0x738>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68da      	ldr	r2, [r3, #12]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	e005      	b.n	800b8d8 <tcp_process+0x744>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1ef      	bne.n	800b8b8 <tcp_process+0x724>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	60da      	str	r2, [r3, #12]
 800b8de:	4b1f      	ldr	r3, [pc, #124]	; (800b95c <tcp_process+0x7c8>)
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	220a      	movs	r2, #10
 800b8e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8ea:	4b1d      	ldr	r3, [pc, #116]	; (800b960 <tcp_process+0x7cc>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	4a1b      	ldr	r2, [pc, #108]	; (800b960 <tcp_process+0x7cc>)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	f003 f8a0 	bl	800ea3c <tcp_timer_needed>
      }
      break;
 800b8fc:	e026      	b.n	800b94c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f93c 	bl	800bb7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b904:	4b17      	ldr	r3, [pc, #92]	; (800b964 <tcp_process+0x7d0>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f003 0310 	and.w	r3, r3, #16
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01f      	beq.n	800b950 <tcp_process+0x7bc>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b914:	4b14      	ldr	r3, [pc, #80]	; (800b968 <tcp_process+0x7d4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d119      	bne.n	800b950 <tcp_process+0x7bc>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d115      	bne.n	800b950 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b924:	4b11      	ldr	r3, [pc, #68]	; (800b96c <tcp_process+0x7d8>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f043 0310 	orr.w	r3, r3, #16
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <tcp_process+0x7d8>)
 800b930:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b932:	e00d      	b.n	800b950 <tcp_process+0x7bc>
    default:
      break;
 800b934:	bf00      	nop
 800b936:	e00c      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b938:	bf00      	nop
 800b93a:	e00a      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b93c:	bf00      	nop
 800b93e:	e008      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b940:	bf00      	nop
 800b942:	e006      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <tcp_process+0x7be>
      break;
 800b950:	bf00      	nop
  }
  return ERR_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3724      	adds	r7, #36	; 0x24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd90      	pop	{r4, r7, pc}
 800b95c:	200174e0 	.word	0x200174e0
 800b960:	200174f4 	.word	0x200174f4
 800b964:	20000580 	.word	0x20000580
 800b968:	20000578 	.word	0x20000578
 800b96c:	20000581 	.word	0x20000581
 800b970:	200174e4 	.word	0x200174e4

0800b974 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <tcp_oos_insert_segment+0x1e>
 800b984:	4b3b      	ldr	r3, [pc, #236]	; (800ba74 <tcp_oos_insert_segment+0x100>)
 800b986:	f240 421f 	movw	r2, #1055	; 0x41f
 800b98a:	493b      	ldr	r1, [pc, #236]	; (800ba78 <tcp_oos_insert_segment+0x104>)
 800b98c:	483b      	ldr	r0, [pc, #236]	; (800ba7c <tcp_oos_insert_segment+0x108>)
 800b98e:	f005 ff39 	bl	8011804 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	899b      	ldrh	r3, [r3, #12]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fb f9d4 	bl	8006d48 <lwip_htons>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d028      	beq.n	800b9fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b9ac:	6838      	ldr	r0, [r7, #0]
 800b9ae:	f7fe f979 	bl	8009ca4 <tcp_segs_free>
    next = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	603b      	str	r3, [r7, #0]
 800b9b6:	e056      	b.n	800ba66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	899b      	ldrh	r3, [r3, #12]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fb f9c1 	bl	8006d48 <lwip_htons>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00d      	beq.n	800b9ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	899b      	ldrh	r3, [r3, #12]
 800b9d8:	b29c      	uxth	r4, r3
 800b9da:	2001      	movs	r0, #1
 800b9dc:	f7fb f9b4 	bl	8006d48 <lwip_htons>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	4322      	orrs	r2, r4
 800b9ea:	b292      	uxth	r2, r2
 800b9ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7fe f968 	bl	8009cce <tcp_seg_free>
    while (next &&
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00e      	beq.n	800ba22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	891b      	ldrh	r3, [r3, #8]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <tcp_oos_insert_segment+0x10c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	441a      	add	r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	8909      	ldrh	r1, [r1, #8]
 800ba1a:	440b      	add	r3, r1
 800ba1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	daca      	bge.n	800b9b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01e      	beq.n	800ba66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	891b      	ldrh	r3, [r3, #8]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4b14      	ldr	r3, [pc, #80]	; (800ba80 <tcp_oos_insert_segment+0x10c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	441a      	add	r2, r3
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	dd12      	ble.n	800ba66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <tcp_oos_insert_segment+0x10c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	891b      	ldrh	r3, [r3, #8]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4610      	mov	r0, r2
 800ba62:	f7fc fb81 	bl	8008168 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	601a      	str	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd90      	pop	{r4, r7, pc}
 800ba74:	08014c5c 	.word	0x08014c5c
 800ba78:	08014f1c 	.word	0x08014f1c
 800ba7c:	08014ca8 	.word	0x08014ca8
 800ba80:	20000574 	.word	0x20000574

0800ba84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ba84:	b5b0      	push	{r4, r5, r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ba92:	e03e      	b.n	800bb12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fc fd6e 	bl	8008584 <pbuf_clen>
 800baa8:	4603      	mov	r3, r0
 800baaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bab2:	8a7a      	ldrh	r2, [r7, #18]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d906      	bls.n	800bac6 <tcp_free_acked_segments+0x42>
 800bab8:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <tcp_free_acked_segments+0xe0>)
 800baba:	f240 4257 	movw	r2, #1111	; 0x457
 800babe:	492a      	ldr	r1, [pc, #168]	; (800bb68 <tcp_free_acked_segments+0xe4>)
 800bac0:	482a      	ldr	r0, [pc, #168]	; (800bb6c <tcp_free_acked_segments+0xe8>)
 800bac2:	f005 fe9f 	bl	8011804 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bacc:	8a7b      	ldrh	r3, [r7, #18]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	891a      	ldrh	r2, [r3, #8]
 800badc:	4b24      	ldr	r3, [pc, #144]	; (800bb70 <tcp_free_acked_segments+0xec>)
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	4413      	add	r3, r2
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	4b22      	ldr	r3, [pc, #136]	; (800bb70 <tcp_free_acked_segments+0xec>)
 800bae6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bae8:	6978      	ldr	r0, [r7, #20]
 800baea:	f7fe f8f0 	bl	8009cce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00c      	beq.n	800bb12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d109      	bne.n	800bb12 <tcp_free_acked_segments+0x8e>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <tcp_free_acked_segments+0x8e>
 800bb04:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <tcp_free_acked_segments+0xe0>)
 800bb06:	f240 4261 	movw	r2, #1121	; 0x461
 800bb0a:	491a      	ldr	r1, [pc, #104]	; (800bb74 <tcp_free_acked_segments+0xf0>)
 800bb0c:	4817      	ldr	r0, [pc, #92]	; (800bb6c <tcp_free_acked_segments+0xe8>)
 800bb0e:	f005 fe79 	bl	8011804 <iprintf>
  while (seg_list != NULL &&
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d020      	beq.n	800bb5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fb f927 	bl	8006d72 <lwip_htonl>
 800bb24:	4604      	mov	r4, r0
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	891b      	ldrh	r3, [r3, #8]
 800bb2a:	461d      	mov	r5, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	899b      	ldrh	r3, [r3, #12]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fb f907 	bl	8006d48 <lwip_htons>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <tcp_free_acked_segments+0xc6>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <tcp_free_acked_segments+0xc8>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	442b      	add	r3, r5
 800bb4e:	18e2      	adds	r2, r4, r3
 800bb50:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <tcp_free_acked_segments+0xf4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dd9c      	ble.n	800ba94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bdb0      	pop	{r4, r5, r7, pc}
 800bb64:	08014c5c 	.word	0x08014c5c
 800bb68:	08014f44 	.word	0x08014f44
 800bb6c:	08014ca8 	.word	0x08014ca8
 800bb70:	2000057c 	.word	0x2000057c
 800bb74:	08014f6c 	.word	0x08014f6c
 800bb78:	20000578 	.word	0x20000578

0800bb7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bb7c:	b5b0      	push	{r4, r5, r7, lr}
 800bb7e:	b094      	sub	sp, #80	; 0x50
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d106      	bne.n	800bb9c <tcp_receive+0x20>
 800bb8e:	4ba6      	ldr	r3, [pc, #664]	; (800be28 <tcp_receive+0x2ac>)
 800bb90:	f240 427b 	movw	r2, #1147	; 0x47b
 800bb94:	49a5      	ldr	r1, [pc, #660]	; (800be2c <tcp_receive+0x2b0>)
 800bb96:	48a6      	ldr	r0, [pc, #664]	; (800be30 <tcp_receive+0x2b4>)
 800bb98:	f005 fe34 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7d1b      	ldrb	r3, [r3, #20]
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d806      	bhi.n	800bbb2 <tcp_receive+0x36>
 800bba4:	4ba0      	ldr	r3, [pc, #640]	; (800be28 <tcp_receive+0x2ac>)
 800bba6:	f240 427c 	movw	r2, #1148	; 0x47c
 800bbaa:	49a2      	ldr	r1, [pc, #648]	; (800be34 <tcp_receive+0x2b8>)
 800bbac:	48a0      	ldr	r0, [pc, #640]	; (800be30 <tcp_receive+0x2b4>)
 800bbae:	f005 fe29 	bl	8011804 <iprintf>

  if (flags & TCP_ACK) {
 800bbb2:	4ba1      	ldr	r3, [pc, #644]	; (800be38 <tcp_receive+0x2bc>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	f003 0310 	and.w	r3, r3, #16
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 8263 	beq.w	800c086 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbcc:	4413      	add	r3, r2
 800bbce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbd4:	4b99      	ldr	r3, [pc, #612]	; (800be3c <tcp_receive+0x2c0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db1b      	blt.n	800bc16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbe2:	4b96      	ldr	r3, [pc, #600]	; (800be3c <tcp_receive+0x2c0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d106      	bne.n	800bbf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbee:	4b94      	ldr	r3, [pc, #592]	; (800be40 <tcp_receive+0x2c4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	db0e      	blt.n	800bc16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbfc:	4b90      	ldr	r3, [pc, #576]	; (800be40 <tcp_receive+0x2c4>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d125      	bne.n	800bc50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc04:	4b8f      	ldr	r3, [pc, #572]	; (800be44 <tcp_receive+0x2c8>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	89db      	ldrh	r3, [r3, #14]
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d91c      	bls.n	800bc50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc16:	4b8b      	ldr	r3, [pc, #556]	; (800be44 <tcp_receive+0x2c8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	89db      	ldrh	r3, [r3, #14]
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d205      	bcs.n	800bc40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bc40:	4b7e      	ldr	r3, [pc, #504]	; (800be3c <tcp_receive+0x2c0>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bc48:	4b7d      	ldr	r3, [pc, #500]	; (800be40 <tcp_receive+0x2c4>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bc50:	4b7b      	ldr	r3, [pc, #492]	; (800be40 <tcp_receive+0x2c4>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dc58      	bgt.n	800bd10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bc5e:	4b7a      	ldr	r3, [pc, #488]	; (800be48 <tcp_receive+0x2cc>)
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d14b      	bne.n	800bcfe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bc70:	4413      	add	r3, r2
 800bc72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d142      	bne.n	800bcfe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	db3d      	blt.n	800bcfe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc86:	4b6e      	ldr	r3, [pc, #440]	; (800be40 <tcp_receive+0x2c4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d137      	bne.n	800bcfe <tcp_receive+0x182>
              found_dupack = 1;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc98:	2bff      	cmp	r3, #255	; 0xff
 800bc9a:	d007      	beq.n	800bcac <tcp_receive+0x130>
                ++pcb->dupacks;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bca2:	3301      	adds	r3, #1
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d91b      	bls.n	800bcee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcc0:	4413      	add	r3, r2
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d30a      	bcc.n	800bce4 <tcp_receive+0x168>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcd8:	4413      	add	r3, r2
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bce2:	e004      	b.n	800bcee <tcp_receive+0x172>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d902      	bls.n	800bcfe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f002 fb41 	bl	800e380 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bcfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 8160 	bne.w	800bfc6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd0e:	e15a      	b.n	800bfc6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd10:	4b4b      	ldr	r3, [pc, #300]	; (800be40 <tcp_receive+0x2c4>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f2c0 814d 	blt.w	800bfbc <tcp_receive+0x440>
 800bd22:	4b47      	ldr	r3, [pc, #284]	; (800be40 <tcp_receive+0x2c4>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f300 8145 	bgt.w	800bfbc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	8b5b      	ldrh	r3, [r3, #26]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d010      	beq.n	800bd60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	8b5b      	ldrh	r3, [r3, #26]
 800bd42:	f023 0304 	bic.w	r3, r3, #4
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bd6e:	10db      	asrs	r3, r3, #3
 800bd70:	b21b      	sxth	r3, r3
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	b21a      	sxth	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bd88:	4b2d      	ldr	r3, [pc, #180]	; (800be40 <tcp_receive+0x2c4>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bda0:	4b27      	ldr	r3, [pc, #156]	; (800be40 <tcp_receive+0x2c4>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	f240 8096 	bls.w	800bede <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d244      	bcs.n	800be4c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8b5b      	ldrh	r3, [r3, #26]
 800bdc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <tcp_receive+0x256>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <tcp_receive+0x258>
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bdd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bde2:	fb12 f303 	smulbb	r3, r2, r3
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bdea:	4293      	cmp	r3, r2
 800bdec:	bf28      	it	cs
 800bdee:	4613      	movcs	r3, r2
 800bdf0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bdfa:	4413      	add	r3, r2
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be04:	429a      	cmp	r2, r3
 800be06:	d309      	bcc.n	800be1c <tcp_receive+0x2a0>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be10:	4413      	add	r3, r2
 800be12:	b29a      	uxth	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be1a:	e060      	b.n	800bede <tcp_receive+0x362>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be26:	e05a      	b.n	800bede <tcp_receive+0x362>
 800be28:	08014c5c 	.word	0x08014c5c
 800be2c:	08014f8c 	.word	0x08014f8c
 800be30:	08014ca8 	.word	0x08014ca8
 800be34:	08014fa8 	.word	0x08014fa8
 800be38:	20000580 	.word	0x20000580
 800be3c:	20000574 	.word	0x20000574
 800be40:	20000578 	.word	0x20000578
 800be44:	20000564 	.word	0x20000564
 800be48:	2000057e 	.word	0x2000057e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be54:	4413      	add	r3, r2
 800be56:	b29a      	uxth	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be5e:	429a      	cmp	r2, r3
 800be60:	d309      	bcc.n	800be76 <tcp_receive+0x2fa>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be6a:	4413      	add	r3, r2
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be74:	e004      	b.n	800be80 <tcp_receive+0x304>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d326      	bcc.n	800bede <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beb0:	4413      	add	r3, r2
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800beba:	429a      	cmp	r2, r3
 800bebc:	d30a      	bcc.n	800bed4 <tcp_receive+0x358>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bec8:	4413      	add	r3, r2
 800beca:	b29a      	uxth	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bed2:	e004      	b.n	800bede <tcp_receive+0x362>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee6:	4a98      	ldr	r2, [pc, #608]	; (800c148 <tcp_receive+0x5cc>)
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fdcb 	bl	800ba84 <tcp_free_acked_segments>
 800beee:	4602      	mov	r2, r0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800befc:	4a93      	ldr	r2, [pc, #588]	; (800c14c <tcp_receive+0x5d0>)
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fdc0 	bl	800ba84 <tcp_free_acked_segments>
 800bf04:	4602      	mov	r2, r0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d104      	bne.n	800bf1c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf18:	861a      	strh	r2, [r3, #48]	; 0x30
 800bf1a:	e002      	b.n	800bf22 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d103      	bne.n	800bf38 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bf3e:	4b84      	ldr	r3, [pc, #528]	; (800c150 <tcp_receive+0x5d4>)
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	4413      	add	r3, r2
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	8b5b      	ldrh	r3, [r3, #26]
 800bf50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d035      	beq.n	800bfc4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d118      	bne.n	800bf92 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00c      	beq.n	800bf82 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fa fefc 	bl	8006d72 <lwip_htonl>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dc20      	bgt.n	800bfc4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	8b5b      	ldrh	r3, [r3, #26]
 800bf86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf90:	e018      	b.n	800bfc4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fa fee7 	bl	8006d72 <lwip_htonl>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	1ae3      	subs	r3, r4, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dc0b      	bgt.n	800bfc4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8b5b      	ldrh	r3, [r3, #26]
 800bfb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfba:	e003      	b.n	800bfc4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f002 fbcd 	bl	800e75c <tcp_send_empty_ack>
 800bfc2:	e000      	b.n	800bfc6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfc4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d05b      	beq.n	800c086 <tcp_receive+0x50a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd2:	4b60      	ldr	r3, [pc, #384]	; (800c154 <tcp_receive+0x5d8>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	da54      	bge.n	800c086 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bfdc:	4b5e      	ldr	r3, [pc, #376]	; (800c158 <tcp_receive+0x5dc>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bff0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bffa:	10db      	asrs	r3, r3, #3
 800bffc:	b21b      	sxth	r3, r3
 800bffe:	b29b      	uxth	r3, r3
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	b29b      	uxth	r3, r3
 800c004:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c00e:	b29a      	uxth	r2, r3
 800c010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c014:	4413      	add	r3, r2
 800c016:	b29b      	uxth	r3, r3
 800c018:	b21a      	sxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c01e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c022:	2b00      	cmp	r3, #0
 800c024:	da05      	bge.n	800c032 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c02a:	425b      	negs	r3, r3
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c032:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c03c:	109b      	asrs	r3, r3, #2
 800c03e:	b21b      	sxth	r3, r3
 800c040:	b29b      	uxth	r3, r3
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	b29b      	uxth	r3, r3
 800c046:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c050:	b29a      	uxth	r2, r3
 800c052:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c056:	4413      	add	r3, r2
 800c058:	b29b      	uxth	r3, r3
 800c05a:	b21a      	sxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c066:	10db      	asrs	r3, r3, #3
 800c068:	b21b      	sxth	r3, r3
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c072:	b29b      	uxth	r3, r3
 800c074:	4413      	add	r3, r2
 800c076:	b29b      	uxth	r3, r3
 800c078:	b21a      	sxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c086:	4b35      	ldr	r3, [pc, #212]	; (800c15c <tcp_receive+0x5e0>)
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 84e1 	beq.w	800ca52 <tcp_receive+0xed6>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7d1b      	ldrb	r3, [r3, #20]
 800c094:	2b06      	cmp	r3, #6
 800c096:	f200 84dc 	bhi.w	800ca52 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09e:	4b30      	ldr	r3, [pc, #192]	; (800c160 <tcp_receive+0x5e4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f2c0 808e 	blt.w	800c1c8 <tcp_receive+0x64c>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0b0:	4b2a      	ldr	r3, [pc, #168]	; (800c15c <tcp_receive+0x5e0>)
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <tcp_receive+0x5e4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	440b      	add	r3, r1
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	3301      	adds	r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f300 8081 	bgt.w	800c1c8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c0c6:	4b27      	ldr	r3, [pc, #156]	; (800c164 <tcp_receive+0x5e8>)
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d0:	4b23      	ldr	r3, [pc, #140]	; (800c160 <tcp_receive+0x5e4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c0d8:	4b22      	ldr	r3, [pc, #136]	; (800c164 <tcp_receive+0x5e8>)
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <tcp_receive+0x572>
 800c0e0:	4b21      	ldr	r3, [pc, #132]	; (800c168 <tcp_receive+0x5ec>)
 800c0e2:	f240 5294 	movw	r2, #1428	; 0x594
 800c0e6:	4921      	ldr	r1, [pc, #132]	; (800c16c <tcp_receive+0x5f0>)
 800c0e8:	4821      	ldr	r0, [pc, #132]	; (800c170 <tcp_receive+0x5f4>)
 800c0ea:	f005 fb8b 	bl	8011804 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d906      	bls.n	800c106 <tcp_receive+0x58a>
 800c0f8:	4b1b      	ldr	r3, [pc, #108]	; (800c168 <tcp_receive+0x5ec>)
 800c0fa:	f240 5295 	movw	r2, #1429	; 0x595
 800c0fe:	491d      	ldr	r1, [pc, #116]	; (800c174 <tcp_receive+0x5f8>)
 800c100:	481b      	ldr	r0, [pc, #108]	; (800c170 <tcp_receive+0x5f4>)
 800c102:	f005 fb7f 	bl	8011804 <iprintf>
      off = (u16_t)off32;
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c10c:	4b15      	ldr	r3, [pc, #84]	; (800c164 <tcp_receive+0x5e8>)
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	891b      	ldrh	r3, [r3, #8]
 800c112:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c116:	429a      	cmp	r2, r3
 800c118:	d906      	bls.n	800c128 <tcp_receive+0x5ac>
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <tcp_receive+0x5ec>)
 800c11c:	f240 5297 	movw	r2, #1431	; 0x597
 800c120:	4915      	ldr	r1, [pc, #84]	; (800c178 <tcp_receive+0x5fc>)
 800c122:	4813      	ldr	r0, [pc, #76]	; (800c170 <tcp_receive+0x5f4>)
 800c124:	f005 fb6e 	bl	8011804 <iprintf>
      inseg.len -= off;
 800c128:	4b0e      	ldr	r3, [pc, #56]	; (800c164 <tcp_receive+0x5e8>)
 800c12a:	891a      	ldrh	r2, [r3, #8]
 800c12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	b29a      	uxth	r2, r3
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <tcp_receive+0x5e8>)
 800c136:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <tcp_receive+0x5e8>)
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	891a      	ldrh	r2, [r3, #8]
 800c13e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c146:	e029      	b.n	800c19c <tcp_receive+0x620>
 800c148:	08014fc4 	.word	0x08014fc4
 800c14c:	08014fcc 	.word	0x08014fcc
 800c150:	2000057c 	.word	0x2000057c
 800c154:	20000578 	.word	0x20000578
 800c158:	200174e8 	.word	0x200174e8
 800c15c:	2000057e 	.word	0x2000057e
 800c160:	20000574 	.word	0x20000574
 800c164:	20000554 	.word	0x20000554
 800c168:	08014c5c 	.word	0x08014c5c
 800c16c:	08014fd4 	.word	0x08014fd4
 800c170:	08014ca8 	.word	0x08014ca8
 800c174:	08014fe4 	.word	0x08014fe4
 800c178:	08014ff4 	.word	0x08014ff4
        off -= p->len;
 800c17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c17e:	895b      	ldrh	r3, [r3, #10]
 800c180:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c18e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c192:	2200      	movs	r2, #0
 800c194:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c19e:	895b      	ldrh	r3, [r3, #10]
 800c1a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d8e9      	bhi.n	800c17c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c1a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c1b0:	f7fc f8da 	bl	8008368 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	4a91      	ldr	r2, [pc, #580]	; (800c400 <tcp_receive+0x884>)
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	4b91      	ldr	r3, [pc, #580]	; (800c404 <tcp_receive+0x888>)
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	4a8f      	ldr	r2, [pc, #572]	; (800c400 <tcp_receive+0x884>)
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c1c6:	e00d      	b.n	800c1e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c1c8:	4b8d      	ldr	r3, [pc, #564]	; (800c400 <tcp_receive+0x884>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da06      	bge.n	800c1e4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8b5b      	ldrh	r3, [r3, #26]
 800c1da:	f043 0302 	orr.w	r3, r3, #2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1e4:	4b86      	ldr	r3, [pc, #536]	; (800c400 <tcp_receive+0x884>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f2c0 842a 	blt.w	800ca48 <tcp_receive+0xecc>
 800c1f4:	4b82      	ldr	r3, [pc, #520]	; (800c400 <tcp_receive+0x884>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c200:	440b      	add	r3, r1
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	3301      	adds	r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	f300 841e 	bgt.w	800ca48 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c210:	4b7b      	ldr	r3, [pc, #492]	; (800c400 <tcp_receive+0x884>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	f040 829a 	bne.w	800c74e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c21a:	4b7a      	ldr	r3, [pc, #488]	; (800c404 <tcp_receive+0x888>)
 800c21c:	891c      	ldrh	r4, [r3, #8]
 800c21e:	4b79      	ldr	r3, [pc, #484]	; (800c404 <tcp_receive+0x888>)
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	b29b      	uxth	r3, r3
 800c226:	4618      	mov	r0, r3
 800c228:	f7fa fd8e 	bl	8006d48 <lwip_htons>
 800c22c:	4603      	mov	r3, r0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <tcp_receive+0x6c0>
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <tcp_receive+0x6c2>
 800c23c:	2300      	movs	r3, #0
 800c23e:	4423      	add	r3, r4
 800c240:	b29a      	uxth	r2, r3
 800c242:	4b71      	ldr	r3, [pc, #452]	; (800c408 <tcp_receive+0x88c>)
 800c244:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c24a:	4b6f      	ldr	r3, [pc, #444]	; (800c408 <tcp_receive+0x88c>)
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d275      	bcs.n	800c33e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c252:	4b6c      	ldr	r3, [pc, #432]	; (800c404 <tcp_receive+0x888>)
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	899b      	ldrh	r3, [r3, #12]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fa fd74 	bl	8006d48 <lwip_htons>
 800c260:	4603      	mov	r3, r0
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01f      	beq.n	800c2ac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c26c:	4b65      	ldr	r3, [pc, #404]	; (800c404 <tcp_receive+0x888>)
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	899b      	ldrh	r3, [r3, #12]
 800c272:	b29b      	uxth	r3, r3
 800c274:	b21b      	sxth	r3, r3
 800c276:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c27a:	b21c      	sxth	r4, r3
 800c27c:	4b61      	ldr	r3, [pc, #388]	; (800c404 <tcp_receive+0x888>)
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	899b      	ldrh	r3, [r3, #12]
 800c282:	b29b      	uxth	r3, r3
 800c284:	4618      	mov	r0, r3
 800c286:	f7fa fd5f 	bl	8006d48 <lwip_htons>
 800c28a:	4603      	mov	r3, r0
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	b29b      	uxth	r3, r3
 800c290:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c294:	b29b      	uxth	r3, r3
 800c296:	4618      	mov	r0, r3
 800c298:	f7fa fd56 	bl	8006d48 <lwip_htons>
 800c29c:	4603      	mov	r3, r0
 800c29e:	b21b      	sxth	r3, r3
 800c2a0:	4323      	orrs	r3, r4
 800c2a2:	b21a      	sxth	r2, r3
 800c2a4:	4b57      	ldr	r3, [pc, #348]	; (800c404 <tcp_receive+0x888>)
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	b292      	uxth	r2, r2
 800c2aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2b0:	4b54      	ldr	r3, [pc, #336]	; (800c404 <tcp_receive+0x888>)
 800c2b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c2b4:	4b53      	ldr	r3, [pc, #332]	; (800c404 <tcp_receive+0x888>)
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	899b      	ldrh	r3, [r3, #12]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fa fd43 	bl	8006d48 <lwip_htons>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d005      	beq.n	800c2da <tcp_receive+0x75e>
            inseg.len -= 1;
 800c2ce:	4b4d      	ldr	r3, [pc, #308]	; (800c404 <tcp_receive+0x888>)
 800c2d0:	891b      	ldrh	r3, [r3, #8]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	4b4b      	ldr	r3, [pc, #300]	; (800c404 <tcp_receive+0x888>)
 800c2d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c2da:	4b4a      	ldr	r3, [pc, #296]	; (800c404 <tcp_receive+0x888>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	4a49      	ldr	r2, [pc, #292]	; (800c404 <tcp_receive+0x888>)
 800c2e0:	8912      	ldrh	r2, [r2, #8]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fb ff3f 	bl	8008168 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c2ea:	4b46      	ldr	r3, [pc, #280]	; (800c404 <tcp_receive+0x888>)
 800c2ec:	891c      	ldrh	r4, [r3, #8]
 800c2ee:	4b45      	ldr	r3, [pc, #276]	; (800c404 <tcp_receive+0x888>)
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	899b      	ldrh	r3, [r3, #12]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fa fd26 	bl	8006d48 <lwip_htons>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <tcp_receive+0x790>
 800c308:	2301      	movs	r3, #1
 800c30a:	e000      	b.n	800c30e <tcp_receive+0x792>
 800c30c:	2300      	movs	r3, #0
 800c30e:	4423      	add	r3, r4
 800c310:	b29a      	uxth	r2, r3
 800c312:	4b3d      	ldr	r3, [pc, #244]	; (800c408 <tcp_receive+0x88c>)
 800c314:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c316:	4b3c      	ldr	r3, [pc, #240]	; (800c408 <tcp_receive+0x88c>)
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	4b38      	ldr	r3, [pc, #224]	; (800c400 <tcp_receive+0x884>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	441a      	add	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c326:	6879      	ldr	r1, [r7, #4]
 800c328:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c32a:	440b      	add	r3, r1
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d006      	beq.n	800c33e <tcp_receive+0x7c2>
 800c330:	4b36      	ldr	r3, [pc, #216]	; (800c40c <tcp_receive+0x890>)
 800c332:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c336:	4936      	ldr	r1, [pc, #216]	; (800c410 <tcp_receive+0x894>)
 800c338:	4836      	ldr	r0, [pc, #216]	; (800c414 <tcp_receive+0x898>)
 800c33a:	f005 fa63 	bl	8011804 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 80e7 	beq.w	800c516 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c348:	4b2e      	ldr	r3, [pc, #184]	; (800c404 <tcp_receive+0x888>)
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	899b      	ldrh	r3, [r3, #12]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4618      	mov	r0, r3
 800c352:	f7fa fcf9 	bl	8006d48 <lwip_htons>
 800c356:	4603      	mov	r3, r0
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d010      	beq.n	800c384 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c362:	e00a      	b.n	800c37a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c368:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7fd fcaa 	bl	8009cce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1f0      	bne.n	800c364 <tcp_receive+0x7e8>
 800c382:	e0c8      	b.n	800c516 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c38a:	e052      	b.n	800c432 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	899b      	ldrh	r3, [r3, #12]
 800c392:	b29b      	uxth	r3, r3
 800c394:	4618      	mov	r0, r3
 800c396:	f7fa fcd7 	bl	8006d48 <lwip_htons>
 800c39a:	4603      	mov	r3, r0
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d03d      	beq.n	800c422 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c3a6:	4b17      	ldr	r3, [pc, #92]	; (800c404 <tcp_receive+0x888>)
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	899b      	ldrh	r3, [r3, #12]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fa fcca 	bl	8006d48 <lwip_htons>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d130      	bne.n	800c422 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c3c0:	4b10      	ldr	r3, [pc, #64]	; (800c404 <tcp_receive+0x888>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	899b      	ldrh	r3, [r3, #12]
 800c3c6:	b29c      	uxth	r4, r3
 800c3c8:	2001      	movs	r0, #1
 800c3ca:	f7fa fcbd 	bl	8006d48 <lwip_htons>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <tcp_receive+0x888>)
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	4322      	orrs	r2, r4
 800c3d8:	b292      	uxth	r2, r2
 800c3da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <tcp_receive+0x888>)
 800c3de:	891c      	ldrh	r4, [r3, #8]
 800c3e0:	4b08      	ldr	r3, [pc, #32]	; (800c404 <tcp_receive+0x888>)
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	899b      	ldrh	r3, [r3, #12]
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fa fcad 	bl	8006d48 <lwip_htons>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00e      	beq.n	800c418 <tcp_receive+0x89c>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e00d      	b.n	800c41a <tcp_receive+0x89e>
 800c3fe:	bf00      	nop
 800c400:	20000574 	.word	0x20000574
 800c404:	20000554 	.word	0x20000554
 800c408:	2000057e 	.word	0x2000057e
 800c40c:	08014c5c 	.word	0x08014c5c
 800c410:	08015004 	.word	0x08015004
 800c414:	08014ca8 	.word	0x08014ca8
 800c418:	2300      	movs	r3, #0
 800c41a:	4423      	add	r3, r4
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	4b98      	ldr	r3, [pc, #608]	; (800c680 <tcp_receive+0xb04>)
 800c420:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c424:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c42c:	6938      	ldr	r0, [r7, #16]
 800c42e:	f7fd fc4e 	bl	8009cce <tcp_seg_free>
            while (next &&
 800c432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00e      	beq.n	800c456 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c438:	4b91      	ldr	r3, [pc, #580]	; (800c680 <tcp_receive+0xb04>)
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	461a      	mov	r2, r3
 800c43e:	4b91      	ldr	r3, [pc, #580]	; (800c684 <tcp_receive+0xb08>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	441a      	add	r2, r3
 800c444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c44c:	8909      	ldrh	r1, [r1, #8]
 800c44e:	440b      	add	r3, r1
 800c450:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c452:	2b00      	cmp	r3, #0
 800c454:	da9a      	bge.n	800c38c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d059      	beq.n	800c510 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c45c:	4b88      	ldr	r3, [pc, #544]	; (800c680 <tcp_receive+0xb04>)
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	4b88      	ldr	r3, [pc, #544]	; (800c684 <tcp_receive+0xb08>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	441a      	add	r2, r3
 800c468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c470:	2b00      	cmp	r3, #0
 800c472:	dd4d      	ble.n	800c510 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	4b81      	ldr	r3, [pc, #516]	; (800c684 <tcp_receive+0xb08>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	b29b      	uxth	r3, r3
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	b29a      	uxth	r2, r3
 800c486:	4b80      	ldr	r3, [pc, #512]	; (800c688 <tcp_receive+0xb0c>)
 800c488:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c48a:	4b7f      	ldr	r3, [pc, #508]	; (800c688 <tcp_receive+0xb0c>)
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	899b      	ldrh	r3, [r3, #12]
 800c490:	b29b      	uxth	r3, r3
 800c492:	4618      	mov	r0, r3
 800c494:	f7fa fc58 	bl	8006d48 <lwip_htons>
 800c498:	4603      	mov	r3, r0
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f003 0302 	and.w	r3, r3, #2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d005      	beq.n	800c4b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800c4a4:	4b78      	ldr	r3, [pc, #480]	; (800c688 <tcp_receive+0xb0c>)
 800c4a6:	891b      	ldrh	r3, [r3, #8]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	4b76      	ldr	r3, [pc, #472]	; (800c688 <tcp_receive+0xb0c>)
 800c4ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c4b0:	4b75      	ldr	r3, [pc, #468]	; (800c688 <tcp_receive+0xb0c>)
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	4a74      	ldr	r2, [pc, #464]	; (800c688 <tcp_receive+0xb0c>)
 800c4b6:	8912      	ldrh	r2, [r2, #8]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fb fe54 	bl	8008168 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c4c0:	4b71      	ldr	r3, [pc, #452]	; (800c688 <tcp_receive+0xb0c>)
 800c4c2:	891c      	ldrh	r4, [r3, #8]
 800c4c4:	4b70      	ldr	r3, [pc, #448]	; (800c688 <tcp_receive+0xb0c>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	899b      	ldrh	r3, [r3, #12]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fa fc3b 	bl	8006d48 <lwip_htons>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 0303 	and.w	r3, r3, #3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <tcp_receive+0x966>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <tcp_receive+0x968>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4423      	add	r3, r4
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	4b65      	ldr	r3, [pc, #404]	; (800c680 <tcp_receive+0xb04>)
 800c4ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c4ec:	4b64      	ldr	r3, [pc, #400]	; (800c680 <tcp_receive+0xb04>)
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4b64      	ldr	r3, [pc, #400]	; (800c684 <tcp_receive+0xb08>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	441a      	add	r2, r3
 800c4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d006      	beq.n	800c510 <tcp_receive+0x994>
 800c502:	4b62      	ldr	r3, [pc, #392]	; (800c68c <tcp_receive+0xb10>)
 800c504:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c508:	4961      	ldr	r1, [pc, #388]	; (800c690 <tcp_receive+0xb14>)
 800c50a:	4862      	ldr	r0, [pc, #392]	; (800c694 <tcp_receive+0xb18>)
 800c50c:	f005 f97a 	bl	8011804 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c514:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c516:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <tcp_receive+0xb04>)
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	4b59      	ldr	r3, [pc, #356]	; (800c684 <tcp_receive+0xb08>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	441a      	add	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c52a:	4b55      	ldr	r3, [pc, #340]	; (800c680 <tcp_receive+0xb04>)
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d206      	bcs.n	800c540 <tcp_receive+0x9c4>
 800c532:	4b56      	ldr	r3, [pc, #344]	; (800c68c <tcp_receive+0xb10>)
 800c534:	f240 6207 	movw	r2, #1543	; 0x607
 800c538:	4957      	ldr	r1, [pc, #348]	; (800c698 <tcp_receive+0xb1c>)
 800c53a:	4856      	ldr	r0, [pc, #344]	; (800c694 <tcp_receive+0xb18>)
 800c53c:	f005 f962 	bl	8011804 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c544:	4b4e      	ldr	r3, [pc, #312]	; (800c680 <tcp_receive+0xb04>)
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7fc fe97 	bl	8009284 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c556:	4b4c      	ldr	r3, [pc, #304]	; (800c688 <tcp_receive+0xb0c>)
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	891b      	ldrh	r3, [r3, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d006      	beq.n	800c56e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c560:	4b49      	ldr	r3, [pc, #292]	; (800c688 <tcp_receive+0xb0c>)
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	4a4d      	ldr	r2, [pc, #308]	; (800c69c <tcp_receive+0xb20>)
 800c566:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c568:	4b47      	ldr	r3, [pc, #284]	; (800c688 <tcp_receive+0xb0c>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c56e:	4b46      	ldr	r3, [pc, #280]	; (800c688 <tcp_receive+0xb0c>)
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	899b      	ldrh	r3, [r3, #12]
 800c574:	b29b      	uxth	r3, r3
 800c576:	4618      	mov	r0, r3
 800c578:	f7fa fbe6 	bl	8006d48 <lwip_htons>
 800c57c:	4603      	mov	r3, r0
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80b8 	beq.w	800c6fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c58a:	4b45      	ldr	r3, [pc, #276]	; (800c6a0 <tcp_receive+0xb24>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f043 0320 	orr.w	r3, r3, #32
 800c592:	b2da      	uxtb	r2, r3
 800c594:	4b42      	ldr	r3, [pc, #264]	; (800c6a0 <tcp_receive+0xb24>)
 800c596:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c598:	e0af      	b.n	800c6fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c59e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4a36      	ldr	r2, [pc, #216]	; (800c684 <tcp_receive+0xb08>)
 800c5aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	891b      	ldrh	r3, [r3, #8]
 800c5b0:	461c      	mov	r4, r3
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	899b      	ldrh	r3, [r3, #12]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fa fbc4 	bl	8006d48 <lwip_htons>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	f003 0303 	and.w	r3, r3, #3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <tcp_receive+0xa54>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e000      	b.n	800c5d2 <tcp_receive+0xa56>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	191a      	adds	r2, r3, r4
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d8:	441a      	add	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5e2:	461c      	mov	r4, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	891b      	ldrh	r3, [r3, #8]
 800c5e8:	461d      	mov	r5, r3
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	899b      	ldrh	r3, [r3, #12]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fa fba8 	bl	8006d48 <lwip_htons>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <tcp_receive+0xa8c>
 800c604:	2301      	movs	r3, #1
 800c606:	e000      	b.n	800c60a <tcp_receive+0xa8e>
 800c608:	2300      	movs	r3, #0
 800c60a:	442b      	add	r3, r5
 800c60c:	429c      	cmp	r4, r3
 800c60e:	d206      	bcs.n	800c61e <tcp_receive+0xaa2>
 800c610:	4b1e      	ldr	r3, [pc, #120]	; (800c68c <tcp_receive+0xb10>)
 800c612:	f240 622b 	movw	r2, #1579	; 0x62b
 800c616:	4923      	ldr	r1, [pc, #140]	; (800c6a4 <tcp_receive+0xb28>)
 800c618:	481e      	ldr	r0, [pc, #120]	; (800c694 <tcp_receive+0xb18>)
 800c61a:	f005 f8f3 	bl	8011804 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	891b      	ldrh	r3, [r3, #8]
 800c622:	461c      	mov	r4, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	899b      	ldrh	r3, [r3, #12]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7fa fb8b 	bl	8006d48 <lwip_htons>
 800c632:	4603      	mov	r3, r0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	f003 0303 	and.w	r3, r3, #3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <tcp_receive+0xac6>
 800c63e:	2301      	movs	r3, #1
 800c640:	e000      	b.n	800c644 <tcp_receive+0xac8>
 800c642:	2300      	movs	r3, #0
 800c644:	1919      	adds	r1, r3, r4
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c64a:	b28b      	uxth	r3, r1
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	b29a      	uxth	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7fc fe15 	bl	8009284 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	891b      	ldrh	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d028      	beq.n	800c6b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c664:	4b0d      	ldr	r3, [pc, #52]	; (800c69c <tcp_receive+0xb20>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01d      	beq.n	800c6a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c66c:	4b0b      	ldr	r3, [pc, #44]	; (800c69c <tcp_receive+0xb20>)
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7fb ffbe 	bl	80085f8 <pbuf_cat>
 800c67c:	e018      	b.n	800c6b0 <tcp_receive+0xb34>
 800c67e:	bf00      	nop
 800c680:	2000057e 	.word	0x2000057e
 800c684:	20000574 	.word	0x20000574
 800c688:	20000554 	.word	0x20000554
 800c68c:	08014c5c 	.word	0x08014c5c
 800c690:	0801503c 	.word	0x0801503c
 800c694:	08014ca8 	.word	0x08014ca8
 800c698:	08015078 	.word	0x08015078
 800c69c:	20000584 	.word	0x20000584
 800c6a0:	20000581 	.word	0x20000581
 800c6a4:	08015098 	.word	0x08015098
            } else {
              recv_data = cseg->p;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	4a70      	ldr	r2, [pc, #448]	; (800c870 <tcp_receive+0xcf4>)
 800c6ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	899b      	ldrh	r3, [r3, #12]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fa fb42 	bl	8006d48 <lwip_htons>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00d      	beq.n	800c6ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c6d0:	4b68      	ldr	r3, [pc, #416]	; (800c874 <tcp_receive+0xcf8>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f043 0320 	orr.w	r3, r3, #32
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	4b66      	ldr	r3, [pc, #408]	; (800c874 <tcp_receive+0xcf8>)
 800c6dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	7d1b      	ldrb	r3, [r3, #20]
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	d102      	bne.n	800c6ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2207      	movs	r2, #7
 800c6ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c6f4:	68b8      	ldr	r0, [r7, #8]
 800c6f6:	f7fd faea 	bl	8009cce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c70e:	429a      	cmp	r2, r3
 800c710:	f43f af43 	beq.w	800c59a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	8b5b      	ldrh	r3, [r3, #26]
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <tcp_receive+0xbc2>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8b5b      	ldrh	r3, [r3, #26]
 800c724:	f023 0301 	bic.w	r3, r3, #1
 800c728:	b29a      	uxth	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	835a      	strh	r2, [r3, #26]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	8b5b      	ldrh	r3, [r3, #26]
 800c732:	f043 0302 	orr.w	r3, r3, #2
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c73c:	e188      	b.n	800ca50 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	8b5b      	ldrh	r3, [r3, #26]
 800c742:	f043 0301 	orr.w	r3, r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c74c:	e180      	b.n	800ca50 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c756:	4848      	ldr	r0, [pc, #288]	; (800c878 <tcp_receive+0xcfc>)
 800c758:	f7fd faf0 	bl	8009d3c <tcp_seg_copy>
 800c75c:	4602      	mov	r2, r0
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	675a      	str	r2, [r3, #116]	; 0x74
 800c762:	e16d      	b.n	800ca40 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c764:	2300      	movs	r3, #0
 800c766:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c76c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c76e:	e157      	b.n	800ca20 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	4b41      	ldr	r3, [pc, #260]	; (800c87c <tcp_receive+0xd00>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d11d      	bne.n	800c7ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c77e:	4b3e      	ldr	r3, [pc, #248]	; (800c878 <tcp_receive+0xcfc>)
 800c780:	891a      	ldrh	r2, [r3, #8]
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	891b      	ldrh	r3, [r3, #8]
 800c786:	429a      	cmp	r2, r3
 800c788:	f240 814f 	bls.w	800ca2a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c78c:	483a      	ldr	r0, [pc, #232]	; (800c878 <tcp_receive+0xcfc>)
 800c78e:	f7fd fad5 	bl	8009d3c <tcp_seg_copy>
 800c792:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 8149 	beq.w	800ca2e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800c79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	e002      	b.n	800c7b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c7b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7b2:	6978      	ldr	r0, [r7, #20]
 800c7b4:	f7ff f8de 	bl	800b974 <tcp_oos_insert_segment>
                }
                break;
 800c7b8:	e139      	b.n	800ca2e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d117      	bne.n	800c7f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c7c0:	4b2e      	ldr	r3, [pc, #184]	; (800c87c <tcp_receive+0xd00>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	da57      	bge.n	800c880 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7d0:	4829      	ldr	r0, [pc, #164]	; (800c878 <tcp_receive+0xcfc>)
 800c7d2:	f7fd fab3 	bl	8009d3c <tcp_seg_copy>
 800c7d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 8129 	beq.w	800ca32 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	69ba      	ldr	r2, [r7, #24]
 800c7e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c7e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7e8:	69b8      	ldr	r0, [r7, #24]
 800c7ea:	f7ff f8c3 	bl	800b974 <tcp_oos_insert_segment>
                  }
                  break;
 800c7ee:	e120      	b.n	800ca32 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c7f0:	4b22      	ldr	r3, [pc, #136]	; (800c87c <tcp_receive+0xd00>)
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	db3e      	blt.n	800c880 <tcp_receive+0xd04>
 800c802:	4b1e      	ldr	r3, [pc, #120]	; (800c87c <tcp_receive+0xd00>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	3301      	adds	r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	dc35      	bgt.n	800c880 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c814:	4818      	ldr	r0, [pc, #96]	; (800c878 <tcp_receive+0xcfc>)
 800c816:	f7fd fa91 	bl	8009d3c <tcp_seg_copy>
 800c81a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f000 8109 	beq.w	800ca36 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c82c:	8912      	ldrh	r2, [r2, #8]
 800c82e:	441a      	add	r2, r3
 800c830:	4b12      	ldr	r3, [pc, #72]	; (800c87c <tcp_receive+0xd00>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd12      	ble.n	800c860 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c83a:	4b10      	ldr	r3, [pc, #64]	; (800c87c <tcp_receive+0xd00>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	b29a      	uxth	r2, r3
 800c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	b29b      	uxth	r3, r3
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c856:	891b      	ldrh	r3, [r3, #8]
 800c858:	4619      	mov	r1, r3
 800c85a:	4610      	mov	r0, r2
 800c85c:	f7fb fc84 	bl	8008168 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c868:	69f8      	ldr	r0, [r7, #28]
 800c86a:	f7ff f883 	bl	800b974 <tcp_oos_insert_segment>
                  }
                  break;
 800c86e:	e0e2      	b.n	800ca36 <tcp_receive+0xeba>
 800c870:	20000584 	.word	0x20000584
 800c874:	20000581 	.word	0x20000581
 800c878:	20000554 	.word	0x20000554
 800c87c:	20000574 	.word	0x20000574
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f040 80c6 	bne.w	800ca1a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c88e:	4b80      	ldr	r3, [pc, #512]	; (800ca90 <tcp_receive+0xf14>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f340 80bd 	ble.w	800ca1a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	899b      	ldrh	r3, [r3, #12]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fa fa4d 	bl	8006d48 <lwip_htons>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f040 80bf 	bne.w	800ca3a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c8bc:	4875      	ldr	r0, [pc, #468]	; (800ca94 <tcp_receive+0xf18>)
 800c8be:	f7fd fa3d 	bl	8009d3c <tcp_seg_copy>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f000 80b6 	beq.w	800ca3e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8da:	8912      	ldrh	r2, [r2, #8]
 800c8dc:	441a      	add	r2, r3
 800c8de:	4b6c      	ldr	r3, [pc, #432]	; (800ca90 <tcp_receive+0xf14>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dd12      	ble.n	800c90e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c8e8:	4b69      	ldr	r3, [pc, #420]	; (800ca90 <tcp_receive+0xf14>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	891b      	ldrh	r3, [r3, #8]
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7fb fc2d 	bl	8008168 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c90e:	4b62      	ldr	r3, [pc, #392]	; (800ca98 <tcp_receive+0xf1c>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	4b5e      	ldr	r3, [pc, #376]	; (800ca90 <tcp_receive+0xf14>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	441a      	add	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c922:	440b      	add	r3, r1
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	f340 8089 	ble.w	800ca3e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	899b      	ldrh	r3, [r3, #12]
 800c934:	b29b      	uxth	r3, r3
 800c936:	4618      	mov	r0, r3
 800c938:	f7fa fa06 	bl	8006d48 <lwip_htons>
 800c93c:	4603      	mov	r3, r0
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d022      	beq.n	800c98e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	899b      	ldrh	r3, [r3, #12]
 800c950:	b29b      	uxth	r3, r3
 800c952:	b21b      	sxth	r3, r3
 800c954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c958:	b21c      	sxth	r4, r3
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	899b      	ldrh	r3, [r3, #12]
 800c962:	b29b      	uxth	r3, r3
 800c964:	4618      	mov	r0, r3
 800c966:	f7fa f9ef 	bl	8006d48 <lwip_htons>
 800c96a:	4603      	mov	r3, r0
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c974:	b29b      	uxth	r3, r3
 800c976:	4618      	mov	r0, r3
 800c978:	f7fa f9e6 	bl	8006d48 <lwip_htons>
 800c97c:	4603      	mov	r3, r0
 800c97e:	b21b      	sxth	r3, r3
 800c980:	4323      	orrs	r3, r4
 800c982:	b21a      	sxth	r2, r3
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	b292      	uxth	r2, r2
 800c98c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c998:	4413      	add	r3, r2
 800c99a:	b299      	uxth	r1, r3
 800c99c:	4b3c      	ldr	r3, [pc, #240]	; (800ca90 <tcp_receive+0xf14>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	1a8a      	subs	r2, r1, r2
 800c9a8:	b292      	uxth	r2, r2
 800c9aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	891b      	ldrh	r3, [r3, #8]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f7fb fbd4 	bl	8008168 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	891c      	ldrh	r4, [r3, #8]
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	899b      	ldrh	r3, [r3, #12]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fa f9b9 	bl	8006d48 <lwip_htons>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 0303 	and.w	r3, r3, #3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <tcp_receive+0xe6a>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e000      	b.n	800c9e8 <tcp_receive+0xe6c>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4423      	add	r3, r4
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ca98 <tcp_receive+0xf1c>)
 800c9ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c9f0:	4b29      	ldr	r3, [pc, #164]	; (800ca98 <tcp_receive+0xf1c>)
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	4b26      	ldr	r3, [pc, #152]	; (800ca90 <tcp_receive+0xf14>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	441a      	add	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca04:	440b      	add	r3, r1
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d019      	beq.n	800ca3e <tcp_receive+0xec2>
 800ca0a:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <tcp_receive+0xf20>)
 800ca0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ca10:	4923      	ldr	r1, [pc, #140]	; (800caa0 <tcp_receive+0xf24>)
 800ca12:	4824      	ldr	r0, [pc, #144]	; (800caa4 <tcp_receive+0xf28>)
 800ca14:	f004 fef6 	bl	8011804 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca18:	e011      	b.n	800ca3e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f47f aea4 	bne.w	800c770 <tcp_receive+0xbf4>
 800ca28:	e00a      	b.n	800ca40 <tcp_receive+0xec4>
                break;
 800ca2a:	bf00      	nop
 800ca2c:	e008      	b.n	800ca40 <tcp_receive+0xec4>
                break;
 800ca2e:	bf00      	nop
 800ca30:	e006      	b.n	800ca40 <tcp_receive+0xec4>
                  break;
 800ca32:	bf00      	nop
 800ca34:	e004      	b.n	800ca40 <tcp_receive+0xec4>
                  break;
 800ca36:	bf00      	nop
 800ca38:	e002      	b.n	800ca40 <tcp_receive+0xec4>
                  break;
 800ca3a:	bf00      	nop
 800ca3c:	e000      	b.n	800ca40 <tcp_receive+0xec4>
                break;
 800ca3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f001 fe8b 	bl	800e75c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ca46:	e003      	b.n	800ca50 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f001 fe87 	bl	800e75c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca4e:	e01a      	b.n	800ca86 <tcp_receive+0xf0a>
 800ca50:	e019      	b.n	800ca86 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ca52:	4b0f      	ldr	r3, [pc, #60]	; (800ca90 <tcp_receive+0xf14>)
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	db0a      	blt.n	800ca76 <tcp_receive+0xefa>
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <tcp_receive+0xf14>)
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca6c:	440b      	add	r3, r1
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	3301      	adds	r3, #1
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dd07      	ble.n	800ca86 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8b5b      	ldrh	r3, [r3, #26]
 800ca7a:	f043 0302 	orr.w	r3, r3, #2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ca84:	e7ff      	b.n	800ca86 <tcp_receive+0xf0a>
 800ca86:	bf00      	nop
 800ca88:	3750      	adds	r7, #80	; 0x50
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000574 	.word	0x20000574
 800ca94:	20000554 	.word	0x20000554
 800ca98:	2000057e 	.word	0x2000057e
 800ca9c:	08014c5c 	.word	0x08014c5c
 800caa0:	08015004 	.word	0x08015004
 800caa4:	08014ca8 	.word	0x08014ca8

0800caa8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800caae:	4b15      	ldr	r3, [pc, #84]	; (800cb04 <tcp_get_next_optbyte+0x5c>)
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	b291      	uxth	r1, r2
 800cab6:	4a13      	ldr	r2, [pc, #76]	; (800cb04 <tcp_get_next_optbyte+0x5c>)
 800cab8:	8011      	strh	r1, [r2, #0]
 800caba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cabc:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <tcp_get_next_optbyte+0x60>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d004      	beq.n	800cace <tcp_get_next_optbyte+0x26>
 800cac4:	4b11      	ldr	r3, [pc, #68]	; (800cb0c <tcp_get_next_optbyte+0x64>)
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	88fa      	ldrh	r2, [r7, #6]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d208      	bcs.n	800cae0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cace:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <tcp_get_next_optbyte+0x68>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3314      	adds	r3, #20
 800cad4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cad6:	88fb      	ldrh	r3, [r7, #6]
 800cad8:	683a      	ldr	r2, [r7, #0]
 800cada:	4413      	add	r3, r2
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	e00b      	b.n	800caf8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cae0:	88fb      	ldrh	r3, [r7, #6]
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <tcp_get_next_optbyte+0x64>)
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800caee:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <tcp_get_next_optbyte+0x60>)
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	797b      	ldrb	r3, [r7, #5]
 800caf4:	4413      	add	r3, r2
 800caf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	20000570 	.word	0x20000570
 800cb08:	2000056c 	.word	0x2000056c
 800cb0c:	2000056a 	.word	0x2000056a
 800cb10:	20000564 	.word	0x20000564

0800cb14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d106      	bne.n	800cb30 <tcp_parseopt+0x1c>
 800cb22:	4b32      	ldr	r3, [pc, #200]	; (800cbec <tcp_parseopt+0xd8>)
 800cb24:	f240 727d 	movw	r2, #1917	; 0x77d
 800cb28:	4931      	ldr	r1, [pc, #196]	; (800cbf0 <tcp_parseopt+0xdc>)
 800cb2a:	4832      	ldr	r0, [pc, #200]	; (800cbf4 <tcp_parseopt+0xe0>)
 800cb2c:	f004 fe6a 	bl	8011804 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cb30:	4b31      	ldr	r3, [pc, #196]	; (800cbf8 <tcp_parseopt+0xe4>)
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d055      	beq.n	800cbe4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb38:	4b30      	ldr	r3, [pc, #192]	; (800cbfc <tcp_parseopt+0xe8>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	801a      	strh	r2, [r3, #0]
 800cb3e:	e045      	b.n	800cbcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800cb40:	f7ff ffb2 	bl	800caa8 <tcp_get_next_optbyte>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d006      	beq.n	800cb5c <tcp_parseopt+0x48>
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	dc2b      	bgt.n	800cbaa <tcp_parseopt+0x96>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d041      	beq.n	800cbda <tcp_parseopt+0xc6>
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d127      	bne.n	800cbaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800cb5a:	e037      	b.n	800cbcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cb5c:	f7ff ffa4 	bl	800caa8 <tcp_get_next_optbyte>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	d13b      	bne.n	800cbde <tcp_parseopt+0xca>
 800cb66:	4b25      	ldr	r3, [pc, #148]	; (800cbfc <tcp_parseopt+0xe8>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	4a22      	ldr	r2, [pc, #136]	; (800cbf8 <tcp_parseopt+0xe4>)
 800cb6e:	8812      	ldrh	r2, [r2, #0]
 800cb70:	4293      	cmp	r3, r2
 800cb72:	da34      	bge.n	800cbde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cb74:	f7ff ff98 	bl	800caa8 <tcp_get_next_optbyte>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	021b      	lsls	r3, r3, #8
 800cb7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cb80:	f7ff ff92 	bl	800caa8 <tcp_get_next_optbyte>
 800cb84:	4603      	mov	r3, r0
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	89bb      	ldrh	r3, [r7, #12]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cb8e:	89bb      	ldrh	r3, [r7, #12]
 800cb90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cb94:	d804      	bhi.n	800cba0 <tcp_parseopt+0x8c>
 800cb96:	89bb      	ldrh	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <tcp_parseopt+0x8c>
 800cb9c:	89ba      	ldrh	r2, [r7, #12]
 800cb9e:	e001      	b.n	800cba4 <tcp_parseopt+0x90>
 800cba0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cba8:	e010      	b.n	800cbcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cbaa:	f7ff ff7d 	bl	800caa8 <tcp_get_next_optbyte>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cbb2:	7afb      	ldrb	r3, [r7, #11]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d914      	bls.n	800cbe2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cbb8:	7afb      	ldrb	r3, [r7, #11]
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <tcp_parseopt+0xe8>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	3b02      	subs	r3, #2
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	4b0c      	ldr	r3, [pc, #48]	; (800cbfc <tcp_parseopt+0xe8>)
 800cbca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cbcc:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <tcp_parseopt+0xe8>)
 800cbce:	881a      	ldrh	r2, [r3, #0]
 800cbd0:	4b09      	ldr	r3, [pc, #36]	; (800cbf8 <tcp_parseopt+0xe4>)
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d3b3      	bcc.n	800cb40 <tcp_parseopt+0x2c>
 800cbd8:	e004      	b.n	800cbe4 <tcp_parseopt+0xd0>
          return;
 800cbda:	bf00      	nop
 800cbdc:	e002      	b.n	800cbe4 <tcp_parseopt+0xd0>
            return;
 800cbde:	bf00      	nop
 800cbe0:	e000      	b.n	800cbe4 <tcp_parseopt+0xd0>
            return;
 800cbe2:	bf00      	nop
      }
    }
  }
}
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	08014c5c 	.word	0x08014c5c
 800cbf0:	080150c0 	.word	0x080150c0
 800cbf4:	08014ca8 	.word	0x08014ca8
 800cbf8:	20000568 	.word	0x20000568
 800cbfc:	20000570 	.word	0x20000570

0800cc00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cc04:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <tcp_trigger_input_pcb_close+0x1c>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f043 0310 	orr.w	r3, r3, #16
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <tcp_trigger_input_pcb_close+0x1c>)
 800cc10:	701a      	strb	r2, [r3, #0]
}
 800cc12:	bf00      	nop
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	20000581 	.word	0x20000581

0800cc20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00a      	beq.n	800cc48 <tcp_route+0x28>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	7a1b      	ldrb	r3, [r3, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d006      	beq.n	800cc48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7a1b      	ldrb	r3, [r3, #8]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fb f8b4 	bl	8007dac <netif_get_by_index>
 800cc44:	4603      	mov	r3, r0
 800cc46:	e003      	b.n	800cc50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f003 fad5 	bl	80101f8 <ip4_route>
 800cc4e:	4603      	mov	r3, r0
  }
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	4613      	mov	r3, r2
 800cc66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d105      	bne.n	800cc7a <tcp_create_segment+0x22>
 800cc6e:	4b44      	ldr	r3, [pc, #272]	; (800cd80 <tcp_create_segment+0x128>)
 800cc70:	22a3      	movs	r2, #163	; 0xa3
 800cc72:	4944      	ldr	r1, [pc, #272]	; (800cd84 <tcp_create_segment+0x12c>)
 800cc74:	4844      	ldr	r0, [pc, #272]	; (800cd88 <tcp_create_segment+0x130>)
 800cc76:	f004 fdc5 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d105      	bne.n	800cc8c <tcp_create_segment+0x34>
 800cc80:	4b3f      	ldr	r3, [pc, #252]	; (800cd80 <tcp_create_segment+0x128>)
 800cc82:	22a4      	movs	r2, #164	; 0xa4
 800cc84:	4941      	ldr	r1, [pc, #260]	; (800cd8c <tcp_create_segment+0x134>)
 800cc86:	4840      	ldr	r0, [pc, #256]	; (800cd88 <tcp_create_segment+0x130>)
 800cc88:	f004 fdbc 	bl	8011804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	f003 0304 	and.w	r3, r3, #4
 800cc98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc9a:	2003      	movs	r0, #3
 800cc9c:	f7fa fd88 	bl	80077b0 <memp_malloc>
 800cca0:	6138      	str	r0, [r7, #16]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d104      	bne.n	800ccb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cca8:	68b8      	ldr	r0, [r7, #8]
 800ccaa:	f7fb fbe3 	bl	8008474 <pbuf_free>
    return NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e061      	b.n	800cd76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ccb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	891a      	ldrh	r2, [r3, #8]
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d205      	bcs.n	800ccde <tcp_create_segment+0x86>
 800ccd2:	4b2b      	ldr	r3, [pc, #172]	; (800cd80 <tcp_create_segment+0x128>)
 800ccd4:	22b0      	movs	r2, #176	; 0xb0
 800ccd6:	492e      	ldr	r1, [pc, #184]	; (800cd90 <tcp_create_segment+0x138>)
 800ccd8:	482b      	ldr	r0, [pc, #172]	; (800cd88 <tcp_create_segment+0x130>)
 800ccda:	f004 fd93 	bl	8011804 <iprintf>
  seg->len = p->tot_len - optlen;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	891a      	ldrh	r2, [r3, #8]
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ccee:	2114      	movs	r1, #20
 800ccf0:	68b8      	ldr	r0, [r7, #8]
 800ccf2:	f7fb fb29 	bl	8008348 <pbuf_add_header>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ccfc:	6938      	ldr	r0, [r7, #16]
 800ccfe:	f7fc ffe6 	bl	8009cce <tcp_seg_free>
    return NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e037      	b.n	800cd76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	8ada      	ldrh	r2, [r3, #22]
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	68dc      	ldr	r4, [r3, #12]
 800cd18:	4610      	mov	r0, r2
 800cd1a:	f7fa f815 	bl	8006d48 <lwip_htons>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	8b1a      	ldrh	r2, [r3, #24]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	68dc      	ldr	r4, [r3, #12]
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	f7fa f80c 	bl	8006d48 <lwip_htons>
 800cd30:	4603      	mov	r3, r0
 800cd32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	68dc      	ldr	r4, [r3, #12]
 800cd38:	6838      	ldr	r0, [r7, #0]
 800cd3a:	f7fa f81a 	bl	8006d72 <lwip_htonl>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
 800cd44:	089b      	lsrs	r3, r3, #2
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	3305      	adds	r3, #5
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	031b      	lsls	r3, r3, #12
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	79fb      	ldrb	r3, [r7, #7]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	4313      	orrs	r3, r2
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	68dc      	ldr	r4, [r3, #12]
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f7f9 fff2 	bl	8006d48 <lwip_htons>
 800cd64:	4603      	mov	r3, r0
 800cd66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	749a      	strb	r2, [r3, #18]
 800cd70:	2200      	movs	r2, #0
 800cd72:	74da      	strb	r2, [r3, #19]
  return seg;
 800cd74:	693b      	ldr	r3, [r7, #16]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	371c      	adds	r7, #28
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd90      	pop	{r4, r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	080150dc 	.word	0x080150dc
 800cd84:	08015110 	.word	0x08015110
 800cd88:	08015130 	.word	0x08015130
 800cd8c:	08015158 	.word	0x08015158
 800cd90:	0801517c 	.word	0x0801517c

0800cd94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	607b      	str	r3, [r7, #4]
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]
 800cda0:	460b      	mov	r3, r1
 800cda2:	81bb      	strh	r3, [r7, #12]
 800cda4:	4613      	mov	r3, r2
 800cda6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cda8:	89bb      	ldrh	r3, [r7, #12]
 800cdaa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d105      	bne.n	800cdbe <tcp_pbuf_prealloc+0x2a>
 800cdb2:	4b30      	ldr	r3, [pc, #192]	; (800ce74 <tcp_pbuf_prealloc+0xe0>)
 800cdb4:	22e8      	movs	r2, #232	; 0xe8
 800cdb6:	4930      	ldr	r1, [pc, #192]	; (800ce78 <tcp_pbuf_prealloc+0xe4>)
 800cdb8:	4830      	ldr	r0, [pc, #192]	; (800ce7c <tcp_pbuf_prealloc+0xe8>)
 800cdba:	f004 fd23 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <tcp_pbuf_prealloc+0x3c>
 800cdc4:	4b2b      	ldr	r3, [pc, #172]	; (800ce74 <tcp_pbuf_prealloc+0xe0>)
 800cdc6:	22e9      	movs	r2, #233	; 0xe9
 800cdc8:	492d      	ldr	r1, [pc, #180]	; (800ce80 <tcp_pbuf_prealloc+0xec>)
 800cdca:	482c      	ldr	r0, [pc, #176]	; (800ce7c <tcp_pbuf_prealloc+0xe8>)
 800cdcc:	f004 fd1a 	bl	8011804 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cdd0:	89ba      	ldrh	r2, [r7, #12]
 800cdd2:	897b      	ldrh	r3, [r7, #10]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d221      	bcs.n	800ce1c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cdd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d111      	bne.n	800ce08 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	8b5b      	ldrh	r3, [r3, #26]
 800cde8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d115      	bne.n	800ce1c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800cdf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d007      	beq.n	800ce08 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d103      	bne.n	800ce08 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ce08:	89bb      	ldrh	r3, [r7, #12]
 800ce0a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ce0e:	f023 0203 	bic.w	r2, r3, #3
 800ce12:	897b      	ldrh	r3, [r7, #10]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bf28      	it	cs
 800ce18:	4613      	movcs	r3, r2
 800ce1a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ce1c:	8af9      	ldrh	r1, [r7, #22]
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fb f83d 	bl	8007ea4 <pbuf_alloc>
 800ce2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	e019      	b.n	800ce6a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d006      	beq.n	800ce4c <tcp_pbuf_prealloc+0xb8>
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <tcp_pbuf_prealloc+0xe0>)
 800ce40:	f240 120b 	movw	r2, #267	; 0x10b
 800ce44:	490f      	ldr	r1, [pc, #60]	; (800ce84 <tcp_pbuf_prealloc+0xf0>)
 800ce46:	480d      	ldr	r0, [pc, #52]	; (800ce7c <tcp_pbuf_prealloc+0xe8>)
 800ce48:	f004 fcdc 	bl	8011804 <iprintf>
  *oversize = p->len - length;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	895a      	ldrh	r2, [r3, #10]
 800ce50:	89bb      	ldrh	r3, [r7, #12]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	89ba      	ldrh	r2, [r7, #12]
 800ce5e:	811a      	strh	r2, [r3, #8]
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	891a      	ldrh	r2, [r3, #8]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	815a      	strh	r2, [r3, #10]
  return p;
 800ce68:	693b      	ldr	r3, [r7, #16]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	080150dc 	.word	0x080150dc
 800ce78:	08015194 	.word	0x08015194
 800ce7c:	08015130 	.word	0x08015130
 800ce80:	080151b8 	.word	0x080151b8
 800ce84:	080151d8 	.word	0x080151d8

0800ce88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d106      	bne.n	800cea8 <tcp_write_checks+0x20>
 800ce9a:	4b33      	ldr	r3, [pc, #204]	; (800cf68 <tcp_write_checks+0xe0>)
 800ce9c:	f240 1233 	movw	r2, #307	; 0x133
 800cea0:	4932      	ldr	r1, [pc, #200]	; (800cf6c <tcp_write_checks+0xe4>)
 800cea2:	4833      	ldr	r0, [pc, #204]	; (800cf70 <tcp_write_checks+0xe8>)
 800cea4:	f004 fcae 	bl	8011804 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7d1b      	ldrb	r3, [r3, #20]
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d00e      	beq.n	800cece <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ceb4:	2b07      	cmp	r3, #7
 800ceb6:	d00a      	beq.n	800cece <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d006      	beq.n	800cece <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	d002      	beq.n	800cece <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cec8:	f06f 030a 	mvn.w	r3, #10
 800cecc:	e048      	b.n	800cf60 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800cece:	887b      	ldrh	r3, [r7, #2]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <tcp_write_checks+0x50>
    return ERR_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e043      	b.n	800cf60 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cede:	887a      	ldrh	r2, [r7, #2]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d909      	bls.n	800cef8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	8b5b      	ldrh	r3, [r3, #26]
 800cee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cef6:	e033      	b.n	800cf60 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cefe:	2b08      	cmp	r3, #8
 800cf00:	d909      	bls.n	800cf16 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	8b5b      	ldrh	r3, [r3, #26]
 800cf06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf14:	e024      	b.n	800cf60 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00f      	beq.n	800cf40 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d11a      	bne.n	800cf5e <tcp_write_checks+0xd6>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d116      	bne.n	800cf5e <tcp_write_checks+0xd6>
 800cf30:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <tcp_write_checks+0xe0>)
 800cf32:	f240 1255 	movw	r2, #341	; 0x155
 800cf36:	490f      	ldr	r1, [pc, #60]	; (800cf74 <tcp_write_checks+0xec>)
 800cf38:	480d      	ldr	r0, [pc, #52]	; (800cf70 <tcp_write_checks+0xe8>)
 800cf3a:	f004 fc63 	bl	8011804 <iprintf>
 800cf3e:	e00e      	b.n	800cf5e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <tcp_write_checks+0xc8>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <tcp_write_checks+0xd6>
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <tcp_write_checks+0xe0>)
 800cf52:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cf56:	4908      	ldr	r1, [pc, #32]	; (800cf78 <tcp_write_checks+0xf0>)
 800cf58:	4805      	ldr	r0, [pc, #20]	; (800cf70 <tcp_write_checks+0xe8>)
 800cf5a:	f004 fc53 	bl	8011804 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	080150dc 	.word	0x080150dc
 800cf6c:	080151ec 	.word	0x080151ec
 800cf70:	08015130 	.word	0x08015130
 800cf74:	0801520c 	.word	0x0801520c
 800cf78:	08015248 	.word	0x08015248

0800cf7c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b09b      	sub	sp, #108	; 0x6c
 800cf80:	af04      	add	r7, sp, #16
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	4611      	mov	r1, r2
 800cf88:	461a      	mov	r2, r3
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	80fb      	strh	r3, [r7, #6]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	653b      	str	r3, [r7, #80]	; 0x50
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d109      	bne.n	800cfd8 <tcp_write+0x5c>
 800cfc4:	4ba4      	ldr	r3, [pc, #656]	; (800d258 <tcp_write+0x2dc>)
 800cfc6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cfca:	49a4      	ldr	r1, [pc, #656]	; (800d25c <tcp_write+0x2e0>)
 800cfcc:	48a4      	ldr	r0, [pc, #656]	; (800d260 <tcp_write+0x2e4>)
 800cfce:	f004 fc19 	bl	8011804 <iprintf>
 800cfd2:	f06f 030f 	mvn.w	r3, #15
 800cfd6:	e32a      	b.n	800d62e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfde:	085b      	lsrs	r3, r3, #1
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	bf28      	it	cs
 800cfea:	4613      	movcs	r3, r2
 800cfec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cfee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <tcp_write+0x7e>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cff8:	e000      	b.n	800cffc <tcp_write+0x80>
 800cffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cffc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d109      	bne.n	800d018 <tcp_write+0x9c>
 800d004:	4b94      	ldr	r3, [pc, #592]	; (800d258 <tcp_write+0x2dc>)
 800d006:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d00a:	4996      	ldr	r1, [pc, #600]	; (800d264 <tcp_write+0x2e8>)
 800d00c:	4894      	ldr	r0, [pc, #592]	; (800d260 <tcp_write+0x2e4>)
 800d00e:	f004 fbf9 	bl	8011804 <iprintf>
 800d012:	f06f 030f 	mvn.w	r3, #15
 800d016:	e30a      	b.n	800d62e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d018:	88fb      	ldrh	r3, [r7, #6]
 800d01a:	4619      	mov	r1, r3
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff ff33 	bl	800ce88 <tcp_write_checks>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <tcp_write+0xba>
    return err;
 800d030:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d034:	e2fb      	b.n	800d62e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d03c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d040:	2300      	movs	r3, #0
 800d042:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 80f6 	beq.w	800d23c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d054:	653b      	str	r3, [r7, #80]	; 0x50
 800d056:	e002      	b.n	800d05e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1f8      	bne.n	800d058 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d068:	7a9b      	ldrb	r3, [r3, #10]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	f003 0304 	and.w	r3, r3, #4
 800d072:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	4619      	mov	r1, r3
 800d07c:	8c3b      	ldrh	r3, [r7, #32]
 800d07e:	440b      	add	r3, r1
 800d080:	429a      	cmp	r2, r3
 800d082:	da06      	bge.n	800d092 <tcp_write+0x116>
 800d084:	4b74      	ldr	r3, [pc, #464]	; (800d258 <tcp_write+0x2dc>)
 800d086:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d08a:	4977      	ldr	r1, [pc, #476]	; (800d268 <tcp_write+0x2ec>)
 800d08c:	4874      	ldr	r0, [pc, #464]	; (800d260 <tcp_write+0x2e4>)
 800d08e:	f004 fbb9 	bl	8011804 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d094:	891a      	ldrh	r2, [r3, #8]
 800d096:	8c3b      	ldrh	r3, [r7, #32]
 800d098:	4413      	add	r3, r2
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0a8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d0aa:	8a7b      	ldrh	r3, [r7, #18]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d026      	beq.n	800d0fe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d0b0:	8a7b      	ldrh	r3, [r7, #18]
 800d0b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d206      	bcs.n	800d0c6 <tcp_write+0x14a>
 800d0b8:	4b67      	ldr	r3, [pc, #412]	; (800d258 <tcp_write+0x2dc>)
 800d0ba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d0be:	496b      	ldr	r1, [pc, #428]	; (800d26c <tcp_write+0x2f0>)
 800d0c0:	4867      	ldr	r0, [pc, #412]	; (800d260 <tcp_write+0x2e4>)
 800d0c2:	f004 fb9f 	bl	8011804 <iprintf>
      seg = last_unsent;
 800d0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d0ca:	8a7b      	ldrh	r3, [r7, #18]
 800d0cc:	88fa      	ldrh	r2, [r7, #6]
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	bf28      	it	cs
 800d0d2:	4613      	movcs	r3, r2
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bf28      	it	cs
 800d0dc:	4613      	movcs	r3, r2
 800d0de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d0e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d0e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d0ec:	8a7a      	ldrh	r2, [r7, #18]
 800d0ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d0f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d0fe:	8a7b      	ldrh	r3, [r7, #18]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <tcp_write+0x1a0>
 800d104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d006      	beq.n	800d11c <tcp_write+0x1a0>
 800d10e:	4b52      	ldr	r3, [pc, #328]	; (800d258 <tcp_write+0x2dc>)
 800d110:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d114:	4956      	ldr	r1, [pc, #344]	; (800d270 <tcp_write+0x2f4>)
 800d116:	4852      	ldr	r0, [pc, #328]	; (800d260 <tcp_write+0x2e4>)
 800d118:	f004 fb74 	bl	8011804 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d11c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d120:	88fb      	ldrh	r3, [r7, #6]
 800d122:	429a      	cmp	r2, r3
 800d124:	f080 8167 	bcs.w	800d3f6 <tcp_write+0x47a>
 800d128:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f000 8163 	beq.w	800d3f6 <tcp_write+0x47a>
 800d130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d132:	891b      	ldrh	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 815e 	beq.w	800d3f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d13a:	88fa      	ldrh	r2, [r7, #6]
 800d13c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d140:	1ad2      	subs	r2, r2, r3
 800d142:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d144:	4293      	cmp	r3, r2
 800d146:	bfa8      	it	ge
 800d148:	4613      	movge	r3, r2
 800d14a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d14c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d150:	797b      	ldrb	r3, [r7, #5]
 800d152:	f003 0301 	and.w	r3, r3, #1
 800d156:	2b00      	cmp	r3, #0
 800d158:	d027      	beq.n	800d1aa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d15a:	f107 0012 	add.w	r0, r7, #18
 800d15e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d160:	8bf9      	ldrh	r1, [r7, #30]
 800d162:	2301      	movs	r3, #1
 800d164:	9302      	str	r3, [sp, #8]
 800d166:	797b      	ldrb	r3, [r7, #5]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	4603      	mov	r3, r0
 800d170:	2000      	movs	r0, #0
 800d172:	f7ff fe0f 	bl	800cd94 <tcp_pbuf_prealloc>
 800d176:	6578      	str	r0, [r7, #84]	; 0x54
 800d178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 8225 	beq.w	800d5ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d182:	6858      	ldr	r0, [r3, #4]
 800d184:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	4413      	add	r3, r2
 800d18c:	8bfa      	ldrh	r2, [r7, #30]
 800d18e:	4619      	mov	r1, r3
 800d190:	f004 fa5e 	bl	8011650 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d194:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d196:	f7fb f9f5 	bl	8008584 <pbuf_clen>
 800d19a:	4603      	mov	r3, r0
 800d19c:	461a      	mov	r2, r3
 800d19e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d1a8:	e041      	b.n	800d22e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b0:	e002      	b.n	800d1b8 <tcp_write+0x23c>
 800d1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f8      	bne.n	800d1b2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c2:	7b1b      	ldrb	r3, [r3, #12]
 800d1c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d115      	bne.n	800d1f8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d2:	8952      	ldrh	r2, [r2, #10]
 800d1d4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d10d      	bne.n	800d1f8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d1dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d006      	beq.n	800d1f2 <tcp_write+0x276>
 800d1e4:	4b1c      	ldr	r3, [pc, #112]	; (800d258 <tcp_write+0x2dc>)
 800d1e6:	f240 2231 	movw	r2, #561	; 0x231
 800d1ea:	4922      	ldr	r1, [pc, #136]	; (800d274 <tcp_write+0x2f8>)
 800d1ec:	481c      	ldr	r0, [pc, #112]	; (800d260 <tcp_write+0x2e4>)
 800d1ee:	f004 fb09 	bl	8011804 <iprintf>
          extendlen = seglen;
 800d1f2:	8bfb      	ldrh	r3, [r7, #30]
 800d1f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d1f6:	e01a      	b.n	800d22e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d1f8:	8bfb      	ldrh	r3, [r7, #30]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	2000      	movs	r0, #0
 800d200:	f7fa fe50 	bl	8007ea4 <pbuf_alloc>
 800d204:	6578      	str	r0, [r7, #84]	; 0x54
 800d206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 81e0 	beq.w	800d5ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d20e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	441a      	add	r2, r3
 800d216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d218:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d21a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d21c:	f7fb f9b2 	bl	8008584 <pbuf_clen>
 800d220:	4603      	mov	r3, r0
 800d222:	461a      	mov	r2, r3
 800d224:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d228:	4413      	add	r3, r2
 800d22a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d22e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d232:	8bfb      	ldrh	r3, [r7, #30]
 800d234:	4413      	add	r3, r2
 800d236:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d23a:	e0dc      	b.n	800d3f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 80d7 	beq.w	800d3f6 <tcp_write+0x47a>
 800d248:	4b03      	ldr	r3, [pc, #12]	; (800d258 <tcp_write+0x2dc>)
 800d24a:	f240 224a 	movw	r2, #586	; 0x24a
 800d24e:	490a      	ldr	r1, [pc, #40]	; (800d278 <tcp_write+0x2fc>)
 800d250:	4803      	ldr	r0, [pc, #12]	; (800d260 <tcp_write+0x2e4>)
 800d252:	f004 fad7 	bl	8011804 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d256:	e0ce      	b.n	800d3f6 <tcp_write+0x47a>
 800d258:	080150dc 	.word	0x080150dc
 800d25c:	0801527c 	.word	0x0801527c
 800d260:	08015130 	.word	0x08015130
 800d264:	08015294 	.word	0x08015294
 800d268:	080152c8 	.word	0x080152c8
 800d26c:	080152e0 	.word	0x080152e0
 800d270:	08015300 	.word	0x08015300
 800d274:	08015320 	.word	0x08015320
 800d278:	0801534c 	.word	0x0801534c
    struct pbuf *p;
    u16_t left = len - pos;
 800d27c:	88fa      	ldrh	r2, [r7, #6]
 800d27e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d286:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d292:	8b7a      	ldrh	r2, [r7, #26]
 800d294:	8bbb      	ldrh	r3, [r7, #28]
 800d296:	4293      	cmp	r3, r2
 800d298:	bf28      	it	cs
 800d29a:	4613      	movcs	r3, r2
 800d29c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d29e:	797b      	ldrb	r3, [r7, #5]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d036      	beq.n	800d316 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d2a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	8b3b      	ldrh	r3, [r7, #24]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	b299      	uxth	r1, r3
 800d2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bf0c      	ite	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	2300      	movne	r3, #0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f107 0012 	add.w	r0, r7, #18
 800d2c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2c6:	9302      	str	r3, [sp, #8]
 800d2c8:	797b      	ldrb	r3, [r7, #5]
 800d2ca:	9301      	str	r3, [sp, #4]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2036      	movs	r0, #54	; 0x36
 800d2d4:	f7ff fd5e 	bl	800cd94 <tcp_pbuf_prealloc>
 800d2d8:	6338      	str	r0, [r7, #48]	; 0x30
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 8178 	beq.w	800d5d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	895b      	ldrh	r3, [r3, #10]
 800d2e6:	8b3a      	ldrh	r2, [r7, #24]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d906      	bls.n	800d2fa <tcp_write+0x37e>
 800d2ec:	4b8c      	ldr	r3, [pc, #560]	; (800d520 <tcp_write+0x5a4>)
 800d2ee:	f240 2266 	movw	r2, #614	; 0x266
 800d2f2:	498c      	ldr	r1, [pc, #560]	; (800d524 <tcp_write+0x5a8>)
 800d2f4:	488c      	ldr	r0, [pc, #560]	; (800d528 <tcp_write+0x5ac>)
 800d2f6:	f004 fa85 	bl	8011804 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d302:	18d0      	adds	r0, r2, r3
 800d304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	4413      	add	r3, r2
 800d30c:	8b3a      	ldrh	r2, [r7, #24]
 800d30e:	4619      	mov	r1, r3
 800d310:	f004 f99e 	bl	8011650 <memcpy>
 800d314:	e02f      	b.n	800d376 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d316:	8a7b      	ldrh	r3, [r7, #18]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d006      	beq.n	800d32a <tcp_write+0x3ae>
 800d31c:	4b80      	ldr	r3, [pc, #512]	; (800d520 <tcp_write+0x5a4>)
 800d31e:	f240 2271 	movw	r2, #625	; 0x271
 800d322:	4982      	ldr	r1, [pc, #520]	; (800d52c <tcp_write+0x5b0>)
 800d324:	4880      	ldr	r0, [pc, #512]	; (800d528 <tcp_write+0x5ac>)
 800d326:	f004 fa6d 	bl	8011804 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d32a:	8b3b      	ldrh	r3, [r7, #24]
 800d32c:	2201      	movs	r2, #1
 800d32e:	4619      	mov	r1, r3
 800d330:	2036      	movs	r0, #54	; 0x36
 800d332:	f7fa fdb7 	bl	8007ea4 <pbuf_alloc>
 800d336:	6178      	str	r0, [r7, #20]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f000 814b 	beq.w	800d5d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	441a      	add	r2, r3
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d34c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d350:	b29b      	uxth	r3, r3
 800d352:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d356:	4619      	mov	r1, r3
 800d358:	2036      	movs	r0, #54	; 0x36
 800d35a:	f7fa fda3 	bl	8007ea4 <pbuf_alloc>
 800d35e:	6338      	str	r0, [r7, #48]	; 0x30
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	2b00      	cmp	r3, #0
 800d364:	d103      	bne.n	800d36e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d366:	6978      	ldr	r0, [r7, #20]
 800d368:	f7fb f884 	bl	8008474 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d36c:	e136      	b.n	800d5dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d36e:	6979      	ldr	r1, [r7, #20]
 800d370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d372:	f7fb f941 	bl	80085f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d378:	f7fb f904 	bl	8008584 <pbuf_clen>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461a      	mov	r2, r3
 800d380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d384:	4413      	add	r3, r2
 800d386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d38a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d38e:	2b09      	cmp	r3, #9
 800d390:	d903      	bls.n	800d39a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d394:	f7fb f86e 	bl	8008474 <pbuf_free>
      goto memerr;
 800d398:	e120      	b.n	800d5dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d39e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3a2:	441a      	add	r2, r3
 800d3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f7ff fc51 	bl	800cc58 <tcp_create_segment>
 800d3b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 810d 	beq.w	800d5da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <tcp_write+0x450>
      queue = seg;
 800d3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c8:	647b      	str	r3, [r7, #68]	; 0x44
 800d3ca:	e00c      	b.n	800d3e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d106      	bne.n	800d3e0 <tcp_write+0x464>
 800d3d2:	4b53      	ldr	r3, [pc, #332]	; (800d520 <tcp_write+0x5a4>)
 800d3d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d3d8:	4955      	ldr	r1, [pc, #340]	; (800d530 <tcp_write+0x5b4>)
 800d3da:	4853      	ldr	r0, [pc, #332]	; (800d528 <tcp_write+0x5ac>)
 800d3dc:	f004 fa12 	bl	8011804 <iprintf>
      prev_seg->next = seg;
 800d3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3e8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d3ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3ee:	8b3b      	ldrh	r3, [r7, #24]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d3f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	f4ff af3d 	bcc.w	800d27c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d402:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d404:	2b00      	cmp	r3, #0
 800d406:	d02c      	beq.n	800d462 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d40e:	e01e      	b.n	800d44e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	891a      	ldrh	r2, [r3, #8]
 800d414:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d416:	4413      	add	r3, r2
 800d418:	b29a      	uxth	r2, r3
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d110      	bne.n	800d448 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42c:	8952      	ldrh	r2, [r2, #10]
 800d42e:	4413      	add	r3, r2
 800d430:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d432:	68b9      	ldr	r1, [r7, #8]
 800d434:	4618      	mov	r0, r3
 800d436:	f004 f90b 	bl	8011650 <memcpy>
        p->len += oversize_used;
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	895a      	ldrh	r2, [r3, #10]
 800d43e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d440:	4413      	add	r3, r2
 800d442:	b29a      	uxth	r2, r3
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1dd      	bne.n	800d410 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d456:	891a      	ldrh	r2, [r3, #8]
 800d458:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d45a:	4413      	add	r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d460:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d462:	8a7a      	ldrh	r2, [r7, #18]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d018      	beq.n	800d4a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d472:	2b00      	cmp	r3, #0
 800d474:	d106      	bne.n	800d484 <tcp_write+0x508>
 800d476:	4b2a      	ldr	r3, [pc, #168]	; (800d520 <tcp_write+0x5a4>)
 800d478:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d47c:	492d      	ldr	r1, [pc, #180]	; (800d534 <tcp_write+0x5b8>)
 800d47e:	482a      	ldr	r0, [pc, #168]	; (800d528 <tcp_write+0x5ac>)
 800d480:	f004 f9c0 	bl	8011804 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fb f8b4 	bl	80085f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d492:	891a      	ldrh	r2, [r3, #8]
 800d494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d496:	891b      	ldrh	r3, [r3, #8]
 800d498:	4413      	add	r3, r2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49e:	811a      	strh	r2, [r3, #8]
 800d4a0:	e037      	b.n	800d512 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d4a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d034      	beq.n	800d512 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <tcp_write+0x53a>
 800d4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <tcp_write+0x548>
 800d4b6:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <tcp_write+0x5a4>)
 800d4b8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d4bc:	491e      	ldr	r1, [pc, #120]	; (800d538 <tcp_write+0x5bc>)
 800d4be:	481a      	ldr	r0, [pc, #104]	; (800d528 <tcp_write+0x5ac>)
 800d4c0:	f004 f9a0 	bl	8011804 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4ca:	e009      	b.n	800d4e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	891a      	ldrh	r2, [r3, #8]
 800d4d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4d2:	4413      	add	r3, r2
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f1      	bne.n	800d4cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	891a      	ldrh	r2, [r3, #8]
 800d4ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4ee:	4413      	add	r3, r2
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	895a      	ldrh	r2, [r3, #10]
 800d4fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4fc:	4413      	add	r3, r2
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d502:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d506:	891a      	ldrh	r2, [r3, #8]
 800d508:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d50a:	4413      	add	r3, r2
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d510:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d514:	2b00      	cmp	r3, #0
 800d516:	d111      	bne.n	800d53c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d51c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d51e:	e010      	b.n	800d542 <tcp_write+0x5c6>
 800d520:	080150dc 	.word	0x080150dc
 800d524:	0801537c 	.word	0x0801537c
 800d528:	08015130 	.word	0x08015130
 800d52c:	080153bc 	.word	0x080153bc
 800d530:	080153cc 	.word	0x080153cc
 800d534:	080153e0 	.word	0x080153e0
 800d538:	08015418 	.word	0x08015418
  } else {
    last_unsent->next = queue;
 800d53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d53e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d540:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d546:	88fb      	ldrh	r3, [r7, #6]
 800d548:	441a      	add	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d554:	88fb      	ldrh	r3, [r7, #6]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	b29a      	uxth	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d566:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00e      	beq.n	800d592 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10a      	bne.n	800d592 <tcp_write+0x616>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <tcp_write+0x616>
 800d584:	4b2c      	ldr	r3, [pc, #176]	; (800d638 <tcp_write+0x6bc>)
 800d586:	f240 3212 	movw	r2, #786	; 0x312
 800d58a:	492c      	ldr	r1, [pc, #176]	; (800d63c <tcp_write+0x6c0>)
 800d58c:	482c      	ldr	r0, [pc, #176]	; (800d640 <tcp_write+0x6c4>)
 800d58e:	f004 f939 	bl	8011804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d016      	beq.n	800d5c6 <tcp_write+0x64a>
 800d598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d012      	beq.n	800d5c6 <tcp_write+0x64a>
 800d5a0:	797b      	ldrb	r3, [r7, #5]
 800d5a2:	f003 0302 	and.w	r3, r3, #2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10d      	bne.n	800d5c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	899b      	ldrh	r3, [r3, #12]
 800d5b0:	b29c      	uxth	r4, r3
 800d5b2:	2008      	movs	r0, #8
 800d5b4:	f7f9 fbc8 	bl	8006d48 <lwip_htons>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	4322      	orrs	r2, r4
 800d5c2:	b292      	uxth	r2, r2
 800d5c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e031      	b.n	800d62e <tcp_write+0x6b2>
          goto memerr;
 800d5ca:	bf00      	nop
 800d5cc:	e006      	b.n	800d5dc <tcp_write+0x660>
            goto memerr;
 800d5ce:	bf00      	nop
 800d5d0:	e004      	b.n	800d5dc <tcp_write+0x660>
        goto memerr;
 800d5d2:	bf00      	nop
 800d5d4:	e002      	b.n	800d5dc <tcp_write+0x660>
        goto memerr;
 800d5d6:	bf00      	nop
 800d5d8:	e000      	b.n	800d5dc <tcp_write+0x660>
      goto memerr;
 800d5da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	8b5b      	ldrh	r3, [r3, #26]
 800d5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d5f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d5f2:	f7fa ff3f 	bl	8008474 <pbuf_free>
  }
  if (queue != NULL) {
 800d5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <tcp_write+0x686>
    tcp_segs_free(queue);
 800d5fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5fe:	f7fc fb51 	bl	8009ca4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00e      	beq.n	800d62a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <tcp_write+0x6ae>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <tcp_write+0x6ae>
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <tcp_write+0x6bc>)
 800d61e:	f240 3227 	movw	r2, #807	; 0x327
 800d622:	4906      	ldr	r1, [pc, #24]	; (800d63c <tcp_write+0x6c0>)
 800d624:	4806      	ldr	r0, [pc, #24]	; (800d640 <tcp_write+0x6c4>)
 800d626:	f004 f8ed 	bl	8011804 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d62e:	4618      	mov	r0, r3
 800d630:	375c      	adds	r7, #92	; 0x5c
 800d632:	46bd      	mov	sp, r7
 800d634:	bd90      	pop	{r4, r7, pc}
 800d636:	bf00      	nop
 800d638:	080150dc 	.word	0x080150dc
 800d63c:	08015450 	.word	0x08015450
 800d640:	08015130 	.word	0x08015130

0800d644 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d644:	b590      	push	{r4, r7, lr}
 800d646:	b08b      	sub	sp, #44	; 0x2c
 800d648:	af02      	add	r7, sp, #8
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	61fb      	str	r3, [r7, #28]
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d658:	2300      	movs	r3, #0
 800d65a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <tcp_split_unsent_seg+0x2c>
 800d662:	4b95      	ldr	r3, [pc, #596]	; (800d8b8 <tcp_split_unsent_seg+0x274>)
 800d664:	f240 324b 	movw	r2, #843	; 0x34b
 800d668:	4994      	ldr	r1, [pc, #592]	; (800d8bc <tcp_split_unsent_seg+0x278>)
 800d66a:	4895      	ldr	r0, [pc, #596]	; (800d8c0 <tcp_split_unsent_seg+0x27c>)
 800d66c:	f004 f8ca 	bl	8011804 <iprintf>

  useg = pcb->unsent;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d674:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d102      	bne.n	800d682 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d680:	e116      	b.n	800d8b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d682:	887b      	ldrh	r3, [r7, #2]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d109      	bne.n	800d69c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d688:	4b8b      	ldr	r3, [pc, #556]	; (800d8b8 <tcp_split_unsent_seg+0x274>)
 800d68a:	f240 3253 	movw	r2, #851	; 0x353
 800d68e:	498d      	ldr	r1, [pc, #564]	; (800d8c4 <tcp_split_unsent_seg+0x280>)
 800d690:	488b      	ldr	r0, [pc, #556]	; (800d8c0 <tcp_split_unsent_seg+0x27c>)
 800d692:	f004 f8b7 	bl	8011804 <iprintf>
    return ERR_VAL;
 800d696:	f06f 0305 	mvn.w	r3, #5
 800d69a:	e109      	b.n	800d8b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	891b      	ldrh	r3, [r3, #8]
 800d6a0:	887a      	ldrh	r2, [r7, #2]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d301      	bcc.n	800d6aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e102      	b.n	800d8b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6ae:	887a      	ldrh	r2, [r7, #2]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d906      	bls.n	800d6c2 <tcp_split_unsent_seg+0x7e>
 800d6b4:	4b80      	ldr	r3, [pc, #512]	; (800d8b8 <tcp_split_unsent_seg+0x274>)
 800d6b6:	f240 325b 	movw	r2, #859	; 0x35b
 800d6ba:	4983      	ldr	r1, [pc, #524]	; (800d8c8 <tcp_split_unsent_seg+0x284>)
 800d6bc:	4880      	ldr	r0, [pc, #512]	; (800d8c0 <tcp_split_unsent_seg+0x27c>)
 800d6be:	f004 f8a1 	bl	8011804 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	891b      	ldrh	r3, [r3, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <tcp_split_unsent_seg+0x94>
 800d6ca:	4b7b      	ldr	r3, [pc, #492]	; (800d8b8 <tcp_split_unsent_seg+0x274>)
 800d6cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d6d0:	497e      	ldr	r1, [pc, #504]	; (800d8cc <tcp_split_unsent_seg+0x288>)
 800d6d2:	487b      	ldr	r0, [pc, #492]	; (800d8c0 <tcp_split_unsent_seg+0x27c>)
 800d6d4:	f004 f896 	bl	8011804 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	7a9b      	ldrb	r3, [r3, #10]
 800d6dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	891a      	ldrh	r2, [r3, #8]
 800d6ee:	887b      	ldrh	r3, [r7, #2]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	89bb      	ldrh	r3, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d702:	4619      	mov	r1, r3
 800d704:	2036      	movs	r0, #54	; 0x36
 800d706:	f7fa fbcd 	bl	8007ea4 <pbuf_alloc>
 800d70a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 80b7 	beq.w	800d882 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	891a      	ldrh	r2, [r3, #8]
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	891b      	ldrh	r3, [r3, #8]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	b29a      	uxth	r2, r3
 800d722:	887b      	ldrh	r3, [r7, #2]
 800d724:	4413      	add	r3, r2
 800d726:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	6858      	ldr	r0, [r3, #4]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	18d1      	adds	r1, r2, r3
 800d734:	897b      	ldrh	r3, [r7, #10]
 800d736:	89ba      	ldrh	r2, [r7, #12]
 800d738:	f7fb f886 	bl	8008848 <pbuf_copy_partial>
 800d73c:	4603      	mov	r3, r0
 800d73e:	461a      	mov	r2, r3
 800d740:	89bb      	ldrh	r3, [r7, #12]
 800d742:	4293      	cmp	r3, r2
 800d744:	f040 809f 	bne.w	800d886 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	899b      	ldrh	r3, [r3, #12]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	4618      	mov	r0, r3
 800d752:	f7f9 faf9 	bl	8006d48 <lwip_htons>
 800d756:	4603      	mov	r3, r0
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d75e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d760:	2300      	movs	r3, #0
 800d762:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d764:	7efb      	ldrb	r3, [r7, #27]
 800d766:	f003 0308 	and.w	r3, r3, #8
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d007      	beq.n	800d77e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d76e:	7efb      	ldrb	r3, [r7, #27]
 800d770:	f023 0308 	bic.w	r3, r3, #8
 800d774:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d776:	7ebb      	ldrb	r3, [r7, #26]
 800d778:	f043 0308 	orr.w	r3, r3, #8
 800d77c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d77e:	7efb      	ldrb	r3, [r7, #27]
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	d007      	beq.n	800d798 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d788:	7efb      	ldrb	r3, [r7, #27]
 800d78a:	f023 0301 	bic.w	r3, r3, #1
 800d78e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d790:	7ebb      	ldrb	r3, [r7, #26]
 800d792:	f043 0301 	orr.w	r3, r3, #1
 800d796:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f9 fae7 	bl	8006d72 <lwip_htonl>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	887b      	ldrh	r3, [r7, #2]
 800d7a8:	18d1      	adds	r1, r2, r3
 800d7aa:	7eba      	ldrb	r2, [r7, #26]
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	6939      	ldr	r1, [r7, #16]
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff fa4f 	bl	800cc58 <tcp_create_segment>
 800d7ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d063      	beq.n	800d88a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fa fedc 	bl	8008584 <pbuf_clen>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d7d6:	1a9b      	subs	r3, r3, r2
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	6858      	ldr	r0, [r3, #4]
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	891a      	ldrh	r2, [r3, #8]
 800d7ea:	89bb      	ldrh	r3, [r7, #12]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f7fa fcb9 	bl	8008168 <pbuf_realloc>
  useg->len -= remainder;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	891a      	ldrh	r2, [r3, #8]
 800d7fa:	89bb      	ldrh	r3, [r7, #12]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	899b      	ldrh	r3, [r3, #12]
 800d80a:	b29c      	uxth	r4, r3
 800d80c:	7efb      	ldrb	r3, [r7, #27]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4618      	mov	r0, r3
 800d812:	f7f9 fa99 	bl	8006d48 <lwip_htons>
 800d816:	4603      	mov	r3, r0
 800d818:	461a      	mov	r2, r3
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	4322      	orrs	r2, r4
 800d820:	b292      	uxth	r2, r2
 800d822:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fa feab 	bl	8008584 <pbuf_clen>
 800d82e:	4603      	mov	r3, r0
 800d830:	461a      	mov	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d838:	4413      	add	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	4618      	mov	r0, r3
 800d848:	f7fa fe9c 	bl	8008584 <pbuf_clen>
 800d84c:	4603      	mov	r3, r0
 800d84e:	461a      	mov	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d856:	4413      	add	r3, r2
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	69fa      	ldr	r2, [r7, #28]
 800d86c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d103      	bne.n	800d87e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	e016      	b.n	800d8b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d882:	bf00      	nop
 800d884:	e002      	b.n	800d88c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d886:	bf00      	nop
 800d888:	e000      	b.n	800d88c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d88a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d006      	beq.n	800d8a0 <tcp_split_unsent_seg+0x25c>
 800d892:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <tcp_split_unsent_seg+0x274>)
 800d894:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d898:	490d      	ldr	r1, [pc, #52]	; (800d8d0 <tcp_split_unsent_seg+0x28c>)
 800d89a:	4809      	ldr	r0, [pc, #36]	; (800d8c0 <tcp_split_unsent_seg+0x27c>)
 800d89c:	f003 ffb2 	bl	8011804 <iprintf>
  if (p != NULL) {
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f7fa fde4 	bl	8008474 <pbuf_free>
  }

  return ERR_MEM;
 800d8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3724      	adds	r7, #36	; 0x24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd90      	pop	{r4, r7, pc}
 800d8b8:	080150dc 	.word	0x080150dc
 800d8bc:	08015470 	.word	0x08015470
 800d8c0:	08015130 	.word	0x08015130
 800d8c4:	08015494 	.word	0x08015494
 800d8c8:	080154b8 	.word	0x080154b8
 800d8cc:	080154c8 	.word	0x080154c8
 800d8d0:	080154d8 	.word	0x080154d8

0800d8d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <tcp_send_fin+0x1c>
 800d8e2:	4b21      	ldr	r3, [pc, #132]	; (800d968 <tcp_send_fin+0x94>)
 800d8e4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d8e8:	4920      	ldr	r1, [pc, #128]	; (800d96c <tcp_send_fin+0x98>)
 800d8ea:	4821      	ldr	r0, [pc, #132]	; (800d970 <tcp_send_fin+0x9c>)
 800d8ec:	f003 ff8a 	bl	8011804 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d02e      	beq.n	800d956 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e002      	b.n	800d906 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1f8      	bne.n	800d900 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	899b      	ldrh	r3, [r3, #12]
 800d914:	b29b      	uxth	r3, r3
 800d916:	4618      	mov	r0, r3
 800d918:	f7f9 fa16 	bl	8006d48 <lwip_htons>
 800d91c:	4603      	mov	r3, r0
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	f003 0307 	and.w	r3, r3, #7
 800d924:	2b00      	cmp	r3, #0
 800d926:	d116      	bne.n	800d956 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	899b      	ldrh	r3, [r3, #12]
 800d92e:	b29c      	uxth	r4, r3
 800d930:	2001      	movs	r0, #1
 800d932:	f7f9 fa09 	bl	8006d48 <lwip_htons>
 800d936:	4603      	mov	r3, r0
 800d938:	461a      	mov	r2, r3
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	4322      	orrs	r2, r4
 800d940:	b292      	uxth	r2, r2
 800d942:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	8b5b      	ldrh	r3, [r3, #26]
 800d948:	f043 0320 	orr.w	r3, r3, #32
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	e004      	b.n	800d960 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d956:	2101      	movs	r1, #1
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f80b 	bl	800d974 <tcp_enqueue_flags>
 800d95e:	4603      	mov	r3, r0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	bd90      	pop	{r4, r7, pc}
 800d968:	080150dc 	.word	0x080150dc
 800d96c:	080154e4 	.word	0x080154e4
 800d970:	08015130 	.word	0x08015130

0800d974 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08a      	sub	sp, #40	; 0x28
 800d978:	af02      	add	r7, sp, #8
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	f003 0303 	and.w	r3, r3, #3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <tcp_enqueue_flags+0x2c>
 800d992:	4b67      	ldr	r3, [pc, #412]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800d994:	f240 4211 	movw	r2, #1041	; 0x411
 800d998:	4966      	ldr	r1, [pc, #408]	; (800db34 <tcp_enqueue_flags+0x1c0>)
 800d99a:	4867      	ldr	r0, [pc, #412]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800d99c:	f003 ff32 	bl	8011804 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <tcp_enqueue_flags+0x40>
 800d9a6:	4b62      	ldr	r3, [pc, #392]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800d9a8:	f240 4213 	movw	r2, #1043	; 0x413
 800d9ac:	4963      	ldr	r1, [pc, #396]	; (800db3c <tcp_enqueue_flags+0x1c8>)
 800d9ae:	4862      	ldr	r0, [pc, #392]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800d9b0:	f003 ff28 	bl	8011804 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9c2:	7ffb      	ldrb	r3, [r7, #31]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 0304 	and.w	r3, r3, #4
 800d9cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	2036      	movs	r0, #54	; 0x36
 800d9da:	f7fa fa63 	bl	8007ea4 <pbuf_alloc>
 800d9de:	6138      	str	r0, [r7, #16]
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d109      	bne.n	800d9fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	8b5b      	ldrh	r3, [r3, #26]
 800d9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9f8:	e095      	b.n	800db26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	895a      	ldrh	r2, [r3, #10]
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	b29b      	uxth	r3, r3
 800da02:	429a      	cmp	r2, r3
 800da04:	d206      	bcs.n	800da14 <tcp_enqueue_flags+0xa0>
 800da06:	4b4a      	ldr	r3, [pc, #296]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800da08:	f240 4239 	movw	r2, #1081	; 0x439
 800da0c:	494c      	ldr	r1, [pc, #304]	; (800db40 <tcp_enqueue_flags+0x1cc>)
 800da0e:	484a      	ldr	r0, [pc, #296]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800da10:	f003 fef8 	bl	8011804 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800da18:	78fa      	ldrb	r2, [r7, #3]
 800da1a:	7ffb      	ldrb	r3, [r7, #31]
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	460b      	mov	r3, r1
 800da20:	6939      	ldr	r1, [r7, #16]
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff f918 	bl	800cc58 <tcp_create_segment>
 800da28:	60f8      	str	r0, [r7, #12]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d109      	bne.n	800da44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8b5b      	ldrh	r3, [r3, #26]
 800da34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da38:	b29a      	uxth	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800da3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da42:	e070      	b.n	800db26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f003 0303 	and.w	r3, r3, #3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d006      	beq.n	800da5e <tcp_enqueue_flags+0xea>
 800da50:	4b37      	ldr	r3, [pc, #220]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800da52:	f240 4242 	movw	r2, #1090	; 0x442
 800da56:	493b      	ldr	r1, [pc, #236]	; (800db44 <tcp_enqueue_flags+0x1d0>)
 800da58:	4837      	ldr	r0, [pc, #220]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800da5a:	f003 fed3 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	891b      	ldrh	r3, [r3, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d006      	beq.n	800da74 <tcp_enqueue_flags+0x100>
 800da66:	4b32      	ldr	r3, [pc, #200]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800da68:	f240 4243 	movw	r2, #1091	; 0x443
 800da6c:	4936      	ldr	r1, [pc, #216]	; (800db48 <tcp_enqueue_flags+0x1d4>)
 800da6e:	4832      	ldr	r0, [pc, #200]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800da70:	f003 fec8 	bl	8011804 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d103      	bne.n	800da84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	66da      	str	r2, [r3, #108]	; 0x6c
 800da82:	e00d      	b.n	800daa0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da88:	61bb      	str	r3, [r7, #24]
 800da8a:	e002      	b.n	800da92 <tcp_enqueue_flags+0x11e>
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	61bb      	str	r3, [r7, #24]
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1f8      	bne.n	800da8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800daa8:	78fb      	ldrb	r3, [r7, #3]
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d104      	bne.n	800dabc <tcp_enqueue_flags+0x148>
 800dab2:	78fb      	ldrb	r3, [r7, #3]
 800dab4:	f003 0301 	and.w	r3, r3, #1
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d004      	beq.n	800dac6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dac6:	78fb      	ldrb	r3, [r7, #3]
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d006      	beq.n	800dade <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8b5b      	ldrh	r3, [r3, #26]
 800dad4:	f043 0320 	orr.w	r3, r3, #32
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fa fd4e 	bl	8008584 <pbuf_clen>
 800dae8:	4603      	mov	r3, r0
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800daf2:	4413      	add	r3, r2
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00e      	beq.n	800db24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10a      	bne.n	800db24 <tcp_enqueue_flags+0x1b0>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <tcp_enqueue_flags+0x1b0>
 800db16:	4b06      	ldr	r3, [pc, #24]	; (800db30 <tcp_enqueue_flags+0x1bc>)
 800db18:	f240 4265 	movw	r2, #1125	; 0x465
 800db1c:	490b      	ldr	r1, [pc, #44]	; (800db4c <tcp_enqueue_flags+0x1d8>)
 800db1e:	4806      	ldr	r0, [pc, #24]	; (800db38 <tcp_enqueue_flags+0x1c4>)
 800db20:	f003 fe70 	bl	8011804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3720      	adds	r7, #32
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	080150dc 	.word	0x080150dc
 800db34:	08015500 	.word	0x08015500
 800db38:	08015130 	.word	0x08015130
 800db3c:	08015558 	.word	0x08015558
 800db40:	08015578 	.word	0x08015578
 800db44:	080155b4 	.word	0x080155b4
 800db48:	080155cc 	.word	0x080155cc
 800db4c:	080155f8 	.word	0x080155f8

0800db50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800db50:	b5b0      	push	{r4, r5, r7, lr}
 800db52:	b08a      	sub	sp, #40	; 0x28
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d106      	bne.n	800db6c <tcp_output+0x1c>
 800db5e:	4b9e      	ldr	r3, [pc, #632]	; (800ddd8 <tcp_output+0x288>)
 800db60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800db64:	499d      	ldr	r1, [pc, #628]	; (800dddc <tcp_output+0x28c>)
 800db66:	489e      	ldr	r0, [pc, #632]	; (800dde0 <tcp_output+0x290>)
 800db68:	f003 fe4c 	bl	8011804 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	7d1b      	ldrb	r3, [r3, #20]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d106      	bne.n	800db82 <tcp_output+0x32>
 800db74:	4b98      	ldr	r3, [pc, #608]	; (800ddd8 <tcp_output+0x288>)
 800db76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800db7a:	499a      	ldr	r1, [pc, #616]	; (800dde4 <tcp_output+0x294>)
 800db7c:	4898      	ldr	r0, [pc, #608]	; (800dde0 <tcp_output+0x290>)
 800db7e:	f003 fe41 	bl	8011804 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800db82:	4b99      	ldr	r3, [pc, #612]	; (800dde8 <tcp_output+0x298>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d101      	bne.n	800db90 <tcp_output+0x40>
    return ERR_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e1ce      	b.n	800df2e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db9c:	4293      	cmp	r3, r2
 800db9e:	bf28      	it	cs
 800dba0:	4613      	movcs	r3, r2
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	8b5b      	ldrh	r3, [r3, #26]
 800dbb6:	f003 0302 	and.w	r3, r3, #2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 81aa 	beq.w	800df14 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fdcb 	bl	800e75c <tcp_send_empty_ack>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	e1b1      	b.n	800df2e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7ff f824 	bl	800cc20 <tcp_route>
 800dbd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d102      	bne.n	800dbe6 <tcp_output+0x96>
    return ERR_RTE;
 800dbe0:	f06f 0303 	mvn.w	r3, #3
 800dbe4:	e1a3      	b.n	800df2e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d003      	beq.n	800dbf4 <tcp_output+0xa4>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d111      	bne.n	800dc18 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d002      	beq.n	800dc00 <tcp_output+0xb0>
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	3304      	adds	r3, #4
 800dbfe:	e000      	b.n	800dc02 <tcp_output+0xb2>
 800dc00:	2300      	movs	r3, #0
 800dc02:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d102      	bne.n	800dc10 <tcp_output+0xc0>
      return ERR_RTE;
 800dc0a:	f06f 0303 	mvn.w	r3, #3
 800dc0e:	e18e      	b.n	800df2e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7f9 f8a7 	bl	8006d72 <lwip_htonl>
 800dc24:	4602      	mov	r2, r0
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc2e:	8912      	ldrh	r2, [r2, #8]
 800dc30:	4413      	add	r3, r2
 800dc32:	69ba      	ldr	r2, [r7, #24]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d227      	bcs.n	800dc88 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc3e:	461a      	mov	r2, r3
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d114      	bne.n	800dc70 <tcp_output+0x120>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d110      	bne.n	800dc70 <tcp_output+0x120>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10b      	bne.n	800dc70 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	8b5b      	ldrh	r3, [r3, #26]
 800dc74:	f003 0302 	and.w	r3, r3, #2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 814d 	beq.w	800df18 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fd6c 	bl	800e75c <tcp_send_empty_ack>
 800dc84:	4603      	mov	r3, r0
 800dc86:	e152      	b.n	800df2e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc94:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 811c 	beq.w	800ded6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dc9e:	e002      	b.n	800dca6 <tcp_output+0x156>
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	623b      	str	r3, [r7, #32]
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1f8      	bne.n	800dca0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dcae:	e112      	b.n	800ded6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	899b      	ldrh	r3, [r3, #12]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f9 f845 	bl	8006d48 <lwip_htons>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	f003 0304 	and.w	r3, r3, #4
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d006      	beq.n	800dcd8 <tcp_output+0x188>
 800dcca:	4b43      	ldr	r3, [pc, #268]	; (800ddd8 <tcp_output+0x288>)
 800dccc:	f240 5236 	movw	r2, #1334	; 0x536
 800dcd0:	4946      	ldr	r1, [pc, #280]	; (800ddec <tcp_output+0x29c>)
 800dcd2:	4843      	ldr	r0, [pc, #268]	; (800dde0 <tcp_output+0x290>)
 800dcd4:	f003 fd96 	bl	8011804 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01f      	beq.n	800dd20 <tcp_output+0x1d0>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8b5b      	ldrh	r3, [r3, #26]
 800dce4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d119      	bne.n	800dd20 <tcp_output+0x1d0>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00b      	beq.n	800dd0c <tcp_output+0x1bc>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d110      	bne.n	800dd20 <tcp_output+0x1d0>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd02:	891a      	ldrh	r2, [r3, #8]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d209      	bcs.n	800dd20 <tcp_output+0x1d0>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d004      	beq.n	800dd20 <tcp_output+0x1d0>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d901      	bls.n	800dd24 <tcp_output+0x1d4>
 800dd20:	2301      	movs	r3, #1
 800dd22:	e000      	b.n	800dd26 <tcp_output+0x1d6>
 800dd24:	2300      	movs	r3, #0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8b5b      	ldrh	r3, [r3, #26]
 800dd2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f000 80e4 	beq.w	800df00 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7d1b      	ldrb	r3, [r3, #20]
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d00d      	beq.n	800dd5c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	899b      	ldrh	r3, [r3, #12]
 800dd46:	b29c      	uxth	r4, r3
 800dd48:	2010      	movs	r0, #16
 800dd4a:	f7f8 fffd 	bl	8006d48 <lwip_htons>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	461a      	mov	r2, r3
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	4322      	orrs	r2, r4
 800dd58:	b292      	uxth	r2, r2
 800dd5a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd62:	f000 f909 	bl	800df78 <tcp_output_segment>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dd6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d009      	beq.n	800dd86 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	8b5b      	ldrh	r3, [r3, #26]
 800dd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	835a      	strh	r2, [r3, #26]
      return err;
 800dd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd84:	e0d3      	b.n	800df2e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	7d1b      	ldrb	r3, [r3, #20]
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d006      	beq.n	800dda4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8b5b      	ldrh	r3, [r3, #26]
 800dd9a:	f023 0303 	bic.w	r3, r3, #3
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7f8 ffe1 	bl	8006d72 <lwip_htonl>
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	891b      	ldrh	r3, [r3, #8]
 800ddb6:	461d      	mov	r5, r3
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	899b      	ldrh	r3, [r3, #12]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7f8 ffc1 	bl	8006d48 <lwip_htons>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 0303 	and.w	r3, r3, #3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <tcp_output+0x2a0>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e00d      	b.n	800ddf2 <tcp_output+0x2a2>
 800ddd6:	bf00      	nop
 800ddd8:	080150dc 	.word	0x080150dc
 800dddc:	08015620 	.word	0x08015620
 800dde0:	08015130 	.word	0x08015130
 800dde4:	08015638 	.word	0x08015638
 800dde8:	200174f8 	.word	0x200174f8
 800ddec:	08015660 	.word	0x08015660
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	442b      	add	r3, r5
 800ddf4:	4423      	add	r3, r4
 800ddf6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	2b00      	cmp	r3, #0
 800de02:	da02      	bge.n	800de0a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	891b      	ldrh	r3, [r3, #8]
 800de0e:	461c      	mov	r4, r3
 800de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	899b      	ldrh	r3, [r3, #12]
 800de16:	b29b      	uxth	r3, r3
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f8 ff95 	bl	8006d48 <lwip_htons>
 800de1e:	4603      	mov	r3, r0
 800de20:	b2db      	uxtb	r3, r3
 800de22:	f003 0303 	and.w	r3, r3, #3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <tcp_output+0x2de>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <tcp_output+0x2e0>
 800de2e:	2300      	movs	r3, #0
 800de30:	4423      	add	r3, r4
 800de32:	2b00      	cmp	r3, #0
 800de34:	d049      	beq.n	800deca <tcp_output+0x37a>
      seg->next = NULL;
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de40:	2b00      	cmp	r3, #0
 800de42:	d105      	bne.n	800de50 <tcp_output+0x300>
        pcb->unacked = seg;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de48:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	623b      	str	r3, [r7, #32]
 800de4e:	e03f      	b.n	800ded0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	4618      	mov	r0, r3
 800de58:	f7f8 ff8b 	bl	8006d72 <lwip_htonl>
 800de5c:	4604      	mov	r4, r0
 800de5e:	6a3b      	ldr	r3, [r7, #32]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	f7f8 ff84 	bl	8006d72 <lwip_htonl>
 800de6a:	4603      	mov	r3, r0
 800de6c:	1ae3      	subs	r3, r4, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	da24      	bge.n	800debc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	3370      	adds	r3, #112	; 0x70
 800de76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800de78:	e002      	b.n	800de80 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d011      	beq.n	800deac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4618      	mov	r0, r3
 800de92:	f7f8 ff6e 	bl	8006d72 <lwip_htonl>
 800de96:	4604      	mov	r4, r0
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f8 ff67 	bl	8006d72 <lwip_htonl>
 800dea4:	4603      	mov	r3, r0
 800dea6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dbe6      	blt.n	800de7a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	e009      	b.n	800ded0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	623b      	str	r3, [r7, #32]
 800dec8:	e002      	b.n	800ded0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800deca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800decc:	f7fb feff 	bl	8009cce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d012      	beq.n	800df02 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f8 ff45 	bl	8006d72 <lwip_htonl>
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def2:	8912      	ldrh	r2, [r2, #8]
 800def4:	4413      	add	r3, r2
  while (seg != NULL &&
 800def6:	69ba      	ldr	r2, [r7, #24]
 800def8:	429a      	cmp	r2, r3
 800defa:	f4bf aed9 	bcs.w	800dcb0 <tcp_output+0x160>
 800defe:	e000      	b.n	800df02 <tcp_output+0x3b2>
      break;
 800df00:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df06:	2b00      	cmp	r3, #0
 800df08:	d108      	bne.n	800df1c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800df12:	e004      	b.n	800df1e <tcp_output+0x3ce>
    goto output_done;
 800df14:	bf00      	nop
 800df16:	e002      	b.n	800df1e <tcp_output+0x3ce>
    goto output_done;
 800df18:	bf00      	nop
 800df1a:	e000      	b.n	800df1e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800df1c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	8b5b      	ldrh	r3, [r3, #26]
 800df22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df26:	b29a      	uxth	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3728      	adds	r7, #40	; 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bdb0      	pop	{r4, r5, r7, pc}
 800df36:	bf00      	nop

0800df38 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d106      	bne.n	800df54 <tcp_output_segment_busy+0x1c>
 800df46:	4b09      	ldr	r3, [pc, #36]	; (800df6c <tcp_output_segment_busy+0x34>)
 800df48:	f240 529a 	movw	r2, #1434	; 0x59a
 800df4c:	4908      	ldr	r1, [pc, #32]	; (800df70 <tcp_output_segment_busy+0x38>)
 800df4e:	4809      	ldr	r0, [pc, #36]	; (800df74 <tcp_output_segment_busy+0x3c>)
 800df50:	f003 fc58 	bl	8011804 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	7b9b      	ldrb	r3, [r3, #14]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d001      	beq.n	800df62 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800df5e:	2301      	movs	r3, #1
 800df60:	e000      	b.n	800df64 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	080150dc 	.word	0x080150dc
 800df70:	08015678 	.word	0x08015678
 800df74:	08015130 	.word	0x08015130

0800df78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800df78:	b5b0      	push	{r4, r5, r7, lr}
 800df7a:	b08c      	sub	sp, #48	; 0x30
 800df7c:	af04      	add	r7, sp, #16
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <tcp_output_segment+0x20>
 800df8a:	4b63      	ldr	r3, [pc, #396]	; (800e118 <tcp_output_segment+0x1a0>)
 800df8c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800df90:	4962      	ldr	r1, [pc, #392]	; (800e11c <tcp_output_segment+0x1a4>)
 800df92:	4863      	ldr	r0, [pc, #396]	; (800e120 <tcp_output_segment+0x1a8>)
 800df94:	f003 fc36 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <tcp_output_segment+0x34>
 800df9e:	4b5e      	ldr	r3, [pc, #376]	; (800e118 <tcp_output_segment+0x1a0>)
 800dfa0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dfa4:	495f      	ldr	r1, [pc, #380]	; (800e124 <tcp_output_segment+0x1ac>)
 800dfa6:	485e      	ldr	r0, [pc, #376]	; (800e120 <tcp_output_segment+0x1a8>)
 800dfa8:	f003 fc2c 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <tcp_output_segment+0x48>
 800dfb2:	4b59      	ldr	r3, [pc, #356]	; (800e118 <tcp_output_segment+0x1a0>)
 800dfb4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dfb8:	495b      	ldr	r1, [pc, #364]	; (800e128 <tcp_output_segment+0x1b0>)
 800dfba:	4859      	ldr	r0, [pc, #356]	; (800e120 <tcp_output_segment+0x1a8>)
 800dfbc:	f003 fc22 	bl	8011804 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7ff ffb9 	bl	800df38 <tcp_output_segment_busy>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e09f      	b.n	800e110 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	68dc      	ldr	r4, [r3, #12]
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7f8 feca 	bl	8006d72 <lwip_htonl>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	68dc      	ldr	r4, [r3, #12]
 800dfea:	4610      	mov	r0, r2
 800dfec:	f7f8 feac 	bl	8006d48 <lwip_htons>
 800dff0:	4603      	mov	r3, r0
 800dff2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dffc:	441a      	add	r2, r3
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	3314      	adds	r3, #20
 800e008:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	7a9b      	ldrb	r3, [r3, #10]
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	2b00      	cmp	r3, #0
 800e014:	d015      	beq.n	800e042 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	3304      	adds	r3, #4
 800e01a:	461a      	mov	r2, r3
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e022:	f7fc fa37 	bl	800a494 <tcp_eff_send_mss_netif>
 800e026:	4603      	mov	r3, r0
 800e028:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e02a:	8b7b      	ldrh	r3, [r7, #26]
 800e02c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e030:	4618      	mov	r0, r3
 800e032:	f7f8 fe9e 	bl	8006d72 <lwip_htonl>
 800e036:	4602      	mov	r2, r0
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	3304      	adds	r3, #4
 800e040:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e048:	2b00      	cmp	r3, #0
 800e04a:	da02      	bge.n	800e052 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	2200      	movs	r2, #0
 800e050:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10c      	bne.n	800e074 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e05a:	4b34      	ldr	r3, [pc, #208]	; (800e12c <tcp_output_segment+0x1b4>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7f8 fe82 	bl	8006d72 <lwip_htonl>
 800e06e:	4602      	mov	r2, r0
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68da      	ldr	r2, [r3, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	8959      	ldrh	r1, [r3, #10]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	8b3a      	ldrh	r2, [r7, #24]
 800e08e:	1a8a      	subs	r2, r1, r2
 800e090:	b292      	uxth	r2, r2
 800e092:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	8919      	ldrh	r1, [r3, #8]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	8b3a      	ldrh	r2, [r7, #24]
 800e0a0:	1a8a      	subs	r2, r1, r2
 800e0a2:	b292      	uxth	r2, r2
 800e0a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	68d2      	ldr	r2, [r2, #12]
 800e0ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	741a      	strb	r2, [r3, #16]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f103 0214 	add.w	r2, r3, #20
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	7a9b      	ldrb	r3, [r3, #10]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	f003 0304 	and.w	r3, r3, #4
 800e0ce:	4413      	add	r3, r2
 800e0d0:	69fa      	ldr	r2, [r7, #28]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d006      	beq.n	800e0e4 <tcp_output_segment+0x16c>
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <tcp_output_segment+0x1a0>)
 800e0d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800e0dc:	4914      	ldr	r1, [pc, #80]	; (800e130 <tcp_output_segment+0x1b8>)
 800e0de:	4810      	ldr	r0, [pc, #64]	; (800e120 <tcp_output_segment+0x1a8>)
 800e0e0:	f003 fb90 	bl	8011804 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6858      	ldr	r0, [r3, #4]
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	1d1c      	adds	r4, r3, #4
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	7add      	ldrb	r5, [r3, #11]
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	7a9b      	ldrb	r3, [r3, #10]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	9202      	str	r2, [sp, #8]
 800e0fa:	2206      	movs	r2, #6
 800e0fc:	9201      	str	r2, [sp, #4]
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	462b      	mov	r3, r5
 800e102:	4622      	mov	r2, r4
 800e104:	f002 fa36 	bl	8010574 <ip4_output_if>
 800e108:	4603      	mov	r3, r0
 800e10a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e10c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3720      	adds	r7, #32
 800e114:	46bd      	mov	sp, r7
 800e116:	bdb0      	pop	{r4, r5, r7, pc}
 800e118:	080150dc 	.word	0x080150dc
 800e11c:	080156a0 	.word	0x080156a0
 800e120:	08015130 	.word	0x08015130
 800e124:	080156c0 	.word	0x080156c0
 800e128:	080156e0 	.word	0x080156e0
 800e12c:	200174e8 	.word	0x200174e8
 800e130:	08015704 	.word	0x08015704

0800e134 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e134:	b5b0      	push	{r4, r5, r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <tcp_rexmit_rto_prepare+0x1c>
 800e142:	4b31      	ldr	r3, [pc, #196]	; (800e208 <tcp_rexmit_rto_prepare+0xd4>)
 800e144:	f240 6263 	movw	r2, #1635	; 0x663
 800e148:	4930      	ldr	r1, [pc, #192]	; (800e20c <tcp_rexmit_rto_prepare+0xd8>)
 800e14a:	4831      	ldr	r0, [pc, #196]	; (800e210 <tcp_rexmit_rto_prepare+0xdc>)
 800e14c:	f003 fb5a 	bl	8011804 <iprintf>

  if (pcb->unacked == NULL) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e158:	f06f 0305 	mvn.w	r3, #5
 800e15c:	e050      	b.n	800e200 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e162:	60fb      	str	r3, [r7, #12]
 800e164:	e00b      	b.n	800e17e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff fee6 	bl	800df38 <tcp_output_segment_busy>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e172:	f06f 0305 	mvn.w	r3, #5
 800e176:	e043      	b.n	800e200 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1ef      	bne.n	800e166 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7ff fed6 	bl	800df38 <tcp_output_segment_busy>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e192:	f06f 0305 	mvn.w	r3, #5
 800e196:	e033      	b.n	800e200 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8b5b      	ldrh	r3, [r3, #26]
 800e1b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7f8 fdd5 	bl	8006d72 <lwip_htonl>
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	891b      	ldrh	r3, [r3, #8]
 800e1ce:	461d      	mov	r5, r3
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	899b      	ldrh	r3, [r3, #12]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f8 fdb5 	bl	8006d48 <lwip_htons>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	f003 0303 	and.w	r3, r3, #3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <tcp_rexmit_rto_prepare+0xba>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e000      	b.n	800e1f0 <tcp_rexmit_rto_prepare+0xbc>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	442b      	add	r3, r5
 800e1f2:	18e2      	adds	r2, r4, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bdb0      	pop	{r4, r5, r7, pc}
 800e208:	080150dc 	.word	0x080150dc
 800e20c:	08015718 	.word	0x08015718
 800e210:	08015130 	.word	0x08015130

0800e214 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <tcp_rexmit_rto_commit+0x1c>
 800e222:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <tcp_rexmit_rto_commit+0x44>)
 800e224:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e228:	490c      	ldr	r1, [pc, #48]	; (800e25c <tcp_rexmit_rto_commit+0x48>)
 800e22a:	480d      	ldr	r0, [pc, #52]	; (800e260 <tcp_rexmit_rto_commit+0x4c>)
 800e22c:	f003 faea 	bl	8011804 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e236:	2bff      	cmp	r3, #255	; 0xff
 800e238:	d007      	beq.n	800e24a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e240:	3301      	adds	r3, #1
 800e242:	b2da      	uxtb	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff fc80 	bl	800db50 <tcp_output>
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	080150dc 	.word	0x080150dc
 800e25c:	0801573c 	.word	0x0801573c
 800e260:	08015130 	.word	0x08015130

0800e264 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d106      	bne.n	800e280 <tcp_rexmit_rto+0x1c>
 800e272:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <tcp_rexmit_rto+0x38>)
 800e274:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e278:	4909      	ldr	r1, [pc, #36]	; (800e2a0 <tcp_rexmit_rto+0x3c>)
 800e27a:	480a      	ldr	r0, [pc, #40]	; (800e2a4 <tcp_rexmit_rto+0x40>)
 800e27c:	f003 fac2 	bl	8011804 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ff57 	bl	800e134 <tcp_rexmit_rto_prepare>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d102      	bne.n	800e292 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7ff ffc1 	bl	800e214 <tcp_rexmit_rto_commit>
  }
}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	080150dc 	.word	0x080150dc
 800e2a0:	08015760 	.word	0x08015760
 800e2a4:	08015130 	.word	0x08015130

0800e2a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e2a8:	b590      	push	{r4, r7, lr}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <tcp_rexmit+0x1c>
 800e2b6:	4b2f      	ldr	r3, [pc, #188]	; (800e374 <tcp_rexmit+0xcc>)
 800e2b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e2bc:	492e      	ldr	r1, [pc, #184]	; (800e378 <tcp_rexmit+0xd0>)
 800e2be:	482f      	ldr	r0, [pc, #188]	; (800e37c <tcp_rexmit+0xd4>)
 800e2c0:	f003 faa0 	bl	8011804 <iprintf>

  if (pcb->unacked == NULL) {
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e2cc:	f06f 0305 	mvn.w	r3, #5
 800e2d0:	e04c      	b.n	800e36c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f7ff fe2d 	bl	800df38 <tcp_output_segment_busy>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e2e4:	f06f 0305 	mvn.w	r3, #5
 800e2e8:	e040      	b.n	800e36c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	336c      	adds	r3, #108	; 0x6c
 800e2f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e2f8:	e002      	b.n	800e300 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d011      	beq.n	800e32c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4618      	mov	r0, r3
 800e312:	f7f8 fd2e 	bl	8006d72 <lwip_htonl>
 800e316:	4604      	mov	r4, r0
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4618      	mov	r0, r3
 800e320:	f7f8 fd27 	bl	8006d72 <lwip_htonl>
 800e324:	4603      	mov	r3, r0
 800e326:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e328:	2b00      	cmp	r3, #0
 800e32a:	dbe6      	blt.n	800e2fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d103      	bne.n	800e34a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e350:	2bff      	cmp	r3, #255	; 0xff
 800e352:	d007      	beq.n	800e364 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e35a:	3301      	adds	r3, #1
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	bd90      	pop	{r4, r7, pc}
 800e374:	080150dc 	.word	0x080150dc
 800e378:	0801577c 	.word	0x0801577c
 800e37c:	08015130 	.word	0x08015130

0800e380 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <tcp_rexmit_fast+0x1c>
 800e38e:	4b2a      	ldr	r3, [pc, #168]	; (800e438 <tcp_rexmit_fast+0xb8>)
 800e390:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e394:	4929      	ldr	r1, [pc, #164]	; (800e43c <tcp_rexmit_fast+0xbc>)
 800e396:	482a      	ldr	r0, [pc, #168]	; (800e440 <tcp_rexmit_fast+0xc0>)
 800e398:	f003 fa34 	bl	8011804 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d044      	beq.n	800e42e <tcp_rexmit_fast+0xae>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	8b5b      	ldrh	r3, [r3, #26]
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d13e      	bne.n	800e42e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ff79 	bl	800e2a8 <tcp_rexmit>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d138      	bne.n	800e42e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	bf28      	it	cs
 800e3cc:	4613      	movcs	r3, r2
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	0fda      	lsrs	r2, r3, #31
 800e3d2:	4413      	add	r3, r2
 800e3d4:	105b      	asrs	r3, r3, #1
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d206      	bcs.n	800e3fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f4:	005b      	lsls	r3, r3, #1
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e408:	4619      	mov	r1, r3
 800e40a:	0049      	lsls	r1, r1, #1
 800e40c:	440b      	add	r3, r1
 800e40e:	b29b      	uxth	r3, r3
 800e410:	4413      	add	r3, r2
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	8b5b      	ldrh	r3, [r3, #26]
 800e41e:	f043 0304 	orr.w	r3, r3, #4
 800e422:	b29a      	uxth	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	080150dc 	.word	0x080150dc
 800e43c:	08015794 	.word	0x08015794
 800e440:	08015130 	.word	0x08015130

0800e444 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	607b      	str	r3, [r7, #4]
 800e44e:	460b      	mov	r3, r1
 800e450:	817b      	strh	r3, [r7, #10]
 800e452:	4613      	mov	r3, r2
 800e454:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e456:	897a      	ldrh	r2, [r7, #10]
 800e458:	893b      	ldrh	r3, [r7, #8]
 800e45a:	4413      	add	r3, r2
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	3314      	adds	r3, #20
 800e460:	b29b      	uxth	r3, r3
 800e462:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e466:	4619      	mov	r1, r3
 800e468:	2022      	movs	r0, #34	; 0x22
 800e46a:	f7f9 fd1b 	bl	8007ea4 <pbuf_alloc>
 800e46e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d04d      	beq.n	800e512 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e476:	897b      	ldrh	r3, [r7, #10]
 800e478:	3313      	adds	r3, #19
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	8952      	ldrh	r2, [r2, #10]
 800e47e:	4293      	cmp	r3, r2
 800e480:	db06      	blt.n	800e490 <tcp_output_alloc_header_common+0x4c>
 800e482:	4b26      	ldr	r3, [pc, #152]	; (800e51c <tcp_output_alloc_header_common+0xd8>)
 800e484:	f240 7223 	movw	r2, #1827	; 0x723
 800e488:	4925      	ldr	r1, [pc, #148]	; (800e520 <tcp_output_alloc_header_common+0xdc>)
 800e48a:	4826      	ldr	r0, [pc, #152]	; (800e524 <tcp_output_alloc_header_common+0xe0>)
 800e48c:	f003 f9ba 	bl	8011804 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e496:	8c3b      	ldrh	r3, [r7, #32]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f8 fc55 	bl	8006d48 <lwip_htons>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e4a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7f8 fc4d 	bl	8006d48 <lwip_htons>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7f8 fc58 	bl	8006d72 <lwip_htonl>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e4c8:	897b      	ldrh	r3, [r7, #10]
 800e4ca:	089b      	lsrs	r3, r3, #2
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	3305      	adds	r3, #5
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	031b      	lsls	r3, r3, #12
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f8 fc31 	bl	8006d48 <lwip_htons>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e4ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f8 fc29 	bl	8006d48 <lwip_htons>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	2200      	movs	r2, #0
 800e502:	741a      	strb	r2, [r3, #16]
 800e504:	2200      	movs	r2, #0
 800e506:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	2200      	movs	r2, #0
 800e50c:	749a      	strb	r2, [r3, #18]
 800e50e:	2200      	movs	r2, #0
 800e510:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e512:	697b      	ldr	r3, [r7, #20]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	080150dc 	.word	0x080150dc
 800e520:	080157b4 	.word	0x080157b4
 800e524:	08015130 	.word	0x08015130

0800e528 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e528:	b5b0      	push	{r4, r5, r7, lr}
 800e52a:	b08a      	sub	sp, #40	; 0x28
 800e52c:	af04      	add	r7, sp, #16
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	607b      	str	r3, [r7, #4]
 800e532:	460b      	mov	r3, r1
 800e534:	817b      	strh	r3, [r7, #10]
 800e536:	4613      	mov	r3, r2
 800e538:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <tcp_output_alloc_header+0x26>
 800e540:	4b15      	ldr	r3, [pc, #84]	; (800e598 <tcp_output_alloc_header+0x70>)
 800e542:	f240 7242 	movw	r2, #1858	; 0x742
 800e546:	4915      	ldr	r1, [pc, #84]	; (800e59c <tcp_output_alloc_header+0x74>)
 800e548:	4815      	ldr	r0, [pc, #84]	; (800e5a0 <tcp_output_alloc_header+0x78>)
 800e54a:	f003 f95b 	bl	8011804 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	8adb      	ldrh	r3, [r3, #22]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	8b12      	ldrh	r2, [r2, #24]
 800e55a:	68f9      	ldr	r1, [r7, #12]
 800e55c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e55e:	893d      	ldrh	r5, [r7, #8]
 800e560:	897c      	ldrh	r4, [r7, #10]
 800e562:	9103      	str	r1, [sp, #12]
 800e564:	2110      	movs	r1, #16
 800e566:	9102      	str	r1, [sp, #8]
 800e568:	9201      	str	r2, [sp, #4]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	462a      	mov	r2, r5
 800e570:	4621      	mov	r1, r4
 800e572:	f7ff ff67 	bl	800e444 <tcp_output_alloc_header_common>
 800e576:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d006      	beq.n	800e58c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e586:	441a      	add	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e58c:	697b      	ldr	r3, [r7, #20]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3718      	adds	r7, #24
 800e592:	46bd      	mov	sp, r7
 800e594:	bdb0      	pop	{r4, r5, r7, pc}
 800e596:	bf00      	nop
 800e598:	080150dc 	.word	0x080150dc
 800e59c:	080157e4 	.word	0x080157e4
 800e5a0:	08015130 	.word	0x08015130

0800e5a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	71fb      	strb	r3, [r7, #7]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <tcp_output_fill_options+0x2e>
 800e5c4:	4b13      	ldr	r3, [pc, #76]	; (800e614 <tcp_output_fill_options+0x70>)
 800e5c6:	f240 7256 	movw	r2, #1878	; 0x756
 800e5ca:	4913      	ldr	r1, [pc, #76]	; (800e618 <tcp_output_fill_options+0x74>)
 800e5cc:	4813      	ldr	r0, [pc, #76]	; (800e61c <tcp_output_fill_options+0x78>)
 800e5ce:	f003 f919 	bl	8011804 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	3314      	adds	r3, #20
 800e5dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	f103 0214 	add.w	r2, r3, #20
 800e5e4:	8bfb      	ldrh	r3, [r7, #30]
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	f003 0304 	and.w	r3, r3, #4
 800e5f2:	440b      	add	r3, r1
 800e5f4:	4413      	add	r3, r2
 800e5f6:	697a      	ldr	r2, [r7, #20]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d006      	beq.n	800e60a <tcp_output_fill_options+0x66>
 800e5fc:	4b05      	ldr	r3, [pc, #20]	; (800e614 <tcp_output_fill_options+0x70>)
 800e5fe:	f240 7275 	movw	r2, #1909	; 0x775
 800e602:	4907      	ldr	r1, [pc, #28]	; (800e620 <tcp_output_fill_options+0x7c>)
 800e604:	4805      	ldr	r0, [pc, #20]	; (800e61c <tcp_output_fill_options+0x78>)
 800e606:	f003 f8fd 	bl	8011804 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e60a:	bf00      	nop
 800e60c:	3720      	adds	r7, #32
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	080150dc 	.word	0x080150dc
 800e618:	0801580c 	.word	0x0801580c
 800e61c:	08015130 	.word	0x08015130
 800e620:	08015704 	.word	0x08015704

0800e624 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08a      	sub	sp, #40	; 0x28
 800e628:	af04      	add	r7, sp, #16
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
 800e630:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d106      	bne.n	800e646 <tcp_output_control_segment+0x22>
 800e638:	4b1c      	ldr	r3, [pc, #112]	; (800e6ac <tcp_output_control_segment+0x88>)
 800e63a:	f240 7287 	movw	r2, #1927	; 0x787
 800e63e:	491c      	ldr	r1, [pc, #112]	; (800e6b0 <tcp_output_control_segment+0x8c>)
 800e640:	481c      	ldr	r0, [pc, #112]	; (800e6b4 <tcp_output_control_segment+0x90>)
 800e642:	f003 f8df 	bl	8011804 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f7fe fae8 	bl	800cc20 <tcp_route>
 800e650:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d102      	bne.n	800e65e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e658:	23fc      	movs	r3, #252	; 0xfc
 800e65a:	75fb      	strb	r3, [r7, #23]
 800e65c:	e01c      	b.n	800e698 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	7adb      	ldrb	r3, [r3, #11]
 800e668:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	7a9b      	ldrb	r3, [r3, #10]
 800e66e:	757b      	strb	r3, [r7, #21]
 800e670:	e003      	b.n	800e67a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e672:	23ff      	movs	r3, #255	; 0xff
 800e674:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e67a:	7dba      	ldrb	r2, [r7, #22]
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	9302      	str	r3, [sp, #8]
 800e680:	2306      	movs	r3, #6
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	7d7b      	ldrb	r3, [r7, #21]
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	4613      	mov	r3, r2
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	6879      	ldr	r1, [r7, #4]
 800e68e:	68b8      	ldr	r0, [r7, #8]
 800e690:	f001 ff70 	bl	8010574 <ip4_output_if>
 800e694:	4603      	mov	r3, r0
 800e696:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e698:	68b8      	ldr	r0, [r7, #8]
 800e69a:	f7f9 feeb 	bl	8008474 <pbuf_free>
  return err;
 800e69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3718      	adds	r7, #24
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	080150dc 	.word	0x080150dc
 800e6b0:	08015834 	.word	0x08015834
 800e6b4:	08015130 	.word	0x08015130

0800e6b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b08b      	sub	sp, #44	; 0x2c
 800e6bc:	af04      	add	r7, sp, #16
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d106      	bne.n	800e6da <tcp_rst+0x22>
 800e6cc:	4b1f      	ldr	r3, [pc, #124]	; (800e74c <tcp_rst+0x94>)
 800e6ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e6d2:	491f      	ldr	r1, [pc, #124]	; (800e750 <tcp_rst+0x98>)
 800e6d4:	481f      	ldr	r0, [pc, #124]	; (800e754 <tcp_rst+0x9c>)
 800e6d6:	f003 f895 	bl	8011804 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d106      	bne.n	800e6ee <tcp_rst+0x36>
 800e6e0:	4b1a      	ldr	r3, [pc, #104]	; (800e74c <tcp_rst+0x94>)
 800e6e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e6e6:	491c      	ldr	r1, [pc, #112]	; (800e758 <tcp_rst+0xa0>)
 800e6e8:	481a      	ldr	r0, [pc, #104]	; (800e754 <tcp_rst+0x9c>)
 800e6ea:	f003 f88b 	bl	8011804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e6f2:	f246 0308 	movw	r3, #24584	; 0x6008
 800e6f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	b29c      	uxth	r4, r3
 800e6fc:	68b8      	ldr	r0, [r7, #8]
 800e6fe:	f7f8 fb38 	bl	8006d72 <lwip_htonl>
 800e702:	4602      	mov	r2, r0
 800e704:	8abb      	ldrh	r3, [r7, #20]
 800e706:	9303      	str	r3, [sp, #12]
 800e708:	2314      	movs	r3, #20
 800e70a:	9302      	str	r3, [sp, #8]
 800e70c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e70e:	9301      	str	r3, [sp, #4]
 800e710:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	4613      	mov	r3, r2
 800e716:	2200      	movs	r2, #0
 800e718:	4621      	mov	r1, r4
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff fe92 	bl	800e444 <tcp_output_alloc_header_common>
 800e720:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00c      	beq.n	800e742 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	2200      	movs	r2, #0
 800e72c:	6939      	ldr	r1, [r7, #16]
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f7ff ff38 	bl	800e5a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	6939      	ldr	r1, [r7, #16]
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7ff ff72 	bl	800e624 <tcp_output_control_segment>
 800e740:	e000      	b.n	800e744 <tcp_rst+0x8c>
    return;
 800e742:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	080150dc 	.word	0x080150dc
 800e750:	08015860 	.word	0x08015860
 800e754:	08015130 	.word	0x08015130
 800e758:	0801587c 	.word	0x0801587c

0800e75c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e764:	2300      	movs	r3, #0
 800e766:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e768:	2300      	movs	r3, #0
 800e76a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <tcp_send_empty_ack+0x24>
 800e772:	4b28      	ldr	r3, [pc, #160]	; (800e814 <tcp_send_empty_ack+0xb8>)
 800e774:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e778:	4927      	ldr	r1, [pc, #156]	; (800e818 <tcp_send_empty_ack+0xbc>)
 800e77a:	4828      	ldr	r0, [pc, #160]	; (800e81c <tcp_send_empty_ack+0xc0>)
 800e77c:	f003 f842 	bl	8011804 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	b2db      	uxtb	r3, r3
 800e786:	f003 0304 	and.w	r3, r3, #4
 800e78a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e78c:	7d7b      	ldrb	r3, [r7, #21]
 800e78e:	b29c      	uxth	r4, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e794:	4618      	mov	r0, r3
 800e796:	f7f8 faec 	bl	8006d72 <lwip_htonl>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2200      	movs	r2, #0
 800e79e:	4621      	mov	r1, r4
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff fec1 	bl	800e528 <tcp_output_alloc_header>
 800e7a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d109      	bne.n	800e7c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	8b5b      	ldrh	r3, [r3, #26]
 800e7b2:	f043 0303 	orr.w	r3, r3, #3
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e7bc:	f06f 0301 	mvn.w	r3, #1
 800e7c0:	e023      	b.n	800e80a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e7c2:	7dbb      	ldrb	r3, [r7, #22]
 800e7c4:	7dfa      	ldrb	r2, [r7, #23]
 800e7c6:	6939      	ldr	r1, [r7, #16]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff feeb 	bl	800e5a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	6939      	ldr	r1, [r7, #16]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff ff24 	bl	800e624 <tcp_output_control_segment>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d007      	beq.n	800e7f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8b5b      	ldrh	r3, [r3, #26]
 800e7ec:	f043 0303 	orr.w	r3, r3, #3
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	835a      	strh	r2, [r3, #26]
 800e7f6:	e006      	b.n	800e806 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	8b5b      	ldrh	r3, [r3, #26]
 800e7fc:	f023 0303 	bic.w	r3, r3, #3
 800e800:	b29a      	uxth	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e806:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	371c      	adds	r7, #28
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd90      	pop	{r4, r7, pc}
 800e812:	bf00      	nop
 800e814:	080150dc 	.word	0x080150dc
 800e818:	08015898 	.word	0x08015898
 800e81c:	08015130 	.word	0x08015130

0800e820 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e828:	2300      	movs	r3, #0
 800e82a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <tcp_keepalive+0x20>
 800e832:	4b18      	ldr	r3, [pc, #96]	; (800e894 <tcp_keepalive+0x74>)
 800e834:	f640 0224 	movw	r2, #2084	; 0x824
 800e838:	4917      	ldr	r1, [pc, #92]	; (800e898 <tcp_keepalive+0x78>)
 800e83a:	4818      	ldr	r0, [pc, #96]	; (800e89c <tcp_keepalive+0x7c>)
 800e83c:	f002 ffe2 	bl	8011804 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	b29c      	uxth	r4, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e848:	3b01      	subs	r3, #1
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7f8 fa91 	bl	8006d72 <lwip_htonl>
 800e850:	4603      	mov	r3, r0
 800e852:	2200      	movs	r2, #0
 800e854:	4621      	mov	r1, r4
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fe66 	bl	800e528 <tcp_output_alloc_header>
 800e85c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d102      	bne.n	800e86a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e868:	e010      	b.n	800e88c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	2200      	movs	r2, #0
 800e86e:	6939      	ldr	r1, [r7, #16]
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7ff fe97 	bl	800e5a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3304      	adds	r3, #4
 800e87c:	6939      	ldr	r1, [r7, #16]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7ff fed0 	bl	800e624 <tcp_output_control_segment>
 800e884:	4603      	mov	r3, r0
 800e886:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	bd90      	pop	{r4, r7, pc}
 800e894:	080150dc 	.word	0x080150dc
 800e898:	080158b8 	.word	0x080158b8
 800e89c:	08015130 	.word	0x08015130

0800e8a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e8a0:	b590      	push	{r4, r7, lr}
 800e8a2:	b08b      	sub	sp, #44	; 0x2c
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <tcp_zero_window_probe+0x22>
 800e8b4:	4b4c      	ldr	r3, [pc, #304]	; (800e9e8 <tcp_zero_window_probe+0x148>)
 800e8b6:	f640 024f 	movw	r2, #2127	; 0x84f
 800e8ba:	494c      	ldr	r1, [pc, #304]	; (800e9ec <tcp_zero_window_probe+0x14c>)
 800e8bc:	484c      	ldr	r0, [pc, #304]	; (800e9f0 <tcp_zero_window_probe+0x150>)
 800e8be:	f002 ffa1 	bl	8011804 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	e086      	b.n	800e9e0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e8d8:	2bff      	cmp	r3, #255	; 0xff
 800e8da:	d007      	beq.n	800e8ec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	899b      	ldrh	r3, [r3, #12]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f8 fa27 	bl	8006d48 <lwip_htons>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <tcp_zero_window_probe+0x72>
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	891b      	ldrh	r3, [r3, #8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <tcp_zero_window_probe+0x72>
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <tcp_zero_window_probe+0x74>
 800e912:	2300      	movs	r3, #0
 800e914:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e916:	7ffb      	ldrb	r3, [r7, #31]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bf0c      	ite	eq
 800e91c:	2301      	moveq	r3, #1
 800e91e:	2300      	movne	r3, #0
 800e920:	b2db      	uxtb	r3, r3
 800e922:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e928:	b299      	uxth	r1, r3
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	8bba      	ldrh	r2, [r7, #28]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff fdf8 	bl	800e528 <tcp_output_alloc_header>
 800e938:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d102      	bne.n	800e946 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e944:	e04c      	b.n	800e9e0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e94c:	7ffb      	ldrb	r3, [r7, #31]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d011      	beq.n	800e976 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	899b      	ldrh	r3, [r3, #12]
 800e956:	b29b      	uxth	r3, r3
 800e958:	b21b      	sxth	r3, r3
 800e95a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e95e:	b21c      	sxth	r4, r3
 800e960:	2011      	movs	r0, #17
 800e962:	f7f8 f9f1 	bl	8006d48 <lwip_htons>
 800e966:	4603      	mov	r3, r0
 800e968:	b21b      	sxth	r3, r3
 800e96a:	4323      	orrs	r3, r4
 800e96c:	b21b      	sxth	r3, r3
 800e96e:	b29a      	uxth	r2, r3
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	819a      	strh	r2, [r3, #12]
 800e974:	e010      	b.n	800e998 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	3314      	adds	r3, #20
 800e97c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e97e:	6a3b      	ldr	r3, [r7, #32]
 800e980:	6858      	ldr	r0, [r3, #4]
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	891a      	ldrh	r2, [r3, #8]
 800e988:	6a3b      	ldr	r3, [r7, #32]
 800e98a:	891b      	ldrh	r3, [r3, #8]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	b29b      	uxth	r3, r3
 800e990:	2201      	movs	r2, #1
 800e992:	6939      	ldr	r1, [r7, #16]
 800e994:	f7f9 ff58 	bl	8008848 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f8 f9e7 	bl	8006d72 <lwip_htonl>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	da02      	bge.n	800e9bc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	69b9      	ldr	r1, [r7, #24]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff fded 	bl	800e5a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	69b9      	ldr	r1, [r7, #24]
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7ff fe26 	bl	800e624 <tcp_output_control_segment>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	372c      	adds	r7, #44	; 0x2c
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd90      	pop	{r4, r7, pc}
 800e9e8:	080150dc 	.word	0x080150dc
 800e9ec:	080158d4 	.word	0x080158d4
 800e9f0:	08015130 	.word	0x08015130

0800e9f4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e9fc:	f7fa f812 	bl	8008a24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea00:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <tcpip_tcp_timer+0x38>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <tcpip_tcp_timer+0x1c>
 800ea08:	4b09      	ldr	r3, [pc, #36]	; (800ea30 <tcpip_tcp_timer+0x3c>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d005      	beq.n	800ea1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea10:	2200      	movs	r2, #0
 800ea12:	4908      	ldr	r1, [pc, #32]	; (800ea34 <tcpip_tcp_timer+0x40>)
 800ea14:	20fa      	movs	r0, #250	; 0xfa
 800ea16:	f000 f8f3 	bl	800ec00 <sys_timeout>
 800ea1a:	e003      	b.n	800ea24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ea1c:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <tcpip_tcp_timer+0x44>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	601a      	str	r2, [r3, #0]
  }
}
 800ea22:	bf00      	nop
 800ea24:	bf00      	nop
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	200174e4 	.word	0x200174e4
 800ea30:	200174f4 	.word	0x200174f4
 800ea34:	0800e9f5 	.word	0x0800e9f5
 800ea38:	20000590 	.word	0x20000590

0800ea3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <tcp_timer_needed+0x30>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10f      	bne.n	800ea68 <tcp_timer_needed+0x2c>
 800ea48:	4b09      	ldr	r3, [pc, #36]	; (800ea70 <tcp_timer_needed+0x34>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d103      	bne.n	800ea58 <tcp_timer_needed+0x1c>
 800ea50:	4b08      	ldr	r3, [pc, #32]	; (800ea74 <tcp_timer_needed+0x38>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d007      	beq.n	800ea68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <tcp_timer_needed+0x30>)
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea5e:	2200      	movs	r2, #0
 800ea60:	4905      	ldr	r1, [pc, #20]	; (800ea78 <tcp_timer_needed+0x3c>)
 800ea62:	20fa      	movs	r0, #250	; 0xfa
 800ea64:	f000 f8cc 	bl	800ec00 <sys_timeout>
  }
}
 800ea68:	bf00      	nop
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20000590 	.word	0x20000590
 800ea70:	200174e4 	.word	0x200174e4
 800ea74:	200174f4 	.word	0x200174f4
 800ea78:	0800e9f5 	.word	0x0800e9f5

0800ea7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ea88:	2006      	movs	r0, #6
 800ea8a:	f7f8 fe91 	bl	80077b0 <memp_malloc>
 800ea8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d151      	bne.n	800eb40 <sys_timeout_abs+0xc4>
 800ea9c:	4b2a      	ldr	r3, [pc, #168]	; (800eb48 <sys_timeout_abs+0xcc>)
 800ea9e:	22be      	movs	r2, #190	; 0xbe
 800eaa0:	492a      	ldr	r1, [pc, #168]	; (800eb4c <sys_timeout_abs+0xd0>)
 800eaa2:	482b      	ldr	r0, [pc, #172]	; (800eb50 <sys_timeout_abs+0xd4>)
 800eaa4:	f002 feae 	bl	8011804 <iprintf>
    return;
 800eaa8:	e04a      	b.n	800eb40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	2200      	movs	r2, #0
 800eaae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eac2:	4b24      	ldr	r3, [pc, #144]	; (800eb54 <sys_timeout_abs+0xd8>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800eaca:	4a22      	ldr	r2, [pc, #136]	; (800eb54 <sys_timeout_abs+0xd8>)
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	6013      	str	r3, [r2, #0]
    return;
 800ead0:	e037      	b.n	800eb42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	4b1f      	ldr	r3, [pc, #124]	; (800eb54 <sys_timeout_abs+0xd8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	0fdb      	lsrs	r3, r3, #31
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d007      	beq.n	800eafa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800eaea:	4b1a      	ldr	r3, [pc, #104]	; (800eb54 <sys_timeout_abs+0xd8>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800eaf2:	4a18      	ldr	r2, [pc, #96]	; (800eb54 <sys_timeout_abs+0xd8>)
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	e023      	b.n	800eb42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800eafa:	4b16      	ldr	r3, [pc, #88]	; (800eb54 <sys_timeout_abs+0xd8>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	e01a      	b.n	800eb38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00b      	beq.n	800eb22 <sys_timeout_abs+0xa6>
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	0fdb      	lsrs	r3, r3, #31
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d007      	beq.n	800eb32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	601a      	str	r2, [r3, #0]
        break;
 800eb30:	e007      	b.n	800eb42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e1      	bne.n	800eb02 <sys_timeout_abs+0x86>
 800eb3e:	e000      	b.n	800eb42 <sys_timeout_abs+0xc6>
    return;
 800eb40:	bf00      	nop
      }
    }
  }
}
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	080158f8 	.word	0x080158f8
 800eb4c:	0801592c 	.word	0x0801592c
 800eb50:	0801596c 	.word	0x0801596c
 800eb54:	20000588 	.word	0x20000588

0800eb58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	4798      	blx	r3

  now = sys_now();
 800eb6a:	f7f6 f847 	bl	8004bfc <sys_now>
 800eb6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <lwip_cyclic_timer+0x5c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4413      	add	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	0fdb      	lsrs	r3, r3, #31
 800eb84:	f003 0301 	and.w	r3, r3, #1
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d009      	beq.n	800eba2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	4413      	add	r3, r2
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	4907      	ldr	r1, [pc, #28]	; (800ebb8 <lwip_cyclic_timer+0x60>)
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff ff6e 	bl	800ea7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eba0:	e004      	b.n	800ebac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	4904      	ldr	r1, [pc, #16]	; (800ebb8 <lwip_cyclic_timer+0x60>)
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff ff68 	bl	800ea7c <sys_timeout_abs>
}
 800ebac:	bf00      	nop
 800ebae:	3718      	adds	r7, #24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	2000058c 	.word	0x2000058c
 800ebb8:	0800eb59 	.word	0x0800eb59

0800ebbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	e00e      	b.n	800ebe6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ebc8:	4a0b      	ldr	r2, [pc, #44]	; (800ebf8 <sys_timeouts_init+0x3c>)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	4a08      	ldr	r2, [pc, #32]	; (800ebf8 <sys_timeouts_init+0x3c>)
 800ebd6:	4413      	add	r3, r2
 800ebd8:	461a      	mov	r2, r3
 800ebda:	4908      	ldr	r1, [pc, #32]	; (800ebfc <sys_timeouts_init+0x40>)
 800ebdc:	f000 f810 	bl	800ec00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	607b      	str	r3, [r7, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d9ed      	bls.n	800ebc8 <sys_timeouts_init+0xc>
  }
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	08017ee4 	.word	0x08017ee4
 800ebfc:	0800eb59 	.word	0x0800eb59

0800ec00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec12:	d306      	bcc.n	800ec22 <sys_timeout+0x22>
 800ec14:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <sys_timeout+0x40>)
 800ec16:	f240 1229 	movw	r2, #297	; 0x129
 800ec1a:	490a      	ldr	r1, [pc, #40]	; (800ec44 <sys_timeout+0x44>)
 800ec1c:	480a      	ldr	r0, [pc, #40]	; (800ec48 <sys_timeout+0x48>)
 800ec1e:	f002 fdf1 	bl	8011804 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ec22:	f7f5 ffeb 	bl	8004bfc <sys_now>
 800ec26:	4602      	mov	r2, r0
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	68b9      	ldr	r1, [r7, #8]
 800ec32:	6978      	ldr	r0, [r7, #20]
 800ec34:	f7ff ff22 	bl	800ea7c <sys_timeout_abs>
#endif
}
 800ec38:	bf00      	nop
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	080158f8 	.word	0x080158f8
 800ec44:	08015994 	.word	0x08015994
 800ec48:	0801596c 	.word	0x0801596c

0800ec4c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ec52:	f7f5 ffd3 	bl	8004bfc <sys_now>
 800ec56:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ec58:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <sys_check_timeouts+0x78>)
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <sys_check_timeouts+0x1a>
 800ec62:	f7f9 f8c9 	bl	8007df8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ec66:	4b18      	ldr	r3, [pc, #96]	; (800ecc8 <sys_check_timeouts+0x7c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d022      	beq.n	800ecb8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	0fdb      	lsrs	r3, r3, #31
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d11a      	bne.n	800ecbc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a0f      	ldr	r2, [pc, #60]	; (800ecc8 <sys_check_timeouts+0x7c>)
 800ec8c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	4a0b      	ldr	r2, [pc, #44]	; (800eccc <sys_check_timeouts+0x80>)
 800eca0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eca2:	68b9      	ldr	r1, [r7, #8]
 800eca4:	2006      	movs	r0, #6
 800eca6:	f7f8 fdcf 	bl	8007848 <memp_free>
    if (handler != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d0d3      	beq.n	800ec58 <sys_check_timeouts+0xc>
      handler(arg);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6838      	ldr	r0, [r7, #0]
 800ecb4:	4798      	blx	r3
  do {
 800ecb6:	e7cf      	b.n	800ec58 <sys_check_timeouts+0xc>
      return;
 800ecb8:	bf00      	nop
 800ecba:	e000      	b.n	800ecbe <sys_check_timeouts+0x72>
      return;
 800ecbc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	200174dc 	.word	0x200174dc
 800ecc8:	20000588 	.word	0x20000588
 800eccc:	2000058c 	.word	0x2000058c

0800ecd0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ecd4:	f002 fe24 	bl	8011920 <rand>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ece6:	b29a      	uxth	r2, r3
 800ece8:	4b01      	ldr	r3, [pc, #4]	; (800ecf0 <udp_init+0x20>)
 800ecea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ecec:	bf00      	nop
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	2000002c 	.word	0x2000002c

0800ecf4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <udp_input_local_match+0x20>
 800ed08:	4b27      	ldr	r3, [pc, #156]	; (800eda8 <udp_input_local_match+0xb4>)
 800ed0a:	2287      	movs	r2, #135	; 0x87
 800ed0c:	4927      	ldr	r1, [pc, #156]	; (800edac <udp_input_local_match+0xb8>)
 800ed0e:	4828      	ldr	r0, [pc, #160]	; (800edb0 <udp_input_local_match+0xbc>)
 800ed10:	f002 fd78 	bl	8011804 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <udp_input_local_match+0x32>
 800ed1a:	4b23      	ldr	r3, [pc, #140]	; (800eda8 <udp_input_local_match+0xb4>)
 800ed1c:	2288      	movs	r2, #136	; 0x88
 800ed1e:	4925      	ldr	r1, [pc, #148]	; (800edb4 <udp_input_local_match+0xc0>)
 800ed20:	4823      	ldr	r0, [pc, #140]	; (800edb0 <udp_input_local_match+0xbc>)
 800ed22:	f002 fd6f 	bl	8011804 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	7a1b      	ldrb	r3, [r3, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00b      	beq.n	800ed46 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	7a1a      	ldrb	r2, [r3, #8]
 800ed32:	4b21      	ldr	r3, [pc, #132]	; (800edb8 <udp_input_local_match+0xc4>)
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d001      	beq.n	800ed46 <udp_input_local_match+0x52>
    return 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	e02b      	b.n	800ed9e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d018      	beq.n	800ed7e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d013      	beq.n	800ed7a <udp_input_local_match+0x86>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00f      	beq.n	800ed7a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed5a:	4b17      	ldr	r3, [pc, #92]	; (800edb8 <udp_input_local_match+0xc4>)
 800ed5c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed62:	d00a      	beq.n	800ed7a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	4b13      	ldr	r3, [pc, #76]	; (800edb8 <udp_input_local_match+0xc4>)
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	405a      	eors	r2, r3
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	3308      	adds	r3, #8
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d110      	bne.n	800ed9c <udp_input_local_match+0xa8>
          return 1;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e00f      	b.n	800ed9e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d009      	beq.n	800ed98 <udp_input_local_match+0xa4>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <udp_input_local_match+0xa4>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <udp_input_local_match+0xc4>)
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d101      	bne.n	800ed9c <udp_input_local_match+0xa8>
        return 1;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e000      	b.n	800ed9e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	080159e0 	.word	0x080159e0
 800edac:	08015a10 	.word	0x08015a10
 800edb0:	08015a34 	.word	0x08015a34
 800edb4:	08015a5c 	.word	0x08015a5c
 800edb8:	2000a060 	.word	0x2000a060

0800edbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800edbc:	b590      	push	{r4, r7, lr}
 800edbe:	b08d      	sub	sp, #52	; 0x34
 800edc0:	af02      	add	r7, sp, #8
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d105      	bne.n	800eddc <udp_input+0x20>
 800edd0:	4b7c      	ldr	r3, [pc, #496]	; (800efc4 <udp_input+0x208>)
 800edd2:	22cf      	movs	r2, #207	; 0xcf
 800edd4:	497c      	ldr	r1, [pc, #496]	; (800efc8 <udp_input+0x20c>)
 800edd6:	487d      	ldr	r0, [pc, #500]	; (800efcc <udp_input+0x210>)
 800edd8:	f002 fd14 	bl	8011804 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <udp_input+0x32>
 800ede2:	4b78      	ldr	r3, [pc, #480]	; (800efc4 <udp_input+0x208>)
 800ede4:	22d0      	movs	r2, #208	; 0xd0
 800ede6:	497a      	ldr	r1, [pc, #488]	; (800efd0 <udp_input+0x214>)
 800ede8:	4878      	ldr	r0, [pc, #480]	; (800efcc <udp_input+0x210>)
 800edea:	f002 fd0b 	bl	8011804 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	895b      	ldrh	r3, [r3, #10]
 800edf2:	2b07      	cmp	r3, #7
 800edf4:	d803      	bhi.n	800edfe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7f9 fb3c 	bl	8008474 <pbuf_free>
    goto end;
 800edfc:	e0de      	b.n	800efbc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ee04:	4b73      	ldr	r3, [pc, #460]	; (800efd4 <udp_input+0x218>)
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	4a72      	ldr	r2, [pc, #456]	; (800efd4 <udp_input+0x218>)
 800ee0a:	6812      	ldr	r2, [r2, #0]
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 fc88 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800ee14:	4603      	mov	r3, r0
 800ee16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7f7 ff92 	bl	8006d48 <lwip_htons>
 800ee24:	4603      	mov	r3, r0
 800ee26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	885b      	ldrh	r3, [r3, #2]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f7 ff8a 	bl	8006d48 <lwip_htons>
 800ee34:	4603      	mov	r3, r0
 800ee36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ee40:	2300      	movs	r3, #0
 800ee42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee44:	4b64      	ldr	r3, [pc, #400]	; (800efd8 <udp_input+0x21c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	627b      	str	r3, [r7, #36]	; 0x24
 800ee4a:	e054      	b.n	800eef6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	8a5b      	ldrh	r3, [r3, #18]
 800ee50:	89fa      	ldrh	r2, [r7, #14]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d14a      	bne.n	800eeec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ee56:	7cfb      	ldrb	r3, [r7, #19]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee5e:	f7ff ff49 	bl	800ecf4 <udp_input_local_match>
 800ee62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d041      	beq.n	800eeec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	7c1b      	ldrb	r3, [r3, #16]
 800ee6c:	f003 0304 	and.w	r3, r3, #4
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d11d      	bne.n	800eeb0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7c:	61fb      	str	r3, [r7, #28]
 800ee7e:	e017      	b.n	800eeb0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ee80:	7cfb      	ldrb	r3, [r7, #19]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d014      	beq.n	800eeb0 <udp_input+0xf4>
 800ee86:	4b53      	ldr	r3, [pc, #332]	; (800efd4 <udp_input+0x218>)
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee8e:	d10f      	bne.n	800eeb0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	3304      	adds	r3, #4
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d008      	beq.n	800eeb0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	3304      	adds	r3, #4
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d101      	bne.n	800eeb0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	8a9b      	ldrh	r3, [r3, #20]
 800eeb4:	8a3a      	ldrh	r2, [r7, #16]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d118      	bne.n	800eeec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d005      	beq.n	800eece <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	4b43      	ldr	r3, [pc, #268]	; (800efd4 <udp_input+0x218>)
 800eec8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d10e      	bne.n	800eeec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d014      	beq.n	800eefe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	68da      	ldr	r2, [r3, #12]
 800eed8:	6a3b      	ldr	r3, [r7, #32]
 800eeda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eedc:	4b3e      	ldr	r3, [pc, #248]	; (800efd8 <udp_input+0x21c>)
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eee4:	4a3c      	ldr	r2, [pc, #240]	; (800efd8 <udp_input+0x21c>)
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eeea:	e008      	b.n	800eefe <udp_input+0x142>
      }
    }

    prev = pcb;
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1a7      	bne.n	800ee4c <udp_input+0x90>
 800eefc:	e000      	b.n	800ef00 <udp_input+0x144>
        break;
 800eefe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d101      	bne.n	800ef0a <udp_input+0x14e>
    pcb = uncon_pcb;
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <udp_input+0x15a>
    for_us = 1;
 800ef10:	2301      	movs	r3, #1
 800ef12:	76fb      	strb	r3, [r7, #27]
 800ef14:	e00a      	b.n	800ef2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	4b2d      	ldr	r3, [pc, #180]	; (800efd4 <udp_input+0x218>)
 800ef1e:	695b      	ldr	r3, [r3, #20]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	bf0c      	ite	eq
 800ef24:	2301      	moveq	r3, #1
 800ef26:	2300      	movne	r3, #0
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ef2c:	7efb      	ldrb	r3, [r7, #27]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d041      	beq.n	800efb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ef32:	2108      	movs	r1, #8
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7f9 fa17 	bl	8008368 <pbuf_remove_header>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ef40:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <udp_input+0x208>)
 800ef42:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ef46:	4925      	ldr	r1, [pc, #148]	; (800efdc <udp_input+0x220>)
 800ef48:	4820      	ldr	r0, [pc, #128]	; (800efcc <udp_input+0x210>)
 800ef4a:	f002 fc5b 	bl	8011804 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7f9 fa90 	bl	8008474 <pbuf_free>
      goto end;
 800ef54:	e032      	b.n	800efbc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d012      	beq.n	800ef82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00a      	beq.n	800ef7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	699c      	ldr	r4, [r3, #24]
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	69d8      	ldr	r0, [r3, #28]
 800ef6c:	8a3b      	ldrh	r3, [r7, #16]
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	4b1b      	ldr	r3, [pc, #108]	; (800efe0 <udp_input+0x224>)
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ef78:	e021      	b.n	800efbe <udp_input+0x202>
        pbuf_free(p);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7f9 fa7a 	bl	8008474 <pbuf_free>
        goto end;
 800ef80:	e01c      	b.n	800efbc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef82:	7cfb      	ldrb	r3, [r7, #19]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d112      	bne.n	800efae <udp_input+0x1f2>
 800ef88:	4b12      	ldr	r3, [pc, #72]	; (800efd4 <udp_input+0x218>)
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef90:	2be0      	cmp	r3, #224	; 0xe0
 800ef92:	d00c      	beq.n	800efae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ef94:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <udp_input+0x218>)
 800ef96:	899b      	ldrh	r3, [r3, #12]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	b21b      	sxth	r3, r3
 800ef9e:	4619      	mov	r1, r3
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7f9 fa54 	bl	800844e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800efa6:	2103      	movs	r1, #3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f001 f89b 	bl	80100e4 <icmp_dest_unreach>
      pbuf_free(p);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7f9 fa60 	bl	8008474 <pbuf_free>
  return;
 800efb4:	e003      	b.n	800efbe <udp_input+0x202>
    pbuf_free(p);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7f9 fa5c 	bl	8008474 <pbuf_free>
  return;
 800efbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800efbe:	372c      	adds	r7, #44	; 0x2c
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd90      	pop	{r4, r7, pc}
 800efc4:	080159e0 	.word	0x080159e0
 800efc8:	08015a84 	.word	0x08015a84
 800efcc:	08015a34 	.word	0x08015a34
 800efd0:	08015a9c 	.word	0x08015a9c
 800efd4:	2000a060 	.word	0x2000a060
 800efd8:	200174fc 	.word	0x200174fc
 800efdc:	08015ab8 	.word	0x08015ab8
 800efe0:	2000a070 	.word	0x2000a070

0800efe4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d01e      	beq.n	800f032 <udp_netif_ip_addr_changed+0x4e>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d01a      	beq.n	800f032 <udp_netif_ip_addr_changed+0x4e>
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d017      	beq.n	800f032 <udp_netif_ip_addr_changed+0x4e>
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d013      	beq.n	800f032 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f00a:	4b0d      	ldr	r3, [pc, #52]	; (800f040 <udp_netif_ip_addr_changed+0x5c>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	e00c      	b.n	800f02c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d103      	bne.n	800f026 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d1ef      	bne.n	800f012 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f032:	bf00      	nop
 800f034:	3714      	adds	r7, #20
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	200174fc 	.word	0x200174fc

0800f044 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f04c:	4915      	ldr	r1, [pc, #84]	; (800f0a4 <etharp_free_entry+0x60>)
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	4613      	mov	r3, r2
 800f052:	005b      	lsls	r3, r3, #1
 800f054:	4413      	add	r3, r2
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	440b      	add	r3, r1
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d013      	beq.n	800f088 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f060:	4910      	ldr	r1, [pc, #64]	; (800f0a4 <etharp_free_entry+0x60>)
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	4613      	mov	r3, r2
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	4413      	add	r3, r2
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	440b      	add	r3, r1
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4618      	mov	r0, r3
 800f072:	f7f9 f9ff 	bl	8008474 <pbuf_free>
    arp_table[i].q = NULL;
 800f076:	490b      	ldr	r1, [pc, #44]	; (800f0a4 <etharp_free_entry+0x60>)
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	4613      	mov	r3, r2
 800f07c:	005b      	lsls	r3, r3, #1
 800f07e:	4413      	add	r3, r2
 800f080:	00db      	lsls	r3, r3, #3
 800f082:	440b      	add	r3, r1
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f088:	4906      	ldr	r1, [pc, #24]	; (800f0a4 <etharp_free_entry+0x60>)
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	4613      	mov	r3, r2
 800f08e:	005b      	lsls	r3, r3, #1
 800f090:	4413      	add	r3, r2
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	440b      	add	r3, r1
 800f096:	3314      	adds	r3, #20
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	20000594 	.word	0x20000594

0800f0a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	607b      	str	r3, [r7, #4]
 800f0b2:	e096      	b.n	800f1e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f0b4:	494f      	ldr	r1, [pc, #316]	; (800f1f4 <etharp_tmr+0x14c>)
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3314      	adds	r3, #20
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f0c8:	78fb      	ldrb	r3, [r7, #3]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 8086 	beq.w	800f1dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f0d0:	4948      	ldr	r1, [pc, #288]	; (800f1f4 <etharp_tmr+0x14c>)
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	4413      	add	r3, r2
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	440b      	add	r3, r1
 800f0de:	3312      	adds	r3, #18
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	b298      	uxth	r0, r3
 800f0e6:	4943      	ldr	r1, [pc, #268]	; (800f1f4 <etharp_tmr+0x14c>)
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	440b      	add	r3, r1
 800f0f4:	3312      	adds	r3, #18
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f0fa:	493e      	ldr	r1, [pc, #248]	; (800f1f4 <etharp_tmr+0x14c>)
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	4613      	mov	r3, r2
 800f100:	005b      	lsls	r3, r3, #1
 800f102:	4413      	add	r3, r2
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	440b      	add	r3, r1
 800f108:	3312      	adds	r3, #18
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f110:	d215      	bcs.n	800f13e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f112:	4938      	ldr	r1, [pc, #224]	; (800f1f4 <etharp_tmr+0x14c>)
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	4613      	mov	r3, r2
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	4413      	add	r3, r2
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	440b      	add	r3, r1
 800f120:	3314      	adds	r3, #20
 800f122:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f124:	2b01      	cmp	r3, #1
 800f126:	d10e      	bne.n	800f146 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f128:	4932      	ldr	r1, [pc, #200]	; (800f1f4 <etharp_tmr+0x14c>)
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	00db      	lsls	r3, r3, #3
 800f134:	440b      	add	r3, r1
 800f136:	3312      	adds	r3, #18
 800f138:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	d903      	bls.n	800f146 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff ff80 	bl	800f044 <etharp_free_entry>
 800f144:	e04a      	b.n	800f1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f146:	492b      	ldr	r1, [pc, #172]	; (800f1f4 <etharp_tmr+0x14c>)
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	4613      	mov	r3, r2
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	4413      	add	r3, r2
 800f150:	00db      	lsls	r3, r3, #3
 800f152:	440b      	add	r3, r1
 800f154:	3314      	adds	r3, #20
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d10a      	bne.n	800f172 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f15c:	4925      	ldr	r1, [pc, #148]	; (800f1f4 <etharp_tmr+0x14c>)
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	4613      	mov	r3, r2
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	4413      	add	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	440b      	add	r3, r1
 800f16a:	3314      	adds	r3, #20
 800f16c:	2204      	movs	r2, #4
 800f16e:	701a      	strb	r2, [r3, #0]
 800f170:	e034      	b.n	800f1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f172:	4920      	ldr	r1, [pc, #128]	; (800f1f4 <etharp_tmr+0x14c>)
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	4613      	mov	r3, r2
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	440b      	add	r3, r1
 800f180:	3314      	adds	r3, #20
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b04      	cmp	r3, #4
 800f186:	d10a      	bne.n	800f19e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f188:	491a      	ldr	r1, [pc, #104]	; (800f1f4 <etharp_tmr+0x14c>)
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	4613      	mov	r3, r2
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	4413      	add	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	3314      	adds	r3, #20
 800f198:	2202      	movs	r2, #2
 800f19a:	701a      	strb	r2, [r3, #0]
 800f19c:	e01e      	b.n	800f1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f19e:	4915      	ldr	r1, [pc, #84]	; (800f1f4 <etharp_tmr+0x14c>)
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	4413      	add	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d113      	bne.n	800f1dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f1b4:	490f      	ldr	r1, [pc, #60]	; (800f1f4 <etharp_tmr+0x14c>)
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	4413      	add	r3, r2
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	440b      	add	r3, r1
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	005b      	lsls	r3, r3, #1
 800f1cc:	4413      	add	r3, r2
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	4a08      	ldr	r2, [pc, #32]	; (800f1f4 <etharp_tmr+0x14c>)
 800f1d2:	4413      	add	r3, r2
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	f000 fe6e 	bl	800feb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	607b      	str	r3, [r7, #4]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b09      	cmp	r3, #9
 800f1e6:	f77f af65 	ble.w	800f0b4 <etharp_tmr+0xc>
      }
    }
  }
}
 800f1ea:	bf00      	nop
 800f1ec:	bf00      	nop
 800f1ee:	3708      	adds	r7, #8
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	20000594 	.word	0x20000594

0800f1f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08a      	sub	sp, #40	; 0x28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	460b      	mov	r3, r1
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f206:	230a      	movs	r3, #10
 800f208:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f20a:	230a      	movs	r3, #10
 800f20c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f20e:	230a      	movs	r3, #10
 800f210:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f212:	2300      	movs	r3, #0
 800f214:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f216:	230a      	movs	r3, #10
 800f218:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	83bb      	strh	r3, [r7, #28]
 800f21e:	2300      	movs	r3, #0
 800f220:	837b      	strh	r3, [r7, #26]
 800f222:	2300      	movs	r3, #0
 800f224:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f226:	2300      	movs	r3, #0
 800f228:	843b      	strh	r3, [r7, #32]
 800f22a:	e0ae      	b.n	800f38a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f22c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f230:	49a6      	ldr	r1, [pc, #664]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f232:	4613      	mov	r3, r2
 800f234:	005b      	lsls	r3, r3, #1
 800f236:	4413      	add	r3, r2
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	440b      	add	r3, r1
 800f23c:	3314      	adds	r3, #20
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f242:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f246:	2b0a      	cmp	r3, #10
 800f248:	d105      	bne.n	800f256 <etharp_find_entry+0x5e>
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d102      	bne.n	800f256 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f250:	8c3b      	ldrh	r3, [r7, #32]
 800f252:	847b      	strh	r3, [r7, #34]	; 0x22
 800f254:	e095      	b.n	800f382 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f256:	7dfb      	ldrb	r3, [r7, #23]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 8092 	beq.w	800f382 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f25e:	7dfb      	ldrb	r3, [r7, #23]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d009      	beq.n	800f278 <etharp_find_entry+0x80>
 800f264:	7dfb      	ldrb	r3, [r7, #23]
 800f266:	2b01      	cmp	r3, #1
 800f268:	d806      	bhi.n	800f278 <etharp_find_entry+0x80>
 800f26a:	4b99      	ldr	r3, [pc, #612]	; (800f4d0 <etharp_find_entry+0x2d8>)
 800f26c:	f240 1223 	movw	r2, #291	; 0x123
 800f270:	4998      	ldr	r1, [pc, #608]	; (800f4d4 <etharp_find_entry+0x2dc>)
 800f272:	4899      	ldr	r0, [pc, #612]	; (800f4d8 <etharp_find_entry+0x2e0>)
 800f274:	f002 fac6 	bl	8011804 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d020      	beq.n	800f2c0 <etharp_find_entry+0xc8>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6819      	ldr	r1, [r3, #0]
 800f282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f286:	4891      	ldr	r0, [pc, #580]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f288:	4613      	mov	r3, r2
 800f28a:	005b      	lsls	r3, r3, #1
 800f28c:	4413      	add	r3, r2
 800f28e:	00db      	lsls	r3, r3, #3
 800f290:	4403      	add	r3, r0
 800f292:	3304      	adds	r3, #4
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4299      	cmp	r1, r3
 800f298:	d112      	bne.n	800f2c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00c      	beq.n	800f2ba <etharp_find_entry+0xc2>
 800f2a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2a4:	4989      	ldr	r1, [pc, #548]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f2a6:	4613      	mov	r3, r2
 800f2a8:	005b      	lsls	r3, r3, #1
 800f2aa:	4413      	add	r3, r2
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	440b      	add	r3, r1
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d102      	bne.n	800f2c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f2ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f2be:	e100      	b.n	800f4c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f2c0:	7dfb      	ldrb	r3, [r7, #23]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d140      	bne.n	800f348 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f2c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2ca:	4980      	ldr	r1, [pc, #512]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	440b      	add	r3, r1
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01a      	beq.n	800f312 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f2dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2e0:	497a      	ldr	r1, [pc, #488]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	4413      	add	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	440b      	add	r3, r1
 800f2ec:	3312      	adds	r3, #18
 800f2ee:	881b      	ldrh	r3, [r3, #0]
 800f2f0:	8bba      	ldrh	r2, [r7, #28]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d845      	bhi.n	800f382 <etharp_find_entry+0x18a>
            old_queue = i;
 800f2f6:	8c3b      	ldrh	r3, [r7, #32]
 800f2f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f2fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2fe:	4973      	ldr	r1, [pc, #460]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f300:	4613      	mov	r3, r2
 800f302:	005b      	lsls	r3, r3, #1
 800f304:	4413      	add	r3, r2
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	440b      	add	r3, r1
 800f30a:	3312      	adds	r3, #18
 800f30c:	881b      	ldrh	r3, [r3, #0]
 800f30e:	83bb      	strh	r3, [r7, #28]
 800f310:	e037      	b.n	800f382 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f316:	496d      	ldr	r1, [pc, #436]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	440b      	add	r3, r1
 800f322:	3312      	adds	r3, #18
 800f324:	881b      	ldrh	r3, [r3, #0]
 800f326:	8b7a      	ldrh	r2, [r7, #26]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d82a      	bhi.n	800f382 <etharp_find_entry+0x18a>
            old_pending = i;
 800f32c:	8c3b      	ldrh	r3, [r7, #32]
 800f32e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f330:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f334:	4965      	ldr	r1, [pc, #404]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f336:	4613      	mov	r3, r2
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	4413      	add	r3, r2
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	440b      	add	r3, r1
 800f340:	3312      	adds	r3, #18
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	837b      	strh	r3, [r7, #26]
 800f346:	e01c      	b.n	800f382 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f348:	7dfb      	ldrb	r3, [r7, #23]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d919      	bls.n	800f382 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f34e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f352:	495e      	ldr	r1, [pc, #376]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f354:	4613      	mov	r3, r2
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	4413      	add	r3, r2
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	440b      	add	r3, r1
 800f35e:	3312      	adds	r3, #18
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	8b3a      	ldrh	r2, [r7, #24]
 800f364:	429a      	cmp	r2, r3
 800f366:	d80c      	bhi.n	800f382 <etharp_find_entry+0x18a>
            old_stable = i;
 800f368:	8c3b      	ldrh	r3, [r7, #32]
 800f36a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f36c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f370:	4956      	ldr	r1, [pc, #344]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f372:	4613      	mov	r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	4413      	add	r3, r2
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	440b      	add	r3, r1
 800f37c:	3312      	adds	r3, #18
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f382:	8c3b      	ldrh	r3, [r7, #32]
 800f384:	3301      	adds	r3, #1
 800f386:	b29b      	uxth	r3, r3
 800f388:	843b      	strh	r3, [r7, #32]
 800f38a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f38e:	2b09      	cmp	r3, #9
 800f390:	f77f af4c 	ble.w	800f22c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f394:	7afb      	ldrb	r3, [r7, #11]
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d108      	bne.n	800f3b0 <etharp_find_entry+0x1b8>
 800f39e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f3a2:	2b0a      	cmp	r3, #10
 800f3a4:	d107      	bne.n	800f3b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f3a6:	7afb      	ldrb	r3, [r7, #11]
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d102      	bne.n	800f3b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f3b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3b4:	e085      	b.n	800f4c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f3b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f3ba:	2b09      	cmp	r3, #9
 800f3bc:	dc02      	bgt.n	800f3c4 <etharp_find_entry+0x1cc>
    i = empty;
 800f3be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3c0:	843b      	strh	r3, [r7, #32]
 800f3c2:	e039      	b.n	800f438 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f3c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3c8:	2b09      	cmp	r3, #9
 800f3ca:	dc14      	bgt.n	800f3f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f3cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f3d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3d4:	493d      	ldr	r1, [pc, #244]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	4413      	add	r3, r2
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	440b      	add	r3, r1
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d018      	beq.n	800f418 <etharp_find_entry+0x220>
 800f3e6:	4b3a      	ldr	r3, [pc, #232]	; (800f4d0 <etharp_find_entry+0x2d8>)
 800f3e8:	f240 126d 	movw	r2, #365	; 0x16d
 800f3ec:	493b      	ldr	r1, [pc, #236]	; (800f4dc <etharp_find_entry+0x2e4>)
 800f3ee:	483a      	ldr	r0, [pc, #232]	; (800f4d8 <etharp_find_entry+0x2e0>)
 800f3f0:	f002 fa08 	bl	8011804 <iprintf>
 800f3f4:	e010      	b.n	800f418 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f3f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f3fa:	2b09      	cmp	r3, #9
 800f3fc:	dc02      	bgt.n	800f404 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f3fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f400:	843b      	strh	r3, [r7, #32]
 800f402:	e009      	b.n	800f418 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f404:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f408:	2b09      	cmp	r3, #9
 800f40a:	dc02      	bgt.n	800f412 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f40c:	8bfb      	ldrh	r3, [r7, #30]
 800f40e:	843b      	strh	r3, [r7, #32]
 800f410:	e002      	b.n	800f418 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f416:	e054      	b.n	800f4c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f41c:	2b09      	cmp	r3, #9
 800f41e:	dd06      	ble.n	800f42e <etharp_find_entry+0x236>
 800f420:	4b2b      	ldr	r3, [pc, #172]	; (800f4d0 <etharp_find_entry+0x2d8>)
 800f422:	f240 127f 	movw	r2, #383	; 0x17f
 800f426:	492e      	ldr	r1, [pc, #184]	; (800f4e0 <etharp_find_entry+0x2e8>)
 800f428:	482b      	ldr	r0, [pc, #172]	; (800f4d8 <etharp_find_entry+0x2e0>)
 800f42a:	f002 f9eb 	bl	8011804 <iprintf>
    etharp_free_entry(i);
 800f42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff fe06 	bl	800f044 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f438:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f43c:	2b09      	cmp	r3, #9
 800f43e:	dd06      	ble.n	800f44e <etharp_find_entry+0x256>
 800f440:	4b23      	ldr	r3, [pc, #140]	; (800f4d0 <etharp_find_entry+0x2d8>)
 800f442:	f240 1283 	movw	r2, #387	; 0x183
 800f446:	4926      	ldr	r1, [pc, #152]	; (800f4e0 <etharp_find_entry+0x2e8>)
 800f448:	4823      	ldr	r0, [pc, #140]	; (800f4d8 <etharp_find_entry+0x2e0>)
 800f44a:	f002 f9db 	bl	8011804 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f44e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f452:	491e      	ldr	r1, [pc, #120]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f454:	4613      	mov	r3, r2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	4413      	add	r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	440b      	add	r3, r1
 800f45e:	3314      	adds	r3, #20
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d006      	beq.n	800f474 <etharp_find_entry+0x27c>
 800f466:	4b1a      	ldr	r3, [pc, #104]	; (800f4d0 <etharp_find_entry+0x2d8>)
 800f468:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f46c:	491d      	ldr	r1, [pc, #116]	; (800f4e4 <etharp_find_entry+0x2ec>)
 800f46e:	481a      	ldr	r0, [pc, #104]	; (800f4d8 <etharp_find_entry+0x2e0>)
 800f470:	f002 f9c8 	bl	8011804 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00b      	beq.n	800f492 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f47a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6819      	ldr	r1, [r3, #0]
 800f482:	4812      	ldr	r0, [pc, #72]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f484:	4613      	mov	r3, r2
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	4413      	add	r3, r2
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	4403      	add	r3, r0
 800f48e:	3304      	adds	r3, #4
 800f490:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f496:	490d      	ldr	r1, [pc, #52]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f498:	4613      	mov	r3, r2
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	4413      	add	r3, r2
 800f49e:	00db      	lsls	r3, r3, #3
 800f4a0:	440b      	add	r3, r1
 800f4a2:	3312      	adds	r3, #18
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f4a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f4ac:	4907      	ldr	r1, [pc, #28]	; (800f4cc <etharp_find_entry+0x2d4>)
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	4413      	add	r3, r2
 800f4b4:	00db      	lsls	r3, r3, #3
 800f4b6:	440b      	add	r3, r1
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f4be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3728      	adds	r7, #40	; 0x28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20000594 	.word	0x20000594
 800f4d0:	08015d44 	.word	0x08015d44
 800f4d4:	08015d7c 	.word	0x08015d7c
 800f4d8:	08015dbc 	.word	0x08015dbc
 800f4dc:	08015de4 	.word	0x08015de4
 800f4e0:	08015dfc 	.word	0x08015dfc
 800f4e4:	08015e10 	.word	0x08015e10

0800f4e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b088      	sub	sp, #32
 800f4ec:	af02      	add	r7, sp, #8
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
 800f4f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f4fc:	2b06      	cmp	r3, #6
 800f4fe:	d006      	beq.n	800f50e <etharp_update_arp_entry+0x26>
 800f500:	4b48      	ldr	r3, [pc, #288]	; (800f624 <etharp_update_arp_entry+0x13c>)
 800f502:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f506:	4948      	ldr	r1, [pc, #288]	; (800f628 <etharp_update_arp_entry+0x140>)
 800f508:	4848      	ldr	r0, [pc, #288]	; (800f62c <etharp_update_arp_entry+0x144>)
 800f50a:	f002 f97b 	bl	8011804 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d012      	beq.n	800f53a <etharp_update_arp_entry+0x52>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00e      	beq.n	800f53a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68f9      	ldr	r1, [r7, #12]
 800f522:	4618      	mov	r0, r3
 800f524:	f001 f8fe 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800f528:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d105      	bne.n	800f53a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f536:	2be0      	cmp	r3, #224	; 0xe0
 800f538:	d102      	bne.n	800f540 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f53a:	f06f 030f 	mvn.w	r3, #15
 800f53e:	e06c      	b.n	800f61a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	4619      	mov	r1, r3
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f7ff fe56 	bl	800f1f8 <etharp_find_entry>
 800f54c:	4603      	mov	r3, r0
 800f54e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f550:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f554:	2b00      	cmp	r3, #0
 800f556:	da02      	bge.n	800f55e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f558:	8afb      	ldrh	r3, [r7, #22]
 800f55a:	b25b      	sxtb	r3, r3
 800f55c:	e05d      	b.n	800f61a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f55e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f562:	4933      	ldr	r1, [pc, #204]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f564:	4613      	mov	r3, r2
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	4413      	add	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	440b      	add	r3, r1
 800f56e:	3314      	adds	r3, #20
 800f570:	2202      	movs	r2, #2
 800f572:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f578:	492d      	ldr	r1, [pc, #180]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f57a:	4613      	mov	r3, r2
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	4413      	add	r3, r2
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	440b      	add	r3, r1
 800f584:	3308      	adds	r3, #8
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f58a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f58e:	4613      	mov	r3, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	3308      	adds	r3, #8
 800f598:	4a25      	ldr	r2, [pc, #148]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f59a:	4413      	add	r3, r2
 800f59c:	3304      	adds	r3, #4
 800f59e:	2206      	movs	r2, #6
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f002 f854 	bl	8011650 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f5a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5ac:	4920      	ldr	r1, [pc, #128]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4413      	add	r3, r2
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	440b      	add	r3, r1
 800f5b8:	3312      	adds	r3, #18
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f5be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5c2:	491b      	ldr	r1, [pc, #108]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	4413      	add	r3, r2
 800f5ca:	00db      	lsls	r3, r3, #3
 800f5cc:	440b      	add	r3, r1
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d021      	beq.n	800f618 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f5d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5d8:	4915      	ldr	r1, [pc, #84]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f5da:	4613      	mov	r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4413      	add	r3, r2
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	440b      	add	r3, r1
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f5e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5ec:	4910      	ldr	r1, [pc, #64]	; (800f630 <etharp_update_arp_entry+0x148>)
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	005b      	lsls	r3, r3, #1
 800f5f2:	4413      	add	r3, r2
 800f5f4:	00db      	lsls	r3, r3, #3
 800f5f6:	440b      	add	r3, r1
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6939      	ldr	r1, [r7, #16]
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f001 ff91 	bl	8011534 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f612:	6938      	ldr	r0, [r7, #16]
 800f614:	f7f8 ff2e 	bl	8008474 <pbuf_free>
  }
  return ERR_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3718      	adds	r7, #24
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	08015d44 	.word	0x08015d44
 800f628:	08015e3c 	.word	0x08015e3c
 800f62c:	08015dbc 	.word	0x08015dbc
 800f630:	20000594 	.word	0x20000594

0800f634 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f63c:	2300      	movs	r3, #0
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	e01e      	b.n	800f680 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f642:	4913      	ldr	r1, [pc, #76]	; (800f690 <etharp_cleanup_netif+0x5c>)
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	4613      	mov	r3, r2
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4413      	add	r3, r2
 800f64c:	00db      	lsls	r3, r3, #3
 800f64e:	440b      	add	r3, r1
 800f650:	3314      	adds	r3, #20
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f656:	7afb      	ldrb	r3, [r7, #11]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00e      	beq.n	800f67a <etharp_cleanup_netif+0x46>
 800f65c:	490c      	ldr	r1, [pc, #48]	; (800f690 <etharp_cleanup_netif+0x5c>)
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4613      	mov	r3, r2
 800f662:	005b      	lsls	r3, r3, #1
 800f664:	4413      	add	r3, r2
 800f666:	00db      	lsls	r3, r3, #3
 800f668:	440b      	add	r3, r1
 800f66a:	3308      	adds	r3, #8
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	429a      	cmp	r2, r3
 800f672:	d102      	bne.n	800f67a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7ff fce5 	bl	800f044 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	3301      	adds	r3, #1
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b09      	cmp	r3, #9
 800f684:	dddd      	ble.n	800f642 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	20000594 	.word	0x20000594

0800f694 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f694:	b5b0      	push	{r4, r5, r7, lr}
 800f696:	b08a      	sub	sp, #40	; 0x28
 800f698:	af04      	add	r7, sp, #16
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d107      	bne.n	800f6b4 <etharp_input+0x20>
 800f6a4:	4b3d      	ldr	r3, [pc, #244]	; (800f79c <etharp_input+0x108>)
 800f6a6:	f240 228a 	movw	r2, #650	; 0x28a
 800f6aa:	493d      	ldr	r1, [pc, #244]	; (800f7a0 <etharp_input+0x10c>)
 800f6ac:	483d      	ldr	r0, [pc, #244]	; (800f7a4 <etharp_input+0x110>)
 800f6ae:	f002 f8a9 	bl	8011804 <iprintf>
 800f6b2:	e06f      	b.n	800f794 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6c4:	d10c      	bne.n	800f6e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f6ca:	2b06      	cmp	r3, #6
 800f6cc:	d108      	bne.n	800f6e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f6d2:	2b04      	cmp	r3, #4
 800f6d4:	d104      	bne.n	800f6e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	885b      	ldrh	r3, [r3, #2]
 800f6da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f6dc:	2b08      	cmp	r3, #8
 800f6de:	d003      	beq.n	800f6e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7f8 fec7 	bl	8008474 <pbuf_free>
    return;
 800f6e6:	e055      	b.n	800f794 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	330e      	adds	r3, #14
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	3318      	adds	r3, #24
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d102      	bne.n	800f708 <etharp_input+0x74>
    for_us = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	75fb      	strb	r3, [r7, #23]
 800f706:	e009      	b.n	800f71c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	3304      	adds	r3, #4
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	bf0c      	ite	eq
 800f714:	2301      	moveq	r3, #1
 800f716:	2300      	movne	r3, #0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	f103 0208 	add.w	r2, r3, #8
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <etharp_input+0x98>
 800f728:	2301      	movs	r3, #1
 800f72a:	e000      	b.n	800f72e <etharp_input+0x9a>
 800f72c:	2302      	movs	r3, #2
 800f72e:	f107 010c 	add.w	r1, r7, #12
 800f732:	6838      	ldr	r0, [r7, #0]
 800f734:	f7ff fed8 	bl	800f4e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	88db      	ldrh	r3, [r3, #6]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f742:	d003      	beq.n	800f74c <etharp_input+0xb8>
 800f744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f748:	d01e      	beq.n	800f788 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f74a:	e020      	b.n	800f78e <etharp_input+0xfa>
      if (for_us) {
 800f74c:	7dfb      	ldrb	r3, [r7, #23]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d01c      	beq.n	800f78c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f76c:	2102      	movs	r1, #2
 800f76e:	9103      	str	r1, [sp, #12]
 800f770:	f107 010c 	add.w	r1, r7, #12
 800f774:	9102      	str	r1, [sp, #8]
 800f776:	9201      	str	r2, [sp, #4]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	462b      	mov	r3, r5
 800f77c:	4622      	mov	r2, r4
 800f77e:	4601      	mov	r1, r0
 800f780:	6838      	ldr	r0, [r7, #0]
 800f782:	f000 faeb 	bl	800fd5c <etharp_raw>
      break;
 800f786:	e001      	b.n	800f78c <etharp_input+0xf8>
      break;
 800f788:	bf00      	nop
 800f78a:	e000      	b.n	800f78e <etharp_input+0xfa>
      break;
 800f78c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7f8 fe70 	bl	8008474 <pbuf_free>
}
 800f794:	3718      	adds	r7, #24
 800f796:	46bd      	mov	sp, r7
 800f798:	bdb0      	pop	{r4, r5, r7, pc}
 800f79a:	bf00      	nop
 800f79c:	08015d44 	.word	0x08015d44
 800f7a0:	08015e94 	.word	0x08015e94
 800f7a4:	08015dbc 	.word	0x08015dbc

0800f7a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af02      	add	r7, sp, #8
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f7b6:	79fa      	ldrb	r2, [r7, #7]
 800f7b8:	4944      	ldr	r1, [pc, #272]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	4413      	add	r3, r2
 800f7c0:	00db      	lsls	r3, r3, #3
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3314      	adds	r3, #20
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d806      	bhi.n	800f7da <etharp_output_to_arp_index+0x32>
 800f7cc:	4b40      	ldr	r3, [pc, #256]	; (800f8d0 <etharp_output_to_arp_index+0x128>)
 800f7ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f7d2:	4940      	ldr	r1, [pc, #256]	; (800f8d4 <etharp_output_to_arp_index+0x12c>)
 800f7d4:	4840      	ldr	r0, [pc, #256]	; (800f8d8 <etharp_output_to_arp_index+0x130>)
 800f7d6:	f002 f815 	bl	8011804 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f7da:	79fa      	ldrb	r2, [r7, #7]
 800f7dc:	493b      	ldr	r1, [pc, #236]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f7de:	4613      	mov	r3, r2
 800f7e0:	005b      	lsls	r3, r3, #1
 800f7e2:	4413      	add	r3, r2
 800f7e4:	00db      	lsls	r3, r3, #3
 800f7e6:	440b      	add	r3, r1
 800f7e8:	3314      	adds	r3, #20
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b02      	cmp	r3, #2
 800f7ee:	d153      	bne.n	800f898 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f7f0:	79fa      	ldrb	r2, [r7, #7]
 800f7f2:	4936      	ldr	r1, [pc, #216]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	440b      	add	r3, r1
 800f7fe:	3312      	adds	r3, #18
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f806:	d919      	bls.n	800f83c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f808:	79fa      	ldrb	r2, [r7, #7]
 800f80a:	4613      	mov	r3, r2
 800f80c:	005b      	lsls	r3, r3, #1
 800f80e:	4413      	add	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	4a2e      	ldr	r2, [pc, #184]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f814:	4413      	add	r3, r2
 800f816:	3304      	adds	r3, #4
 800f818:	4619      	mov	r1, r3
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f000 fb4c 	bl	800feb8 <etharp_request>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d138      	bne.n	800f898 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f826:	79fa      	ldrb	r2, [r7, #7]
 800f828:	4928      	ldr	r1, [pc, #160]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f82a:	4613      	mov	r3, r2
 800f82c:	005b      	lsls	r3, r3, #1
 800f82e:	4413      	add	r3, r2
 800f830:	00db      	lsls	r3, r3, #3
 800f832:	440b      	add	r3, r1
 800f834:	3314      	adds	r3, #20
 800f836:	2203      	movs	r2, #3
 800f838:	701a      	strb	r2, [r3, #0]
 800f83a:	e02d      	b.n	800f898 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f83c:	79fa      	ldrb	r2, [r7, #7]
 800f83e:	4923      	ldr	r1, [pc, #140]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f840:	4613      	mov	r3, r2
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	4413      	add	r3, r2
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	440b      	add	r3, r1
 800f84a:	3312      	adds	r3, #18
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f852:	d321      	bcc.n	800f898 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f854:	79fa      	ldrb	r2, [r7, #7]
 800f856:	4613      	mov	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	4413      	add	r3, r2
 800f85c:	00db      	lsls	r3, r3, #3
 800f85e:	4a1b      	ldr	r2, [pc, #108]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f860:	4413      	add	r3, r2
 800f862:	1d19      	adds	r1, r3, #4
 800f864:	79fa      	ldrb	r2, [r7, #7]
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	3308      	adds	r3, #8
 800f870:	4a16      	ldr	r2, [pc, #88]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f872:	4413      	add	r3, r2
 800f874:	3304      	adds	r3, #4
 800f876:	461a      	mov	r2, r3
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f000 fafb 	bl	800fe74 <etharp_request_dst>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d109      	bne.n	800f898 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f884:	79fa      	ldrb	r2, [r7, #7]
 800f886:	4911      	ldr	r1, [pc, #68]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f888:	4613      	mov	r3, r2
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	4413      	add	r3, r2
 800f88e:	00db      	lsls	r3, r3, #3
 800f890:	440b      	add	r3, r1
 800f892:	3314      	adds	r3, #20
 800f894:	2203      	movs	r2, #3
 800f896:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f89e:	79fa      	ldrb	r2, [r7, #7]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	005b      	lsls	r3, r3, #1
 800f8a4:	4413      	add	r3, r2
 800f8a6:	00db      	lsls	r3, r3, #3
 800f8a8:	3308      	adds	r3, #8
 800f8aa:	4a08      	ldr	r2, [pc, #32]	; (800f8cc <etharp_output_to_arp_index+0x124>)
 800f8ac:	4413      	add	r3, r2
 800f8ae:	3304      	adds	r3, #4
 800f8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8b4:	9200      	str	r2, [sp, #0]
 800f8b6:	460a      	mov	r2, r1
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f001 fe3a 	bl	8011534 <ethernet_output>
 800f8c0:	4603      	mov	r3, r0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20000594 	.word	0x20000594
 800f8d0:	08015d44 	.word	0x08015d44
 800f8d4:	08015eb4 	.word	0x08015eb4
 800f8d8:	08015dbc 	.word	0x08015dbc

0800f8dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08a      	sub	sp, #40	; 0x28
 800f8e0:	af02      	add	r7, sp, #8
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d106      	bne.n	800f900 <etharp_output+0x24>
 800f8f2:	4b73      	ldr	r3, [pc, #460]	; (800fac0 <etharp_output+0x1e4>)
 800f8f4:	f240 321e 	movw	r2, #798	; 0x31e
 800f8f8:	4972      	ldr	r1, [pc, #456]	; (800fac4 <etharp_output+0x1e8>)
 800f8fa:	4873      	ldr	r0, [pc, #460]	; (800fac8 <etharp_output+0x1ec>)
 800f8fc:	f001 ff82 	bl	8011804 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <etharp_output+0x38>
 800f906:	4b6e      	ldr	r3, [pc, #440]	; (800fac0 <etharp_output+0x1e4>)
 800f908:	f240 321f 	movw	r2, #799	; 0x31f
 800f90c:	496f      	ldr	r1, [pc, #444]	; (800facc <etharp_output+0x1f0>)
 800f90e:	486e      	ldr	r0, [pc, #440]	; (800fac8 <etharp_output+0x1ec>)
 800f910:	f001 ff78 	bl	8011804 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d106      	bne.n	800f928 <etharp_output+0x4c>
 800f91a:	4b69      	ldr	r3, [pc, #420]	; (800fac0 <etharp_output+0x1e4>)
 800f91c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f920:	496b      	ldr	r1, [pc, #428]	; (800fad0 <etharp_output+0x1f4>)
 800f922:	4869      	ldr	r0, [pc, #420]	; (800fac8 <etharp_output+0x1ec>)
 800f924:	f001 ff6e 	bl	8011804 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68f9      	ldr	r1, [r7, #12]
 800f92e:	4618      	mov	r0, r3
 800f930:	f000 fef8 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f93a:	4b66      	ldr	r3, [pc, #408]	; (800fad4 <etharp_output+0x1f8>)
 800f93c:	61fb      	str	r3, [r7, #28]
 800f93e:	e0af      	b.n	800faa0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f948:	2be0      	cmp	r3, #224	; 0xe0
 800f94a:	d118      	bne.n	800f97e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f94c:	2301      	movs	r3, #1
 800f94e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f950:	2300      	movs	r3, #0
 800f952:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f954:	235e      	movs	r3, #94	; 0x5e
 800f956:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3301      	adds	r3, #1
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f962:	b2db      	uxtb	r3, r3
 800f964:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3302      	adds	r3, #2
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	3303      	adds	r3, #3
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f976:	f107 0310 	add.w	r3, r7, #16
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	e090      	b.n	800faa0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3304      	adds	r3, #4
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	405a      	eors	r2, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	3308      	adds	r3, #8
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4013      	ands	r3, r2
 800f992:	2b00      	cmp	r3, #0
 800f994:	d012      	beq.n	800f9bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f99c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d00b      	beq.n	800f9bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	330c      	adds	r3, #12
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	330c      	adds	r3, #12
 800f9b2:	61bb      	str	r3, [r7, #24]
 800f9b4:	e002      	b.n	800f9bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f9b6:	f06f 0303 	mvn.w	r3, #3
 800f9ba:	e07d      	b.n	800fab8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f9bc:	4b46      	ldr	r3, [pc, #280]	; (800fad8 <etharp_output+0x1fc>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4a46      	ldr	r2, [pc, #280]	; (800fadc <etharp_output+0x200>)
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	440b      	add	r3, r1
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	4413      	add	r3, r2
 800f9ce:	3314      	adds	r3, #20
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d925      	bls.n	800fa22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f9d6:	4b40      	ldr	r3, [pc, #256]	; (800fad8 <etharp_output+0x1fc>)
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4a3f      	ldr	r2, [pc, #252]	; (800fadc <etharp_output+0x200>)
 800f9de:	460b      	mov	r3, r1
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	440b      	add	r3, r1
 800f9e4:	00db      	lsls	r3, r3, #3
 800f9e6:	4413      	add	r3, r2
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d117      	bne.n	800fa22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	4b38      	ldr	r3, [pc, #224]	; (800fad8 <etharp_output+0x1fc>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	4937      	ldr	r1, [pc, #220]	; (800fadc <etharp_output+0x200>)
 800f9fe:	4603      	mov	r3, r0
 800fa00:	005b      	lsls	r3, r3, #1
 800fa02:	4403      	add	r3, r0
 800fa04:	00db      	lsls	r3, r3, #3
 800fa06:	440b      	add	r3, r1
 800fa08:	3304      	adds	r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d108      	bne.n	800fa22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fa10:	4b31      	ldr	r3, [pc, #196]	; (800fad8 <etharp_output+0x1fc>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	461a      	mov	r2, r3
 800fa16:	68b9      	ldr	r1, [r7, #8]
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f7ff fec5 	bl	800f7a8 <etharp_output_to_arp_index>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	e04a      	b.n	800fab8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fa22:	2300      	movs	r3, #0
 800fa24:	75fb      	strb	r3, [r7, #23]
 800fa26:	e031      	b.n	800fa8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa28:	7dfa      	ldrb	r2, [r7, #23]
 800fa2a:	492c      	ldr	r1, [pc, #176]	; (800fadc <etharp_output+0x200>)
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	4413      	add	r3, r2
 800fa32:	00db      	lsls	r3, r3, #3
 800fa34:	440b      	add	r3, r1
 800fa36:	3314      	adds	r3, #20
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d923      	bls.n	800fa86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fa3e:	7dfa      	ldrb	r2, [r7, #23]
 800fa40:	4926      	ldr	r1, [pc, #152]	; (800fadc <etharp_output+0x200>)
 800fa42:	4613      	mov	r3, r2
 800fa44:	005b      	lsls	r3, r3, #1
 800fa46:	4413      	add	r3, r2
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	440b      	add	r3, r1
 800fa4c:	3308      	adds	r3, #8
 800fa4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d117      	bne.n	800fa86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	6819      	ldr	r1, [r3, #0]
 800fa5a:	7dfa      	ldrb	r2, [r7, #23]
 800fa5c:	481f      	ldr	r0, [pc, #124]	; (800fadc <etharp_output+0x200>)
 800fa5e:	4613      	mov	r3, r2
 800fa60:	005b      	lsls	r3, r3, #1
 800fa62:	4413      	add	r3, r2
 800fa64:	00db      	lsls	r3, r3, #3
 800fa66:	4403      	add	r3, r0
 800fa68:	3304      	adds	r3, #4
 800fa6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fa6c:	4299      	cmp	r1, r3
 800fa6e:	d10a      	bne.n	800fa86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fa70:	4a19      	ldr	r2, [pc, #100]	; (800fad8 <etharp_output+0x1fc>)
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fa76:	7dfb      	ldrb	r3, [r7, #23]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7ff fe93 	bl	800f7a8 <etharp_output_to_arp_index>
 800fa82:	4603      	mov	r3, r0
 800fa84:	e018      	b.n	800fab8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	75fb      	strb	r3, [r7, #23]
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	2b09      	cmp	r3, #9
 800fa90:	d9ca      	bls.n	800fa28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	69b9      	ldr	r1, [r7, #24]
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f000 f822 	bl	800fae0 <etharp_query>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	e00b      	b.n	800fab8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800faa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	68b9      	ldr	r1, [r7, #8]
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f001 fd3f 	bl	8011534 <ethernet_output>
 800fab6:	4603      	mov	r3, r0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3720      	adds	r7, #32
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	08015d44 	.word	0x08015d44
 800fac4:	08015e94 	.word	0x08015e94
 800fac8:	08015dbc 	.word	0x08015dbc
 800facc:	08015ee4 	.word	0x08015ee4
 800fad0:	08015e84 	.word	0x08015e84
 800fad4:	08017f00 	.word	0x08017f00
 800fad8:	20000684 	.word	0x20000684
 800fadc:	20000594 	.word	0x20000594

0800fae0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08c      	sub	sp, #48	; 0x30
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	3326      	adds	r3, #38	; 0x26
 800faf0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800faf2:	23ff      	movs	r3, #255	; 0xff
 800faf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	68f9      	ldr	r1, [r7, #12]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f000 fe0e 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10c      	bne.n	800fb28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb16:	2be0      	cmp	r3, #224	; 0xe0
 800fb18:	d006      	beq.n	800fb28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d102      	bne.n	800fb2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fb28:	f06f 030f 	mvn.w	r3, #15
 800fb2c:	e101      	b.n	800fd32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	2101      	movs	r1, #1
 800fb32:	68b8      	ldr	r0, [r7, #8]
 800fb34:	f7ff fb60 	bl	800f1f8 <etharp_find_entry>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fb3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	da02      	bge.n	800fb4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fb44:	8a7b      	ldrh	r3, [r7, #18]
 800fb46:	b25b      	sxtb	r3, r3
 800fb48:	e0f3      	b.n	800fd32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fb4a:	8a7b      	ldrh	r3, [r7, #18]
 800fb4c:	2b7e      	cmp	r3, #126	; 0x7e
 800fb4e:	d906      	bls.n	800fb5e <etharp_query+0x7e>
 800fb50:	4b7a      	ldr	r3, [pc, #488]	; (800fd3c <etharp_query+0x25c>)
 800fb52:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fb56:	497a      	ldr	r1, [pc, #488]	; (800fd40 <etharp_query+0x260>)
 800fb58:	487a      	ldr	r0, [pc, #488]	; (800fd44 <etharp_query+0x264>)
 800fb5a:	f001 fe53 	bl	8011804 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fb5e:	8a7b      	ldrh	r3, [r7, #18]
 800fb60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fb62:	7c7a      	ldrb	r2, [r7, #17]
 800fb64:	4978      	ldr	r1, [pc, #480]	; (800fd48 <etharp_query+0x268>)
 800fb66:	4613      	mov	r3, r2
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	4413      	add	r3, r2
 800fb6c:	00db      	lsls	r3, r3, #3
 800fb6e:	440b      	add	r3, r1
 800fb70:	3314      	adds	r3, #20
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d115      	bne.n	800fba4 <etharp_query+0xc4>
    is_new_entry = 1;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fb7c:	7c7a      	ldrb	r2, [r7, #17]
 800fb7e:	4972      	ldr	r1, [pc, #456]	; (800fd48 <etharp_query+0x268>)
 800fb80:	4613      	mov	r3, r2
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	4413      	add	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	440b      	add	r3, r1
 800fb8a:	3314      	adds	r3, #20
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fb90:	7c7a      	ldrb	r2, [r7, #17]
 800fb92:	496d      	ldr	r1, [pc, #436]	; (800fd48 <etharp_query+0x268>)
 800fb94:	4613      	mov	r3, r2
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	4413      	add	r3, r2
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3308      	adds	r3, #8
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fba4:	7c7a      	ldrb	r2, [r7, #17]
 800fba6:	4968      	ldr	r1, [pc, #416]	; (800fd48 <etharp_query+0x268>)
 800fba8:	4613      	mov	r3, r2
 800fbaa:	005b      	lsls	r3, r3, #1
 800fbac:	4413      	add	r3, r2
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	440b      	add	r3, r1
 800fbb2:	3314      	adds	r3, #20
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d011      	beq.n	800fbde <etharp_query+0xfe>
 800fbba:	7c7a      	ldrb	r2, [r7, #17]
 800fbbc:	4962      	ldr	r1, [pc, #392]	; (800fd48 <etharp_query+0x268>)
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	005b      	lsls	r3, r3, #1
 800fbc2:	4413      	add	r3, r2
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	440b      	add	r3, r1
 800fbc8:	3314      	adds	r3, #20
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d806      	bhi.n	800fbde <etharp_query+0xfe>
 800fbd0:	4b5a      	ldr	r3, [pc, #360]	; (800fd3c <etharp_query+0x25c>)
 800fbd2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fbd6:	495d      	ldr	r1, [pc, #372]	; (800fd4c <etharp_query+0x26c>)
 800fbd8:	485a      	ldr	r0, [pc, #360]	; (800fd44 <etharp_query+0x264>)
 800fbda:	f001 fe13 	bl	8011804 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fbde:	6a3b      	ldr	r3, [r7, #32]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <etharp_query+0x10a>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d10c      	bne.n	800fc04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fbea:	68b9      	ldr	r1, [r7, #8]
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f000 f963 	bl	800feb8 <etharp_request>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d102      	bne.n	800fc04 <etharp_query+0x124>
      return result;
 800fbfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc02:	e096      	b.n	800fd32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d106      	bne.n	800fc18 <etharp_query+0x138>
 800fc0a:	4b4c      	ldr	r3, [pc, #304]	; (800fd3c <etharp_query+0x25c>)
 800fc0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fc10:	494f      	ldr	r1, [pc, #316]	; (800fd50 <etharp_query+0x270>)
 800fc12:	484c      	ldr	r0, [pc, #304]	; (800fd44 <etharp_query+0x264>)
 800fc14:	f001 fdf6 	bl	8011804 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fc18:	7c7a      	ldrb	r2, [r7, #17]
 800fc1a:	494b      	ldr	r1, [pc, #300]	; (800fd48 <etharp_query+0x268>)
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	4413      	add	r3, r2
 800fc22:	00db      	lsls	r3, r3, #3
 800fc24:	440b      	add	r3, r1
 800fc26:	3314      	adds	r3, #20
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d917      	bls.n	800fc5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fc2e:	4a49      	ldr	r2, [pc, #292]	; (800fd54 <etharp_query+0x274>)
 800fc30:	7c7b      	ldrb	r3, [r7, #17]
 800fc32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fc34:	7c7a      	ldrb	r2, [r7, #17]
 800fc36:	4613      	mov	r3, r2
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	4413      	add	r3, r2
 800fc3c:	00db      	lsls	r3, r3, #3
 800fc3e:	3308      	adds	r3, #8
 800fc40:	4a41      	ldr	r2, [pc, #260]	; (800fd48 <etharp_query+0x268>)
 800fc42:	4413      	add	r3, r2
 800fc44:	3304      	adds	r3, #4
 800fc46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc4a:	9200      	str	r2, [sp, #0]
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	6879      	ldr	r1, [r7, #4]
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f001 fc6f 	bl	8011534 <ethernet_output>
 800fc56:	4603      	mov	r3, r0
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc5c:	e067      	b.n	800fd2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fc5e:	7c7a      	ldrb	r2, [r7, #17]
 800fc60:	4939      	ldr	r1, [pc, #228]	; (800fd48 <etharp_query+0x268>)
 800fc62:	4613      	mov	r3, r2
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	4413      	add	r3, r2
 800fc68:	00db      	lsls	r3, r3, #3
 800fc6a:	440b      	add	r3, r1
 800fc6c:	3314      	adds	r3, #20
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d15c      	bne.n	800fd2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fc7c:	e01c      	b.n	800fcb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	895a      	ldrh	r2, [r3, #10]
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	891b      	ldrh	r3, [r3, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d10a      	bne.n	800fca0 <etharp_query+0x1c0>
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d006      	beq.n	800fca0 <etharp_query+0x1c0>
 800fc92:	4b2a      	ldr	r3, [pc, #168]	; (800fd3c <etharp_query+0x25c>)
 800fc94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fc98:	492f      	ldr	r1, [pc, #188]	; (800fd58 <etharp_query+0x278>)
 800fc9a:	482a      	ldr	r0, [pc, #168]	; (800fd44 <etharp_query+0x264>)
 800fc9c:	f001 fdb2 	bl	8011804 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	7b1b      	ldrb	r3, [r3, #12]
 800fca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d002      	beq.n	800fcb2 <etharp_query+0x1d2>
        copy_needed = 1;
 800fcac:	2301      	movs	r3, #1
 800fcae:	61bb      	str	r3, [r7, #24]
        break;
 800fcb0:	e005      	b.n	800fcbe <etharp_query+0x1de>
      }
      p = p->next;
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1df      	bne.n	800fc7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d007      	beq.n	800fcd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fcca:	200e      	movs	r0, #14
 800fccc:	f7f8 fe2e 	bl	800892c <pbuf_clone>
 800fcd0:	61f8      	str	r0, [r7, #28]
 800fcd2:	e004      	b.n	800fcde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fcd8:	69f8      	ldr	r0, [r7, #28]
 800fcda:	f7f8 fc6b 	bl	80085b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d021      	beq.n	800fd28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fce4:	7c7a      	ldrb	r2, [r7, #17]
 800fce6:	4918      	ldr	r1, [pc, #96]	; (800fd48 <etharp_query+0x268>)
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	440b      	add	r3, r1
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fcf8:	7c7a      	ldrb	r2, [r7, #17]
 800fcfa:	4913      	ldr	r1, [pc, #76]	; (800fd48 <etharp_query+0x268>)
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	4413      	add	r3, r2
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	440b      	add	r3, r1
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7f8 fbb3 	bl	8008474 <pbuf_free>
      }
      arp_table[i].q = p;
 800fd0e:	7c7a      	ldrb	r2, [r7, #17]
 800fd10:	490d      	ldr	r1, [pc, #52]	; (800fd48 <etharp_query+0x268>)
 800fd12:	4613      	mov	r3, r2
 800fd14:	005b      	lsls	r3, r3, #1
 800fd16:	4413      	add	r3, r2
 800fd18:	00db      	lsls	r3, r3, #3
 800fd1a:	440b      	add	r3, r1
 800fd1c:	69fa      	ldr	r2, [r7, #28]
 800fd1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd26:	e002      	b.n	800fd2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fd28:	23ff      	movs	r3, #255	; 0xff
 800fd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fd2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3728      	adds	r7, #40	; 0x28
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	08015d44 	.word	0x08015d44
 800fd40:	08015ef0 	.word	0x08015ef0
 800fd44:	08015dbc 	.word	0x08015dbc
 800fd48:	20000594 	.word	0x20000594
 800fd4c:	08015f00 	.word	0x08015f00
 800fd50:	08015ee4 	.word	0x08015ee4
 800fd54:	20000684 	.word	0x20000684
 800fd58:	08015f28 	.word	0x08015f28

0800fd5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08a      	sub	sp, #40	; 0x28
 800fd60:	af02      	add	r7, sp, #8
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
 800fd68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d106      	bne.n	800fd82 <etharp_raw+0x26>
 800fd74:	4b3a      	ldr	r3, [pc, #232]	; (800fe60 <etharp_raw+0x104>)
 800fd76:	f240 4257 	movw	r2, #1111	; 0x457
 800fd7a:	493a      	ldr	r1, [pc, #232]	; (800fe64 <etharp_raw+0x108>)
 800fd7c:	483a      	ldr	r0, [pc, #232]	; (800fe68 <etharp_raw+0x10c>)
 800fd7e:	f001 fd41 	bl	8011804 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fd82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd86:	211c      	movs	r1, #28
 800fd88:	200e      	movs	r0, #14
 800fd8a:	f7f8 f88b 	bl	8007ea4 <pbuf_alloc>
 800fd8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd9a:	e05d      	b.n	800fe58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	895b      	ldrh	r3, [r3, #10]
 800fda0:	2b1b      	cmp	r3, #27
 800fda2:	d806      	bhi.n	800fdb2 <etharp_raw+0x56>
 800fda4:	4b2e      	ldr	r3, [pc, #184]	; (800fe60 <etharp_raw+0x104>)
 800fda6:	f240 4262 	movw	r2, #1122	; 0x462
 800fdaa:	4930      	ldr	r1, [pc, #192]	; (800fe6c <etharp_raw+0x110>)
 800fdac:	482e      	ldr	r0, [pc, #184]	; (800fe68 <etharp_raw+0x10c>)
 800fdae:	f001 fd29 	bl	8011804 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fdb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7f6 ffc4 	bl	8006d48 <lwip_htons>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdce:	2b06      	cmp	r3, #6
 800fdd0:	d006      	beq.n	800fde0 <etharp_raw+0x84>
 800fdd2:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <etharp_raw+0x104>)
 800fdd4:	f240 4269 	movw	r2, #1129	; 0x469
 800fdd8:	4925      	ldr	r1, [pc, #148]	; (800fe70 <etharp_raw+0x114>)
 800fdda:	4823      	ldr	r0, [pc, #140]	; (800fe68 <etharp_raw+0x10c>)
 800fddc:	f001 fd12 	bl	8011804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	3308      	adds	r3, #8
 800fde4:	2206      	movs	r2, #6
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f001 fc31 	bl	8011650 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	3312      	adds	r3, #18
 800fdf2:	2206      	movs	r2, #6
 800fdf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f001 fc2a 	bl	8011650 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	330e      	adds	r3, #14
 800fe00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe02:	6812      	ldr	r2, [r2, #0]
 800fe04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	3318      	adds	r3, #24
 800fe0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe0c:	6812      	ldr	r2, [r2, #0]
 800fe0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2200      	movs	r2, #0
 800fe14:	701a      	strb	r2, [r3, #0]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f042 0201 	orr.w	r2, r2, #1
 800fe1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	2200      	movs	r2, #0
 800fe22:	f042 0208 	orr.w	r2, r2, #8
 800fe26:	709a      	strb	r2, [r3, #2]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	2206      	movs	r2, #6
 800fe30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2204      	movs	r2, #4
 800fe36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fe38:	f640 0306 	movw	r3, #2054	; 0x806
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	69b9      	ldr	r1, [r7, #24]
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f001 fb75 	bl	8011534 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fe4a:	69b8      	ldr	r0, [r7, #24]
 800fe4c:	f7f8 fb12 	bl	8008474 <pbuf_free>
  p = NULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fe54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3720      	adds	r7, #32
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	08015d44 	.word	0x08015d44
 800fe64:	08015e94 	.word	0x08015e94
 800fe68:	08015dbc 	.word	0x08015dbc
 800fe6c:	08015f44 	.word	0x08015f44
 800fe70:	08015f78 	.word	0x08015f78

0800fe74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b088      	sub	sp, #32
 800fe78:	af04      	add	r7, sp, #16
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fe90:	2201      	movs	r2, #1
 800fe92:	9203      	str	r2, [sp, #12]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	9202      	str	r2, [sp, #8]
 800fe98:	4a06      	ldr	r2, [pc, #24]	; (800feb4 <etharp_request_dst+0x40>)
 800fe9a:	9201      	str	r2, [sp, #4]
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	4603      	mov	r3, r0
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7ff ff5a 	bl	800fd5c <etharp_raw>
 800fea8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	08017f08 	.word	0x08017f08

0800feb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fec2:	4a05      	ldr	r2, [pc, #20]	; (800fed8 <etharp_request+0x20>)
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff ffd4 	bl	800fe74 <etharp_request_dst>
 800fecc:	4603      	mov	r3, r0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	08017f00 	.word	0x08017f00

0800fedc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08e      	sub	sp, #56	; 0x38
 800fee0:	af04      	add	r7, sp, #16
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fee6:	4b79      	ldr	r3, [pc, #484]	; (80100cc <icmp_input+0x1f0>)
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800feec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f003 030f 	and.w	r3, r3, #15
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fefc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fefe:	2b13      	cmp	r3, #19
 800ff00:	f240 80cd 	bls.w	801009e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	895b      	ldrh	r3, [r3, #10]
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	f240 80ca 	bls.w	80100a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ff18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 80b7 	beq.w	8010090 <icmp_input+0x1b4>
 800ff22:	2b08      	cmp	r3, #8
 800ff24:	f040 80b7 	bne.w	8010096 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ff28:	4b69      	ldr	r3, [pc, #420]	; (80100d0 <icmp_input+0x1f4>)
 800ff2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ff2c:	4b67      	ldr	r3, [pc, #412]	; (80100cc <icmp_input+0x1f0>)
 800ff2e:	695b      	ldr	r3, [r3, #20]
 800ff30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff34:	2be0      	cmp	r3, #224	; 0xe0
 800ff36:	f000 80bb 	beq.w	80100b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ff3a:	4b64      	ldr	r3, [pc, #400]	; (80100cc <icmp_input+0x1f0>)
 800ff3c:	695b      	ldr	r3, [r3, #20]
 800ff3e:	4a63      	ldr	r2, [pc, #396]	; (80100cc <icmp_input+0x1f0>)
 800ff40:	6812      	ldr	r2, [r2, #0]
 800ff42:	4611      	mov	r1, r2
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 fbed 	bl	8010724 <ip4_addr_isbroadcast_u32>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f040 80b1 	bne.w	80100b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	891b      	ldrh	r3, [r3, #8]
 800ff56:	2b07      	cmp	r3, #7
 800ff58:	f240 80a5 	bls.w	80100a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff5e:	330e      	adds	r3, #14
 800ff60:	4619      	mov	r1, r3
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7f8 f9f0 	bl	8008348 <pbuf_add_header>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d04b      	beq.n	8010006 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	891a      	ldrh	r2, [r3, #8]
 800ff72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff74:	4413      	add	r3, r2
 800ff76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	8b7a      	ldrh	r2, [r7, #26]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	f0c0 809a 	bcc.w	80100b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ff84:	8b7b      	ldrh	r3, [r7, #26]
 800ff86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	200e      	movs	r0, #14
 800ff8e:	f7f7 ff89 	bl	8007ea4 <pbuf_alloc>
 800ff92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f000 8090 	beq.w	80100bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	895b      	ldrh	r3, [r3, #10]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffa4:	3308      	adds	r3, #8
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d203      	bcs.n	800ffb2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ffaa:	6978      	ldr	r0, [r7, #20]
 800ffac:	f7f8 fa62 	bl	8008474 <pbuf_free>
          goto icmperr;
 800ffb0:	e085      	b.n	80100be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ffb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f001 fb48 	bl	8011650 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ffc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6978      	ldr	r0, [r7, #20]
 800ffc6:	f7f8 f9cf 	bl	8008368 <pbuf_remove_header>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d009      	beq.n	800ffe4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ffd0:	4b40      	ldr	r3, [pc, #256]	; (80100d4 <icmp_input+0x1f8>)
 800ffd2:	22b6      	movs	r2, #182	; 0xb6
 800ffd4:	4940      	ldr	r1, [pc, #256]	; (80100d8 <icmp_input+0x1fc>)
 800ffd6:	4841      	ldr	r0, [pc, #260]	; (80100dc <icmp_input+0x200>)
 800ffd8:	f001 fc14 	bl	8011804 <iprintf>
          pbuf_free(r);
 800ffdc:	6978      	ldr	r0, [r7, #20]
 800ffde:	f7f8 fa49 	bl	8008474 <pbuf_free>
          goto icmperr;
 800ffe2:	e06c      	b.n	80100be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ffe4:	6879      	ldr	r1, [r7, #4]
 800ffe6:	6978      	ldr	r0, [r7, #20]
 800ffe8:	f7f8 fb5c 	bl	80086a4 <pbuf_copy>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d003      	beq.n	800fffa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fff2:	6978      	ldr	r0, [r7, #20]
 800fff4:	f7f8 fa3e 	bl	8008474 <pbuf_free>
          goto icmperr;
 800fff8:	e061      	b.n	80100be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7f8 fa3a 	bl	8008474 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	607b      	str	r3, [r7, #4]
 8010004:	e00f      	b.n	8010026 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010008:	330e      	adds	r3, #14
 801000a:	4619      	mov	r1, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7f8 f9ab 	bl	8008368 <pbuf_remove_header>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d006      	beq.n	8010026 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010018:	4b2e      	ldr	r3, [pc, #184]	; (80100d4 <icmp_input+0x1f8>)
 801001a:	22c7      	movs	r2, #199	; 0xc7
 801001c:	4930      	ldr	r1, [pc, #192]	; (80100e0 <icmp_input+0x204>)
 801001e:	482f      	ldr	r0, [pc, #188]	; (80100dc <icmp_input+0x200>)
 8010020:	f001 fbf0 	bl	8011804 <iprintf>
          goto icmperr;
 8010024:	e04b      	b.n	80100be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801002c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7f8 f989 	bl	8008348 <pbuf_add_header>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d12b      	bne.n	8010094 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801004a:	4b20      	ldr	r3, [pc, #128]	; (80100cc <icmp_input+0x1f0>)
 801004c:	691a      	ldr	r2, [r3, #16]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	2200      	movs	r2, #0
 801005c:	709a      	strb	r2, [r3, #2]
 801005e:	2200      	movs	r2, #0
 8010060:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	22ff      	movs	r2, #255	; 0xff
 8010066:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	729a      	strb	r2, [r3, #10]
 801006e:	2200      	movs	r2, #0
 8010070:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	9302      	str	r3, [sp, #8]
 8010076:	2301      	movs	r3, #1
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	2300      	movs	r3, #0
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	23ff      	movs	r3, #255	; 0xff
 8010080:	2200      	movs	r2, #0
 8010082:	69f9      	ldr	r1, [r7, #28]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fa75 	bl	8010574 <ip4_output_if>
 801008a:	4603      	mov	r3, r0
 801008c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801008e:	e001      	b.n	8010094 <icmp_input+0x1b8>
      break;
 8010090:	bf00      	nop
 8010092:	e000      	b.n	8010096 <icmp_input+0x1ba>
      break;
 8010094:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f8 f9ec 	bl	8008474 <pbuf_free>
  return;
 801009c:	e013      	b.n	80100c6 <icmp_input+0x1ea>
    goto lenerr;
 801009e:	bf00      	nop
 80100a0:	e002      	b.n	80100a8 <icmp_input+0x1cc>
    goto lenerr;
 80100a2:	bf00      	nop
 80100a4:	e000      	b.n	80100a8 <icmp_input+0x1cc>
        goto lenerr;
 80100a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7f8 f9e3 	bl	8008474 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80100ae:	e00a      	b.n	80100c6 <icmp_input+0x1ea>
        goto icmperr;
 80100b0:	bf00      	nop
 80100b2:	e004      	b.n	80100be <icmp_input+0x1e2>
        goto icmperr;
 80100b4:	bf00      	nop
 80100b6:	e002      	b.n	80100be <icmp_input+0x1e2>
          goto icmperr;
 80100b8:	bf00      	nop
 80100ba:	e000      	b.n	80100be <icmp_input+0x1e2>
          goto icmperr;
 80100bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f8 f9d8 	bl	8008474 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80100c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80100c6:	3728      	adds	r7, #40	; 0x28
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	2000a060 	.word	0x2000a060
 80100d0:	2000a074 	.word	0x2000a074
 80100d4:	08015fbc 	.word	0x08015fbc
 80100d8:	08015ff4 	.word	0x08015ff4
 80100dc:	0801602c 	.word	0x0801602c
 80100e0:	08016054 	.word	0x08016054

080100e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	460b      	mov	r3, r1
 80100ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80100f0:	78fb      	ldrb	r3, [r7, #3]
 80100f2:	461a      	mov	r2, r3
 80100f4:	2103      	movs	r1, #3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f814 	bl	8010124 <icmp_send_response>
}
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	460b      	mov	r3, r1
 801010e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010110:	78fb      	ldrb	r3, [r7, #3]
 8010112:	461a      	mov	r2, r3
 8010114:	210b      	movs	r1, #11
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f804 	bl	8010124 <icmp_send_response>
}
 801011c:	bf00      	nop
 801011e:	3708      	adds	r7, #8
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08c      	sub	sp, #48	; 0x30
 8010128:	af04      	add	r7, sp, #16
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	460b      	mov	r3, r1
 801012e:	70fb      	strb	r3, [r7, #3]
 8010130:	4613      	mov	r3, r2
 8010132:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010134:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010138:	2124      	movs	r1, #36	; 0x24
 801013a:	2022      	movs	r0, #34	; 0x22
 801013c:	f7f7 feb2 	bl	8007ea4 <pbuf_alloc>
 8010140:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d04c      	beq.n	80101e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	895b      	ldrh	r3, [r3, #10]
 801014c:	2b23      	cmp	r3, #35	; 0x23
 801014e:	d806      	bhi.n	801015e <icmp_send_response+0x3a>
 8010150:	4b26      	ldr	r3, [pc, #152]	; (80101ec <icmp_send_response+0xc8>)
 8010152:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010156:	4926      	ldr	r1, [pc, #152]	; (80101f0 <icmp_send_response+0xcc>)
 8010158:	4826      	ldr	r0, [pc, #152]	; (80101f4 <icmp_send_response+0xd0>)
 801015a:	f001 fb53 	bl	8011804 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	78fa      	ldrb	r2, [r7, #3]
 801016e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	78ba      	ldrb	r2, [r7, #2]
 8010174:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2200      	movs	r2, #0
 801017a:	711a      	strb	r2, [r3, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	2200      	movs	r2, #0
 8010184:	719a      	strb	r2, [r3, #6]
 8010186:	2200      	movs	r2, #0
 8010188:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	f103 0008 	add.w	r0, r3, #8
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	221c      	movs	r2, #28
 8010198:	4619      	mov	r1, r3
 801019a:	f001 fa59 	bl	8011650 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80101a4:	f107 030c 	add.w	r3, r7, #12
 80101a8:	4618      	mov	r0, r3
 80101aa:	f000 f825 	bl	80101f8 <ip4_route>
 80101ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d011      	beq.n	80101da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2200      	movs	r2, #0
 80101ba:	709a      	strb	r2, [r3, #2]
 80101bc:	2200      	movs	r2, #0
 80101be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80101c0:	f107 020c 	add.w	r2, r7, #12
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	9302      	str	r3, [sp, #8]
 80101c8:	2301      	movs	r3, #1
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	2300      	movs	r3, #0
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	23ff      	movs	r3, #255	; 0xff
 80101d2:	2100      	movs	r1, #0
 80101d4:	69f8      	ldr	r0, [r7, #28]
 80101d6:	f000 f9cd 	bl	8010574 <ip4_output_if>
  }
  pbuf_free(q);
 80101da:	69f8      	ldr	r0, [r7, #28]
 80101dc:	f7f8 f94a 	bl	8008474 <pbuf_free>
 80101e0:	e000      	b.n	80101e4 <icmp_send_response+0xc0>
    return;
 80101e2:	bf00      	nop
}
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	08015fbc 	.word	0x08015fbc
 80101f0:	08016088 	.word	0x08016088
 80101f4:	0801602c 	.word	0x0801602c

080101f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010200:	4b33      	ldr	r3, [pc, #204]	; (80102d0 <ip4_route+0xd8>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	60fb      	str	r3, [r7, #12]
 8010206:	e036      	b.n	8010276 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2b00      	cmp	r3, #0
 8010216:	d02b      	beq.n	8010270 <ip4_route+0x78>
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801021e:	089b      	lsrs	r3, r3, #2
 8010220:	f003 0301 	and.w	r3, r3, #1
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	d022      	beq.n	8010270 <ip4_route+0x78>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	3304      	adds	r3, #4
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01d      	beq.n	8010270 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3304      	adds	r3, #4
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	405a      	eors	r2, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	3308      	adds	r3, #8
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4013      	ands	r3, r2
 8010248:	2b00      	cmp	r3, #0
 801024a:	d101      	bne.n	8010250 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	e038      	b.n	80102c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010256:	f003 0302 	and.w	r3, r3, #2
 801025a:	2b00      	cmp	r3, #0
 801025c:	d108      	bne.n	8010270 <ip4_route+0x78>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	330c      	adds	r3, #12
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	429a      	cmp	r2, r3
 801026a:	d101      	bne.n	8010270 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	e028      	b.n	80102c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	60fb      	str	r3, [r7, #12]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1c5      	bne.n	8010208 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801027c:	4b15      	ldr	r3, [pc, #84]	; (80102d4 <ip4_route+0xdc>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d01a      	beq.n	80102ba <ip4_route+0xc2>
 8010284:	4b13      	ldr	r3, [pc, #76]	; (80102d4 <ip4_route+0xdc>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	d012      	beq.n	80102ba <ip4_route+0xc2>
 8010294:	4b0f      	ldr	r3, [pc, #60]	; (80102d4 <ip4_route+0xdc>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801029c:	f003 0304 	and.w	r3, r3, #4
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00a      	beq.n	80102ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80102a4:	4b0b      	ldr	r3, [pc, #44]	; (80102d4 <ip4_route+0xdc>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	3304      	adds	r3, #4
 80102aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d004      	beq.n	80102ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b7f      	cmp	r3, #127	; 0x7f
 80102b8:	d101      	bne.n	80102be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	e001      	b.n	80102c2 <ip4_route+0xca>
  }

  return netif_default;
 80102be:	4b05      	ldr	r3, [pc, #20]	; (80102d4 <ip4_route+0xdc>)
 80102c0:	681b      	ldr	r3, [r3, #0]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	200174d4 	.word	0x200174d4
 80102d4:	200174d8 	.word	0x200174d8

080102d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102e6:	f003 0301 	and.w	r3, r3, #1
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d016      	beq.n	801031e <ip4_input_accept+0x46>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	3304      	adds	r3, #4
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d011      	beq.n	801031e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102fa:	4b0b      	ldr	r3, [pc, #44]	; (8010328 <ip4_input_accept+0x50>)
 80102fc:	695a      	ldr	r2, [r3, #20]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	3304      	adds	r3, #4
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	429a      	cmp	r2, r3
 8010306:	d008      	beq.n	801031a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <ip4_input_accept+0x50>)
 801030a:	695b      	ldr	r3, [r3, #20]
 801030c:	6879      	ldr	r1, [r7, #4]
 801030e:	4618      	mov	r0, r3
 8010310:	f000 fa08 	bl	8010724 <ip4_addr_isbroadcast_u32>
 8010314:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010316:	2b00      	cmp	r3, #0
 8010318:	d001      	beq.n	801031e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801031a:	2301      	movs	r3, #1
 801031c:	e000      	b.n	8010320 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	2000a060 	.word	0x2000a060

0801032c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	091b      	lsrs	r3, r3, #4
 8010342:	b2db      	uxtb	r3, r3
 8010344:	2b04      	cmp	r3, #4
 8010346:	d004      	beq.n	8010352 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7f8 f893 	bl	8008474 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	e107      	b.n	8010562 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 030f 	and.w	r3, r3, #15
 801035a:	b2db      	uxtb	r3, r3
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	b2db      	uxtb	r3, r3
 8010360:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	885b      	ldrh	r3, [r3, #2]
 8010366:	b29b      	uxth	r3, r3
 8010368:	4618      	mov	r0, r3
 801036a:	f7f6 fced 	bl	8006d48 <lwip_htons>
 801036e:	4603      	mov	r3, r0
 8010370:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	891b      	ldrh	r3, [r3, #8]
 8010376:	89ba      	ldrh	r2, [r7, #12]
 8010378:	429a      	cmp	r2, r3
 801037a:	d204      	bcs.n	8010386 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801037c:	89bb      	ldrh	r3, [r7, #12]
 801037e:	4619      	mov	r1, r3
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7f7 fef1 	bl	8008168 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	895b      	ldrh	r3, [r3, #10]
 801038a:	89fa      	ldrh	r2, [r7, #14]
 801038c:	429a      	cmp	r2, r3
 801038e:	d807      	bhi.n	80103a0 <ip4_input+0x74>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	891b      	ldrh	r3, [r3, #8]
 8010394:	89ba      	ldrh	r2, [r7, #12]
 8010396:	429a      	cmp	r2, r3
 8010398:	d802      	bhi.n	80103a0 <ip4_input+0x74>
 801039a:	89fb      	ldrh	r3, [r7, #14]
 801039c:	2b13      	cmp	r3, #19
 801039e:	d804      	bhi.n	80103aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7f8 f867 	bl	8008474 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80103a6:	2300      	movs	r3, #0
 80103a8:	e0db      	b.n	8010562 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	4a6f      	ldr	r2, [pc, #444]	; (801056c <ip4_input+0x240>)
 80103b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	4a6d      	ldr	r2, [pc, #436]	; (801056c <ip4_input+0x240>)
 80103b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80103ba:	4b6c      	ldr	r3, [pc, #432]	; (801056c <ip4_input+0x240>)
 80103bc:	695b      	ldr	r3, [r3, #20]
 80103be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103c2:	2be0      	cmp	r3, #224	; 0xe0
 80103c4:	d112      	bne.n	80103ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103cc:	f003 0301 	and.w	r3, r3, #1
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d007      	beq.n	80103e6 <ip4_input+0xba>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	3304      	adds	r3, #4
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <ip4_input+0xba>
      netif = inp;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	613b      	str	r3, [r7, #16]
 80103e4:	e02a      	b.n	801043c <ip4_input+0x110>
    } else {
      netif = NULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	e027      	b.n	801043c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80103ec:	6838      	ldr	r0, [r7, #0]
 80103ee:	f7ff ff73 	bl	80102d8 <ip4_input_accept>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <ip4_input+0xd2>
      netif = inp;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	613b      	str	r3, [r7, #16]
 80103fc:	e01e      	b.n	801043c <ip4_input+0x110>
    } else {
      netif = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010402:	4b5a      	ldr	r3, [pc, #360]	; (801056c <ip4_input+0x240>)
 8010404:	695b      	ldr	r3, [r3, #20]
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b7f      	cmp	r3, #127	; 0x7f
 801040a:	d017      	beq.n	801043c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801040c:	4b58      	ldr	r3, [pc, #352]	; (8010570 <ip4_input+0x244>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	613b      	str	r3, [r7, #16]
 8010412:	e00e      	b.n	8010432 <ip4_input+0x106>
          if (netif == inp) {
 8010414:	693a      	ldr	r2, [r7, #16]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	429a      	cmp	r2, r3
 801041a:	d006      	beq.n	801042a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801041c:	6938      	ldr	r0, [r7, #16]
 801041e:	f7ff ff5b 	bl	80102d8 <ip4_input_accept>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d108      	bne.n	801043a <ip4_input+0x10e>
 8010428:	e000      	b.n	801042c <ip4_input+0x100>
            continue;
 801042a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	613b      	str	r3, [r7, #16]
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d1ed      	bne.n	8010414 <ip4_input+0xe8>
 8010438:	e000      	b.n	801043c <ip4_input+0x110>
            break;
 801043a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801043c:	4b4b      	ldr	r3, [pc, #300]	; (801056c <ip4_input+0x240>)
 801043e:	691b      	ldr	r3, [r3, #16]
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	4618      	mov	r0, r3
 8010444:	f000 f96e 	bl	8010724 <ip4_addr_isbroadcast_u32>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801044e:	4b47      	ldr	r3, [pc, #284]	; (801056c <ip4_input+0x240>)
 8010450:	691b      	ldr	r3, [r3, #16]
 8010452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010456:	2be0      	cmp	r3, #224	; 0xe0
 8010458:	d104      	bne.n	8010464 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7f8 f80a 	bl	8008474 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010460:	2300      	movs	r3, #0
 8010462:	e07e      	b.n	8010562 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d104      	bne.n	8010474 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7f8 f802 	bl	8008474 <pbuf_free>
    return ERR_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	e076      	b.n	8010562 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	b29b      	uxth	r3, r3
 801047a:	461a      	mov	r2, r3
 801047c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010480:	4013      	ands	r3, r2
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00b      	beq.n	801049e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fc92 	bl	8010db0 <ip4_reass>
 801048c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <ip4_input+0x16c>
      return ERR_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	e064      	b.n	8010562 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801049e:	4a33      	ldr	r2, [pc, #204]	; (801056c <ip4_input+0x240>)
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80104a4:	4a31      	ldr	r2, [pc, #196]	; (801056c <ip4_input+0x240>)
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80104aa:	4a30      	ldr	r2, [pc, #192]	; (801056c <ip4_input+0x240>)
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	f003 030f 	and.w	r3, r3, #15
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	b29a      	uxth	r2, r3
 80104c0:	4b2a      	ldr	r3, [pc, #168]	; (801056c <ip4_input+0x240>)
 80104c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80104c4:	89fb      	ldrh	r3, [r7, #14]
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7f7 ff4d 	bl	8008368 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	7a5b      	ldrb	r3, [r3, #9]
 80104d2:	2b11      	cmp	r3, #17
 80104d4:	d006      	beq.n	80104e4 <ip4_input+0x1b8>
 80104d6:	2b11      	cmp	r3, #17
 80104d8:	dc13      	bgt.n	8010502 <ip4_input+0x1d6>
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d00c      	beq.n	80104f8 <ip4_input+0x1cc>
 80104de:	2b06      	cmp	r3, #6
 80104e0:	d005      	beq.n	80104ee <ip4_input+0x1c2>
 80104e2:	e00e      	b.n	8010502 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7fe fc68 	bl	800edbc <udp_input>
        break;
 80104ec:	e026      	b.n	801053c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7fa f88d 	bl	800a610 <tcp_input>
        break;
 80104f6:	e021      	b.n	801053c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80104f8:	6839      	ldr	r1, [r7, #0]
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff fcee 	bl	800fedc <icmp_input>
        break;
 8010500:	e01c      	b.n	801053c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010502:	4b1a      	ldr	r3, [pc, #104]	; (801056c <ip4_input+0x240>)
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	6939      	ldr	r1, [r7, #16]
 8010508:	4618      	mov	r0, r3
 801050a:	f000 f90b 	bl	8010724 <ip4_addr_isbroadcast_u32>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10f      	bne.n	8010534 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010514:	4b15      	ldr	r3, [pc, #84]	; (801056c <ip4_input+0x240>)
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801051c:	2be0      	cmp	r3, #224	; 0xe0
 801051e:	d009      	beq.n	8010534 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7f7 ff91 	bl	800844e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801052c:	2102      	movs	r1, #2
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff fdd8 	bl	80100e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7f7 ff9d 	bl	8008474 <pbuf_free>
        break;
 801053a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801053c:	4b0b      	ldr	r3, [pc, #44]	; (801056c <ip4_input+0x240>)
 801053e:	2200      	movs	r2, #0
 8010540:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010542:	4b0a      	ldr	r3, [pc, #40]	; (801056c <ip4_input+0x240>)
 8010544:	2200      	movs	r2, #0
 8010546:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010548:	4b08      	ldr	r3, [pc, #32]	; (801056c <ip4_input+0x240>)
 801054a:	2200      	movs	r2, #0
 801054c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801054e:	4b07      	ldr	r3, [pc, #28]	; (801056c <ip4_input+0x240>)
 8010550:	2200      	movs	r2, #0
 8010552:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010554:	4b05      	ldr	r3, [pc, #20]	; (801056c <ip4_input+0x240>)
 8010556:	2200      	movs	r2, #0
 8010558:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801055a:	4b04      	ldr	r3, [pc, #16]	; (801056c <ip4_input+0x240>)
 801055c:	2200      	movs	r2, #0
 801055e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	2000a060 	.word	0x2000a060
 8010570:	200174d4 	.word	0x200174d4

08010574 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08a      	sub	sp, #40	; 0x28
 8010578:	af04      	add	r7, sp, #16
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d009      	beq.n	80105a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <ip4_output_if+0x26>
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d102      	bne.n	80105a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801059a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059c:	3304      	adds	r3, #4
 801059e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80105a0:	78fa      	ldrb	r2, [r7, #3]
 80105a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a4:	9302      	str	r3, [sp, #8]
 80105a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80105aa:	9301      	str	r3, [sp, #4]
 80105ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	4613      	mov	r3, r2
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	6979      	ldr	r1, [r7, #20]
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f000 f805 	bl	80105c8 <ip4_output_if_src>
 80105be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3718      	adds	r7, #24
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
 80105d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	7b9b      	ldrb	r3, [r3, #14]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d006      	beq.n	80105ec <ip4_output_if_src+0x24>
 80105de:	4b4b      	ldr	r3, [pc, #300]	; (801070c <ip4_output_if_src+0x144>)
 80105e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80105e4:	494a      	ldr	r1, [pc, #296]	; (8010710 <ip4_output_if_src+0x148>)
 80105e6:	484b      	ldr	r0, [pc, #300]	; (8010714 <ip4_output_if_src+0x14c>)
 80105e8:	f001 f90c 	bl	8011804 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d060      	beq.n	80106b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80105f2:	2314      	movs	r3, #20
 80105f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80105f6:	2114      	movs	r1, #20
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f7f7 fea5 	bl	8008348 <pbuf_add_header>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010604:	f06f 0301 	mvn.w	r3, #1
 8010608:	e07c      	b.n	8010704 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	895b      	ldrh	r3, [r3, #10]
 8010614:	2b13      	cmp	r3, #19
 8010616:	d806      	bhi.n	8010626 <ip4_output_if_src+0x5e>
 8010618:	4b3c      	ldr	r3, [pc, #240]	; (801070c <ip4_output_if_src+0x144>)
 801061a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801061e:	493e      	ldr	r1, [pc, #248]	; (8010718 <ip4_output_if_src+0x150>)
 8010620:	483c      	ldr	r0, [pc, #240]	; (8010714 <ip4_output_if_src+0x14c>)
 8010622:	f001 f8ef 	bl	8011804 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	78fa      	ldrb	r2, [r7, #3]
 801062a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010632:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801063c:	8b7b      	ldrh	r3, [r7, #26]
 801063e:	089b      	lsrs	r3, r3, #2
 8010640:	b29b      	uxth	r3, r3
 8010642:	b2db      	uxtb	r3, r3
 8010644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010648:	b2da      	uxtb	r2, r3
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010654:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	891b      	ldrh	r3, [r3, #8]
 801065a:	4618      	mov	r0, r3
 801065c:	f7f6 fb74 	bl	8006d48 <lwip_htons>
 8010660:	4603      	mov	r3, r0
 8010662:	461a      	mov	r2, r3
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	2200      	movs	r2, #0
 801066c:	719a      	strb	r2, [r3, #6]
 801066e:	2200      	movs	r2, #0
 8010670:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010672:	4b2a      	ldr	r3, [pc, #168]	; (801071c <ip4_output_if_src+0x154>)
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	4618      	mov	r0, r3
 8010678:	f7f6 fb66 	bl	8006d48 <lwip_htons>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010684:	4b25      	ldr	r3, [pc, #148]	; (801071c <ip4_output_if_src+0x154>)
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	3301      	adds	r3, #1
 801068a:	b29a      	uxth	r2, r3
 801068c:	4b23      	ldr	r3, [pc, #140]	; (801071c <ip4_output_if_src+0x154>)
 801068e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d104      	bne.n	80106a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010696:	4b22      	ldr	r3, [pc, #136]	; (8010720 <ip4_output_if_src+0x158>)
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	e003      	b.n	80106a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	2200      	movs	r2, #0
 80106ac:	729a      	strb	r2, [r3, #10]
 80106ae:	2200      	movs	r2, #0
 80106b0:	72da      	strb	r2, [r3, #11]
 80106b2:	e00f      	b.n	80106d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	895b      	ldrh	r3, [r3, #10]
 80106b8:	2b13      	cmp	r3, #19
 80106ba:	d802      	bhi.n	80106c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80106bc:	f06f 0301 	mvn.w	r3, #1
 80106c0:	e020      	b.n	8010704 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80106ce:	f107 0314 	add.w	r3, r7, #20
 80106d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80106d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00c      	beq.n	80106f6 <ip4_output_if_src+0x12e>
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	891a      	ldrh	r2, [r3, #8]
 80106e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d906      	bls.n	80106f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 fd4d 	bl	801118c <ip4_frag>
 80106f2:	4603      	mov	r3, r0
 80106f4:	e006      	b.n	8010704 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	68f9      	ldr	r1, [r7, #12]
 80106fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010700:	4798      	blx	r3
 8010702:	4603      	mov	r3, r0
}
 8010704:	4618      	mov	r0, r3
 8010706:	3720      	adds	r7, #32
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	080160b4 	.word	0x080160b4
 8010710:	080160e8 	.word	0x080160e8
 8010714:	080160f4 	.word	0x080160f4
 8010718:	0801611c 	.word	0x0801611c
 801071c:	20000686 	.word	0x20000686
 8010720:	08017efc 	.word	0x08017efc

08010724 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010738:	d002      	beq.n	8010740 <ip4_addr_isbroadcast_u32+0x1c>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d101      	bne.n	8010744 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010740:	2301      	movs	r3, #1
 8010742:	e02a      	b.n	801079a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801074a:	f003 0302 	and.w	r3, r3, #2
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010752:	2300      	movs	r3, #0
 8010754:	e021      	b.n	801079a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	3304      	adds	r3, #4
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	d101      	bne.n	8010766 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010762:	2300      	movs	r3, #0
 8010764:	e019      	b.n	801079a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	3304      	adds	r3, #4
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	405a      	eors	r2, r3
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	3308      	adds	r3, #8
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4013      	ands	r3, r2
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10d      	bne.n	8010798 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	43da      	mvns	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	3308      	adds	r3, #8
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010790:	429a      	cmp	r2, r3
 8010792:	d101      	bne.n	8010798 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010794:	2301      	movs	r3, #1
 8010796:	e000      	b.n	801079a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010798:	2300      	movs	r3, #0
  }
}
 801079a:	4618      	mov	r0, r3
 801079c:	3714      	adds	r7, #20
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
	...

080107a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80107ae:	2300      	movs	r3, #0
 80107b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80107b2:	4b12      	ldr	r3, [pc, #72]	; (80107fc <ip_reass_tmr+0x54>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80107b8:	e018      	b.n	80107ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	7fdb      	ldrb	r3, [r3, #31]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d00b      	beq.n	80107da <ip_reass_tmr+0x32>
      r->timer--;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	7fdb      	ldrb	r3, [r3, #31]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	e008      	b.n	80107ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f80a 	bl	8010800 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1e3      	bne.n	80107ba <ip_reass_tmr+0x12>
    }
  }
}
 80107f2:	bf00      	nop
 80107f4:	bf00      	nop
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20000688 	.word	0x20000688

08010800 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b088      	sub	sp, #32
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	429a      	cmp	r2, r3
 8010814:	d105      	bne.n	8010822 <ip_reass_free_complete_datagram+0x22>
 8010816:	4b45      	ldr	r3, [pc, #276]	; (801092c <ip_reass_free_complete_datagram+0x12c>)
 8010818:	22ab      	movs	r2, #171	; 0xab
 801081a:	4945      	ldr	r1, [pc, #276]	; (8010930 <ip_reass_free_complete_datagram+0x130>)
 801081c:	4845      	ldr	r0, [pc, #276]	; (8010934 <ip_reass_free_complete_datagram+0x134>)
 801081e:	f000 fff1 	bl	8011804 <iprintf>
  if (prev != NULL) {
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d00a      	beq.n	801083e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d005      	beq.n	801083e <ip_reass_free_complete_datagram+0x3e>
 8010832:	4b3e      	ldr	r3, [pc, #248]	; (801092c <ip_reass_free_complete_datagram+0x12c>)
 8010834:	22ad      	movs	r2, #173	; 0xad
 8010836:	4940      	ldr	r1, [pc, #256]	; (8010938 <ip_reass_free_complete_datagram+0x138>)
 8010838:	483e      	ldr	r0, [pc, #248]	; (8010934 <ip_reass_free_complete_datagram+0x134>)
 801083a:	f000 ffe3 	bl	8011804 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	889b      	ldrh	r3, [r3, #4]
 801084a:	b29b      	uxth	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d12a      	bne.n	80108a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	6858      	ldr	r0, [r3, #4]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	3308      	adds	r3, #8
 8010866:	2214      	movs	r2, #20
 8010868:	4619      	mov	r1, r3
 801086a:	f000 fef1 	bl	8011650 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801086e:	2101      	movs	r1, #1
 8010870:	69b8      	ldr	r0, [r7, #24]
 8010872:	f7ff fc47 	bl	8010104 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010876:	69b8      	ldr	r0, [r7, #24]
 8010878:	f7f7 fe84 	bl	8008584 <pbuf_clen>
 801087c:	4603      	mov	r3, r0
 801087e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010880:	8bfa      	ldrh	r2, [r7, #30]
 8010882:	8a7b      	ldrh	r3, [r7, #18]
 8010884:	4413      	add	r3, r2
 8010886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801088a:	db05      	blt.n	8010898 <ip_reass_free_complete_datagram+0x98>
 801088c:	4b27      	ldr	r3, [pc, #156]	; (801092c <ip_reass_free_complete_datagram+0x12c>)
 801088e:	22bc      	movs	r2, #188	; 0xbc
 8010890:	492a      	ldr	r1, [pc, #168]	; (801093c <ip_reass_free_complete_datagram+0x13c>)
 8010892:	4828      	ldr	r0, [pc, #160]	; (8010934 <ip_reass_free_complete_datagram+0x134>)
 8010894:	f000 ffb6 	bl	8011804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010898:	8bfa      	ldrh	r2, [r7, #30]
 801089a:	8a7b      	ldrh	r3, [r7, #18]
 801089c:	4413      	add	r3, r2
 801089e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80108a0:	69b8      	ldr	r0, [r7, #24]
 80108a2:	f7f7 fde7 	bl	8008474 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80108ac:	e01f      	b.n	80108ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7f7 fe60 	bl	8008584 <pbuf_clen>
 80108c4:	4603      	mov	r3, r0
 80108c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80108c8:	8bfa      	ldrh	r2, [r7, #30]
 80108ca:	8a7b      	ldrh	r3, [r7, #18]
 80108cc:	4413      	add	r3, r2
 80108ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108d2:	db05      	blt.n	80108e0 <ip_reass_free_complete_datagram+0xe0>
 80108d4:	4b15      	ldr	r3, [pc, #84]	; (801092c <ip_reass_free_complete_datagram+0x12c>)
 80108d6:	22cc      	movs	r2, #204	; 0xcc
 80108d8:	4918      	ldr	r1, [pc, #96]	; (801093c <ip_reass_free_complete_datagram+0x13c>)
 80108da:	4816      	ldr	r0, [pc, #88]	; (8010934 <ip_reass_free_complete_datagram+0x134>)
 80108dc:	f000 ff92 	bl	8011804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80108e0:	8bfa      	ldrh	r2, [r7, #30]
 80108e2:	8a7b      	ldrh	r3, [r7, #18]
 80108e4:	4413      	add	r3, r2
 80108e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7f7 fdc3 	bl	8008474 <pbuf_free>
  while (p != NULL) {
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1dc      	bne.n	80108ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80108f4:	6839      	ldr	r1, [r7, #0]
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f8c2 	bl	8010a80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80108fc:	4b10      	ldr	r3, [pc, #64]	; (8010940 <ip_reass_free_complete_datagram+0x140>)
 80108fe:	881b      	ldrh	r3, [r3, #0]
 8010900:	8bfa      	ldrh	r2, [r7, #30]
 8010902:	429a      	cmp	r2, r3
 8010904:	d905      	bls.n	8010912 <ip_reass_free_complete_datagram+0x112>
 8010906:	4b09      	ldr	r3, [pc, #36]	; (801092c <ip_reass_free_complete_datagram+0x12c>)
 8010908:	22d2      	movs	r2, #210	; 0xd2
 801090a:	490e      	ldr	r1, [pc, #56]	; (8010944 <ip_reass_free_complete_datagram+0x144>)
 801090c:	4809      	ldr	r0, [pc, #36]	; (8010934 <ip_reass_free_complete_datagram+0x134>)
 801090e:	f000 ff79 	bl	8011804 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010912:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <ip_reass_free_complete_datagram+0x140>)
 8010914:	881a      	ldrh	r2, [r3, #0]
 8010916:	8bfb      	ldrh	r3, [r7, #30]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	b29a      	uxth	r2, r3
 801091c:	4b08      	ldr	r3, [pc, #32]	; (8010940 <ip_reass_free_complete_datagram+0x140>)
 801091e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010920:	8bfb      	ldrh	r3, [r7, #30]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3720      	adds	r7, #32
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	0801614c 	.word	0x0801614c
 8010930:	08016188 	.word	0x08016188
 8010934:	08016194 	.word	0x08016194
 8010938:	080161bc 	.word	0x080161bc
 801093c:	080161d0 	.word	0x080161d0
 8010940:	2000068c 	.word	0x2000068c
 8010944:	080161f0 	.word	0x080161f0

08010948 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b08a      	sub	sp, #40	; 0x28
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010952:	2300      	movs	r3, #0
 8010954:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010956:	2300      	movs	r3, #0
 8010958:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801095a:	2300      	movs	r3, #0
 801095c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801095e:	2300      	movs	r3, #0
 8010960:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010962:	2300      	movs	r3, #0
 8010964:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010966:	4b28      	ldr	r3, [pc, #160]	; (8010a08 <ip_reass_remove_oldest_datagram+0xc0>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801096c:	e030      	b.n	80109d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	695a      	ldr	r2, [r3, #20]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	429a      	cmp	r2, r3
 8010978:	d10c      	bne.n	8010994 <ip_reass_remove_oldest_datagram+0x4c>
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	699a      	ldr	r2, [r3, #24]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	429a      	cmp	r2, r3
 8010984:	d106      	bne.n	8010994 <ip_reass_remove_oldest_datagram+0x4c>
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	899a      	ldrh	r2, [r3, #12]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	889b      	ldrh	r3, [r3, #4]
 801098e:	b29b      	uxth	r3, r3
 8010990:	429a      	cmp	r2, r3
 8010992:	d014      	beq.n	80109be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	3301      	adds	r3, #1
 8010998:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d104      	bne.n	80109aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	61bb      	str	r3, [r7, #24]
 80109a8:	e009      	b.n	80109be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80109aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ac:	7fda      	ldrb	r2, [r3, #31]
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	7fdb      	ldrb	r3, [r3, #31]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d803      	bhi.n	80109be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80109c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1cb      	bne.n	801096e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d008      	beq.n	80109ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80109dc:	69b9      	ldr	r1, [r7, #24]
 80109de:	6a38      	ldr	r0, [r7, #32]
 80109e0:	f7ff ff0e 	bl	8010800 <ip_reass_free_complete_datagram>
 80109e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	4413      	add	r3, r2
 80109ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80109ee:	697a      	ldr	r2, [r7, #20]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	da02      	bge.n	80109fc <ip_reass_remove_oldest_datagram+0xb4>
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	dcac      	bgt.n	8010956 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80109fc:	697b      	ldr	r3, [r7, #20]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3728      	adds	r7, #40	; 0x28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20000688 	.word	0x20000688

08010a0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010a16:	2004      	movs	r0, #4
 8010a18:	f7f6 feca 	bl	80077b0 <memp_malloc>
 8010a1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d110      	bne.n	8010a46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff ff8e 	bl	8010948 <ip_reass_remove_oldest_datagram>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	4293      	cmp	r3, r2
 8010a32:	dc03      	bgt.n	8010a3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010a34:	2004      	movs	r0, #4
 8010a36:	f7f6 febb 	bl	80077b0 <memp_malloc>
 8010a3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	e016      	b.n	8010a74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010a46:	2220      	movs	r2, #32
 8010a48:	2100      	movs	r1, #0
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f000 fe28 	bl	80116a0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	220f      	movs	r2, #15
 8010a54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010a56:	4b09      	ldr	r3, [pc, #36]	; (8010a7c <ip_reass_enqueue_new_datagram+0x70>)
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010a5e:	4a07      	ldr	r2, [pc, #28]	; (8010a7c <ip_reass_enqueue_new_datagram+0x70>)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3308      	adds	r3, #8
 8010a68:	2214      	movs	r2, #20
 8010a6a:	6879      	ldr	r1, [r7, #4]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fdef 	bl	8011650 <memcpy>
  return ipr;
 8010a72:	68fb      	ldr	r3, [r7, #12]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	20000688 	.word	0x20000688

08010a80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010a8a:	4b10      	ldr	r3, [pc, #64]	; (8010acc <ip_reass_dequeue_datagram+0x4c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d104      	bne.n	8010a9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a0c      	ldr	r2, [pc, #48]	; (8010acc <ip_reass_dequeue_datagram+0x4c>)
 8010a9a:	6013      	str	r3, [r2, #0]
 8010a9c:	e00d      	b.n	8010aba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d106      	bne.n	8010ab2 <ip_reass_dequeue_datagram+0x32>
 8010aa4:	4b0a      	ldr	r3, [pc, #40]	; (8010ad0 <ip_reass_dequeue_datagram+0x50>)
 8010aa6:	f240 1245 	movw	r2, #325	; 0x145
 8010aaa:	490a      	ldr	r1, [pc, #40]	; (8010ad4 <ip_reass_dequeue_datagram+0x54>)
 8010aac:	480a      	ldr	r0, [pc, #40]	; (8010ad8 <ip_reass_dequeue_datagram+0x58>)
 8010aae:	f000 fea9 	bl	8011804 <iprintf>
    prev->next = ipr->next;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	2004      	movs	r0, #4
 8010abe:	f7f6 fec3 	bl	8007848 <memp_free>
}
 8010ac2:	bf00      	nop
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	20000688 	.word	0x20000688
 8010ad0:	0801614c 	.word	0x0801614c
 8010ad4:	08016214 	.word	0x08016214
 8010ad8:	08016194 	.word	0x08016194

08010adc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b08c      	sub	sp, #48	; 0x30
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	60f8      	str	r0, [r7, #12]
 8010ae4:	60b9      	str	r1, [r7, #8]
 8010ae6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010aec:	2301      	movs	r3, #1
 8010aee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	885b      	ldrh	r3, [r3, #2]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7f6 f923 	bl	8006d48 <lwip_htons>
 8010b02:	4603      	mov	r3, r0
 8010b04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	f003 030f 	and.w	r3, r3, #15
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010b14:	7e7b      	ldrb	r3, [r7, #25]
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	8b7a      	ldrh	r2, [r7, #26]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d202      	bcs.n	8010b24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b22:	e135      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010b24:	7e7b      	ldrb	r3, [r7, #25]
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	8b7a      	ldrh	r2, [r7, #26]
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	88db      	ldrh	r3, [r3, #6]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f6 f907 	bl	8006d48 <lwip_htons>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4e:	2200      	movs	r2, #0
 8010b50:	701a      	strb	r2, [r3, #0]
 8010b52:	2200      	movs	r2, #0
 8010b54:	705a      	strb	r2, [r3, #1]
 8010b56:	2200      	movs	r2, #0
 8010b58:	709a      	strb	r2, [r3, #2]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b60:	8afa      	ldrh	r2, [r7, #22]
 8010b62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010b64:	8afa      	ldrh	r2, [r7, #22]
 8010b66:	8b7b      	ldrh	r3, [r7, #26]
 8010b68:	4413      	add	r3, r2
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b72:	88db      	ldrh	r3, [r3, #6]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	8afa      	ldrh	r2, [r7, #22]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d902      	bls.n	8010b82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b80:	e106      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	627b      	str	r3, [r7, #36]	; 0x24
 8010b88:	e068      	b.n	8010c5c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b92:	889b      	ldrh	r3, [r3, #4]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	889b      	ldrh	r3, [r3, #4]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d235      	bcs.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ba4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d020      	beq.n	8010bee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bae:	889b      	ldrh	r3, [r3, #4]
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb4:	88db      	ldrh	r3, [r3, #6]
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d307      	bcc.n	8010bcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbe:	88db      	ldrh	r3, [r3, #6]
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	889b      	ldrh	r3, [r3, #4]
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d902      	bls.n	8010bd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bd0:	e0de      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	88db      	ldrh	r3, [r3, #6]
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be0:	889b      	ldrh	r3, [r3, #4]
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d03d      	beq.n	8010c64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010bec:	e03a      	b.n	8010c64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf0:	88db      	ldrh	r3, [r3, #6]
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	889b      	ldrh	r3, [r3, #4]
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d902      	bls.n	8010c04 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c02:	e0c5      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	68ba      	ldr	r2, [r7, #8]
 8010c08:	605a      	str	r2, [r3, #4]
      break;
 8010c0a:	e02b      	b.n	8010c64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0e:	889b      	ldrh	r3, [r3, #4]
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	889b      	ldrh	r3, [r3, #4]
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d102      	bne.n	8010c22 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c20:	e0b6      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c24:	889b      	ldrh	r3, [r3, #4]
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	88db      	ldrh	r3, [r3, #6]
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d202      	bcs.n	8010c38 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c36:	e0ab      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d009      	beq.n	8010c52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c40:	88db      	ldrh	r3, [r3, #6]
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	889b      	ldrh	r3, [r3, #4]
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d001      	beq.n	8010c52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d193      	bne.n	8010b8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010c62:	e000      	b.n	8010c66 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010c64:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d12d      	bne.n	8010cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d01c      	beq.n	8010cac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	88db      	ldrh	r3, [r3, #6]
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	889b      	ldrh	r3, [r3, #4]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d906      	bls.n	8010c90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010c82:	4b45      	ldr	r3, [pc, #276]	; (8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c84:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010c88:	4944      	ldr	r1, [pc, #272]	; (8010d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010c8a:	4845      	ldr	r0, [pc, #276]	; (8010da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c8c:	f000 fdba 	bl	8011804 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c92:	68ba      	ldr	r2, [r7, #8]
 8010c94:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c98:	88db      	ldrh	r3, [r3, #6]
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9e:	889b      	ldrh	r3, [r3, #4]
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d010      	beq.n	8010cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	623b      	str	r3, [r7, #32]
 8010caa:	e00d      	b.n	8010cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010cb4:	4b38      	ldr	r3, [pc, #224]	; (8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cb6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010cba:	493a      	ldr	r1, [pc, #232]	; (8010da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010cbc:	4838      	ldr	r0, [pc, #224]	; (8010da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010cbe:	f000 fda1 	bl	8011804 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	68ba      	ldr	r2, [r7, #8]
 8010cc6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d105      	bne.n	8010cda <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	7f9b      	ldrb	r3, [r3, #30]
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d059      	beq.n	8010d8e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d04f      	beq.n	8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d006      	beq.n	8010cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	889b      	ldrh	r3, [r3, #4]
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	623b      	str	r3, [r7, #32]
 8010cfa:	e041      	b.n	8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010d06:	e012      	b.n	8010d2e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	88db      	ldrh	r3, [r3, #6]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d16:	889b      	ldrh	r3, [r3, #4]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d002      	beq.n	8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	623b      	str	r3, [r7, #32]
            break;
 8010d22:	e007      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e9      	bne.n	8010d08 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d022      	beq.n	8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d106      	bne.n	8010d50 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010d42:	4b15      	ldr	r3, [pc, #84]	; (8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d44:	f240 12df 	movw	r2, #479	; 0x1df
 8010d48:	4917      	ldr	r1, [pc, #92]	; (8010da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010d4a:	4815      	ldr	r0, [pc, #84]	; (8010da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d4c:	f000 fd5a 	bl	8011804 <iprintf>
          LWIP_ASSERT("sanity check",
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d106      	bne.n	8010d6a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010d5c:	4b0e      	ldr	r3, [pc, #56]	; (8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010d62:	4911      	ldr	r1, [pc, #68]	; (8010da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010d64:	480e      	ldr	r0, [pc, #56]	; (8010da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d66:	f000 fd4d 	bl	8011804 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d006      	beq.n	8010d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010d72:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d74:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010d78:	490c      	ldr	r1, [pc, #48]	; (8010dac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010d7a:	4809      	ldr	r0, [pc, #36]	; (8010da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d7c:	f000 fd42 	bl	8011804 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010d80:	6a3b      	ldr	r3, [r7, #32]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bf14      	ite	ne
 8010d86:	2301      	movne	r3, #1
 8010d88:	2300      	moveq	r3, #0
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	e000      	b.n	8010d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010d8e:	2300      	movs	r3, #0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3730      	adds	r7, #48	; 0x30
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	0801614c 	.word	0x0801614c
 8010d9c:	08016230 	.word	0x08016230
 8010da0:	08016194 	.word	0x08016194
 8010da4:	08016250 	.word	0x08016250
 8010da8:	08016288 	.word	0x08016288
 8010dac:	08016298 	.word	0x08016298

08010db0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b08e      	sub	sp, #56	; 0x38
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 030f 	and.w	r3, r3, #15
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b14      	cmp	r3, #20
 8010dce:	f040 8167 	bne.w	80110a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd4:	88db      	ldrh	r3, [r3, #6]
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7f5 ffb5 	bl	8006d48 <lwip_htons>
 8010dde:	4603      	mov	r3, r0
 8010de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	00db      	lsls	r3, r3, #3
 8010de8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dec:	885b      	ldrh	r3, [r3, #2]
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f5 ffa9 	bl	8006d48 <lwip_htons>
 8010df6:	4603      	mov	r3, r0
 8010df8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	f003 030f 	and.w	r3, r3, #15
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e12:	429a      	cmp	r2, r3
 8010e14:	f0c0 8146 	bcc.w	80110a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7f7 fbad 	bl	8008584 <pbuf_clen>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010e2e:	4b9f      	ldr	r3, [pc, #636]	; (80110ac <ip4_reass+0x2fc>)
 8010e30:	881b      	ldrh	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	8c3b      	ldrh	r3, [r7, #32]
 8010e36:	4413      	add	r3, r2
 8010e38:	2b0a      	cmp	r3, #10
 8010e3a:	dd10      	ble.n	8010e5e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010e3c:	8c3b      	ldrh	r3, [r7, #32]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e42:	f7ff fd81 	bl	8010948 <ip_reass_remove_oldest_datagram>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	f000 812d 	beq.w	80110a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010e4e:	4b97      	ldr	r3, [pc, #604]	; (80110ac <ip4_reass+0x2fc>)
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	461a      	mov	r2, r3
 8010e54:	8c3b      	ldrh	r3, [r7, #32]
 8010e56:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010e58:	2b0a      	cmp	r3, #10
 8010e5a:	f300 8125 	bgt.w	80110a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e5e:	4b94      	ldr	r3, [pc, #592]	; (80110b0 <ip4_reass+0x300>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	633b      	str	r3, [r7, #48]	; 0x30
 8010e64:	e015      	b.n	8010e92 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	695a      	ldr	r2, [r3, #20]
 8010e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d10c      	bne.n	8010e8c <ip4_reass+0xdc>
 8010e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e74:	699a      	ldr	r2, [r3, #24]
 8010e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e78:	691b      	ldr	r3, [r3, #16]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d106      	bne.n	8010e8c <ip4_reass+0xdc>
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	899a      	ldrh	r2, [r3, #12]
 8010e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e84:	889b      	ldrh	r3, [r3, #4]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d006      	beq.n	8010e9a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	633b      	str	r3, [r7, #48]	; 0x30
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d1e6      	bne.n	8010e66 <ip4_reass+0xb6>
 8010e98:	e000      	b.n	8010e9c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010e9a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d109      	bne.n	8010eb6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010ea2:	8c3b      	ldrh	r3, [r7, #32]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ea8:	f7ff fdb0 	bl	8010a0c <ip_reass_enqueue_new_datagram>
 8010eac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d11c      	bne.n	8010eee <ip4_reass+0x13e>
      goto nullreturn;
 8010eb4:	e109      	b.n	80110ca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb8:	88db      	ldrh	r3, [r3, #6]
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7f5 ff43 	bl	8006d48 <lwip_htons>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d110      	bne.n	8010eee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	89db      	ldrh	r3, [r3, #14]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f5 ff39 	bl	8006d48 <lwip_htons>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d006      	beq.n	8010eee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee2:	3308      	adds	r3, #8
 8010ee4:	2214      	movs	r2, #20
 8010ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 fbb1 	bl	8011650 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	88db      	ldrh	r3, [r3, #6]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	f003 0320 	and.w	r3, r3, #32
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	bf0c      	ite	eq
 8010efc:	2301      	moveq	r3, #1
 8010efe:	2300      	movne	r3, #0
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00e      	beq.n	8010f28 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010f0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f0e:	4413      	add	r3, r2
 8010f10:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010f12:	8b7a      	ldrh	r2, [r7, #26]
 8010f14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f16:	429a      	cmp	r2, r3
 8010f18:	f0c0 80a0 	bcc.w	801105c <ip4_reass+0x2ac>
 8010f1c:	8b7b      	ldrh	r3, [r7, #26]
 8010f1e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010f22:	4293      	cmp	r3, r2
 8010f24:	f200 809a 	bhi.w	801105c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010f28:	69fa      	ldr	r2, [r7, #28]
 8010f2a:	6879      	ldr	r1, [r7, #4]
 8010f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f2e:	f7ff fdd5 	bl	8010adc <ip_reass_chain_frag_into_datagram_and_validate>
 8010f32:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f3a:	f000 8091 	beq.w	8011060 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010f3e:	4b5b      	ldr	r3, [pc, #364]	; (80110ac <ip4_reass+0x2fc>)
 8010f40:	881a      	ldrh	r2, [r3, #0]
 8010f42:	8c3b      	ldrh	r3, [r7, #32]
 8010f44:	4413      	add	r3, r2
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	4b58      	ldr	r3, [pc, #352]	; (80110ac <ip4_reass+0x2fc>)
 8010f4a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d00d      	beq.n	8010f6e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010f52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f56:	4413      	add	r3, r2
 8010f58:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	8a7a      	ldrh	r2, [r7, #18]
 8010f5e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f62:	7f9b      	ldrb	r3, [r3, #30]
 8010f64:	f043 0301 	orr.w	r3, r3, #1
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d171      	bne.n	8011058 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f76:	8b9b      	ldrh	r3, [r3, #28]
 8010f78:	3314      	adds	r3, #20
 8010f7a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f90:	3308      	adds	r3, #8
 8010f92:	2214      	movs	r2, #20
 8010f94:	4619      	mov	r1, r3
 8010f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f98:	f000 fb5a 	bl	8011650 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010f9c:	8a3b      	ldrh	r3, [r7, #16]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7f5 fed2 	bl	8006d48 <lwip_htons>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010faa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fae:	2200      	movs	r2, #0
 8010fb0:	719a      	strb	r2, [r3, #6]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb8:	2200      	movs	r2, #0
 8010fba:	729a      	strb	r2, [r3, #10]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010fc6:	e00d      	b.n	8010fe4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010fce:	2114      	movs	r1, #20
 8010fd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fd2:	f7f7 f9c9 	bl	8008368 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7f7 fb0d 	bl	80085f8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1ee      	bne.n	8010fc8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010fea:	4b31      	ldr	r3, [pc, #196]	; (80110b0 <ip4_reass+0x300>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d102      	bne.n	8010ffa <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ff8:	e010      	b.n	801101c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010ffa:	4b2d      	ldr	r3, [pc, #180]	; (80110b0 <ip4_reass+0x300>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011000:	e007      	b.n	8011012 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011008:	429a      	cmp	r2, r3
 801100a:	d006      	beq.n	801101a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011014:	2b00      	cmp	r3, #0
 8011016:	d1f4      	bne.n	8011002 <ip4_reass+0x252>
 8011018:	e000      	b.n	801101c <ip4_reass+0x26c>
          break;
 801101a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801101c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801101e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011020:	f7ff fd2e 	bl	8010a80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7f7 faad 	bl	8008584 <pbuf_clen>
 801102a:	4603      	mov	r3, r0
 801102c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801102e:	4b1f      	ldr	r3, [pc, #124]	; (80110ac <ip4_reass+0x2fc>)
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	8c3a      	ldrh	r2, [r7, #32]
 8011034:	429a      	cmp	r2, r3
 8011036:	d906      	bls.n	8011046 <ip4_reass+0x296>
 8011038:	4b1e      	ldr	r3, [pc, #120]	; (80110b4 <ip4_reass+0x304>)
 801103a:	f240 229b 	movw	r2, #667	; 0x29b
 801103e:	491e      	ldr	r1, [pc, #120]	; (80110b8 <ip4_reass+0x308>)
 8011040:	481e      	ldr	r0, [pc, #120]	; (80110bc <ip4_reass+0x30c>)
 8011042:	f000 fbdf 	bl	8011804 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011046:	4b19      	ldr	r3, [pc, #100]	; (80110ac <ip4_reass+0x2fc>)
 8011048:	881a      	ldrh	r2, [r3, #0]
 801104a:	8c3b      	ldrh	r3, [r7, #32]
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	b29a      	uxth	r2, r3
 8011050:	4b16      	ldr	r3, [pc, #88]	; (80110ac <ip4_reass+0x2fc>)
 8011052:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	e03c      	b.n	80110d2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011058:	2300      	movs	r3, #0
 801105a:	e03a      	b.n	80110d2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801105c:	bf00      	nop
 801105e:	e000      	b.n	8011062 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011060:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011064:	2b00      	cmp	r3, #0
 8011066:	d106      	bne.n	8011076 <ip4_reass+0x2c6>
 8011068:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <ip4_reass+0x304>)
 801106a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801106e:	4914      	ldr	r1, [pc, #80]	; (80110c0 <ip4_reass+0x310>)
 8011070:	4812      	ldr	r0, [pc, #72]	; (80110bc <ip4_reass+0x30c>)
 8011072:	f000 fbc7 	bl	8011804 <iprintf>
  if (ipr->p == NULL) {
 8011076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d124      	bne.n	80110c8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801107e:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <ip4_reass+0x300>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011084:	429a      	cmp	r2, r3
 8011086:	d006      	beq.n	8011096 <ip4_reass+0x2e6>
 8011088:	4b0a      	ldr	r3, [pc, #40]	; (80110b4 <ip4_reass+0x304>)
 801108a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801108e:	490d      	ldr	r1, [pc, #52]	; (80110c4 <ip4_reass+0x314>)
 8011090:	480a      	ldr	r0, [pc, #40]	; (80110bc <ip4_reass+0x30c>)
 8011092:	f000 fbb7 	bl	8011804 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011096:	2100      	movs	r1, #0
 8011098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801109a:	f7ff fcf1 	bl	8010a80 <ip_reass_dequeue_datagram>
 801109e:	e014      	b.n	80110ca <ip4_reass+0x31a>
    goto nullreturn;
 80110a0:	bf00      	nop
 80110a2:	e012      	b.n	80110ca <ip4_reass+0x31a>
    goto nullreturn;
 80110a4:	bf00      	nop
 80110a6:	e010      	b.n	80110ca <ip4_reass+0x31a>
      goto nullreturn;
 80110a8:	bf00      	nop
 80110aa:	e00e      	b.n	80110ca <ip4_reass+0x31a>
 80110ac:	2000068c 	.word	0x2000068c
 80110b0:	20000688 	.word	0x20000688
 80110b4:	0801614c 	.word	0x0801614c
 80110b8:	080162bc 	.word	0x080162bc
 80110bc:	08016194 	.word	0x08016194
 80110c0:	080162d8 	.word	0x080162d8
 80110c4:	080162e4 	.word	0x080162e4
  }

nullreturn:
 80110c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7f7 f9d2 	bl	8008474 <pbuf_free>
  return NULL;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3738      	adds	r7, #56	; 0x38
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop

080110dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80110e0:	2005      	movs	r0, #5
 80110e2:	f7f6 fb65 	bl	80077b0 <memp_malloc>
 80110e6:	4603      	mov	r3, r0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	bd80      	pop	{r7, pc}

080110ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <ip_frag_free_pbuf_custom_ref+0x1c>
 80110fa:	4b07      	ldr	r3, [pc, #28]	; (8011118 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80110fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011100:	4906      	ldr	r1, [pc, #24]	; (801111c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011102:	4807      	ldr	r0, [pc, #28]	; (8011120 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011104:	f000 fb7e 	bl	8011804 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011108:	6879      	ldr	r1, [r7, #4]
 801110a:	2005      	movs	r0, #5
 801110c:	f7f6 fb9c 	bl	8007848 <memp_free>
}
 8011110:	bf00      	nop
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	0801614c 	.word	0x0801614c
 801111c:	08016304 	.word	0x08016304
 8011120:	08016194 	.word	0x08016194

08011124 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <ipfrag_free_pbuf_custom+0x20>
 8011136:	4b11      	ldr	r3, [pc, #68]	; (801117c <ipfrag_free_pbuf_custom+0x58>)
 8011138:	f240 22ce 	movw	r2, #718	; 0x2ce
 801113c:	4910      	ldr	r1, [pc, #64]	; (8011180 <ipfrag_free_pbuf_custom+0x5c>)
 801113e:	4811      	ldr	r0, [pc, #68]	; (8011184 <ipfrag_free_pbuf_custom+0x60>)
 8011140:	f000 fb60 	bl	8011804 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	429a      	cmp	r2, r3
 801114a:	d006      	beq.n	801115a <ipfrag_free_pbuf_custom+0x36>
 801114c:	4b0b      	ldr	r3, [pc, #44]	; (801117c <ipfrag_free_pbuf_custom+0x58>)
 801114e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011152:	490d      	ldr	r1, [pc, #52]	; (8011188 <ipfrag_free_pbuf_custom+0x64>)
 8011154:	480b      	ldr	r0, [pc, #44]	; (8011184 <ipfrag_free_pbuf_custom+0x60>)
 8011156:	f000 fb55 	bl	8011804 <iprintf>
  if (pcr->original != NULL) {
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d004      	beq.n	801116c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	4618      	mov	r0, r3
 8011168:	f7f7 f984 	bl	8008474 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f7ff ffbd 	bl	80110ec <ip_frag_free_pbuf_custom_ref>
}
 8011172:	bf00      	nop
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	0801614c 	.word	0x0801614c
 8011180:	08016310 	.word	0x08016310
 8011184:	08016194 	.word	0x08016194
 8011188:	0801631c 	.word	0x0801631c

0801118c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b094      	sub	sp, #80	; 0x50
 8011190:	af02      	add	r7, sp, #8
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011198:	2300      	movs	r3, #0
 801119a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80111a2:	3b14      	subs	r3, #20
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	da00      	bge.n	80111aa <ip4_frag+0x1e>
 80111a8:	3307      	adds	r3, #7
 80111aa:	10db      	asrs	r3, r3, #3
 80111ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80111ae:	2314      	movs	r3, #20
 80111b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80111b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80111bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	f003 030f 	and.w	r3, r3, #15
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b14      	cmp	r3, #20
 80111cc:	d002      	beq.n	80111d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80111ce:	f06f 0305 	mvn.w	r3, #5
 80111d2:	e110      	b.n	80113f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	895b      	ldrh	r3, [r3, #10]
 80111d8:	2b13      	cmp	r3, #19
 80111da:	d809      	bhi.n	80111f0 <ip4_frag+0x64>
 80111dc:	4b88      	ldr	r3, [pc, #544]	; (8011400 <ip4_frag+0x274>)
 80111de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80111e2:	4988      	ldr	r1, [pc, #544]	; (8011404 <ip4_frag+0x278>)
 80111e4:	4888      	ldr	r0, [pc, #544]	; (8011408 <ip4_frag+0x27c>)
 80111e6:	f000 fb0d 	bl	8011804 <iprintf>
 80111ea:	f06f 0305 	mvn.w	r3, #5
 80111ee:	e102      	b.n	80113f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	88db      	ldrh	r3, [r3, #6]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f5 fda6 	bl	8006d48 <lwip_htons>
 80111fc:	4603      	mov	r3, r0
 80111fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011206:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801120a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801120c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	891b      	ldrh	r3, [r3, #8]
 8011216:	3b14      	subs	r3, #20
 8011218:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801121c:	e0e1      	b.n	80113e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801121e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011220:	00db      	lsls	r3, r3, #3
 8011222:	b29b      	uxth	r3, r3
 8011224:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011228:	4293      	cmp	r3, r2
 801122a:	bf28      	it	cs
 801122c:	4613      	movcs	r3, r2
 801122e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011230:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011234:	2114      	movs	r1, #20
 8011236:	200e      	movs	r0, #14
 8011238:	f7f6 fe34 	bl	8007ea4 <pbuf_alloc>
 801123c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 80d5 	beq.w	80113f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011248:	895b      	ldrh	r3, [r3, #10]
 801124a:	2b13      	cmp	r3, #19
 801124c:	d806      	bhi.n	801125c <ip4_frag+0xd0>
 801124e:	4b6c      	ldr	r3, [pc, #432]	; (8011400 <ip4_frag+0x274>)
 8011250:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011254:	496d      	ldr	r1, [pc, #436]	; (801140c <ip4_frag+0x280>)
 8011256:	486c      	ldr	r0, [pc, #432]	; (8011408 <ip4_frag+0x27c>)
 8011258:	f000 fad4 	bl	8011804 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	2214      	movs	r2, #20
 8011262:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011264:	4618      	mov	r0, r3
 8011266:	f000 f9f3 	bl	8011650 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011270:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011272:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011276:	e064      	b.n	8011342 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	895a      	ldrh	r2, [r3, #10]
 801127c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	895b      	ldrh	r3, [r3, #10]
 8011286:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011288:	429a      	cmp	r2, r3
 801128a:	d906      	bls.n	801129a <ip4_frag+0x10e>
 801128c:	4b5c      	ldr	r3, [pc, #368]	; (8011400 <ip4_frag+0x274>)
 801128e:	f240 322d 	movw	r2, #813	; 0x32d
 8011292:	495f      	ldr	r1, [pc, #380]	; (8011410 <ip4_frag+0x284>)
 8011294:	485c      	ldr	r0, [pc, #368]	; (8011408 <ip4_frag+0x27c>)
 8011296:	f000 fab5 	bl	8011804 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801129a:	8bfa      	ldrh	r2, [r7, #30]
 801129c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80112a0:	4293      	cmp	r3, r2
 80112a2:	bf28      	it	cs
 80112a4:	4613      	movcs	r3, r2
 80112a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80112aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d105      	bne.n	80112be <ip4_frag+0x132>
        poff = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	60fb      	str	r3, [r7, #12]
        continue;
 80112bc:	e041      	b.n	8011342 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80112be:	f7ff ff0d 	bl	80110dc <ip_frag_alloc_pbuf_custom_ref>
 80112c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d103      	bne.n	80112d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80112ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112cc:	f7f7 f8d2 	bl	8008474 <pbuf_free>
        goto memerr;
 80112d0:	e08f      	b.n	80113f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80112d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80112d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112da:	4413      	add	r3, r2
 80112dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80112e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80112e4:	9201      	str	r2, [sp, #4]
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	4603      	mov	r3, r0
 80112ea:	2241      	movs	r2, #65	; 0x41
 80112ec:	2000      	movs	r0, #0
 80112ee:	f7f6 ff07 	bl	8008100 <pbuf_alloced_custom>
 80112f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80112fa:	69b8      	ldr	r0, [r7, #24]
 80112fc:	f7ff fef6 	bl	80110ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011302:	f7f7 f8b7 	bl	8008474 <pbuf_free>
        goto memerr;
 8011306:	e074      	b.n	80113f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f7f7 f953 	bl	80085b4 <pbuf_ref>
      pcr->original = p;
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	4a3f      	ldr	r2, [pc, #252]	; (8011414 <ip4_frag+0x288>)
 8011318:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801131a:	6979      	ldr	r1, [r7, #20]
 801131c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801131e:	f7f7 f96b 	bl	80085f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011322:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011330:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011334:	2b00      	cmp	r3, #0
 8011336:	d004      	beq.n	8011342 <ip4_frag+0x1b6>
        poff = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011342:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011346:	2b00      	cmp	r3, #0
 8011348:	d196      	bne.n	8011278 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801134a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801134c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011350:	4413      	add	r3, r2
 8011352:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011358:	f1a3 0213 	sub.w	r2, r3, #19
 801135c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011360:	429a      	cmp	r2, r3
 8011362:	bfcc      	ite	gt
 8011364:	2301      	movgt	r3, #1
 8011366:	2300      	movle	r3, #0
 8011368:	b2db      	uxtb	r3, r3
 801136a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801136c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011374:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011376:	6a3b      	ldr	r3, [r7, #32]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <ip4_frag+0x1f6>
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	2b00      	cmp	r3, #0
 8011380:	d003      	beq.n	801138a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011382:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011388:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801138a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801138c:	4618      	mov	r0, r3
 801138e:	f7f5 fcdb 	bl	8006d48 <lwip_htons>
 8011392:	4603      	mov	r3, r0
 8011394:	461a      	mov	r2, r3
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801139a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801139c:	3314      	adds	r3, #20
 801139e:	b29b      	uxth	r3, r3
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7f5 fcd1 	bl	8006d48 <lwip_htons>
 80113a6:	4603      	mov	r3, r0
 80113a8:	461a      	mov	r2, r3
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80113ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b0:	2200      	movs	r2, #0
 80113b2:	729a      	strb	r2, [r3, #10]
 80113b4:	2200      	movs	r2, #0
 80113b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	695b      	ldr	r3, [r3, #20]
 80113bc:	687a      	ldr	r2, [r7, #4]
 80113be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113c0:	68b8      	ldr	r0, [r7, #8]
 80113c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80113c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113c6:	f7f7 f855 	bl	8008474 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80113ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80113ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80113d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80113da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113dc:	4413      	add	r3, r2
 80113de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80113e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f47f af19 	bne.w	801121e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80113ec:	2300      	movs	r3, #0
 80113ee:	e002      	b.n	80113f6 <ip4_frag+0x26a>
      goto memerr;
 80113f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80113f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3748      	adds	r7, #72	; 0x48
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	0801614c 	.word	0x0801614c
 8011404:	08016328 	.word	0x08016328
 8011408:	08016194 	.word	0x08016194
 801140c:	08016344 	.word	0x08016344
 8011410:	08016364 	.word	0x08016364
 8011414:	08011125 	.word	0x08011125

08011418 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b086      	sub	sp, #24
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011422:	230e      	movs	r3, #14
 8011424:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	895b      	ldrh	r3, [r3, #10]
 801142a:	2b0e      	cmp	r3, #14
 801142c:	d96e      	bls.n	801150c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7bdb      	ldrb	r3, [r3, #15]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801143c:	3301      	adds	r3, #1
 801143e:	b2da      	uxtb	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	7b1a      	ldrb	r2, [r3, #12]
 801144e:	7b5b      	ldrb	r3, [r3, #13]
 8011450:	021b      	lsls	r3, r3, #8
 8011452:	4313      	orrs	r3, r2
 8011454:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	2b00      	cmp	r3, #0
 8011460:	d023      	beq.n	80114aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d10f      	bne.n	801148a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	785b      	ldrb	r3, [r3, #1]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d11b      	bne.n	80114aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011476:	2b5e      	cmp	r3, #94	; 0x5e
 8011478:	d117      	bne.n	80114aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7b5b      	ldrb	r3, [r3, #13]
 801147e:	f043 0310 	orr.w	r3, r3, #16
 8011482:	b2da      	uxtb	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	735a      	strb	r2, [r3, #13]
 8011488:	e00f      	b.n	80114aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	2206      	movs	r2, #6
 801148e:	4928      	ldr	r1, [pc, #160]	; (8011530 <ethernet_input+0x118>)
 8011490:	4618      	mov	r0, r3
 8011492:	f000 f8cf 	bl	8011634 <memcmp>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d106      	bne.n	80114aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	7b5b      	ldrb	r3, [r3, #13]
 80114a0:	f043 0308 	orr.w	r3, r3, #8
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80114aa:	89fb      	ldrh	r3, [r7, #14]
 80114ac:	2b08      	cmp	r3, #8
 80114ae:	d003      	beq.n	80114b8 <ethernet_input+0xa0>
 80114b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80114b4:	d014      	beq.n	80114e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80114b6:	e032      	b.n	801151e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114be:	f003 0308 	and.w	r3, r3, #8
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d024      	beq.n	8011510 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80114c6:	8afb      	ldrh	r3, [r7, #22]
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7f6 ff4c 	bl	8008368 <pbuf_remove_header>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d11e      	bne.n	8011514 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80114d6:	6839      	ldr	r1, [r7, #0]
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7fe ff27 	bl	801032c <ip4_input>
      break;
 80114de:	e013      	b.n	8011508 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114e6:	f003 0308 	and.w	r3, r3, #8
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d014      	beq.n	8011518 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80114ee:	8afb      	ldrh	r3, [r7, #22]
 80114f0:	4619      	mov	r1, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7f6 ff38 	bl	8008368 <pbuf_remove_header>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d10e      	bne.n	801151c <ethernet_input+0x104>
        etharp_input(p, netif);
 80114fe:	6839      	ldr	r1, [r7, #0]
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f7fe f8c7 	bl	800f694 <etharp_input>
      break;
 8011506:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	e00c      	b.n	8011526 <ethernet_input+0x10e>
    goto free_and_return;
 801150c:	bf00      	nop
 801150e:	e006      	b.n	801151e <ethernet_input+0x106>
        goto free_and_return;
 8011510:	bf00      	nop
 8011512:	e004      	b.n	801151e <ethernet_input+0x106>
        goto free_and_return;
 8011514:	bf00      	nop
 8011516:	e002      	b.n	801151e <ethernet_input+0x106>
        goto free_and_return;
 8011518:	bf00      	nop
 801151a:	e000      	b.n	801151e <ethernet_input+0x106>
        goto free_and_return;
 801151c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7f6 ffa8 	bl	8008474 <pbuf_free>
  return ERR_OK;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3718      	adds	r7, #24
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	08017f00 	.word	0x08017f00

08011534 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011534:	b580      	push	{r7, lr}
 8011536:	b086      	sub	sp, #24
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011542:	8c3b      	ldrh	r3, [r7, #32]
 8011544:	4618      	mov	r0, r3
 8011546:	f7f5 fbff 	bl	8006d48 <lwip_htons>
 801154a:	4603      	mov	r3, r0
 801154c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801154e:	210e      	movs	r1, #14
 8011550:	68b8      	ldr	r0, [r7, #8]
 8011552:	f7f6 fef9 	bl	8008348 <pbuf_add_header>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d125      	bne.n	80115a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	8afa      	ldrh	r2, [r7, #22]
 8011566:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	2206      	movs	r2, #6
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	4618      	mov	r0, r3
 8011570:	f000 f86e 	bl	8011650 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	3306      	adds	r3, #6
 8011578:	2206      	movs	r2, #6
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	f000 f867 	bl	8011650 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011588:	2b06      	cmp	r3, #6
 801158a:	d006      	beq.n	801159a <ethernet_output+0x66>
 801158c:	4b0a      	ldr	r3, [pc, #40]	; (80115b8 <ethernet_output+0x84>)
 801158e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011592:	490a      	ldr	r1, [pc, #40]	; (80115bc <ethernet_output+0x88>)
 8011594:	480a      	ldr	r0, [pc, #40]	; (80115c0 <ethernet_output+0x8c>)
 8011596:	f000 f935 	bl	8011804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	699b      	ldr	r3, [r3, #24]
 801159e:	68b9      	ldr	r1, [r7, #8]
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	4798      	blx	r3
 80115a4:	4603      	mov	r3, r0
 80115a6:	e002      	b.n	80115ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80115a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80115aa:	f06f 0301 	mvn.w	r3, #1
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3718      	adds	r7, #24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	08016374 	.word	0x08016374
 80115bc:	080163ac 	.word	0x080163ac
 80115c0:	080163e0 	.word	0x080163e0

080115c4 <atoi>:
 80115c4:	220a      	movs	r2, #10
 80115c6:	2100      	movs	r1, #0
 80115c8:	f000 bb5e 	b.w	8011c88 <strtol>

080115cc <__libc_init_array>:
 80115cc:	b570      	push	{r4, r5, r6, lr}
 80115ce:	4d0d      	ldr	r5, [pc, #52]	; (8011604 <__libc_init_array+0x38>)
 80115d0:	4c0d      	ldr	r4, [pc, #52]	; (8011608 <__libc_init_array+0x3c>)
 80115d2:	1b64      	subs	r4, r4, r5
 80115d4:	10a4      	asrs	r4, r4, #2
 80115d6:	2600      	movs	r6, #0
 80115d8:	42a6      	cmp	r6, r4
 80115da:	d109      	bne.n	80115f0 <__libc_init_array+0x24>
 80115dc:	4d0b      	ldr	r5, [pc, #44]	; (801160c <__libc_init_array+0x40>)
 80115de:	4c0c      	ldr	r4, [pc, #48]	; (8011610 <__libc_init_array+0x44>)
 80115e0:	f001 fbec 	bl	8012dbc <_init>
 80115e4:	1b64      	subs	r4, r4, r5
 80115e6:	10a4      	asrs	r4, r4, #2
 80115e8:	2600      	movs	r6, #0
 80115ea:	42a6      	cmp	r6, r4
 80115ec:	d105      	bne.n	80115fa <__libc_init_array+0x2e>
 80115ee:	bd70      	pop	{r4, r5, r6, pc}
 80115f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80115f4:	4798      	blx	r3
 80115f6:	3601      	adds	r6, #1
 80115f8:	e7ee      	b.n	80115d8 <__libc_init_array+0xc>
 80115fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80115fe:	4798      	blx	r3
 8011600:	3601      	adds	r6, #1
 8011602:	e7f2      	b.n	80115ea <__libc_init_array+0x1e>
 8011604:	080181c4 	.word	0x080181c4
 8011608:	080181c4 	.word	0x080181c4
 801160c:	080181c4 	.word	0x080181c4
 8011610:	080181c8 	.word	0x080181c8

08011614 <malloc>:
 8011614:	4b02      	ldr	r3, [pc, #8]	; (8011620 <malloc+0xc>)
 8011616:	4601      	mov	r1, r0
 8011618:	6818      	ldr	r0, [r3, #0]
 801161a:	f000 b899 	b.w	8011750 <_malloc_r>
 801161e:	bf00      	nop
 8011620:	20000030 	.word	0x20000030

08011624 <free>:
 8011624:	4b02      	ldr	r3, [pc, #8]	; (8011630 <free+0xc>)
 8011626:	4601      	mov	r1, r0
 8011628:	6818      	ldr	r0, [r3, #0]
 801162a:	f000 b841 	b.w	80116b0 <_free_r>
 801162e:	bf00      	nop
 8011630:	20000030 	.word	0x20000030

08011634 <memcmp>:
 8011634:	b530      	push	{r4, r5, lr}
 8011636:	3901      	subs	r1, #1
 8011638:	2400      	movs	r4, #0
 801163a:	42a2      	cmp	r2, r4
 801163c:	d101      	bne.n	8011642 <memcmp+0xe>
 801163e:	2000      	movs	r0, #0
 8011640:	e005      	b.n	801164e <memcmp+0x1a>
 8011642:	5d03      	ldrb	r3, [r0, r4]
 8011644:	3401      	adds	r4, #1
 8011646:	5d0d      	ldrb	r5, [r1, r4]
 8011648:	42ab      	cmp	r3, r5
 801164a:	d0f6      	beq.n	801163a <memcmp+0x6>
 801164c:	1b58      	subs	r0, r3, r5
 801164e:	bd30      	pop	{r4, r5, pc}

08011650 <memcpy>:
 8011650:	440a      	add	r2, r1
 8011652:	4291      	cmp	r1, r2
 8011654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011658:	d100      	bne.n	801165c <memcpy+0xc>
 801165a:	4770      	bx	lr
 801165c:	b510      	push	{r4, lr}
 801165e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011666:	4291      	cmp	r1, r2
 8011668:	d1f9      	bne.n	801165e <memcpy+0xe>
 801166a:	bd10      	pop	{r4, pc}

0801166c <memmove>:
 801166c:	4288      	cmp	r0, r1
 801166e:	b510      	push	{r4, lr}
 8011670:	eb01 0402 	add.w	r4, r1, r2
 8011674:	d902      	bls.n	801167c <memmove+0x10>
 8011676:	4284      	cmp	r4, r0
 8011678:	4623      	mov	r3, r4
 801167a:	d807      	bhi.n	801168c <memmove+0x20>
 801167c:	1e43      	subs	r3, r0, #1
 801167e:	42a1      	cmp	r1, r4
 8011680:	d008      	beq.n	8011694 <memmove+0x28>
 8011682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801168a:	e7f8      	b.n	801167e <memmove+0x12>
 801168c:	4402      	add	r2, r0
 801168e:	4601      	mov	r1, r0
 8011690:	428a      	cmp	r2, r1
 8011692:	d100      	bne.n	8011696 <memmove+0x2a>
 8011694:	bd10      	pop	{r4, pc}
 8011696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801169a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801169e:	e7f7      	b.n	8011690 <memmove+0x24>

080116a0 <memset>:
 80116a0:	4402      	add	r2, r0
 80116a2:	4603      	mov	r3, r0
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d100      	bne.n	80116aa <memset+0xa>
 80116a8:	4770      	bx	lr
 80116aa:	f803 1b01 	strb.w	r1, [r3], #1
 80116ae:	e7f9      	b.n	80116a4 <memset+0x4>

080116b0 <_free_r>:
 80116b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116b2:	2900      	cmp	r1, #0
 80116b4:	d048      	beq.n	8011748 <_free_r+0x98>
 80116b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116ba:	9001      	str	r0, [sp, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f1a1 0404 	sub.w	r4, r1, #4
 80116c2:	bfb8      	it	lt
 80116c4:	18e4      	addlt	r4, r4, r3
 80116c6:	f000 fdfd 	bl	80122c4 <__malloc_lock>
 80116ca:	4a20      	ldr	r2, [pc, #128]	; (801174c <_free_r+0x9c>)
 80116cc:	9801      	ldr	r0, [sp, #4]
 80116ce:	6813      	ldr	r3, [r2, #0]
 80116d0:	4615      	mov	r5, r2
 80116d2:	b933      	cbnz	r3, 80116e2 <_free_r+0x32>
 80116d4:	6063      	str	r3, [r4, #4]
 80116d6:	6014      	str	r4, [r2, #0]
 80116d8:	b003      	add	sp, #12
 80116da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116de:	f000 bdf7 	b.w	80122d0 <__malloc_unlock>
 80116e2:	42a3      	cmp	r3, r4
 80116e4:	d90b      	bls.n	80116fe <_free_r+0x4e>
 80116e6:	6821      	ldr	r1, [r4, #0]
 80116e8:	1862      	adds	r2, r4, r1
 80116ea:	4293      	cmp	r3, r2
 80116ec:	bf04      	itt	eq
 80116ee:	681a      	ldreq	r2, [r3, #0]
 80116f0:	685b      	ldreq	r3, [r3, #4]
 80116f2:	6063      	str	r3, [r4, #4]
 80116f4:	bf04      	itt	eq
 80116f6:	1852      	addeq	r2, r2, r1
 80116f8:	6022      	streq	r2, [r4, #0]
 80116fa:	602c      	str	r4, [r5, #0]
 80116fc:	e7ec      	b.n	80116d8 <_free_r+0x28>
 80116fe:	461a      	mov	r2, r3
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	b10b      	cbz	r3, 8011708 <_free_r+0x58>
 8011704:	42a3      	cmp	r3, r4
 8011706:	d9fa      	bls.n	80116fe <_free_r+0x4e>
 8011708:	6811      	ldr	r1, [r2, #0]
 801170a:	1855      	adds	r5, r2, r1
 801170c:	42a5      	cmp	r5, r4
 801170e:	d10b      	bne.n	8011728 <_free_r+0x78>
 8011710:	6824      	ldr	r4, [r4, #0]
 8011712:	4421      	add	r1, r4
 8011714:	1854      	adds	r4, r2, r1
 8011716:	42a3      	cmp	r3, r4
 8011718:	6011      	str	r1, [r2, #0]
 801171a:	d1dd      	bne.n	80116d8 <_free_r+0x28>
 801171c:	681c      	ldr	r4, [r3, #0]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	6053      	str	r3, [r2, #4]
 8011722:	4421      	add	r1, r4
 8011724:	6011      	str	r1, [r2, #0]
 8011726:	e7d7      	b.n	80116d8 <_free_r+0x28>
 8011728:	d902      	bls.n	8011730 <_free_r+0x80>
 801172a:	230c      	movs	r3, #12
 801172c:	6003      	str	r3, [r0, #0]
 801172e:	e7d3      	b.n	80116d8 <_free_r+0x28>
 8011730:	6825      	ldr	r5, [r4, #0]
 8011732:	1961      	adds	r1, r4, r5
 8011734:	428b      	cmp	r3, r1
 8011736:	bf04      	itt	eq
 8011738:	6819      	ldreq	r1, [r3, #0]
 801173a:	685b      	ldreq	r3, [r3, #4]
 801173c:	6063      	str	r3, [r4, #4]
 801173e:	bf04      	itt	eq
 8011740:	1949      	addeq	r1, r1, r5
 8011742:	6021      	streq	r1, [r4, #0]
 8011744:	6054      	str	r4, [r2, #4]
 8011746:	e7c7      	b.n	80116d8 <_free_r+0x28>
 8011748:	b003      	add	sp, #12
 801174a:	bd30      	pop	{r4, r5, pc}
 801174c:	20000690 	.word	0x20000690

08011750 <_malloc_r>:
 8011750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011752:	1ccd      	adds	r5, r1, #3
 8011754:	f025 0503 	bic.w	r5, r5, #3
 8011758:	3508      	adds	r5, #8
 801175a:	2d0c      	cmp	r5, #12
 801175c:	bf38      	it	cc
 801175e:	250c      	movcc	r5, #12
 8011760:	2d00      	cmp	r5, #0
 8011762:	4606      	mov	r6, r0
 8011764:	db01      	blt.n	801176a <_malloc_r+0x1a>
 8011766:	42a9      	cmp	r1, r5
 8011768:	d903      	bls.n	8011772 <_malloc_r+0x22>
 801176a:	230c      	movs	r3, #12
 801176c:	6033      	str	r3, [r6, #0]
 801176e:	2000      	movs	r0, #0
 8011770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011772:	f000 fda7 	bl	80122c4 <__malloc_lock>
 8011776:	4921      	ldr	r1, [pc, #132]	; (80117fc <_malloc_r+0xac>)
 8011778:	680a      	ldr	r2, [r1, #0]
 801177a:	4614      	mov	r4, r2
 801177c:	b99c      	cbnz	r4, 80117a6 <_malloc_r+0x56>
 801177e:	4f20      	ldr	r7, [pc, #128]	; (8011800 <_malloc_r+0xb0>)
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	b923      	cbnz	r3, 801178e <_malloc_r+0x3e>
 8011784:	4621      	mov	r1, r4
 8011786:	4630      	mov	r0, r6
 8011788:	f000 f90a 	bl	80119a0 <_sbrk_r>
 801178c:	6038      	str	r0, [r7, #0]
 801178e:	4629      	mov	r1, r5
 8011790:	4630      	mov	r0, r6
 8011792:	f000 f905 	bl	80119a0 <_sbrk_r>
 8011796:	1c43      	adds	r3, r0, #1
 8011798:	d123      	bne.n	80117e2 <_malloc_r+0x92>
 801179a:	230c      	movs	r3, #12
 801179c:	6033      	str	r3, [r6, #0]
 801179e:	4630      	mov	r0, r6
 80117a0:	f000 fd96 	bl	80122d0 <__malloc_unlock>
 80117a4:	e7e3      	b.n	801176e <_malloc_r+0x1e>
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	1b5b      	subs	r3, r3, r5
 80117aa:	d417      	bmi.n	80117dc <_malloc_r+0x8c>
 80117ac:	2b0b      	cmp	r3, #11
 80117ae:	d903      	bls.n	80117b8 <_malloc_r+0x68>
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	441c      	add	r4, r3
 80117b4:	6025      	str	r5, [r4, #0]
 80117b6:	e004      	b.n	80117c2 <_malloc_r+0x72>
 80117b8:	6863      	ldr	r3, [r4, #4]
 80117ba:	42a2      	cmp	r2, r4
 80117bc:	bf0c      	ite	eq
 80117be:	600b      	streq	r3, [r1, #0]
 80117c0:	6053      	strne	r3, [r2, #4]
 80117c2:	4630      	mov	r0, r6
 80117c4:	f000 fd84 	bl	80122d0 <__malloc_unlock>
 80117c8:	f104 000b 	add.w	r0, r4, #11
 80117cc:	1d23      	adds	r3, r4, #4
 80117ce:	f020 0007 	bic.w	r0, r0, #7
 80117d2:	1ac2      	subs	r2, r0, r3
 80117d4:	d0cc      	beq.n	8011770 <_malloc_r+0x20>
 80117d6:	1a1b      	subs	r3, r3, r0
 80117d8:	50a3      	str	r3, [r4, r2]
 80117da:	e7c9      	b.n	8011770 <_malloc_r+0x20>
 80117dc:	4622      	mov	r2, r4
 80117de:	6864      	ldr	r4, [r4, #4]
 80117e0:	e7cc      	b.n	801177c <_malloc_r+0x2c>
 80117e2:	1cc4      	adds	r4, r0, #3
 80117e4:	f024 0403 	bic.w	r4, r4, #3
 80117e8:	42a0      	cmp	r0, r4
 80117ea:	d0e3      	beq.n	80117b4 <_malloc_r+0x64>
 80117ec:	1a21      	subs	r1, r4, r0
 80117ee:	4630      	mov	r0, r6
 80117f0:	f000 f8d6 	bl	80119a0 <_sbrk_r>
 80117f4:	3001      	adds	r0, #1
 80117f6:	d1dd      	bne.n	80117b4 <_malloc_r+0x64>
 80117f8:	e7cf      	b.n	801179a <_malloc_r+0x4a>
 80117fa:	bf00      	nop
 80117fc:	20000690 	.word	0x20000690
 8011800:	20000694 	.word	0x20000694

08011804 <iprintf>:
 8011804:	b40f      	push	{r0, r1, r2, r3}
 8011806:	4b0a      	ldr	r3, [pc, #40]	; (8011830 <iprintf+0x2c>)
 8011808:	b513      	push	{r0, r1, r4, lr}
 801180a:	681c      	ldr	r4, [r3, #0]
 801180c:	b124      	cbz	r4, 8011818 <iprintf+0x14>
 801180e:	69a3      	ldr	r3, [r4, #24]
 8011810:	b913      	cbnz	r3, 8011818 <iprintf+0x14>
 8011812:	4620      	mov	r0, r4
 8011814:	f000 fc40 	bl	8012098 <__sinit>
 8011818:	ab05      	add	r3, sp, #20
 801181a:	9a04      	ldr	r2, [sp, #16]
 801181c:	68a1      	ldr	r1, [r4, #8]
 801181e:	9301      	str	r3, [sp, #4]
 8011820:	4620      	mov	r0, r4
 8011822:	f000 fee1 	bl	80125e8 <_vfiprintf_r>
 8011826:	b002      	add	sp, #8
 8011828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801182c:	b004      	add	sp, #16
 801182e:	4770      	bx	lr
 8011830:	20000030 	.word	0x20000030

08011834 <_puts_r>:
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	460e      	mov	r6, r1
 8011838:	4605      	mov	r5, r0
 801183a:	b118      	cbz	r0, 8011844 <_puts_r+0x10>
 801183c:	6983      	ldr	r3, [r0, #24]
 801183e:	b90b      	cbnz	r3, 8011844 <_puts_r+0x10>
 8011840:	f000 fc2a 	bl	8012098 <__sinit>
 8011844:	69ab      	ldr	r3, [r5, #24]
 8011846:	68ac      	ldr	r4, [r5, #8]
 8011848:	b913      	cbnz	r3, 8011850 <_puts_r+0x1c>
 801184a:	4628      	mov	r0, r5
 801184c:	f000 fc24 	bl	8012098 <__sinit>
 8011850:	4b2c      	ldr	r3, [pc, #176]	; (8011904 <_puts_r+0xd0>)
 8011852:	429c      	cmp	r4, r3
 8011854:	d120      	bne.n	8011898 <_puts_r+0x64>
 8011856:	686c      	ldr	r4, [r5, #4]
 8011858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801185a:	07db      	lsls	r3, r3, #31
 801185c:	d405      	bmi.n	801186a <_puts_r+0x36>
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	0598      	lsls	r0, r3, #22
 8011862:	d402      	bmi.n	801186a <_puts_r+0x36>
 8011864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011866:	f000 fcc7 	bl	80121f8 <__retarget_lock_acquire_recursive>
 801186a:	89a3      	ldrh	r3, [r4, #12]
 801186c:	0719      	lsls	r1, r3, #28
 801186e:	d51d      	bpl.n	80118ac <_puts_r+0x78>
 8011870:	6923      	ldr	r3, [r4, #16]
 8011872:	b1db      	cbz	r3, 80118ac <_puts_r+0x78>
 8011874:	3e01      	subs	r6, #1
 8011876:	68a3      	ldr	r3, [r4, #8]
 8011878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801187c:	3b01      	subs	r3, #1
 801187e:	60a3      	str	r3, [r4, #8]
 8011880:	bb39      	cbnz	r1, 80118d2 <_puts_r+0x9e>
 8011882:	2b00      	cmp	r3, #0
 8011884:	da38      	bge.n	80118f8 <_puts_r+0xc4>
 8011886:	4622      	mov	r2, r4
 8011888:	210a      	movs	r1, #10
 801188a:	4628      	mov	r0, r5
 801188c:	f000 fa06 	bl	8011c9c <__swbuf_r>
 8011890:	3001      	adds	r0, #1
 8011892:	d011      	beq.n	80118b8 <_puts_r+0x84>
 8011894:	250a      	movs	r5, #10
 8011896:	e011      	b.n	80118bc <_puts_r+0x88>
 8011898:	4b1b      	ldr	r3, [pc, #108]	; (8011908 <_puts_r+0xd4>)
 801189a:	429c      	cmp	r4, r3
 801189c:	d101      	bne.n	80118a2 <_puts_r+0x6e>
 801189e:	68ac      	ldr	r4, [r5, #8]
 80118a0:	e7da      	b.n	8011858 <_puts_r+0x24>
 80118a2:	4b1a      	ldr	r3, [pc, #104]	; (801190c <_puts_r+0xd8>)
 80118a4:	429c      	cmp	r4, r3
 80118a6:	bf08      	it	eq
 80118a8:	68ec      	ldreq	r4, [r5, #12]
 80118aa:	e7d5      	b.n	8011858 <_puts_r+0x24>
 80118ac:	4621      	mov	r1, r4
 80118ae:	4628      	mov	r0, r5
 80118b0:	f000 fa46 	bl	8011d40 <__swsetup_r>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d0dd      	beq.n	8011874 <_puts_r+0x40>
 80118b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80118bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118be:	07da      	lsls	r2, r3, #31
 80118c0:	d405      	bmi.n	80118ce <_puts_r+0x9a>
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	059b      	lsls	r3, r3, #22
 80118c6:	d402      	bmi.n	80118ce <_puts_r+0x9a>
 80118c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ca:	f000 fc96 	bl	80121fa <__retarget_lock_release_recursive>
 80118ce:	4628      	mov	r0, r5
 80118d0:	bd70      	pop	{r4, r5, r6, pc}
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	da04      	bge.n	80118e0 <_puts_r+0xac>
 80118d6:	69a2      	ldr	r2, [r4, #24]
 80118d8:	429a      	cmp	r2, r3
 80118da:	dc06      	bgt.n	80118ea <_puts_r+0xb6>
 80118dc:	290a      	cmp	r1, #10
 80118de:	d004      	beq.n	80118ea <_puts_r+0xb6>
 80118e0:	6823      	ldr	r3, [r4, #0]
 80118e2:	1c5a      	adds	r2, r3, #1
 80118e4:	6022      	str	r2, [r4, #0]
 80118e6:	7019      	strb	r1, [r3, #0]
 80118e8:	e7c5      	b.n	8011876 <_puts_r+0x42>
 80118ea:	4622      	mov	r2, r4
 80118ec:	4628      	mov	r0, r5
 80118ee:	f000 f9d5 	bl	8011c9c <__swbuf_r>
 80118f2:	3001      	adds	r0, #1
 80118f4:	d1bf      	bne.n	8011876 <_puts_r+0x42>
 80118f6:	e7df      	b.n	80118b8 <_puts_r+0x84>
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	250a      	movs	r5, #10
 80118fc:	1c5a      	adds	r2, r3, #1
 80118fe:	6022      	str	r2, [r4, #0]
 8011900:	701d      	strb	r5, [r3, #0]
 8011902:	e7db      	b.n	80118bc <_puts_r+0x88>
 8011904:	08018148 	.word	0x08018148
 8011908:	08018168 	.word	0x08018168
 801190c:	08018128 	.word	0x08018128

08011910 <puts>:
 8011910:	4b02      	ldr	r3, [pc, #8]	; (801191c <puts+0xc>)
 8011912:	4601      	mov	r1, r0
 8011914:	6818      	ldr	r0, [r3, #0]
 8011916:	f7ff bf8d 	b.w	8011834 <_puts_r>
 801191a:	bf00      	nop
 801191c:	20000030 	.word	0x20000030

08011920 <rand>:
 8011920:	4b17      	ldr	r3, [pc, #92]	; (8011980 <rand+0x60>)
 8011922:	b510      	push	{r4, lr}
 8011924:	681c      	ldr	r4, [r3, #0]
 8011926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011928:	b9b3      	cbnz	r3, 8011958 <rand+0x38>
 801192a:	2018      	movs	r0, #24
 801192c:	f7ff fe72 	bl	8011614 <malloc>
 8011930:	63a0      	str	r0, [r4, #56]	; 0x38
 8011932:	b928      	cbnz	r0, 8011940 <rand+0x20>
 8011934:	4602      	mov	r2, r0
 8011936:	4b13      	ldr	r3, [pc, #76]	; (8011984 <rand+0x64>)
 8011938:	4813      	ldr	r0, [pc, #76]	; (8011988 <rand+0x68>)
 801193a:	214e      	movs	r1, #78	; 0x4e
 801193c:	f000 fa6e 	bl	8011e1c <__assert_func>
 8011940:	4a12      	ldr	r2, [pc, #72]	; (801198c <rand+0x6c>)
 8011942:	4b13      	ldr	r3, [pc, #76]	; (8011990 <rand+0x70>)
 8011944:	e9c0 2300 	strd	r2, r3, [r0]
 8011948:	4b12      	ldr	r3, [pc, #72]	; (8011994 <rand+0x74>)
 801194a:	6083      	str	r3, [r0, #8]
 801194c:	230b      	movs	r3, #11
 801194e:	8183      	strh	r3, [r0, #12]
 8011950:	2201      	movs	r2, #1
 8011952:	2300      	movs	r3, #0
 8011954:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011958:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801195a:	480f      	ldr	r0, [pc, #60]	; (8011998 <rand+0x78>)
 801195c:	690a      	ldr	r2, [r1, #16]
 801195e:	694b      	ldr	r3, [r1, #20]
 8011960:	4c0e      	ldr	r4, [pc, #56]	; (801199c <rand+0x7c>)
 8011962:	4350      	muls	r0, r2
 8011964:	fb04 0003 	mla	r0, r4, r3, r0
 8011968:	fba2 3404 	umull	r3, r4, r2, r4
 801196c:	1c5a      	adds	r2, r3, #1
 801196e:	4404      	add	r4, r0
 8011970:	f144 0000 	adc.w	r0, r4, #0
 8011974:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8011978:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801197c:	bd10      	pop	{r4, pc}
 801197e:	bf00      	nop
 8011980:	20000030 	.word	0x20000030
 8011984:	08018014 	.word	0x08018014
 8011988:	0801802b 	.word	0x0801802b
 801198c:	abcd330e 	.word	0xabcd330e
 8011990:	e66d1234 	.word	0xe66d1234
 8011994:	0005deec 	.word	0x0005deec
 8011998:	5851f42d 	.word	0x5851f42d
 801199c:	4c957f2d 	.word	0x4c957f2d

080119a0 <_sbrk_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4d06      	ldr	r5, [pc, #24]	; (80119bc <_sbrk_r+0x1c>)
 80119a4:	2300      	movs	r3, #0
 80119a6:	4604      	mov	r4, r0
 80119a8:	4608      	mov	r0, r1
 80119aa:	602b      	str	r3, [r5, #0]
 80119ac:	f7f0 f8c4 	bl	8001b38 <_sbrk>
 80119b0:	1c43      	adds	r3, r0, #1
 80119b2:	d102      	bne.n	80119ba <_sbrk_r+0x1a>
 80119b4:	682b      	ldr	r3, [r5, #0]
 80119b6:	b103      	cbz	r3, 80119ba <_sbrk_r+0x1a>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	20017500 	.word	0x20017500

080119c0 <siprintf>:
 80119c0:	b40e      	push	{r1, r2, r3}
 80119c2:	b500      	push	{lr}
 80119c4:	b09c      	sub	sp, #112	; 0x70
 80119c6:	ab1d      	add	r3, sp, #116	; 0x74
 80119c8:	9002      	str	r0, [sp, #8]
 80119ca:	9006      	str	r0, [sp, #24]
 80119cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119d0:	4809      	ldr	r0, [pc, #36]	; (80119f8 <siprintf+0x38>)
 80119d2:	9107      	str	r1, [sp, #28]
 80119d4:	9104      	str	r1, [sp, #16]
 80119d6:	4909      	ldr	r1, [pc, #36]	; (80119fc <siprintf+0x3c>)
 80119d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80119dc:	9105      	str	r1, [sp, #20]
 80119de:	6800      	ldr	r0, [r0, #0]
 80119e0:	9301      	str	r3, [sp, #4]
 80119e2:	a902      	add	r1, sp, #8
 80119e4:	f000 fcd6 	bl	8012394 <_svfiprintf_r>
 80119e8:	9b02      	ldr	r3, [sp, #8]
 80119ea:	2200      	movs	r2, #0
 80119ec:	701a      	strb	r2, [r3, #0]
 80119ee:	b01c      	add	sp, #112	; 0x70
 80119f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80119f4:	b003      	add	sp, #12
 80119f6:	4770      	bx	lr
 80119f8:	20000030 	.word	0x20000030
 80119fc:	ffff0208 	.word	0xffff0208

08011a00 <strcat>:
 8011a00:	b510      	push	{r4, lr}
 8011a02:	4602      	mov	r2, r0
 8011a04:	7814      	ldrb	r4, [r2, #0]
 8011a06:	4613      	mov	r3, r2
 8011a08:	3201      	adds	r2, #1
 8011a0a:	2c00      	cmp	r4, #0
 8011a0c:	d1fa      	bne.n	8011a04 <strcat+0x4>
 8011a0e:	3b01      	subs	r3, #1
 8011a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a18:	2a00      	cmp	r2, #0
 8011a1a:	d1f9      	bne.n	8011a10 <strcat+0x10>
 8011a1c:	bd10      	pop	{r4, pc}

08011a1e <strchr>:
 8011a1e:	b2c9      	uxtb	r1, r1
 8011a20:	4603      	mov	r3, r0
 8011a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a26:	b11a      	cbz	r2, 8011a30 <strchr+0x12>
 8011a28:	428a      	cmp	r2, r1
 8011a2a:	d1f9      	bne.n	8011a20 <strchr+0x2>
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	4770      	bx	lr
 8011a30:	2900      	cmp	r1, #0
 8011a32:	bf18      	it	ne
 8011a34:	2300      	movne	r3, #0
 8011a36:	e7f9      	b.n	8011a2c <strchr+0xe>

08011a38 <strcpy>:
 8011a38:	4603      	mov	r3, r0
 8011a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3e:	f803 2b01 	strb.w	r2, [r3], #1
 8011a42:	2a00      	cmp	r2, #0
 8011a44:	d1f9      	bne.n	8011a3a <strcpy+0x2>
 8011a46:	4770      	bx	lr

08011a48 <strncmp>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	b16a      	cbz	r2, 8011a68 <strncmp+0x20>
 8011a4c:	3901      	subs	r1, #1
 8011a4e:	1884      	adds	r4, r0, r2
 8011a50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d103      	bne.n	8011a64 <strncmp+0x1c>
 8011a5c:	42a0      	cmp	r0, r4
 8011a5e:	d001      	beq.n	8011a64 <strncmp+0x1c>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1f5      	bne.n	8011a50 <strncmp+0x8>
 8011a64:	1a98      	subs	r0, r3, r2
 8011a66:	bd10      	pop	{r4, pc}
 8011a68:	4610      	mov	r0, r2
 8011a6a:	e7fc      	b.n	8011a66 <strncmp+0x1e>

08011a6c <strncpy>:
 8011a6c:	b510      	push	{r4, lr}
 8011a6e:	3901      	subs	r1, #1
 8011a70:	4603      	mov	r3, r0
 8011a72:	b132      	cbz	r2, 8011a82 <strncpy+0x16>
 8011a74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a78:	f803 4b01 	strb.w	r4, [r3], #1
 8011a7c:	3a01      	subs	r2, #1
 8011a7e:	2c00      	cmp	r4, #0
 8011a80:	d1f7      	bne.n	8011a72 <strncpy+0x6>
 8011a82:	441a      	add	r2, r3
 8011a84:	2100      	movs	r1, #0
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d100      	bne.n	8011a8c <strncpy+0x20>
 8011a8a:	bd10      	pop	{r4, pc}
 8011a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8011a90:	e7f9      	b.n	8011a86 <strncpy+0x1a>

08011a92 <strstr>:
 8011a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a94:	780c      	ldrb	r4, [r1, #0]
 8011a96:	b164      	cbz	r4, 8011ab2 <strstr+0x20>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	781a      	ldrb	r2, [r3, #0]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	1c5e      	adds	r6, r3, #1
 8011aa0:	b90a      	cbnz	r2, 8011aa6 <strstr+0x14>
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	e005      	b.n	8011ab2 <strstr+0x20>
 8011aa6:	4294      	cmp	r4, r2
 8011aa8:	d108      	bne.n	8011abc <strstr+0x2a>
 8011aaa:	460d      	mov	r5, r1
 8011aac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011ab0:	b902      	cbnz	r2, 8011ab4 <strstr+0x22>
 8011ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8011ab8:	4297      	cmp	r7, r2
 8011aba:	d0f7      	beq.n	8011aac <strstr+0x1a>
 8011abc:	4633      	mov	r3, r6
 8011abe:	e7ec      	b.n	8011a9a <strstr+0x8>

08011ac0 <strtok>:
 8011ac0:	4b16      	ldr	r3, [pc, #88]	; (8011b1c <strtok+0x5c>)
 8011ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ac4:	681e      	ldr	r6, [r3, #0]
 8011ac6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011ac8:	4605      	mov	r5, r0
 8011aca:	b9fc      	cbnz	r4, 8011b0c <strtok+0x4c>
 8011acc:	2050      	movs	r0, #80	; 0x50
 8011ace:	9101      	str	r1, [sp, #4]
 8011ad0:	f7ff fda0 	bl	8011614 <malloc>
 8011ad4:	9901      	ldr	r1, [sp, #4]
 8011ad6:	65b0      	str	r0, [r6, #88]	; 0x58
 8011ad8:	4602      	mov	r2, r0
 8011ada:	b920      	cbnz	r0, 8011ae6 <strtok+0x26>
 8011adc:	4b10      	ldr	r3, [pc, #64]	; (8011b20 <strtok+0x60>)
 8011ade:	4811      	ldr	r0, [pc, #68]	; (8011b24 <strtok+0x64>)
 8011ae0:	2157      	movs	r1, #87	; 0x57
 8011ae2:	f000 f99b 	bl	8011e1c <__assert_func>
 8011ae6:	e9c0 4400 	strd	r4, r4, [r0]
 8011aea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011aee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011af2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011af6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011afa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011afe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011b02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011b06:	6184      	str	r4, [r0, #24]
 8011b08:	7704      	strb	r4, [r0, #28]
 8011b0a:	6244      	str	r4, [r0, #36]	; 0x24
 8011b0c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011b0e:	2301      	movs	r3, #1
 8011b10:	4628      	mov	r0, r5
 8011b12:	b002      	add	sp, #8
 8011b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b18:	f000 b806 	b.w	8011b28 <__strtok_r>
 8011b1c:	20000030 	.word	0x20000030
 8011b20:	08018014 	.word	0x08018014
 8011b24:	0801808a 	.word	0x0801808a

08011b28 <__strtok_r>:
 8011b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2a:	b908      	cbnz	r0, 8011b30 <__strtok_r+0x8>
 8011b2c:	6810      	ldr	r0, [r2, #0]
 8011b2e:	b188      	cbz	r0, 8011b54 <__strtok_r+0x2c>
 8011b30:	4604      	mov	r4, r0
 8011b32:	4620      	mov	r0, r4
 8011b34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011b38:	460f      	mov	r7, r1
 8011b3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011b3e:	b91e      	cbnz	r6, 8011b48 <__strtok_r+0x20>
 8011b40:	b965      	cbnz	r5, 8011b5c <__strtok_r+0x34>
 8011b42:	6015      	str	r5, [r2, #0]
 8011b44:	4628      	mov	r0, r5
 8011b46:	e005      	b.n	8011b54 <__strtok_r+0x2c>
 8011b48:	42b5      	cmp	r5, r6
 8011b4a:	d1f6      	bne.n	8011b3a <__strtok_r+0x12>
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d1f0      	bne.n	8011b32 <__strtok_r+0xa>
 8011b50:	6014      	str	r4, [r2, #0]
 8011b52:	7003      	strb	r3, [r0, #0]
 8011b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b56:	461c      	mov	r4, r3
 8011b58:	e00c      	b.n	8011b74 <__strtok_r+0x4c>
 8011b5a:	b915      	cbnz	r5, 8011b62 <__strtok_r+0x3a>
 8011b5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011b60:	460e      	mov	r6, r1
 8011b62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011b66:	42ab      	cmp	r3, r5
 8011b68:	d1f7      	bne.n	8011b5a <__strtok_r+0x32>
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0f3      	beq.n	8011b56 <__strtok_r+0x2e>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011b74:	6014      	str	r4, [r2, #0]
 8011b76:	e7ed      	b.n	8011b54 <__strtok_r+0x2c>

08011b78 <strtok_r>:
 8011b78:	2301      	movs	r3, #1
 8011b7a:	f7ff bfd5 	b.w	8011b28 <__strtok_r>
	...

08011b80 <_strtol_l.isra.0>:
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b86:	d001      	beq.n	8011b8c <_strtol_l.isra.0+0xc>
 8011b88:	2b24      	cmp	r3, #36	; 0x24
 8011b8a:	d906      	bls.n	8011b9a <_strtol_l.isra.0+0x1a>
 8011b8c:	f000 f964 	bl	8011e58 <__errno>
 8011b90:	2316      	movs	r3, #22
 8011b92:	6003      	str	r3, [r0, #0]
 8011b94:	2000      	movs	r0, #0
 8011b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9a:	4f3a      	ldr	r7, [pc, #232]	; (8011c84 <_strtol_l.isra.0+0x104>)
 8011b9c:	468e      	mov	lr, r1
 8011b9e:	4676      	mov	r6, lr
 8011ba0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011ba4:	5de5      	ldrb	r5, [r4, r7]
 8011ba6:	f015 0508 	ands.w	r5, r5, #8
 8011baa:	d1f8      	bne.n	8011b9e <_strtol_l.isra.0+0x1e>
 8011bac:	2c2d      	cmp	r4, #45	; 0x2d
 8011bae:	d134      	bne.n	8011c1a <_strtol_l.isra.0+0x9a>
 8011bb0:	f89e 4000 	ldrb.w	r4, [lr]
 8011bb4:	f04f 0801 	mov.w	r8, #1
 8011bb8:	f106 0e02 	add.w	lr, r6, #2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d05c      	beq.n	8011c7a <_strtol_l.isra.0+0xfa>
 8011bc0:	2b10      	cmp	r3, #16
 8011bc2:	d10c      	bne.n	8011bde <_strtol_l.isra.0+0x5e>
 8011bc4:	2c30      	cmp	r4, #48	; 0x30
 8011bc6:	d10a      	bne.n	8011bde <_strtol_l.isra.0+0x5e>
 8011bc8:	f89e 4000 	ldrb.w	r4, [lr]
 8011bcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011bd0:	2c58      	cmp	r4, #88	; 0x58
 8011bd2:	d14d      	bne.n	8011c70 <_strtol_l.isra.0+0xf0>
 8011bd4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011bd8:	2310      	movs	r3, #16
 8011bda:	f10e 0e02 	add.w	lr, lr, #2
 8011bde:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011be2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011be6:	2600      	movs	r6, #0
 8011be8:	fbbc f9f3 	udiv	r9, ip, r3
 8011bec:	4635      	mov	r5, r6
 8011bee:	fb03 ca19 	mls	sl, r3, r9, ip
 8011bf2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011bf6:	2f09      	cmp	r7, #9
 8011bf8:	d818      	bhi.n	8011c2c <_strtol_l.isra.0+0xac>
 8011bfa:	463c      	mov	r4, r7
 8011bfc:	42a3      	cmp	r3, r4
 8011bfe:	dd24      	ble.n	8011c4a <_strtol_l.isra.0+0xca>
 8011c00:	2e00      	cmp	r6, #0
 8011c02:	db1f      	blt.n	8011c44 <_strtol_l.isra.0+0xc4>
 8011c04:	45a9      	cmp	r9, r5
 8011c06:	d31d      	bcc.n	8011c44 <_strtol_l.isra.0+0xc4>
 8011c08:	d101      	bne.n	8011c0e <_strtol_l.isra.0+0x8e>
 8011c0a:	45a2      	cmp	sl, r4
 8011c0c:	db1a      	blt.n	8011c44 <_strtol_l.isra.0+0xc4>
 8011c0e:	fb05 4503 	mla	r5, r5, r3, r4
 8011c12:	2601      	movs	r6, #1
 8011c14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011c18:	e7eb      	b.n	8011bf2 <_strtol_l.isra.0+0x72>
 8011c1a:	2c2b      	cmp	r4, #43	; 0x2b
 8011c1c:	bf08      	it	eq
 8011c1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011c22:	46a8      	mov	r8, r5
 8011c24:	bf08      	it	eq
 8011c26:	f106 0e02 	addeq.w	lr, r6, #2
 8011c2a:	e7c7      	b.n	8011bbc <_strtol_l.isra.0+0x3c>
 8011c2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011c30:	2f19      	cmp	r7, #25
 8011c32:	d801      	bhi.n	8011c38 <_strtol_l.isra.0+0xb8>
 8011c34:	3c37      	subs	r4, #55	; 0x37
 8011c36:	e7e1      	b.n	8011bfc <_strtol_l.isra.0+0x7c>
 8011c38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011c3c:	2f19      	cmp	r7, #25
 8011c3e:	d804      	bhi.n	8011c4a <_strtol_l.isra.0+0xca>
 8011c40:	3c57      	subs	r4, #87	; 0x57
 8011c42:	e7db      	b.n	8011bfc <_strtol_l.isra.0+0x7c>
 8011c44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011c48:	e7e4      	b.n	8011c14 <_strtol_l.isra.0+0x94>
 8011c4a:	2e00      	cmp	r6, #0
 8011c4c:	da05      	bge.n	8011c5a <_strtol_l.isra.0+0xda>
 8011c4e:	2322      	movs	r3, #34	; 0x22
 8011c50:	6003      	str	r3, [r0, #0]
 8011c52:	4665      	mov	r5, ip
 8011c54:	b942      	cbnz	r2, 8011c68 <_strtol_l.isra.0+0xe8>
 8011c56:	4628      	mov	r0, r5
 8011c58:	e79d      	b.n	8011b96 <_strtol_l.isra.0+0x16>
 8011c5a:	f1b8 0f00 	cmp.w	r8, #0
 8011c5e:	d000      	beq.n	8011c62 <_strtol_l.isra.0+0xe2>
 8011c60:	426d      	negs	r5, r5
 8011c62:	2a00      	cmp	r2, #0
 8011c64:	d0f7      	beq.n	8011c56 <_strtol_l.isra.0+0xd6>
 8011c66:	b10e      	cbz	r6, 8011c6c <_strtol_l.isra.0+0xec>
 8011c68:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011c6c:	6011      	str	r1, [r2, #0]
 8011c6e:	e7f2      	b.n	8011c56 <_strtol_l.isra.0+0xd6>
 8011c70:	2430      	movs	r4, #48	; 0x30
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d1b3      	bne.n	8011bde <_strtol_l.isra.0+0x5e>
 8011c76:	2308      	movs	r3, #8
 8011c78:	e7b1      	b.n	8011bde <_strtol_l.isra.0+0x5e>
 8011c7a:	2c30      	cmp	r4, #48	; 0x30
 8011c7c:	d0a4      	beq.n	8011bc8 <_strtol_l.isra.0+0x48>
 8011c7e:	230a      	movs	r3, #10
 8011c80:	e7ad      	b.n	8011bde <_strtol_l.isra.0+0x5e>
 8011c82:	bf00      	nop
 8011c84:	08017f0f 	.word	0x08017f0f

08011c88 <strtol>:
 8011c88:	4613      	mov	r3, r2
 8011c8a:	460a      	mov	r2, r1
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	4802      	ldr	r0, [pc, #8]	; (8011c98 <strtol+0x10>)
 8011c90:	6800      	ldr	r0, [r0, #0]
 8011c92:	f7ff bf75 	b.w	8011b80 <_strtol_l.isra.0>
 8011c96:	bf00      	nop
 8011c98:	20000030 	.word	0x20000030

08011c9c <__swbuf_r>:
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	460e      	mov	r6, r1
 8011ca0:	4614      	mov	r4, r2
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	b118      	cbz	r0, 8011cae <__swbuf_r+0x12>
 8011ca6:	6983      	ldr	r3, [r0, #24]
 8011ca8:	b90b      	cbnz	r3, 8011cae <__swbuf_r+0x12>
 8011caa:	f000 f9f5 	bl	8012098 <__sinit>
 8011cae:	4b21      	ldr	r3, [pc, #132]	; (8011d34 <__swbuf_r+0x98>)
 8011cb0:	429c      	cmp	r4, r3
 8011cb2:	d12b      	bne.n	8011d0c <__swbuf_r+0x70>
 8011cb4:	686c      	ldr	r4, [r5, #4]
 8011cb6:	69a3      	ldr	r3, [r4, #24]
 8011cb8:	60a3      	str	r3, [r4, #8]
 8011cba:	89a3      	ldrh	r3, [r4, #12]
 8011cbc:	071a      	lsls	r2, r3, #28
 8011cbe:	d52f      	bpl.n	8011d20 <__swbuf_r+0x84>
 8011cc0:	6923      	ldr	r3, [r4, #16]
 8011cc2:	b36b      	cbz	r3, 8011d20 <__swbuf_r+0x84>
 8011cc4:	6923      	ldr	r3, [r4, #16]
 8011cc6:	6820      	ldr	r0, [r4, #0]
 8011cc8:	1ac0      	subs	r0, r0, r3
 8011cca:	6963      	ldr	r3, [r4, #20]
 8011ccc:	b2f6      	uxtb	r6, r6
 8011cce:	4283      	cmp	r3, r0
 8011cd0:	4637      	mov	r7, r6
 8011cd2:	dc04      	bgt.n	8011cde <__swbuf_r+0x42>
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f000 f94a 	bl	8011f70 <_fflush_r>
 8011cdc:	bb30      	cbnz	r0, 8011d2c <__swbuf_r+0x90>
 8011cde:	68a3      	ldr	r3, [r4, #8]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	60a3      	str	r3, [r4, #8]
 8011ce4:	6823      	ldr	r3, [r4, #0]
 8011ce6:	1c5a      	adds	r2, r3, #1
 8011ce8:	6022      	str	r2, [r4, #0]
 8011cea:	701e      	strb	r6, [r3, #0]
 8011cec:	6963      	ldr	r3, [r4, #20]
 8011cee:	3001      	adds	r0, #1
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	d004      	beq.n	8011cfe <__swbuf_r+0x62>
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	07db      	lsls	r3, r3, #31
 8011cf8:	d506      	bpl.n	8011d08 <__swbuf_r+0x6c>
 8011cfa:	2e0a      	cmp	r6, #10
 8011cfc:	d104      	bne.n	8011d08 <__swbuf_r+0x6c>
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4628      	mov	r0, r5
 8011d02:	f000 f935 	bl	8011f70 <_fflush_r>
 8011d06:	b988      	cbnz	r0, 8011d2c <__swbuf_r+0x90>
 8011d08:	4638      	mov	r0, r7
 8011d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d0c:	4b0a      	ldr	r3, [pc, #40]	; (8011d38 <__swbuf_r+0x9c>)
 8011d0e:	429c      	cmp	r4, r3
 8011d10:	d101      	bne.n	8011d16 <__swbuf_r+0x7a>
 8011d12:	68ac      	ldr	r4, [r5, #8]
 8011d14:	e7cf      	b.n	8011cb6 <__swbuf_r+0x1a>
 8011d16:	4b09      	ldr	r3, [pc, #36]	; (8011d3c <__swbuf_r+0xa0>)
 8011d18:	429c      	cmp	r4, r3
 8011d1a:	bf08      	it	eq
 8011d1c:	68ec      	ldreq	r4, [r5, #12]
 8011d1e:	e7ca      	b.n	8011cb6 <__swbuf_r+0x1a>
 8011d20:	4621      	mov	r1, r4
 8011d22:	4628      	mov	r0, r5
 8011d24:	f000 f80c 	bl	8011d40 <__swsetup_r>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d0cb      	beq.n	8011cc4 <__swbuf_r+0x28>
 8011d2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011d30:	e7ea      	b.n	8011d08 <__swbuf_r+0x6c>
 8011d32:	bf00      	nop
 8011d34:	08018148 	.word	0x08018148
 8011d38:	08018168 	.word	0x08018168
 8011d3c:	08018128 	.word	0x08018128

08011d40 <__swsetup_r>:
 8011d40:	4b32      	ldr	r3, [pc, #200]	; (8011e0c <__swsetup_r+0xcc>)
 8011d42:	b570      	push	{r4, r5, r6, lr}
 8011d44:	681d      	ldr	r5, [r3, #0]
 8011d46:	4606      	mov	r6, r0
 8011d48:	460c      	mov	r4, r1
 8011d4a:	b125      	cbz	r5, 8011d56 <__swsetup_r+0x16>
 8011d4c:	69ab      	ldr	r3, [r5, #24]
 8011d4e:	b913      	cbnz	r3, 8011d56 <__swsetup_r+0x16>
 8011d50:	4628      	mov	r0, r5
 8011d52:	f000 f9a1 	bl	8012098 <__sinit>
 8011d56:	4b2e      	ldr	r3, [pc, #184]	; (8011e10 <__swsetup_r+0xd0>)
 8011d58:	429c      	cmp	r4, r3
 8011d5a:	d10f      	bne.n	8011d7c <__swsetup_r+0x3c>
 8011d5c:	686c      	ldr	r4, [r5, #4]
 8011d5e:	89a3      	ldrh	r3, [r4, #12]
 8011d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d64:	0719      	lsls	r1, r3, #28
 8011d66:	d42c      	bmi.n	8011dc2 <__swsetup_r+0x82>
 8011d68:	06dd      	lsls	r5, r3, #27
 8011d6a:	d411      	bmi.n	8011d90 <__swsetup_r+0x50>
 8011d6c:	2309      	movs	r3, #9
 8011d6e:	6033      	str	r3, [r6, #0]
 8011d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d7a:	e03e      	b.n	8011dfa <__swsetup_r+0xba>
 8011d7c:	4b25      	ldr	r3, [pc, #148]	; (8011e14 <__swsetup_r+0xd4>)
 8011d7e:	429c      	cmp	r4, r3
 8011d80:	d101      	bne.n	8011d86 <__swsetup_r+0x46>
 8011d82:	68ac      	ldr	r4, [r5, #8]
 8011d84:	e7eb      	b.n	8011d5e <__swsetup_r+0x1e>
 8011d86:	4b24      	ldr	r3, [pc, #144]	; (8011e18 <__swsetup_r+0xd8>)
 8011d88:	429c      	cmp	r4, r3
 8011d8a:	bf08      	it	eq
 8011d8c:	68ec      	ldreq	r4, [r5, #12]
 8011d8e:	e7e6      	b.n	8011d5e <__swsetup_r+0x1e>
 8011d90:	0758      	lsls	r0, r3, #29
 8011d92:	d512      	bpl.n	8011dba <__swsetup_r+0x7a>
 8011d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d96:	b141      	cbz	r1, 8011daa <__swsetup_r+0x6a>
 8011d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d9c:	4299      	cmp	r1, r3
 8011d9e:	d002      	beq.n	8011da6 <__swsetup_r+0x66>
 8011da0:	4630      	mov	r0, r6
 8011da2:	f7ff fc85 	bl	80116b0 <_free_r>
 8011da6:	2300      	movs	r3, #0
 8011da8:	6363      	str	r3, [r4, #52]	; 0x34
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011db0:	81a3      	strh	r3, [r4, #12]
 8011db2:	2300      	movs	r3, #0
 8011db4:	6063      	str	r3, [r4, #4]
 8011db6:	6923      	ldr	r3, [r4, #16]
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	89a3      	ldrh	r3, [r4, #12]
 8011dbc:	f043 0308 	orr.w	r3, r3, #8
 8011dc0:	81a3      	strh	r3, [r4, #12]
 8011dc2:	6923      	ldr	r3, [r4, #16]
 8011dc4:	b94b      	cbnz	r3, 8011dda <__swsetup_r+0x9a>
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dd0:	d003      	beq.n	8011dda <__swsetup_r+0x9a>
 8011dd2:	4621      	mov	r1, r4
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f000 fa35 	bl	8012244 <__smakebuf_r>
 8011dda:	89a0      	ldrh	r0, [r4, #12]
 8011ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011de0:	f010 0301 	ands.w	r3, r0, #1
 8011de4:	d00a      	beq.n	8011dfc <__swsetup_r+0xbc>
 8011de6:	2300      	movs	r3, #0
 8011de8:	60a3      	str	r3, [r4, #8]
 8011dea:	6963      	ldr	r3, [r4, #20]
 8011dec:	425b      	negs	r3, r3
 8011dee:	61a3      	str	r3, [r4, #24]
 8011df0:	6923      	ldr	r3, [r4, #16]
 8011df2:	b943      	cbnz	r3, 8011e06 <__swsetup_r+0xc6>
 8011df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011df8:	d1ba      	bne.n	8011d70 <__swsetup_r+0x30>
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
 8011dfc:	0781      	lsls	r1, r0, #30
 8011dfe:	bf58      	it	pl
 8011e00:	6963      	ldrpl	r3, [r4, #20]
 8011e02:	60a3      	str	r3, [r4, #8]
 8011e04:	e7f4      	b.n	8011df0 <__swsetup_r+0xb0>
 8011e06:	2000      	movs	r0, #0
 8011e08:	e7f7      	b.n	8011dfa <__swsetup_r+0xba>
 8011e0a:	bf00      	nop
 8011e0c:	20000030 	.word	0x20000030
 8011e10:	08018148 	.word	0x08018148
 8011e14:	08018168 	.word	0x08018168
 8011e18:	08018128 	.word	0x08018128

08011e1c <__assert_func>:
 8011e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e1e:	4614      	mov	r4, r2
 8011e20:	461a      	mov	r2, r3
 8011e22:	4b09      	ldr	r3, [pc, #36]	; (8011e48 <__assert_func+0x2c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4605      	mov	r5, r0
 8011e28:	68d8      	ldr	r0, [r3, #12]
 8011e2a:	b14c      	cbz	r4, 8011e40 <__assert_func+0x24>
 8011e2c:	4b07      	ldr	r3, [pc, #28]	; (8011e4c <__assert_func+0x30>)
 8011e2e:	9100      	str	r1, [sp, #0]
 8011e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e34:	4906      	ldr	r1, [pc, #24]	; (8011e50 <__assert_func+0x34>)
 8011e36:	462b      	mov	r3, r5
 8011e38:	f000 f9ac 	bl	8012194 <fiprintf>
 8011e3c:	f000 feee 	bl	8012c1c <abort>
 8011e40:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <__assert_func+0x38>)
 8011e42:	461c      	mov	r4, r3
 8011e44:	e7f3      	b.n	8011e2e <__assert_func+0x12>
 8011e46:	bf00      	nop
 8011e48:	20000030 	.word	0x20000030
 8011e4c:	080180eb 	.word	0x080180eb
 8011e50:	080180f8 	.word	0x080180f8
 8011e54:	08018126 	.word	0x08018126

08011e58 <__errno>:
 8011e58:	4b01      	ldr	r3, [pc, #4]	; (8011e60 <__errno+0x8>)
 8011e5a:	6818      	ldr	r0, [r3, #0]
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	20000030 	.word	0x20000030

08011e64 <__sflush_r>:
 8011e64:	898a      	ldrh	r2, [r1, #12]
 8011e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	0710      	lsls	r0, r2, #28
 8011e6e:	460c      	mov	r4, r1
 8011e70:	d458      	bmi.n	8011f24 <__sflush_r+0xc0>
 8011e72:	684b      	ldr	r3, [r1, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	dc05      	bgt.n	8011e84 <__sflush_r+0x20>
 8011e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	dc02      	bgt.n	8011e84 <__sflush_r+0x20>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e86:	2e00      	cmp	r6, #0
 8011e88:	d0f9      	beq.n	8011e7e <__sflush_r+0x1a>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e90:	682f      	ldr	r7, [r5, #0]
 8011e92:	602b      	str	r3, [r5, #0]
 8011e94:	d032      	beq.n	8011efc <__sflush_r+0x98>
 8011e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e98:	89a3      	ldrh	r3, [r4, #12]
 8011e9a:	075a      	lsls	r2, r3, #29
 8011e9c:	d505      	bpl.n	8011eaa <__sflush_r+0x46>
 8011e9e:	6863      	ldr	r3, [r4, #4]
 8011ea0:	1ac0      	subs	r0, r0, r3
 8011ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ea4:	b10b      	cbz	r3, 8011eaa <__sflush_r+0x46>
 8011ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ea8:	1ac0      	subs	r0, r0, r3
 8011eaa:	2300      	movs	r3, #0
 8011eac:	4602      	mov	r2, r0
 8011eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eb0:	6a21      	ldr	r1, [r4, #32]
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	47b0      	blx	r6
 8011eb6:	1c43      	adds	r3, r0, #1
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	d106      	bne.n	8011eca <__sflush_r+0x66>
 8011ebc:	6829      	ldr	r1, [r5, #0]
 8011ebe:	291d      	cmp	r1, #29
 8011ec0:	d82c      	bhi.n	8011f1c <__sflush_r+0xb8>
 8011ec2:	4a2a      	ldr	r2, [pc, #168]	; (8011f6c <__sflush_r+0x108>)
 8011ec4:	40ca      	lsrs	r2, r1
 8011ec6:	07d6      	lsls	r6, r2, #31
 8011ec8:	d528      	bpl.n	8011f1c <__sflush_r+0xb8>
 8011eca:	2200      	movs	r2, #0
 8011ecc:	6062      	str	r2, [r4, #4]
 8011ece:	04d9      	lsls	r1, r3, #19
 8011ed0:	6922      	ldr	r2, [r4, #16]
 8011ed2:	6022      	str	r2, [r4, #0]
 8011ed4:	d504      	bpl.n	8011ee0 <__sflush_r+0x7c>
 8011ed6:	1c42      	adds	r2, r0, #1
 8011ed8:	d101      	bne.n	8011ede <__sflush_r+0x7a>
 8011eda:	682b      	ldr	r3, [r5, #0]
 8011edc:	b903      	cbnz	r3, 8011ee0 <__sflush_r+0x7c>
 8011ede:	6560      	str	r0, [r4, #84]	; 0x54
 8011ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ee2:	602f      	str	r7, [r5, #0]
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	d0ca      	beq.n	8011e7e <__sflush_r+0x1a>
 8011ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011eec:	4299      	cmp	r1, r3
 8011eee:	d002      	beq.n	8011ef6 <__sflush_r+0x92>
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	f7ff fbdd 	bl	80116b0 <_free_r>
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8011efa:	e7c1      	b.n	8011e80 <__sflush_r+0x1c>
 8011efc:	6a21      	ldr	r1, [r4, #32]
 8011efe:	2301      	movs	r3, #1
 8011f00:	4628      	mov	r0, r5
 8011f02:	47b0      	blx	r6
 8011f04:	1c41      	adds	r1, r0, #1
 8011f06:	d1c7      	bne.n	8011e98 <__sflush_r+0x34>
 8011f08:	682b      	ldr	r3, [r5, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d0c4      	beq.n	8011e98 <__sflush_r+0x34>
 8011f0e:	2b1d      	cmp	r3, #29
 8011f10:	d001      	beq.n	8011f16 <__sflush_r+0xb2>
 8011f12:	2b16      	cmp	r3, #22
 8011f14:	d101      	bne.n	8011f1a <__sflush_r+0xb6>
 8011f16:	602f      	str	r7, [r5, #0]
 8011f18:	e7b1      	b.n	8011e7e <__sflush_r+0x1a>
 8011f1a:	89a3      	ldrh	r3, [r4, #12]
 8011f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f20:	81a3      	strh	r3, [r4, #12]
 8011f22:	e7ad      	b.n	8011e80 <__sflush_r+0x1c>
 8011f24:	690f      	ldr	r7, [r1, #16]
 8011f26:	2f00      	cmp	r7, #0
 8011f28:	d0a9      	beq.n	8011e7e <__sflush_r+0x1a>
 8011f2a:	0793      	lsls	r3, r2, #30
 8011f2c:	680e      	ldr	r6, [r1, #0]
 8011f2e:	bf08      	it	eq
 8011f30:	694b      	ldreq	r3, [r1, #20]
 8011f32:	600f      	str	r7, [r1, #0]
 8011f34:	bf18      	it	ne
 8011f36:	2300      	movne	r3, #0
 8011f38:	eba6 0807 	sub.w	r8, r6, r7
 8011f3c:	608b      	str	r3, [r1, #8]
 8011f3e:	f1b8 0f00 	cmp.w	r8, #0
 8011f42:	dd9c      	ble.n	8011e7e <__sflush_r+0x1a>
 8011f44:	6a21      	ldr	r1, [r4, #32]
 8011f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f48:	4643      	mov	r3, r8
 8011f4a:	463a      	mov	r2, r7
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	47b0      	blx	r6
 8011f50:	2800      	cmp	r0, #0
 8011f52:	dc06      	bgt.n	8011f62 <__sflush_r+0xfe>
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f5a:	81a3      	strh	r3, [r4, #12]
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f60:	e78e      	b.n	8011e80 <__sflush_r+0x1c>
 8011f62:	4407      	add	r7, r0
 8011f64:	eba8 0800 	sub.w	r8, r8, r0
 8011f68:	e7e9      	b.n	8011f3e <__sflush_r+0xda>
 8011f6a:	bf00      	nop
 8011f6c:	20400001 	.word	0x20400001

08011f70 <_fflush_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	690b      	ldr	r3, [r1, #16]
 8011f74:	4605      	mov	r5, r0
 8011f76:	460c      	mov	r4, r1
 8011f78:	b913      	cbnz	r3, 8011f80 <_fflush_r+0x10>
 8011f7a:	2500      	movs	r5, #0
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	bd38      	pop	{r3, r4, r5, pc}
 8011f80:	b118      	cbz	r0, 8011f8a <_fflush_r+0x1a>
 8011f82:	6983      	ldr	r3, [r0, #24]
 8011f84:	b90b      	cbnz	r3, 8011f8a <_fflush_r+0x1a>
 8011f86:	f000 f887 	bl	8012098 <__sinit>
 8011f8a:	4b14      	ldr	r3, [pc, #80]	; (8011fdc <_fflush_r+0x6c>)
 8011f8c:	429c      	cmp	r4, r3
 8011f8e:	d11b      	bne.n	8011fc8 <_fflush_r+0x58>
 8011f90:	686c      	ldr	r4, [r5, #4]
 8011f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d0ef      	beq.n	8011f7a <_fflush_r+0xa>
 8011f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f9c:	07d0      	lsls	r0, r2, #31
 8011f9e:	d404      	bmi.n	8011faa <_fflush_r+0x3a>
 8011fa0:	0599      	lsls	r1, r3, #22
 8011fa2:	d402      	bmi.n	8011faa <_fflush_r+0x3a>
 8011fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fa6:	f000 f927 	bl	80121f8 <__retarget_lock_acquire_recursive>
 8011faa:	4628      	mov	r0, r5
 8011fac:	4621      	mov	r1, r4
 8011fae:	f7ff ff59 	bl	8011e64 <__sflush_r>
 8011fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fb4:	07da      	lsls	r2, r3, #31
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	d4e0      	bmi.n	8011f7c <_fflush_r+0xc>
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	059b      	lsls	r3, r3, #22
 8011fbe:	d4dd      	bmi.n	8011f7c <_fflush_r+0xc>
 8011fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fc2:	f000 f91a 	bl	80121fa <__retarget_lock_release_recursive>
 8011fc6:	e7d9      	b.n	8011f7c <_fflush_r+0xc>
 8011fc8:	4b05      	ldr	r3, [pc, #20]	; (8011fe0 <_fflush_r+0x70>)
 8011fca:	429c      	cmp	r4, r3
 8011fcc:	d101      	bne.n	8011fd2 <_fflush_r+0x62>
 8011fce:	68ac      	ldr	r4, [r5, #8]
 8011fd0:	e7df      	b.n	8011f92 <_fflush_r+0x22>
 8011fd2:	4b04      	ldr	r3, [pc, #16]	; (8011fe4 <_fflush_r+0x74>)
 8011fd4:	429c      	cmp	r4, r3
 8011fd6:	bf08      	it	eq
 8011fd8:	68ec      	ldreq	r4, [r5, #12]
 8011fda:	e7da      	b.n	8011f92 <_fflush_r+0x22>
 8011fdc:	08018148 	.word	0x08018148
 8011fe0:	08018168 	.word	0x08018168
 8011fe4:	08018128 	.word	0x08018128

08011fe8 <std>:
 8011fe8:	2300      	movs	r3, #0
 8011fea:	b510      	push	{r4, lr}
 8011fec:	4604      	mov	r4, r0
 8011fee:	e9c0 3300 	strd	r3, r3, [r0]
 8011ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ff6:	6083      	str	r3, [r0, #8]
 8011ff8:	8181      	strh	r1, [r0, #12]
 8011ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8011ffc:	81c2      	strh	r2, [r0, #14]
 8011ffe:	6183      	str	r3, [r0, #24]
 8012000:	4619      	mov	r1, r3
 8012002:	2208      	movs	r2, #8
 8012004:	305c      	adds	r0, #92	; 0x5c
 8012006:	f7ff fb4b 	bl	80116a0 <memset>
 801200a:	4b05      	ldr	r3, [pc, #20]	; (8012020 <std+0x38>)
 801200c:	6263      	str	r3, [r4, #36]	; 0x24
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <std+0x3c>)
 8012010:	62a3      	str	r3, [r4, #40]	; 0x28
 8012012:	4b05      	ldr	r3, [pc, #20]	; (8012028 <std+0x40>)
 8012014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012016:	4b05      	ldr	r3, [pc, #20]	; (801202c <std+0x44>)
 8012018:	6224      	str	r4, [r4, #32]
 801201a:	6323      	str	r3, [r4, #48]	; 0x30
 801201c:	bd10      	pop	{r4, pc}
 801201e:	bf00      	nop
 8012020:	08012b71 	.word	0x08012b71
 8012024:	08012b93 	.word	0x08012b93
 8012028:	08012bcb 	.word	0x08012bcb
 801202c:	08012bef 	.word	0x08012bef

08012030 <_cleanup_r>:
 8012030:	4901      	ldr	r1, [pc, #4]	; (8012038 <_cleanup_r+0x8>)
 8012032:	f000 b8c1 	b.w	80121b8 <_fwalk_reent>
 8012036:	bf00      	nop
 8012038:	08011f71 	.word	0x08011f71

0801203c <__sfmoreglue>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	1e4a      	subs	r2, r1, #1
 8012040:	2568      	movs	r5, #104	; 0x68
 8012042:	4355      	muls	r5, r2
 8012044:	460e      	mov	r6, r1
 8012046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801204a:	f7ff fb81 	bl	8011750 <_malloc_r>
 801204e:	4604      	mov	r4, r0
 8012050:	b140      	cbz	r0, 8012064 <__sfmoreglue+0x28>
 8012052:	2100      	movs	r1, #0
 8012054:	e9c0 1600 	strd	r1, r6, [r0]
 8012058:	300c      	adds	r0, #12
 801205a:	60a0      	str	r0, [r4, #8]
 801205c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012060:	f7ff fb1e 	bl	80116a0 <memset>
 8012064:	4620      	mov	r0, r4
 8012066:	bd70      	pop	{r4, r5, r6, pc}

08012068 <__sfp_lock_acquire>:
 8012068:	4801      	ldr	r0, [pc, #4]	; (8012070 <__sfp_lock_acquire+0x8>)
 801206a:	f000 b8c5 	b.w	80121f8 <__retarget_lock_acquire_recursive>
 801206e:	bf00      	nop
 8012070:	2001750c 	.word	0x2001750c

08012074 <__sfp_lock_release>:
 8012074:	4801      	ldr	r0, [pc, #4]	; (801207c <__sfp_lock_release+0x8>)
 8012076:	f000 b8c0 	b.w	80121fa <__retarget_lock_release_recursive>
 801207a:	bf00      	nop
 801207c:	2001750c 	.word	0x2001750c

08012080 <__sinit_lock_acquire>:
 8012080:	4801      	ldr	r0, [pc, #4]	; (8012088 <__sinit_lock_acquire+0x8>)
 8012082:	f000 b8b9 	b.w	80121f8 <__retarget_lock_acquire_recursive>
 8012086:	bf00      	nop
 8012088:	20017507 	.word	0x20017507

0801208c <__sinit_lock_release>:
 801208c:	4801      	ldr	r0, [pc, #4]	; (8012094 <__sinit_lock_release+0x8>)
 801208e:	f000 b8b4 	b.w	80121fa <__retarget_lock_release_recursive>
 8012092:	bf00      	nop
 8012094:	20017507 	.word	0x20017507

08012098 <__sinit>:
 8012098:	b510      	push	{r4, lr}
 801209a:	4604      	mov	r4, r0
 801209c:	f7ff fff0 	bl	8012080 <__sinit_lock_acquire>
 80120a0:	69a3      	ldr	r3, [r4, #24]
 80120a2:	b11b      	cbz	r3, 80120ac <__sinit+0x14>
 80120a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a8:	f7ff bff0 	b.w	801208c <__sinit_lock_release>
 80120ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120b0:	6523      	str	r3, [r4, #80]	; 0x50
 80120b2:	4b13      	ldr	r3, [pc, #76]	; (8012100 <__sinit+0x68>)
 80120b4:	4a13      	ldr	r2, [pc, #76]	; (8012104 <__sinit+0x6c>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80120ba:	42a3      	cmp	r3, r4
 80120bc:	bf04      	itt	eq
 80120be:	2301      	moveq	r3, #1
 80120c0:	61a3      	streq	r3, [r4, #24]
 80120c2:	4620      	mov	r0, r4
 80120c4:	f000 f820 	bl	8012108 <__sfp>
 80120c8:	6060      	str	r0, [r4, #4]
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 f81c 	bl	8012108 <__sfp>
 80120d0:	60a0      	str	r0, [r4, #8]
 80120d2:	4620      	mov	r0, r4
 80120d4:	f000 f818 	bl	8012108 <__sfp>
 80120d8:	2200      	movs	r2, #0
 80120da:	60e0      	str	r0, [r4, #12]
 80120dc:	2104      	movs	r1, #4
 80120de:	6860      	ldr	r0, [r4, #4]
 80120e0:	f7ff ff82 	bl	8011fe8 <std>
 80120e4:	68a0      	ldr	r0, [r4, #8]
 80120e6:	2201      	movs	r2, #1
 80120e8:	2109      	movs	r1, #9
 80120ea:	f7ff ff7d 	bl	8011fe8 <std>
 80120ee:	68e0      	ldr	r0, [r4, #12]
 80120f0:	2202      	movs	r2, #2
 80120f2:	2112      	movs	r1, #18
 80120f4:	f7ff ff78 	bl	8011fe8 <std>
 80120f8:	2301      	movs	r3, #1
 80120fa:	61a3      	str	r3, [r4, #24]
 80120fc:	e7d2      	b.n	80120a4 <__sinit+0xc>
 80120fe:	bf00      	nop
 8012100:	08018010 	.word	0x08018010
 8012104:	08012031 	.word	0x08012031

08012108 <__sfp>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	4607      	mov	r7, r0
 801210c:	f7ff ffac 	bl	8012068 <__sfp_lock_acquire>
 8012110:	4b1e      	ldr	r3, [pc, #120]	; (801218c <__sfp+0x84>)
 8012112:	681e      	ldr	r6, [r3, #0]
 8012114:	69b3      	ldr	r3, [r6, #24]
 8012116:	b913      	cbnz	r3, 801211e <__sfp+0x16>
 8012118:	4630      	mov	r0, r6
 801211a:	f7ff ffbd 	bl	8012098 <__sinit>
 801211e:	3648      	adds	r6, #72	; 0x48
 8012120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012124:	3b01      	subs	r3, #1
 8012126:	d503      	bpl.n	8012130 <__sfp+0x28>
 8012128:	6833      	ldr	r3, [r6, #0]
 801212a:	b30b      	cbz	r3, 8012170 <__sfp+0x68>
 801212c:	6836      	ldr	r6, [r6, #0]
 801212e:	e7f7      	b.n	8012120 <__sfp+0x18>
 8012130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012134:	b9d5      	cbnz	r5, 801216c <__sfp+0x64>
 8012136:	4b16      	ldr	r3, [pc, #88]	; (8012190 <__sfp+0x88>)
 8012138:	60e3      	str	r3, [r4, #12]
 801213a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801213e:	6665      	str	r5, [r4, #100]	; 0x64
 8012140:	f000 f859 	bl	80121f6 <__retarget_lock_init_recursive>
 8012144:	f7ff ff96 	bl	8012074 <__sfp_lock_release>
 8012148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801214c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012150:	6025      	str	r5, [r4, #0]
 8012152:	61a5      	str	r5, [r4, #24]
 8012154:	2208      	movs	r2, #8
 8012156:	4629      	mov	r1, r5
 8012158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801215c:	f7ff faa0 	bl	80116a0 <memset>
 8012160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012168:	4620      	mov	r0, r4
 801216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801216c:	3468      	adds	r4, #104	; 0x68
 801216e:	e7d9      	b.n	8012124 <__sfp+0x1c>
 8012170:	2104      	movs	r1, #4
 8012172:	4638      	mov	r0, r7
 8012174:	f7ff ff62 	bl	801203c <__sfmoreglue>
 8012178:	4604      	mov	r4, r0
 801217a:	6030      	str	r0, [r6, #0]
 801217c:	2800      	cmp	r0, #0
 801217e:	d1d5      	bne.n	801212c <__sfp+0x24>
 8012180:	f7ff ff78 	bl	8012074 <__sfp_lock_release>
 8012184:	230c      	movs	r3, #12
 8012186:	603b      	str	r3, [r7, #0]
 8012188:	e7ee      	b.n	8012168 <__sfp+0x60>
 801218a:	bf00      	nop
 801218c:	08018010 	.word	0x08018010
 8012190:	ffff0001 	.word	0xffff0001

08012194 <fiprintf>:
 8012194:	b40e      	push	{r1, r2, r3}
 8012196:	b503      	push	{r0, r1, lr}
 8012198:	4601      	mov	r1, r0
 801219a:	ab03      	add	r3, sp, #12
 801219c:	4805      	ldr	r0, [pc, #20]	; (80121b4 <fiprintf+0x20>)
 801219e:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a2:	6800      	ldr	r0, [r0, #0]
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	f000 fa1f 	bl	80125e8 <_vfiprintf_r>
 80121aa:	b002      	add	sp, #8
 80121ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80121b0:	b003      	add	sp, #12
 80121b2:	4770      	bx	lr
 80121b4:	20000030 	.word	0x20000030

080121b8 <_fwalk_reent>:
 80121b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121bc:	4606      	mov	r6, r0
 80121be:	4688      	mov	r8, r1
 80121c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121c4:	2700      	movs	r7, #0
 80121c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121ca:	f1b9 0901 	subs.w	r9, r9, #1
 80121ce:	d505      	bpl.n	80121dc <_fwalk_reent+0x24>
 80121d0:	6824      	ldr	r4, [r4, #0]
 80121d2:	2c00      	cmp	r4, #0
 80121d4:	d1f7      	bne.n	80121c6 <_fwalk_reent+0xe>
 80121d6:	4638      	mov	r0, r7
 80121d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121dc:	89ab      	ldrh	r3, [r5, #12]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d907      	bls.n	80121f2 <_fwalk_reent+0x3a>
 80121e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121e6:	3301      	adds	r3, #1
 80121e8:	d003      	beq.n	80121f2 <_fwalk_reent+0x3a>
 80121ea:	4629      	mov	r1, r5
 80121ec:	4630      	mov	r0, r6
 80121ee:	47c0      	blx	r8
 80121f0:	4307      	orrs	r7, r0
 80121f2:	3568      	adds	r5, #104	; 0x68
 80121f4:	e7e9      	b.n	80121ca <_fwalk_reent+0x12>

080121f6 <__retarget_lock_init_recursive>:
 80121f6:	4770      	bx	lr

080121f8 <__retarget_lock_acquire_recursive>:
 80121f8:	4770      	bx	lr

080121fa <__retarget_lock_release_recursive>:
 80121fa:	4770      	bx	lr

080121fc <__swhatbuf_r>:
 80121fc:	b570      	push	{r4, r5, r6, lr}
 80121fe:	460e      	mov	r6, r1
 8012200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012204:	2900      	cmp	r1, #0
 8012206:	b096      	sub	sp, #88	; 0x58
 8012208:	4614      	mov	r4, r2
 801220a:	461d      	mov	r5, r3
 801220c:	da07      	bge.n	801221e <__swhatbuf_r+0x22>
 801220e:	2300      	movs	r3, #0
 8012210:	602b      	str	r3, [r5, #0]
 8012212:	89b3      	ldrh	r3, [r6, #12]
 8012214:	061a      	lsls	r2, r3, #24
 8012216:	d410      	bmi.n	801223a <__swhatbuf_r+0x3e>
 8012218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801221c:	e00e      	b.n	801223c <__swhatbuf_r+0x40>
 801221e:	466a      	mov	r2, sp
 8012220:	f000 fd14 	bl	8012c4c <_fstat_r>
 8012224:	2800      	cmp	r0, #0
 8012226:	dbf2      	blt.n	801220e <__swhatbuf_r+0x12>
 8012228:	9a01      	ldr	r2, [sp, #4]
 801222a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801222e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012232:	425a      	negs	r2, r3
 8012234:	415a      	adcs	r2, r3
 8012236:	602a      	str	r2, [r5, #0]
 8012238:	e7ee      	b.n	8012218 <__swhatbuf_r+0x1c>
 801223a:	2340      	movs	r3, #64	; 0x40
 801223c:	2000      	movs	r0, #0
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	b016      	add	sp, #88	; 0x58
 8012242:	bd70      	pop	{r4, r5, r6, pc}

08012244 <__smakebuf_r>:
 8012244:	898b      	ldrh	r3, [r1, #12]
 8012246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012248:	079d      	lsls	r5, r3, #30
 801224a:	4606      	mov	r6, r0
 801224c:	460c      	mov	r4, r1
 801224e:	d507      	bpl.n	8012260 <__smakebuf_r+0x1c>
 8012250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	6123      	str	r3, [r4, #16]
 8012258:	2301      	movs	r3, #1
 801225a:	6163      	str	r3, [r4, #20]
 801225c:	b002      	add	sp, #8
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	ab01      	add	r3, sp, #4
 8012262:	466a      	mov	r2, sp
 8012264:	f7ff ffca 	bl	80121fc <__swhatbuf_r>
 8012268:	9900      	ldr	r1, [sp, #0]
 801226a:	4605      	mov	r5, r0
 801226c:	4630      	mov	r0, r6
 801226e:	f7ff fa6f 	bl	8011750 <_malloc_r>
 8012272:	b948      	cbnz	r0, 8012288 <__smakebuf_r+0x44>
 8012274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012278:	059a      	lsls	r2, r3, #22
 801227a:	d4ef      	bmi.n	801225c <__smakebuf_r+0x18>
 801227c:	f023 0303 	bic.w	r3, r3, #3
 8012280:	f043 0302 	orr.w	r3, r3, #2
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	e7e3      	b.n	8012250 <__smakebuf_r+0xc>
 8012288:	4b0d      	ldr	r3, [pc, #52]	; (80122c0 <__smakebuf_r+0x7c>)
 801228a:	62b3      	str	r3, [r6, #40]	; 0x28
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	6020      	str	r0, [r4, #0]
 8012290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	9b00      	ldr	r3, [sp, #0]
 8012298:	6163      	str	r3, [r4, #20]
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	6120      	str	r0, [r4, #16]
 801229e:	b15b      	cbz	r3, 80122b8 <__smakebuf_r+0x74>
 80122a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122a4:	4630      	mov	r0, r6
 80122a6:	f000 fce3 	bl	8012c70 <_isatty_r>
 80122aa:	b128      	cbz	r0, 80122b8 <__smakebuf_r+0x74>
 80122ac:	89a3      	ldrh	r3, [r4, #12]
 80122ae:	f023 0303 	bic.w	r3, r3, #3
 80122b2:	f043 0301 	orr.w	r3, r3, #1
 80122b6:	81a3      	strh	r3, [r4, #12]
 80122b8:	89a0      	ldrh	r0, [r4, #12]
 80122ba:	4305      	orrs	r5, r0
 80122bc:	81a5      	strh	r5, [r4, #12]
 80122be:	e7cd      	b.n	801225c <__smakebuf_r+0x18>
 80122c0:	08012031 	.word	0x08012031

080122c4 <__malloc_lock>:
 80122c4:	4801      	ldr	r0, [pc, #4]	; (80122cc <__malloc_lock+0x8>)
 80122c6:	f7ff bf97 	b.w	80121f8 <__retarget_lock_acquire_recursive>
 80122ca:	bf00      	nop
 80122cc:	20017508 	.word	0x20017508

080122d0 <__malloc_unlock>:
 80122d0:	4801      	ldr	r0, [pc, #4]	; (80122d8 <__malloc_unlock+0x8>)
 80122d2:	f7ff bf92 	b.w	80121fa <__retarget_lock_release_recursive>
 80122d6:	bf00      	nop
 80122d8:	20017508 	.word	0x20017508

080122dc <__ssputs_r>:
 80122dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122e0:	688e      	ldr	r6, [r1, #8]
 80122e2:	429e      	cmp	r6, r3
 80122e4:	4682      	mov	sl, r0
 80122e6:	460c      	mov	r4, r1
 80122e8:	4690      	mov	r8, r2
 80122ea:	461f      	mov	r7, r3
 80122ec:	d838      	bhi.n	8012360 <__ssputs_r+0x84>
 80122ee:	898a      	ldrh	r2, [r1, #12]
 80122f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80122f4:	d032      	beq.n	801235c <__ssputs_r+0x80>
 80122f6:	6825      	ldr	r5, [r4, #0]
 80122f8:	6909      	ldr	r1, [r1, #16]
 80122fa:	eba5 0901 	sub.w	r9, r5, r1
 80122fe:	6965      	ldr	r5, [r4, #20]
 8012300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012308:	3301      	adds	r3, #1
 801230a:	444b      	add	r3, r9
 801230c:	106d      	asrs	r5, r5, #1
 801230e:	429d      	cmp	r5, r3
 8012310:	bf38      	it	cc
 8012312:	461d      	movcc	r5, r3
 8012314:	0553      	lsls	r3, r2, #21
 8012316:	d531      	bpl.n	801237c <__ssputs_r+0xa0>
 8012318:	4629      	mov	r1, r5
 801231a:	f7ff fa19 	bl	8011750 <_malloc_r>
 801231e:	4606      	mov	r6, r0
 8012320:	b950      	cbnz	r0, 8012338 <__ssputs_r+0x5c>
 8012322:	230c      	movs	r3, #12
 8012324:	f8ca 3000 	str.w	r3, [sl]
 8012328:	89a3      	ldrh	r3, [r4, #12]
 801232a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801232e:	81a3      	strh	r3, [r4, #12]
 8012330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012338:	6921      	ldr	r1, [r4, #16]
 801233a:	464a      	mov	r2, r9
 801233c:	f7ff f988 	bl	8011650 <memcpy>
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801234a:	81a3      	strh	r3, [r4, #12]
 801234c:	6126      	str	r6, [r4, #16]
 801234e:	6165      	str	r5, [r4, #20]
 8012350:	444e      	add	r6, r9
 8012352:	eba5 0509 	sub.w	r5, r5, r9
 8012356:	6026      	str	r6, [r4, #0]
 8012358:	60a5      	str	r5, [r4, #8]
 801235a:	463e      	mov	r6, r7
 801235c:	42be      	cmp	r6, r7
 801235e:	d900      	bls.n	8012362 <__ssputs_r+0x86>
 8012360:	463e      	mov	r6, r7
 8012362:	4632      	mov	r2, r6
 8012364:	6820      	ldr	r0, [r4, #0]
 8012366:	4641      	mov	r1, r8
 8012368:	f7ff f980 	bl	801166c <memmove>
 801236c:	68a3      	ldr	r3, [r4, #8]
 801236e:	6822      	ldr	r2, [r4, #0]
 8012370:	1b9b      	subs	r3, r3, r6
 8012372:	4432      	add	r2, r6
 8012374:	60a3      	str	r3, [r4, #8]
 8012376:	6022      	str	r2, [r4, #0]
 8012378:	2000      	movs	r0, #0
 801237a:	e7db      	b.n	8012334 <__ssputs_r+0x58>
 801237c:	462a      	mov	r2, r5
 801237e:	f000 fc99 	bl	8012cb4 <_realloc_r>
 8012382:	4606      	mov	r6, r0
 8012384:	2800      	cmp	r0, #0
 8012386:	d1e1      	bne.n	801234c <__ssputs_r+0x70>
 8012388:	6921      	ldr	r1, [r4, #16]
 801238a:	4650      	mov	r0, sl
 801238c:	f7ff f990 	bl	80116b0 <_free_r>
 8012390:	e7c7      	b.n	8012322 <__ssputs_r+0x46>
	...

08012394 <_svfiprintf_r>:
 8012394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012398:	4698      	mov	r8, r3
 801239a:	898b      	ldrh	r3, [r1, #12]
 801239c:	061b      	lsls	r3, r3, #24
 801239e:	b09d      	sub	sp, #116	; 0x74
 80123a0:	4607      	mov	r7, r0
 80123a2:	460d      	mov	r5, r1
 80123a4:	4614      	mov	r4, r2
 80123a6:	d50e      	bpl.n	80123c6 <_svfiprintf_r+0x32>
 80123a8:	690b      	ldr	r3, [r1, #16]
 80123aa:	b963      	cbnz	r3, 80123c6 <_svfiprintf_r+0x32>
 80123ac:	2140      	movs	r1, #64	; 0x40
 80123ae:	f7ff f9cf 	bl	8011750 <_malloc_r>
 80123b2:	6028      	str	r0, [r5, #0]
 80123b4:	6128      	str	r0, [r5, #16]
 80123b6:	b920      	cbnz	r0, 80123c2 <_svfiprintf_r+0x2e>
 80123b8:	230c      	movs	r3, #12
 80123ba:	603b      	str	r3, [r7, #0]
 80123bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123c0:	e0d1      	b.n	8012566 <_svfiprintf_r+0x1d2>
 80123c2:	2340      	movs	r3, #64	; 0x40
 80123c4:	616b      	str	r3, [r5, #20]
 80123c6:	2300      	movs	r3, #0
 80123c8:	9309      	str	r3, [sp, #36]	; 0x24
 80123ca:	2320      	movs	r3, #32
 80123cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80123d4:	2330      	movs	r3, #48	; 0x30
 80123d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012580 <_svfiprintf_r+0x1ec>
 80123da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123de:	f04f 0901 	mov.w	r9, #1
 80123e2:	4623      	mov	r3, r4
 80123e4:	469a      	mov	sl, r3
 80123e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123ea:	b10a      	cbz	r2, 80123f0 <_svfiprintf_r+0x5c>
 80123ec:	2a25      	cmp	r2, #37	; 0x25
 80123ee:	d1f9      	bne.n	80123e4 <_svfiprintf_r+0x50>
 80123f0:	ebba 0b04 	subs.w	fp, sl, r4
 80123f4:	d00b      	beq.n	801240e <_svfiprintf_r+0x7a>
 80123f6:	465b      	mov	r3, fp
 80123f8:	4622      	mov	r2, r4
 80123fa:	4629      	mov	r1, r5
 80123fc:	4638      	mov	r0, r7
 80123fe:	f7ff ff6d 	bl	80122dc <__ssputs_r>
 8012402:	3001      	adds	r0, #1
 8012404:	f000 80aa 	beq.w	801255c <_svfiprintf_r+0x1c8>
 8012408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801240a:	445a      	add	r2, fp
 801240c:	9209      	str	r2, [sp, #36]	; 0x24
 801240e:	f89a 3000 	ldrb.w	r3, [sl]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 80a2 	beq.w	801255c <_svfiprintf_r+0x1c8>
 8012418:	2300      	movs	r3, #0
 801241a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801241e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012422:	f10a 0a01 	add.w	sl, sl, #1
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	9307      	str	r3, [sp, #28]
 801242a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801242e:	931a      	str	r3, [sp, #104]	; 0x68
 8012430:	4654      	mov	r4, sl
 8012432:	2205      	movs	r2, #5
 8012434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012438:	4851      	ldr	r0, [pc, #324]	; (8012580 <_svfiprintf_r+0x1ec>)
 801243a:	f7ed fee1 	bl	8000200 <memchr>
 801243e:	9a04      	ldr	r2, [sp, #16]
 8012440:	b9d8      	cbnz	r0, 801247a <_svfiprintf_r+0xe6>
 8012442:	06d0      	lsls	r0, r2, #27
 8012444:	bf44      	itt	mi
 8012446:	2320      	movmi	r3, #32
 8012448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801244c:	0711      	lsls	r1, r2, #28
 801244e:	bf44      	itt	mi
 8012450:	232b      	movmi	r3, #43	; 0x2b
 8012452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012456:	f89a 3000 	ldrb.w	r3, [sl]
 801245a:	2b2a      	cmp	r3, #42	; 0x2a
 801245c:	d015      	beq.n	801248a <_svfiprintf_r+0xf6>
 801245e:	9a07      	ldr	r2, [sp, #28]
 8012460:	4654      	mov	r4, sl
 8012462:	2000      	movs	r0, #0
 8012464:	f04f 0c0a 	mov.w	ip, #10
 8012468:	4621      	mov	r1, r4
 801246a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801246e:	3b30      	subs	r3, #48	; 0x30
 8012470:	2b09      	cmp	r3, #9
 8012472:	d94e      	bls.n	8012512 <_svfiprintf_r+0x17e>
 8012474:	b1b0      	cbz	r0, 80124a4 <_svfiprintf_r+0x110>
 8012476:	9207      	str	r2, [sp, #28]
 8012478:	e014      	b.n	80124a4 <_svfiprintf_r+0x110>
 801247a:	eba0 0308 	sub.w	r3, r0, r8
 801247e:	fa09 f303 	lsl.w	r3, r9, r3
 8012482:	4313      	orrs	r3, r2
 8012484:	9304      	str	r3, [sp, #16]
 8012486:	46a2      	mov	sl, r4
 8012488:	e7d2      	b.n	8012430 <_svfiprintf_r+0x9c>
 801248a:	9b03      	ldr	r3, [sp, #12]
 801248c:	1d19      	adds	r1, r3, #4
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	9103      	str	r1, [sp, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	bfbb      	ittet	lt
 8012496:	425b      	neglt	r3, r3
 8012498:	f042 0202 	orrlt.w	r2, r2, #2
 801249c:	9307      	strge	r3, [sp, #28]
 801249e:	9307      	strlt	r3, [sp, #28]
 80124a0:	bfb8      	it	lt
 80124a2:	9204      	strlt	r2, [sp, #16]
 80124a4:	7823      	ldrb	r3, [r4, #0]
 80124a6:	2b2e      	cmp	r3, #46	; 0x2e
 80124a8:	d10c      	bne.n	80124c4 <_svfiprintf_r+0x130>
 80124aa:	7863      	ldrb	r3, [r4, #1]
 80124ac:	2b2a      	cmp	r3, #42	; 0x2a
 80124ae:	d135      	bne.n	801251c <_svfiprintf_r+0x188>
 80124b0:	9b03      	ldr	r3, [sp, #12]
 80124b2:	1d1a      	adds	r2, r3, #4
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	9203      	str	r2, [sp, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	bfb8      	it	lt
 80124bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124c0:	3402      	adds	r4, #2
 80124c2:	9305      	str	r3, [sp, #20]
 80124c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012590 <_svfiprintf_r+0x1fc>
 80124c8:	7821      	ldrb	r1, [r4, #0]
 80124ca:	2203      	movs	r2, #3
 80124cc:	4650      	mov	r0, sl
 80124ce:	f7ed fe97 	bl	8000200 <memchr>
 80124d2:	b140      	cbz	r0, 80124e6 <_svfiprintf_r+0x152>
 80124d4:	2340      	movs	r3, #64	; 0x40
 80124d6:	eba0 000a 	sub.w	r0, r0, sl
 80124da:	fa03 f000 	lsl.w	r0, r3, r0
 80124de:	9b04      	ldr	r3, [sp, #16]
 80124e0:	4303      	orrs	r3, r0
 80124e2:	3401      	adds	r4, #1
 80124e4:	9304      	str	r3, [sp, #16]
 80124e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ea:	4826      	ldr	r0, [pc, #152]	; (8012584 <_svfiprintf_r+0x1f0>)
 80124ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124f0:	2206      	movs	r2, #6
 80124f2:	f7ed fe85 	bl	8000200 <memchr>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	d038      	beq.n	801256c <_svfiprintf_r+0x1d8>
 80124fa:	4b23      	ldr	r3, [pc, #140]	; (8012588 <_svfiprintf_r+0x1f4>)
 80124fc:	bb1b      	cbnz	r3, 8012546 <_svfiprintf_r+0x1b2>
 80124fe:	9b03      	ldr	r3, [sp, #12]
 8012500:	3307      	adds	r3, #7
 8012502:	f023 0307 	bic.w	r3, r3, #7
 8012506:	3308      	adds	r3, #8
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801250c:	4433      	add	r3, r6
 801250e:	9309      	str	r3, [sp, #36]	; 0x24
 8012510:	e767      	b.n	80123e2 <_svfiprintf_r+0x4e>
 8012512:	fb0c 3202 	mla	r2, ip, r2, r3
 8012516:	460c      	mov	r4, r1
 8012518:	2001      	movs	r0, #1
 801251a:	e7a5      	b.n	8012468 <_svfiprintf_r+0xd4>
 801251c:	2300      	movs	r3, #0
 801251e:	3401      	adds	r4, #1
 8012520:	9305      	str	r3, [sp, #20]
 8012522:	4619      	mov	r1, r3
 8012524:	f04f 0c0a 	mov.w	ip, #10
 8012528:	4620      	mov	r0, r4
 801252a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801252e:	3a30      	subs	r2, #48	; 0x30
 8012530:	2a09      	cmp	r2, #9
 8012532:	d903      	bls.n	801253c <_svfiprintf_r+0x1a8>
 8012534:	2b00      	cmp	r3, #0
 8012536:	d0c5      	beq.n	80124c4 <_svfiprintf_r+0x130>
 8012538:	9105      	str	r1, [sp, #20]
 801253a:	e7c3      	b.n	80124c4 <_svfiprintf_r+0x130>
 801253c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012540:	4604      	mov	r4, r0
 8012542:	2301      	movs	r3, #1
 8012544:	e7f0      	b.n	8012528 <_svfiprintf_r+0x194>
 8012546:	ab03      	add	r3, sp, #12
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	462a      	mov	r2, r5
 801254c:	4b0f      	ldr	r3, [pc, #60]	; (801258c <_svfiprintf_r+0x1f8>)
 801254e:	a904      	add	r1, sp, #16
 8012550:	4638      	mov	r0, r7
 8012552:	f3af 8000 	nop.w
 8012556:	1c42      	adds	r2, r0, #1
 8012558:	4606      	mov	r6, r0
 801255a:	d1d6      	bne.n	801250a <_svfiprintf_r+0x176>
 801255c:	89ab      	ldrh	r3, [r5, #12]
 801255e:	065b      	lsls	r3, r3, #25
 8012560:	f53f af2c 	bmi.w	80123bc <_svfiprintf_r+0x28>
 8012564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012566:	b01d      	add	sp, #116	; 0x74
 8012568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256c:	ab03      	add	r3, sp, #12
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	462a      	mov	r2, r5
 8012572:	4b06      	ldr	r3, [pc, #24]	; (801258c <_svfiprintf_r+0x1f8>)
 8012574:	a904      	add	r1, sp, #16
 8012576:	4638      	mov	r0, r7
 8012578:	f000 f9d4 	bl	8012924 <_printf_i>
 801257c:	e7eb      	b.n	8012556 <_svfiprintf_r+0x1c2>
 801257e:	bf00      	nop
 8012580:	08018188 	.word	0x08018188
 8012584:	08018192 	.word	0x08018192
 8012588:	00000000 	.word	0x00000000
 801258c:	080122dd 	.word	0x080122dd
 8012590:	0801818e 	.word	0x0801818e

08012594 <__sfputc_r>:
 8012594:	6893      	ldr	r3, [r2, #8]
 8012596:	3b01      	subs	r3, #1
 8012598:	2b00      	cmp	r3, #0
 801259a:	b410      	push	{r4}
 801259c:	6093      	str	r3, [r2, #8]
 801259e:	da08      	bge.n	80125b2 <__sfputc_r+0x1e>
 80125a0:	6994      	ldr	r4, [r2, #24]
 80125a2:	42a3      	cmp	r3, r4
 80125a4:	db01      	blt.n	80125aa <__sfputc_r+0x16>
 80125a6:	290a      	cmp	r1, #10
 80125a8:	d103      	bne.n	80125b2 <__sfputc_r+0x1e>
 80125aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ae:	f7ff bb75 	b.w	8011c9c <__swbuf_r>
 80125b2:	6813      	ldr	r3, [r2, #0]
 80125b4:	1c58      	adds	r0, r3, #1
 80125b6:	6010      	str	r0, [r2, #0]
 80125b8:	7019      	strb	r1, [r3, #0]
 80125ba:	4608      	mov	r0, r1
 80125bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125c0:	4770      	bx	lr

080125c2 <__sfputs_r>:
 80125c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c4:	4606      	mov	r6, r0
 80125c6:	460f      	mov	r7, r1
 80125c8:	4614      	mov	r4, r2
 80125ca:	18d5      	adds	r5, r2, r3
 80125cc:	42ac      	cmp	r4, r5
 80125ce:	d101      	bne.n	80125d4 <__sfputs_r+0x12>
 80125d0:	2000      	movs	r0, #0
 80125d2:	e007      	b.n	80125e4 <__sfputs_r+0x22>
 80125d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125d8:	463a      	mov	r2, r7
 80125da:	4630      	mov	r0, r6
 80125dc:	f7ff ffda 	bl	8012594 <__sfputc_r>
 80125e0:	1c43      	adds	r3, r0, #1
 80125e2:	d1f3      	bne.n	80125cc <__sfputs_r+0xa>
 80125e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080125e8 <_vfiprintf_r>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	460d      	mov	r5, r1
 80125ee:	b09d      	sub	sp, #116	; 0x74
 80125f0:	4614      	mov	r4, r2
 80125f2:	4698      	mov	r8, r3
 80125f4:	4606      	mov	r6, r0
 80125f6:	b118      	cbz	r0, 8012600 <_vfiprintf_r+0x18>
 80125f8:	6983      	ldr	r3, [r0, #24]
 80125fa:	b90b      	cbnz	r3, 8012600 <_vfiprintf_r+0x18>
 80125fc:	f7ff fd4c 	bl	8012098 <__sinit>
 8012600:	4b89      	ldr	r3, [pc, #548]	; (8012828 <_vfiprintf_r+0x240>)
 8012602:	429d      	cmp	r5, r3
 8012604:	d11b      	bne.n	801263e <_vfiprintf_r+0x56>
 8012606:	6875      	ldr	r5, [r6, #4]
 8012608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801260a:	07d9      	lsls	r1, r3, #31
 801260c:	d405      	bmi.n	801261a <_vfiprintf_r+0x32>
 801260e:	89ab      	ldrh	r3, [r5, #12]
 8012610:	059a      	lsls	r2, r3, #22
 8012612:	d402      	bmi.n	801261a <_vfiprintf_r+0x32>
 8012614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012616:	f7ff fdef 	bl	80121f8 <__retarget_lock_acquire_recursive>
 801261a:	89ab      	ldrh	r3, [r5, #12]
 801261c:	071b      	lsls	r3, r3, #28
 801261e:	d501      	bpl.n	8012624 <_vfiprintf_r+0x3c>
 8012620:	692b      	ldr	r3, [r5, #16]
 8012622:	b9eb      	cbnz	r3, 8012660 <_vfiprintf_r+0x78>
 8012624:	4629      	mov	r1, r5
 8012626:	4630      	mov	r0, r6
 8012628:	f7ff fb8a 	bl	8011d40 <__swsetup_r>
 801262c:	b1c0      	cbz	r0, 8012660 <_vfiprintf_r+0x78>
 801262e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012630:	07dc      	lsls	r4, r3, #31
 8012632:	d50e      	bpl.n	8012652 <_vfiprintf_r+0x6a>
 8012634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012638:	b01d      	add	sp, #116	; 0x74
 801263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801263e:	4b7b      	ldr	r3, [pc, #492]	; (801282c <_vfiprintf_r+0x244>)
 8012640:	429d      	cmp	r5, r3
 8012642:	d101      	bne.n	8012648 <_vfiprintf_r+0x60>
 8012644:	68b5      	ldr	r5, [r6, #8]
 8012646:	e7df      	b.n	8012608 <_vfiprintf_r+0x20>
 8012648:	4b79      	ldr	r3, [pc, #484]	; (8012830 <_vfiprintf_r+0x248>)
 801264a:	429d      	cmp	r5, r3
 801264c:	bf08      	it	eq
 801264e:	68f5      	ldreq	r5, [r6, #12]
 8012650:	e7da      	b.n	8012608 <_vfiprintf_r+0x20>
 8012652:	89ab      	ldrh	r3, [r5, #12]
 8012654:	0598      	lsls	r0, r3, #22
 8012656:	d4ed      	bmi.n	8012634 <_vfiprintf_r+0x4c>
 8012658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801265a:	f7ff fdce 	bl	80121fa <__retarget_lock_release_recursive>
 801265e:	e7e9      	b.n	8012634 <_vfiprintf_r+0x4c>
 8012660:	2300      	movs	r3, #0
 8012662:	9309      	str	r3, [sp, #36]	; 0x24
 8012664:	2320      	movs	r3, #32
 8012666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801266a:	f8cd 800c 	str.w	r8, [sp, #12]
 801266e:	2330      	movs	r3, #48	; 0x30
 8012670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012834 <_vfiprintf_r+0x24c>
 8012674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012678:	f04f 0901 	mov.w	r9, #1
 801267c:	4623      	mov	r3, r4
 801267e:	469a      	mov	sl, r3
 8012680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012684:	b10a      	cbz	r2, 801268a <_vfiprintf_r+0xa2>
 8012686:	2a25      	cmp	r2, #37	; 0x25
 8012688:	d1f9      	bne.n	801267e <_vfiprintf_r+0x96>
 801268a:	ebba 0b04 	subs.w	fp, sl, r4
 801268e:	d00b      	beq.n	80126a8 <_vfiprintf_r+0xc0>
 8012690:	465b      	mov	r3, fp
 8012692:	4622      	mov	r2, r4
 8012694:	4629      	mov	r1, r5
 8012696:	4630      	mov	r0, r6
 8012698:	f7ff ff93 	bl	80125c2 <__sfputs_r>
 801269c:	3001      	adds	r0, #1
 801269e:	f000 80aa 	beq.w	80127f6 <_vfiprintf_r+0x20e>
 80126a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126a4:	445a      	add	r2, fp
 80126a6:	9209      	str	r2, [sp, #36]	; 0x24
 80126a8:	f89a 3000 	ldrb.w	r3, [sl]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f000 80a2 	beq.w	80127f6 <_vfiprintf_r+0x20e>
 80126b2:	2300      	movs	r3, #0
 80126b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126bc:	f10a 0a01 	add.w	sl, sl, #1
 80126c0:	9304      	str	r3, [sp, #16]
 80126c2:	9307      	str	r3, [sp, #28]
 80126c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126c8:	931a      	str	r3, [sp, #104]	; 0x68
 80126ca:	4654      	mov	r4, sl
 80126cc:	2205      	movs	r2, #5
 80126ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126d2:	4858      	ldr	r0, [pc, #352]	; (8012834 <_vfiprintf_r+0x24c>)
 80126d4:	f7ed fd94 	bl	8000200 <memchr>
 80126d8:	9a04      	ldr	r2, [sp, #16]
 80126da:	b9d8      	cbnz	r0, 8012714 <_vfiprintf_r+0x12c>
 80126dc:	06d1      	lsls	r1, r2, #27
 80126de:	bf44      	itt	mi
 80126e0:	2320      	movmi	r3, #32
 80126e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126e6:	0713      	lsls	r3, r2, #28
 80126e8:	bf44      	itt	mi
 80126ea:	232b      	movmi	r3, #43	; 0x2b
 80126ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126f0:	f89a 3000 	ldrb.w	r3, [sl]
 80126f4:	2b2a      	cmp	r3, #42	; 0x2a
 80126f6:	d015      	beq.n	8012724 <_vfiprintf_r+0x13c>
 80126f8:	9a07      	ldr	r2, [sp, #28]
 80126fa:	4654      	mov	r4, sl
 80126fc:	2000      	movs	r0, #0
 80126fe:	f04f 0c0a 	mov.w	ip, #10
 8012702:	4621      	mov	r1, r4
 8012704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012708:	3b30      	subs	r3, #48	; 0x30
 801270a:	2b09      	cmp	r3, #9
 801270c:	d94e      	bls.n	80127ac <_vfiprintf_r+0x1c4>
 801270e:	b1b0      	cbz	r0, 801273e <_vfiprintf_r+0x156>
 8012710:	9207      	str	r2, [sp, #28]
 8012712:	e014      	b.n	801273e <_vfiprintf_r+0x156>
 8012714:	eba0 0308 	sub.w	r3, r0, r8
 8012718:	fa09 f303 	lsl.w	r3, r9, r3
 801271c:	4313      	orrs	r3, r2
 801271e:	9304      	str	r3, [sp, #16]
 8012720:	46a2      	mov	sl, r4
 8012722:	e7d2      	b.n	80126ca <_vfiprintf_r+0xe2>
 8012724:	9b03      	ldr	r3, [sp, #12]
 8012726:	1d19      	adds	r1, r3, #4
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	9103      	str	r1, [sp, #12]
 801272c:	2b00      	cmp	r3, #0
 801272e:	bfbb      	ittet	lt
 8012730:	425b      	neglt	r3, r3
 8012732:	f042 0202 	orrlt.w	r2, r2, #2
 8012736:	9307      	strge	r3, [sp, #28]
 8012738:	9307      	strlt	r3, [sp, #28]
 801273a:	bfb8      	it	lt
 801273c:	9204      	strlt	r2, [sp, #16]
 801273e:	7823      	ldrb	r3, [r4, #0]
 8012740:	2b2e      	cmp	r3, #46	; 0x2e
 8012742:	d10c      	bne.n	801275e <_vfiprintf_r+0x176>
 8012744:	7863      	ldrb	r3, [r4, #1]
 8012746:	2b2a      	cmp	r3, #42	; 0x2a
 8012748:	d135      	bne.n	80127b6 <_vfiprintf_r+0x1ce>
 801274a:	9b03      	ldr	r3, [sp, #12]
 801274c:	1d1a      	adds	r2, r3, #4
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	9203      	str	r2, [sp, #12]
 8012752:	2b00      	cmp	r3, #0
 8012754:	bfb8      	it	lt
 8012756:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801275a:	3402      	adds	r4, #2
 801275c:	9305      	str	r3, [sp, #20]
 801275e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012844 <_vfiprintf_r+0x25c>
 8012762:	7821      	ldrb	r1, [r4, #0]
 8012764:	2203      	movs	r2, #3
 8012766:	4650      	mov	r0, sl
 8012768:	f7ed fd4a 	bl	8000200 <memchr>
 801276c:	b140      	cbz	r0, 8012780 <_vfiprintf_r+0x198>
 801276e:	2340      	movs	r3, #64	; 0x40
 8012770:	eba0 000a 	sub.w	r0, r0, sl
 8012774:	fa03 f000 	lsl.w	r0, r3, r0
 8012778:	9b04      	ldr	r3, [sp, #16]
 801277a:	4303      	orrs	r3, r0
 801277c:	3401      	adds	r4, #1
 801277e:	9304      	str	r3, [sp, #16]
 8012780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012784:	482c      	ldr	r0, [pc, #176]	; (8012838 <_vfiprintf_r+0x250>)
 8012786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801278a:	2206      	movs	r2, #6
 801278c:	f7ed fd38 	bl	8000200 <memchr>
 8012790:	2800      	cmp	r0, #0
 8012792:	d03f      	beq.n	8012814 <_vfiprintf_r+0x22c>
 8012794:	4b29      	ldr	r3, [pc, #164]	; (801283c <_vfiprintf_r+0x254>)
 8012796:	bb1b      	cbnz	r3, 80127e0 <_vfiprintf_r+0x1f8>
 8012798:	9b03      	ldr	r3, [sp, #12]
 801279a:	3307      	adds	r3, #7
 801279c:	f023 0307 	bic.w	r3, r3, #7
 80127a0:	3308      	adds	r3, #8
 80127a2:	9303      	str	r3, [sp, #12]
 80127a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127a6:	443b      	add	r3, r7
 80127a8:	9309      	str	r3, [sp, #36]	; 0x24
 80127aa:	e767      	b.n	801267c <_vfiprintf_r+0x94>
 80127ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80127b0:	460c      	mov	r4, r1
 80127b2:	2001      	movs	r0, #1
 80127b4:	e7a5      	b.n	8012702 <_vfiprintf_r+0x11a>
 80127b6:	2300      	movs	r3, #0
 80127b8:	3401      	adds	r4, #1
 80127ba:	9305      	str	r3, [sp, #20]
 80127bc:	4619      	mov	r1, r3
 80127be:	f04f 0c0a 	mov.w	ip, #10
 80127c2:	4620      	mov	r0, r4
 80127c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127c8:	3a30      	subs	r2, #48	; 0x30
 80127ca:	2a09      	cmp	r2, #9
 80127cc:	d903      	bls.n	80127d6 <_vfiprintf_r+0x1ee>
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d0c5      	beq.n	801275e <_vfiprintf_r+0x176>
 80127d2:	9105      	str	r1, [sp, #20]
 80127d4:	e7c3      	b.n	801275e <_vfiprintf_r+0x176>
 80127d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80127da:	4604      	mov	r4, r0
 80127dc:	2301      	movs	r3, #1
 80127de:	e7f0      	b.n	80127c2 <_vfiprintf_r+0x1da>
 80127e0:	ab03      	add	r3, sp, #12
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	462a      	mov	r2, r5
 80127e6:	4b16      	ldr	r3, [pc, #88]	; (8012840 <_vfiprintf_r+0x258>)
 80127e8:	a904      	add	r1, sp, #16
 80127ea:	4630      	mov	r0, r6
 80127ec:	f3af 8000 	nop.w
 80127f0:	4607      	mov	r7, r0
 80127f2:	1c78      	adds	r0, r7, #1
 80127f4:	d1d6      	bne.n	80127a4 <_vfiprintf_r+0x1bc>
 80127f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127f8:	07d9      	lsls	r1, r3, #31
 80127fa:	d405      	bmi.n	8012808 <_vfiprintf_r+0x220>
 80127fc:	89ab      	ldrh	r3, [r5, #12]
 80127fe:	059a      	lsls	r2, r3, #22
 8012800:	d402      	bmi.n	8012808 <_vfiprintf_r+0x220>
 8012802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012804:	f7ff fcf9 	bl	80121fa <__retarget_lock_release_recursive>
 8012808:	89ab      	ldrh	r3, [r5, #12]
 801280a:	065b      	lsls	r3, r3, #25
 801280c:	f53f af12 	bmi.w	8012634 <_vfiprintf_r+0x4c>
 8012810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012812:	e711      	b.n	8012638 <_vfiprintf_r+0x50>
 8012814:	ab03      	add	r3, sp, #12
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	462a      	mov	r2, r5
 801281a:	4b09      	ldr	r3, [pc, #36]	; (8012840 <_vfiprintf_r+0x258>)
 801281c:	a904      	add	r1, sp, #16
 801281e:	4630      	mov	r0, r6
 8012820:	f000 f880 	bl	8012924 <_printf_i>
 8012824:	e7e4      	b.n	80127f0 <_vfiprintf_r+0x208>
 8012826:	bf00      	nop
 8012828:	08018148 	.word	0x08018148
 801282c:	08018168 	.word	0x08018168
 8012830:	08018128 	.word	0x08018128
 8012834:	08018188 	.word	0x08018188
 8012838:	08018192 	.word	0x08018192
 801283c:	00000000 	.word	0x00000000
 8012840:	080125c3 	.word	0x080125c3
 8012844:	0801818e 	.word	0x0801818e

08012848 <_printf_common>:
 8012848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801284c:	4616      	mov	r6, r2
 801284e:	4699      	mov	r9, r3
 8012850:	688a      	ldr	r2, [r1, #8]
 8012852:	690b      	ldr	r3, [r1, #16]
 8012854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012858:	4293      	cmp	r3, r2
 801285a:	bfb8      	it	lt
 801285c:	4613      	movlt	r3, r2
 801285e:	6033      	str	r3, [r6, #0]
 8012860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012864:	4607      	mov	r7, r0
 8012866:	460c      	mov	r4, r1
 8012868:	b10a      	cbz	r2, 801286e <_printf_common+0x26>
 801286a:	3301      	adds	r3, #1
 801286c:	6033      	str	r3, [r6, #0]
 801286e:	6823      	ldr	r3, [r4, #0]
 8012870:	0699      	lsls	r1, r3, #26
 8012872:	bf42      	ittt	mi
 8012874:	6833      	ldrmi	r3, [r6, #0]
 8012876:	3302      	addmi	r3, #2
 8012878:	6033      	strmi	r3, [r6, #0]
 801287a:	6825      	ldr	r5, [r4, #0]
 801287c:	f015 0506 	ands.w	r5, r5, #6
 8012880:	d106      	bne.n	8012890 <_printf_common+0x48>
 8012882:	f104 0a19 	add.w	sl, r4, #25
 8012886:	68e3      	ldr	r3, [r4, #12]
 8012888:	6832      	ldr	r2, [r6, #0]
 801288a:	1a9b      	subs	r3, r3, r2
 801288c:	42ab      	cmp	r3, r5
 801288e:	dc26      	bgt.n	80128de <_printf_common+0x96>
 8012890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012894:	1e13      	subs	r3, r2, #0
 8012896:	6822      	ldr	r2, [r4, #0]
 8012898:	bf18      	it	ne
 801289a:	2301      	movne	r3, #1
 801289c:	0692      	lsls	r2, r2, #26
 801289e:	d42b      	bmi.n	80128f8 <_printf_common+0xb0>
 80128a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128a4:	4649      	mov	r1, r9
 80128a6:	4638      	mov	r0, r7
 80128a8:	47c0      	blx	r8
 80128aa:	3001      	adds	r0, #1
 80128ac:	d01e      	beq.n	80128ec <_printf_common+0xa4>
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	68e5      	ldr	r5, [r4, #12]
 80128b2:	6832      	ldr	r2, [r6, #0]
 80128b4:	f003 0306 	and.w	r3, r3, #6
 80128b8:	2b04      	cmp	r3, #4
 80128ba:	bf08      	it	eq
 80128bc:	1aad      	subeq	r5, r5, r2
 80128be:	68a3      	ldr	r3, [r4, #8]
 80128c0:	6922      	ldr	r2, [r4, #16]
 80128c2:	bf0c      	ite	eq
 80128c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128c8:	2500      	movne	r5, #0
 80128ca:	4293      	cmp	r3, r2
 80128cc:	bfc4      	itt	gt
 80128ce:	1a9b      	subgt	r3, r3, r2
 80128d0:	18ed      	addgt	r5, r5, r3
 80128d2:	2600      	movs	r6, #0
 80128d4:	341a      	adds	r4, #26
 80128d6:	42b5      	cmp	r5, r6
 80128d8:	d11a      	bne.n	8012910 <_printf_common+0xc8>
 80128da:	2000      	movs	r0, #0
 80128dc:	e008      	b.n	80128f0 <_printf_common+0xa8>
 80128de:	2301      	movs	r3, #1
 80128e0:	4652      	mov	r2, sl
 80128e2:	4649      	mov	r1, r9
 80128e4:	4638      	mov	r0, r7
 80128e6:	47c0      	blx	r8
 80128e8:	3001      	adds	r0, #1
 80128ea:	d103      	bne.n	80128f4 <_printf_common+0xac>
 80128ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128f4:	3501      	adds	r5, #1
 80128f6:	e7c6      	b.n	8012886 <_printf_common+0x3e>
 80128f8:	18e1      	adds	r1, r4, r3
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	2030      	movs	r0, #48	; 0x30
 80128fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012902:	4422      	add	r2, r4
 8012904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801290c:	3302      	adds	r3, #2
 801290e:	e7c7      	b.n	80128a0 <_printf_common+0x58>
 8012910:	2301      	movs	r3, #1
 8012912:	4622      	mov	r2, r4
 8012914:	4649      	mov	r1, r9
 8012916:	4638      	mov	r0, r7
 8012918:	47c0      	blx	r8
 801291a:	3001      	adds	r0, #1
 801291c:	d0e6      	beq.n	80128ec <_printf_common+0xa4>
 801291e:	3601      	adds	r6, #1
 8012920:	e7d9      	b.n	80128d6 <_printf_common+0x8e>
	...

08012924 <_printf_i>:
 8012924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012928:	460c      	mov	r4, r1
 801292a:	4691      	mov	r9, r2
 801292c:	7e27      	ldrb	r7, [r4, #24]
 801292e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012930:	2f78      	cmp	r7, #120	; 0x78
 8012932:	4680      	mov	r8, r0
 8012934:	469a      	mov	sl, r3
 8012936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801293a:	d807      	bhi.n	801294c <_printf_i+0x28>
 801293c:	2f62      	cmp	r7, #98	; 0x62
 801293e:	d80a      	bhi.n	8012956 <_printf_i+0x32>
 8012940:	2f00      	cmp	r7, #0
 8012942:	f000 80d8 	beq.w	8012af6 <_printf_i+0x1d2>
 8012946:	2f58      	cmp	r7, #88	; 0x58
 8012948:	f000 80a3 	beq.w	8012a92 <_printf_i+0x16e>
 801294c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012954:	e03a      	b.n	80129cc <_printf_i+0xa8>
 8012956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801295a:	2b15      	cmp	r3, #21
 801295c:	d8f6      	bhi.n	801294c <_printf_i+0x28>
 801295e:	a001      	add	r0, pc, #4	; (adr r0, 8012964 <_printf_i+0x40>)
 8012960:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012964:	080129bd 	.word	0x080129bd
 8012968:	080129d1 	.word	0x080129d1
 801296c:	0801294d 	.word	0x0801294d
 8012970:	0801294d 	.word	0x0801294d
 8012974:	0801294d 	.word	0x0801294d
 8012978:	0801294d 	.word	0x0801294d
 801297c:	080129d1 	.word	0x080129d1
 8012980:	0801294d 	.word	0x0801294d
 8012984:	0801294d 	.word	0x0801294d
 8012988:	0801294d 	.word	0x0801294d
 801298c:	0801294d 	.word	0x0801294d
 8012990:	08012add 	.word	0x08012add
 8012994:	08012a01 	.word	0x08012a01
 8012998:	08012abf 	.word	0x08012abf
 801299c:	0801294d 	.word	0x0801294d
 80129a0:	0801294d 	.word	0x0801294d
 80129a4:	08012aff 	.word	0x08012aff
 80129a8:	0801294d 	.word	0x0801294d
 80129ac:	08012a01 	.word	0x08012a01
 80129b0:	0801294d 	.word	0x0801294d
 80129b4:	0801294d 	.word	0x0801294d
 80129b8:	08012ac7 	.word	0x08012ac7
 80129bc:	680b      	ldr	r3, [r1, #0]
 80129be:	1d1a      	adds	r2, r3, #4
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	600a      	str	r2, [r1, #0]
 80129c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80129c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129cc:	2301      	movs	r3, #1
 80129ce:	e0a3      	b.n	8012b18 <_printf_i+0x1f4>
 80129d0:	6825      	ldr	r5, [r4, #0]
 80129d2:	6808      	ldr	r0, [r1, #0]
 80129d4:	062e      	lsls	r6, r5, #24
 80129d6:	f100 0304 	add.w	r3, r0, #4
 80129da:	d50a      	bpl.n	80129f2 <_printf_i+0xce>
 80129dc:	6805      	ldr	r5, [r0, #0]
 80129de:	600b      	str	r3, [r1, #0]
 80129e0:	2d00      	cmp	r5, #0
 80129e2:	da03      	bge.n	80129ec <_printf_i+0xc8>
 80129e4:	232d      	movs	r3, #45	; 0x2d
 80129e6:	426d      	negs	r5, r5
 80129e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129ec:	485e      	ldr	r0, [pc, #376]	; (8012b68 <_printf_i+0x244>)
 80129ee:	230a      	movs	r3, #10
 80129f0:	e019      	b.n	8012a26 <_printf_i+0x102>
 80129f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80129f6:	6805      	ldr	r5, [r0, #0]
 80129f8:	600b      	str	r3, [r1, #0]
 80129fa:	bf18      	it	ne
 80129fc:	b22d      	sxthne	r5, r5
 80129fe:	e7ef      	b.n	80129e0 <_printf_i+0xbc>
 8012a00:	680b      	ldr	r3, [r1, #0]
 8012a02:	6825      	ldr	r5, [r4, #0]
 8012a04:	1d18      	adds	r0, r3, #4
 8012a06:	6008      	str	r0, [r1, #0]
 8012a08:	0628      	lsls	r0, r5, #24
 8012a0a:	d501      	bpl.n	8012a10 <_printf_i+0xec>
 8012a0c:	681d      	ldr	r5, [r3, #0]
 8012a0e:	e002      	b.n	8012a16 <_printf_i+0xf2>
 8012a10:	0669      	lsls	r1, r5, #25
 8012a12:	d5fb      	bpl.n	8012a0c <_printf_i+0xe8>
 8012a14:	881d      	ldrh	r5, [r3, #0]
 8012a16:	4854      	ldr	r0, [pc, #336]	; (8012b68 <_printf_i+0x244>)
 8012a18:	2f6f      	cmp	r7, #111	; 0x6f
 8012a1a:	bf0c      	ite	eq
 8012a1c:	2308      	moveq	r3, #8
 8012a1e:	230a      	movne	r3, #10
 8012a20:	2100      	movs	r1, #0
 8012a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a26:	6866      	ldr	r6, [r4, #4]
 8012a28:	60a6      	str	r6, [r4, #8]
 8012a2a:	2e00      	cmp	r6, #0
 8012a2c:	bfa2      	ittt	ge
 8012a2e:	6821      	ldrge	r1, [r4, #0]
 8012a30:	f021 0104 	bicge.w	r1, r1, #4
 8012a34:	6021      	strge	r1, [r4, #0]
 8012a36:	b90d      	cbnz	r5, 8012a3c <_printf_i+0x118>
 8012a38:	2e00      	cmp	r6, #0
 8012a3a:	d04d      	beq.n	8012ad8 <_printf_i+0x1b4>
 8012a3c:	4616      	mov	r6, r2
 8012a3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a42:	fb03 5711 	mls	r7, r3, r1, r5
 8012a46:	5dc7      	ldrb	r7, [r0, r7]
 8012a48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a4c:	462f      	mov	r7, r5
 8012a4e:	42bb      	cmp	r3, r7
 8012a50:	460d      	mov	r5, r1
 8012a52:	d9f4      	bls.n	8012a3e <_printf_i+0x11a>
 8012a54:	2b08      	cmp	r3, #8
 8012a56:	d10b      	bne.n	8012a70 <_printf_i+0x14c>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	07df      	lsls	r7, r3, #31
 8012a5c:	d508      	bpl.n	8012a70 <_printf_i+0x14c>
 8012a5e:	6923      	ldr	r3, [r4, #16]
 8012a60:	6861      	ldr	r1, [r4, #4]
 8012a62:	4299      	cmp	r1, r3
 8012a64:	bfde      	ittt	le
 8012a66:	2330      	movle	r3, #48	; 0x30
 8012a68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a6c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012a70:	1b92      	subs	r2, r2, r6
 8012a72:	6122      	str	r2, [r4, #16]
 8012a74:	f8cd a000 	str.w	sl, [sp]
 8012a78:	464b      	mov	r3, r9
 8012a7a:	aa03      	add	r2, sp, #12
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4640      	mov	r0, r8
 8012a80:	f7ff fee2 	bl	8012848 <_printf_common>
 8012a84:	3001      	adds	r0, #1
 8012a86:	d14c      	bne.n	8012b22 <_printf_i+0x1fe>
 8012a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a8c:	b004      	add	sp, #16
 8012a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a92:	4835      	ldr	r0, [pc, #212]	; (8012b68 <_printf_i+0x244>)
 8012a94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	680e      	ldr	r6, [r1, #0]
 8012a9c:	061f      	lsls	r7, r3, #24
 8012a9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012aa2:	600e      	str	r6, [r1, #0]
 8012aa4:	d514      	bpl.n	8012ad0 <_printf_i+0x1ac>
 8012aa6:	07d9      	lsls	r1, r3, #31
 8012aa8:	bf44      	itt	mi
 8012aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8012aae:	6023      	strmi	r3, [r4, #0]
 8012ab0:	b91d      	cbnz	r5, 8012aba <_printf_i+0x196>
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	f023 0320 	bic.w	r3, r3, #32
 8012ab8:	6023      	str	r3, [r4, #0]
 8012aba:	2310      	movs	r3, #16
 8012abc:	e7b0      	b.n	8012a20 <_printf_i+0xfc>
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	f043 0320 	orr.w	r3, r3, #32
 8012ac4:	6023      	str	r3, [r4, #0]
 8012ac6:	2378      	movs	r3, #120	; 0x78
 8012ac8:	4828      	ldr	r0, [pc, #160]	; (8012b6c <_printf_i+0x248>)
 8012aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ace:	e7e3      	b.n	8012a98 <_printf_i+0x174>
 8012ad0:	065e      	lsls	r6, r3, #25
 8012ad2:	bf48      	it	mi
 8012ad4:	b2ad      	uxthmi	r5, r5
 8012ad6:	e7e6      	b.n	8012aa6 <_printf_i+0x182>
 8012ad8:	4616      	mov	r6, r2
 8012ada:	e7bb      	b.n	8012a54 <_printf_i+0x130>
 8012adc:	680b      	ldr	r3, [r1, #0]
 8012ade:	6826      	ldr	r6, [r4, #0]
 8012ae0:	6960      	ldr	r0, [r4, #20]
 8012ae2:	1d1d      	adds	r5, r3, #4
 8012ae4:	600d      	str	r5, [r1, #0]
 8012ae6:	0635      	lsls	r5, r6, #24
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	d501      	bpl.n	8012af0 <_printf_i+0x1cc>
 8012aec:	6018      	str	r0, [r3, #0]
 8012aee:	e002      	b.n	8012af6 <_printf_i+0x1d2>
 8012af0:	0671      	lsls	r1, r6, #25
 8012af2:	d5fb      	bpl.n	8012aec <_printf_i+0x1c8>
 8012af4:	8018      	strh	r0, [r3, #0]
 8012af6:	2300      	movs	r3, #0
 8012af8:	6123      	str	r3, [r4, #16]
 8012afa:	4616      	mov	r6, r2
 8012afc:	e7ba      	b.n	8012a74 <_printf_i+0x150>
 8012afe:	680b      	ldr	r3, [r1, #0]
 8012b00:	1d1a      	adds	r2, r3, #4
 8012b02:	600a      	str	r2, [r1, #0]
 8012b04:	681e      	ldr	r6, [r3, #0]
 8012b06:	6862      	ldr	r2, [r4, #4]
 8012b08:	2100      	movs	r1, #0
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	f7ed fb78 	bl	8000200 <memchr>
 8012b10:	b108      	cbz	r0, 8012b16 <_printf_i+0x1f2>
 8012b12:	1b80      	subs	r0, r0, r6
 8012b14:	6060      	str	r0, [r4, #4]
 8012b16:	6863      	ldr	r3, [r4, #4]
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b20:	e7a8      	b.n	8012a74 <_printf_i+0x150>
 8012b22:	6923      	ldr	r3, [r4, #16]
 8012b24:	4632      	mov	r2, r6
 8012b26:	4649      	mov	r1, r9
 8012b28:	4640      	mov	r0, r8
 8012b2a:	47d0      	blx	sl
 8012b2c:	3001      	adds	r0, #1
 8012b2e:	d0ab      	beq.n	8012a88 <_printf_i+0x164>
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	079b      	lsls	r3, r3, #30
 8012b34:	d413      	bmi.n	8012b5e <_printf_i+0x23a>
 8012b36:	68e0      	ldr	r0, [r4, #12]
 8012b38:	9b03      	ldr	r3, [sp, #12]
 8012b3a:	4298      	cmp	r0, r3
 8012b3c:	bfb8      	it	lt
 8012b3e:	4618      	movlt	r0, r3
 8012b40:	e7a4      	b.n	8012a8c <_printf_i+0x168>
 8012b42:	2301      	movs	r3, #1
 8012b44:	4632      	mov	r2, r6
 8012b46:	4649      	mov	r1, r9
 8012b48:	4640      	mov	r0, r8
 8012b4a:	47d0      	blx	sl
 8012b4c:	3001      	adds	r0, #1
 8012b4e:	d09b      	beq.n	8012a88 <_printf_i+0x164>
 8012b50:	3501      	adds	r5, #1
 8012b52:	68e3      	ldr	r3, [r4, #12]
 8012b54:	9903      	ldr	r1, [sp, #12]
 8012b56:	1a5b      	subs	r3, r3, r1
 8012b58:	42ab      	cmp	r3, r5
 8012b5a:	dcf2      	bgt.n	8012b42 <_printf_i+0x21e>
 8012b5c:	e7eb      	b.n	8012b36 <_printf_i+0x212>
 8012b5e:	2500      	movs	r5, #0
 8012b60:	f104 0619 	add.w	r6, r4, #25
 8012b64:	e7f5      	b.n	8012b52 <_printf_i+0x22e>
 8012b66:	bf00      	nop
 8012b68:	08018199 	.word	0x08018199
 8012b6c:	080181aa 	.word	0x080181aa

08012b70 <__sread>:
 8012b70:	b510      	push	{r4, lr}
 8012b72:	460c      	mov	r4, r1
 8012b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b78:	f000 f8c2 	bl	8012d00 <_read_r>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	bfab      	itete	ge
 8012b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b82:	89a3      	ldrhlt	r3, [r4, #12]
 8012b84:	181b      	addge	r3, r3, r0
 8012b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b8a:	bfac      	ite	ge
 8012b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b8e:	81a3      	strhlt	r3, [r4, #12]
 8012b90:	bd10      	pop	{r4, pc}

08012b92 <__swrite>:
 8012b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b96:	461f      	mov	r7, r3
 8012b98:	898b      	ldrh	r3, [r1, #12]
 8012b9a:	05db      	lsls	r3, r3, #23
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	4616      	mov	r6, r2
 8012ba2:	d505      	bpl.n	8012bb0 <__swrite+0x1e>
 8012ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba8:	2302      	movs	r3, #2
 8012baa:	2200      	movs	r2, #0
 8012bac:	f000 f870 	bl	8012c90 <_lseek_r>
 8012bb0:	89a3      	ldrh	r3, [r4, #12]
 8012bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bba:	81a3      	strh	r3, [r4, #12]
 8012bbc:	4632      	mov	r2, r6
 8012bbe:	463b      	mov	r3, r7
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc6:	f000 b817 	b.w	8012bf8 <_write_r>

08012bca <__sseek>:
 8012bca:	b510      	push	{r4, lr}
 8012bcc:	460c      	mov	r4, r1
 8012bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd2:	f000 f85d 	bl	8012c90 <_lseek_r>
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	89a3      	ldrh	r3, [r4, #12]
 8012bda:	bf15      	itete	ne
 8012bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012be6:	81a3      	strheq	r3, [r4, #12]
 8012be8:	bf18      	it	ne
 8012bea:	81a3      	strhne	r3, [r4, #12]
 8012bec:	bd10      	pop	{r4, pc}

08012bee <__sclose>:
 8012bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf2:	f000 b81b 	b.w	8012c2c <_close_r>
	...

08012bf8 <_write_r>:
 8012bf8:	b538      	push	{r3, r4, r5, lr}
 8012bfa:	4d07      	ldr	r5, [pc, #28]	; (8012c18 <_write_r+0x20>)
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	4608      	mov	r0, r1
 8012c00:	4611      	mov	r1, r2
 8012c02:	2200      	movs	r2, #0
 8012c04:	602a      	str	r2, [r5, #0]
 8012c06:	461a      	mov	r2, r3
 8012c08:	f7ee fa60 	bl	80010cc <_write>
 8012c0c:	1c43      	adds	r3, r0, #1
 8012c0e:	d102      	bne.n	8012c16 <_write_r+0x1e>
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	b103      	cbz	r3, 8012c16 <_write_r+0x1e>
 8012c14:	6023      	str	r3, [r4, #0]
 8012c16:	bd38      	pop	{r3, r4, r5, pc}
 8012c18:	20017500 	.word	0x20017500

08012c1c <abort>:
 8012c1c:	b508      	push	{r3, lr}
 8012c1e:	2006      	movs	r0, #6
 8012c20:	f000 f8a8 	bl	8012d74 <raise>
 8012c24:	2001      	movs	r0, #1
 8012c26:	f7ee ff2b 	bl	8001a80 <_exit>
	...

08012c2c <_close_r>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4d06      	ldr	r5, [pc, #24]	; (8012c48 <_close_r+0x1c>)
 8012c30:	2300      	movs	r3, #0
 8012c32:	4604      	mov	r4, r0
 8012c34:	4608      	mov	r0, r1
 8012c36:	602b      	str	r3, [r5, #0]
 8012c38:	f7ee ff49 	bl	8001ace <_close>
 8012c3c:	1c43      	adds	r3, r0, #1
 8012c3e:	d102      	bne.n	8012c46 <_close_r+0x1a>
 8012c40:	682b      	ldr	r3, [r5, #0]
 8012c42:	b103      	cbz	r3, 8012c46 <_close_r+0x1a>
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	bd38      	pop	{r3, r4, r5, pc}
 8012c48:	20017500 	.word	0x20017500

08012c4c <_fstat_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d07      	ldr	r5, [pc, #28]	; (8012c6c <_fstat_r+0x20>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	4611      	mov	r1, r2
 8012c58:	602b      	str	r3, [r5, #0]
 8012c5a:	f7ee ff44 	bl	8001ae6 <_fstat>
 8012c5e:	1c43      	adds	r3, r0, #1
 8012c60:	d102      	bne.n	8012c68 <_fstat_r+0x1c>
 8012c62:	682b      	ldr	r3, [r5, #0]
 8012c64:	b103      	cbz	r3, 8012c68 <_fstat_r+0x1c>
 8012c66:	6023      	str	r3, [r4, #0]
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20017500 	.word	0x20017500

08012c70 <_isatty_r>:
 8012c70:	b538      	push	{r3, r4, r5, lr}
 8012c72:	4d06      	ldr	r5, [pc, #24]	; (8012c8c <_isatty_r+0x1c>)
 8012c74:	2300      	movs	r3, #0
 8012c76:	4604      	mov	r4, r0
 8012c78:	4608      	mov	r0, r1
 8012c7a:	602b      	str	r3, [r5, #0]
 8012c7c:	f7ee ff43 	bl	8001b06 <_isatty>
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d102      	bne.n	8012c8a <_isatty_r+0x1a>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	b103      	cbz	r3, 8012c8a <_isatty_r+0x1a>
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	20017500 	.word	0x20017500

08012c90 <_lseek_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d07      	ldr	r5, [pc, #28]	; (8012cb0 <_lseek_r+0x20>)
 8012c94:	4604      	mov	r4, r0
 8012c96:	4608      	mov	r0, r1
 8012c98:	4611      	mov	r1, r2
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	602a      	str	r2, [r5, #0]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	f7ee ff3c 	bl	8001b1c <_lseek>
 8012ca4:	1c43      	adds	r3, r0, #1
 8012ca6:	d102      	bne.n	8012cae <_lseek_r+0x1e>
 8012ca8:	682b      	ldr	r3, [r5, #0]
 8012caa:	b103      	cbz	r3, 8012cae <_lseek_r+0x1e>
 8012cac:	6023      	str	r3, [r4, #0]
 8012cae:	bd38      	pop	{r3, r4, r5, pc}
 8012cb0:	20017500 	.word	0x20017500

08012cb4 <_realloc_r>:
 8012cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb6:	4607      	mov	r7, r0
 8012cb8:	4614      	mov	r4, r2
 8012cba:	460e      	mov	r6, r1
 8012cbc:	b921      	cbnz	r1, 8012cc8 <_realloc_r+0x14>
 8012cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	f7fe bd44 	b.w	8011750 <_malloc_r>
 8012cc8:	b922      	cbnz	r2, 8012cd4 <_realloc_r+0x20>
 8012cca:	f7fe fcf1 	bl	80116b0 <_free_r>
 8012cce:	4625      	mov	r5, r4
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cd4:	f000 f86a 	bl	8012dac <_malloc_usable_size_r>
 8012cd8:	42a0      	cmp	r0, r4
 8012cda:	d20f      	bcs.n	8012cfc <_realloc_r+0x48>
 8012cdc:	4621      	mov	r1, r4
 8012cde:	4638      	mov	r0, r7
 8012ce0:	f7fe fd36 	bl	8011750 <_malloc_r>
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d0f2      	beq.n	8012cd0 <_realloc_r+0x1c>
 8012cea:	4631      	mov	r1, r6
 8012cec:	4622      	mov	r2, r4
 8012cee:	f7fe fcaf 	bl	8011650 <memcpy>
 8012cf2:	4631      	mov	r1, r6
 8012cf4:	4638      	mov	r0, r7
 8012cf6:	f7fe fcdb 	bl	80116b0 <_free_r>
 8012cfa:	e7e9      	b.n	8012cd0 <_realloc_r+0x1c>
 8012cfc:	4635      	mov	r5, r6
 8012cfe:	e7e7      	b.n	8012cd0 <_realloc_r+0x1c>

08012d00 <_read_r>:
 8012d00:	b538      	push	{r3, r4, r5, lr}
 8012d02:	4d07      	ldr	r5, [pc, #28]	; (8012d20 <_read_r+0x20>)
 8012d04:	4604      	mov	r4, r0
 8012d06:	4608      	mov	r0, r1
 8012d08:	4611      	mov	r1, r2
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	602a      	str	r2, [r5, #0]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	f7ee fec0 	bl	8001a94 <_read>
 8012d14:	1c43      	adds	r3, r0, #1
 8012d16:	d102      	bne.n	8012d1e <_read_r+0x1e>
 8012d18:	682b      	ldr	r3, [r5, #0]
 8012d1a:	b103      	cbz	r3, 8012d1e <_read_r+0x1e>
 8012d1c:	6023      	str	r3, [r4, #0]
 8012d1e:	bd38      	pop	{r3, r4, r5, pc}
 8012d20:	20017500 	.word	0x20017500

08012d24 <_raise_r>:
 8012d24:	291f      	cmp	r1, #31
 8012d26:	b538      	push	{r3, r4, r5, lr}
 8012d28:	4604      	mov	r4, r0
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	d904      	bls.n	8012d38 <_raise_r+0x14>
 8012d2e:	2316      	movs	r3, #22
 8012d30:	6003      	str	r3, [r0, #0]
 8012d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d3a:	b112      	cbz	r2, 8012d42 <_raise_r+0x1e>
 8012d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d40:	b94b      	cbnz	r3, 8012d56 <_raise_r+0x32>
 8012d42:	4620      	mov	r0, r4
 8012d44:	f000 f830 	bl	8012da8 <_getpid_r>
 8012d48:	462a      	mov	r2, r5
 8012d4a:	4601      	mov	r1, r0
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d52:	f000 b817 	b.w	8012d84 <_kill_r>
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d00a      	beq.n	8012d70 <_raise_r+0x4c>
 8012d5a:	1c59      	adds	r1, r3, #1
 8012d5c:	d103      	bne.n	8012d66 <_raise_r+0x42>
 8012d5e:	2316      	movs	r3, #22
 8012d60:	6003      	str	r3, [r0, #0]
 8012d62:	2001      	movs	r0, #1
 8012d64:	e7e7      	b.n	8012d36 <_raise_r+0x12>
 8012d66:	2400      	movs	r4, #0
 8012d68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	4798      	blx	r3
 8012d70:	2000      	movs	r0, #0
 8012d72:	e7e0      	b.n	8012d36 <_raise_r+0x12>

08012d74 <raise>:
 8012d74:	4b02      	ldr	r3, [pc, #8]	; (8012d80 <raise+0xc>)
 8012d76:	4601      	mov	r1, r0
 8012d78:	6818      	ldr	r0, [r3, #0]
 8012d7a:	f7ff bfd3 	b.w	8012d24 <_raise_r>
 8012d7e:	bf00      	nop
 8012d80:	20000030 	.word	0x20000030

08012d84 <_kill_r>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4d07      	ldr	r5, [pc, #28]	; (8012da4 <_kill_r+0x20>)
 8012d88:	2300      	movs	r3, #0
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	4608      	mov	r0, r1
 8012d8e:	4611      	mov	r1, r2
 8012d90:	602b      	str	r3, [r5, #0]
 8012d92:	f7ee fe63 	bl	8001a5c <_kill>
 8012d96:	1c43      	adds	r3, r0, #1
 8012d98:	d102      	bne.n	8012da0 <_kill_r+0x1c>
 8012d9a:	682b      	ldr	r3, [r5, #0]
 8012d9c:	b103      	cbz	r3, 8012da0 <_kill_r+0x1c>
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	bd38      	pop	{r3, r4, r5, pc}
 8012da2:	bf00      	nop
 8012da4:	20017500 	.word	0x20017500

08012da8 <_getpid_r>:
 8012da8:	f7ee be50 	b.w	8001a4c <_getpid>

08012dac <_malloc_usable_size_r>:
 8012dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012db0:	1f18      	subs	r0, r3, #4
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	bfbc      	itt	lt
 8012db6:	580b      	ldrlt	r3, [r1, r0]
 8012db8:	18c0      	addlt	r0, r0, r3
 8012dba:	4770      	bx	lr

08012dbc <_init>:
 8012dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dbe:	bf00      	nop
 8012dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc2:	bc08      	pop	{r3}
 8012dc4:	469e      	mov	lr, r3
 8012dc6:	4770      	bx	lr

08012dc8 <_fini>:
 8012dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dca:	bf00      	nop
 8012dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dce:	bc08      	pop	{r3}
 8012dd0:	469e      	mov	lr, r3
 8012dd2:	4770      	bx	lr
