
ping_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800586c  0800586c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200000b8  0800592c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0800592c  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2b  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  0002ee13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020528  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6b4  00000000  00000000  000532c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cefec  00000000  00000000  0006197c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  001309bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055f4 	.word	0x080055f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	080055f4 	.word	0x080055f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <W5500_Select>:
/*
 wiz_NetInfo gWIZNETINFO = { .mac = {0xEA, 0x11, 0x22, 0x33, 0x44, 0xEA},
 .dhcp = NETINFO_DHCP };

 */
void W5500_Select(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <W5500_Select+0x14>)
 80005d2:	f002 f99f 	bl	8002914 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <W5500_Unselect>:

void W5500_Unselect(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <W5500_Unselect+0x14>)
 80005ea:	f002 f993 	bl	8002914 <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <W5500_ReadBuff+0x24>)
 800060e:	f002 ff74 	bl	80034fa <HAL_SPI_Receive>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000104 	.word	0x20000104

08000620 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <W5500_WriteBuff+0x24>)
 8000636:	f002 fe24 	bl	8003282 <HAL_SPI_Transmit>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000104 	.word	0x20000104

08000648 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd0 	bl	80005f8 <W5500_ReadBuff>
	return byte;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffd5 	bl	8000620 <W5500_WriteBuff>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e009      	b.n	80006a4 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff6d 	bl	8000578 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf1      	blt.n	8000690 <_write+0x12>
	}
	return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f001 fe11 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f957 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 fa43 	bl	8000b50 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006ca:	f000 f9bd 	bl	8000a48 <MX_SPI2_Init>
  MX_TIM2_Init();
 80006ce:	f000 f9f1 	bl	8000ab4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	488a      	ldr	r0, [pc, #552]	; (8000900 <main+0x248>)
 80006d8:	f002 f91c 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 fe73 	bl	80023c8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4886      	ldr	r0, [pc, #536]	; (8000900 <main+0x248>)
 80006e8:	f002 f914 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f001 fe6a 	bl	80023c8 <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80006f4:	4983      	ldr	r1, [pc, #524]	; (8000904 <main+0x24c>)
 80006f6:	4884      	ldr	r0, [pc, #528]	; (8000908 <main+0x250>)
 80006f8:	f001 fb48 	bl	8001d8c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80006fc:	4983      	ldr	r1, [pc, #524]	; (800090c <main+0x254>)
 80006fe:	4884      	ldr	r0, [pc, #528]	; (8000910 <main+0x258>)
 8000700:	f001 fb6a 	bl	8001dd8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000704:	4983      	ldr	r1, [pc, #524]	; (8000914 <main+0x25c>)
 8000706:	4884      	ldr	r0, [pc, #528]	; (8000918 <main+0x260>)
 8000708:	f001 fb92 	bl	8001e30 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 800070c:	4a83      	ldr	r2, [pc, #524]	; (800091c <main+0x264>)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fc39 	bl	8001f9c <wizchip_init>

	wizchip_setnetinfo(&gWIZNETINFO);
 800072a:	487d      	ldr	r0, [pc, #500]	; (8000920 <main+0x268>)
 800072c:	f001 fcc2 	bl	80020b4 <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000730:	497b      	ldr	r1, [pc, #492]	; (8000920 <main+0x268>)
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fba8 	bl	8001e88 <ctlnetwork>
	HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f001 fe44 	bl	80023c8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		printf("\r\n=== NET CONFIGURATION ===\r\n");
 8000740:	4878      	ldr	r0, [pc, #480]	; (8000924 <main+0x26c>)
 8000742:	f003 fe3f 	bl	80043c4 <puts>
		printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000746:	4b76      	ldr	r3, [pc, #472]	; (8000920 <main+0x268>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	4b74      	ldr	r3, [pc, #464]	; (8000920 <main+0x268>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	461c      	mov	r4, r3
 8000752:	4b73      	ldr	r3, [pc, #460]	; (8000920 <main+0x268>)
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	461d      	mov	r5, r3
 8000758:	4b71      	ldr	r3, [pc, #452]	; (8000920 <main+0x268>)
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	461a      	mov	r2, r3
 800075e:	4b70      	ldr	r3, [pc, #448]	; (8000920 <main+0x268>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4619      	mov	r1, r3
 8000764:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <main+0x268>)
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	9101      	str	r1, [sp, #4]
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	462b      	mov	r3, r5
 8000770:	4622      	mov	r2, r4
 8000772:	4601      	mov	r1, r0
 8000774:	486c      	ldr	r0, [pc, #432]	; (8000928 <main+0x270>)
 8000776:	f003 fd9f 	bl	80042b8 <iprintf>
		printf("IP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1],gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 800077a:	4b69      	ldr	r3, [pc, #420]	; (8000920 <main+0x268>)
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	4619      	mov	r1, r3
 8000780:	4b67      	ldr	r3, [pc, #412]	; (8000920 <main+0x268>)
 8000782:	79db      	ldrb	r3, [r3, #7]
 8000784:	461a      	mov	r2, r3
 8000786:	4b66      	ldr	r3, [pc, #408]	; (8000920 <main+0x268>)
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	4618      	mov	r0, r3
 800078c:	4b64      	ldr	r3, [pc, #400]	; (8000920 <main+0x268>)
 800078e:	7a5b      	ldrb	r3, [r3, #9]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	4603      	mov	r3, r0
 8000794:	4865      	ldr	r0, [pc, #404]	; (800092c <main+0x274>)
 8000796:	f003 fd8f 	bl	80042b8 <iprintf>
		printf("GW: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1],gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 800079a:	4b61      	ldr	r3, [pc, #388]	; (8000920 <main+0x268>)
 800079c:	7b9b      	ldrb	r3, [r3, #14]
 800079e:	4619      	mov	r1, r3
 80007a0:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <main+0x268>)
 80007a2:	7bdb      	ldrb	r3, [r3, #15]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <main+0x268>)
 80007a8:	7c1b      	ldrb	r3, [r3, #16]
 80007aa:	4618      	mov	r0, r3
 80007ac:	4b5c      	ldr	r3, [pc, #368]	; (8000920 <main+0x268>)
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	4603      	mov	r3, r0
 80007b4:	485e      	ldr	r0, [pc, #376]	; (8000930 <main+0x278>)
 80007b6:	f003 fd7f 	bl	80042b8 <iprintf>
		printf("SN: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1],gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 80007ba:	4b59      	ldr	r3, [pc, #356]	; (8000920 <main+0x268>)
 80007bc:	7a9b      	ldrb	r3, [r3, #10]
 80007be:	4619      	mov	r1, r3
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <main+0x268>)
 80007c2:	7adb      	ldrb	r3, [r3, #11]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b56      	ldr	r3, [pc, #344]	; (8000920 <main+0x268>)
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
 80007ca:	4618      	mov	r0, r3
 80007cc:	4b54      	ldr	r3, [pc, #336]	; (8000920 <main+0x268>)
 80007ce:	7b5b      	ldrb	r3, [r3, #13]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4603      	mov	r3, r0
 80007d4:	4857      	ldr	r0, [pc, #348]	; (8000934 <main+0x27c>)
 80007d6:	f003 fd6f 	bl	80042b8 <iprintf>
		printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1],gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 80007da:	4b51      	ldr	r3, [pc, #324]	; (8000920 <main+0x268>)
 80007dc:	7c9b      	ldrb	r3, [r3, #18]
 80007de:	4619      	mov	r1, r3
 80007e0:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <main+0x268>)
 80007e2:	7cdb      	ldrb	r3, [r3, #19]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <main+0x268>)
 80007e8:	7d1b      	ldrb	r3, [r3, #20]
 80007ea:	4618      	mov	r0, r3
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <main+0x268>)
 80007ee:	7d5b      	ldrb	r3, [r3, #21]
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	4603      	mov	r3, r0
 80007f4:	4850      	ldr	r0, [pc, #320]	; (8000938 <main+0x280>)
 80007f6:	f003 fd5f 	bl	80042b8 <iprintf>
		printf("=========================\r\n");
 80007fa:	4850      	ldr	r0, [pc, #320]	; (800093c <main+0x284>)
 80007fc:	f003 fde2 	bl	80043c4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Creating socket...\r\n");
 8000800:	484f      	ldr	r0, [pc, #316]	; (8000940 <main+0x288>)
 8000802:	f003 fddf 	bl	80043c4 <puts>
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0); // Создаем http сокет
 8000806:	2300      	movs	r3, #0
 8000808:	2250      	movs	r2, #80	; 0x50
 800080a:	2101      	movs	r1, #1
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fa33 	bl	8000c78 <socket>
 8000812:	4603      	mov	r3, r0
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <main+0x28c>)
 8000818:	701a      	strb	r2, [r3, #0]
		if (stat != HTTP_SOCKET)
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <main+0x28c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <main+0x178>
			printf("socket() failed, code = %d\r\n", stat);
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <main+0x28c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <main+0x290>)
 800082a:	f003 fd45 	bl	80042b8 <iprintf>
 800082e:	e002      	b.n	8000836 <main+0x17e>
		else
			printf("Socket created, connecting...\r\n");
 8000830:	4846      	ldr	r0, [pc, #280]	; (800094c <main+0x294>)
 8000832:	f003 fdc7 	bl	80043c4 <puts>

		stat = listen(HTTP_SOCKET); // Слушаем созданный сокет http
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fba2 	bl	8000f80 <listen>
 800083c:	4603      	mov	r3, r0
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <main+0x28c>)
 8000842:	701a      	strb	r2, [r3, #0]
		if (stat != SOCK_OK)
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <main+0x28c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d006      	beq.n	800085a <main+0x1a2>
			printf("listen() failed, code = %d\r\n", stat);
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <main+0x28c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	483f      	ldr	r0, [pc, #252]	; (8000950 <main+0x298>)
 8000854:	f003 fd30 	bl	80042b8 <iprintf>
 8000858:	e006      	b.n	8000868 <main+0x1b0>
		else
			printf("listen() OK\r\n");
 800085a:	483e      	ldr	r0, [pc, #248]	; (8000954 <main+0x29c>)
 800085c:	f003 fdb2 	bl	80043c4 <puts>

		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) { // В бесконечном цикле проверяем слушается ли
 8000860:	e002      	b.n	8000868 <main+0x1b0>
			HAL_Delay(2);// наш сокет или нет. Если слушают то подождем 2 милл.сек.
 8000862:	2002      	movs	r0, #2
 8000864:	f001 fdb0 	bl	80023c8 <HAL_Delay>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) { // В бесконечном цикле проверяем слушается ли
 8000868:	f44f 7042 	mov.w	r0, #776	; 0x308
 800086c:	f000 ffde 	bl	800182c <WIZCHIP_READ>
 8000870:	4603      	mov	r3, r0
 8000872:	2b14      	cmp	r3, #20
 8000874:	d0f5      	beq.n	8000862 <main+0x1aa>
		}

		printf("Input connection\r\n"); // Если не слушают а устанавливают соединение то пишем что, у нас входящее соединение.
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <main+0x2a0>)
 8000878:	f003 fda4 	bl	80043c4 <puts>
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
 800087c:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000880:	f000 ffd4 	bl	800182c <WIZCHIP_READ>
 8000884:	4603      	mov	r3, r0
 8000886:	2b17      	cmp	r3, #23
 8000888:	d002      	beq.n	8000890 <main+0x1d8>
			printf("Error socket status\r\n");
 800088a:	4834      	ldr	r0, [pc, #208]	; (800095c <main+0x2a4>)
 800088c:	f003 fd9a 	bl	80043c4 <puts>

		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	461a      	mov	r2, r3
 8000894:	2104      	movs	r1, #4
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fd3c 	bl	8001314 <getsockopt>
		printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]); // Вывод IP того кто с нами связался.
 800089c:	793b      	ldrb	r3, [r7, #4]
 800089e:	4619      	mov	r1, r3
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	461a      	mov	r2, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	4618      	mov	r0, r3
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4603      	mov	r3, r0
 80008ae:	482c      	ldr	r0, [pc, #176]	; (8000960 <main+0x2a8>)
 80008b0:	f003 fd02 	bl	80042b8 <iprintf>

		sprintf(Message, "input connection nr - %d", reqnr);
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <main+0x2ac>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	492b      	ldr	r1, [pc, #172]	; (8000968 <main+0x2b0>)
 80008bc:	482b      	ldr	r0, [pc, #172]	; (800096c <main+0x2b4>)
 80008be:	f003 fd89 	bl	80043d4 <siprintf>

		send(0, (uint8_t*) Message, strlen(Message)); // Отправляем сообщение тому кто открыл соединение с нами.
 80008c2:	482a      	ldr	r0, [pc, #168]	; (800096c <main+0x2b4>)
 80008c4:	f7ff fc84 	bl	80001d0 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4927      	ldr	r1, [pc, #156]	; (800096c <main+0x2b4>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fc25 	bl	8001120 <send>

		disconnect(HTTP_SOCKET);                      // Разрываем соединение
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fbac 	bl	8001034 <disconnect>

		printf("Closing socket.\r\n");
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <main+0x2b8>)
 80008de:	f003 fd71 	bl	80043c4 <puts>
		close(HTTP_SOCKET);                           // Закрываем сокет
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 fade 	bl	8000ea4 <close>

		HAL_Delay(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ec:	f001 fd6c 	bl	80023c8 <HAL_Delay>
		reqnr++;                                      // Увеличиваем счетчик.
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <main+0x2ac>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <main+0x2ac>)
 80008fa:	701a      	strb	r2, [r3, #0]
	while (1) {
 80008fc:	e720      	b.n	8000740 <main+0x88>
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	080005e1 	.word	0x080005e1
 8000908:	080005c9 	.word	0x080005c9
 800090c:	08000663 	.word	0x08000663
 8000910:	08000649 	.word	0x08000649
 8000914:	08000621 	.word	0x08000621
 8000918:	080005f9 	.word	0x080005f9
 800091c:	080057b4 	.word	0x080057b4
 8000920:	20000000 	.word	0x20000000
 8000924:	0800560c 	.word	0x0800560c
 8000928:	0800562c 	.word	0x0800562c
 800092c:	08005654 	.word	0x08005654
 8000930:	08005668 	.word	0x08005668
 8000934:	0800567c 	.word	0x0800567c
 8000938:	08005690 	.word	0x08005690
 800093c:	080056a4 	.word	0x080056a4
 8000940:	080056c0 	.word	0x080056c0
 8000944:	20000a28 	.word	0x20000a28
 8000948:	080056d4 	.word	0x080056d4
 800094c:	080056f4 	.word	0x080056f4
 8000950:	08005714 	.word	0x08005714
 8000954:	08005734 	.word	0x08005734
 8000958:	08005744 	.word	0x08005744
 800095c:	08005758 	.word	0x08005758
 8000960:	08005770 	.word	0x08005770
 8000964:	200009dc 	.word	0x200009dc
 8000968:	08005784 	.word	0x08005784
 800096c:	2000015c 	.word	0x2000015c
 8000970:	080057a0 	.word	0x080057a0

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fc90 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <SystemClock_Config+0xcc>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SystemClock_Config+0xd0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e4:	2308      	movs	r3, #8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ffa5 	bl	8002948 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 f932 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2104      	movs	r1, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fa06 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a32:	f000 f91b 	bl	8000c6c <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_SPI2_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a9a:	f002 fb69 	bl	8003170 <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aa4:	f000 f8e2 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000104 	.word	0x20000104
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ada:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000afc:	f003 f8e0 	bl	8003cc0 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b06:	f000 f8b1 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b18:	f003 f921 	bl	8003d5e <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b22:	f000 f8a3 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b34:	f003 fb12 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b3e:	f000 f895 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200009e0 	.word	0x200009e0

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a3c      	ldr	r2, [pc, #240]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	481b      	ldr	r0, [pc, #108]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000bf8:	f001 fe8c 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	4819      	ldr	r0, [pc, #100]	; (8000c68 <MX_GPIO_Init+0x118>)
 8000c02:	f001 fe87 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c1e:	f001 fcdd 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000c22:	2302      	movs	r3, #2
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c36:	f001 fcd1 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x118>)
 8000c52:	f001 fcc3 	bl	80025dc <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40021000 	.word	0x40021000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4623      	mov	r3, r4
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	80bb      	strh	r3, [r7, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d902      	bls.n	8000ca2 <socket+0x2a>
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca0:	e0f2      	b.n	8000e88 <socket+0x210>
	switch(protocol)
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <socket+0x3c>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	dd11      	ble.n	8000cd0 <socket+0x58>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d80e      	bhi.n	8000cd0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000cb2:	e011      	b.n	8000cd8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000cc0:	f000 fe4e 	bl	8001960 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <socket+0x5e>
 8000cca:	f06f 0302 	mvn.w	r3, #2
 8000cce:	e0db      	b.n	8000e88 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000cd0:	f06f 0304 	mvn.w	r3, #4
 8000cd4:	e0d8      	b.n	8000e88 <socket+0x210>
	    break;
 8000cd6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <socket+0x70>
 8000ce2:	f06f 0305 	mvn.w	r3, #5
 8000ce6:	e0cf      	b.n	8000e88 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d025      	beq.n	8000d3a <socket+0xc2>
	{
   	switch(protocol)
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d002      	beq.n	8000cfa <socket+0x82>
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d008      	beq.n	8000d0a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000cf8:	e024      	b.n	8000d44 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11c      	bne.n	8000d3e <socket+0xc6>
 8000d04:	f06f 0305 	mvn.w	r3, #5
 8000d08:	e0be      	b.n	8000e88 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	f003 0320 	and.w	r3, r3, #32
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db02      	blt.n	8000d22 <socket+0xaa>
 8000d1c:	f06f 0305 	mvn.w	r3, #5
 8000d20:	e0b2      	b.n	8000e88 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00a      	beq.n	8000d42 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db06      	blt.n	8000d42 <socket+0xca>
 8000d34:	f06f 0305 	mvn.w	r3, #5
 8000d38:	e0a6      	b.n	8000e88 <socket+0x210>
   	}
   }
 8000d3a:	bf00      	nop
 8000d3c:	e002      	b.n	8000d44 <socket+0xcc>
   	      break;
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <socket+0xcc>
   	      break;
 8000d42:	bf00      	nop
	close(sn);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8ac 	bl	8000ea4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	3301      	adds	r3, #1
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d5a:	f023 030f 	bic.w	r3, r3, #15
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f000 fdaa 	bl	80018c4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d70:	88bb      	ldrh	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d110      	bne.n	8000d98 <socket+0x120>
	{
	   port = sock_any_port++;
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <socket+0x218>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	b291      	uxth	r1, r2
 8000d7e:	4a44      	ldr	r2, [pc, #272]	; (8000e90 <socket+0x218>)
 8000d80:	8011      	strh	r1, [r2, #0]
 8000d82:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <socket+0x218>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d103      	bne.n	8000d98 <socket+0x120>
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <socket+0x218>)
 8000d92:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d96:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da4:	461a      	mov	r2, r3
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	4610      	mov	r0, r2
 8000db2:	f000 fd87 	bl	80018c4 <WIZCHIP_WRITE>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	3301      	adds	r3, #1
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4610      	mov	r0, r2
 8000dcc:	f000 fd7a 	bl	80018c4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fd70 	bl	80018c4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000de4:	bf00      	nop
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3301      	adds	r3, #1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fd1a 	bl	800182c <WIZCHIP_READ>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f3      	bne.n	8000de6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2201      	movs	r2, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <socket+0x21c>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4013      	ands	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <socket+0x21c>)
 8000e1a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <socket+0x21c>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <socket+0x21c>)
 8000e38:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <socket+0x220>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <socket+0x220>)
 8000e56:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <socket+0x224>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <socket+0x228>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e6a:	bf00      	nop
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	3301      	adds	r3, #1
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fcd7 	bl	800182c <WIZCHIP_READ>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f3      	beq.n	8000e6c <socket+0x1f4>
   return (int8_t)sn;
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	20000018 	.word	0x20000018
 8000e94:	200000d4 	.word	0x200000d4
 8000e98:	200000d6 	.word	0x200000d6
 8000e9c:	200000d8 	.word	0x200000d8
 8000ea0:	200000e8 	.word	0x200000e8

08000ea4 <close>:

int8_t close(uint8_t sn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d902      	bls.n	8000eba <close+0x16>
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb8:	e055      	b.n	8000f66 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fcfb 	bl	80018c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000ece:	bf00      	nop
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fca5 	bl	800182c <WIZCHIP_READ>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f3      	bne.n	8000ed0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	3301      	adds	r3, #1
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ef4:	211f      	movs	r1, #31
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fce4 	bl	80018c4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2201      	movs	r2, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <close+0xcc>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <close+0xcc>)
 8000f18:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <close+0xd0>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <close+0xd0>)
 8000f36:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <close+0xd4>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <close+0xd8>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000f4a:	bf00      	nop
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	3301      	adds	r3, #1
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fc67 	bl	800182c <WIZCHIP_READ>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f3      	bne.n	8000f4c <close+0xa8>
	return SOCK_OK;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000d4 	.word	0x200000d4
 8000f74:	200000d6 	.word	0x200000d6
 8000f78:	200000d8 	.word	0x200000d8
 8000f7c:	200000e8 	.word	0x200000e8

08000f80 <listen>:

int8_t listen(uint8_t sn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d902      	bls.n	8000f96 <listen+0x16>
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	e049      	b.n	800102a <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fc44 	bl	800182c <WIZCHIP_READ>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <listen+0x34>
 8000fae:	f06f 0304 	mvn.w	r3, #4
 8000fb2:	e03a      	b.n	800102a <listen+0xaa>
	CHECK_SOCKINIT();
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fc33 	bl	800182c <WIZCHIP_READ>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b13      	cmp	r3, #19
 8000fca:	d002      	beq.n	8000fd2 <listen+0x52>
 8000fcc:	f06f 0302 	mvn.w	r3, #2
 8000fd0:	e02b      	b.n	800102a <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fc6f 	bl	80018c4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000fe6:	bf00      	nop
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	3301      	adds	r3, #1
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fc19 	bl	800182c <WIZCHIP_READ>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f3      	bne.n	8000fe8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001000:	e006      	b.n	8001010 <listen+0x90>
   {
         close(sn);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff4d 	bl	8000ea4 <close>
         return SOCKERR_SOCKCLOSED;
 800100a:	f06f 0303 	mvn.w	r3, #3
 800100e:	e00c      	b.n	800102a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	3301      	adds	r3, #1
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fc05 	bl	800182c <WIZCHIP_READ>
 8001022:	4603      	mov	r3, r0
 8001024:	2b14      	cmp	r3, #20
 8001026:	d1ec      	bne.n	8001002 <listen+0x82>
   }
   return SOCK_OK;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d902      	bls.n	800104a <disconnect+0x16>
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001048:	e062      	b.n	8001110 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	3301      	adds	r3, #1
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fbea 	bl	800182c <WIZCHIP_READ>
 8001058:	4603      	mov	r3, r0
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	2b01      	cmp	r3, #1
 8001060:	d002      	beq.n	8001068 <disconnect+0x34>
 8001062:	f06f 0304 	mvn.w	r3, #4
 8001066:	e053      	b.n	8001110 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	3301      	adds	r3, #1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001074:	2108      	movs	r1, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fc24 	bl	80018c4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800107c:	bf00      	nop
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	3301      	adds	r3, #1
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fbce 	bl	800182c <WIZCHIP_READ>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f3      	bne.n	800107e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2201      	movs	r2, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	b21b      	sxth	r3, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <disconnect+0xe4>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4013      	ands	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <disconnect+0xe4>)
 80010b2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <disconnect+0xe8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	fa42 f303 	asr.w	r3, r2, r3
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d016      	beq.n	80010f6 <disconnect+0xc2>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e021      	b.n	8001110 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	3301      	adds	r3, #1
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fba7 	bl	800182c <WIZCHIP_READ>
 80010de:	4603      	mov	r3, r0
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <disconnect+0xc2>
	   {
	      close(sn);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff feda 	bl	8000ea4 <close>
	      return SOCKERR_TIMEOUT;
 80010f0:	f06f 030c 	mvn.w	r3, #12
 80010f4:	e00c      	b.n	8001110 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3301      	adds	r3, #1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fb92 	bl	800182c <WIZCHIP_READ>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1de      	bne.n	80010cc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000d6 	.word	0x200000d6
 800111c:	200000d4 	.word	0x200000d4

08001120 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001134:	2300      	movs	r3, #0
 8001136:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d902      	bls.n	8001144 <send+0x24>
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	e0de      	b.n	8001302 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3301      	adds	r3, #1
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fb6d 	bl	800182c <WIZCHIP_READ>
 8001152:	4603      	mov	r3, r0
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <send+0x42>
 800115c:	f06f 0304 	mvn.w	r3, #4
 8001160:	e0cf      	b.n	8001302 <send+0x1e2>
   CHECK_SOCKDATA();
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <send+0x4e>
 8001168:	f06f 030d 	mvn.w	r3, #13
 800116c:	e0c9      	b.n	8001302 <send+0x1e2>
   tmp = getSn_SR(sn);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	3301      	adds	r3, #1
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fb56 	bl	800182c <WIZCHIP_READ>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b17      	cmp	r3, #23
 8001188:	d005      	beq.n	8001196 <send+0x76>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b1c      	cmp	r3, #28
 800118e:	d002      	beq.n	8001196 <send+0x76>
 8001190:	f06f 0306 	mvn.w	r3, #6
 8001194:	e0b5      	b.n	8001302 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <send+0x1ec>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d039      	beq.n	800121e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	3301      	adds	r3, #1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fb38 	bl	800182c <WIZCHIP_READ>
 80011bc:	4603      	mov	r3, r0
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	3301      	adds	r3, #1
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011da:	2110      	movs	r1, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb71 	bl	80018c4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2201      	movs	r2, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <send+0x1ec>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <send+0x1ec>)
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	e00d      	b.n	800121e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <send+0xfa>
      {
         close(sn);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe48 	bl	8000ea4 <close>
         return SOCKERR_TIMEOUT;
 8001214:	f06f 030c 	mvn.w	r3, #12
 8001218:	e073      	b.n	8001302 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800121a:	2300      	movs	r3, #0
 800121c:	e071      	b.n	8001302 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	3301      	adds	r3, #1
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fafe 	bl	800182c <WIZCHIP_READ>
 8001230:	4603      	mov	r3, r0
 8001232:	b29b      	uxth	r3, r3
 8001234:	029b      	lsls	r3, r3, #10
 8001236:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001238:	88ba      	ldrh	r2, [r7, #4]
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d901      	bls.n	8001244 <send+0x124>
 8001240:	89bb      	ldrh	r3, [r7, #12]
 8001242:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fc4a 	bl	8001ae0 <getSn_TX_FSR>
 800124c:	4603      	mov	r3, r0
 800124e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3301      	adds	r3, #1
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fae5 	bl	800182c <WIZCHIP_READ>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	2b17      	cmp	r3, #23
 800126a:	d009      	beq.n	8001280 <send+0x160>
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b1c      	cmp	r3, #28
 8001270:	d006      	beq.n	8001280 <send+0x160>
      {
         close(sn);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe15 	bl	8000ea4 <close>
         return SOCKERR_SOCKSTATUS;
 800127a:	f06f 0306 	mvn.w	r3, #6
 800127e:	e040      	b.n	8001302 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <send+0x1f0>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	fa42 f303 	asr.w	r3, r2, r3
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <send+0x180>
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89bb      	ldrh	r3, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d901      	bls.n	80012a0 <send+0x180>
 800129c:	2300      	movs	r3, #0
 800129e:	e030      	b.n	8001302 <send+0x1e2>
      if(len <= freesize) break;
 80012a0:	88ba      	ldrh	r2, [r7, #4]
 80012a2:	89bb      	ldrh	r3, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d900      	bls.n	80012aa <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80012a8:	e7cc      	b.n	8001244 <send+0x124>
      if(len <= freesize) break;
 80012aa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80012ac:	88ba      	ldrh	r2, [r7, #4]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fcaa 	bl	8001c0c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	3301      	adds	r3, #1
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012c4:	2120      	movs	r1, #32
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fafc 	bl	80018c4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80012cc:	bf00      	nop
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	3301      	adds	r3, #1
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 faa6 	bl	800182c <WIZCHIP_READ>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f3      	bne.n	80012ce <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2201      	movs	r2, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <send+0x1ec>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <send+0x1ec>)
 80012fe:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001300:	88bb      	ldrh	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000d6 	.word	0x200000d6
 8001310:	200000d4 	.word	0x200000d4

08001314 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b08      	cmp	r3, #8
 8001328:	d902      	bls.n	8001330 <getsockopt+0x1c>
 800132a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132e:	e101      	b.n	8001534 <getsockopt+0x220>
   switch(sotype)
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	f200 80fa 	bhi.w	800152c <getsockopt+0x218>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <getsockopt+0x2c>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	08001375 	.word	0x08001375
 8001344:	08001391 	.word	0x08001391
 8001348:	080013ad 	.word	0x080013ad
 800134c:	080013c9 	.word	0x080013c9
 8001350:	08001403 	.word	0x08001403
 8001354:	0800141b 	.word	0x0800141b
 8001358:	0800152d 	.word	0x0800152d
 800135c:	08001455 	.word	0x08001455
 8001360:	0800148f 	.word	0x0800148f
 8001364:	080014a1 	.word	0x080014a1
 8001368:	080014b3 	.word	0x080014b3
 800136c:	080014cf 	.word	0x080014cf
 8001370:	08001507 	.word	0x08001507
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	3301      	adds	r3, #1
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa55 	bl	800182c <WIZCHIP_READ>
 8001382:	4603      	mov	r3, r0
 8001384:	f023 030f 	bic.w	r3, r3, #15
 8001388:	b2da      	uxtb	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	701a      	strb	r2, [r3, #0]
         break;
 800138e:	e0d0      	b.n	8001532 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	3301      	adds	r3, #1
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fa45 	bl	800182c <WIZCHIP_READ>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
         break;
 80013aa:	e0c2      	b.n	8001532 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	3301      	adds	r3, #1
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa37 	bl	800182c <WIZCHIP_READ>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	701a      	strb	r2, [r3, #0]
         break;
 80013c6:	e0b4      	b.n	8001532 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	3301      	adds	r3, #1
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa29 	bl	800182c <WIZCHIP_READ>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29b      	uxth	r3, r3
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b29c      	uxth	r4, r3
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3301      	adds	r3, #1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa1c 	bl	800182c <WIZCHIP_READ>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4423      	add	r3, r4
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	801a      	strh	r2, [r3, #0]
         break;
 8001400:	e097      	b.n	8001532 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3301      	adds	r3, #1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800140e:	2204      	movs	r2, #4
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 faa4 	bl	8001960 <WIZCHIP_READ_BUF>
         break;
 8001418:	e08b      	b.n	8001532 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3301      	adds	r3, #1
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa00 	bl	800182c <WIZCHIP_READ>
 800142c:	4603      	mov	r3, r0
 800142e:	b29b      	uxth	r3, r3
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29c      	uxth	r4, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	3301      	adds	r3, #1
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f9f3 	bl	800182c <WIZCHIP_READ>
 8001446:	4603      	mov	r3, r0
 8001448:	b29b      	uxth	r3, r3
 800144a:	4423      	add	r3, r4
 800144c:	b29a      	uxth	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	801a      	strh	r2, [r3, #0]
         break;
 8001452:	e06e      	b.n	8001532 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	3301      	adds	r3, #1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f9e5 	bl	800182c <WIZCHIP_READ>
 8001462:	4603      	mov	r3, r0
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	2b01      	cmp	r3, #1
 800146a:	d002      	beq.n	8001472 <getsockopt+0x15e>
 800146c:	f06f 0304 	mvn.w	r3, #4
 8001470:	e060      	b.n	8001534 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	3301      	adds	r3, #1
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f9d4 	bl	800182c <WIZCHIP_READ>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	801a      	strh	r2, [r3, #0]
         break;
 800148c:	e051      	b.n	8001532 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fb25 	bl	8001ae0 <getSn_TX_FSR>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	801a      	strh	r2, [r3, #0]
         break;
 800149e:	e048      	b.n	8001532 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fb67 	bl	8001b76 <getSn_RX_RSR>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	801a      	strh	r2, [r3, #0]
         break;
 80014b0:	e03f      	b.n	8001532 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	3301      	adds	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f9b4 	bl	800182c <WIZCHIP_READ>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	701a      	strb	r2, [r3, #0]
         break;
 80014cc:	e031      	b.n	8001532 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3301      	adds	r3, #1
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9a8 	bl	800182c <WIZCHIP_READ>
 80014dc:	4603      	mov	r3, r0
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fb44 	bl	8001b76 <getSn_RX_RSR>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80014f6:	e01c      	b.n	8001532 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <getsockopt+0x228>)
 80014fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	801a      	strh	r2, [r3, #0]
         break;
 8001504:	e015      	b.n	8001532 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	3301      	adds	r3, #1
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f98c 	bl	800182c <WIZCHIP_READ>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 800151a:	f06f 0304 	mvn.w	r3, #4
 800151e:	e009      	b.n	8001534 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <getsockopt+0x22c>)
 8001524:	5cd2      	ldrb	r2, [r2, r3]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	701a      	strb	r2, [r3, #0]
         break;
 800152a:	e002      	b.n	8001532 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 800152c:	f06f 0301 	mvn.w	r3, #1
 8001530:	e000      	b.n	8001534 <getsockopt+0x220>
   }
   return SOCK_OK;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	200000d8 	.word	0x200000d8
 8001540:	200000e8 	.word	0x200000e8

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_SPI_MspInit+0xc0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d14a      	bne.n	800164c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_SPI_MspInit+0xc4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <HAL_SPI_MspInit+0xc8>)
 8001626:	f000 ffd9 	bl	80025dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800162a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163c:	2305      	movs	r3, #5
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <HAL_SPI_MspInit+0xcc>)
 8001648:	f000 ffc8 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40003800 	.word	0x40003800
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d10d      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 fe4a 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e00a      	b.n	8001720 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800170a:	f3af 8000 	nop.w
 800170e:	4601      	mov	r1, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf0      	blt.n	800170a <_read+0x12>
	}

return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f002 fd42 	bl	8004254 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200000f0 	.word	0x200000f0
 8001804:	20000a40 	.word	0x20000a40

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <WIZCHIP_READ+0x94>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4798      	blx	r3
   WIZCHIP.CS._select();
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <WIZCHIP_READ+0x94>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <WIZCHIP_READ+0x94>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <WIZCHIP_READ+0x24>
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <WIZCHIP_READ+0x94>)
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d114      	bne.n	800187a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <WIZCHIP_READ+0x94>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	0c12      	lsrs	r2, r2, #16
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <WIZCHIP_READ+0x94>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	0a12      	lsrs	r2, r2, #8
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	4610      	mov	r0, r2
 800186a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <WIZCHIP_READ+0x94>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	4610      	mov	r0, r2
 8001876:	4798      	blx	r3
 8001878:	e011      	b.n	800189e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	b2db      	uxtb	r3, r3
 8001880:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b2db      	uxtb	r3, r3
 8001888:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <WIZCHIP_READ+0x94>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	f107 020c 	add.w	r2, r7, #12
 8001898:	2103      	movs	r1, #3
 800189a:	4610      	mov	r0, r2
 800189c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <WIZCHIP_READ+0x94>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <WIZCHIP_READ+0x94>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <WIZCHIP_READ+0x94>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	4798      	blx	r3
   return ret;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000020 	.word	0x20000020

080018c4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <WIZCHIP_WRITE+0x98>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <WIZCHIP_WRITE+0x98>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <WIZCHIP_WRITE+0x98>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d119      	bne.n	8001920 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <WIZCHIP_WRITE+0x98>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	0c12      	lsrs	r2, r2, #16
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <WIZCHIP_WRITE+0x98>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	0a12      	lsrs	r2, r2, #8
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	4610      	mov	r0, r2
 8001906:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <WIZCHIP_WRITE+0x98>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	4610      	mov	r0, r2
 8001912:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <WIZCHIP_WRITE+0x98>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	4610      	mov	r0, r2
 800191c:	4798      	blx	r3
 800191e:	e013      	b.n	8001948 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	b2db      	uxtb	r3, r3
 8001926:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b2db      	uxtb	r3, r3
 800192e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <WIZCHIP_WRITE+0x98>)
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	2104      	movs	r1, #4
 8001944:	4610      	mov	r0, r2
 8001946:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <WIZCHIP_WRITE+0x98>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <WIZCHIP_WRITE+0x98>)
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	4798      	blx	r3
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000020 	.word	0x20000020

08001960 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <WIZCHIP_READ_BUF+0x2a>
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d126      	bne.n	80019d8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	4610      	mov	r0, r2
 8001996:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	0a12      	lsrs	r2, r2, #8
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	4610      	mov	r0, r2
 80019a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	4610      	mov	r0, r2
 80019b0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	82fb      	strh	r3, [r7, #22]
 80019b6:	e00a      	b.n	80019ce <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	8afa      	ldrh	r2, [r7, #22]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	188c      	adds	r4, r1, r2
 80019c2:	4798      	blx	r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	3301      	adds	r3, #1
 80019cc:	82fb      	strh	r3, [r7, #22]
 80019ce:	8afa      	ldrh	r2, [r7, #22]
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3f0      	bcc.n	80019b8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019d6:	e017      	b.n	8001a08 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f107 0210 	add.w	r2, r7, #16
 80019f6:	2103      	movs	r1, #3
 80019f8:	4610      	mov	r0, r2
 80019fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4611      	mov	r1, r2
 8001a04:	68b8      	ldr	r0, [r7, #8]
 8001a06:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <WIZCHIP_READ_BUF+0xbc>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4798      	blx	r3
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	20000020 	.word	0x20000020

08001a20 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d126      	bne.n	8001a98 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	0c12      	lsrs	r2, r2, #16
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	4610      	mov	r0, r2
 8001a56:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	0a12      	lsrs	r2, r2, #8
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4610      	mov	r0, r2
 8001a64:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	82fb      	strh	r3, [r7, #22]
 8001a76:	e00a      	b.n	8001a8e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	8afa      	ldrh	r2, [r7, #22]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	440a      	add	r2, r1
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	4610      	mov	r0, r2
 8001a86:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a88:	8afb      	ldrh	r3, [r7, #22]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	82fb      	strh	r3, [r7, #22]
 8001a8e:	8afa      	ldrh	r2, [r7, #22]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3f0      	bcc.n	8001a78 <WIZCHIP_WRITE_BUF+0x58>
 8001a96:	e017      	b.n	8001ac8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	0c1b      	lsrs	r3, r3, #16
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f107 0210 	add.w	r2, r7, #16
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <WIZCHIP_WRITE_BUF+0xbc>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4798      	blx	r3
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000020 	.word	0x20000020

08001ae0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	81fb      	strh	r3, [r7, #14]
 8001aee:	2300      	movs	r3, #0
 8001af0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	3301      	adds	r3, #1
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe94 	bl	800182c <WIZCHIP_READ>
 8001b04:	4603      	mov	r3, r0
 8001b06:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b29c      	uxth	r4, r3
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3301      	adds	r3, #1
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe86 	bl	800182c <WIZCHIP_READ>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4423      	add	r3, r4
 8001b26:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001b28:	89bb      	ldrh	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01a      	beq.n	8001b64 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3301      	adds	r3, #1
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe76 	bl	800182c <WIZCHIP_READ>
 8001b40:	4603      	mov	r3, r0
 8001b42:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b29c      	uxth	r4, r3
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3301      	adds	r3, #1
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe68 	bl	800182c <WIZCHIP_READ>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4423      	add	r3, r4
 8001b62:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001b64:	89fa      	ldrh	r2, [r7, #14]
 8001b66:	89bb      	ldrh	r3, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1c2      	bne.n	8001af2 <getSn_TX_FSR+0x12>
   return val;
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}

08001b76 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001b76:	b590      	push	{r4, r7, lr}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	81fb      	strh	r3, [r7, #14]
 8001b84:	2300      	movs	r3, #0
 8001b86:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fe49 	bl	800182c <WIZCHIP_READ>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b9e:	89bb      	ldrh	r3, [r7, #12]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b29c      	uxth	r4, r3
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3301      	adds	r3, #1
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe3b 	bl	800182c <WIZCHIP_READ>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4423      	add	r3, r4
 8001bbc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001bbe:	89bb      	ldrh	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01a      	beq.n	8001bfa <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3301      	adds	r3, #1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe2b 	bl	800182c <WIZCHIP_READ>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b29c      	uxth	r4, r3
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3301      	adds	r3, #1
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe1d 	bl	800182c <WIZCHIP_READ>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4423      	add	r3, r4
 8001bf8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001bfa:	89fa      	ldrh	r2, [r7, #14]
 8001bfc:	89bb      	ldrh	r3, [r7, #12]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d1c2      	bne.n	8001b88 <getSn_RX_RSR+0x12>
   return val;
 8001c02:	89fb      	ldrh	r3, [r7, #14]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}

08001c0c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d048      	beq.n	8001cbc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fdf8 	bl	800182c <WIZCHIP_READ>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b29c      	uxth	r4, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3301      	adds	r3, #1
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fdeb 	bl	800182c <WIZCHIP_READ>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4423      	add	r3, r4
 8001c5c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	3202      	adds	r2, #2
 8001c68:	00d2      	lsls	r2, r2, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	461a      	mov	r2, r3
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f7ff fed3 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001c7a:	89fa      	ldrh	r2, [r7, #14]
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c8e:	461a      	mov	r2, r3
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f7ff fe12 	bl	80018c4 <WIZCHIP_WRITE>
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001cac:	461a      	mov	r2, r3
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7ff fe05 	bl	80018c4 <WIZCHIP_WRITE>
 8001cba:	e000      	b.n	8001cbe <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001cbc:	bf00      	nop
}
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	807b      	strh	r3, [r7, #2]
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <reg_wizchip_cs_cbfunc+0x16>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <reg_wizchip_cs_cbfunc+0x40>)
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <reg_wizchip_cs_cbfunc+0x44>)
 8001da6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <reg_wizchip_cs_cbfunc+0x40>)
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <reg_wizchip_cs_cbfunc+0x48>)
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	e006      	b.n	8001dbe <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <reg_wizchip_cs_cbfunc+0x40>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <reg_wizchip_cs_cbfunc+0x40>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6193      	str	r3, [r2, #24]
   }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000020 	.word	0x20000020
 8001dd0:	08001ce1 	.word	0x08001ce1
 8001dd4:	08001cef 	.word	0x08001cef

08001dd8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001de2:	bf00      	nop
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <reg_wizchip_spi_cbfunc+0x4c>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f9      	beq.n	8001de4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <reg_wizchip_spi_cbfunc+0x24>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <reg_wizchip_spi_cbfunc+0x4c>)
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <reg_wizchip_spi_cbfunc+0x50>)
 8001e00:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <reg_wizchip_spi_cbfunc+0x4c>)
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <reg_wizchip_spi_cbfunc+0x54>)
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	e006      	b.n	8001e18 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <reg_wizchip_spi_cbfunc+0x4c>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <reg_wizchip_spi_cbfunc+0x4c>)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6213      	str	r3, [r2, #32]
   }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000020 	.word	0x20000020
 8001e28:	08001d35 	.word	0x08001d35
 8001e2c:	08001d45 	.word	0x08001d45

08001e30 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e3a:	bf00      	nop
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f9      	beq.n	8001e3c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <reg_wizchip_spiburst_cbfunc+0x24>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e60:	e006      	b.n	8001e70 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	20000020 	.word	0x20000020
 8001e80:	08001d5b 	.word	0x08001d5b
 8001e84:	08001d73 	.word	0x08001d73

08001e88 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d82c      	bhi.n	8001ef4 <ctlnetwork+0x6c>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <ctlnetwork+0x18>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ec1 	.word	0x08001ec1
 8001ea8:	08001ec9 	.word	0x08001ec9
 8001eac:	08001ed7 	.word	0x08001ed7
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	08001eed 	.word	0x08001eed
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f000 f8fb 	bl	80020b4 <wizchip_setnetinfo>
         break;
 8001ebe:	e01c      	b.n	8001efa <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f000 f937 	bl	8002134 <wizchip_getnetinfo>
         break;
 8001ec6:	e018      	b.n	8001efa <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f971 	bl	80021b4 <wizchip_setnetmode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	e012      	b.n	8001efc <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001ed6:	f000 f98f 	bl	80021f8 <wizchip_getnetmode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
         break;
 8001ee2:	e00a      	b.n	8001efa <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	f000 f98f 	bl	8002208 <wizchip_settimeout>
         break;
 8001eea:	e006      	b.n	8001efa <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001eec:	6838      	ldr	r0, [r7, #0]
 8001eee:	f000 f9ac 	bl	800224a <wizchip_gettimeout>
         break;
 8001ef2:	e002      	b.n	8001efa <ctlnetwork+0x72>
      default:
         return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef8:	e000      	b.n	8001efc <ctlnetwork+0x74>
   }
   return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2206      	movs	r2, #6
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f14:	f7ff fd24 	bl	8001960 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f24:	f7ff fd1c 	bl	8001960 <WIZCHIP_READ_BUF>
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f34:	f7ff fd14 	bl	8001960 <WIZCHIP_READ_BUF>
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f44:	f7ff fd0c 	bl	8001960 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fcba 	bl	80018c4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fc6b 	bl	800182c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2206      	movs	r2, #6
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f60:	f7ff fd5e 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f70:	f7ff fd56 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f80:	f7ff fd4e 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f90:	f7ff fd46 	bl	8001a20 <WIZCHIP_WRITE_BUF>
}
 8001f94:	bf00      	nop
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001faa:	f7ff ffab 	bl	8001f04 <wizchip_sw_reset>
   if(txsize)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d03b      	beq.n	800202c <wizchip_init+0x90>
   {
      tmp = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e015      	b.n	8001fea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	dd02      	ble.n	8001fde <wizchip_init+0x42>
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fdc:	e066      	b.n	80020ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	dde5      	ble.n	8001fbe <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e015      	b.n	8002024 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3301      	adds	r3, #1
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002006:	4618      	mov	r0, r3
 8002008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	f7ff fc56 	bl	80018c4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3301      	adds	r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002028:	2b07      	cmp	r3, #7
 800202a:	dde5      	ble.n	8001ff8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03b      	beq.n	80020aa <wizchip_init+0x10e>
   {
      tmp = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e015      	b.n	8002068 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	4413      	add	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800204e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002052:	2b10      	cmp	r3, #16
 8002054:	dd02      	ble.n	800205c <wizchip_init+0xc0>
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	e027      	b.n	80020ac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206c:	2b07      	cmp	r3, #7
 800206e:	dde5      	ble.n	800203c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e015      	b.n	80020a2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3301      	adds	r3, #1
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002084:	4618      	mov	r0, r3
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f7ff fc17 	bl	80018c4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	2b07      	cmp	r3, #7
 80020a8:	dde5      	ble.n	8002076 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2206      	movs	r2, #6
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020c6:	f7ff fcab 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	330e      	adds	r3, #14
 80020ce:	2204      	movs	r2, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020d6:	f7ff fca3 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	330a      	adds	r3, #10
 80020de:	2204      	movs	r2, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80020e6:	f7ff fc9b 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3306      	adds	r3, #6
 80020ee:	2204      	movs	r2, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020f6:	f7ff fc93 	bl	8001a20 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7c9a      	ldrb	r2, [r3, #18]
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <wizchip_setnetinfo+0x78>)
 8002100:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7cda      	ldrb	r2, [r3, #19]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <wizchip_setnetinfo+0x78>)
 8002108:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7d1a      	ldrb	r2, [r3, #20]
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <wizchip_setnetinfo+0x78>)
 8002110:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7d5a      	ldrb	r2, [r3, #21]
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <wizchip_setnetinfo+0x78>)
 8002118:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7d9a      	ldrb	r2, [r3, #22]
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <wizchip_setnetinfo+0x7c>)
 8002120:	701a      	strb	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200000f4 	.word	0x200000f4
 8002130:	200000f8 	.word	0x200000f8

08002134 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2206      	movs	r2, #6
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002146:	f7ff fc0b 	bl	8001960 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	330e      	adds	r3, #14
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002156:	f7ff fc03 	bl	8001960 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330a      	adds	r3, #10
 800215e:	2204      	movs	r2, #4
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002166:	f7ff fbfb 	bl	8001960 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	2204      	movs	r2, #4
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002176:	f7ff fbf3 	bl	8001960 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <wizchip_getnetinfo+0x78>)
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <wizchip_getnetinfo+0x78>)
 8002184:	785a      	ldrb	r2, [r3, #1]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <wizchip_getnetinfo+0x78>)
 800218c:	789a      	ldrb	r2, [r3, #2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <wizchip_getnetinfo+0x78>)
 8002194:	78da      	ldrb	r2, [r3, #3]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <wizchip_getnetinfo+0x7c>)
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	759a      	strb	r2, [r3, #22]
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200000f4 	.word	0x200000f4
 80021b0:	200000f8 	.word	0x200000f8

080021b4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <wizchip_setnetmode+0x1e>
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d0:	e00e      	b.n	80021f0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff fb2a 	bl	800182c <WIZCHIP_READ>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4619      	mov	r1, r3
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff fb6b 	bl	80018c4 <WIZCHIP_WRITE>
   return 0;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff fb15 	bl	800182c <WIZCHIP_READ>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800221a:	f7ff fb53 	bl	80018c4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	885b      	ldrh	r3, [r3, #2]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800222e:	f7ff fb49 	bl	80018c4 <WIZCHIP_WRITE>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	885b      	ldrh	r3, [r3, #2]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800223e:	f7ff fb41 	bl	80018c4 <WIZCHIP_WRITE>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002252:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002256:	f7ff fae9 	bl	800182c <WIZCHIP_READ>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002262:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002266:	f7ff fae1 	bl	800182c <WIZCHIP_READ>
 800226a:	4603      	mov	r3, r0
 800226c:	b29b      	uxth	r3, r3
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b29c      	uxth	r4, r3
 8002272:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002276:	f7ff fad9 	bl	800182c <WIZCHIP_READ>
 800227a:	4603      	mov	r3, r0
 800227c:	b29b      	uxth	r3, r3
 800227e:	4423      	add	r3, r4
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	805a      	strh	r2, [r3, #2]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}
	...

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ba:	f7ff faa5 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f001 ffcf 	bl	8004260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe f9f9 	bl	80006b8 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80022d4:	08005874 	.word	0x08005874
  ldr r2, =_sbss
 80022d8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80022dc:	20000a40 	.word	0x20000a40

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_Init+0x40>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_Init+0x40>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x40>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f931 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	2000      	movs	r0, #0
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff f914 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f93b 	bl	80025c2 <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002364:	f000 f911 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000001c 	.word	0x2000001c
 8002380:	20000050 	.word	0x20000050
 8002384:	2000004c 	.word	0x2000004c

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000050 	.word	0x20000050
 80023ac:	20000a2c 	.word	0x20000a2c

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000a2c 	.word	0x20000a2c

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000050 	.word	0x20000050

08002410 <__NVIC_SetPriorityGrouping>:
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_SetPriority>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff47 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff5c 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffb0 	bl	8002530 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e16b      	b.n	80028d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 815a 	bne.w	80028ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d005      	beq.n	800262e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	2b02      	cmp	r3, #2
 800262c:	d130      	bne.n	8002690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 0201 	and.w	r2, r3, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b03      	cmp	r3, #3
 800269a:	d017      	beq.n	80026cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d123      	bne.n	8002720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80b4 	beq.w	80028ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a5f      	ldr	r2, [pc, #380]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_GPIO_Init+0x310>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_GPIO_Init+0x314>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02b      	beq.n	8002802 <HAL_GPIO_Init+0x226>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a51      	ldr	r2, [pc, #324]	; (80028f4 <HAL_GPIO_Init+0x318>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x222>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <HAL_GPIO_Init+0x31c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x21e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4f      	ldr	r2, [pc, #316]	; (80028fc <HAL_GPIO_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x21a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <HAL_GPIO_Init+0x324>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x216>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4d      	ldr	r2, [pc, #308]	; (8002904 <HAL_GPIO_Init+0x328>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x212>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4c      	ldr	r2, [pc, #304]	; (8002908 <HAL_GPIO_Init+0x32c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	; (800290c <HAL_GPIO_Init+0x330>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x20a>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00e      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e00c      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027ea:	2306      	movs	r3, #6
 80027ec:	e00a      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x228>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x310>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002846:	4a32      	ldr	r2, [pc, #200]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_GPIO_Init+0x334>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x334>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_GPIO_Init+0x334>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_GPIO_Init+0x334>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f ae90 	bls.w	80025f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800
 800290c:	40021c00 	.word	0x40021c00
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e264      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d075      	beq.n	8002a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	4ba3      	ldr	r3, [pc, #652]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00c      	beq.n	800298c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d112      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	4b99      	ldr	r3, [pc, #612]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x108>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d157      	bne.n	8002a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e23f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x74>
 80029ae:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b8b      	ldr	r3, [pc, #556]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a8a      	ldr	r2, [pc, #552]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a87      	ldr	r2, [pc, #540]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029e0:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a83      	ldr	r2, [pc, #524]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7ff fcd6 	bl	80023b0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a08:	f7ff fcd2 	bl	80023b0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e204      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xc0>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fcc2 	bl	80023b0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff fcbe 	bl	80023b0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1f0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0xe8>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1c4      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4952      	ldr	r1, [pc, #328]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7ff fc77 	bl	80023b0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fc73 	bl	80023b0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1a5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff fc56 	bl	80023b0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b08:	f7ff fc52 	bl	80023b0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e184      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d030      	beq.n	8002b94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7ff fc36 	bl	80023b0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b48:	f7ff fc32 	bl	80023b0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e164      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x200>
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fc1f 	bl	80023b0 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff fc1b 	bl	80023b0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e14d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a0 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7ff fbe1 	bl	80023b0 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e011      	b.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000
 8002bfc:	42470e80 	.word	0x42470e80
 8002c00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7ff fbd4 	bl	80023b0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e106      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x4e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e01c      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a77      	ldr	r2, [pc, #476]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c5a:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a71      	ldr	r2, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7ff fb99 	bl	80023b0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7ff fb95 	bl	80023b0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0c5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCC_OscConfig+0x33a>
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7ff fb83 	bl	80023b0 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7ff fb7f 	bl	80023b0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0af      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 809b 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d05c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d141      	bne.n	8002d84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7ff fb53 	bl	80023b0 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7ff fb4f 	bl	80023b0 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e081      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fb28 	bl	80023b0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7ff fb24 	bl	80023b0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e056      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x41c>
 8002d82:	e04e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fb11 	bl	80023b0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7ff fb0d 	bl	80023b0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x44a>
 8002db0:	e037      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e032      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d028      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d11a      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d111      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470060 	.word	0x42470060

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cc      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d90c      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d044      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d119      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e067      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f28:	f7ff fa42 	bl	80023b0 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7ff fa3e 	bl	80023b0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d20c      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f9a2 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	080057bc 	.word	0x080057bc
 8002ffc:	2000001c 	.word	0x2000001c
 8003000:	2000004c 	.word	0x2000004c

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b5b0      	push	{r4, r5, r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800300a:	2100      	movs	r1, #0
 800300c:	6079      	str	r1, [r7, #4]
 800300e:	2100      	movs	r1, #0
 8003010:	60f9      	str	r1, [r7, #12]
 8003012:	2100      	movs	r1, #0
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003016:	2100      	movs	r1, #0
 8003018:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301a:	4952      	ldr	r1, [pc, #328]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 800301c:	6889      	ldr	r1, [r1, #8]
 800301e:	f001 010c 	and.w	r1, r1, #12
 8003022:	2908      	cmp	r1, #8
 8003024:	d00d      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3e>
 8003026:	2908      	cmp	r1, #8
 8003028:	f200 8094 	bhi.w	8003154 <HAL_RCC_GetSysClockFreq+0x150>
 800302c:	2900      	cmp	r1, #0
 800302e:	d002      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x32>
 8003030:	2904      	cmp	r1, #4
 8003032:	d003      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x38>
 8003034:	e08e      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_GetSysClockFreq+0x164>)
 8003038:	60bb      	str	r3, [r7, #8]
       break;
 800303a:	e08e      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_GetSysClockFreq+0x168>)
 800303e:	60bb      	str	r3, [r7, #8]
      break;
 8003040:	e08b      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003042:	4948      	ldr	r1, [pc, #288]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 8003044:	6849      	ldr	r1, [r1, #4]
 8003046:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800304a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304c:	4945      	ldr	r1, [pc, #276]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 800304e:	6849      	ldr	r1, [r1, #4]
 8003050:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003054:	2900      	cmp	r1, #0
 8003056:	d024      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003058:	4942      	ldr	r1, [pc, #264]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 800305a:	6849      	ldr	r1, [r1, #4]
 800305c:	0989      	lsrs	r1, r1, #6
 800305e:	4608      	mov	r0, r1
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003068:	f04f 0500 	mov.w	r5, #0
 800306c:	ea00 0204 	and.w	r2, r0, r4
 8003070:	ea01 0305 	and.w	r3, r1, r5
 8003074:	493d      	ldr	r1, [pc, #244]	; (800316c <HAL_RCC_GetSysClockFreq+0x168>)
 8003076:	fb01 f003 	mul.w	r0, r1, r3
 800307a:	2100      	movs	r1, #0
 800307c:	fb01 f102 	mul.w	r1, r1, r2
 8003080:	1844      	adds	r4, r0, r1
 8003082:	493a      	ldr	r1, [pc, #232]	; (800316c <HAL_RCC_GetSysClockFreq+0x168>)
 8003084:	fba2 0101 	umull	r0, r1, r2, r1
 8003088:	1863      	adds	r3, r4, r1
 800308a:	4619      	mov	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	f7fd f8f4 	bl	8000280 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e04a      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	461a      	mov	r2, r3
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	ea02 0400 	and.w	r4, r2, r0
 80030ba:	ea03 0501 	and.w	r5, r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	014b      	lsls	r3, r1, #5
 80030cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030d0:	0142      	lsls	r2, r0, #5
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	1b00      	subs	r0, r0, r4
 80030d8:	eb61 0105 	sbc.w	r1, r1, r5
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	018b      	lsls	r3, r1, #6
 80030e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ea:	0182      	lsls	r2, r0, #6
 80030ec:	1a12      	subs	r2, r2, r0
 80030ee:	eb63 0301 	sbc.w	r3, r3, r1
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	00d9      	lsls	r1, r3, #3
 80030fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003100:	00d0      	lsls	r0, r2, #3
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	1912      	adds	r2, r2, r4
 8003108:	eb45 0303 	adc.w	r3, r5, r3
 800310c:	f04f 0000 	mov.w	r0, #0
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	0299      	lsls	r1, r3, #10
 8003116:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800311a:	0290      	lsls	r0, r2, #10
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f7fd f8a8 	bl	8000280 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_GetSysClockFreq+0x160>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	60bb      	str	r3, [r7, #8]
      break;
 8003152:	e002      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_GetSysClockFreq+0x164>)
 8003156:	60bb      	str	r3, [r7, #8]
      break;
 8003158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315a:	68bb      	ldr	r3, [r7, #8]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bdb0      	pop	{r4, r5, r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	017d7840 	.word	0x017d7840

08003170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07b      	b.n	800327a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003192:	d009      	beq.n	80031a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
 800319a:	e005      	b.n	80031a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f9e6 	bl	8001594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	ea42 0103 	orr.w	r1, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0104 	and.w	r1, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0210 	and.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_Transmit+0x22>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e126      	b.n	80034f2 <HAL_SPI_Transmit+0x270>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ac:	f7ff f880 	bl	80023b0 <HAL_GetTick>
 80032b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c6:	e10b      	b.n	80034e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_Transmit+0x52>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d8:	e102      	b.n	80034e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2203      	movs	r2, #3
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003320:	d10f      	bne.n	8003342 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d007      	beq.n	8003360 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003368:	d14b      	bne.n	8003402 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_SPI_Transmit+0xf6>
 8003372:	8afb      	ldrh	r3, [r7, #22]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d13e      	bne.n	80033f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800339c:	e02b      	b.n	80033f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d112      	bne.n	80033d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80033d0:	e011      	b.n	80033f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d2:	f7fe ffed 	bl	80023b0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d803      	bhi.n	80033ea <HAL_SPI_Transmit+0x168>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e8:	d102      	bne.n	80033f0 <HAL_SPI_Transmit+0x16e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033f4:	e074      	b.n	80034e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ce      	bne.n	800339e <HAL_SPI_Transmit+0x11c>
 8003400:	e04c      	b.n	800349c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_SPI_Transmit+0x18e>
 800340a:	8afb      	ldrh	r3, [r7, #22]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d140      	bne.n	8003492 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003436:	e02c      	b.n	8003492 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d113      	bne.n	800346e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	86da      	strh	r2, [r3, #54]	; 0x36
 800346c:	e011      	b.n	8003492 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346e:	f7fe ff9f 	bl	80023b0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d803      	bhi.n	8003486 <HAL_SPI_Transmit+0x204>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003484:	d102      	bne.n	800348c <HAL_SPI_Transmit+0x20a>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003490:	e026      	b.n	80034e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1cd      	bne.n	8003438 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fbcb 	bl	8003c3c <SPI_EndRxTxTransaction>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e000      	b.n	80034e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b088      	sub	sp, #32
 80034fe:	af02      	add	r7, sp, #8
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d112      	bne.n	800353e <HAL_SPI_Receive+0x44>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10e      	bne.n	800353e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2204      	movs	r2, #4
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f8f1 	bl	800371c <HAL_SPI_TransmitReceive>
 800353a:	4603      	mov	r3, r0
 800353c:	e0ea      	b.n	8003714 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_SPI_Receive+0x52>
 8003548:	2302      	movs	r3, #2
 800354a:	e0e3      	b.n	8003714 <HAL_SPI_Receive+0x21a>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003554:	f7fe ff2c 	bl	80023b0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d002      	beq.n	800356c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	75fb      	strb	r3, [r7, #23]
    goto error;
 800356a:	e0ca      	b.n	8003702 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Receive+0x7e>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800357c:	e0c1      	b.n	8003702 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2204      	movs	r2, #4
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c4:	d10f      	bne.n	80035e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d007      	beq.n	8003604 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d162      	bne.n	80036d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800360c:	e02e      	b.n	800366c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d115      	bne.n	8003648 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f103 020c 	add.w	r2, r3, #12
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003646:	e011      	b.n	800366c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003648:	f7fe feb2 	bl	80023b0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d803      	bhi.n	8003660 <HAL_SPI_Receive+0x166>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Receive+0x16c>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	75fb      	strb	r3, [r7, #23]
          goto error;
 800366a:	e04a      	b.n	8003702 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1cb      	bne.n	800360e <HAL_SPI_Receive+0x114>
 8003676:	e031      	b.n	80036dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d113      	bne.n	80036ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	b292      	uxth	r2, r2
 8003692:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ac:	e011      	b.n	80036d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ae:	f7fe fe7f 	bl	80023b0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d803      	bhi.n	80036c6 <HAL_SPI_Receive+0x1cc>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c4:	d102      	bne.n	80036cc <HAL_SPI_Receive+0x1d2>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036d0:	e017      	b.n	8003702 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1cd      	bne.n	8003678 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa45 	bl	8003b70 <SPI_EndRxTransaction>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
 80036fe:	e000      	b.n	8003702 <HAL_SPI_Receive+0x208>
  }

error :
 8003700:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800372a:	2301      	movs	r3, #1
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x26>
 800373e:	2302      	movs	r3, #2
 8003740:	e18a      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x33c>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800374a:	f7fe fe31 	bl	80023b0 <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003768:	2b01      	cmp	r3, #1
 800376a:	d00f      	beq.n	800378c <HAL_SPI_TransmitReceive+0x70>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003772:	d107      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x68>
 800377c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003780:	2b04      	cmp	r3, #4
 8003782:	d003      	beq.n	800378c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003784:	2302      	movs	r3, #2
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800378a:	e15b      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_SPI_TransmitReceive+0x82>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_SPI_TransmitReceive+0x82>
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037a4:	e14e      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2205      	movs	r2, #5
 80037b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	887a      	ldrh	r2, [r7, #2]
 80037e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d007      	beq.n	800380e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003816:	d178      	bne.n	800390a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x10a>
 8003820:	8b7b      	ldrh	r3, [r7, #26]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d166      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384a:	e053      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d11b      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x176>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x176>
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d113      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d119      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x1b8>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038d4:	f7fe fd6c 	bl	80023b0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d807      	bhi.n	80038f4 <HAL_SPI_TransmitReceive+0x1d8>
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ea:	d003      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038f2:	e0a7      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1a6      	bne.n	800384c <HAL_SPI_TransmitReceive+0x130>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1a1      	bne.n	800384c <HAL_SPI_TransmitReceive+0x130>
 8003908:	e07c      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x1fc>
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d16b      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393e:	e057      	b.n	80039f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d11c      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x26c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x26c>
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d114      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d119      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x2ae>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d014      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039c6:	2301      	movs	r3, #1
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039ca:	f7fe fcf1 	bl	80023b0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_TransmitReceive+0x2c6>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2cc>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039ee:	e029      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1a2      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x224>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d19d      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f917 	bl	8003c3c <SPI_EndRxTxTransaction>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a20:	e010      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	e000      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3730      	adds	r7, #48	; 0x30
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a70:	f7fe fc9e 	bl	80023b0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a80:	f7fe fc96 	bl	80023b0 <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a96:	e054      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9e:	d050      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa0:	f7fe fc86 	bl	80023b0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d902      	bls.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13d      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ace:	d111      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad8:	d004      	beq.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d107      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d10f      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e017      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d19b      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000001c 	.word	0x2000001c

08003b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b84:	d111      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d004      	beq.n	8003b9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d107      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d12a      	bne.n	8003c0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d012      	beq.n	8003be4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ff49 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02d      	beq.n	8003c30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e026      	b.n	8003c32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2101      	movs	r1, #1
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ff36 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01a      	beq.n	8003c30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e013      	b.n	8003c32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2101      	movs	r1, #1
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff ff23 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <SPI_EndRxTxTransaction+0x7c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <SPI_EndRxTxTransaction+0x80>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0d5b      	lsrs	r3, r3, #21
 8003c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c66:	d112      	bne.n	8003c8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fef4 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e00f      	b.n	8003cae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b80      	cmp	r3, #128	; 0x80
 8003ca6:	d0f2      	beq.n	8003c8e <SPI_EndRxTxTransaction+0x52>
 8003ca8:	e000      	b.n	8003cac <SPI_EndRxTxTransaction+0x70>
        break;
 8003caa:	bf00      	nop
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000001c 	.word	0x2000001c
 8003cbc:	165e9f81 	.word	0x165e9f81

08003cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e041      	b.n	8003d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fcbc 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 f8f2 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_ConfigClockSource+0x18>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e0b3      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x180>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d03e      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xd0>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	f200 8087 	bhi.w	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	f000 8085 	beq.w	8003eca <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d87f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003dc6:	2b70      	cmp	r3, #112	; 0x70
 8003dc8:	d01a      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xa2>
 8003dca:	2b70      	cmp	r3, #112	; 0x70
 8003dcc:	d87b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	d050      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0x116>
 8003dd2:	2b60      	cmp	r3, #96	; 0x60
 8003dd4:	d877      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003dd6:	2b50      	cmp	r3, #80	; 0x50
 8003dd8:	d03c      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xf6>
 8003dda:	2b50      	cmp	r3, #80	; 0x50
 8003ddc:	d873      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d058      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x136>
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d86f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d064      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x156>
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d86b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d060      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x156>
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d867      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05c      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x156>
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d05a      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dfe:	e062      	b.n	8003ec6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f000 f984 	bl	800411c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e04e      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f000 f96d 	bl	800411c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e50:	609a      	str	r2, [r3, #8]
      break;
 8003e52:	e03b      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f000 f8e1 	bl	8004028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2150      	movs	r1, #80	; 0x50
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f93a 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003e72:	e02b      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f000 f900 	bl	8004086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2160      	movs	r1, #96	; 0x60
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f92a 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e01b      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f000 f8c1 	bl	8004028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f91a 	bl	80040e6 <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e00b      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f911 	bl	80040e6 <TIM_ITRx_SetConfig>
        break;
 8003ec4:	e002      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a40      	ldr	r2, [pc, #256]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d00f      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <TIM_Base_SetConfig+0x118>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <TIM_Base_SetConfig+0x11c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3b      	ldr	r2, [pc, #236]	; (8004008 <TIM_Base_SetConfig+0x120>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3a      	ldr	r2, [pc, #232]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d108      	bne.n	8003f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d02b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d027      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <TIM_Base_SetConfig+0x118>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d023      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <TIM_Base_SetConfig+0x11c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01f      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <TIM_Base_SetConfig+0x120>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a29      	ldr	r2, [pc, #164]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d017      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <TIM_Base_SetConfig+0x128>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a27      	ldr	r2, [pc, #156]	; (8004014 <TIM_Base_SetConfig+0x12c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <TIM_Base_SetConfig+0x130>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a25      	ldr	r2, [pc, #148]	; (800401c <TIM_Base_SetConfig+0x134>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a24      	ldr	r2, [pc, #144]	; (8004020 <TIM_Base_SetConfig+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <TIM_Base_SetConfig+0x13c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0xf8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40010400 	.word	0x40010400
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	40001800 	.word	0x40001800
 8004020:	40001c00 	.word	0x40001c00
 8004024:	40002000 	.word	0x40002000

08004028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 030a 	bic.w	r3, r3, #10
 8004064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0210 	bic.w	r2, r3, #16
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	031b      	lsls	r3, r3, #12
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	f043 0307 	orr.w	r3, r3, #7
 8004108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	431a      	orrs	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e05a      	b.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d01d      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10c      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40010400 	.word	0x40010400
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <__errno>:
 8004254:	4b01      	ldr	r3, [pc, #4]	; (800425c <__errno+0x8>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000054 	.word	0x20000054

08004260 <__libc_init_array>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4d0d      	ldr	r5, [pc, #52]	; (8004298 <__libc_init_array+0x38>)
 8004264:	4c0d      	ldr	r4, [pc, #52]	; (800429c <__libc_init_array+0x3c>)
 8004266:	1b64      	subs	r4, r4, r5
 8004268:	10a4      	asrs	r4, r4, #2
 800426a:	2600      	movs	r6, #0
 800426c:	42a6      	cmp	r6, r4
 800426e:	d109      	bne.n	8004284 <__libc_init_array+0x24>
 8004270:	4d0b      	ldr	r5, [pc, #44]	; (80042a0 <__libc_init_array+0x40>)
 8004272:	4c0c      	ldr	r4, [pc, #48]	; (80042a4 <__libc_init_array+0x44>)
 8004274:	f001 f9be 	bl	80055f4 <_init>
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	2600      	movs	r6, #0
 800427e:	42a6      	cmp	r6, r4
 8004280:	d105      	bne.n	800428e <__libc_init_array+0x2e>
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	f855 3b04 	ldr.w	r3, [r5], #4
 8004288:	4798      	blx	r3
 800428a:	3601      	adds	r6, #1
 800428c:	e7ee      	b.n	800426c <__libc_init_array+0xc>
 800428e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004292:	4798      	blx	r3
 8004294:	3601      	adds	r6, #1
 8004296:	e7f2      	b.n	800427e <__libc_init_array+0x1e>
 8004298:	0800586c 	.word	0x0800586c
 800429c:	0800586c 	.word	0x0800586c
 80042a0:	0800586c 	.word	0x0800586c
 80042a4:	08005870 	.word	0x08005870

080042a8 <memset>:
 80042a8:	4402      	add	r2, r0
 80042aa:	4603      	mov	r3, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <iprintf>:
 80042b8:	b40f      	push	{r0, r1, r2, r3}
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <iprintf+0x2c>)
 80042bc:	b513      	push	{r0, r1, r4, lr}
 80042be:	681c      	ldr	r4, [r3, #0]
 80042c0:	b124      	cbz	r4, 80042cc <iprintf+0x14>
 80042c2:	69a3      	ldr	r3, [r4, #24]
 80042c4:	b913      	cbnz	r3, 80042cc <iprintf+0x14>
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 fa7e 	bl	80047c8 <__sinit>
 80042cc:	ab05      	add	r3, sp, #20
 80042ce:	9a04      	ldr	r2, [sp, #16]
 80042d0:	68a1      	ldr	r1, [r4, #8]
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 fdab 	bl	8004e30 <_vfiprintf_r>
 80042da:	b002      	add	sp, #8
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	b004      	add	sp, #16
 80042e2:	4770      	bx	lr
 80042e4:	20000054 	.word	0x20000054

080042e8 <_puts_r>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	460e      	mov	r6, r1
 80042ec:	4605      	mov	r5, r0
 80042ee:	b118      	cbz	r0, 80042f8 <_puts_r+0x10>
 80042f0:	6983      	ldr	r3, [r0, #24]
 80042f2:	b90b      	cbnz	r3, 80042f8 <_puts_r+0x10>
 80042f4:	f000 fa68 	bl	80047c8 <__sinit>
 80042f8:	69ab      	ldr	r3, [r5, #24]
 80042fa:	68ac      	ldr	r4, [r5, #8]
 80042fc:	b913      	cbnz	r3, 8004304 <_puts_r+0x1c>
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 fa62 	bl	80047c8 <__sinit>
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <_puts_r+0xd0>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d120      	bne.n	800434c <_puts_r+0x64>
 800430a:	686c      	ldr	r4, [r5, #4]
 800430c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800430e:	07db      	lsls	r3, r3, #31
 8004310:	d405      	bmi.n	800431e <_puts_r+0x36>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	0598      	lsls	r0, r3, #22
 8004316:	d402      	bmi.n	800431e <_puts_r+0x36>
 8004318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431a:	f000 faf3 	bl	8004904 <__retarget_lock_acquire_recursive>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	0719      	lsls	r1, r3, #28
 8004322:	d51d      	bpl.n	8004360 <_puts_r+0x78>
 8004324:	6923      	ldr	r3, [r4, #16]
 8004326:	b1db      	cbz	r3, 8004360 <_puts_r+0x78>
 8004328:	3e01      	subs	r6, #1
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004330:	3b01      	subs	r3, #1
 8004332:	60a3      	str	r3, [r4, #8]
 8004334:	bb39      	cbnz	r1, 8004386 <_puts_r+0x9e>
 8004336:	2b00      	cmp	r3, #0
 8004338:	da38      	bge.n	80043ac <_puts_r+0xc4>
 800433a:	4622      	mov	r2, r4
 800433c:	210a      	movs	r1, #10
 800433e:	4628      	mov	r0, r5
 8004340:	f000 f868 	bl	8004414 <__swbuf_r>
 8004344:	3001      	adds	r0, #1
 8004346:	d011      	beq.n	800436c <_puts_r+0x84>
 8004348:	250a      	movs	r5, #10
 800434a:	e011      	b.n	8004370 <_puts_r+0x88>
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <_puts_r+0xd4>)
 800434e:	429c      	cmp	r4, r3
 8004350:	d101      	bne.n	8004356 <_puts_r+0x6e>
 8004352:	68ac      	ldr	r4, [r5, #8]
 8004354:	e7da      	b.n	800430c <_puts_r+0x24>
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <_puts_r+0xd8>)
 8004358:	429c      	cmp	r4, r3
 800435a:	bf08      	it	eq
 800435c:	68ec      	ldreq	r4, [r5, #12]
 800435e:	e7d5      	b.n	800430c <_puts_r+0x24>
 8004360:	4621      	mov	r1, r4
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f8a8 	bl	80044b8 <__swsetup_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0dd      	beq.n	8004328 <_puts_r+0x40>
 800436c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004372:	07da      	lsls	r2, r3, #31
 8004374:	d405      	bmi.n	8004382 <_puts_r+0x9a>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	059b      	lsls	r3, r3, #22
 800437a:	d402      	bmi.n	8004382 <_puts_r+0x9a>
 800437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800437e:	f000 fac2 	bl	8004906 <__retarget_lock_release_recursive>
 8004382:	4628      	mov	r0, r5
 8004384:	bd70      	pop	{r4, r5, r6, pc}
 8004386:	2b00      	cmp	r3, #0
 8004388:	da04      	bge.n	8004394 <_puts_r+0xac>
 800438a:	69a2      	ldr	r2, [r4, #24]
 800438c:	429a      	cmp	r2, r3
 800438e:	dc06      	bgt.n	800439e <_puts_r+0xb6>
 8004390:	290a      	cmp	r1, #10
 8004392:	d004      	beq.n	800439e <_puts_r+0xb6>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	6022      	str	r2, [r4, #0]
 800439a:	7019      	strb	r1, [r3, #0]
 800439c:	e7c5      	b.n	800432a <_puts_r+0x42>
 800439e:	4622      	mov	r2, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f837 	bl	8004414 <__swbuf_r>
 80043a6:	3001      	adds	r0, #1
 80043a8:	d1bf      	bne.n	800432a <_puts_r+0x42>
 80043aa:	e7df      	b.n	800436c <_puts_r+0x84>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	250a      	movs	r5, #10
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	6022      	str	r2, [r4, #0]
 80043b4:	701d      	strb	r5, [r3, #0]
 80043b6:	e7db      	b.n	8004370 <_puts_r+0x88>
 80043b8:	080057f0 	.word	0x080057f0
 80043bc:	08005810 	.word	0x08005810
 80043c0:	080057d0 	.word	0x080057d0

080043c4 <puts>:
 80043c4:	4b02      	ldr	r3, [pc, #8]	; (80043d0 <puts+0xc>)
 80043c6:	4601      	mov	r1, r0
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	f7ff bf8d 	b.w	80042e8 <_puts_r>
 80043ce:	bf00      	nop
 80043d0:	20000054 	.word	0x20000054

080043d4 <siprintf>:
 80043d4:	b40e      	push	{r1, r2, r3}
 80043d6:	b500      	push	{lr}
 80043d8:	b09c      	sub	sp, #112	; 0x70
 80043da:	ab1d      	add	r3, sp, #116	; 0x74
 80043dc:	9002      	str	r0, [sp, #8]
 80043de:	9006      	str	r0, [sp, #24]
 80043e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043e4:	4809      	ldr	r0, [pc, #36]	; (800440c <siprintf+0x38>)
 80043e6:	9107      	str	r1, [sp, #28]
 80043e8:	9104      	str	r1, [sp, #16]
 80043ea:	4909      	ldr	r1, [pc, #36]	; (8004410 <siprintf+0x3c>)
 80043ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	6800      	ldr	r0, [r0, #0]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	a902      	add	r1, sp, #8
 80043f8:	f000 fbf0 	bl	8004bdc <_svfiprintf_r>
 80043fc:	9b02      	ldr	r3, [sp, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	b01c      	add	sp, #112	; 0x70
 8004404:	f85d eb04 	ldr.w	lr, [sp], #4
 8004408:	b003      	add	sp, #12
 800440a:	4770      	bx	lr
 800440c:	20000054 	.word	0x20000054
 8004410:	ffff0208 	.word	0xffff0208

08004414 <__swbuf_r>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	460e      	mov	r6, r1
 8004418:	4614      	mov	r4, r2
 800441a:	4605      	mov	r5, r0
 800441c:	b118      	cbz	r0, 8004426 <__swbuf_r+0x12>
 800441e:	6983      	ldr	r3, [r0, #24]
 8004420:	b90b      	cbnz	r3, 8004426 <__swbuf_r+0x12>
 8004422:	f000 f9d1 	bl	80047c8 <__sinit>
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <__swbuf_r+0x98>)
 8004428:	429c      	cmp	r4, r3
 800442a:	d12b      	bne.n	8004484 <__swbuf_r+0x70>
 800442c:	686c      	ldr	r4, [r5, #4]
 800442e:	69a3      	ldr	r3, [r4, #24]
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	071a      	lsls	r2, r3, #28
 8004436:	d52f      	bpl.n	8004498 <__swbuf_r+0x84>
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	b36b      	cbz	r3, 8004498 <__swbuf_r+0x84>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	1ac0      	subs	r0, r0, r3
 8004442:	6963      	ldr	r3, [r4, #20]
 8004444:	b2f6      	uxtb	r6, r6
 8004446:	4283      	cmp	r3, r0
 8004448:	4637      	mov	r7, r6
 800444a:	dc04      	bgt.n	8004456 <__swbuf_r+0x42>
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f926 	bl	80046a0 <_fflush_r>
 8004454:	bb30      	cbnz	r0, 80044a4 <__swbuf_r+0x90>
 8004456:	68a3      	ldr	r3, [r4, #8]
 8004458:	3b01      	subs	r3, #1
 800445a:	60a3      	str	r3, [r4, #8]
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	701e      	strb	r6, [r3, #0]
 8004464:	6963      	ldr	r3, [r4, #20]
 8004466:	3001      	adds	r0, #1
 8004468:	4283      	cmp	r3, r0
 800446a:	d004      	beq.n	8004476 <__swbuf_r+0x62>
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	07db      	lsls	r3, r3, #31
 8004470:	d506      	bpl.n	8004480 <__swbuf_r+0x6c>
 8004472:	2e0a      	cmp	r6, #10
 8004474:	d104      	bne.n	8004480 <__swbuf_r+0x6c>
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f911 	bl	80046a0 <_fflush_r>
 800447e:	b988      	cbnz	r0, 80044a4 <__swbuf_r+0x90>
 8004480:	4638      	mov	r0, r7
 8004482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <__swbuf_r+0x9c>)
 8004486:	429c      	cmp	r4, r3
 8004488:	d101      	bne.n	800448e <__swbuf_r+0x7a>
 800448a:	68ac      	ldr	r4, [r5, #8]
 800448c:	e7cf      	b.n	800442e <__swbuf_r+0x1a>
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <__swbuf_r+0xa0>)
 8004490:	429c      	cmp	r4, r3
 8004492:	bf08      	it	eq
 8004494:	68ec      	ldreq	r4, [r5, #12]
 8004496:	e7ca      	b.n	800442e <__swbuf_r+0x1a>
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f80c 	bl	80044b8 <__swsetup_r>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d0cb      	beq.n	800443c <__swbuf_r+0x28>
 80044a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044a8:	e7ea      	b.n	8004480 <__swbuf_r+0x6c>
 80044aa:	bf00      	nop
 80044ac:	080057f0 	.word	0x080057f0
 80044b0:	08005810 	.word	0x08005810
 80044b4:	080057d0 	.word	0x080057d0

080044b8 <__swsetup_r>:
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <__swsetup_r+0xcc>)
 80044ba:	b570      	push	{r4, r5, r6, lr}
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	4606      	mov	r6, r0
 80044c0:	460c      	mov	r4, r1
 80044c2:	b125      	cbz	r5, 80044ce <__swsetup_r+0x16>
 80044c4:	69ab      	ldr	r3, [r5, #24]
 80044c6:	b913      	cbnz	r3, 80044ce <__swsetup_r+0x16>
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 f97d 	bl	80047c8 <__sinit>
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <__swsetup_r+0xd0>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d10f      	bne.n	80044f4 <__swsetup_r+0x3c>
 80044d4:	686c      	ldr	r4, [r5, #4]
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d42c      	bmi.n	800453a <__swsetup_r+0x82>
 80044e0:	06dd      	lsls	r5, r3, #27
 80044e2:	d411      	bmi.n	8004508 <__swsetup_r+0x50>
 80044e4:	2309      	movs	r3, #9
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f2:	e03e      	b.n	8004572 <__swsetup_r+0xba>
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <__swsetup_r+0xd4>)
 80044f6:	429c      	cmp	r4, r3
 80044f8:	d101      	bne.n	80044fe <__swsetup_r+0x46>
 80044fa:	68ac      	ldr	r4, [r5, #8]
 80044fc:	e7eb      	b.n	80044d6 <__swsetup_r+0x1e>
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <__swsetup_r+0xd8>)
 8004500:	429c      	cmp	r4, r3
 8004502:	bf08      	it	eq
 8004504:	68ec      	ldreq	r4, [r5, #12]
 8004506:	e7e6      	b.n	80044d6 <__swsetup_r+0x1e>
 8004508:	0758      	lsls	r0, r3, #29
 800450a:	d512      	bpl.n	8004532 <__swsetup_r+0x7a>
 800450c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800450e:	b141      	cbz	r1, 8004522 <__swsetup_r+0x6a>
 8004510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004514:	4299      	cmp	r1, r3
 8004516:	d002      	beq.n	800451e <__swsetup_r+0x66>
 8004518:	4630      	mov	r0, r6
 800451a:	f000 fa59 	bl	80049d0 <_free_r>
 800451e:	2300      	movs	r3, #0
 8004520:	6363      	str	r3, [r4, #52]	; 0x34
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	2300      	movs	r3, #0
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	b94b      	cbnz	r3, 8004552 <__swsetup_r+0x9a>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d003      	beq.n	8004552 <__swsetup_r+0x9a>
 800454a:	4621      	mov	r1, r4
 800454c:	4630      	mov	r0, r6
 800454e:	f000 f9ff 	bl	8004950 <__smakebuf_r>
 8004552:	89a0      	ldrh	r0, [r4, #12]
 8004554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004558:	f010 0301 	ands.w	r3, r0, #1
 800455c:	d00a      	beq.n	8004574 <__swsetup_r+0xbc>
 800455e:	2300      	movs	r3, #0
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6963      	ldr	r3, [r4, #20]
 8004564:	425b      	negs	r3, r3
 8004566:	61a3      	str	r3, [r4, #24]
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	b943      	cbnz	r3, 800457e <__swsetup_r+0xc6>
 800456c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004570:	d1ba      	bne.n	80044e8 <__swsetup_r+0x30>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	0781      	lsls	r1, r0, #30
 8004576:	bf58      	it	pl
 8004578:	6963      	ldrpl	r3, [r4, #20]
 800457a:	60a3      	str	r3, [r4, #8]
 800457c:	e7f4      	b.n	8004568 <__swsetup_r+0xb0>
 800457e:	2000      	movs	r0, #0
 8004580:	e7f7      	b.n	8004572 <__swsetup_r+0xba>
 8004582:	bf00      	nop
 8004584:	20000054 	.word	0x20000054
 8004588:	080057f0 	.word	0x080057f0
 800458c:	08005810 	.word	0x08005810
 8004590:	080057d0 	.word	0x080057d0

08004594 <__sflush_r>:
 8004594:	898a      	ldrh	r2, [r1, #12]
 8004596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459a:	4605      	mov	r5, r0
 800459c:	0710      	lsls	r0, r2, #28
 800459e:	460c      	mov	r4, r1
 80045a0:	d458      	bmi.n	8004654 <__sflush_r+0xc0>
 80045a2:	684b      	ldr	r3, [r1, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dc05      	bgt.n	80045b4 <__sflush_r+0x20>
 80045a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dc02      	bgt.n	80045b4 <__sflush_r+0x20>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	d0f9      	beq.n	80045ae <__sflush_r+0x1a>
 80045ba:	2300      	movs	r3, #0
 80045bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045c0:	682f      	ldr	r7, [r5, #0]
 80045c2:	602b      	str	r3, [r5, #0]
 80045c4:	d032      	beq.n	800462c <__sflush_r+0x98>
 80045c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	075a      	lsls	r2, r3, #29
 80045cc:	d505      	bpl.n	80045da <__sflush_r+0x46>
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	1ac0      	subs	r0, r0, r3
 80045d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045d4:	b10b      	cbz	r3, 80045da <__sflush_r+0x46>
 80045d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045d8:	1ac0      	subs	r0, r0, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	4602      	mov	r2, r0
 80045de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e0:	6a21      	ldr	r1, [r4, #32]
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b0      	blx	r6
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	d106      	bne.n	80045fa <__sflush_r+0x66>
 80045ec:	6829      	ldr	r1, [r5, #0]
 80045ee:	291d      	cmp	r1, #29
 80045f0:	d82c      	bhi.n	800464c <__sflush_r+0xb8>
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <__sflush_r+0x108>)
 80045f4:	40ca      	lsrs	r2, r1
 80045f6:	07d6      	lsls	r6, r2, #31
 80045f8:	d528      	bpl.n	800464c <__sflush_r+0xb8>
 80045fa:	2200      	movs	r2, #0
 80045fc:	6062      	str	r2, [r4, #4]
 80045fe:	04d9      	lsls	r1, r3, #19
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	6022      	str	r2, [r4, #0]
 8004604:	d504      	bpl.n	8004610 <__sflush_r+0x7c>
 8004606:	1c42      	adds	r2, r0, #1
 8004608:	d101      	bne.n	800460e <__sflush_r+0x7a>
 800460a:	682b      	ldr	r3, [r5, #0]
 800460c:	b903      	cbnz	r3, 8004610 <__sflush_r+0x7c>
 800460e:	6560      	str	r0, [r4, #84]	; 0x54
 8004610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004612:	602f      	str	r7, [r5, #0]
 8004614:	2900      	cmp	r1, #0
 8004616:	d0ca      	beq.n	80045ae <__sflush_r+0x1a>
 8004618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800461c:	4299      	cmp	r1, r3
 800461e:	d002      	beq.n	8004626 <__sflush_r+0x92>
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f9d5 	bl	80049d0 <_free_r>
 8004626:	2000      	movs	r0, #0
 8004628:	6360      	str	r0, [r4, #52]	; 0x34
 800462a:	e7c1      	b.n	80045b0 <__sflush_r+0x1c>
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	2301      	movs	r3, #1
 8004630:	4628      	mov	r0, r5
 8004632:	47b0      	blx	r6
 8004634:	1c41      	adds	r1, r0, #1
 8004636:	d1c7      	bne.n	80045c8 <__sflush_r+0x34>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c4      	beq.n	80045c8 <__sflush_r+0x34>
 800463e:	2b1d      	cmp	r3, #29
 8004640:	d001      	beq.n	8004646 <__sflush_r+0xb2>
 8004642:	2b16      	cmp	r3, #22
 8004644:	d101      	bne.n	800464a <__sflush_r+0xb6>
 8004646:	602f      	str	r7, [r5, #0]
 8004648:	e7b1      	b.n	80045ae <__sflush_r+0x1a>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004650:	81a3      	strh	r3, [r4, #12]
 8004652:	e7ad      	b.n	80045b0 <__sflush_r+0x1c>
 8004654:	690f      	ldr	r7, [r1, #16]
 8004656:	2f00      	cmp	r7, #0
 8004658:	d0a9      	beq.n	80045ae <__sflush_r+0x1a>
 800465a:	0793      	lsls	r3, r2, #30
 800465c:	680e      	ldr	r6, [r1, #0]
 800465e:	bf08      	it	eq
 8004660:	694b      	ldreq	r3, [r1, #20]
 8004662:	600f      	str	r7, [r1, #0]
 8004664:	bf18      	it	ne
 8004666:	2300      	movne	r3, #0
 8004668:	eba6 0807 	sub.w	r8, r6, r7
 800466c:	608b      	str	r3, [r1, #8]
 800466e:	f1b8 0f00 	cmp.w	r8, #0
 8004672:	dd9c      	ble.n	80045ae <__sflush_r+0x1a>
 8004674:	6a21      	ldr	r1, [r4, #32]
 8004676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004678:	4643      	mov	r3, r8
 800467a:	463a      	mov	r2, r7
 800467c:	4628      	mov	r0, r5
 800467e:	47b0      	blx	r6
 8004680:	2800      	cmp	r0, #0
 8004682:	dc06      	bgt.n	8004692 <__sflush_r+0xfe>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004690:	e78e      	b.n	80045b0 <__sflush_r+0x1c>
 8004692:	4407      	add	r7, r0
 8004694:	eba8 0800 	sub.w	r8, r8, r0
 8004698:	e7e9      	b.n	800466e <__sflush_r+0xda>
 800469a:	bf00      	nop
 800469c:	20400001 	.word	0x20400001

080046a0 <_fflush_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	690b      	ldr	r3, [r1, #16]
 80046a4:	4605      	mov	r5, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	b913      	cbnz	r3, 80046b0 <_fflush_r+0x10>
 80046aa:	2500      	movs	r5, #0
 80046ac:	4628      	mov	r0, r5
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	b118      	cbz	r0, 80046ba <_fflush_r+0x1a>
 80046b2:	6983      	ldr	r3, [r0, #24]
 80046b4:	b90b      	cbnz	r3, 80046ba <_fflush_r+0x1a>
 80046b6:	f000 f887 	bl	80047c8 <__sinit>
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <_fflush_r+0x6c>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	d11b      	bne.n	80046f8 <_fflush_r+0x58>
 80046c0:	686c      	ldr	r4, [r5, #4]
 80046c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ef      	beq.n	80046aa <_fflush_r+0xa>
 80046ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046cc:	07d0      	lsls	r0, r2, #31
 80046ce:	d404      	bmi.n	80046da <_fflush_r+0x3a>
 80046d0:	0599      	lsls	r1, r3, #22
 80046d2:	d402      	bmi.n	80046da <_fflush_r+0x3a>
 80046d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046d6:	f000 f915 	bl	8004904 <__retarget_lock_acquire_recursive>
 80046da:	4628      	mov	r0, r5
 80046dc:	4621      	mov	r1, r4
 80046de:	f7ff ff59 	bl	8004594 <__sflush_r>
 80046e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e4:	07da      	lsls	r2, r3, #31
 80046e6:	4605      	mov	r5, r0
 80046e8:	d4e0      	bmi.n	80046ac <_fflush_r+0xc>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	059b      	lsls	r3, r3, #22
 80046ee:	d4dd      	bmi.n	80046ac <_fflush_r+0xc>
 80046f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046f2:	f000 f908 	bl	8004906 <__retarget_lock_release_recursive>
 80046f6:	e7d9      	b.n	80046ac <_fflush_r+0xc>
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <_fflush_r+0x70>)
 80046fa:	429c      	cmp	r4, r3
 80046fc:	d101      	bne.n	8004702 <_fflush_r+0x62>
 80046fe:	68ac      	ldr	r4, [r5, #8]
 8004700:	e7df      	b.n	80046c2 <_fflush_r+0x22>
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <_fflush_r+0x74>)
 8004704:	429c      	cmp	r4, r3
 8004706:	bf08      	it	eq
 8004708:	68ec      	ldreq	r4, [r5, #12]
 800470a:	e7da      	b.n	80046c2 <_fflush_r+0x22>
 800470c:	080057f0 	.word	0x080057f0
 8004710:	08005810 	.word	0x08005810
 8004714:	080057d0 	.word	0x080057d0

08004718 <std>:
 8004718:	2300      	movs	r3, #0
 800471a:	b510      	push	{r4, lr}
 800471c:	4604      	mov	r4, r0
 800471e:	e9c0 3300 	strd	r3, r3, [r0]
 8004722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004726:	6083      	str	r3, [r0, #8]
 8004728:	8181      	strh	r1, [r0, #12]
 800472a:	6643      	str	r3, [r0, #100]	; 0x64
 800472c:	81c2      	strh	r2, [r0, #14]
 800472e:	6183      	str	r3, [r0, #24]
 8004730:	4619      	mov	r1, r3
 8004732:	2208      	movs	r2, #8
 8004734:	305c      	adds	r0, #92	; 0x5c
 8004736:	f7ff fdb7 	bl	80042a8 <memset>
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <std+0x38>)
 800473c:	6263      	str	r3, [r4, #36]	; 0x24
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <std+0x3c>)
 8004740:	62a3      	str	r3, [r4, #40]	; 0x28
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <std+0x40>)
 8004744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <std+0x44>)
 8004748:	6224      	str	r4, [r4, #32]
 800474a:	6323      	str	r3, [r4, #48]	; 0x30
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	080053d9 	.word	0x080053d9
 8004754:	080053fb 	.word	0x080053fb
 8004758:	08005433 	.word	0x08005433
 800475c:	08005457 	.word	0x08005457

08004760 <_cleanup_r>:
 8004760:	4901      	ldr	r1, [pc, #4]	; (8004768 <_cleanup_r+0x8>)
 8004762:	f000 b8af 	b.w	80048c4 <_fwalk_reent>
 8004766:	bf00      	nop
 8004768:	080046a1 	.word	0x080046a1

0800476c <__sfmoreglue>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	1e4a      	subs	r2, r1, #1
 8004770:	2568      	movs	r5, #104	; 0x68
 8004772:	4355      	muls	r5, r2
 8004774:	460e      	mov	r6, r1
 8004776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800477a:	f000 f979 	bl	8004a70 <_malloc_r>
 800477e:	4604      	mov	r4, r0
 8004780:	b140      	cbz	r0, 8004794 <__sfmoreglue+0x28>
 8004782:	2100      	movs	r1, #0
 8004784:	e9c0 1600 	strd	r1, r6, [r0]
 8004788:	300c      	adds	r0, #12
 800478a:	60a0      	str	r0, [r4, #8]
 800478c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004790:	f7ff fd8a 	bl	80042a8 <memset>
 8004794:	4620      	mov	r0, r4
 8004796:	bd70      	pop	{r4, r5, r6, pc}

08004798 <__sfp_lock_acquire>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__sfp_lock_acquire+0x8>)
 800479a:	f000 b8b3 	b.w	8004904 <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	20000a38 	.word	0x20000a38

080047a4 <__sfp_lock_release>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__sfp_lock_release+0x8>)
 80047a6:	f000 b8ae 	b.w	8004906 <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	20000a38 	.word	0x20000a38

080047b0 <__sinit_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sinit_lock_acquire+0x8>)
 80047b2:	f000 b8a7 	b.w	8004904 <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	20000a33 	.word	0x20000a33

080047bc <__sinit_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sinit_lock_release+0x8>)
 80047be:	f000 b8a2 	b.w	8004906 <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000a33 	.word	0x20000a33

080047c8 <__sinit>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4604      	mov	r4, r0
 80047cc:	f7ff fff0 	bl	80047b0 <__sinit_lock_acquire>
 80047d0:	69a3      	ldr	r3, [r4, #24]
 80047d2:	b11b      	cbz	r3, 80047dc <__sinit+0x14>
 80047d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d8:	f7ff bff0 	b.w	80047bc <__sinit_lock_release>
 80047dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047e0:	6523      	str	r3, [r4, #80]	; 0x50
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <__sinit+0x68>)
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <__sinit+0x6c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	bf04      	itt	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	61a3      	streq	r3, [r4, #24]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f820 	bl	8004838 <__sfp>
 80047f8:	6060      	str	r0, [r4, #4]
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f81c 	bl	8004838 <__sfp>
 8004800:	60a0      	str	r0, [r4, #8]
 8004802:	4620      	mov	r0, r4
 8004804:	f000 f818 	bl	8004838 <__sfp>
 8004808:	2200      	movs	r2, #0
 800480a:	60e0      	str	r0, [r4, #12]
 800480c:	2104      	movs	r1, #4
 800480e:	6860      	ldr	r0, [r4, #4]
 8004810:	f7ff ff82 	bl	8004718 <std>
 8004814:	68a0      	ldr	r0, [r4, #8]
 8004816:	2201      	movs	r2, #1
 8004818:	2109      	movs	r1, #9
 800481a:	f7ff ff7d 	bl	8004718 <std>
 800481e:	68e0      	ldr	r0, [r4, #12]
 8004820:	2202      	movs	r2, #2
 8004822:	2112      	movs	r1, #18
 8004824:	f7ff ff78 	bl	8004718 <std>
 8004828:	2301      	movs	r3, #1
 800482a:	61a3      	str	r3, [r4, #24]
 800482c:	e7d2      	b.n	80047d4 <__sinit+0xc>
 800482e:	bf00      	nop
 8004830:	080057cc 	.word	0x080057cc
 8004834:	08004761 	.word	0x08004761

08004838 <__sfp>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	4607      	mov	r7, r0
 800483c:	f7ff ffac 	bl	8004798 <__sfp_lock_acquire>
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <__sfp+0x84>)
 8004842:	681e      	ldr	r6, [r3, #0]
 8004844:	69b3      	ldr	r3, [r6, #24]
 8004846:	b913      	cbnz	r3, 800484e <__sfp+0x16>
 8004848:	4630      	mov	r0, r6
 800484a:	f7ff ffbd 	bl	80047c8 <__sinit>
 800484e:	3648      	adds	r6, #72	; 0x48
 8004850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004854:	3b01      	subs	r3, #1
 8004856:	d503      	bpl.n	8004860 <__sfp+0x28>
 8004858:	6833      	ldr	r3, [r6, #0]
 800485a:	b30b      	cbz	r3, 80048a0 <__sfp+0x68>
 800485c:	6836      	ldr	r6, [r6, #0]
 800485e:	e7f7      	b.n	8004850 <__sfp+0x18>
 8004860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004864:	b9d5      	cbnz	r5, 800489c <__sfp+0x64>
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <__sfp+0x88>)
 8004868:	60e3      	str	r3, [r4, #12]
 800486a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800486e:	6665      	str	r5, [r4, #100]	; 0x64
 8004870:	f000 f847 	bl	8004902 <__retarget_lock_init_recursive>
 8004874:	f7ff ff96 	bl	80047a4 <__sfp_lock_release>
 8004878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800487c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004880:	6025      	str	r5, [r4, #0]
 8004882:	61a5      	str	r5, [r4, #24]
 8004884:	2208      	movs	r2, #8
 8004886:	4629      	mov	r1, r5
 8004888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800488c:	f7ff fd0c 	bl	80042a8 <memset>
 8004890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004898:	4620      	mov	r0, r4
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	3468      	adds	r4, #104	; 0x68
 800489e:	e7d9      	b.n	8004854 <__sfp+0x1c>
 80048a0:	2104      	movs	r1, #4
 80048a2:	4638      	mov	r0, r7
 80048a4:	f7ff ff62 	bl	800476c <__sfmoreglue>
 80048a8:	4604      	mov	r4, r0
 80048aa:	6030      	str	r0, [r6, #0]
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d1d5      	bne.n	800485c <__sfp+0x24>
 80048b0:	f7ff ff78 	bl	80047a4 <__sfp_lock_release>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	e7ee      	b.n	8004898 <__sfp+0x60>
 80048ba:	bf00      	nop
 80048bc:	080057cc 	.word	0x080057cc
 80048c0:	ffff0001 	.word	0xffff0001

080048c4 <_fwalk_reent>:
 80048c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c8:	4606      	mov	r6, r0
 80048ca:	4688      	mov	r8, r1
 80048cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048d0:	2700      	movs	r7, #0
 80048d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048d6:	f1b9 0901 	subs.w	r9, r9, #1
 80048da:	d505      	bpl.n	80048e8 <_fwalk_reent+0x24>
 80048dc:	6824      	ldr	r4, [r4, #0]
 80048de:	2c00      	cmp	r4, #0
 80048e0:	d1f7      	bne.n	80048d2 <_fwalk_reent+0xe>
 80048e2:	4638      	mov	r0, r7
 80048e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e8:	89ab      	ldrh	r3, [r5, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d907      	bls.n	80048fe <_fwalk_reent+0x3a>
 80048ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048f2:	3301      	adds	r3, #1
 80048f4:	d003      	beq.n	80048fe <_fwalk_reent+0x3a>
 80048f6:	4629      	mov	r1, r5
 80048f8:	4630      	mov	r0, r6
 80048fa:	47c0      	blx	r8
 80048fc:	4307      	orrs	r7, r0
 80048fe:	3568      	adds	r5, #104	; 0x68
 8004900:	e7e9      	b.n	80048d6 <_fwalk_reent+0x12>

08004902 <__retarget_lock_init_recursive>:
 8004902:	4770      	bx	lr

08004904 <__retarget_lock_acquire_recursive>:
 8004904:	4770      	bx	lr

08004906 <__retarget_lock_release_recursive>:
 8004906:	4770      	bx	lr

08004908 <__swhatbuf_r>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	460e      	mov	r6, r1
 800490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004910:	2900      	cmp	r1, #0
 8004912:	b096      	sub	sp, #88	; 0x58
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	da07      	bge.n	800492a <__swhatbuf_r+0x22>
 800491a:	2300      	movs	r3, #0
 800491c:	602b      	str	r3, [r5, #0]
 800491e:	89b3      	ldrh	r3, [r6, #12]
 8004920:	061a      	lsls	r2, r3, #24
 8004922:	d410      	bmi.n	8004946 <__swhatbuf_r+0x3e>
 8004924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004928:	e00e      	b.n	8004948 <__swhatbuf_r+0x40>
 800492a:	466a      	mov	r2, sp
 800492c:	f000 fdba 	bl	80054a4 <_fstat_r>
 8004930:	2800      	cmp	r0, #0
 8004932:	dbf2      	blt.n	800491a <__swhatbuf_r+0x12>
 8004934:	9a01      	ldr	r2, [sp, #4]
 8004936:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800493a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800493e:	425a      	negs	r2, r3
 8004940:	415a      	adcs	r2, r3
 8004942:	602a      	str	r2, [r5, #0]
 8004944:	e7ee      	b.n	8004924 <__swhatbuf_r+0x1c>
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	2000      	movs	r0, #0
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	b016      	add	sp, #88	; 0x58
 800494e:	bd70      	pop	{r4, r5, r6, pc}

08004950 <__smakebuf_r>:
 8004950:	898b      	ldrh	r3, [r1, #12]
 8004952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004954:	079d      	lsls	r5, r3, #30
 8004956:	4606      	mov	r6, r0
 8004958:	460c      	mov	r4, r1
 800495a:	d507      	bpl.n	800496c <__smakebuf_r+0x1c>
 800495c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	2301      	movs	r3, #1
 8004966:	6163      	str	r3, [r4, #20]
 8004968:	b002      	add	sp, #8
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	ab01      	add	r3, sp, #4
 800496e:	466a      	mov	r2, sp
 8004970:	f7ff ffca 	bl	8004908 <__swhatbuf_r>
 8004974:	9900      	ldr	r1, [sp, #0]
 8004976:	4605      	mov	r5, r0
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f879 	bl	8004a70 <_malloc_r>
 800497e:	b948      	cbnz	r0, 8004994 <__smakebuf_r+0x44>
 8004980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004984:	059a      	lsls	r2, r3, #22
 8004986:	d4ef      	bmi.n	8004968 <__smakebuf_r+0x18>
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	81a3      	strh	r3, [r4, #12]
 8004992:	e7e3      	b.n	800495c <__smakebuf_r+0xc>
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <__smakebuf_r+0x7c>)
 8004996:	62b3      	str	r3, [r6, #40]	; 0x28
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	6020      	str	r0, [r4, #0]
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	9b00      	ldr	r3, [sp, #0]
 80049a4:	6163      	str	r3, [r4, #20]
 80049a6:	9b01      	ldr	r3, [sp, #4]
 80049a8:	6120      	str	r0, [r4, #16]
 80049aa:	b15b      	cbz	r3, 80049c4 <__smakebuf_r+0x74>
 80049ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b0:	4630      	mov	r0, r6
 80049b2:	f000 fd89 	bl	80054c8 <_isatty_r>
 80049b6:	b128      	cbz	r0, 80049c4 <__smakebuf_r+0x74>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	89a0      	ldrh	r0, [r4, #12]
 80049c6:	4305      	orrs	r5, r0
 80049c8:	81a5      	strh	r5, [r4, #12]
 80049ca:	e7cd      	b.n	8004968 <__smakebuf_r+0x18>
 80049cc:	08004761 	.word	0x08004761

080049d0 <_free_r>:
 80049d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d048      	beq.n	8004a68 <_free_r+0x98>
 80049d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049da:	9001      	str	r0, [sp, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f1a1 0404 	sub.w	r4, r1, #4
 80049e2:	bfb8      	it	lt
 80049e4:	18e4      	addlt	r4, r4, r3
 80049e6:	f000 fdb9 	bl	800555c <__malloc_lock>
 80049ea:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <_free_r+0x9c>)
 80049ec:	9801      	ldr	r0, [sp, #4]
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	4615      	mov	r5, r2
 80049f2:	b933      	cbnz	r3, 8004a02 <_free_r+0x32>
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	6014      	str	r4, [r2, #0]
 80049f8:	b003      	add	sp, #12
 80049fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049fe:	f000 bdb3 	b.w	8005568 <__malloc_unlock>
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	d90b      	bls.n	8004a1e <_free_r+0x4e>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	1862      	adds	r2, r4, r1
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bf04      	itt	eq
 8004a0e:	681a      	ldreq	r2, [r3, #0]
 8004a10:	685b      	ldreq	r3, [r3, #4]
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	bf04      	itt	eq
 8004a16:	1852      	addeq	r2, r2, r1
 8004a18:	6022      	streq	r2, [r4, #0]
 8004a1a:	602c      	str	r4, [r5, #0]
 8004a1c:	e7ec      	b.n	80049f8 <_free_r+0x28>
 8004a1e:	461a      	mov	r2, r3
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	b10b      	cbz	r3, 8004a28 <_free_r+0x58>
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	d9fa      	bls.n	8004a1e <_free_r+0x4e>
 8004a28:	6811      	ldr	r1, [r2, #0]
 8004a2a:	1855      	adds	r5, r2, r1
 8004a2c:	42a5      	cmp	r5, r4
 8004a2e:	d10b      	bne.n	8004a48 <_free_r+0x78>
 8004a30:	6824      	ldr	r4, [r4, #0]
 8004a32:	4421      	add	r1, r4
 8004a34:	1854      	adds	r4, r2, r1
 8004a36:	42a3      	cmp	r3, r4
 8004a38:	6011      	str	r1, [r2, #0]
 8004a3a:	d1dd      	bne.n	80049f8 <_free_r+0x28>
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	6053      	str	r3, [r2, #4]
 8004a42:	4421      	add	r1, r4
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	e7d7      	b.n	80049f8 <_free_r+0x28>
 8004a48:	d902      	bls.n	8004a50 <_free_r+0x80>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	6003      	str	r3, [r0, #0]
 8004a4e:	e7d3      	b.n	80049f8 <_free_r+0x28>
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	1961      	adds	r1, r4, r5
 8004a54:	428b      	cmp	r3, r1
 8004a56:	bf04      	itt	eq
 8004a58:	6819      	ldreq	r1, [r3, #0]
 8004a5a:	685b      	ldreq	r3, [r3, #4]
 8004a5c:	6063      	str	r3, [r4, #4]
 8004a5e:	bf04      	itt	eq
 8004a60:	1949      	addeq	r1, r1, r5
 8004a62:	6021      	streq	r1, [r4, #0]
 8004a64:	6054      	str	r4, [r2, #4]
 8004a66:	e7c7      	b.n	80049f8 <_free_r+0x28>
 8004a68:	b003      	add	sp, #12
 8004a6a:	bd30      	pop	{r4, r5, pc}
 8004a6c:	200000fc 	.word	0x200000fc

08004a70 <_malloc_r>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	1ccd      	adds	r5, r1, #3
 8004a74:	f025 0503 	bic.w	r5, r5, #3
 8004a78:	3508      	adds	r5, #8
 8004a7a:	2d0c      	cmp	r5, #12
 8004a7c:	bf38      	it	cc
 8004a7e:	250c      	movcc	r5, #12
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	4606      	mov	r6, r0
 8004a84:	db01      	blt.n	8004a8a <_malloc_r+0x1a>
 8004a86:	42a9      	cmp	r1, r5
 8004a88:	d903      	bls.n	8004a92 <_malloc_r+0x22>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a92:	f000 fd63 	bl	800555c <__malloc_lock>
 8004a96:	4921      	ldr	r1, [pc, #132]	; (8004b1c <_malloc_r+0xac>)
 8004a98:	680a      	ldr	r2, [r1, #0]
 8004a9a:	4614      	mov	r4, r2
 8004a9c:	b99c      	cbnz	r4, 8004ac6 <_malloc_r+0x56>
 8004a9e:	4f20      	ldr	r7, [pc, #128]	; (8004b20 <_malloc_r+0xb0>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	b923      	cbnz	r3, 8004aae <_malloc_r+0x3e>
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f000 fc86 	bl	80053b8 <_sbrk_r>
 8004aac:	6038      	str	r0, [r7, #0]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 fc81 	bl	80053b8 <_sbrk_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d123      	bne.n	8004b02 <_malloc_r+0x92>
 8004aba:	230c      	movs	r3, #12
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 fd52 	bl	8005568 <__malloc_unlock>
 8004ac4:	e7e3      	b.n	8004a8e <_malloc_r+0x1e>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	1b5b      	subs	r3, r3, r5
 8004aca:	d417      	bmi.n	8004afc <_malloc_r+0x8c>
 8004acc:	2b0b      	cmp	r3, #11
 8004ace:	d903      	bls.n	8004ad8 <_malloc_r+0x68>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	441c      	add	r4, r3
 8004ad4:	6025      	str	r5, [r4, #0]
 8004ad6:	e004      	b.n	8004ae2 <_malloc_r+0x72>
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	42a2      	cmp	r2, r4
 8004adc:	bf0c      	ite	eq
 8004ade:	600b      	streq	r3, [r1, #0]
 8004ae0:	6053      	strne	r3, [r2, #4]
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 fd40 	bl	8005568 <__malloc_unlock>
 8004ae8:	f104 000b 	add.w	r0, r4, #11
 8004aec:	1d23      	adds	r3, r4, #4
 8004aee:	f020 0007 	bic.w	r0, r0, #7
 8004af2:	1ac2      	subs	r2, r0, r3
 8004af4:	d0cc      	beq.n	8004a90 <_malloc_r+0x20>
 8004af6:	1a1b      	subs	r3, r3, r0
 8004af8:	50a3      	str	r3, [r4, r2]
 8004afa:	e7c9      	b.n	8004a90 <_malloc_r+0x20>
 8004afc:	4622      	mov	r2, r4
 8004afe:	6864      	ldr	r4, [r4, #4]
 8004b00:	e7cc      	b.n	8004a9c <_malloc_r+0x2c>
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d0e3      	beq.n	8004ad4 <_malloc_r+0x64>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 fc52 	bl	80053b8 <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d1dd      	bne.n	8004ad4 <_malloc_r+0x64>
 8004b18:	e7cf      	b.n	8004aba <_malloc_r+0x4a>
 8004b1a:	bf00      	nop
 8004b1c:	200000fc 	.word	0x200000fc
 8004b20:	20000100 	.word	0x20000100

08004b24 <__ssputs_r>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	688e      	ldr	r6, [r1, #8]
 8004b2a:	429e      	cmp	r6, r3
 8004b2c:	4682      	mov	sl, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	4690      	mov	r8, r2
 8004b32:	461f      	mov	r7, r3
 8004b34:	d838      	bhi.n	8004ba8 <__ssputs_r+0x84>
 8004b36:	898a      	ldrh	r2, [r1, #12]
 8004b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b3c:	d032      	beq.n	8004ba4 <__ssputs_r+0x80>
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	6909      	ldr	r1, [r1, #16]
 8004b42:	eba5 0901 	sub.w	r9, r5, r1
 8004b46:	6965      	ldr	r5, [r4, #20]
 8004b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b50:	3301      	adds	r3, #1
 8004b52:	444b      	add	r3, r9
 8004b54:	106d      	asrs	r5, r5, #1
 8004b56:	429d      	cmp	r5, r3
 8004b58:	bf38      	it	cc
 8004b5a:	461d      	movcc	r5, r3
 8004b5c:	0553      	lsls	r3, r2, #21
 8004b5e:	d531      	bpl.n	8004bc4 <__ssputs_r+0xa0>
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7ff ff85 	bl	8004a70 <_malloc_r>
 8004b66:	4606      	mov	r6, r0
 8004b68:	b950      	cbnz	r0, 8004b80 <__ssputs_r+0x5c>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	f8ca 3000 	str.w	r3, [sl]
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	6921      	ldr	r1, [r4, #16]
 8004b82:	464a      	mov	r2, r9
 8004b84:	f000 fcc2 	bl	800550c <memcpy>
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b92:	81a3      	strh	r3, [r4, #12]
 8004b94:	6126      	str	r6, [r4, #16]
 8004b96:	6165      	str	r5, [r4, #20]
 8004b98:	444e      	add	r6, r9
 8004b9a:	eba5 0509 	sub.w	r5, r5, r9
 8004b9e:	6026      	str	r6, [r4, #0]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	463e      	mov	r6, r7
 8004ba4:	42be      	cmp	r6, r7
 8004ba6:	d900      	bls.n	8004baa <__ssputs_r+0x86>
 8004ba8:	463e      	mov	r6, r7
 8004baa:	4632      	mov	r2, r6
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	f000 fcba 	bl	8005528 <memmove>
 8004bb4:	68a3      	ldr	r3, [r4, #8]
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	1b9b      	subs	r3, r3, r6
 8004bba:	4432      	add	r2, r6
 8004bbc:	60a3      	str	r3, [r4, #8]
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e7db      	b.n	8004b7c <__ssputs_r+0x58>
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	f000 fcd5 	bl	8005574 <_realloc_r>
 8004bca:	4606      	mov	r6, r0
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d1e1      	bne.n	8004b94 <__ssputs_r+0x70>
 8004bd0:	6921      	ldr	r1, [r4, #16]
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	f7ff fefc 	bl	80049d0 <_free_r>
 8004bd8:	e7c7      	b.n	8004b6a <__ssputs_r+0x46>
	...

08004bdc <_svfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	4698      	mov	r8, r3
 8004be2:	898b      	ldrh	r3, [r1, #12]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	b09d      	sub	sp, #116	; 0x74
 8004be8:	4607      	mov	r7, r0
 8004bea:	460d      	mov	r5, r1
 8004bec:	4614      	mov	r4, r2
 8004bee:	d50e      	bpl.n	8004c0e <_svfiprintf_r+0x32>
 8004bf0:	690b      	ldr	r3, [r1, #16]
 8004bf2:	b963      	cbnz	r3, 8004c0e <_svfiprintf_r+0x32>
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	f7ff ff3b 	bl	8004a70 <_malloc_r>
 8004bfa:	6028      	str	r0, [r5, #0]
 8004bfc:	6128      	str	r0, [r5, #16]
 8004bfe:	b920      	cbnz	r0, 8004c0a <_svfiprintf_r+0x2e>
 8004c00:	230c      	movs	r3, #12
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c08:	e0d1      	b.n	8004dae <_svfiprintf_r+0x1d2>
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	616b      	str	r3, [r5, #20]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	9309      	str	r3, [sp, #36]	; 0x24
 8004c12:	2320      	movs	r3, #32
 8004c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1c:	2330      	movs	r3, #48	; 0x30
 8004c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dc8 <_svfiprintf_r+0x1ec>
 8004c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c26:	f04f 0901 	mov.w	r9, #1
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c32:	b10a      	cbz	r2, 8004c38 <_svfiprintf_r+0x5c>
 8004c34:	2a25      	cmp	r2, #37	; 0x25
 8004c36:	d1f9      	bne.n	8004c2c <_svfiprintf_r+0x50>
 8004c38:	ebba 0b04 	subs.w	fp, sl, r4
 8004c3c:	d00b      	beq.n	8004c56 <_svfiprintf_r+0x7a>
 8004c3e:	465b      	mov	r3, fp
 8004c40:	4622      	mov	r2, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7ff ff6d 	bl	8004b24 <__ssputs_r>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f000 80aa 	beq.w	8004da4 <_svfiprintf_r+0x1c8>
 8004c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c52:	445a      	add	r2, fp
 8004c54:	9209      	str	r2, [sp, #36]	; 0x24
 8004c56:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80a2 	beq.w	8004da4 <_svfiprintf_r+0x1c8>
 8004c60:	2300      	movs	r3, #0
 8004c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6a:	f10a 0a01 	add.w	sl, sl, #1
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	9307      	str	r3, [sp, #28]
 8004c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c76:	931a      	str	r3, [sp, #104]	; 0x68
 8004c78:	4654      	mov	r4, sl
 8004c7a:	2205      	movs	r2, #5
 8004c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c80:	4851      	ldr	r0, [pc, #324]	; (8004dc8 <_svfiprintf_r+0x1ec>)
 8004c82:	f7fb faad 	bl	80001e0 <memchr>
 8004c86:	9a04      	ldr	r2, [sp, #16]
 8004c88:	b9d8      	cbnz	r0, 8004cc2 <_svfiprintf_r+0xe6>
 8004c8a:	06d0      	lsls	r0, r2, #27
 8004c8c:	bf44      	itt	mi
 8004c8e:	2320      	movmi	r3, #32
 8004c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c94:	0711      	lsls	r1, r2, #28
 8004c96:	bf44      	itt	mi
 8004c98:	232b      	movmi	r3, #43	; 0x2b
 8004c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca4:	d015      	beq.n	8004cd2 <_svfiprintf_r+0xf6>
 8004ca6:	9a07      	ldr	r2, [sp, #28]
 8004ca8:	4654      	mov	r4, sl
 8004caa:	2000      	movs	r0, #0
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb6:	3b30      	subs	r3, #48	; 0x30
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	d94e      	bls.n	8004d5a <_svfiprintf_r+0x17e>
 8004cbc:	b1b0      	cbz	r0, 8004cec <_svfiprintf_r+0x110>
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	e014      	b.n	8004cec <_svfiprintf_r+0x110>
 8004cc2:	eba0 0308 	sub.w	r3, r0, r8
 8004cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	46a2      	mov	sl, r4
 8004cd0:	e7d2      	b.n	8004c78 <_svfiprintf_r+0x9c>
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	9103      	str	r1, [sp, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbb      	ittet	lt
 8004cde:	425b      	neglt	r3, r3
 8004ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce4:	9307      	strge	r3, [sp, #28]
 8004ce6:	9307      	strlt	r3, [sp, #28]
 8004ce8:	bfb8      	it	lt
 8004cea:	9204      	strlt	r2, [sp, #16]
 8004cec:	7823      	ldrb	r3, [r4, #0]
 8004cee:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf0:	d10c      	bne.n	8004d0c <_svfiprintf_r+0x130>
 8004cf2:	7863      	ldrb	r3, [r4, #1]
 8004cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf6:	d135      	bne.n	8004d64 <_svfiprintf_r+0x188>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	9203      	str	r2, [sp, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfb8      	it	lt
 8004d04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d08:	3402      	adds	r4, #2
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004dd8 <_svfiprintf_r+0x1fc>
 8004d10:	7821      	ldrb	r1, [r4, #0]
 8004d12:	2203      	movs	r2, #3
 8004d14:	4650      	mov	r0, sl
 8004d16:	f7fb fa63 	bl	80001e0 <memchr>
 8004d1a:	b140      	cbz	r0, 8004d2e <_svfiprintf_r+0x152>
 8004d1c:	2340      	movs	r3, #64	; 0x40
 8004d1e:	eba0 000a 	sub.w	r0, r0, sl
 8004d22:	fa03 f000 	lsl.w	r0, r3, r0
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	4303      	orrs	r3, r0
 8004d2a:	3401      	adds	r4, #1
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d32:	4826      	ldr	r0, [pc, #152]	; (8004dcc <_svfiprintf_r+0x1f0>)
 8004d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d38:	2206      	movs	r2, #6
 8004d3a:	f7fb fa51 	bl	80001e0 <memchr>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d038      	beq.n	8004db4 <_svfiprintf_r+0x1d8>
 8004d42:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <_svfiprintf_r+0x1f4>)
 8004d44:	bb1b      	cbnz	r3, 8004d8e <_svfiprintf_r+0x1b2>
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	3307      	adds	r3, #7
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	3308      	adds	r3, #8
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d54:	4433      	add	r3, r6
 8004d56:	9309      	str	r3, [sp, #36]	; 0x24
 8004d58:	e767      	b.n	8004c2a <_svfiprintf_r+0x4e>
 8004d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d5e:	460c      	mov	r4, r1
 8004d60:	2001      	movs	r0, #1
 8004d62:	e7a5      	b.n	8004cb0 <_svfiprintf_r+0xd4>
 8004d64:	2300      	movs	r3, #0
 8004d66:	3401      	adds	r4, #1
 8004d68:	9305      	str	r3, [sp, #20]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f04f 0c0a 	mov.w	ip, #10
 8004d70:	4620      	mov	r0, r4
 8004d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d76:	3a30      	subs	r2, #48	; 0x30
 8004d78:	2a09      	cmp	r2, #9
 8004d7a:	d903      	bls.n	8004d84 <_svfiprintf_r+0x1a8>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0c5      	beq.n	8004d0c <_svfiprintf_r+0x130>
 8004d80:	9105      	str	r1, [sp, #20]
 8004d82:	e7c3      	b.n	8004d0c <_svfiprintf_r+0x130>
 8004d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d88:	4604      	mov	r4, r0
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7f0      	b.n	8004d70 <_svfiprintf_r+0x194>
 8004d8e:	ab03      	add	r3, sp, #12
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	462a      	mov	r2, r5
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <_svfiprintf_r+0x1f8>)
 8004d96:	a904      	add	r1, sp, #16
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f3af 8000 	nop.w
 8004d9e:	1c42      	adds	r2, r0, #1
 8004da0:	4606      	mov	r6, r0
 8004da2:	d1d6      	bne.n	8004d52 <_svfiprintf_r+0x176>
 8004da4:	89ab      	ldrh	r3, [r5, #12]
 8004da6:	065b      	lsls	r3, r3, #25
 8004da8:	f53f af2c 	bmi.w	8004c04 <_svfiprintf_r+0x28>
 8004dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dae:	b01d      	add	sp, #116	; 0x74
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	462a      	mov	r2, r5
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <_svfiprintf_r+0x1f8>)
 8004dbc:	a904      	add	r1, sp, #16
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f000 f9d4 	bl	800516c <_printf_i>
 8004dc4:	e7eb      	b.n	8004d9e <_svfiprintf_r+0x1c2>
 8004dc6:	bf00      	nop
 8004dc8:	08005830 	.word	0x08005830
 8004dcc:	0800583a 	.word	0x0800583a
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	08004b25 	.word	0x08004b25
 8004dd8:	08005836 	.word	0x08005836

08004ddc <__sfputc_r>:
 8004ddc:	6893      	ldr	r3, [r2, #8]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	b410      	push	{r4}
 8004de4:	6093      	str	r3, [r2, #8]
 8004de6:	da08      	bge.n	8004dfa <__sfputc_r+0x1e>
 8004de8:	6994      	ldr	r4, [r2, #24]
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	db01      	blt.n	8004df2 <__sfputc_r+0x16>
 8004dee:	290a      	cmp	r1, #10
 8004df0:	d103      	bne.n	8004dfa <__sfputc_r+0x1e>
 8004df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004df6:	f7ff bb0d 	b.w	8004414 <__swbuf_r>
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	1c58      	adds	r0, r3, #1
 8004dfe:	6010      	str	r0, [r2, #0]
 8004e00:	7019      	strb	r1, [r3, #0]
 8004e02:	4608      	mov	r0, r1
 8004e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <__sfputs_r>:
 8004e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	18d5      	adds	r5, r2, r3
 8004e14:	42ac      	cmp	r4, r5
 8004e16:	d101      	bne.n	8004e1c <__sfputs_r+0x12>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e007      	b.n	8004e2c <__sfputs_r+0x22>
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	463a      	mov	r2, r7
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff ffda 	bl	8004ddc <__sfputc_r>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d1f3      	bne.n	8004e14 <__sfputs_r+0xa>
 8004e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e30 <_vfiprintf_r>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	460d      	mov	r5, r1
 8004e36:	b09d      	sub	sp, #116	; 0x74
 8004e38:	4614      	mov	r4, r2
 8004e3a:	4698      	mov	r8, r3
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	b118      	cbz	r0, 8004e48 <_vfiprintf_r+0x18>
 8004e40:	6983      	ldr	r3, [r0, #24]
 8004e42:	b90b      	cbnz	r3, 8004e48 <_vfiprintf_r+0x18>
 8004e44:	f7ff fcc0 	bl	80047c8 <__sinit>
 8004e48:	4b89      	ldr	r3, [pc, #548]	; (8005070 <_vfiprintf_r+0x240>)
 8004e4a:	429d      	cmp	r5, r3
 8004e4c:	d11b      	bne.n	8004e86 <_vfiprintf_r+0x56>
 8004e4e:	6875      	ldr	r5, [r6, #4]
 8004e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_vfiprintf_r+0x32>
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_vfiprintf_r+0x32>
 8004e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5e:	f7ff fd51 	bl	8004904 <__retarget_lock_acquire_recursive>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	d501      	bpl.n	8004e6c <_vfiprintf_r+0x3c>
 8004e68:	692b      	ldr	r3, [r5, #16]
 8004e6a:	b9eb      	cbnz	r3, 8004ea8 <_vfiprintf_r+0x78>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff fb22 	bl	80044b8 <__swsetup_r>
 8004e74:	b1c0      	cbz	r0, 8004ea8 <_vfiprintf_r+0x78>
 8004e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e78:	07dc      	lsls	r4, r3, #31
 8004e7a:	d50e      	bpl.n	8004e9a <_vfiprintf_r+0x6a>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e80:	b01d      	add	sp, #116	; 0x74
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	4b7b      	ldr	r3, [pc, #492]	; (8005074 <_vfiprintf_r+0x244>)
 8004e88:	429d      	cmp	r5, r3
 8004e8a:	d101      	bne.n	8004e90 <_vfiprintf_r+0x60>
 8004e8c:	68b5      	ldr	r5, [r6, #8]
 8004e8e:	e7df      	b.n	8004e50 <_vfiprintf_r+0x20>
 8004e90:	4b79      	ldr	r3, [pc, #484]	; (8005078 <_vfiprintf_r+0x248>)
 8004e92:	429d      	cmp	r5, r3
 8004e94:	bf08      	it	eq
 8004e96:	68f5      	ldreq	r5, [r6, #12]
 8004e98:	e7da      	b.n	8004e50 <_vfiprintf_r+0x20>
 8004e9a:	89ab      	ldrh	r3, [r5, #12]
 8004e9c:	0598      	lsls	r0, r3, #22
 8004e9e:	d4ed      	bmi.n	8004e7c <_vfiprintf_r+0x4c>
 8004ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea2:	f7ff fd30 	bl	8004906 <__retarget_lock_release_recursive>
 8004ea6:	e7e9      	b.n	8004e7c <_vfiprintf_r+0x4c>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	2320      	movs	r3, #32
 8004eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb6:	2330      	movs	r3, #48	; 0x30
 8004eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800507c <_vfiprintf_r+0x24c>
 8004ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ec0:	f04f 0901 	mov.w	r9, #1
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	469a      	mov	sl, r3
 8004ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ecc:	b10a      	cbz	r2, 8004ed2 <_vfiprintf_r+0xa2>
 8004ece:	2a25      	cmp	r2, #37	; 0x25
 8004ed0:	d1f9      	bne.n	8004ec6 <_vfiprintf_r+0x96>
 8004ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed6:	d00b      	beq.n	8004ef0 <_vfiprintf_r+0xc0>
 8004ed8:	465b      	mov	r3, fp
 8004eda:	4622      	mov	r2, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7ff ff93 	bl	8004e0a <__sfputs_r>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	f000 80aa 	beq.w	800503e <_vfiprintf_r+0x20e>
 8004eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eec:	445a      	add	r2, fp
 8004eee:	9209      	str	r2, [sp, #36]	; 0x24
 8004ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a2 	beq.w	800503e <_vfiprintf_r+0x20e>
 8004efa:	2300      	movs	r3, #0
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f04:	f10a 0a01 	add.w	sl, sl, #1
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	9307      	str	r3, [sp, #28]
 8004f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f10:	931a      	str	r3, [sp, #104]	; 0x68
 8004f12:	4654      	mov	r4, sl
 8004f14:	2205      	movs	r2, #5
 8004f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1a:	4858      	ldr	r0, [pc, #352]	; (800507c <_vfiprintf_r+0x24c>)
 8004f1c:	f7fb f960 	bl	80001e0 <memchr>
 8004f20:	9a04      	ldr	r2, [sp, #16]
 8004f22:	b9d8      	cbnz	r0, 8004f5c <_vfiprintf_r+0x12c>
 8004f24:	06d1      	lsls	r1, r2, #27
 8004f26:	bf44      	itt	mi
 8004f28:	2320      	movmi	r3, #32
 8004f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f2e:	0713      	lsls	r3, r2, #28
 8004f30:	bf44      	itt	mi
 8004f32:	232b      	movmi	r3, #43	; 0x2b
 8004f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f38:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3e:	d015      	beq.n	8004f6c <_vfiprintf_r+0x13c>
 8004f40:	9a07      	ldr	r2, [sp, #28]
 8004f42:	4654      	mov	r4, sl
 8004f44:	2000      	movs	r0, #0
 8004f46:	f04f 0c0a 	mov.w	ip, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f50:	3b30      	subs	r3, #48	; 0x30
 8004f52:	2b09      	cmp	r3, #9
 8004f54:	d94e      	bls.n	8004ff4 <_vfiprintf_r+0x1c4>
 8004f56:	b1b0      	cbz	r0, 8004f86 <_vfiprintf_r+0x156>
 8004f58:	9207      	str	r2, [sp, #28]
 8004f5a:	e014      	b.n	8004f86 <_vfiprintf_r+0x156>
 8004f5c:	eba0 0308 	sub.w	r3, r0, r8
 8004f60:	fa09 f303 	lsl.w	r3, r9, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	9304      	str	r3, [sp, #16]
 8004f68:	46a2      	mov	sl, r4
 8004f6a:	e7d2      	b.n	8004f12 <_vfiprintf_r+0xe2>
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	1d19      	adds	r1, r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	9103      	str	r1, [sp, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bfbb      	ittet	lt
 8004f78:	425b      	neglt	r3, r3
 8004f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f7e:	9307      	strge	r3, [sp, #28]
 8004f80:	9307      	strlt	r3, [sp, #28]
 8004f82:	bfb8      	it	lt
 8004f84:	9204      	strlt	r2, [sp, #16]
 8004f86:	7823      	ldrb	r3, [r4, #0]
 8004f88:	2b2e      	cmp	r3, #46	; 0x2e
 8004f8a:	d10c      	bne.n	8004fa6 <_vfiprintf_r+0x176>
 8004f8c:	7863      	ldrb	r3, [r4, #1]
 8004f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f90:	d135      	bne.n	8004ffe <_vfiprintf_r+0x1ce>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	1d1a      	adds	r2, r3, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	9203      	str	r2, [sp, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bfb8      	it	lt
 8004f9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fa2:	3402      	adds	r4, #2
 8004fa4:	9305      	str	r3, [sp, #20]
 8004fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800508c <_vfiprintf_r+0x25c>
 8004faa:	7821      	ldrb	r1, [r4, #0]
 8004fac:	2203      	movs	r2, #3
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f7fb f916 	bl	80001e0 <memchr>
 8004fb4:	b140      	cbz	r0, 8004fc8 <_vfiprintf_r+0x198>
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	eba0 000a 	sub.w	r0, r0, sl
 8004fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	4303      	orrs	r3, r0
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	482c      	ldr	r0, [pc, #176]	; (8005080 <_vfiprintf_r+0x250>)
 8004fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	f7fb f904 	bl	80001e0 <memchr>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d03f      	beq.n	800505c <_vfiprintf_r+0x22c>
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <_vfiprintf_r+0x254>)
 8004fde:	bb1b      	cbnz	r3, 8005028 <_vfiprintf_r+0x1f8>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	3307      	adds	r3, #7
 8004fe4:	f023 0307 	bic.w	r3, r3, #7
 8004fe8:	3308      	adds	r3, #8
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fee:	443b      	add	r3, r7
 8004ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff2:	e767      	b.n	8004ec4 <_vfiprintf_r+0x94>
 8004ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	e7a5      	b.n	8004f4a <_vfiprintf_r+0x11a>
 8004ffe:	2300      	movs	r3, #0
 8005000:	3401      	adds	r4, #1
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	4619      	mov	r1, r3
 8005006:	f04f 0c0a 	mov.w	ip, #10
 800500a:	4620      	mov	r0, r4
 800500c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005010:	3a30      	subs	r2, #48	; 0x30
 8005012:	2a09      	cmp	r2, #9
 8005014:	d903      	bls.n	800501e <_vfiprintf_r+0x1ee>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0c5      	beq.n	8004fa6 <_vfiprintf_r+0x176>
 800501a:	9105      	str	r1, [sp, #20]
 800501c:	e7c3      	b.n	8004fa6 <_vfiprintf_r+0x176>
 800501e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005022:	4604      	mov	r4, r0
 8005024:	2301      	movs	r3, #1
 8005026:	e7f0      	b.n	800500a <_vfiprintf_r+0x1da>
 8005028:	ab03      	add	r3, sp, #12
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	462a      	mov	r2, r5
 800502e:	4b16      	ldr	r3, [pc, #88]	; (8005088 <_vfiprintf_r+0x258>)
 8005030:	a904      	add	r1, sp, #16
 8005032:	4630      	mov	r0, r6
 8005034:	f3af 8000 	nop.w
 8005038:	4607      	mov	r7, r0
 800503a:	1c78      	adds	r0, r7, #1
 800503c:	d1d6      	bne.n	8004fec <_vfiprintf_r+0x1bc>
 800503e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005040:	07d9      	lsls	r1, r3, #31
 8005042:	d405      	bmi.n	8005050 <_vfiprintf_r+0x220>
 8005044:	89ab      	ldrh	r3, [r5, #12]
 8005046:	059a      	lsls	r2, r3, #22
 8005048:	d402      	bmi.n	8005050 <_vfiprintf_r+0x220>
 800504a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800504c:	f7ff fc5b 	bl	8004906 <__retarget_lock_release_recursive>
 8005050:	89ab      	ldrh	r3, [r5, #12]
 8005052:	065b      	lsls	r3, r3, #25
 8005054:	f53f af12 	bmi.w	8004e7c <_vfiprintf_r+0x4c>
 8005058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800505a:	e711      	b.n	8004e80 <_vfiprintf_r+0x50>
 800505c:	ab03      	add	r3, sp, #12
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	462a      	mov	r2, r5
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <_vfiprintf_r+0x258>)
 8005064:	a904      	add	r1, sp, #16
 8005066:	4630      	mov	r0, r6
 8005068:	f000 f880 	bl	800516c <_printf_i>
 800506c:	e7e4      	b.n	8005038 <_vfiprintf_r+0x208>
 800506e:	bf00      	nop
 8005070:	080057f0 	.word	0x080057f0
 8005074:	08005810 	.word	0x08005810
 8005078:	080057d0 	.word	0x080057d0
 800507c:	08005830 	.word	0x08005830
 8005080:	0800583a 	.word	0x0800583a
 8005084:	00000000 	.word	0x00000000
 8005088:	08004e0b 	.word	0x08004e0b
 800508c:	08005836 	.word	0x08005836

08005090 <_printf_common>:
 8005090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	4616      	mov	r6, r2
 8005096:	4699      	mov	r9, r3
 8005098:	688a      	ldr	r2, [r1, #8]
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	bfb8      	it	lt
 80050a4:	4613      	movlt	r3, r2
 80050a6:	6033      	str	r3, [r6, #0]
 80050a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ac:	4607      	mov	r7, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	b10a      	cbz	r2, 80050b6 <_printf_common+0x26>
 80050b2:	3301      	adds	r3, #1
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	0699      	lsls	r1, r3, #26
 80050ba:	bf42      	ittt	mi
 80050bc:	6833      	ldrmi	r3, [r6, #0]
 80050be:	3302      	addmi	r3, #2
 80050c0:	6033      	strmi	r3, [r6, #0]
 80050c2:	6825      	ldr	r5, [r4, #0]
 80050c4:	f015 0506 	ands.w	r5, r5, #6
 80050c8:	d106      	bne.n	80050d8 <_printf_common+0x48>
 80050ca:	f104 0a19 	add.w	sl, r4, #25
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	6832      	ldr	r2, [r6, #0]
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dc26      	bgt.n	8005126 <_printf_common+0x96>
 80050d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050dc:	1e13      	subs	r3, r2, #0
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	bf18      	it	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	0692      	lsls	r2, r2, #26
 80050e6:	d42b      	bmi.n	8005140 <_printf_common+0xb0>
 80050e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d01e      	beq.n	8005134 <_printf_common+0xa4>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	68e5      	ldr	r5, [r4, #12]
 80050fa:	6832      	ldr	r2, [r6, #0]
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	2b04      	cmp	r3, #4
 8005102:	bf08      	it	eq
 8005104:	1aad      	subeq	r5, r5, r2
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	bf0c      	ite	eq
 800510c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005110:	2500      	movne	r5, #0
 8005112:	4293      	cmp	r3, r2
 8005114:	bfc4      	itt	gt
 8005116:	1a9b      	subgt	r3, r3, r2
 8005118:	18ed      	addgt	r5, r5, r3
 800511a:	2600      	movs	r6, #0
 800511c:	341a      	adds	r4, #26
 800511e:	42b5      	cmp	r5, r6
 8005120:	d11a      	bne.n	8005158 <_printf_common+0xc8>
 8005122:	2000      	movs	r0, #0
 8005124:	e008      	b.n	8005138 <_printf_common+0xa8>
 8005126:	2301      	movs	r3, #1
 8005128:	4652      	mov	r2, sl
 800512a:	4649      	mov	r1, r9
 800512c:	4638      	mov	r0, r7
 800512e:	47c0      	blx	r8
 8005130:	3001      	adds	r0, #1
 8005132:	d103      	bne.n	800513c <_printf_common+0xac>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513c:	3501      	adds	r5, #1
 800513e:	e7c6      	b.n	80050ce <_printf_common+0x3e>
 8005140:	18e1      	adds	r1, r4, r3
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	2030      	movs	r0, #48	; 0x30
 8005146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800514a:	4422      	add	r2, r4
 800514c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005154:	3302      	adds	r3, #2
 8005156:	e7c7      	b.n	80050e8 <_printf_common+0x58>
 8005158:	2301      	movs	r3, #1
 800515a:	4622      	mov	r2, r4
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d0e6      	beq.n	8005134 <_printf_common+0xa4>
 8005166:	3601      	adds	r6, #1
 8005168:	e7d9      	b.n	800511e <_printf_common+0x8e>
	...

0800516c <_printf_i>:
 800516c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	4691      	mov	r9, r2
 8005174:	7e27      	ldrb	r7, [r4, #24]
 8005176:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005178:	2f78      	cmp	r7, #120	; 0x78
 800517a:	4680      	mov	r8, r0
 800517c:	469a      	mov	sl, r3
 800517e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005182:	d807      	bhi.n	8005194 <_printf_i+0x28>
 8005184:	2f62      	cmp	r7, #98	; 0x62
 8005186:	d80a      	bhi.n	800519e <_printf_i+0x32>
 8005188:	2f00      	cmp	r7, #0
 800518a:	f000 80d8 	beq.w	800533e <_printf_i+0x1d2>
 800518e:	2f58      	cmp	r7, #88	; 0x58
 8005190:	f000 80a3 	beq.w	80052da <_printf_i+0x16e>
 8005194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800519c:	e03a      	b.n	8005214 <_printf_i+0xa8>
 800519e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051a2:	2b15      	cmp	r3, #21
 80051a4:	d8f6      	bhi.n	8005194 <_printf_i+0x28>
 80051a6:	a001      	add	r0, pc, #4	; (adr r0, 80051ac <_printf_i+0x40>)
 80051a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005219 	.word	0x08005219
 80051b4:	08005195 	.word	0x08005195
 80051b8:	08005195 	.word	0x08005195
 80051bc:	08005195 	.word	0x08005195
 80051c0:	08005195 	.word	0x08005195
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005195 	.word	0x08005195
 80051cc:	08005195 	.word	0x08005195
 80051d0:	08005195 	.word	0x08005195
 80051d4:	08005195 	.word	0x08005195
 80051d8:	08005325 	.word	0x08005325
 80051dc:	08005249 	.word	0x08005249
 80051e0:	08005307 	.word	0x08005307
 80051e4:	08005195 	.word	0x08005195
 80051e8:	08005195 	.word	0x08005195
 80051ec:	08005347 	.word	0x08005347
 80051f0:	08005195 	.word	0x08005195
 80051f4:	08005249 	.word	0x08005249
 80051f8:	08005195 	.word	0x08005195
 80051fc:	08005195 	.word	0x08005195
 8005200:	0800530f 	.word	0x0800530f
 8005204:	680b      	ldr	r3, [r1, #0]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	600a      	str	r2, [r1, #0]
 800520c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005214:	2301      	movs	r3, #1
 8005216:	e0a3      	b.n	8005360 <_printf_i+0x1f4>
 8005218:	6825      	ldr	r5, [r4, #0]
 800521a:	6808      	ldr	r0, [r1, #0]
 800521c:	062e      	lsls	r6, r5, #24
 800521e:	f100 0304 	add.w	r3, r0, #4
 8005222:	d50a      	bpl.n	800523a <_printf_i+0xce>
 8005224:	6805      	ldr	r5, [r0, #0]
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	2d00      	cmp	r5, #0
 800522a:	da03      	bge.n	8005234 <_printf_i+0xc8>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	426d      	negs	r5, r5
 8005230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005234:	485e      	ldr	r0, [pc, #376]	; (80053b0 <_printf_i+0x244>)
 8005236:	230a      	movs	r3, #10
 8005238:	e019      	b.n	800526e <_printf_i+0x102>
 800523a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800523e:	6805      	ldr	r5, [r0, #0]
 8005240:	600b      	str	r3, [r1, #0]
 8005242:	bf18      	it	ne
 8005244:	b22d      	sxthne	r5, r5
 8005246:	e7ef      	b.n	8005228 <_printf_i+0xbc>
 8005248:	680b      	ldr	r3, [r1, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	1d18      	adds	r0, r3, #4
 800524e:	6008      	str	r0, [r1, #0]
 8005250:	0628      	lsls	r0, r5, #24
 8005252:	d501      	bpl.n	8005258 <_printf_i+0xec>
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	e002      	b.n	800525e <_printf_i+0xf2>
 8005258:	0669      	lsls	r1, r5, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0xe8>
 800525c:	881d      	ldrh	r5, [r3, #0]
 800525e:	4854      	ldr	r0, [pc, #336]	; (80053b0 <_printf_i+0x244>)
 8005260:	2f6f      	cmp	r7, #111	; 0x6f
 8005262:	bf0c      	ite	eq
 8005264:	2308      	moveq	r3, #8
 8005266:	230a      	movne	r3, #10
 8005268:	2100      	movs	r1, #0
 800526a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800526e:	6866      	ldr	r6, [r4, #4]
 8005270:	60a6      	str	r6, [r4, #8]
 8005272:	2e00      	cmp	r6, #0
 8005274:	bfa2      	ittt	ge
 8005276:	6821      	ldrge	r1, [r4, #0]
 8005278:	f021 0104 	bicge.w	r1, r1, #4
 800527c:	6021      	strge	r1, [r4, #0]
 800527e:	b90d      	cbnz	r5, 8005284 <_printf_i+0x118>
 8005280:	2e00      	cmp	r6, #0
 8005282:	d04d      	beq.n	8005320 <_printf_i+0x1b4>
 8005284:	4616      	mov	r6, r2
 8005286:	fbb5 f1f3 	udiv	r1, r5, r3
 800528a:	fb03 5711 	mls	r7, r3, r1, r5
 800528e:	5dc7      	ldrb	r7, [r0, r7]
 8005290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005294:	462f      	mov	r7, r5
 8005296:	42bb      	cmp	r3, r7
 8005298:	460d      	mov	r5, r1
 800529a:	d9f4      	bls.n	8005286 <_printf_i+0x11a>
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10b      	bne.n	80052b8 <_printf_i+0x14c>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07df      	lsls	r7, r3, #31
 80052a4:	d508      	bpl.n	80052b8 <_printf_i+0x14c>
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	4299      	cmp	r1, r3
 80052ac:	bfde      	ittt	le
 80052ae:	2330      	movle	r3, #48	; 0x30
 80052b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052b4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80052b8:	1b92      	subs	r2, r2, r6
 80052ba:	6122      	str	r2, [r4, #16]
 80052bc:	f8cd a000 	str.w	sl, [sp]
 80052c0:	464b      	mov	r3, r9
 80052c2:	aa03      	add	r2, sp, #12
 80052c4:	4621      	mov	r1, r4
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7ff fee2 	bl	8005090 <_printf_common>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d14c      	bne.n	800536a <_printf_i+0x1fe>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052d4:	b004      	add	sp, #16
 80052d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052da:	4835      	ldr	r0, [pc, #212]	; (80053b0 <_printf_i+0x244>)
 80052dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	680e      	ldr	r6, [r1, #0]
 80052e4:	061f      	lsls	r7, r3, #24
 80052e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80052ea:	600e      	str	r6, [r1, #0]
 80052ec:	d514      	bpl.n	8005318 <_printf_i+0x1ac>
 80052ee:	07d9      	lsls	r1, r3, #31
 80052f0:	bf44      	itt	mi
 80052f2:	f043 0320 	orrmi.w	r3, r3, #32
 80052f6:	6023      	strmi	r3, [r4, #0]
 80052f8:	b91d      	cbnz	r5, 8005302 <_printf_i+0x196>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	f023 0320 	bic.w	r3, r3, #32
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	2310      	movs	r3, #16
 8005304:	e7b0      	b.n	8005268 <_printf_i+0xfc>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2378      	movs	r3, #120	; 0x78
 8005310:	4828      	ldr	r0, [pc, #160]	; (80053b4 <_printf_i+0x248>)
 8005312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005316:	e7e3      	b.n	80052e0 <_printf_i+0x174>
 8005318:	065e      	lsls	r6, r3, #25
 800531a:	bf48      	it	mi
 800531c:	b2ad      	uxthmi	r5, r5
 800531e:	e7e6      	b.n	80052ee <_printf_i+0x182>
 8005320:	4616      	mov	r6, r2
 8005322:	e7bb      	b.n	800529c <_printf_i+0x130>
 8005324:	680b      	ldr	r3, [r1, #0]
 8005326:	6826      	ldr	r6, [r4, #0]
 8005328:	6960      	ldr	r0, [r4, #20]
 800532a:	1d1d      	adds	r5, r3, #4
 800532c:	600d      	str	r5, [r1, #0]
 800532e:	0635      	lsls	r5, r6, #24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	d501      	bpl.n	8005338 <_printf_i+0x1cc>
 8005334:	6018      	str	r0, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0x1d2>
 8005338:	0671      	lsls	r1, r6, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0x1c8>
 800533c:	8018      	strh	r0, [r3, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	4616      	mov	r6, r2
 8005344:	e7ba      	b.n	80052bc <_printf_i+0x150>
 8005346:	680b      	ldr	r3, [r1, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	600a      	str	r2, [r1, #0]
 800534c:	681e      	ldr	r6, [r3, #0]
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	2100      	movs	r1, #0
 8005352:	4630      	mov	r0, r6
 8005354:	f7fa ff44 	bl	80001e0 <memchr>
 8005358:	b108      	cbz	r0, 800535e <_printf_i+0x1f2>
 800535a:	1b80      	subs	r0, r0, r6
 800535c:	6060      	str	r0, [r4, #4]
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	2300      	movs	r3, #0
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	e7a8      	b.n	80052bc <_printf_i+0x150>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	4632      	mov	r2, r6
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d0ab      	beq.n	80052d0 <_printf_i+0x164>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	d413      	bmi.n	80053a6 <_printf_i+0x23a>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	4298      	cmp	r0, r3
 8005384:	bfb8      	it	lt
 8005386:	4618      	movlt	r0, r3
 8005388:	e7a4      	b.n	80052d4 <_printf_i+0x168>
 800538a:	2301      	movs	r3, #1
 800538c:	4632      	mov	r2, r6
 800538e:	4649      	mov	r1, r9
 8005390:	4640      	mov	r0, r8
 8005392:	47d0      	blx	sl
 8005394:	3001      	adds	r0, #1
 8005396:	d09b      	beq.n	80052d0 <_printf_i+0x164>
 8005398:	3501      	adds	r5, #1
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	9903      	ldr	r1, [sp, #12]
 800539e:	1a5b      	subs	r3, r3, r1
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dcf2      	bgt.n	800538a <_printf_i+0x21e>
 80053a4:	e7eb      	b.n	800537e <_printf_i+0x212>
 80053a6:	2500      	movs	r5, #0
 80053a8:	f104 0619 	add.w	r6, r4, #25
 80053ac:	e7f5      	b.n	800539a <_printf_i+0x22e>
 80053ae:	bf00      	nop
 80053b0:	08005841 	.word	0x08005841
 80053b4:	08005852 	.word	0x08005852

080053b8 <_sbrk_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_sbrk_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fc f9ea 	bl	800179c <_sbrk>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_sbrk_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_sbrk_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20000a3c 	.word	0x20000a3c

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 f8ee 	bl	80055c0 <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f000 f868 	bl	80054e8 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b817 	b.w	8005460 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f855 	bl	80054e8 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	; 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b813 	b.w	8005484 <_close_r>
	...

08005460 <_write_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <_write_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fb f905 	bl	800067e <_write>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_write_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_write_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000a3c 	.word	0x20000a3c

08005484 <_close_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d06      	ldr	r5, [pc, #24]	; (80054a0 <_close_r+0x1c>)
 8005488:	2300      	movs	r3, #0
 800548a:	4604      	mov	r4, r0
 800548c:	4608      	mov	r0, r1
 800548e:	602b      	str	r3, [r5, #0]
 8005490:	f7fc f94f 	bl	8001732 <_close>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_close_r+0x1a>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_close_r+0x1a>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	20000a3c 	.word	0x20000a3c

080054a4 <_fstat_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d07      	ldr	r5, [pc, #28]	; (80054c4 <_fstat_r+0x20>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	f7fc f94a 	bl	800174a <_fstat>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	d102      	bne.n	80054c0 <_fstat_r+0x1c>
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	b103      	cbz	r3, 80054c0 <_fstat_r+0x1c>
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	bd38      	pop	{r3, r4, r5, pc}
 80054c2:	bf00      	nop
 80054c4:	20000a3c 	.word	0x20000a3c

080054c8 <_isatty_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_isatty_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fc f949 	bl	800176a <_isatty>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_isatty_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_isatty_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20000a3c 	.word	0x20000a3c

080054e8 <_lseek_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_lseek_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fc f942 	bl	8001780 <_lseek>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_lseek_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_lseek_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20000a3c 	.word	0x20000a3c

0800550c <memcpy>:
 800550c:	440a      	add	r2, r1
 800550e:	4291      	cmp	r1, r2
 8005510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005514:	d100      	bne.n	8005518 <memcpy+0xc>
 8005516:	4770      	bx	lr
 8005518:	b510      	push	{r4, lr}
 800551a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800551e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005522:	4291      	cmp	r1, r2
 8005524:	d1f9      	bne.n	800551a <memcpy+0xe>
 8005526:	bd10      	pop	{r4, pc}

08005528 <memmove>:
 8005528:	4288      	cmp	r0, r1
 800552a:	b510      	push	{r4, lr}
 800552c:	eb01 0402 	add.w	r4, r1, r2
 8005530:	d902      	bls.n	8005538 <memmove+0x10>
 8005532:	4284      	cmp	r4, r0
 8005534:	4623      	mov	r3, r4
 8005536:	d807      	bhi.n	8005548 <memmove+0x20>
 8005538:	1e43      	subs	r3, r0, #1
 800553a:	42a1      	cmp	r1, r4
 800553c:	d008      	beq.n	8005550 <memmove+0x28>
 800553e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005546:	e7f8      	b.n	800553a <memmove+0x12>
 8005548:	4402      	add	r2, r0
 800554a:	4601      	mov	r1, r0
 800554c:	428a      	cmp	r2, r1
 800554e:	d100      	bne.n	8005552 <memmove+0x2a>
 8005550:	bd10      	pop	{r4, pc}
 8005552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555a:	e7f7      	b.n	800554c <memmove+0x24>

0800555c <__malloc_lock>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__malloc_lock+0x8>)
 800555e:	f7ff b9d1 	b.w	8004904 <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	20000a34 	.word	0x20000a34

08005568 <__malloc_unlock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_unlock+0x8>)
 800556a:	f7ff b9cc 	b.w	8004906 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	20000a34 	.word	0x20000a34

08005574 <_realloc_r>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	4607      	mov	r7, r0
 8005578:	4614      	mov	r4, r2
 800557a:	460e      	mov	r6, r1
 800557c:	b921      	cbnz	r1, 8005588 <_realloc_r+0x14>
 800557e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005582:	4611      	mov	r1, r2
 8005584:	f7ff ba74 	b.w	8004a70 <_malloc_r>
 8005588:	b922      	cbnz	r2, 8005594 <_realloc_r+0x20>
 800558a:	f7ff fa21 	bl	80049d0 <_free_r>
 800558e:	4625      	mov	r5, r4
 8005590:	4628      	mov	r0, r5
 8005592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005594:	f000 f826 	bl	80055e4 <_malloc_usable_size_r>
 8005598:	42a0      	cmp	r0, r4
 800559a:	d20f      	bcs.n	80055bc <_realloc_r+0x48>
 800559c:	4621      	mov	r1, r4
 800559e:	4638      	mov	r0, r7
 80055a0:	f7ff fa66 	bl	8004a70 <_malloc_r>
 80055a4:	4605      	mov	r5, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0f2      	beq.n	8005590 <_realloc_r+0x1c>
 80055aa:	4631      	mov	r1, r6
 80055ac:	4622      	mov	r2, r4
 80055ae:	f7ff ffad 	bl	800550c <memcpy>
 80055b2:	4631      	mov	r1, r6
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff fa0b 	bl	80049d0 <_free_r>
 80055ba:	e7e9      	b.n	8005590 <_realloc_r+0x1c>
 80055bc:	4635      	mov	r5, r6
 80055be:	e7e7      	b.n	8005590 <_realloc_r+0x1c>

080055c0 <_read_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d07      	ldr	r5, [pc, #28]	; (80055e0 <_read_r+0x20>)
 80055c4:	4604      	mov	r4, r0
 80055c6:	4608      	mov	r0, r1
 80055c8:	4611      	mov	r1, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fc f892 	bl	80016f8 <_read>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_read_r+0x1e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_read_r+0x1e>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000a3c 	.word	0x20000a3c

080055e4 <_malloc_usable_size_r>:
 80055e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e8:	1f18      	subs	r0, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfbc      	itt	lt
 80055ee:	580b      	ldrlt	r3, [r1, r0]
 80055f0:	18c0      	addlt	r0, r0, r3
 80055f2:	4770      	bx	lr

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
