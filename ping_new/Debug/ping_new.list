
ping_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005894  08005894  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800589c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200000b8  08005954  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08005954  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2b  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  0002ee13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020534  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c0  00000000  00000000  000532d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf024  00000000  00000000  00061994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001309b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  00130a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800561c 	.word	0x0800561c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800561c 	.word	0x0800561c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <W5500_Select>:
/*
 wiz_NetInfo gWIZNETINFO = { .mac = {0xEA, 0x11, 0x22, 0x33, 0x44, 0xEA},
 .dhcp = NETINFO_DHCP };

 */
void W5500_Select(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <W5500_Select+0x14>)
 80005d2:	f002 f9b3 	bl	800293c <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <W5500_Unselect>:

void W5500_Unselect(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <W5500_Unselect+0x14>)
 80005ea:	f002 f9a7 	bl	800293c <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <W5500_ReadBuff+0x24>)
 800060e:	f002 ff88 	bl	8003522 <HAL_SPI_Receive>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000104 	.word	0x20000104

08000620 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <W5500_WriteBuff+0x24>)
 8000636:	f002 fe38 	bl	80032aa <HAL_SPI_Transmit>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000104 	.word	0x20000104

08000648 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd0 	bl	80005f8 <W5500_ReadBuff>
	return byte;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffd5 	bl	8000620 <W5500_WriteBuff>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e009      	b.n	80006a4 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff6d 	bl	8000578 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf1      	blt.n	8000690 <_write+0x12>
	}
	return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f001 fe25 	bl	800230c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f957 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f000 fa43 	bl	8000b50 <MX_GPIO_Init>
	MX_TIM2_Init();
 80006ca:	f000 f9f3 	bl	8000ab4 <MX_TIM2_Init>
	MX_SPI2_Init();
 80006ce:	f000 f9bb 	bl	8000a48 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	488a      	ldr	r0, [pc, #552]	; (8000900 <main+0x248>)
 80006d8:	f002 f930 	bl	800293c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 fe87 	bl	80023f0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4886      	ldr	r0, [pc, #536]	; (8000900 <main+0x248>)
 80006e8:	f002 f928 	bl	800293c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f001 fe7e 	bl	80023f0 <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80006f4:	4983      	ldr	r1, [pc, #524]	; (8000904 <main+0x24c>)
 80006f6:	4884      	ldr	r0, [pc, #528]	; (8000908 <main+0x250>)
 80006f8:	f001 fb5c 	bl	8001db4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80006fc:	4983      	ldr	r1, [pc, #524]	; (800090c <main+0x254>)
 80006fe:	4884      	ldr	r0, [pc, #528]	; (8000910 <main+0x258>)
 8000700:	f001 fb7e 	bl	8001e00 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000704:	4983      	ldr	r1, [pc, #524]	; (8000914 <main+0x25c>)
 8000706:	4884      	ldr	r0, [pc, #528]	; (8000918 <main+0x260>)
 8000708:	f001 fba6 	bl	8001e58 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 800070c:	4a83      	ldr	r2, [pc, #524]	; (800091c <main+0x264>)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fc4d 	bl	8001fc4 <wizchip_init>

	wizchip_setnetinfo(&gWIZNETINFO);
 800072a:	487d      	ldr	r0, [pc, #500]	; (8000920 <main+0x268>)
 800072c:	f001 fcd6 	bl	80020dc <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000730:	497b      	ldr	r1, [pc, #492]	; (8000920 <main+0x268>)
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fbbc 	bl	8001eb0 <ctlnetwork>
	HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f001 fe58 	bl	80023f0 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		printf("\r\n=== NET CONFIGURATION ===\r\n");
 8000740:	4878      	ldr	r0, [pc, #480]	; (8000924 <main+0x26c>)
 8000742:	f003 fe53 	bl	80043ec <puts>
		printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000746:	4b76      	ldr	r3, [pc, #472]	; (8000920 <main+0x268>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	4b74      	ldr	r3, [pc, #464]	; (8000920 <main+0x268>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	461c      	mov	r4, r3
 8000752:	4b73      	ldr	r3, [pc, #460]	; (8000920 <main+0x268>)
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	461d      	mov	r5, r3
 8000758:	4b71      	ldr	r3, [pc, #452]	; (8000920 <main+0x268>)
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	461a      	mov	r2, r3
 800075e:	4b70      	ldr	r3, [pc, #448]	; (8000920 <main+0x268>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4619      	mov	r1, r3
 8000764:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <main+0x268>)
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	9101      	str	r1, [sp, #4]
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	462b      	mov	r3, r5
 8000770:	4622      	mov	r2, r4
 8000772:	4601      	mov	r1, r0
 8000774:	486c      	ldr	r0, [pc, #432]	; (8000928 <main+0x270>)
 8000776:	f003 fdb3 	bl	80042e0 <iprintf>
		printf("IP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1],gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 800077a:	4b69      	ldr	r3, [pc, #420]	; (8000920 <main+0x268>)
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	4619      	mov	r1, r3
 8000780:	4b67      	ldr	r3, [pc, #412]	; (8000920 <main+0x268>)
 8000782:	79db      	ldrb	r3, [r3, #7]
 8000784:	461a      	mov	r2, r3
 8000786:	4b66      	ldr	r3, [pc, #408]	; (8000920 <main+0x268>)
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	4618      	mov	r0, r3
 800078c:	4b64      	ldr	r3, [pc, #400]	; (8000920 <main+0x268>)
 800078e:	7a5b      	ldrb	r3, [r3, #9]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	4603      	mov	r3, r0
 8000794:	4865      	ldr	r0, [pc, #404]	; (800092c <main+0x274>)
 8000796:	f003 fda3 	bl	80042e0 <iprintf>
		printf("GW: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1],gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 800079a:	4b61      	ldr	r3, [pc, #388]	; (8000920 <main+0x268>)
 800079c:	7b9b      	ldrb	r3, [r3, #14]
 800079e:	4619      	mov	r1, r3
 80007a0:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <main+0x268>)
 80007a2:	7bdb      	ldrb	r3, [r3, #15]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <main+0x268>)
 80007a8:	7c1b      	ldrb	r3, [r3, #16]
 80007aa:	4618      	mov	r0, r3
 80007ac:	4b5c      	ldr	r3, [pc, #368]	; (8000920 <main+0x268>)
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	4603      	mov	r3, r0
 80007b4:	485e      	ldr	r0, [pc, #376]	; (8000930 <main+0x278>)
 80007b6:	f003 fd93 	bl	80042e0 <iprintf>
		printf("SN: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1],gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 80007ba:	4b59      	ldr	r3, [pc, #356]	; (8000920 <main+0x268>)
 80007bc:	7a9b      	ldrb	r3, [r3, #10]
 80007be:	4619      	mov	r1, r3
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <main+0x268>)
 80007c2:	7adb      	ldrb	r3, [r3, #11]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b56      	ldr	r3, [pc, #344]	; (8000920 <main+0x268>)
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
 80007ca:	4618      	mov	r0, r3
 80007cc:	4b54      	ldr	r3, [pc, #336]	; (8000920 <main+0x268>)
 80007ce:	7b5b      	ldrb	r3, [r3, #13]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4603      	mov	r3, r0
 80007d4:	4857      	ldr	r0, [pc, #348]	; (8000934 <main+0x27c>)
 80007d6:	f003 fd83 	bl	80042e0 <iprintf>
		printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1],gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 80007da:	4b51      	ldr	r3, [pc, #324]	; (8000920 <main+0x268>)
 80007dc:	7c9b      	ldrb	r3, [r3, #18]
 80007de:	4619      	mov	r1, r3
 80007e0:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <main+0x268>)
 80007e2:	7cdb      	ldrb	r3, [r3, #19]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <main+0x268>)
 80007e8:	7d1b      	ldrb	r3, [r3, #20]
 80007ea:	4618      	mov	r0, r3
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <main+0x268>)
 80007ee:	7d5b      	ldrb	r3, [r3, #21]
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	4603      	mov	r3, r0
 80007f4:	4850      	ldr	r0, [pc, #320]	; (8000938 <main+0x280>)
 80007f6:	f003 fd73 	bl	80042e0 <iprintf>
		printf("=========================\r\n");
 80007fa:	4850      	ldr	r0, [pc, #320]	; (800093c <main+0x284>)
 80007fc:	f003 fdf6 	bl	80043ec <puts>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("Creating socket...\r\n");
 8000800:	484f      	ldr	r0, [pc, #316]	; (8000940 <main+0x288>)
 8000802:	f003 fdf3 	bl	80043ec <puts>
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0); // Создаем http сокет
 8000806:	2300      	movs	r3, #0
 8000808:	2250      	movs	r2, #80	; 0x50
 800080a:	2101      	movs	r1, #1
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fa47 	bl	8000ca0 <socket>
 8000812:	4603      	mov	r3, r0
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <main+0x28c>)
 8000818:	701a      	strb	r2, [r3, #0]
		if (stat != HTTP_SOCKET)
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <main+0x28c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <main+0x178>
			printf("socket() failed, code = %d\r\n", stat);
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <main+0x28c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <main+0x290>)
 800082a:	f003 fd59 	bl	80042e0 <iprintf>
 800082e:	e002      	b.n	8000836 <main+0x17e>
		else
			printf("Socket created, connecting...\r\n");
 8000830:	4846      	ldr	r0, [pc, #280]	; (800094c <main+0x294>)
 8000832:	f003 fddb 	bl	80043ec <puts>

		stat = listen(HTTP_SOCKET); // Слушаем созданный сокет http
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fbb6 	bl	8000fa8 <listen>
 800083c:	4603      	mov	r3, r0
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <main+0x28c>)
 8000842:	701a      	strb	r2, [r3, #0]
		if (stat != SOCK_OK)
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <main+0x28c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d006      	beq.n	800085a <main+0x1a2>
			printf("listen() failed, code = %d\r\n", stat);
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <main+0x28c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	483f      	ldr	r0, [pc, #252]	; (8000950 <main+0x298>)
 8000854:	f003 fd44 	bl	80042e0 <iprintf>
 8000858:	e006      	b.n	8000868 <main+0x1b0>
		else
			printf("listen() OK\r\n");
 800085a:	483e      	ldr	r0, [pc, #248]	; (8000954 <main+0x29c>)
 800085c:	f003 fdc6 	bl	80043ec <puts>

		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) { // В бесконечном цикле проверяем слушается ли
 8000860:	e002      	b.n	8000868 <main+0x1b0>
			HAL_Delay(2);// наш сокет или нет. Если слушают то подождем 2 милл.сек.
 8000862:	2002      	movs	r0, #2
 8000864:	f001 fdc4 	bl	80023f0 <HAL_Delay>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) { // В бесконечном цикле проверяем слушается ли
 8000868:	f44f 7042 	mov.w	r0, #776	; 0x308
 800086c:	f000 fff2 	bl	8001854 <WIZCHIP_READ>
 8000870:	4603      	mov	r3, r0
 8000872:	2b14      	cmp	r3, #20
 8000874:	d0f5      	beq.n	8000862 <main+0x1aa>
		}

		printf("Input connection\r\n"); // Если не слушают а устанавливают соединение то пишем что, у нас входящее соединение.
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <main+0x2a0>)
 8000878:	f003 fdb8 	bl	80043ec <puts>
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
 800087c:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000880:	f000 ffe8 	bl	8001854 <WIZCHIP_READ>
 8000884:	4603      	mov	r3, r0
 8000886:	2b17      	cmp	r3, #23
 8000888:	d002      	beq.n	8000890 <main+0x1d8>
			printf("Error socket status\r\n");
 800088a:	4834      	ldr	r0, [pc, #208]	; (800095c <main+0x2a4>)
 800088c:	f003 fdae 	bl	80043ec <puts>

		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	461a      	mov	r2, r3
 8000894:	2104      	movs	r1, #4
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fd50 	bl	800133c <getsockopt>
		printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]); // Вывод IP того кто с нами связался.
 800089c:	793b      	ldrb	r3, [r7, #4]
 800089e:	4619      	mov	r1, r3
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	461a      	mov	r2, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	4618      	mov	r0, r3
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4603      	mov	r3, r0
 80008ae:	482c      	ldr	r0, [pc, #176]	; (8000960 <main+0x2a8>)
 80008b0:	f003 fd16 	bl	80042e0 <iprintf>

		sprintf(Message, "input connection nr - %d", reqnr);
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <main+0x2ac>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	492b      	ldr	r1, [pc, #172]	; (8000968 <main+0x2b0>)
 80008bc:	482b      	ldr	r0, [pc, #172]	; (800096c <main+0x2b4>)
 80008be:	f003 fd9d 	bl	80043fc <siprintf>

		send(0, (uint8_t*) Message, strlen(Message)); // Отправляем сообщение тому кто открыл соединение с нами.
 80008c2:	482a      	ldr	r0, [pc, #168]	; (800096c <main+0x2b4>)
 80008c4:	f7ff fc84 	bl	80001d0 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4927      	ldr	r1, [pc, #156]	; (800096c <main+0x2b4>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fc39 	bl	8001148 <send>

		disconnect(HTTP_SOCKET);                      // Разрываем соединение
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fbc0 	bl	800105c <disconnect>

		printf("Closing socket.\r\n");
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <main+0x2b8>)
 80008de:	f003 fd85 	bl	80043ec <puts>
		close(HTTP_SOCKET);                           // Закрываем сокет
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 faf2 	bl	8000ecc <close>

		HAL_Delay(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ec:	f001 fd80 	bl	80023f0 <HAL_Delay>
		reqnr++;                                      // Увеличиваем счетчик.
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <main+0x2ac>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <main+0x2ac>)
 80008fa:	701a      	strb	r2, [r3, #0]
	while (1) {
 80008fc:	e720      	b.n	8000740 <main+0x88>
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	080005e1 	.word	0x080005e1
 8000908:	080005c9 	.word	0x080005c9
 800090c:	08000663 	.word	0x08000663
 8000910:	08000649 	.word	0x08000649
 8000914:	08000621 	.word	0x08000621
 8000918:	080005f9 	.word	0x080005f9
 800091c:	080057dc 	.word	0x080057dc
 8000920:	20000000 	.word	0x20000000
 8000924:	08005634 	.word	0x08005634
 8000928:	08005654 	.word	0x08005654
 800092c:	0800567c 	.word	0x0800567c
 8000930:	08005690 	.word	0x08005690
 8000934:	080056a4 	.word	0x080056a4
 8000938:	080056b8 	.word	0x080056b8
 800093c:	080056cc 	.word	0x080056cc
 8000940:	080056e8 	.word	0x080056e8
 8000944:	20000a28 	.word	0x20000a28
 8000948:	080056fc 	.word	0x080056fc
 800094c:	0800571c 	.word	0x0800571c
 8000950:	0800573c 	.word	0x0800573c
 8000954:	0800575c 	.word	0x0800575c
 8000958:	0800576c 	.word	0x0800576c
 800095c:	08005780 	.word	0x08005780
 8000960:	08005798 	.word	0x08005798
 8000964:	200009dc 	.word	0x200009dc
 8000968:	080057ac 	.word	0x080057ac
 800096c:	2000015c 	.word	0x2000015c
 8000970:	080057c8 	.word	0x080057c8

08000974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fca4 	bl	80042d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <SystemClock_Config+0xcc>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SystemClock_Config+0xd0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009e4:	2308      	movs	r3, #8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ffb9 	bl	8002970 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
		Error_Handler();
 8000a04:	f000 f946 	bl	8000c94 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2104      	movs	r1, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fa1a 	bl	8002e60 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a32:	f000 f92f 	bl	8000c94 <Error_Handler>
	}
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_SPI2_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI2_Init+0x64>)
 8000a9a:	f002 fb7d 	bl	8003198 <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000aa4:	f000 f8f6 	bl	8000c94 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000104 	.word	0x20000104
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 41999;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ada:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000ade:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000afc:	f003 f8f4 	bl	8003ce8 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000b06:	f000 f8c5 	bl	8000c94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b18:	f003 f935 	bl	8003d86 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x72>
		Error_Handler();
 8000b22:	f000 f8b7 	bl	8000c94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_TIM2_Init+0x98>)
 8000b34:	f003 fb26 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000b3e:	f000 f8a9 	bl	8000c94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200009e0 	.word	0x200009e0

08000b50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a45      	ldr	r2, [pc, #276]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a37      	ldr	r2, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x134>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4824      	ldr	r0, [pc, #144]	; (8000c88 <MX_GPIO_Init+0x138>)
 8000bf8:	f001 fea0 	bl	800293c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000c02:	f001 fe9b 	bl	800293c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <MX_GPIO_Init+0x140>)
 8000c0c:	f001 fe96 	bl	800293c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_GPIO_Init+0x138>)
 8000c28:	f001 fcec 	bl	8002604 <HAL_GPIO_Init>

	/*Configure GPIO pin : RST_Pin */
	GPIO_InitStruct.Pin = RST_Pin;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000c44:	f001 fcde 	bl	8002604 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_Pin */
	GPIO_InitStruct.Pin = INT_Pin;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000c5c:	f001 fcd2 	bl	8002604 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_GPIO_Init+0x140>)
 8000c78:	f001 fcc4 	bl	8002604 <HAL_GPIO_Init>

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40021000 	.word	0x40021000

08000c94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d902      	bls.n	8000cca <socket+0x2a>
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc8:	e0f2      	b.n	8000eb0 <socket+0x210>
	switch(protocol)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <socket+0x3c>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd11      	ble.n	8000cf8 <socket+0x58>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d80e      	bhi.n	8000cf8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000cda:	e011      	b.n	8000d00 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000ce8:	f000 fe4e 	bl	8001988 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <socket+0x5e>
 8000cf2:	f06f 0302 	mvn.w	r3, #2
 8000cf6:	e0db      	b.n	8000eb0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000cf8:	f06f 0304 	mvn.w	r3, #4
 8000cfc:	e0d8      	b.n	8000eb0 <socket+0x210>
	    break;
 8000cfe:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <socket+0x70>
 8000d0a:	f06f 0305 	mvn.w	r3, #5
 8000d0e:	e0cf      	b.n	8000eb0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d025      	beq.n	8000d62 <socket+0xc2>
	{
   	switch(protocol)
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d002      	beq.n	8000d22 <socket+0x82>
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d008      	beq.n	8000d32 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000d20:	e024      	b.n	8000d6c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d11c      	bne.n	8000d66 <socket+0xc6>
 8000d2c:	f06f 0305 	mvn.w	r3, #5
 8000d30:	e0be      	b.n	8000eb0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db02      	blt.n	8000d4a <socket+0xaa>
 8000d44:	f06f 0305 	mvn.w	r3, #5
 8000d48:	e0b2      	b.n	8000eb0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00a      	beq.n	8000d6a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db06      	blt.n	8000d6a <socket+0xca>
 8000d5c:	f06f 0305 	mvn.w	r3, #5
 8000d60:	e0a6      	b.n	8000eb0 <socket+0x210>
   	}
   }
 8000d62:	bf00      	nop
 8000d64:	e002      	b.n	8000d6c <socket+0xcc>
   	      break;
 8000d66:	bf00      	nop
 8000d68:	e000      	b.n	8000d6c <socket+0xcc>
   	      break;
 8000d6a:	bf00      	nop
	close(sn);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f8ac 	bl	8000ecc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	3301      	adds	r3, #1
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d82:	f023 030f 	bic.w	r3, r3, #15
 8000d86:	b25a      	sxtb	r2, r3
 8000d88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	f000 fdaa 	bl	80018ec <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <socket+0x120>
	{
	   port = sock_any_port++;
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <socket+0x218>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a44      	ldr	r2, [pc, #272]	; (8000eb8 <socket+0x218>)
 8000da8:	8011      	strh	r1, [r2, #0]
 8000daa:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <socket+0x218>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d103      	bne.n	8000dc0 <socket+0x120>
 8000db8:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <socket+0x218>)
 8000dba:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dbe:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dcc:	461a      	mov	r2, r3
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f000 fd87 	bl	80018ec <WIZCHIP_WRITE>
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	3301      	adds	r3, #1
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dea:	461a      	mov	r2, r3
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f000 fd7a 	bl	80018ec <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fd70 	bl	80018ec <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000e0c:	bf00      	nop
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	3301      	adds	r3, #1
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fd1a 	bl	8001854 <WIZCHIP_READ>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f3      	bne.n	8000e0e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <socket+0x21c>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <socket+0x21c>)
 8000e42:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <socket+0x21c>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <socket+0x21c>)
 8000e60:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2201      	movs	r2, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <socket+0x220>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <socket+0x220>)
 8000e7e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <socket+0x224>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <socket+0x228>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e92:	bf00      	nop
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fcd7 	bl	8001854 <WIZCHIP_READ>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f3      	beq.n	8000e94 <socket+0x1f4>
   return (int8_t)sn;
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	200000d4 	.word	0x200000d4
 8000ec0:	200000d6 	.word	0x200000d6
 8000ec4:	200000d8 	.word	0x200000d8
 8000ec8:	200000e8 	.word	0x200000e8

08000ecc <close>:

int8_t close(uint8_t sn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d902      	bls.n	8000ee2 <close+0x16>
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	e055      	b.n	8000f8e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000eee:	2110      	movs	r1, #16
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fcfb 	bl	80018ec <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000ef6:	bf00      	nop
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3301      	adds	r3, #1
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fca5 	bl	8001854 <WIZCHIP_READ>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f3      	bne.n	8000ef8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3301      	adds	r3, #1
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f1c:	211f      	movs	r1, #31
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fce4 	bl	80018ec <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <close+0xcc>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <close+0xcc>)
 8000f40:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <close+0xd0>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4013      	ands	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <close+0xd0>)
 8000f5e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <close+0xd4>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <close+0xd8>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000f72:	bf00      	nop
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	3301      	adds	r3, #1
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fc67 	bl	8001854 <WIZCHIP_READ>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f3      	bne.n	8000f74 <close+0xa8>
	return SOCK_OK;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000d4 	.word	0x200000d4
 8000f9c:	200000d6 	.word	0x200000d6
 8000fa0:	200000d8 	.word	0x200000d8
 8000fa4:	200000e8 	.word	0x200000e8

08000fa8 <listen>:

int8_t listen(uint8_t sn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d902      	bls.n	8000fbe <listen+0x16>
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	e049      	b.n	8001052 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fc44 	bl	8001854 <WIZCHIP_READ>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d002      	beq.n	8000fdc <listen+0x34>
 8000fd6:	f06f 0304 	mvn.w	r3, #4
 8000fda:	e03a      	b.n	8001052 <listen+0xaa>
	CHECK_SOCKINIT();
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fc33 	bl	8001854 <WIZCHIP_READ>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b13      	cmp	r3, #19
 8000ff2:	d002      	beq.n	8000ffa <listen+0x52>
 8000ff4:	f06f 0302 	mvn.w	r3, #2
 8000ff8:	e02b      	b.n	8001052 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3301      	adds	r3, #1
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001006:	2102      	movs	r1, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fc6f 	bl	80018ec <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800100e:	bf00      	nop
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	3301      	adds	r3, #1
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fc19 	bl	8001854 <WIZCHIP_READ>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f3      	bne.n	8001010 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001028:	e006      	b.n	8001038 <listen+0x90>
   {
         close(sn);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff4d 	bl	8000ecc <close>
         return SOCKERR_SOCKCLOSED;
 8001032:	f06f 0303 	mvn.w	r3, #3
 8001036:	e00c      	b.n	8001052 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	3301      	adds	r3, #1
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc05 	bl	8001854 <WIZCHIP_READ>
 800104a:	4603      	mov	r3, r0
 800104c:	2b14      	cmp	r3, #20
 800104e:	d1ec      	bne.n	800102a <listen+0x82>
   }
   return SOCK_OK;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d902      	bls.n	8001072 <disconnect+0x16>
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	e062      	b.n	8001138 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3301      	adds	r3, #1
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fbea 	bl	8001854 <WIZCHIP_READ>
 8001080:	4603      	mov	r3, r0
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <disconnect+0x34>
 800108a:	f06f 0304 	mvn.w	r3, #4
 800108e:	e053      	b.n	8001138 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3301      	adds	r3, #1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800109c:	2108      	movs	r1, #8
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fc24 	bl	80018ec <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80010a4:	bf00      	nop
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	3301      	adds	r3, #1
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fbce 	bl	8001854 <WIZCHIP_READ>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f3      	bne.n	80010a6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2201      	movs	r2, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <disconnect+0xe4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4013      	ands	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <disconnect+0xe4>)
 80010da:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <disconnect+0xe8>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d016      	beq.n	800111e <disconnect+0xc2>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e021      	b.n	8001138 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3301      	adds	r3, #1
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fba7 	bl	8001854 <WIZCHIP_READ>
 8001106:	4603      	mov	r3, r0
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <disconnect+0xc2>
	   {
	      close(sn);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff feda 	bl	8000ecc <close>
	      return SOCKERR_TIMEOUT;
 8001118:	f06f 030c 	mvn.w	r3, #12
 800111c:	e00c      	b.n	8001138 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	3301      	adds	r3, #1
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fb92 	bl	8001854 <WIZCHIP_READ>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1de      	bne.n	80010f4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000d6 	.word	0x200000d6
 8001144:	200000d4 	.word	0x200000d4

08001148 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800115c:	2300      	movs	r3, #0
 800115e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d902      	bls.n	800116c <send+0x24>
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116a:	e0de      	b.n	800132a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	3301      	adds	r3, #1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fb6d 	bl	8001854 <WIZCHIP_READ>
 800117a:	4603      	mov	r3, r0
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	2b01      	cmp	r3, #1
 8001182:	d002      	beq.n	800118a <send+0x42>
 8001184:	f06f 0304 	mvn.w	r3, #4
 8001188:	e0cf      	b.n	800132a <send+0x1e2>
   CHECK_SOCKDATA();
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <send+0x4e>
 8001190:	f06f 030d 	mvn.w	r3, #13
 8001194:	e0c9      	b.n	800132a <send+0x1e2>
   tmp = getSn_SR(sn);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	3301      	adds	r3, #1
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fb56 	bl	8001854 <WIZCHIP_READ>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b17      	cmp	r3, #23
 80011b0:	d005      	beq.n	80011be <send+0x76>
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b1c      	cmp	r3, #28
 80011b6:	d002      	beq.n	80011be <send+0x76>
 80011b8:	f06f 0306 	mvn.w	r3, #6
 80011bc:	e0b5      	b.n	800132a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <send+0x1ec>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	fa42 f303 	asr.w	r3, r2, r3
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d039      	beq.n	8001246 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	3301      	adds	r3, #1
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fb38 	bl	8001854 <WIZCHIP_READ>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	3301      	adds	r3, #1
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001202:	2110      	movs	r1, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fb71 	bl	80018ec <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2201      	movs	r2, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	b21b      	sxth	r3, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <send+0x1ec>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4013      	ands	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <send+0x1ec>)
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e00d      	b.n	8001246 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <send+0xfa>
      {
         close(sn);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fe48 	bl	8000ecc <close>
         return SOCKERR_TIMEOUT;
 800123c:	f06f 030c 	mvn.w	r3, #12
 8001240:	e073      	b.n	800132a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001242:	2300      	movs	r3, #0
 8001244:	e071      	b.n	800132a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	3301      	adds	r3, #1
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fafe 	bl	8001854 <WIZCHIP_READ>
 8001258:	4603      	mov	r3, r0
 800125a:	b29b      	uxth	r3, r3
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89bb      	ldrh	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d901      	bls.n	800126c <send+0x124>
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fc4a 	bl	8001b08 <getSn_TX_FSR>
 8001274:	4603      	mov	r3, r0
 8001276:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3301      	adds	r3, #1
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fae5 	bl	8001854 <WIZCHIP_READ>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b17      	cmp	r3, #23
 8001292:	d009      	beq.n	80012a8 <send+0x160>
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b1c      	cmp	r3, #28
 8001298:	d006      	beq.n	80012a8 <send+0x160>
      {
         close(sn);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe15 	bl	8000ecc <close>
         return SOCKERR_SOCKSTATUS;
 80012a2:	f06f 0306 	mvn.w	r3, #6
 80012a6:	e040      	b.n	800132a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <send+0x1f0>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	fa42 f303 	asr.w	r3, r2, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <send+0x180>
 80012bc:	88ba      	ldrh	r2, [r7, #4]
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d901      	bls.n	80012c8 <send+0x180>
 80012c4:	2300      	movs	r3, #0
 80012c6:	e030      	b.n	800132a <send+0x1e2>
      if(len <= freesize) break;
 80012c8:	88ba      	ldrh	r2, [r7, #4]
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d900      	bls.n	80012d2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80012d0:	e7cc      	b.n	800126c <send+0x124>
      if(len <= freesize) break;
 80012d2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80012d4:	88ba      	ldrh	r2, [r7, #4]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fcaa 	bl	8001c34 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3301      	adds	r3, #1
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012ec:	2120      	movs	r1, #32
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fafc 	bl	80018ec <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80012f4:	bf00      	nop
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3301      	adds	r3, #1
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001302:	4618      	mov	r0, r3
 8001304:	f000 faa6 	bl	8001854 <WIZCHIP_READ>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f3      	bne.n	80012f6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2201      	movs	r2, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <send+0x1ec>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <send+0x1ec>)
 8001326:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001328:	88bb      	ldrh	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000d6 	.word	0x200000d6
 8001338:	200000d4 	.word	0x200000d4

0800133c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	603a      	str	r2, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d902      	bls.n	8001358 <getsockopt+0x1c>
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001356:	e101      	b.n	800155c <getsockopt+0x220>
   switch(sotype)
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	f200 80fa 	bhi.w	8001554 <getsockopt+0x218>
 8001360:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <getsockopt+0x2c>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	0800139d 	.word	0x0800139d
 800136c:	080013b9 	.word	0x080013b9
 8001370:	080013d5 	.word	0x080013d5
 8001374:	080013f1 	.word	0x080013f1
 8001378:	0800142b 	.word	0x0800142b
 800137c:	08001443 	.word	0x08001443
 8001380:	08001555 	.word	0x08001555
 8001384:	0800147d 	.word	0x0800147d
 8001388:	080014b7 	.word	0x080014b7
 800138c:	080014c9 	.word	0x080014c9
 8001390:	080014db 	.word	0x080014db
 8001394:	080014f7 	.word	0x080014f7
 8001398:	0800152f 	.word	0x0800152f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	3301      	adds	r3, #1
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fa55 	bl	8001854 <WIZCHIP_READ>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f023 030f 	bic.w	r3, r3, #15
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
         break;
 80013b6:	e0d0      	b.n	800155a <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3301      	adds	r3, #1
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fa45 	bl	8001854 <WIZCHIP_READ>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
         break;
 80013d2:	e0c2      	b.n	800155a <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3301      	adds	r3, #1
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa37 	bl	8001854 <WIZCHIP_READ>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	701a      	strb	r2, [r3, #0]
         break;
 80013ee:	e0b4      	b.n	800155a <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	3301      	adds	r3, #1
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fa29 	bl	8001854 <WIZCHIP_READ>
 8001402:	4603      	mov	r3, r0
 8001404:	b29b      	uxth	r3, r3
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b29c      	uxth	r4, r3
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	3301      	adds	r3, #1
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fa1c 	bl	8001854 <WIZCHIP_READ>
 800141c:	4603      	mov	r3, r0
 800141e:	b29b      	uxth	r3, r3
 8001420:	4423      	add	r3, r4
 8001422:	b29a      	uxth	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	801a      	strh	r2, [r3, #0]
         break;
 8001428:	e097      	b.n	800155a <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	3301      	adds	r3, #1
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001436:	2204      	movs	r2, #4
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 faa4 	bl	8001988 <WIZCHIP_READ_BUF>
         break;
 8001440:	e08b      	b.n	800155a <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3301      	adds	r3, #1
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fa00 	bl	8001854 <WIZCHIP_READ>
 8001454:	4603      	mov	r3, r0
 8001456:	b29b      	uxth	r3, r3
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b29c      	uxth	r4, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	3301      	adds	r3, #1
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f9f3 	bl	8001854 <WIZCHIP_READ>
 800146e:	4603      	mov	r3, r0
 8001470:	b29b      	uxth	r3, r3
 8001472:	4423      	add	r3, r4
 8001474:	b29a      	uxth	r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	801a      	strh	r2, [r3, #0]
         break;
 800147a:	e06e      	b.n	800155a <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	3301      	adds	r3, #1
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f9e5 	bl	8001854 <WIZCHIP_READ>
 800148a:	4603      	mov	r3, r0
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	2b01      	cmp	r3, #1
 8001492:	d002      	beq.n	800149a <getsockopt+0x15e>
 8001494:	f06f 0304 	mvn.w	r3, #4
 8001498:	e060      	b.n	800155c <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3301      	adds	r3, #1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f9d4 	bl	8001854 <WIZCHIP_READ>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	801a      	strh	r2, [r3, #0]
         break;
 80014b4:	e051      	b.n	800155a <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fb25 	bl	8001b08 <getSn_TX_FSR>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	801a      	strh	r2, [r3, #0]
         break;
 80014c6:	e048      	b.n	800155a <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fb67 	bl	8001b9e <getSn_RX_RSR>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	801a      	strh	r2, [r3, #0]
         break;
 80014d8:	e03f      	b.n	800155a <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	3301      	adds	r3, #1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f9b4 	bl	8001854 <WIZCHIP_READ>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
         break;
 80014f4:	e031      	b.n	800155a <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	3301      	adds	r3, #1
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f9a8 	bl	8001854 <WIZCHIP_READ>
 8001504:	4603      	mov	r3, r0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fb44 	bl	8001b9e <getSn_RX_RSR>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800151e:	e01c      	b.n	800155a <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <getsockopt+0x228>)
 8001524:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	801a      	strh	r2, [r3, #0]
         break;
 800152c:	e015      	b.n	800155a <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3301      	adds	r3, #1
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f98c 	bl	8001854 <WIZCHIP_READ>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8001542:	f06f 0304 	mvn.w	r3, #4
 8001546:	e009      	b.n	800155c <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <getsockopt+0x22c>)
 800154c:	5cd2      	ldrb	r2, [r2, r3]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	701a      	strb	r2, [r3, #0]
         break;
 8001552:	e002      	b.n	800155a <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8001554:	f06f 0301 	mvn.w	r3, #1
 8001558:	e000      	b.n	800155c <getsockopt+0x220>
   }
   return SOCK_OK;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	200000d8 	.word	0x200000d8
 8001568:	200000e8 	.word	0x200000e8

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_SPI_MspInit+0xc0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d14a      	bne.n	8001674 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <HAL_SPI_MspInit+0xc8>)
 800164e:	f000 ffd9 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001664:	2305      	movs	r3, #5
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_SPI_MspInit+0xcc>)
 8001670:	f000 ffc8 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40003800 	.word	0x40003800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d10d      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 fe4a 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
	}

return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:
	}
	return len;
}

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
	return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f002 fd42 	bl	800427c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20020000 	.word	0x20020000
 8001824:	00000400 	.word	0x00000400
 8001828:	200000f0 	.word	0x200000f0
 800182c:	20000a40 	.word	0x20000a40

08001830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <WIZCHIP_READ+0x94>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <WIZCHIP_READ+0x94>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <WIZCHIP_READ+0x94>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <WIZCHIP_READ+0x24>
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <WIZCHIP_READ+0x94>)
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d114      	bne.n	80018a2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <WIZCHIP_READ+0x94>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	0c12      	lsrs	r2, r2, #16
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	4610      	mov	r0, r2
 8001884:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <WIZCHIP_READ+0x94>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	0a12      	lsrs	r2, r2, #8
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	4610      	mov	r0, r2
 8001892:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <WIZCHIP_READ+0x94>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	4610      	mov	r0, r2
 800189e:	4798      	blx	r3
 80018a0:	e011      	b.n	80018c6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <WIZCHIP_READ+0x94>)
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	f107 020c 	add.w	r2, r7, #12
 80018c0:	2103      	movs	r1, #3
 80018c2:	4610      	mov	r0, r2
 80018c4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <WIZCHIP_READ+0x94>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4798      	blx	r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <WIZCHIP_READ+0x94>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <WIZCHIP_READ+0x94>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	4798      	blx	r3
   return ret;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000020 	.word	0x20000020

080018ec <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <WIZCHIP_WRITE+0x98>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <WIZCHIP_WRITE+0x98>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d119      	bne.n	8001948 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	0c12      	lsrs	r2, r2, #16
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	4610      	mov	r0, r2
 8001920:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	0a12      	lsrs	r2, r2, #8
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	4610      	mov	r0, r2
 800192e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	4610      	mov	r0, r2
 800193a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <WIZCHIP_WRITE+0x98>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	4610      	mov	r0, r2
 8001944:	4798      	blx	r3
 8001946:	e013      	b.n	8001970 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	b2db      	uxtb	r3, r3
 800194e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b2db      	uxtb	r3, r3
 8001956:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f107 020c 	add.w	r2, r7, #12
 800196a:	2104      	movs	r1, #4
 800196c:	4610      	mov	r0, r2
 800196e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <WIZCHIP_WRITE+0x98>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4798      	blx	r3
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000020 	.word	0x20000020

08001988 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <WIZCHIP_READ_BUF+0x2a>
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d126      	bne.n	8001a00 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	0c12      	lsrs	r2, r2, #16
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	4610      	mov	r0, r2
 80019be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	0a12      	lsrs	r2, r2, #8
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4610      	mov	r0, r2
 80019cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4610      	mov	r0, r2
 80019d8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	82fb      	strh	r3, [r7, #22]
 80019de:	e00a      	b.n	80019f6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	8afa      	ldrh	r2, [r7, #22]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	188c      	adds	r4, r1, r2
 80019ea:	4798      	blx	r3
 80019ec:	4603      	mov	r3, r0
 80019ee:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	3301      	adds	r3, #1
 80019f4:	82fb      	strh	r3, [r7, #22]
 80019f6:	8afa      	ldrh	r2, [r7, #22]
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3f0      	bcc.n	80019e0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019fe:	e017      	b.n	8001a30 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f107 0210 	add.w	r2, r7, #16
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4610      	mov	r0, r2
 8001a22:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a36:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <WIZCHIP_READ_BUF+0xbc>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	4798      	blx	r3
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	20000020 	.word	0x20000020

08001a48 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d126      	bne.n	8001ac0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	0c12      	lsrs	r2, r2, #16
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	0a12      	lsrs	r2, r2, #8
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	4610      	mov	r0, r2
 8001a98:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e00a      	b.n	8001ab6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	8afa      	ldrh	r2, [r7, #22]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	4610      	mov	r0, r2
 8001aae:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001ab0:	8afb      	ldrh	r3, [r7, #22]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	82fb      	strh	r3, [r7, #22]
 8001ab6:	8afa      	ldrh	r2, [r7, #22]
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3f0      	bcc.n	8001aa0 <WIZCHIP_WRITE_BUF+0x58>
 8001abe:	e017      	b.n	8001af0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f107 0210 	add.w	r2, r7, #16
 8001ade:	2103      	movs	r1, #3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	4611      	mov	r1, r2
 8001aec:	68b8      	ldr	r0, [r7, #8]
 8001aee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <WIZCHIP_WRITE_BUF+0xbc>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	4798      	blx	r3
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000020 	.word	0x20000020

08001b08 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	81fb      	strh	r3, [r7, #14]
 8001b16:	2300      	movs	r3, #0
 8001b18:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3301      	adds	r3, #1
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe94 	bl	8001854 <WIZCHIP_READ>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b29c      	uxth	r4, r3
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe86 	bl	8001854 <WIZCHIP_READ>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4423      	add	r3, r4
 8001b4e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001b50:	89bb      	ldrh	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01a      	beq.n	8001b8c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe76 	bl	8001854 <WIZCHIP_READ>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b29c      	uxth	r4, r3
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	3301      	adds	r3, #1
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe68 	bl	8001854 <WIZCHIP_READ>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4423      	add	r3, r4
 8001b8a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1c2      	bne.n	8001b1a <getSn_TX_FSR+0x12>
   return val;
 8001b94:	89fb      	ldrh	r3, [r7, #14]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}

08001b9e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001b9e:	b590      	push	{r4, r7, lr}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	81fb      	strh	r3, [r7, #14]
 8001bac:	2300      	movs	r3, #0
 8001bae:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe49 	bl	8001854 <WIZCHIP_READ>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001bc6:	89bb      	ldrh	r3, [r7, #12]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b29c      	uxth	r4, r3
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fe3b 	bl	8001854 <WIZCHIP_READ>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4423      	add	r3, r4
 8001be4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001be6:	89bb      	ldrh	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01a      	beq.n	8001c22 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe2b 	bl	8001854 <WIZCHIP_READ>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b29c      	uxth	r4, r3
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe1d 	bl	8001854 <WIZCHIP_READ>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4423      	add	r3, r4
 8001c20:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001c22:	89fa      	ldrh	r2, [r7, #14]
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d1c2      	bne.n	8001bb0 <getSn_RX_RSR+0x12>
   return val;
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}

08001c34 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
 8001c40:	4613      	mov	r3, r2
 8001c42:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d048      	beq.n	8001ce4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3301      	adds	r3, #1
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fdf8 	bl	8001854 <WIZCHIP_READ>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	b29c      	uxth	r4, r3
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3301      	adds	r3, #1
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fdeb 	bl	8001854 <WIZCHIP_READ>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4423      	add	r3, r4
 8001c84:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001c86:	89fb      	ldrh	r3, [r7, #14]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	3202      	adds	r2, #2
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001c96:	88bb      	ldrh	r3, [r7, #4]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f7ff fed3 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001ca2:	89fa      	ldrh	r2, [r7, #14]
 8001ca4:	88bb      	ldrh	r3, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3301      	adds	r3, #1
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff fe12 	bl	80018ec <WIZCHIP_WRITE>
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	3301      	adds	r3, #1
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7ff fe05 	bl	80018ec <WIZCHIP_WRITE>
 8001ce2:	e000      	b.n	8001ce6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001ce4:	bf00      	nop
}
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	2300      	movs	r3, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <reg_wizchip_cs_cbfunc+0x16>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <reg_wizchip_cs_cbfunc+0x40>)
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <reg_wizchip_cs_cbfunc+0x44>)
 8001dce:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <reg_wizchip_cs_cbfunc+0x40>)
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <reg_wizchip_cs_cbfunc+0x48>)
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	e006      	b.n	8001de6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <reg_wizchip_cs_cbfunc+0x40>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <reg_wizchip_cs_cbfunc+0x40>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6193      	str	r3, [r2, #24]
   }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000020 	.word	0x20000020
 8001df8:	08001d09 	.word	0x08001d09
 8001dfc:	08001d17 	.word	0x08001d17

08001e00 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e0a:	bf00      	nop
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <reg_wizchip_spi_cbfunc+0x4c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f9      	beq.n	8001e0c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <reg_wizchip_spi_cbfunc+0x24>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <reg_wizchip_spi_cbfunc+0x4c>)
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <reg_wizchip_spi_cbfunc+0x50>)
 8001e28:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <reg_wizchip_spi_cbfunc+0x4c>)
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <reg_wizchip_spi_cbfunc+0x54>)
 8001e2e:	621a      	str	r2, [r3, #32]
 8001e30:	e006      	b.n	8001e40 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001e32:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <reg_wizchip_spi_cbfunc+0x4c>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <reg_wizchip_spi_cbfunc+0x4c>)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6213      	str	r3, [r2, #32]
   }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	08001d5d 	.word	0x08001d5d
 8001e54:	08001d6d 	.word	0x08001d6d

08001e58 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e62:	bf00      	nop
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f9      	beq.n	8001e64 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <reg_wizchip_spiburst_cbfunc+0x24>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <reg_wizchip_spiburst_cbfunc+0x54>)
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
 8001e88:	e006      	b.n	8001e98 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001e8a:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	08001d83 	.word	0x08001d83
 8001eac:	08001d9b 	.word	0x08001d9b

08001eb0 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d82c      	bhi.n	8001f1c <ctlnetwork+0x6c>
 8001ec2:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <ctlnetwork+0x18>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ee9 	.word	0x08001ee9
 8001ed0:	08001ef1 	.word	0x08001ef1
 8001ed4:	08001eff 	.word	0x08001eff
 8001ed8:	08001f0d 	.word	0x08001f0d
 8001edc:	08001f15 	.word	0x08001f15
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	f000 f8fb 	bl	80020dc <wizchip_setnetinfo>
         break;
 8001ee6:	e01c      	b.n	8001f22 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f000 f937 	bl	800215c <wizchip_getnetinfo>
         break;
 8001eee:	e018      	b.n	8001f22 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f971 	bl	80021dc <wizchip_setnetmode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	e012      	b.n	8001f24 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001efe:	f000 f98f 	bl	8002220 <wizchip_getnetmode>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
         break;
 8001f0a:	e00a      	b.n	8001f22 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001f0c:	6838      	ldr	r0, [r7, #0]
 8001f0e:	f000 f98f 	bl	8002230 <wizchip_settimeout>
         break;
 8001f12:	e006      	b.n	8001f22 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f000 f9ac 	bl	8002272 <wizchip_gettimeout>
         break;
 8001f1a:	e002      	b.n	8001f22 <ctlnetwork+0x72>
      default:
         return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	e000      	b.n	8001f24 <ctlnetwork+0x74>
   }
   return 0;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2206      	movs	r2, #6
 8001f36:	4619      	mov	r1, r3
 8001f38:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f3c:	f7ff fd24 	bl	8001988 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2204      	movs	r2, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f4c:	f7ff fd1c 	bl	8001988 <WIZCHIP_READ_BUF>
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	2204      	movs	r2, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f5c:	f7ff fd14 	bl	8001988 <WIZCHIP_READ_BUF>
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2204      	movs	r2, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f6c:	f7ff fd0c 	bl	8001988 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fcba 	bl	80018ec <WIZCHIP_WRITE>
   getMR(); // for delay
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fc6b 	bl	8001854 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2206      	movs	r2, #6
 8001f82:	4619      	mov	r1, r3
 8001f84:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f88:	f7ff fd5e 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2204      	movs	r2, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f98:	f7ff fd56 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fa8:	f7ff fd4e 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fb8:	f7ff fd46 	bl	8001a48 <WIZCHIP_WRITE_BUF>
}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001fd2:	f7ff ffab 	bl	8001f2c <wizchip_sw_reset>
   if(txsize)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03b      	beq.n	8002054 <wizchip_init+0x90>
   {
      tmp = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e015      	b.n	8002012 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	dd02      	ble.n	8002006 <wizchip_init+0x42>
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002004:	e066      	b.n	80020d4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	2b07      	cmp	r3, #7
 8002018:	dde5      	ble.n	8001fe6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e015      	b.n	800204c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	3301      	adds	r3, #1
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800202e:	4618      	mov	r0, r3
 8002030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	f7ff fc56 	bl	80018ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	2b07      	cmp	r3, #7
 8002052:	dde5      	ble.n	8002020 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03b      	beq.n	80020d2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e015      	b.n	8002090 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4413      	add	r3, r2
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	4413      	add	r3, r2
 8002072:	b2db      	uxtb	r3, r3
 8002074:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800207a:	2b10      	cmp	r3, #16
 800207c:	dd02      	ble.n	8002084 <wizchip_init+0xc0>
 800207e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002082:	e027      	b.n	80020d4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	2b07      	cmp	r3, #7
 8002096:	dde5      	ble.n	8002064 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e015      	b.n	80020ca <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3301      	adds	r3, #1
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80020ac:	4618      	mov	r0, r3
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7ff fc17 	bl	80018ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	dde5      	ble.n	800209e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2206      	movs	r2, #6
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020ee:	f7ff fcab 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	330e      	adds	r3, #14
 80020f6:	2204      	movs	r2, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020fe:	f7ff fca3 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	330a      	adds	r3, #10
 8002106:	2204      	movs	r2, #4
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800210e:	f7ff fc9b 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3306      	adds	r3, #6
 8002116:	2204      	movs	r2, #4
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800211e:	f7ff fc93 	bl	8001a48 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7c9a      	ldrb	r2, [r3, #18]
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <wizchip_setnetinfo+0x78>)
 8002128:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7cda      	ldrb	r2, [r3, #19]
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <wizchip_setnetinfo+0x78>)
 8002130:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7d1a      	ldrb	r2, [r3, #20]
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <wizchip_setnetinfo+0x78>)
 8002138:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7d5a      	ldrb	r2, [r3, #21]
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <wizchip_setnetinfo+0x78>)
 8002140:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7d9a      	ldrb	r2, [r3, #22]
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <wizchip_setnetinfo+0x7c>)
 8002148:	701a      	strb	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200000f4 	.word	0x200000f4
 8002158:	200000f8 	.word	0x200000f8

0800215c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2206      	movs	r2, #6
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800216e:	f7ff fc0b 	bl	8001988 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	330e      	adds	r3, #14
 8002176:	2204      	movs	r2, #4
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800217e:	f7ff fc03 	bl	8001988 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	330a      	adds	r3, #10
 8002186:	2204      	movs	r2, #4
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800218e:	f7ff fbfb 	bl	8001988 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3306      	adds	r3, #6
 8002196:	2204      	movs	r2, #4
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800219e:	f7ff fbf3 	bl	8001988 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <wizchip_getnetinfo+0x78>)
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <wizchip_getnetinfo+0x78>)
 80021ac:	785a      	ldrb	r2, [r3, #1]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <wizchip_getnetinfo+0x78>)
 80021b4:	789a      	ldrb	r2, [r3, #2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <wizchip_getnetinfo+0x78>)
 80021bc:	78da      	ldrb	r2, [r3, #3]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <wizchip_getnetinfo+0x7c>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	759a      	strb	r2, [r3, #22]
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000f4 	.word	0x200000f4
 80021d8:	200000f8 	.word	0x200000f8

080021dc <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <wizchip_setnetmode+0x1e>
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f8:	e00e      	b.n	8002218 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fb2a 	bl	8001854 <WIZCHIP_READ>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4313      	orrs	r3, r2
 800220a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4619      	mov	r1, r3
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff fb6b 	bl	80018ec <WIZCHIP_WRITE>
   return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff fb15 	bl	8001854 <WIZCHIP_READ>
 800222a:	4603      	mov	r3, r0
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}

08002230 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002242:	f7ff fb53 	bl	80018ec <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	885b      	ldrh	r3, [r3, #2]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002256:	f7ff fb49 	bl	80018ec <WIZCHIP_WRITE>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	885b      	ldrh	r3, [r3, #2]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002266:	f7ff fb41 	bl	80018ec <WIZCHIP_WRITE>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002272:	b590      	push	{r4, r7, lr}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800227a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800227e:	f7ff fae9 	bl	8001854 <WIZCHIP_READ>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800228a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800228e:	f7ff fae1 	bl	8001854 <WIZCHIP_READ>
 8002292:	4603      	mov	r3, r0
 8002294:	b29b      	uxth	r3, r3
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b29c      	uxth	r4, r3
 800229a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800229e:	f7ff fad9 	bl	8001854 <WIZCHIP_READ>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4423      	add	r3, r4
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	805a      	strh	r2, [r3, #2]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}
	...

080022b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022e2:	f7ff faa5 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f001 ffcf 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ea:	f7fe f9e5 	bl	80006b8 <main>
  bx  lr    
 80022ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80022fc:	0800589c 	.word	0x0800589c
  ldr r2, =_sbss
 8002300:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002304:	20000a40 	.word	0x20000a40

08002308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f931 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff f914 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f93b 	bl	80025ea <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f000 f911 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000001c 	.word	0x2000001c
 80023a8:	20000050 	.word	0x20000050
 80023ac:	2000004c 	.word	0x2000004c

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000050 	.word	0x20000050
 80023d4:	20000a2c 	.word	0x20000a2c

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000a2c 	.word	0x20000a2c

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000050 	.word	0x20000050

08002438 <__NVIC_SetPriorityGrouping>:
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_SetPriority>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff47 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff5c 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffb0 	bl	8002558 <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e16b      	b.n	80028f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 815a 	bne.w	80028f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d005      	beq.n	8002656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	2b02      	cmp	r3, #2
 8002654:	d130      	bne.n	80026b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0201 	and.w	r2, r3, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d017      	beq.n	80026f4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80b4 	beq.w	80028f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b60      	ldr	r3, [pc, #384]	; (8002910 <HAL_GPIO_Init+0x30c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a5f      	ldr	r2, [pc, #380]	; (8002910 <HAL_GPIO_Init+0x30c>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_GPIO_Init+0x30c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_GPIO_Init+0x310>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_GPIO_Init+0x314>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d02b      	beq.n	800282a <HAL_GPIO_Init+0x226>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a51      	ldr	r2, [pc, #324]	; (800291c <HAL_GPIO_Init+0x318>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d025      	beq.n	8002826 <HAL_GPIO_Init+0x222>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a50      	ldr	r2, [pc, #320]	; (8002920 <HAL_GPIO_Init+0x31c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01f      	beq.n	8002822 <HAL_GPIO_Init+0x21e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <HAL_GPIO_Init+0x320>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d019      	beq.n	800281e <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <HAL_GPIO_Init+0x324>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_GPIO_Init+0x328>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <HAL_GPIO_Init+0x32c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_GPIO_Init+0x330>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x20a>
 800280a:	2307      	movs	r3, #7
 800280c:	e00e      	b.n	800282c <HAL_GPIO_Init+0x228>
 800280e:	2308      	movs	r3, #8
 8002810:	e00c      	b.n	800282c <HAL_GPIO_Init+0x228>
 8002812:	2306      	movs	r3, #6
 8002814:	e00a      	b.n	800282c <HAL_GPIO_Init+0x228>
 8002816:	2305      	movs	r3, #5
 8002818:	e008      	b.n	800282c <HAL_GPIO_Init+0x228>
 800281a:	2304      	movs	r3, #4
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x228>
 800281e:	2303      	movs	r3, #3
 8002820:	e004      	b.n	800282c <HAL_GPIO_Init+0x228>
 8002822:	2302      	movs	r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_Init+0x228>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x228>
 800282a:	2300      	movs	r3, #0
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f002 0203 	and.w	r2, r2, #3
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4093      	lsls	r3, r2
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <HAL_GPIO_Init+0x310>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_GPIO_Init+0x334>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800286e:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_GPIO_Init+0x334>)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_GPIO_Init+0x334>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002898:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_GPIO_Init+0x334>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_GPIO_Init+0x334>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x334>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_GPIO_Init+0x334>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_GPIO_Init+0x334>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	f67f ae90 	bls.w	8002620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40013800 	.word	0x40013800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40021400 	.word	0x40021400
 8002930:	40021800 	.word	0x40021800
 8002934:	40021c00 	.word	0x40021c00
 8002938:	40013c00 	.word	0x40013c00

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002958:	e003      	b.n	8002962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e264      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d075      	beq.n	8002a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298e:	4ba3      	ldr	r3, [pc, #652]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d00c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299a:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d112      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b9d      	ldr	r3, [pc, #628]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b2:	d10b      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b99      	ldr	r3, [pc, #612]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <HAL_RCC_OscConfig+0x108>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d157      	bne.n	8002a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e23f      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x74>
 80029d6:	4b91      	ldr	r3, [pc, #580]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a90      	ldr	r2, [pc, #576]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x98>
 80029ee:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a8a      	ldr	r2, [pc, #552]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a87      	ldr	r2, [pc, #540]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 8002a08:	4b84      	ldr	r3, [pc, #528]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a83      	ldr	r2, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fcd6 	bl	80023d8 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff fcd2 	bl	80023d8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e204      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xc0>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff fcc2 	bl	80023d8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a58:	f7ff fcbe 	bl	80023d8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1f0      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0xe8>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a86:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x152>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1c4      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4952      	ldr	r1, [pc, #328]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e03a      	b.n	8002b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <HAL_RCC_OscConfig+0x2b0>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fc77 	bl	80023d8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aee:	f7ff fc73 	bl	80023d8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1a5      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4940      	ldr	r1, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_OscConfig+0x2b0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7ff fc56 	bl	80023d8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b30:	f7ff fc52 	bl	80023d8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e184      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d030      	beq.n	8002bbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <HAL_RCC_OscConfig+0x2b4>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fc36 	bl	80023d8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff fc32 	bl	80023d8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e164      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x200>
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x2b4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff fc1f 	bl	80023d8 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff fc1b 	bl	80023d8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e14d      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a0 	beq.w	8002d0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_OscConfig+0x2b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d121      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_RCC_OscConfig+0x2b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_RCC_OscConfig+0x2b8>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7ff fbe1 	bl	80023d8 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	e011      	b.n	8002c3e <HAL_RCC_OscConfig+0x2ce>
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470000 	.word	0x42470000
 8002c24:	42470e80 	.word	0x42470e80
 8002c28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7ff fbd4 	bl	80023d8 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e106      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x4e4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x2f0>
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a80      	ldr	r2, [pc, #512]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x32a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x312>
 8002c68:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a7a      	ldr	r2, [pc, #488]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x32a>
 8002c82:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a74      	ldr	r2, [pc, #464]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a71      	ldr	r2, [pc, #452]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fb99 	bl	80023d8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff fb95 	bl	80023d8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0c5      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x33a>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fb83 	bl	80023d8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fb7f 	bl	80023d8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0af      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b5a      	ldr	r3, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 809b 	beq.w	8002e4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d05c      	beq.n	8002dda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d141      	bne.n	8002dac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x4ec>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7ff fb53 	bl	80023d8 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7ff fb4f 	bl	80023d8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e081      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	019b      	lsls	r3, r3, #6
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_RCC_OscConfig+0x4ec>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fb28 	bl	80023d8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7ff fb24 	bl	80023d8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e056      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x41c>
 8002daa:	e04e      	b.n	8002e4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x4ec>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7ff fb11 	bl	80023d8 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7ff fb0d 	bl	80023d8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e03f      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x44a>
 8002dd8:	e037      	b.n	8002e4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e032      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d028      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d121      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d11a      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40007000 	.word	0x40007000
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470060 	.word	0x42470060

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cc      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b68      	ldr	r3, [pc, #416]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d90c      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b65      	ldr	r3, [pc, #404]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0b8      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	494d      	ldr	r1, [pc, #308]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d044      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d119      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e067      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b37      	ldr	r3, [pc, #220]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4934      	ldr	r1, [pc, #208]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7ff fa42 	bl	80023d8 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7ff fa3e 	bl	80023d8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e04f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d20c      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe6:	f000 f821 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490a      	ldr	r1, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f9a2 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023c00 	.word	0x40023c00
 800301c:	40023800 	.word	0x40023800
 8003020:	080057e4 	.word	0x080057e4
 8003024:	2000001c 	.word	0x2000001c
 8003028:	2000004c 	.word	0x2000004c

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003032:	2100      	movs	r1, #0
 8003034:	6079      	str	r1, [r7, #4]
 8003036:	2100      	movs	r1, #0
 8003038:	60f9      	str	r1, [r7, #12]
 800303a:	2100      	movs	r1, #0
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800303e:	2100      	movs	r1, #0
 8003040:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003042:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 8003044:	6889      	ldr	r1, [r1, #8]
 8003046:	f001 010c 	and.w	r1, r1, #12
 800304a:	2908      	cmp	r1, #8
 800304c:	d00d      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x3e>
 800304e:	2908      	cmp	r1, #8
 8003050:	f200 8094 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x150>
 8003054:	2900      	cmp	r1, #0
 8003056:	d002      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x32>
 8003058:	2904      	cmp	r1, #4
 800305a:	d003      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x38>
 800305c:	e08e      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_GetSysClockFreq+0x164>)
 8003060:	60bb      	str	r3, [r7, #8]
       break;
 8003062:	e08e      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_RCC_GetSysClockFreq+0x168>)
 8003066:	60bb      	str	r3, [r7, #8]
      break;
 8003068:	e08b      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306a:	4948      	ldr	r1, [pc, #288]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 800306c:	6849      	ldr	r1, [r1, #4]
 800306e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003072:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003074:	4945      	ldr	r1, [pc, #276]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 8003076:	6849      	ldr	r1, [r1, #4]
 8003078:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800307c:	2900      	cmp	r1, #0
 800307e:	d024      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4942      	ldr	r1, [pc, #264]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 8003082:	6849      	ldr	r1, [r1, #4]
 8003084:	0989      	lsrs	r1, r1, #6
 8003086:	4608      	mov	r0, r1
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003090:	f04f 0500 	mov.w	r5, #0
 8003094:	ea00 0204 	and.w	r2, r0, r4
 8003098:	ea01 0305 	and.w	r3, r1, r5
 800309c:	493d      	ldr	r1, [pc, #244]	; (8003194 <HAL_RCC_GetSysClockFreq+0x168>)
 800309e:	fb01 f003 	mul.w	r0, r1, r3
 80030a2:	2100      	movs	r1, #0
 80030a4:	fb01 f102 	mul.w	r1, r1, r2
 80030a8:	1844      	adds	r4, r0, r1
 80030aa:	493a      	ldr	r1, [pc, #232]	; (8003194 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ac:	fba2 0101 	umull	r0, r1, r2, r1
 80030b0:	1863      	adds	r3, r4, r1
 80030b2:	4619      	mov	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f7fd f8e0 	bl	8000280 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e04a      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	461a      	mov	r2, r3
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	ea02 0400 	and.w	r4, r2, r0
 80030e2:	ea03 0501 	and.w	r5, r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	014b      	lsls	r3, r1, #5
 80030f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030f8:	0142      	lsls	r2, r0, #5
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	1b00      	subs	r0, r0, r4
 8003100:	eb61 0105 	sbc.w	r1, r1, r5
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	018b      	lsls	r3, r1, #6
 800310e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003112:	0182      	lsls	r2, r0, #6
 8003114:	1a12      	subs	r2, r2, r0
 8003116:	eb63 0301 	sbc.w	r3, r3, r1
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	00d9      	lsls	r1, r3, #3
 8003124:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003128:	00d0      	lsls	r0, r2, #3
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	1912      	adds	r2, r2, r4
 8003130:	eb45 0303 	adc.w	r3, r5, r3
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	0299      	lsls	r1, r3, #10
 800313e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003142:	0290      	lsls	r0, r2, #10
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	f7fd f894 	bl	8000280 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_GetSysClockFreq+0x160>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	60bb      	str	r3, [r7, #8]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCC_GetSysClockFreq+0x164>)
 800317e:	60bb      	str	r3, [r7, #8]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	68bb      	ldr	r3, [r7, #8]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	017d7840 	.word	0x017d7840

08003198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07b      	b.n	80032a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d108      	bne.n	80031c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d009      	beq.n	80031d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
 80031c2:	e005      	b.n	80031d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe f9e6 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	ea42 0103 	orr.w	r1, r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0104 	and.w	r1, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f003 0210 	and.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b088      	sub	sp, #32
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_SPI_Transmit+0x22>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e126      	b.n	800351a <HAL_SPI_Transmit+0x270>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d4:	f7ff f880 	bl	80023d8 <HAL_GetTick>
 80032d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ee:	e10b      	b.n	8003508 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Transmit+0x52>
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003300:	e102      	b.n	8003508 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003348:	d10f      	bne.n	800336a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003358:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d007      	beq.n	8003388 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003390:	d14b      	bne.n	800342a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_SPI_Transmit+0xf6>
 800339a:	8afb      	ldrh	r3, [r7, #22]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d13e      	bne.n	800341e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c4:	e02b      	b.n	800341e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d112      	bne.n	80033fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033f8:	e011      	b.n	800341e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fa:	f7fe ffed 	bl	80023d8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d803      	bhi.n	8003412 <HAL_SPI_Transmit+0x168>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003410:	d102      	bne.n	8003418 <HAL_SPI_Transmit+0x16e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800341c:	e074      	b.n	8003508 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ce      	bne.n	80033c6 <HAL_SPI_Transmit+0x11c>
 8003428:	e04c      	b.n	80034c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_SPI_Transmit+0x18e>
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d140      	bne.n	80034ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800345e:	e02c      	b.n	80034ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d113      	bne.n	8003496 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	86da      	strh	r2, [r3, #54]	; 0x36
 8003494:	e011      	b.n	80034ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003496:	f7fe ff9f 	bl	80023d8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d803      	bhi.n	80034ae <HAL_SPI_Transmit+0x204>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ac:	d102      	bne.n	80034b4 <HAL_SPI_Transmit+0x20a>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034b8:	e026      	b.n	8003508 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1cd      	bne.n	8003460 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fbcb 	bl	8003c64 <SPI_EndRxTxTransaction>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e000      	b.n	8003508 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003506:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003518:	7ffb      	ldrb	r3, [r7, #31]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b088      	sub	sp, #32
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353e:	d112      	bne.n	8003566 <HAL_SPI_Receive+0x44>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10e      	bne.n	8003566 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2204      	movs	r2, #4
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003550:	88fa      	ldrh	r2, [r7, #6]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f8f1 	bl	8003744 <HAL_SPI_TransmitReceive>
 8003562:	4603      	mov	r3, r0
 8003564:	e0ea      	b.n	800373c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_SPI_Receive+0x52>
 8003570:	2302      	movs	r3, #2
 8003572:	e0e3      	b.n	800373c <HAL_SPI_Receive+0x21a>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357c:	f7fe ff2c 	bl	80023d8 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d002      	beq.n	8003594 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003592:	e0ca      	b.n	800372a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Receive+0x7e>
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a4:	e0c1      	b.n	800372a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2204      	movs	r2, #4
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	d10f      	bne.n	800360e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d007      	beq.n	800362c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d162      	bne.n	80036fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003634:	e02e      	b.n	8003694 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d115      	bne.n	8003670 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f103 020c 	add.w	r2, r3, #12
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800366e:	e011      	b.n	8003694 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003670:	f7fe feb2 	bl	80023d8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d803      	bhi.n	8003688 <HAL_SPI_Receive+0x166>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003686:	d102      	bne.n	800368e <HAL_SPI_Receive+0x16c>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003692:	e04a      	b.n	800372a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1cb      	bne.n	8003636 <HAL_SPI_Receive+0x114>
 800369e:	e031      	b.n	8003704 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d113      	bne.n	80036d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	b292      	uxth	r2, r2
 80036ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d4:	e011      	b.n	80036fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d6:	f7fe fe7f 	bl	80023d8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d803      	bhi.n	80036ee <HAL_SPI_Receive+0x1cc>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_Receive+0x1d2>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036f8:	e017      	b.n	800372a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1cd      	bne.n	80036a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fa45 	bl	8003b98 <SPI_EndRxTransaction>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
 8003726:	e000      	b.n	800372a <HAL_SPI_Receive+0x208>
  }

error :
 8003728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003752:	2301      	movs	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_SPI_TransmitReceive+0x26>
 8003766:	2302      	movs	r3, #2
 8003768:	e18a      	b.n	8003a80 <HAL_SPI_TransmitReceive+0x33c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003772:	f7fe fe31 	bl	80023d8 <HAL_GetTick>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800378c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003790:	2b01      	cmp	r3, #1
 8003792:	d00f      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x70>
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379a:	d107      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x68>
 80037a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d003      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037b2:	e15b      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x82>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x82>
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037cc:	e14e      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d003      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d007      	beq.n	8003836 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d178      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_TransmitReceive+0x10a>
 8003848:	8b7b      	ldrh	r3, [r7, #26]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d166      	bne.n	800391c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	881a      	ldrh	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	e053      	b.n	800391c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11b      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x176>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_SPI_TransmitReceive+0x176>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d113      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d119      	bne.n	80038fc <HAL_SPI_TransmitReceive+0x1b8>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d014      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	b292      	uxth	r2, r2
 80038de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f8:	2301      	movs	r3, #1
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038fc:	f7fe fd6c 	bl	80023d8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003908:	429a      	cmp	r2, r3
 800390a:	d807      	bhi.n	800391c <HAL_SPI_TransmitReceive+0x1d8>
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003912:	d003      	beq.n	800391c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800391a:	e0a7      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1a6      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x130>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1a1      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x130>
 8003930:	e07c      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x1fc>
 800393a:	8b7b      	ldrh	r3, [r7, #26]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d16b      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003966:	e057      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d11c      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x26c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x26c>
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d114      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d119      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x2ae>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d014      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ee:	2301      	movs	r3, #1
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039f2:	f7fe fcf1 	bl	80023d8 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d803      	bhi.n	8003a0a <HAL_SPI_TransmitReceive+0x2c6>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x2cc>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a16:	e029      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1a2      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x224>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d19d      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f917 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a48:	e010      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e000      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3730      	adds	r7, #48	; 0x30
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a98:	f7fe fc9e 	bl	80023d8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa8:	f7fe fc96 	bl	80023d8 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	015b      	lsls	r3, r3, #5
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	e054      	b.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d050      	beq.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac8:	f7fe fc86 	bl	80023d8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d13d      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d111      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d004      	beq.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d107      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d10f      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e017      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d19b      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000001c 	.word	0x2000001c

08003b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bac:	d111      	bne.n	8003bd2 <SPI_EndRxTransaction+0x3a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb6:	d004      	beq.n	8003bc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d107      	bne.n	8003bd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d12a      	bne.n	8003c32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d012      	beq.n	8003c0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2180      	movs	r1, #128	; 0x80
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff49 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02d      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e026      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2101      	movs	r1, #1
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff36 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01a      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e013      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ff23 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e000      	b.n	8003c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <SPI_EndRxTxTransaction+0x7c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <SPI_EndRxTxTransaction+0x80>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8e:	d112      	bne.n	8003cb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fef4 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e00f      	b.n	8003cd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d0f2      	beq.n	8003cb6 <SPI_EndRxTxTransaction+0x52>
 8003cd0:	e000      	b.n	8003cd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cd2:	bf00      	nop
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000001c 	.word	0x2000001c
 8003ce4:	165e9f81 	.word	0x165e9f81

08003ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fcbc 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 f8f2 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_ConfigClockSource+0x18>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0b3      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x180>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d03e      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xd0>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	f200 8087 	bhi.w	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	f000 8085 	beq.w	8003ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d87f      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003dee:	2b70      	cmp	r3, #112	; 0x70
 8003df0:	d01a      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0xa2>
 8003df2:	2b70      	cmp	r3, #112	; 0x70
 8003df4:	d87b      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003df6:	2b60      	cmp	r3, #96	; 0x60
 8003df8:	d050      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x116>
 8003dfa:	2b60      	cmp	r3, #96	; 0x60
 8003dfc:	d877      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003dfe:	2b50      	cmp	r3, #80	; 0x50
 8003e00:	d03c      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0xf6>
 8003e02:	2b50      	cmp	r3, #80	; 0x50
 8003e04:	d873      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d058      	beq.n	8003ebc <HAL_TIM_ConfigClockSource+0x136>
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d86f      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003e0e:	2b30      	cmp	r3, #48	; 0x30
 8003e10:	d064      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x156>
 8003e12:	2b30      	cmp	r3, #48	; 0x30
 8003e14:	d86b      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d060      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x156>
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d867      	bhi.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d05c      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x156>
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d05a      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e26:	e062      	b.n	8003eee <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6899      	ldr	r1, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f000 f984 	bl	8004144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e04e      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f000 f96d 	bl	8004144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e78:	609a      	str	r2, [r3, #8]
      break;
 8003e7a:	e03b      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f000 f8e1 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2150      	movs	r1, #80	; 0x50
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f93a 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003e9a:	e02b      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f000 f900 	bl	80040ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2160      	movs	r1, #96	; 0x60
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f92a 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003eba:	e01b      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f000 f8c1 	bl	8004050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f91a 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003eda:	e00b      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f000 f911 	bl	800410e <TIM_ITRx_SetConfig>
        break;
 8003eec:	e002      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2f      	ldr	r2, [pc, #188]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d027      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d023      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d017      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <TIM_Base_SetConfig+0x128>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <TIM_Base_SetConfig+0x12c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <TIM_Base_SetConfig+0x130>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a25      	ldr	r2, [pc, #148]	; (8004044 <TIM_Base_SetConfig+0x134>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a24      	ldr	r2, [pc, #144]	; (8004048 <TIM_Base_SetConfig+0x138>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <TIM_Base_SetConfig+0x13c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40010400 	.word	0x40010400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800
 8004044:	40001800 	.word	0x40001800
 8004048:	40001c00 	.word	0x40001c00
 800404c:	40002000 	.word	0x40002000

08004050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 030a 	bic.w	r3, r3, #10
 800408c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b087      	sub	sp, #28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0210 	bic.w	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e05a      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d01d      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10c      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40010400 	.word	0x40010400
 8004274:	40014000 	.word	0x40014000
 8004278:	40001800 	.word	0x40001800

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000054 	.word	0x20000054

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	; (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	; (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	; (80042cc <__libc_init_array+0x44>)
 800429c:	f001 f9be 	bl	800561c <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08005894 	.word	0x08005894
 80042c4:	08005894 	.word	0x08005894
 80042c8:	08005894 	.word	0x08005894
 80042cc:	08005898 	.word	0x08005898

080042d0 <memset>:
 80042d0:	4402      	add	r2, r0
 80042d2:	4603      	mov	r3, r0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <iprintf>:
 80042e0:	b40f      	push	{r0, r1, r2, r3}
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <iprintf+0x2c>)
 80042e4:	b513      	push	{r0, r1, r4, lr}
 80042e6:	681c      	ldr	r4, [r3, #0]
 80042e8:	b124      	cbz	r4, 80042f4 <iprintf+0x14>
 80042ea:	69a3      	ldr	r3, [r4, #24]
 80042ec:	b913      	cbnz	r3, 80042f4 <iprintf+0x14>
 80042ee:	4620      	mov	r0, r4
 80042f0:	f000 fa7e 	bl	80047f0 <__sinit>
 80042f4:	ab05      	add	r3, sp, #20
 80042f6:	9a04      	ldr	r2, [sp, #16]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fdab 	bl	8004e58 <_vfiprintf_r>
 8004302:	b002      	add	sp, #8
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004308:	b004      	add	sp, #16
 800430a:	4770      	bx	lr
 800430c:	20000054 	.word	0x20000054

08004310 <_puts_r>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	460e      	mov	r6, r1
 8004314:	4605      	mov	r5, r0
 8004316:	b118      	cbz	r0, 8004320 <_puts_r+0x10>
 8004318:	6983      	ldr	r3, [r0, #24]
 800431a:	b90b      	cbnz	r3, 8004320 <_puts_r+0x10>
 800431c:	f000 fa68 	bl	80047f0 <__sinit>
 8004320:	69ab      	ldr	r3, [r5, #24]
 8004322:	68ac      	ldr	r4, [r5, #8]
 8004324:	b913      	cbnz	r3, 800432c <_puts_r+0x1c>
 8004326:	4628      	mov	r0, r5
 8004328:	f000 fa62 	bl	80047f0 <__sinit>
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <_puts_r+0xd0>)
 800432e:	429c      	cmp	r4, r3
 8004330:	d120      	bne.n	8004374 <_puts_r+0x64>
 8004332:	686c      	ldr	r4, [r5, #4]
 8004334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d405      	bmi.n	8004346 <_puts_r+0x36>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	0598      	lsls	r0, r3, #22
 800433e:	d402      	bmi.n	8004346 <_puts_r+0x36>
 8004340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004342:	f000 faf3 	bl	800492c <__retarget_lock_acquire_recursive>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	0719      	lsls	r1, r3, #28
 800434a:	d51d      	bpl.n	8004388 <_puts_r+0x78>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	b1db      	cbz	r3, 8004388 <_puts_r+0x78>
 8004350:	3e01      	subs	r6, #1
 8004352:	68a3      	ldr	r3, [r4, #8]
 8004354:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004358:	3b01      	subs	r3, #1
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	bb39      	cbnz	r1, 80043ae <_puts_r+0x9e>
 800435e:	2b00      	cmp	r3, #0
 8004360:	da38      	bge.n	80043d4 <_puts_r+0xc4>
 8004362:	4622      	mov	r2, r4
 8004364:	210a      	movs	r1, #10
 8004366:	4628      	mov	r0, r5
 8004368:	f000 f868 	bl	800443c <__swbuf_r>
 800436c:	3001      	adds	r0, #1
 800436e:	d011      	beq.n	8004394 <_puts_r+0x84>
 8004370:	250a      	movs	r5, #10
 8004372:	e011      	b.n	8004398 <_puts_r+0x88>
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <_puts_r+0xd4>)
 8004376:	429c      	cmp	r4, r3
 8004378:	d101      	bne.n	800437e <_puts_r+0x6e>
 800437a:	68ac      	ldr	r4, [r5, #8]
 800437c:	e7da      	b.n	8004334 <_puts_r+0x24>
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <_puts_r+0xd8>)
 8004380:	429c      	cmp	r4, r3
 8004382:	bf08      	it	eq
 8004384:	68ec      	ldreq	r4, [r5, #12]
 8004386:	e7d5      	b.n	8004334 <_puts_r+0x24>
 8004388:	4621      	mov	r1, r4
 800438a:	4628      	mov	r0, r5
 800438c:	f000 f8a8 	bl	80044e0 <__swsetup_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	d0dd      	beq.n	8004350 <_puts_r+0x40>
 8004394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439a:	07da      	lsls	r2, r3, #31
 800439c:	d405      	bmi.n	80043aa <_puts_r+0x9a>
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	059b      	lsls	r3, r3, #22
 80043a2:	d402      	bmi.n	80043aa <_puts_r+0x9a>
 80043a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043a6:	f000 fac2 	bl	800492e <__retarget_lock_release_recursive>
 80043aa:	4628      	mov	r0, r5
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da04      	bge.n	80043bc <_puts_r+0xac>
 80043b2:	69a2      	ldr	r2, [r4, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	dc06      	bgt.n	80043c6 <_puts_r+0xb6>
 80043b8:	290a      	cmp	r1, #10
 80043ba:	d004      	beq.n	80043c6 <_puts_r+0xb6>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	6022      	str	r2, [r4, #0]
 80043c2:	7019      	strb	r1, [r3, #0]
 80043c4:	e7c5      	b.n	8004352 <_puts_r+0x42>
 80043c6:	4622      	mov	r2, r4
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f837 	bl	800443c <__swbuf_r>
 80043ce:	3001      	adds	r0, #1
 80043d0:	d1bf      	bne.n	8004352 <_puts_r+0x42>
 80043d2:	e7df      	b.n	8004394 <_puts_r+0x84>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	250a      	movs	r5, #10
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	701d      	strb	r5, [r3, #0]
 80043de:	e7db      	b.n	8004398 <_puts_r+0x88>
 80043e0:	08005818 	.word	0x08005818
 80043e4:	08005838 	.word	0x08005838
 80043e8:	080057f8 	.word	0x080057f8

080043ec <puts>:
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <puts+0xc>)
 80043ee:	4601      	mov	r1, r0
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f7ff bf8d 	b.w	8004310 <_puts_r>
 80043f6:	bf00      	nop
 80043f8:	20000054 	.word	0x20000054

080043fc <siprintf>:
 80043fc:	b40e      	push	{r1, r2, r3}
 80043fe:	b500      	push	{lr}
 8004400:	b09c      	sub	sp, #112	; 0x70
 8004402:	ab1d      	add	r3, sp, #116	; 0x74
 8004404:	9002      	str	r0, [sp, #8]
 8004406:	9006      	str	r0, [sp, #24]
 8004408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800440c:	4809      	ldr	r0, [pc, #36]	; (8004434 <siprintf+0x38>)
 800440e:	9107      	str	r1, [sp, #28]
 8004410:	9104      	str	r1, [sp, #16]
 8004412:	4909      	ldr	r1, [pc, #36]	; (8004438 <siprintf+0x3c>)
 8004414:	f853 2b04 	ldr.w	r2, [r3], #4
 8004418:	9105      	str	r1, [sp, #20]
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	a902      	add	r1, sp, #8
 8004420:	f000 fbf0 	bl	8004c04 <_svfiprintf_r>
 8004424:	9b02      	ldr	r3, [sp, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	b01c      	add	sp, #112	; 0x70
 800442c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004430:	b003      	add	sp, #12
 8004432:	4770      	bx	lr
 8004434:	20000054 	.word	0x20000054
 8004438:	ffff0208 	.word	0xffff0208

0800443c <__swbuf_r>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	460e      	mov	r6, r1
 8004440:	4614      	mov	r4, r2
 8004442:	4605      	mov	r5, r0
 8004444:	b118      	cbz	r0, 800444e <__swbuf_r+0x12>
 8004446:	6983      	ldr	r3, [r0, #24]
 8004448:	b90b      	cbnz	r3, 800444e <__swbuf_r+0x12>
 800444a:	f000 f9d1 	bl	80047f0 <__sinit>
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <__swbuf_r+0x98>)
 8004450:	429c      	cmp	r4, r3
 8004452:	d12b      	bne.n	80044ac <__swbuf_r+0x70>
 8004454:	686c      	ldr	r4, [r5, #4]
 8004456:	69a3      	ldr	r3, [r4, #24]
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	071a      	lsls	r2, r3, #28
 800445e:	d52f      	bpl.n	80044c0 <__swbuf_r+0x84>
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	b36b      	cbz	r3, 80044c0 <__swbuf_r+0x84>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	1ac0      	subs	r0, r0, r3
 800446a:	6963      	ldr	r3, [r4, #20]
 800446c:	b2f6      	uxtb	r6, r6
 800446e:	4283      	cmp	r3, r0
 8004470:	4637      	mov	r7, r6
 8004472:	dc04      	bgt.n	800447e <__swbuf_r+0x42>
 8004474:	4621      	mov	r1, r4
 8004476:	4628      	mov	r0, r5
 8004478:	f000 f926 	bl	80046c8 <_fflush_r>
 800447c:	bb30      	cbnz	r0, 80044cc <__swbuf_r+0x90>
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	3b01      	subs	r3, #1
 8004482:	60a3      	str	r3, [r4, #8]
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	6022      	str	r2, [r4, #0]
 800448a:	701e      	strb	r6, [r3, #0]
 800448c:	6963      	ldr	r3, [r4, #20]
 800448e:	3001      	adds	r0, #1
 8004490:	4283      	cmp	r3, r0
 8004492:	d004      	beq.n	800449e <__swbuf_r+0x62>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	07db      	lsls	r3, r3, #31
 8004498:	d506      	bpl.n	80044a8 <__swbuf_r+0x6c>
 800449a:	2e0a      	cmp	r6, #10
 800449c:	d104      	bne.n	80044a8 <__swbuf_r+0x6c>
 800449e:	4621      	mov	r1, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 f911 	bl	80046c8 <_fflush_r>
 80044a6:	b988      	cbnz	r0, 80044cc <__swbuf_r+0x90>
 80044a8:	4638      	mov	r0, r7
 80044aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <__swbuf_r+0x9c>)
 80044ae:	429c      	cmp	r4, r3
 80044b0:	d101      	bne.n	80044b6 <__swbuf_r+0x7a>
 80044b2:	68ac      	ldr	r4, [r5, #8]
 80044b4:	e7cf      	b.n	8004456 <__swbuf_r+0x1a>
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <__swbuf_r+0xa0>)
 80044b8:	429c      	cmp	r4, r3
 80044ba:	bf08      	it	eq
 80044bc:	68ec      	ldreq	r4, [r5, #12]
 80044be:	e7ca      	b.n	8004456 <__swbuf_r+0x1a>
 80044c0:	4621      	mov	r1, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 f80c 	bl	80044e0 <__swsetup_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d0cb      	beq.n	8004464 <__swbuf_r+0x28>
 80044cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044d0:	e7ea      	b.n	80044a8 <__swbuf_r+0x6c>
 80044d2:	bf00      	nop
 80044d4:	08005818 	.word	0x08005818
 80044d8:	08005838 	.word	0x08005838
 80044dc:	080057f8 	.word	0x080057f8

080044e0 <__swsetup_r>:
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <__swsetup_r+0xcc>)
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	4606      	mov	r6, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	b125      	cbz	r5, 80044f6 <__swsetup_r+0x16>
 80044ec:	69ab      	ldr	r3, [r5, #24]
 80044ee:	b913      	cbnz	r3, 80044f6 <__swsetup_r+0x16>
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 f97d 	bl	80047f0 <__sinit>
 80044f6:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <__swsetup_r+0xd0>)
 80044f8:	429c      	cmp	r4, r3
 80044fa:	d10f      	bne.n	800451c <__swsetup_r+0x3c>
 80044fc:	686c      	ldr	r4, [r5, #4]
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004504:	0719      	lsls	r1, r3, #28
 8004506:	d42c      	bmi.n	8004562 <__swsetup_r+0x82>
 8004508:	06dd      	lsls	r5, r3, #27
 800450a:	d411      	bmi.n	8004530 <__swsetup_r+0x50>
 800450c:	2309      	movs	r3, #9
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800451a:	e03e      	b.n	800459a <__swsetup_r+0xba>
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <__swsetup_r+0xd4>)
 800451e:	429c      	cmp	r4, r3
 8004520:	d101      	bne.n	8004526 <__swsetup_r+0x46>
 8004522:	68ac      	ldr	r4, [r5, #8]
 8004524:	e7eb      	b.n	80044fe <__swsetup_r+0x1e>
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <__swsetup_r+0xd8>)
 8004528:	429c      	cmp	r4, r3
 800452a:	bf08      	it	eq
 800452c:	68ec      	ldreq	r4, [r5, #12]
 800452e:	e7e6      	b.n	80044fe <__swsetup_r+0x1e>
 8004530:	0758      	lsls	r0, r3, #29
 8004532:	d512      	bpl.n	800455a <__swsetup_r+0x7a>
 8004534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004536:	b141      	cbz	r1, 800454a <__swsetup_r+0x6a>
 8004538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800453c:	4299      	cmp	r1, r3
 800453e:	d002      	beq.n	8004546 <__swsetup_r+0x66>
 8004540:	4630      	mov	r0, r6
 8004542:	f000 fa59 	bl	80049f8 <_free_r>
 8004546:	2300      	movs	r3, #0
 8004548:	6363      	str	r3, [r4, #52]	; 0x34
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	2300      	movs	r3, #0
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f043 0308 	orr.w	r3, r3, #8
 8004560:	81a3      	strh	r3, [r4, #12]
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	b94b      	cbnz	r3, 800457a <__swsetup_r+0x9a>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800456c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004570:	d003      	beq.n	800457a <__swsetup_r+0x9a>
 8004572:	4621      	mov	r1, r4
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f9ff 	bl	8004978 <__smakebuf_r>
 800457a:	89a0      	ldrh	r0, [r4, #12]
 800457c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004580:	f010 0301 	ands.w	r3, r0, #1
 8004584:	d00a      	beq.n	800459c <__swsetup_r+0xbc>
 8004586:	2300      	movs	r3, #0
 8004588:	60a3      	str	r3, [r4, #8]
 800458a:	6963      	ldr	r3, [r4, #20]
 800458c:	425b      	negs	r3, r3
 800458e:	61a3      	str	r3, [r4, #24]
 8004590:	6923      	ldr	r3, [r4, #16]
 8004592:	b943      	cbnz	r3, 80045a6 <__swsetup_r+0xc6>
 8004594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004598:	d1ba      	bne.n	8004510 <__swsetup_r+0x30>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	0781      	lsls	r1, r0, #30
 800459e:	bf58      	it	pl
 80045a0:	6963      	ldrpl	r3, [r4, #20]
 80045a2:	60a3      	str	r3, [r4, #8]
 80045a4:	e7f4      	b.n	8004590 <__swsetup_r+0xb0>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e7f7      	b.n	800459a <__swsetup_r+0xba>
 80045aa:	bf00      	nop
 80045ac:	20000054 	.word	0x20000054
 80045b0:	08005818 	.word	0x08005818
 80045b4:	08005838 	.word	0x08005838
 80045b8:	080057f8 	.word	0x080057f8

080045bc <__sflush_r>:
 80045bc:	898a      	ldrh	r2, [r1, #12]
 80045be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	4605      	mov	r5, r0
 80045c4:	0710      	lsls	r0, r2, #28
 80045c6:	460c      	mov	r4, r1
 80045c8:	d458      	bmi.n	800467c <__sflush_r+0xc0>
 80045ca:	684b      	ldr	r3, [r1, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dc05      	bgt.n	80045dc <__sflush_r+0x20>
 80045d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dc02      	bgt.n	80045dc <__sflush_r+0x20>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045de:	2e00      	cmp	r6, #0
 80045e0:	d0f9      	beq.n	80045d6 <__sflush_r+0x1a>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045e8:	682f      	ldr	r7, [r5, #0]
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	d032      	beq.n	8004654 <__sflush_r+0x98>
 80045ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	075a      	lsls	r2, r3, #29
 80045f4:	d505      	bpl.n	8004602 <__sflush_r+0x46>
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	1ac0      	subs	r0, r0, r3
 80045fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045fc:	b10b      	cbz	r3, 8004602 <__sflush_r+0x46>
 80045fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004600:	1ac0      	subs	r0, r0, r3
 8004602:	2300      	movs	r3, #0
 8004604:	4602      	mov	r2, r0
 8004606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004608:	6a21      	ldr	r1, [r4, #32]
 800460a:	4628      	mov	r0, r5
 800460c:	47b0      	blx	r6
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	d106      	bne.n	8004622 <__sflush_r+0x66>
 8004614:	6829      	ldr	r1, [r5, #0]
 8004616:	291d      	cmp	r1, #29
 8004618:	d82c      	bhi.n	8004674 <__sflush_r+0xb8>
 800461a:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <__sflush_r+0x108>)
 800461c:	40ca      	lsrs	r2, r1
 800461e:	07d6      	lsls	r6, r2, #31
 8004620:	d528      	bpl.n	8004674 <__sflush_r+0xb8>
 8004622:	2200      	movs	r2, #0
 8004624:	6062      	str	r2, [r4, #4]
 8004626:	04d9      	lsls	r1, r3, #19
 8004628:	6922      	ldr	r2, [r4, #16]
 800462a:	6022      	str	r2, [r4, #0]
 800462c:	d504      	bpl.n	8004638 <__sflush_r+0x7c>
 800462e:	1c42      	adds	r2, r0, #1
 8004630:	d101      	bne.n	8004636 <__sflush_r+0x7a>
 8004632:	682b      	ldr	r3, [r5, #0]
 8004634:	b903      	cbnz	r3, 8004638 <__sflush_r+0x7c>
 8004636:	6560      	str	r0, [r4, #84]	; 0x54
 8004638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463a:	602f      	str	r7, [r5, #0]
 800463c:	2900      	cmp	r1, #0
 800463e:	d0ca      	beq.n	80045d6 <__sflush_r+0x1a>
 8004640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d002      	beq.n	800464e <__sflush_r+0x92>
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f9d5 	bl	80049f8 <_free_r>
 800464e:	2000      	movs	r0, #0
 8004650:	6360      	str	r0, [r4, #52]	; 0x34
 8004652:	e7c1      	b.n	80045d8 <__sflush_r+0x1c>
 8004654:	6a21      	ldr	r1, [r4, #32]
 8004656:	2301      	movs	r3, #1
 8004658:	4628      	mov	r0, r5
 800465a:	47b0      	blx	r6
 800465c:	1c41      	adds	r1, r0, #1
 800465e:	d1c7      	bne.n	80045f0 <__sflush_r+0x34>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0c4      	beq.n	80045f0 <__sflush_r+0x34>
 8004666:	2b1d      	cmp	r3, #29
 8004668:	d001      	beq.n	800466e <__sflush_r+0xb2>
 800466a:	2b16      	cmp	r3, #22
 800466c:	d101      	bne.n	8004672 <__sflush_r+0xb6>
 800466e:	602f      	str	r7, [r5, #0]
 8004670:	e7b1      	b.n	80045d6 <__sflush_r+0x1a>
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	e7ad      	b.n	80045d8 <__sflush_r+0x1c>
 800467c:	690f      	ldr	r7, [r1, #16]
 800467e:	2f00      	cmp	r7, #0
 8004680:	d0a9      	beq.n	80045d6 <__sflush_r+0x1a>
 8004682:	0793      	lsls	r3, r2, #30
 8004684:	680e      	ldr	r6, [r1, #0]
 8004686:	bf08      	it	eq
 8004688:	694b      	ldreq	r3, [r1, #20]
 800468a:	600f      	str	r7, [r1, #0]
 800468c:	bf18      	it	ne
 800468e:	2300      	movne	r3, #0
 8004690:	eba6 0807 	sub.w	r8, r6, r7
 8004694:	608b      	str	r3, [r1, #8]
 8004696:	f1b8 0f00 	cmp.w	r8, #0
 800469a:	dd9c      	ble.n	80045d6 <__sflush_r+0x1a>
 800469c:	6a21      	ldr	r1, [r4, #32]
 800469e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046a0:	4643      	mov	r3, r8
 80046a2:	463a      	mov	r2, r7
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b0      	blx	r6
 80046a8:	2800      	cmp	r0, #0
 80046aa:	dc06      	bgt.n	80046ba <__sflush_r+0xfe>
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b8:	e78e      	b.n	80045d8 <__sflush_r+0x1c>
 80046ba:	4407      	add	r7, r0
 80046bc:	eba8 0800 	sub.w	r8, r8, r0
 80046c0:	e7e9      	b.n	8004696 <__sflush_r+0xda>
 80046c2:	bf00      	nop
 80046c4:	20400001 	.word	0x20400001

080046c8 <_fflush_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	4605      	mov	r5, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	b913      	cbnz	r3, 80046d8 <_fflush_r+0x10>
 80046d2:	2500      	movs	r5, #0
 80046d4:	4628      	mov	r0, r5
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	b118      	cbz	r0, 80046e2 <_fflush_r+0x1a>
 80046da:	6983      	ldr	r3, [r0, #24]
 80046dc:	b90b      	cbnz	r3, 80046e2 <_fflush_r+0x1a>
 80046de:	f000 f887 	bl	80047f0 <__sinit>
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <_fflush_r+0x6c>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	d11b      	bne.n	8004720 <_fflush_r+0x58>
 80046e8:	686c      	ldr	r4, [r5, #4]
 80046ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ef      	beq.n	80046d2 <_fflush_r+0xa>
 80046f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046f4:	07d0      	lsls	r0, r2, #31
 80046f6:	d404      	bmi.n	8004702 <_fflush_r+0x3a>
 80046f8:	0599      	lsls	r1, r3, #22
 80046fa:	d402      	bmi.n	8004702 <_fflush_r+0x3a>
 80046fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046fe:	f000 f915 	bl	800492c <__retarget_lock_acquire_recursive>
 8004702:	4628      	mov	r0, r5
 8004704:	4621      	mov	r1, r4
 8004706:	f7ff ff59 	bl	80045bc <__sflush_r>
 800470a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800470c:	07da      	lsls	r2, r3, #31
 800470e:	4605      	mov	r5, r0
 8004710:	d4e0      	bmi.n	80046d4 <_fflush_r+0xc>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	059b      	lsls	r3, r3, #22
 8004716:	d4dd      	bmi.n	80046d4 <_fflush_r+0xc>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f908 	bl	800492e <__retarget_lock_release_recursive>
 800471e:	e7d9      	b.n	80046d4 <_fflush_r+0xc>
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <_fflush_r+0x70>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <_fflush_r+0x62>
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	e7df      	b.n	80046ea <_fflush_r+0x22>
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <_fflush_r+0x74>)
 800472c:	429c      	cmp	r4, r3
 800472e:	bf08      	it	eq
 8004730:	68ec      	ldreq	r4, [r5, #12]
 8004732:	e7da      	b.n	80046ea <_fflush_r+0x22>
 8004734:	08005818 	.word	0x08005818
 8004738:	08005838 	.word	0x08005838
 800473c:	080057f8 	.word	0x080057f8

08004740 <std>:
 8004740:	2300      	movs	r3, #0
 8004742:	b510      	push	{r4, lr}
 8004744:	4604      	mov	r4, r0
 8004746:	e9c0 3300 	strd	r3, r3, [r0]
 800474a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800474e:	6083      	str	r3, [r0, #8]
 8004750:	8181      	strh	r1, [r0, #12]
 8004752:	6643      	str	r3, [r0, #100]	; 0x64
 8004754:	81c2      	strh	r2, [r0, #14]
 8004756:	6183      	str	r3, [r0, #24]
 8004758:	4619      	mov	r1, r3
 800475a:	2208      	movs	r2, #8
 800475c:	305c      	adds	r0, #92	; 0x5c
 800475e:	f7ff fdb7 	bl	80042d0 <memset>
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <std+0x38>)
 8004764:	6263      	str	r3, [r4, #36]	; 0x24
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <std+0x3c>)
 8004768:	62a3      	str	r3, [r4, #40]	; 0x28
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <std+0x40>)
 800476c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std+0x44>)
 8004770:	6224      	str	r4, [r4, #32]
 8004772:	6323      	str	r3, [r4, #48]	; 0x30
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	08005401 	.word	0x08005401
 800477c:	08005423 	.word	0x08005423
 8004780:	0800545b 	.word	0x0800545b
 8004784:	0800547f 	.word	0x0800547f

08004788 <_cleanup_r>:
 8004788:	4901      	ldr	r1, [pc, #4]	; (8004790 <_cleanup_r+0x8>)
 800478a:	f000 b8af 	b.w	80048ec <_fwalk_reent>
 800478e:	bf00      	nop
 8004790:	080046c9 	.word	0x080046c9

08004794 <__sfmoreglue>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	1e4a      	subs	r2, r1, #1
 8004798:	2568      	movs	r5, #104	; 0x68
 800479a:	4355      	muls	r5, r2
 800479c:	460e      	mov	r6, r1
 800479e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047a2:	f000 f979 	bl	8004a98 <_malloc_r>
 80047a6:	4604      	mov	r4, r0
 80047a8:	b140      	cbz	r0, 80047bc <__sfmoreglue+0x28>
 80047aa:	2100      	movs	r1, #0
 80047ac:	e9c0 1600 	strd	r1, r6, [r0]
 80047b0:	300c      	adds	r0, #12
 80047b2:	60a0      	str	r0, [r4, #8]
 80047b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047b8:	f7ff fd8a 	bl	80042d0 <memset>
 80047bc:	4620      	mov	r0, r4
 80047be:	bd70      	pop	{r4, r5, r6, pc}

080047c0 <__sfp_lock_acquire>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__sfp_lock_acquire+0x8>)
 80047c2:	f000 b8b3 	b.w	800492c <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	20000a38 	.word	0x20000a38

080047cc <__sfp_lock_release>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__sfp_lock_release+0x8>)
 80047ce:	f000 b8ae 	b.w	800492e <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000a38 	.word	0x20000a38

080047d8 <__sinit_lock_acquire>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__sinit_lock_acquire+0x8>)
 80047da:	f000 b8a7 	b.w	800492c <__retarget_lock_acquire_recursive>
 80047de:	bf00      	nop
 80047e0:	20000a33 	.word	0x20000a33

080047e4 <__sinit_lock_release>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__sinit_lock_release+0x8>)
 80047e6:	f000 b8a2 	b.w	800492e <__retarget_lock_release_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000a33 	.word	0x20000a33

080047f0 <__sinit>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4604      	mov	r4, r0
 80047f4:	f7ff fff0 	bl	80047d8 <__sinit_lock_acquire>
 80047f8:	69a3      	ldr	r3, [r4, #24]
 80047fa:	b11b      	cbz	r3, 8004804 <__sinit+0x14>
 80047fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004800:	f7ff bff0 	b.w	80047e4 <__sinit_lock_release>
 8004804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004808:	6523      	str	r3, [r4, #80]	; 0x50
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <__sinit+0x68>)
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <__sinit+0x6c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	62a2      	str	r2, [r4, #40]	; 0x28
 8004812:	42a3      	cmp	r3, r4
 8004814:	bf04      	itt	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	61a3      	streq	r3, [r4, #24]
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f820 	bl	8004860 <__sfp>
 8004820:	6060      	str	r0, [r4, #4]
 8004822:	4620      	mov	r0, r4
 8004824:	f000 f81c 	bl	8004860 <__sfp>
 8004828:	60a0      	str	r0, [r4, #8]
 800482a:	4620      	mov	r0, r4
 800482c:	f000 f818 	bl	8004860 <__sfp>
 8004830:	2200      	movs	r2, #0
 8004832:	60e0      	str	r0, [r4, #12]
 8004834:	2104      	movs	r1, #4
 8004836:	6860      	ldr	r0, [r4, #4]
 8004838:	f7ff ff82 	bl	8004740 <std>
 800483c:	68a0      	ldr	r0, [r4, #8]
 800483e:	2201      	movs	r2, #1
 8004840:	2109      	movs	r1, #9
 8004842:	f7ff ff7d 	bl	8004740 <std>
 8004846:	68e0      	ldr	r0, [r4, #12]
 8004848:	2202      	movs	r2, #2
 800484a:	2112      	movs	r1, #18
 800484c:	f7ff ff78 	bl	8004740 <std>
 8004850:	2301      	movs	r3, #1
 8004852:	61a3      	str	r3, [r4, #24]
 8004854:	e7d2      	b.n	80047fc <__sinit+0xc>
 8004856:	bf00      	nop
 8004858:	080057f4 	.word	0x080057f4
 800485c:	08004789 	.word	0x08004789

08004860 <__sfp>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	4607      	mov	r7, r0
 8004864:	f7ff ffac 	bl	80047c0 <__sfp_lock_acquire>
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <__sfp+0x84>)
 800486a:	681e      	ldr	r6, [r3, #0]
 800486c:	69b3      	ldr	r3, [r6, #24]
 800486e:	b913      	cbnz	r3, 8004876 <__sfp+0x16>
 8004870:	4630      	mov	r0, r6
 8004872:	f7ff ffbd 	bl	80047f0 <__sinit>
 8004876:	3648      	adds	r6, #72	; 0x48
 8004878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	d503      	bpl.n	8004888 <__sfp+0x28>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	b30b      	cbz	r3, 80048c8 <__sfp+0x68>
 8004884:	6836      	ldr	r6, [r6, #0]
 8004886:	e7f7      	b.n	8004878 <__sfp+0x18>
 8004888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800488c:	b9d5      	cbnz	r5, 80048c4 <__sfp+0x64>
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <__sfp+0x88>)
 8004890:	60e3      	str	r3, [r4, #12]
 8004892:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004896:	6665      	str	r5, [r4, #100]	; 0x64
 8004898:	f000 f847 	bl	800492a <__retarget_lock_init_recursive>
 800489c:	f7ff ff96 	bl	80047cc <__sfp_lock_release>
 80048a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048a8:	6025      	str	r5, [r4, #0]
 80048aa:	61a5      	str	r5, [r4, #24]
 80048ac:	2208      	movs	r2, #8
 80048ae:	4629      	mov	r1, r5
 80048b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048b4:	f7ff fd0c 	bl	80042d0 <memset>
 80048b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048c0:	4620      	mov	r0, r4
 80048c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c4:	3468      	adds	r4, #104	; 0x68
 80048c6:	e7d9      	b.n	800487c <__sfp+0x1c>
 80048c8:	2104      	movs	r1, #4
 80048ca:	4638      	mov	r0, r7
 80048cc:	f7ff ff62 	bl	8004794 <__sfmoreglue>
 80048d0:	4604      	mov	r4, r0
 80048d2:	6030      	str	r0, [r6, #0]
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1d5      	bne.n	8004884 <__sfp+0x24>
 80048d8:	f7ff ff78 	bl	80047cc <__sfp_lock_release>
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	e7ee      	b.n	80048c0 <__sfp+0x60>
 80048e2:	bf00      	nop
 80048e4:	080057f4 	.word	0x080057f4
 80048e8:	ffff0001 	.word	0xffff0001

080048ec <_fwalk_reent>:
 80048ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f0:	4606      	mov	r6, r0
 80048f2:	4688      	mov	r8, r1
 80048f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048f8:	2700      	movs	r7, #0
 80048fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004902:	d505      	bpl.n	8004910 <_fwalk_reent+0x24>
 8004904:	6824      	ldr	r4, [r4, #0]
 8004906:	2c00      	cmp	r4, #0
 8004908:	d1f7      	bne.n	80048fa <_fwalk_reent+0xe>
 800490a:	4638      	mov	r0, r7
 800490c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004910:	89ab      	ldrh	r3, [r5, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d907      	bls.n	8004926 <_fwalk_reent+0x3a>
 8004916:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491a:	3301      	adds	r3, #1
 800491c:	d003      	beq.n	8004926 <_fwalk_reent+0x3a>
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	47c0      	blx	r8
 8004924:	4307      	orrs	r7, r0
 8004926:	3568      	adds	r5, #104	; 0x68
 8004928:	e7e9      	b.n	80048fe <_fwalk_reent+0x12>

0800492a <__retarget_lock_init_recursive>:
 800492a:	4770      	bx	lr

0800492c <__retarget_lock_acquire_recursive>:
 800492c:	4770      	bx	lr

0800492e <__retarget_lock_release_recursive>:
 800492e:	4770      	bx	lr

08004930 <__swhatbuf_r>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	460e      	mov	r6, r1
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	2900      	cmp	r1, #0
 800493a:	b096      	sub	sp, #88	; 0x58
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	da07      	bge.n	8004952 <__swhatbuf_r+0x22>
 8004942:	2300      	movs	r3, #0
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	89b3      	ldrh	r3, [r6, #12]
 8004948:	061a      	lsls	r2, r3, #24
 800494a:	d410      	bmi.n	800496e <__swhatbuf_r+0x3e>
 800494c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004950:	e00e      	b.n	8004970 <__swhatbuf_r+0x40>
 8004952:	466a      	mov	r2, sp
 8004954:	f000 fdba 	bl	80054cc <_fstat_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	dbf2      	blt.n	8004942 <__swhatbuf_r+0x12>
 800495c:	9a01      	ldr	r2, [sp, #4]
 800495e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004966:	425a      	negs	r2, r3
 8004968:	415a      	adcs	r2, r3
 800496a:	602a      	str	r2, [r5, #0]
 800496c:	e7ee      	b.n	800494c <__swhatbuf_r+0x1c>
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	2000      	movs	r0, #0
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	b016      	add	sp, #88	; 0x58
 8004976:	bd70      	pop	{r4, r5, r6, pc}

08004978 <__smakebuf_r>:
 8004978:	898b      	ldrh	r3, [r1, #12]
 800497a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800497c:	079d      	lsls	r5, r3, #30
 800497e:	4606      	mov	r6, r0
 8004980:	460c      	mov	r4, r1
 8004982:	d507      	bpl.n	8004994 <__smakebuf_r+0x1c>
 8004984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	2301      	movs	r3, #1
 800498e:	6163      	str	r3, [r4, #20]
 8004990:	b002      	add	sp, #8
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	ab01      	add	r3, sp, #4
 8004996:	466a      	mov	r2, sp
 8004998:	f7ff ffca 	bl	8004930 <__swhatbuf_r>
 800499c:	9900      	ldr	r1, [sp, #0]
 800499e:	4605      	mov	r5, r0
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f879 	bl	8004a98 <_malloc_r>
 80049a6:	b948      	cbnz	r0, 80049bc <__smakebuf_r+0x44>
 80049a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ac:	059a      	lsls	r2, r3, #22
 80049ae:	d4ef      	bmi.n	8004990 <__smakebuf_r+0x18>
 80049b0:	f023 0303 	bic.w	r3, r3, #3
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	e7e3      	b.n	8004984 <__smakebuf_r+0xc>
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <__smakebuf_r+0x7c>)
 80049be:	62b3      	str	r3, [r6, #40]	; 0x28
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	6020      	str	r0, [r4, #0]
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	9b00      	ldr	r3, [sp, #0]
 80049cc:	6163      	str	r3, [r4, #20]
 80049ce:	9b01      	ldr	r3, [sp, #4]
 80049d0:	6120      	str	r0, [r4, #16]
 80049d2:	b15b      	cbz	r3, 80049ec <__smakebuf_r+0x74>
 80049d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 fd89 	bl	80054f0 <_isatty_r>
 80049de:	b128      	cbz	r0, 80049ec <__smakebuf_r+0x74>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	89a0      	ldrh	r0, [r4, #12]
 80049ee:	4305      	orrs	r5, r0
 80049f0:	81a5      	strh	r5, [r4, #12]
 80049f2:	e7cd      	b.n	8004990 <__smakebuf_r+0x18>
 80049f4:	08004789 	.word	0x08004789

080049f8 <_free_r>:
 80049f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d048      	beq.n	8004a90 <_free_r+0x98>
 80049fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a02:	9001      	str	r0, [sp, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f1a1 0404 	sub.w	r4, r1, #4
 8004a0a:	bfb8      	it	lt
 8004a0c:	18e4      	addlt	r4, r4, r3
 8004a0e:	f000 fdb9 	bl	8005584 <__malloc_lock>
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <_free_r+0x9c>)
 8004a14:	9801      	ldr	r0, [sp, #4]
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	4615      	mov	r5, r2
 8004a1a:	b933      	cbnz	r3, 8004a2a <_free_r+0x32>
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	6014      	str	r4, [r2, #0]
 8004a20:	b003      	add	sp, #12
 8004a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a26:	f000 bdb3 	b.w	8005590 <__malloc_unlock>
 8004a2a:	42a3      	cmp	r3, r4
 8004a2c:	d90b      	bls.n	8004a46 <_free_r+0x4e>
 8004a2e:	6821      	ldr	r1, [r4, #0]
 8004a30:	1862      	adds	r2, r4, r1
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bf04      	itt	eq
 8004a36:	681a      	ldreq	r2, [r3, #0]
 8004a38:	685b      	ldreq	r3, [r3, #4]
 8004a3a:	6063      	str	r3, [r4, #4]
 8004a3c:	bf04      	itt	eq
 8004a3e:	1852      	addeq	r2, r2, r1
 8004a40:	6022      	streq	r2, [r4, #0]
 8004a42:	602c      	str	r4, [r5, #0]
 8004a44:	e7ec      	b.n	8004a20 <_free_r+0x28>
 8004a46:	461a      	mov	r2, r3
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b10b      	cbz	r3, 8004a50 <_free_r+0x58>
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	d9fa      	bls.n	8004a46 <_free_r+0x4e>
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	1855      	adds	r5, r2, r1
 8004a54:	42a5      	cmp	r5, r4
 8004a56:	d10b      	bne.n	8004a70 <_free_r+0x78>
 8004a58:	6824      	ldr	r4, [r4, #0]
 8004a5a:	4421      	add	r1, r4
 8004a5c:	1854      	adds	r4, r2, r1
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	6011      	str	r1, [r2, #0]
 8004a62:	d1dd      	bne.n	8004a20 <_free_r+0x28>
 8004a64:	681c      	ldr	r4, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	6053      	str	r3, [r2, #4]
 8004a6a:	4421      	add	r1, r4
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	e7d7      	b.n	8004a20 <_free_r+0x28>
 8004a70:	d902      	bls.n	8004a78 <_free_r+0x80>
 8004a72:	230c      	movs	r3, #12
 8004a74:	6003      	str	r3, [r0, #0]
 8004a76:	e7d3      	b.n	8004a20 <_free_r+0x28>
 8004a78:	6825      	ldr	r5, [r4, #0]
 8004a7a:	1961      	adds	r1, r4, r5
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	bf04      	itt	eq
 8004a80:	6819      	ldreq	r1, [r3, #0]
 8004a82:	685b      	ldreq	r3, [r3, #4]
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	bf04      	itt	eq
 8004a88:	1949      	addeq	r1, r1, r5
 8004a8a:	6021      	streq	r1, [r4, #0]
 8004a8c:	6054      	str	r4, [r2, #4]
 8004a8e:	e7c7      	b.n	8004a20 <_free_r+0x28>
 8004a90:	b003      	add	sp, #12
 8004a92:	bd30      	pop	{r4, r5, pc}
 8004a94:	200000fc 	.word	0x200000fc

08004a98 <_malloc_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	1ccd      	adds	r5, r1, #3
 8004a9c:	f025 0503 	bic.w	r5, r5, #3
 8004aa0:	3508      	adds	r5, #8
 8004aa2:	2d0c      	cmp	r5, #12
 8004aa4:	bf38      	it	cc
 8004aa6:	250c      	movcc	r5, #12
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	4606      	mov	r6, r0
 8004aac:	db01      	blt.n	8004ab2 <_malloc_r+0x1a>
 8004aae:	42a9      	cmp	r1, r5
 8004ab0:	d903      	bls.n	8004aba <_malloc_r+0x22>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aba:	f000 fd63 	bl	8005584 <__malloc_lock>
 8004abe:	4921      	ldr	r1, [pc, #132]	; (8004b44 <_malloc_r+0xac>)
 8004ac0:	680a      	ldr	r2, [r1, #0]
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	b99c      	cbnz	r4, 8004aee <_malloc_r+0x56>
 8004ac6:	4f20      	ldr	r7, [pc, #128]	; (8004b48 <_malloc_r+0xb0>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b923      	cbnz	r3, 8004ad6 <_malloc_r+0x3e>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 fc86 	bl	80053e0 <_sbrk_r>
 8004ad4:	6038      	str	r0, [r7, #0]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f000 fc81 	bl	80053e0 <_sbrk_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d123      	bne.n	8004b2a <_malloc_r+0x92>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 fd52 	bl	8005590 <__malloc_unlock>
 8004aec:	e7e3      	b.n	8004ab6 <_malloc_r+0x1e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	1b5b      	subs	r3, r3, r5
 8004af2:	d417      	bmi.n	8004b24 <_malloc_r+0x8c>
 8004af4:	2b0b      	cmp	r3, #11
 8004af6:	d903      	bls.n	8004b00 <_malloc_r+0x68>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	441c      	add	r4, r3
 8004afc:	6025      	str	r5, [r4, #0]
 8004afe:	e004      	b.n	8004b0a <_malloc_r+0x72>
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	42a2      	cmp	r2, r4
 8004b04:	bf0c      	ite	eq
 8004b06:	600b      	streq	r3, [r1, #0]
 8004b08:	6053      	strne	r3, [r2, #4]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f000 fd40 	bl	8005590 <__malloc_unlock>
 8004b10:	f104 000b 	add.w	r0, r4, #11
 8004b14:	1d23      	adds	r3, r4, #4
 8004b16:	f020 0007 	bic.w	r0, r0, #7
 8004b1a:	1ac2      	subs	r2, r0, r3
 8004b1c:	d0cc      	beq.n	8004ab8 <_malloc_r+0x20>
 8004b1e:	1a1b      	subs	r3, r3, r0
 8004b20:	50a3      	str	r3, [r4, r2]
 8004b22:	e7c9      	b.n	8004ab8 <_malloc_r+0x20>
 8004b24:	4622      	mov	r2, r4
 8004b26:	6864      	ldr	r4, [r4, #4]
 8004b28:	e7cc      	b.n	8004ac4 <_malloc_r+0x2c>
 8004b2a:	1cc4      	adds	r4, r0, #3
 8004b2c:	f024 0403 	bic.w	r4, r4, #3
 8004b30:	42a0      	cmp	r0, r4
 8004b32:	d0e3      	beq.n	8004afc <_malloc_r+0x64>
 8004b34:	1a21      	subs	r1, r4, r0
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 fc52 	bl	80053e0 <_sbrk_r>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1dd      	bne.n	8004afc <_malloc_r+0x64>
 8004b40:	e7cf      	b.n	8004ae2 <_malloc_r+0x4a>
 8004b42:	bf00      	nop
 8004b44:	200000fc 	.word	0x200000fc
 8004b48:	20000100 	.word	0x20000100

08004b4c <__ssputs_r>:
 8004b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	688e      	ldr	r6, [r1, #8]
 8004b52:	429e      	cmp	r6, r3
 8004b54:	4682      	mov	sl, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	4690      	mov	r8, r2
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	d838      	bhi.n	8004bd0 <__ssputs_r+0x84>
 8004b5e:	898a      	ldrh	r2, [r1, #12]
 8004b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b64:	d032      	beq.n	8004bcc <__ssputs_r+0x80>
 8004b66:	6825      	ldr	r5, [r4, #0]
 8004b68:	6909      	ldr	r1, [r1, #16]
 8004b6a:	eba5 0901 	sub.w	r9, r5, r1
 8004b6e:	6965      	ldr	r5, [r4, #20]
 8004b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b78:	3301      	adds	r3, #1
 8004b7a:	444b      	add	r3, r9
 8004b7c:	106d      	asrs	r5, r5, #1
 8004b7e:	429d      	cmp	r5, r3
 8004b80:	bf38      	it	cc
 8004b82:	461d      	movcc	r5, r3
 8004b84:	0553      	lsls	r3, r2, #21
 8004b86:	d531      	bpl.n	8004bec <__ssputs_r+0xa0>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	f7ff ff85 	bl	8004a98 <_malloc_r>
 8004b8e:	4606      	mov	r6, r0
 8004b90:	b950      	cbnz	r0, 8004ba8 <__ssputs_r+0x5c>
 8004b92:	230c      	movs	r3, #12
 8004b94:	f8ca 3000 	str.w	r3, [sl]
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	6921      	ldr	r1, [r4, #16]
 8004baa:	464a      	mov	r2, r9
 8004bac:	f000 fcc2 	bl	8005534 <memcpy>
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	6126      	str	r6, [r4, #16]
 8004bbe:	6165      	str	r5, [r4, #20]
 8004bc0:	444e      	add	r6, r9
 8004bc2:	eba5 0509 	sub.w	r5, r5, r9
 8004bc6:	6026      	str	r6, [r4, #0]
 8004bc8:	60a5      	str	r5, [r4, #8]
 8004bca:	463e      	mov	r6, r7
 8004bcc:	42be      	cmp	r6, r7
 8004bce:	d900      	bls.n	8004bd2 <__ssputs_r+0x86>
 8004bd0:	463e      	mov	r6, r7
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	f000 fcba 	bl	8005550 <memmove>
 8004bdc:	68a3      	ldr	r3, [r4, #8]
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	1b9b      	subs	r3, r3, r6
 8004be2:	4432      	add	r2, r6
 8004be4:	60a3      	str	r3, [r4, #8]
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7db      	b.n	8004ba4 <__ssputs_r+0x58>
 8004bec:	462a      	mov	r2, r5
 8004bee:	f000 fcd5 	bl	800559c <_realloc_r>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1e1      	bne.n	8004bbc <__ssputs_r+0x70>
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	f7ff fefc 	bl	80049f8 <_free_r>
 8004c00:	e7c7      	b.n	8004b92 <__ssputs_r+0x46>
	...

08004c04 <_svfiprintf_r>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	4698      	mov	r8, r3
 8004c0a:	898b      	ldrh	r3, [r1, #12]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	b09d      	sub	sp, #116	; 0x74
 8004c10:	4607      	mov	r7, r0
 8004c12:	460d      	mov	r5, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	d50e      	bpl.n	8004c36 <_svfiprintf_r+0x32>
 8004c18:	690b      	ldr	r3, [r1, #16]
 8004c1a:	b963      	cbnz	r3, 8004c36 <_svfiprintf_r+0x32>
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	f7ff ff3b 	bl	8004a98 <_malloc_r>
 8004c22:	6028      	str	r0, [r5, #0]
 8004c24:	6128      	str	r0, [r5, #16]
 8004c26:	b920      	cbnz	r0, 8004c32 <_svfiprintf_r+0x2e>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c30:	e0d1      	b.n	8004dd6 <_svfiprintf_r+0x1d2>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	616b      	str	r3, [r5, #20]
 8004c36:	2300      	movs	r3, #0
 8004c38:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c44:	2330      	movs	r3, #48	; 0x30
 8004c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004df0 <_svfiprintf_r+0x1ec>
 8004c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c4e:	f04f 0901 	mov.w	r9, #1
 8004c52:	4623      	mov	r3, r4
 8004c54:	469a      	mov	sl, r3
 8004c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c5a:	b10a      	cbz	r2, 8004c60 <_svfiprintf_r+0x5c>
 8004c5c:	2a25      	cmp	r2, #37	; 0x25
 8004c5e:	d1f9      	bne.n	8004c54 <_svfiprintf_r+0x50>
 8004c60:	ebba 0b04 	subs.w	fp, sl, r4
 8004c64:	d00b      	beq.n	8004c7e <_svfiprintf_r+0x7a>
 8004c66:	465b      	mov	r3, fp
 8004c68:	4622      	mov	r2, r4
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	f7ff ff6d 	bl	8004b4c <__ssputs_r>
 8004c72:	3001      	adds	r0, #1
 8004c74:	f000 80aa 	beq.w	8004dcc <_svfiprintf_r+0x1c8>
 8004c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c7a:	445a      	add	r2, fp
 8004c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a2 	beq.w	8004dcc <_svfiprintf_r+0x1c8>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c92:	f10a 0a01 	add.w	sl, sl, #1
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	9307      	str	r3, [sp, #28]
 8004c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ca0:	4654      	mov	r4, sl
 8004ca2:	2205      	movs	r2, #5
 8004ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca8:	4851      	ldr	r0, [pc, #324]	; (8004df0 <_svfiprintf_r+0x1ec>)
 8004caa:	f7fb fa99 	bl	80001e0 <memchr>
 8004cae:	9a04      	ldr	r2, [sp, #16]
 8004cb0:	b9d8      	cbnz	r0, 8004cea <_svfiprintf_r+0xe6>
 8004cb2:	06d0      	lsls	r0, r2, #27
 8004cb4:	bf44      	itt	mi
 8004cb6:	2320      	movmi	r3, #32
 8004cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cbc:	0711      	lsls	r1, r2, #28
 8004cbe:	bf44      	itt	mi
 8004cc0:	232b      	movmi	r3, #43	; 0x2b
 8004cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ccc:	d015      	beq.n	8004cfa <_svfiprintf_r+0xf6>
 8004cce:	9a07      	ldr	r2, [sp, #28]
 8004cd0:	4654      	mov	r4, sl
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f04f 0c0a 	mov.w	ip, #10
 8004cd8:	4621      	mov	r1, r4
 8004cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cde:	3b30      	subs	r3, #48	; 0x30
 8004ce0:	2b09      	cmp	r3, #9
 8004ce2:	d94e      	bls.n	8004d82 <_svfiprintf_r+0x17e>
 8004ce4:	b1b0      	cbz	r0, 8004d14 <_svfiprintf_r+0x110>
 8004ce6:	9207      	str	r2, [sp, #28]
 8004ce8:	e014      	b.n	8004d14 <_svfiprintf_r+0x110>
 8004cea:	eba0 0308 	sub.w	r3, r0, r8
 8004cee:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	46a2      	mov	sl, r4
 8004cf8:	e7d2      	b.n	8004ca0 <_svfiprintf_r+0x9c>
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	1d19      	adds	r1, r3, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	9103      	str	r1, [sp, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfbb      	ittet	lt
 8004d06:	425b      	neglt	r3, r3
 8004d08:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0c:	9307      	strge	r3, [sp, #28]
 8004d0e:	9307      	strlt	r3, [sp, #28]
 8004d10:	bfb8      	it	lt
 8004d12:	9204      	strlt	r2, [sp, #16]
 8004d14:	7823      	ldrb	r3, [r4, #0]
 8004d16:	2b2e      	cmp	r3, #46	; 0x2e
 8004d18:	d10c      	bne.n	8004d34 <_svfiprintf_r+0x130>
 8004d1a:	7863      	ldrb	r3, [r4, #1]
 8004d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1e:	d135      	bne.n	8004d8c <_svfiprintf_r+0x188>
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	9203      	str	r2, [sp, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfb8      	it	lt
 8004d2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d30:	3402      	adds	r4, #2
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e00 <_svfiprintf_r+0x1fc>
 8004d38:	7821      	ldrb	r1, [r4, #0]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	f7fb fa4f 	bl	80001e0 <memchr>
 8004d42:	b140      	cbz	r0, 8004d56 <_svfiprintf_r+0x152>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	eba0 000a 	sub.w	r0, r0, sl
 8004d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	4303      	orrs	r3, r0
 8004d52:	3401      	adds	r4, #1
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5a:	4826      	ldr	r0, [pc, #152]	; (8004df4 <_svfiprintf_r+0x1f0>)
 8004d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d60:	2206      	movs	r2, #6
 8004d62:	f7fb fa3d 	bl	80001e0 <memchr>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d038      	beq.n	8004ddc <_svfiprintf_r+0x1d8>
 8004d6a:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <_svfiprintf_r+0x1f4>)
 8004d6c:	bb1b      	cbnz	r3, 8004db6 <_svfiprintf_r+0x1b2>
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	3307      	adds	r3, #7
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	3308      	adds	r3, #8
 8004d78:	9303      	str	r3, [sp, #12]
 8004d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7c:	4433      	add	r3, r6
 8004d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d80:	e767      	b.n	8004c52 <_svfiprintf_r+0x4e>
 8004d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d86:	460c      	mov	r4, r1
 8004d88:	2001      	movs	r0, #1
 8004d8a:	e7a5      	b.n	8004cd8 <_svfiprintf_r+0xd4>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	3401      	adds	r4, #1
 8004d90:	9305      	str	r3, [sp, #20]
 8004d92:	4619      	mov	r1, r3
 8004d94:	f04f 0c0a 	mov.w	ip, #10
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9e:	3a30      	subs	r2, #48	; 0x30
 8004da0:	2a09      	cmp	r2, #9
 8004da2:	d903      	bls.n	8004dac <_svfiprintf_r+0x1a8>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0c5      	beq.n	8004d34 <_svfiprintf_r+0x130>
 8004da8:	9105      	str	r1, [sp, #20]
 8004daa:	e7c3      	b.n	8004d34 <_svfiprintf_r+0x130>
 8004dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004db0:	4604      	mov	r4, r0
 8004db2:	2301      	movs	r3, #1
 8004db4:	e7f0      	b.n	8004d98 <_svfiprintf_r+0x194>
 8004db6:	ab03      	add	r3, sp, #12
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	462a      	mov	r2, r5
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <_svfiprintf_r+0x1f8>)
 8004dbe:	a904      	add	r1, sp, #16
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f3af 8000 	nop.w
 8004dc6:	1c42      	adds	r2, r0, #1
 8004dc8:	4606      	mov	r6, r0
 8004dca:	d1d6      	bne.n	8004d7a <_svfiprintf_r+0x176>
 8004dcc:	89ab      	ldrh	r3, [r5, #12]
 8004dce:	065b      	lsls	r3, r3, #25
 8004dd0:	f53f af2c 	bmi.w	8004c2c <_svfiprintf_r+0x28>
 8004dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dd6:	b01d      	add	sp, #116	; 0x74
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ddc:	ab03      	add	r3, sp, #12
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	462a      	mov	r2, r5
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <_svfiprintf_r+0x1f8>)
 8004de4:	a904      	add	r1, sp, #16
 8004de6:	4638      	mov	r0, r7
 8004de8:	f000 f9d4 	bl	8005194 <_printf_i>
 8004dec:	e7eb      	b.n	8004dc6 <_svfiprintf_r+0x1c2>
 8004dee:	bf00      	nop
 8004df0:	08005858 	.word	0x08005858
 8004df4:	08005862 	.word	0x08005862
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	08004b4d 	.word	0x08004b4d
 8004e00:	0800585e 	.word	0x0800585e

08004e04 <__sfputc_r>:
 8004e04:	6893      	ldr	r3, [r2, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	b410      	push	{r4}
 8004e0c:	6093      	str	r3, [r2, #8]
 8004e0e:	da08      	bge.n	8004e22 <__sfputc_r+0x1e>
 8004e10:	6994      	ldr	r4, [r2, #24]
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	db01      	blt.n	8004e1a <__sfputc_r+0x16>
 8004e16:	290a      	cmp	r1, #10
 8004e18:	d103      	bne.n	8004e22 <__sfputc_r+0x1e>
 8004e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1e:	f7ff bb0d 	b.w	800443c <__swbuf_r>
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	1c58      	adds	r0, r3, #1
 8004e26:	6010      	str	r0, [r2, #0]
 8004e28:	7019      	strb	r1, [r3, #0]
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <__sfputs_r>:
 8004e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	18d5      	adds	r5, r2, r3
 8004e3c:	42ac      	cmp	r4, r5
 8004e3e:	d101      	bne.n	8004e44 <__sfputs_r+0x12>
 8004e40:	2000      	movs	r0, #0
 8004e42:	e007      	b.n	8004e54 <__sfputs_r+0x22>
 8004e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e48:	463a      	mov	r2, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff ffda 	bl	8004e04 <__sfputc_r>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d1f3      	bne.n	8004e3c <__sfputs_r+0xa>
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e58 <_vfiprintf_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	b09d      	sub	sp, #116	; 0x74
 8004e60:	4614      	mov	r4, r2
 8004e62:	4698      	mov	r8, r3
 8004e64:	4606      	mov	r6, r0
 8004e66:	b118      	cbz	r0, 8004e70 <_vfiprintf_r+0x18>
 8004e68:	6983      	ldr	r3, [r0, #24]
 8004e6a:	b90b      	cbnz	r3, 8004e70 <_vfiprintf_r+0x18>
 8004e6c:	f7ff fcc0 	bl	80047f0 <__sinit>
 8004e70:	4b89      	ldr	r3, [pc, #548]	; (8005098 <_vfiprintf_r+0x240>)
 8004e72:	429d      	cmp	r5, r3
 8004e74:	d11b      	bne.n	8004eae <_vfiprintf_r+0x56>
 8004e76:	6875      	ldr	r5, [r6, #4]
 8004e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7a:	07d9      	lsls	r1, r3, #31
 8004e7c:	d405      	bmi.n	8004e8a <_vfiprintf_r+0x32>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	059a      	lsls	r2, r3, #22
 8004e82:	d402      	bmi.n	8004e8a <_vfiprintf_r+0x32>
 8004e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e86:	f7ff fd51 	bl	800492c <__retarget_lock_acquire_recursive>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	d501      	bpl.n	8004e94 <_vfiprintf_r+0x3c>
 8004e90:	692b      	ldr	r3, [r5, #16]
 8004e92:	b9eb      	cbnz	r3, 8004ed0 <_vfiprintf_r+0x78>
 8004e94:	4629      	mov	r1, r5
 8004e96:	4630      	mov	r0, r6
 8004e98:	f7ff fb22 	bl	80044e0 <__swsetup_r>
 8004e9c:	b1c0      	cbz	r0, 8004ed0 <_vfiprintf_r+0x78>
 8004e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea0:	07dc      	lsls	r4, r3, #31
 8004ea2:	d50e      	bpl.n	8004ec2 <_vfiprintf_r+0x6a>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea8:	b01d      	add	sp, #116	; 0x74
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	4b7b      	ldr	r3, [pc, #492]	; (800509c <_vfiprintf_r+0x244>)
 8004eb0:	429d      	cmp	r5, r3
 8004eb2:	d101      	bne.n	8004eb8 <_vfiprintf_r+0x60>
 8004eb4:	68b5      	ldr	r5, [r6, #8]
 8004eb6:	e7df      	b.n	8004e78 <_vfiprintf_r+0x20>
 8004eb8:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <_vfiprintf_r+0x248>)
 8004eba:	429d      	cmp	r5, r3
 8004ebc:	bf08      	it	eq
 8004ebe:	68f5      	ldreq	r5, [r6, #12]
 8004ec0:	e7da      	b.n	8004e78 <_vfiprintf_r+0x20>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	0598      	lsls	r0, r3, #22
 8004ec6:	d4ed      	bmi.n	8004ea4 <_vfiprintf_r+0x4c>
 8004ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eca:	f7ff fd30 	bl	800492e <__retarget_lock_release_recursive>
 8004ece:	e7e9      	b.n	8004ea4 <_vfiprintf_r+0x4c>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ede:	2330      	movs	r3, #48	; 0x30
 8004ee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050a4 <_vfiprintf_r+0x24c>
 8004ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee8:	f04f 0901 	mov.w	r9, #1
 8004eec:	4623      	mov	r3, r4
 8004eee:	469a      	mov	sl, r3
 8004ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef4:	b10a      	cbz	r2, 8004efa <_vfiprintf_r+0xa2>
 8004ef6:	2a25      	cmp	r2, #37	; 0x25
 8004ef8:	d1f9      	bne.n	8004eee <_vfiprintf_r+0x96>
 8004efa:	ebba 0b04 	subs.w	fp, sl, r4
 8004efe:	d00b      	beq.n	8004f18 <_vfiprintf_r+0xc0>
 8004f00:	465b      	mov	r3, fp
 8004f02:	4622      	mov	r2, r4
 8004f04:	4629      	mov	r1, r5
 8004f06:	4630      	mov	r0, r6
 8004f08:	f7ff ff93 	bl	8004e32 <__sfputs_r>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f000 80aa 	beq.w	8005066 <_vfiprintf_r+0x20e>
 8004f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f14:	445a      	add	r2, fp
 8004f16:	9209      	str	r2, [sp, #36]	; 0x24
 8004f18:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a2 	beq.w	8005066 <_vfiprintf_r+0x20e>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f2c:	f10a 0a01 	add.w	sl, sl, #1
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	9307      	str	r3, [sp, #28]
 8004f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f38:	931a      	str	r3, [sp, #104]	; 0x68
 8004f3a:	4654      	mov	r4, sl
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f42:	4858      	ldr	r0, [pc, #352]	; (80050a4 <_vfiprintf_r+0x24c>)
 8004f44:	f7fb f94c 	bl	80001e0 <memchr>
 8004f48:	9a04      	ldr	r2, [sp, #16]
 8004f4a:	b9d8      	cbnz	r0, 8004f84 <_vfiprintf_r+0x12c>
 8004f4c:	06d1      	lsls	r1, r2, #27
 8004f4e:	bf44      	itt	mi
 8004f50:	2320      	movmi	r3, #32
 8004f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f56:	0713      	lsls	r3, r2, #28
 8004f58:	bf44      	itt	mi
 8004f5a:	232b      	movmi	r3, #43	; 0x2b
 8004f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f60:	f89a 3000 	ldrb.w	r3, [sl]
 8004f64:	2b2a      	cmp	r3, #42	; 0x2a
 8004f66:	d015      	beq.n	8004f94 <_vfiprintf_r+0x13c>
 8004f68:	9a07      	ldr	r2, [sp, #28]
 8004f6a:	4654      	mov	r4, sl
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f04f 0c0a 	mov.w	ip, #10
 8004f72:	4621      	mov	r1, r4
 8004f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f78:	3b30      	subs	r3, #48	; 0x30
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	d94e      	bls.n	800501c <_vfiprintf_r+0x1c4>
 8004f7e:	b1b0      	cbz	r0, 8004fae <_vfiprintf_r+0x156>
 8004f80:	9207      	str	r2, [sp, #28]
 8004f82:	e014      	b.n	8004fae <_vfiprintf_r+0x156>
 8004f84:	eba0 0308 	sub.w	r3, r0, r8
 8004f88:	fa09 f303 	lsl.w	r3, r9, r3
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	46a2      	mov	sl, r4
 8004f92:	e7d2      	b.n	8004f3a <_vfiprintf_r+0xe2>
 8004f94:	9b03      	ldr	r3, [sp, #12]
 8004f96:	1d19      	adds	r1, r3, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	9103      	str	r1, [sp, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bfbb      	ittet	lt
 8004fa0:	425b      	neglt	r3, r3
 8004fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa6:	9307      	strge	r3, [sp, #28]
 8004fa8:	9307      	strlt	r3, [sp, #28]
 8004faa:	bfb8      	it	lt
 8004fac:	9204      	strlt	r2, [sp, #16]
 8004fae:	7823      	ldrb	r3, [r4, #0]
 8004fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb2:	d10c      	bne.n	8004fce <_vfiprintf_r+0x176>
 8004fb4:	7863      	ldrb	r3, [r4, #1]
 8004fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb8:	d135      	bne.n	8005026 <_vfiprintf_r+0x1ce>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	9203      	str	r2, [sp, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfb8      	it	lt
 8004fc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fca:	3402      	adds	r4, #2
 8004fcc:	9305      	str	r3, [sp, #20]
 8004fce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050b4 <_vfiprintf_r+0x25c>
 8004fd2:	7821      	ldrb	r1, [r4, #0]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	f7fb f902 	bl	80001e0 <memchr>
 8004fdc:	b140      	cbz	r0, 8004ff0 <_vfiprintf_r+0x198>
 8004fde:	2340      	movs	r3, #64	; 0x40
 8004fe0:	eba0 000a 	sub.w	r0, r0, sl
 8004fe4:	fa03 f000 	lsl.w	r0, r3, r0
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	4303      	orrs	r3, r0
 8004fec:	3401      	adds	r4, #1
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	482c      	ldr	r0, [pc, #176]	; (80050a8 <_vfiprintf_r+0x250>)
 8004ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ffa:	2206      	movs	r2, #6
 8004ffc:	f7fb f8f0 	bl	80001e0 <memchr>
 8005000:	2800      	cmp	r0, #0
 8005002:	d03f      	beq.n	8005084 <_vfiprintf_r+0x22c>
 8005004:	4b29      	ldr	r3, [pc, #164]	; (80050ac <_vfiprintf_r+0x254>)
 8005006:	bb1b      	cbnz	r3, 8005050 <_vfiprintf_r+0x1f8>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	3307      	adds	r3, #7
 800500c:	f023 0307 	bic.w	r3, r3, #7
 8005010:	3308      	adds	r3, #8
 8005012:	9303      	str	r3, [sp, #12]
 8005014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005016:	443b      	add	r3, r7
 8005018:	9309      	str	r3, [sp, #36]	; 0x24
 800501a:	e767      	b.n	8004eec <_vfiprintf_r+0x94>
 800501c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005020:	460c      	mov	r4, r1
 8005022:	2001      	movs	r0, #1
 8005024:	e7a5      	b.n	8004f72 <_vfiprintf_r+0x11a>
 8005026:	2300      	movs	r3, #0
 8005028:	3401      	adds	r4, #1
 800502a:	9305      	str	r3, [sp, #20]
 800502c:	4619      	mov	r1, r3
 800502e:	f04f 0c0a 	mov.w	ip, #10
 8005032:	4620      	mov	r0, r4
 8005034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005038:	3a30      	subs	r2, #48	; 0x30
 800503a:	2a09      	cmp	r2, #9
 800503c:	d903      	bls.n	8005046 <_vfiprintf_r+0x1ee>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0c5      	beq.n	8004fce <_vfiprintf_r+0x176>
 8005042:	9105      	str	r1, [sp, #20]
 8005044:	e7c3      	b.n	8004fce <_vfiprintf_r+0x176>
 8005046:	fb0c 2101 	mla	r1, ip, r1, r2
 800504a:	4604      	mov	r4, r0
 800504c:	2301      	movs	r3, #1
 800504e:	e7f0      	b.n	8005032 <_vfiprintf_r+0x1da>
 8005050:	ab03      	add	r3, sp, #12
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	462a      	mov	r2, r5
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <_vfiprintf_r+0x258>)
 8005058:	a904      	add	r1, sp, #16
 800505a:	4630      	mov	r0, r6
 800505c:	f3af 8000 	nop.w
 8005060:	4607      	mov	r7, r0
 8005062:	1c78      	adds	r0, r7, #1
 8005064:	d1d6      	bne.n	8005014 <_vfiprintf_r+0x1bc>
 8005066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005068:	07d9      	lsls	r1, r3, #31
 800506a:	d405      	bmi.n	8005078 <_vfiprintf_r+0x220>
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	059a      	lsls	r2, r3, #22
 8005070:	d402      	bmi.n	8005078 <_vfiprintf_r+0x220>
 8005072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005074:	f7ff fc5b 	bl	800492e <__retarget_lock_release_recursive>
 8005078:	89ab      	ldrh	r3, [r5, #12]
 800507a:	065b      	lsls	r3, r3, #25
 800507c:	f53f af12 	bmi.w	8004ea4 <_vfiprintf_r+0x4c>
 8005080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005082:	e711      	b.n	8004ea8 <_vfiprintf_r+0x50>
 8005084:	ab03      	add	r3, sp, #12
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	462a      	mov	r2, r5
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <_vfiprintf_r+0x258>)
 800508c:	a904      	add	r1, sp, #16
 800508e:	4630      	mov	r0, r6
 8005090:	f000 f880 	bl	8005194 <_printf_i>
 8005094:	e7e4      	b.n	8005060 <_vfiprintf_r+0x208>
 8005096:	bf00      	nop
 8005098:	08005818 	.word	0x08005818
 800509c:	08005838 	.word	0x08005838
 80050a0:	080057f8 	.word	0x080057f8
 80050a4:	08005858 	.word	0x08005858
 80050a8:	08005862 	.word	0x08005862
 80050ac:	00000000 	.word	0x00000000
 80050b0:	08004e33 	.word	0x08004e33
 80050b4:	0800585e 	.word	0x0800585e

080050b8 <_printf_common>:
 80050b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	4616      	mov	r6, r2
 80050be:	4699      	mov	r9, r3
 80050c0:	688a      	ldr	r2, [r1, #8]
 80050c2:	690b      	ldr	r3, [r1, #16]
 80050c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bfb8      	it	lt
 80050cc:	4613      	movlt	r3, r2
 80050ce:	6033      	str	r3, [r6, #0]
 80050d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d4:	4607      	mov	r7, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	b10a      	cbz	r2, 80050de <_printf_common+0x26>
 80050da:	3301      	adds	r3, #1
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	0699      	lsls	r1, r3, #26
 80050e2:	bf42      	ittt	mi
 80050e4:	6833      	ldrmi	r3, [r6, #0]
 80050e6:	3302      	addmi	r3, #2
 80050e8:	6033      	strmi	r3, [r6, #0]
 80050ea:	6825      	ldr	r5, [r4, #0]
 80050ec:	f015 0506 	ands.w	r5, r5, #6
 80050f0:	d106      	bne.n	8005100 <_printf_common+0x48>
 80050f2:	f104 0a19 	add.w	sl, r4, #25
 80050f6:	68e3      	ldr	r3, [r4, #12]
 80050f8:	6832      	ldr	r2, [r6, #0]
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	dc26      	bgt.n	800514e <_printf_common+0x96>
 8005100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005104:	1e13      	subs	r3, r2, #0
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	bf18      	it	ne
 800510a:	2301      	movne	r3, #1
 800510c:	0692      	lsls	r2, r2, #26
 800510e:	d42b      	bmi.n	8005168 <_printf_common+0xb0>
 8005110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005114:	4649      	mov	r1, r9
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d01e      	beq.n	800515c <_printf_common+0xa4>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	68e5      	ldr	r5, [r4, #12]
 8005122:	6832      	ldr	r2, [r6, #0]
 8005124:	f003 0306 	and.w	r3, r3, #6
 8005128:	2b04      	cmp	r3, #4
 800512a:	bf08      	it	eq
 800512c:	1aad      	subeq	r5, r5, r2
 800512e:	68a3      	ldr	r3, [r4, #8]
 8005130:	6922      	ldr	r2, [r4, #16]
 8005132:	bf0c      	ite	eq
 8005134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005138:	2500      	movne	r5, #0
 800513a:	4293      	cmp	r3, r2
 800513c:	bfc4      	itt	gt
 800513e:	1a9b      	subgt	r3, r3, r2
 8005140:	18ed      	addgt	r5, r5, r3
 8005142:	2600      	movs	r6, #0
 8005144:	341a      	adds	r4, #26
 8005146:	42b5      	cmp	r5, r6
 8005148:	d11a      	bne.n	8005180 <_printf_common+0xc8>
 800514a:	2000      	movs	r0, #0
 800514c:	e008      	b.n	8005160 <_printf_common+0xa8>
 800514e:	2301      	movs	r3, #1
 8005150:	4652      	mov	r2, sl
 8005152:	4649      	mov	r1, r9
 8005154:	4638      	mov	r0, r7
 8005156:	47c0      	blx	r8
 8005158:	3001      	adds	r0, #1
 800515a:	d103      	bne.n	8005164 <_printf_common+0xac>
 800515c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	3501      	adds	r5, #1
 8005166:	e7c6      	b.n	80050f6 <_printf_common+0x3e>
 8005168:	18e1      	adds	r1, r4, r3
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	2030      	movs	r0, #48	; 0x30
 800516e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005172:	4422      	add	r2, r4
 8005174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800517c:	3302      	adds	r3, #2
 800517e:	e7c7      	b.n	8005110 <_printf_common+0x58>
 8005180:	2301      	movs	r3, #1
 8005182:	4622      	mov	r2, r4
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d0e6      	beq.n	800515c <_printf_common+0xa4>
 800518e:	3601      	adds	r6, #1
 8005190:	e7d9      	b.n	8005146 <_printf_common+0x8e>
	...

08005194 <_printf_i>:
 8005194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	460c      	mov	r4, r1
 800519a:	4691      	mov	r9, r2
 800519c:	7e27      	ldrb	r7, [r4, #24]
 800519e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051a0:	2f78      	cmp	r7, #120	; 0x78
 80051a2:	4680      	mov	r8, r0
 80051a4:	469a      	mov	sl, r3
 80051a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051aa:	d807      	bhi.n	80051bc <_printf_i+0x28>
 80051ac:	2f62      	cmp	r7, #98	; 0x62
 80051ae:	d80a      	bhi.n	80051c6 <_printf_i+0x32>
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	f000 80d8 	beq.w	8005366 <_printf_i+0x1d2>
 80051b6:	2f58      	cmp	r7, #88	; 0x58
 80051b8:	f000 80a3 	beq.w	8005302 <_printf_i+0x16e>
 80051bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c4:	e03a      	b.n	800523c <_printf_i+0xa8>
 80051c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ca:	2b15      	cmp	r3, #21
 80051cc:	d8f6      	bhi.n	80051bc <_printf_i+0x28>
 80051ce:	a001      	add	r0, pc, #4	; (adr r0, 80051d4 <_printf_i+0x40>)
 80051d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	08005241 	.word	0x08005241
 80051dc:	080051bd 	.word	0x080051bd
 80051e0:	080051bd 	.word	0x080051bd
 80051e4:	080051bd 	.word	0x080051bd
 80051e8:	080051bd 	.word	0x080051bd
 80051ec:	08005241 	.word	0x08005241
 80051f0:	080051bd 	.word	0x080051bd
 80051f4:	080051bd 	.word	0x080051bd
 80051f8:	080051bd 	.word	0x080051bd
 80051fc:	080051bd 	.word	0x080051bd
 8005200:	0800534d 	.word	0x0800534d
 8005204:	08005271 	.word	0x08005271
 8005208:	0800532f 	.word	0x0800532f
 800520c:	080051bd 	.word	0x080051bd
 8005210:	080051bd 	.word	0x080051bd
 8005214:	0800536f 	.word	0x0800536f
 8005218:	080051bd 	.word	0x080051bd
 800521c:	08005271 	.word	0x08005271
 8005220:	080051bd 	.word	0x080051bd
 8005224:	080051bd 	.word	0x080051bd
 8005228:	08005337 	.word	0x08005337
 800522c:	680b      	ldr	r3, [r1, #0]
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	600a      	str	r2, [r1, #0]
 8005234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800523c:	2301      	movs	r3, #1
 800523e:	e0a3      	b.n	8005388 <_printf_i+0x1f4>
 8005240:	6825      	ldr	r5, [r4, #0]
 8005242:	6808      	ldr	r0, [r1, #0]
 8005244:	062e      	lsls	r6, r5, #24
 8005246:	f100 0304 	add.w	r3, r0, #4
 800524a:	d50a      	bpl.n	8005262 <_printf_i+0xce>
 800524c:	6805      	ldr	r5, [r0, #0]
 800524e:	600b      	str	r3, [r1, #0]
 8005250:	2d00      	cmp	r5, #0
 8005252:	da03      	bge.n	800525c <_printf_i+0xc8>
 8005254:	232d      	movs	r3, #45	; 0x2d
 8005256:	426d      	negs	r5, r5
 8005258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800525c:	485e      	ldr	r0, [pc, #376]	; (80053d8 <_printf_i+0x244>)
 800525e:	230a      	movs	r3, #10
 8005260:	e019      	b.n	8005296 <_printf_i+0x102>
 8005262:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005266:	6805      	ldr	r5, [r0, #0]
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	bf18      	it	ne
 800526c:	b22d      	sxthne	r5, r5
 800526e:	e7ef      	b.n	8005250 <_printf_i+0xbc>
 8005270:	680b      	ldr	r3, [r1, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	1d18      	adds	r0, r3, #4
 8005276:	6008      	str	r0, [r1, #0]
 8005278:	0628      	lsls	r0, r5, #24
 800527a:	d501      	bpl.n	8005280 <_printf_i+0xec>
 800527c:	681d      	ldr	r5, [r3, #0]
 800527e:	e002      	b.n	8005286 <_printf_i+0xf2>
 8005280:	0669      	lsls	r1, r5, #25
 8005282:	d5fb      	bpl.n	800527c <_printf_i+0xe8>
 8005284:	881d      	ldrh	r5, [r3, #0]
 8005286:	4854      	ldr	r0, [pc, #336]	; (80053d8 <_printf_i+0x244>)
 8005288:	2f6f      	cmp	r7, #111	; 0x6f
 800528a:	bf0c      	ite	eq
 800528c:	2308      	moveq	r3, #8
 800528e:	230a      	movne	r3, #10
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005296:	6866      	ldr	r6, [r4, #4]
 8005298:	60a6      	str	r6, [r4, #8]
 800529a:	2e00      	cmp	r6, #0
 800529c:	bfa2      	ittt	ge
 800529e:	6821      	ldrge	r1, [r4, #0]
 80052a0:	f021 0104 	bicge.w	r1, r1, #4
 80052a4:	6021      	strge	r1, [r4, #0]
 80052a6:	b90d      	cbnz	r5, 80052ac <_printf_i+0x118>
 80052a8:	2e00      	cmp	r6, #0
 80052aa:	d04d      	beq.n	8005348 <_printf_i+0x1b4>
 80052ac:	4616      	mov	r6, r2
 80052ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80052b2:	fb03 5711 	mls	r7, r3, r1, r5
 80052b6:	5dc7      	ldrb	r7, [r0, r7]
 80052b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052bc:	462f      	mov	r7, r5
 80052be:	42bb      	cmp	r3, r7
 80052c0:	460d      	mov	r5, r1
 80052c2:	d9f4      	bls.n	80052ae <_printf_i+0x11a>
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <_printf_i+0x14c>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07df      	lsls	r7, r3, #31
 80052cc:	d508      	bpl.n	80052e0 <_printf_i+0x14c>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6861      	ldr	r1, [r4, #4]
 80052d2:	4299      	cmp	r1, r3
 80052d4:	bfde      	ittt	le
 80052d6:	2330      	movle	r3, #48	; 0x30
 80052d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052dc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80052e0:	1b92      	subs	r2, r2, r6
 80052e2:	6122      	str	r2, [r4, #16]
 80052e4:	f8cd a000 	str.w	sl, [sp]
 80052e8:	464b      	mov	r3, r9
 80052ea:	aa03      	add	r2, sp, #12
 80052ec:	4621      	mov	r1, r4
 80052ee:	4640      	mov	r0, r8
 80052f0:	f7ff fee2 	bl	80050b8 <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d14c      	bne.n	8005392 <_printf_i+0x1fe>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052fc:	b004      	add	sp, #16
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	4835      	ldr	r0, [pc, #212]	; (80053d8 <_printf_i+0x244>)
 8005304:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	680e      	ldr	r6, [r1, #0]
 800530c:	061f      	lsls	r7, r3, #24
 800530e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005312:	600e      	str	r6, [r1, #0]
 8005314:	d514      	bpl.n	8005340 <_printf_i+0x1ac>
 8005316:	07d9      	lsls	r1, r3, #31
 8005318:	bf44      	itt	mi
 800531a:	f043 0320 	orrmi.w	r3, r3, #32
 800531e:	6023      	strmi	r3, [r4, #0]
 8005320:	b91d      	cbnz	r5, 800532a <_printf_i+0x196>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f023 0320 	bic.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2310      	movs	r3, #16
 800532c:	e7b0      	b.n	8005290 <_printf_i+0xfc>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	2378      	movs	r3, #120	; 0x78
 8005338:	4828      	ldr	r0, [pc, #160]	; (80053dc <_printf_i+0x248>)
 800533a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800533e:	e7e3      	b.n	8005308 <_printf_i+0x174>
 8005340:	065e      	lsls	r6, r3, #25
 8005342:	bf48      	it	mi
 8005344:	b2ad      	uxthmi	r5, r5
 8005346:	e7e6      	b.n	8005316 <_printf_i+0x182>
 8005348:	4616      	mov	r6, r2
 800534a:	e7bb      	b.n	80052c4 <_printf_i+0x130>
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	6826      	ldr	r6, [r4, #0]
 8005350:	6960      	ldr	r0, [r4, #20]
 8005352:	1d1d      	adds	r5, r3, #4
 8005354:	600d      	str	r5, [r1, #0]
 8005356:	0635      	lsls	r5, r6, #24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	d501      	bpl.n	8005360 <_printf_i+0x1cc>
 800535c:	6018      	str	r0, [r3, #0]
 800535e:	e002      	b.n	8005366 <_printf_i+0x1d2>
 8005360:	0671      	lsls	r1, r6, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0x1c8>
 8005364:	8018      	strh	r0, [r3, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	4616      	mov	r6, r2
 800536c:	e7ba      	b.n	80052e4 <_printf_i+0x150>
 800536e:	680b      	ldr	r3, [r1, #0]
 8005370:	1d1a      	adds	r2, r3, #4
 8005372:	600a      	str	r2, [r1, #0]
 8005374:	681e      	ldr	r6, [r3, #0]
 8005376:	6862      	ldr	r2, [r4, #4]
 8005378:	2100      	movs	r1, #0
 800537a:	4630      	mov	r0, r6
 800537c:	f7fa ff30 	bl	80001e0 <memchr>
 8005380:	b108      	cbz	r0, 8005386 <_printf_i+0x1f2>
 8005382:	1b80      	subs	r0, r0, r6
 8005384:	6060      	str	r0, [r4, #4]
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	2300      	movs	r3, #0
 800538c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005390:	e7a8      	b.n	80052e4 <_printf_i+0x150>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	4632      	mov	r2, r6
 8005396:	4649      	mov	r1, r9
 8005398:	4640      	mov	r0, r8
 800539a:	47d0      	blx	sl
 800539c:	3001      	adds	r0, #1
 800539e:	d0ab      	beq.n	80052f8 <_printf_i+0x164>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	079b      	lsls	r3, r3, #30
 80053a4:	d413      	bmi.n	80053ce <_printf_i+0x23a>
 80053a6:	68e0      	ldr	r0, [r4, #12]
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	4298      	cmp	r0, r3
 80053ac:	bfb8      	it	lt
 80053ae:	4618      	movlt	r0, r3
 80053b0:	e7a4      	b.n	80052fc <_printf_i+0x168>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4632      	mov	r2, r6
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	47d0      	blx	sl
 80053bc:	3001      	adds	r0, #1
 80053be:	d09b      	beq.n	80052f8 <_printf_i+0x164>
 80053c0:	3501      	adds	r5, #1
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	9903      	ldr	r1, [sp, #12]
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	dcf2      	bgt.n	80053b2 <_printf_i+0x21e>
 80053cc:	e7eb      	b.n	80053a6 <_printf_i+0x212>
 80053ce:	2500      	movs	r5, #0
 80053d0:	f104 0619 	add.w	r6, r4, #25
 80053d4:	e7f5      	b.n	80053c2 <_printf_i+0x22e>
 80053d6:	bf00      	nop
 80053d8:	08005869 	.word	0x08005869
 80053dc:	0800587a 	.word	0x0800587a

080053e0 <_sbrk_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d06      	ldr	r5, [pc, #24]	; (80053fc <_sbrk_r+0x1c>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fc f9ea 	bl	80017c4 <_sbrk>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_sbrk_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_sbrk_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000a3c 	.word	0x20000a3c

08005400 <__sread>:
 8005400:	b510      	push	{r4, lr}
 8005402:	460c      	mov	r4, r1
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	f000 f8ee 	bl	80055e8 <_read_r>
 800540c:	2800      	cmp	r0, #0
 800540e:	bfab      	itete	ge
 8005410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005412:	89a3      	ldrhlt	r3, [r4, #12]
 8005414:	181b      	addge	r3, r3, r0
 8005416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800541a:	bfac      	ite	ge
 800541c:	6563      	strge	r3, [r4, #84]	; 0x54
 800541e:	81a3      	strhlt	r3, [r4, #12]
 8005420:	bd10      	pop	{r4, pc}

08005422 <__swrite>:
 8005422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	461f      	mov	r7, r3
 8005428:	898b      	ldrh	r3, [r1, #12]
 800542a:	05db      	lsls	r3, r3, #23
 800542c:	4605      	mov	r5, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4616      	mov	r6, r2
 8005432:	d505      	bpl.n	8005440 <__swrite+0x1e>
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	2302      	movs	r3, #2
 800543a:	2200      	movs	r2, #0
 800543c:	f000 f868 	bl	8005510 <_lseek_r>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	4632      	mov	r2, r6
 800544e:	463b      	mov	r3, r7
 8005450:	4628      	mov	r0, r5
 8005452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005456:	f000 b817 	b.w	8005488 <_write_r>

0800545a <__sseek>:
 800545a:	b510      	push	{r4, lr}
 800545c:	460c      	mov	r4, r1
 800545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005462:	f000 f855 	bl	8005510 <_lseek_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	bf15      	itete	ne
 800546c:	6560      	strne	r0, [r4, #84]	; 0x54
 800546e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005476:	81a3      	strheq	r3, [r4, #12]
 8005478:	bf18      	it	ne
 800547a:	81a3      	strhne	r3, [r4, #12]
 800547c:	bd10      	pop	{r4, pc}

0800547e <__sclose>:
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 b813 	b.w	80054ac <_close_r>
	...

08005488 <_write_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	; (80054a8 <_write_r+0x20>)
 800548c:	4604      	mov	r4, r0
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	2200      	movs	r2, #0
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f7fb f8f1 	bl	800067e <_write>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_write_r+0x1e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_write_r+0x1e>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	20000a3c 	.word	0x20000a3c

080054ac <_close_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	; (80054c8 <_close_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc f94f 	bl	800175a <_close>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_close_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_close_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000a3c 	.word	0x20000a3c

080054cc <_fstat_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d07      	ldr	r5, [pc, #28]	; (80054ec <_fstat_r+0x20>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	f7fc f94a 	bl	8001772 <_fstat>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	d102      	bne.n	80054e8 <_fstat_r+0x1c>
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	b103      	cbz	r3, 80054e8 <_fstat_r+0x1c>
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	bd38      	pop	{r3, r4, r5, pc}
 80054ea:	bf00      	nop
 80054ec:	20000a3c 	.word	0x20000a3c

080054f0 <_isatty_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	; (800550c <_isatty_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fc f949 	bl	8001792 <_isatty>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_isatty_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_isatty_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	20000a3c 	.word	0x20000a3c

08005510 <_lseek_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d07      	ldr	r5, [pc, #28]	; (8005530 <_lseek_r+0x20>)
 8005514:	4604      	mov	r4, r0
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	2200      	movs	r2, #0
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f942 	bl	80017a8 <_lseek>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_lseek_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_lseek_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20000a3c 	.word	0x20000a3c

08005534 <memcpy>:
 8005534:	440a      	add	r2, r1
 8005536:	4291      	cmp	r1, r2
 8005538:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800553c:	d100      	bne.n	8005540 <memcpy+0xc>
 800553e:	4770      	bx	lr
 8005540:	b510      	push	{r4, lr}
 8005542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554a:	4291      	cmp	r1, r2
 800554c:	d1f9      	bne.n	8005542 <memcpy+0xe>
 800554e:	bd10      	pop	{r4, pc}

08005550 <memmove>:
 8005550:	4288      	cmp	r0, r1
 8005552:	b510      	push	{r4, lr}
 8005554:	eb01 0402 	add.w	r4, r1, r2
 8005558:	d902      	bls.n	8005560 <memmove+0x10>
 800555a:	4284      	cmp	r4, r0
 800555c:	4623      	mov	r3, r4
 800555e:	d807      	bhi.n	8005570 <memmove+0x20>
 8005560:	1e43      	subs	r3, r0, #1
 8005562:	42a1      	cmp	r1, r4
 8005564:	d008      	beq.n	8005578 <memmove+0x28>
 8005566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800556e:	e7f8      	b.n	8005562 <memmove+0x12>
 8005570:	4402      	add	r2, r0
 8005572:	4601      	mov	r1, r0
 8005574:	428a      	cmp	r2, r1
 8005576:	d100      	bne.n	800557a <memmove+0x2a>
 8005578:	bd10      	pop	{r4, pc}
 800557a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800557e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005582:	e7f7      	b.n	8005574 <memmove+0x24>

08005584 <__malloc_lock>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__malloc_lock+0x8>)
 8005586:	f7ff b9d1 	b.w	800492c <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	20000a34 	.word	0x20000a34

08005590 <__malloc_unlock>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__malloc_unlock+0x8>)
 8005592:	f7ff b9cc 	b.w	800492e <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	20000a34 	.word	0x20000a34

0800559c <_realloc_r>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	4607      	mov	r7, r0
 80055a0:	4614      	mov	r4, r2
 80055a2:	460e      	mov	r6, r1
 80055a4:	b921      	cbnz	r1, 80055b0 <_realloc_r+0x14>
 80055a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055aa:	4611      	mov	r1, r2
 80055ac:	f7ff ba74 	b.w	8004a98 <_malloc_r>
 80055b0:	b922      	cbnz	r2, 80055bc <_realloc_r+0x20>
 80055b2:	f7ff fa21 	bl	80049f8 <_free_r>
 80055b6:	4625      	mov	r5, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055bc:	f000 f826 	bl	800560c <_malloc_usable_size_r>
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d20f      	bcs.n	80055e4 <_realloc_r+0x48>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4638      	mov	r0, r7
 80055c8:	f7ff fa66 	bl	8004a98 <_malloc_r>
 80055cc:	4605      	mov	r5, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0f2      	beq.n	80055b8 <_realloc_r+0x1c>
 80055d2:	4631      	mov	r1, r6
 80055d4:	4622      	mov	r2, r4
 80055d6:	f7ff ffad 	bl	8005534 <memcpy>
 80055da:	4631      	mov	r1, r6
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff fa0b 	bl	80049f8 <_free_r>
 80055e2:	e7e9      	b.n	80055b8 <_realloc_r+0x1c>
 80055e4:	4635      	mov	r5, r6
 80055e6:	e7e7      	b.n	80055b8 <_realloc_r+0x1c>

080055e8 <_read_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4d07      	ldr	r5, [pc, #28]	; (8005608 <_read_r+0x20>)
 80055ec:	4604      	mov	r4, r0
 80055ee:	4608      	mov	r0, r1
 80055f0:	4611      	mov	r1, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f7fc f892 	bl	8001720 <_read>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_read_r+0x1e>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_read_r+0x1e>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000a3c 	.word	0x20000a3c

0800560c <_malloc_usable_size_r>:
 800560c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005610:	1f18      	subs	r0, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfbc      	itt	lt
 8005616:	580b      	ldrlt	r3, [r1, r0]
 8005618:	18c0      	addlt	r0, r0, r3
 800561a:	4770      	bx	lr

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
