
ping_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056fc  080056fc  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005704  08005704  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200000b8  080057c4  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080057c4  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2b  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  0002ee13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020534  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e63c  00000000  00000000  000532d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf024  00000000  00000000  00061910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  00130988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005540 	.word	0x08005540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08005540 	.word	0x08005540

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <W5500_Select>:
/*
 wiz_NetInfo gWIZNETINFO = { .mac = {0xEA, 0x11, 0x22, 0x33, 0x44, 0xEA},
 .dhcp = NETINFO_DHCP };

 */
void W5500_Select(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <W5500_Select+0x14>)
 80005d2:	f002 f945 	bl	8002860 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <W5500_Unselect>:

void W5500_Unselect(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <W5500_Unselect+0x14>)
 80005ea:	f002 f939 	bl	8002860 <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <W5500_ReadBuff+0x24>)
 800060e:	f002 ff1a 	bl	8003446 <HAL_SPI_Receive>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000104 	.word	0x20000104

08000620 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <W5500_WriteBuff+0x24>)
 8000636:	f002 fdca 	bl	80031ce <HAL_SPI_Transmit>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000104 	.word	0x20000104

08000648 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd0 	bl	80005f8 <W5500_ReadBuff>
	return byte;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffd5 	bl	8000620 <W5500_WriteBuff>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e009      	b.n	80006a4 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff6d 	bl	8000578 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf1      	blt.n	8000690 <_write+0x12>
	}
	return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f001 fdb7 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f8e9 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f9d5 	bl	8000a74 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006ca:	f000 f985 	bl	80009d8 <MX_TIM2_Init>
  MX_SPI2_Init();
 80006ce:	f000 f94d 	bl	800096c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	485a      	ldr	r0, [pc, #360]	; (8000840 <main+0x188>)
 80006d8:	f002 f8c2 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 fe19 	bl	8002314 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4856      	ldr	r0, [pc, #344]	; (8000840 <main+0x188>)
 80006e8:	f002 f8ba 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f001 fe10 	bl	8002314 <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80006f4:	4953      	ldr	r1, [pc, #332]	; (8000844 <main+0x18c>)
 80006f6:	4854      	ldr	r0, [pc, #336]	; (8000848 <main+0x190>)
 80006f8:	f001 faee 	bl	8001cd8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80006fc:	4953      	ldr	r1, [pc, #332]	; (800084c <main+0x194>)
 80006fe:	4854      	ldr	r0, [pc, #336]	; (8000850 <main+0x198>)
 8000700:	f001 fb10 	bl	8001d24 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000704:	4953      	ldr	r1, [pc, #332]	; (8000854 <main+0x19c>)
 8000706:	4854      	ldr	r0, [pc, #336]	; (8000858 <main+0x1a0>)
 8000708:	f001 fb38 	bl	8001d7c <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 800070c:	4a53      	ldr	r2, [pc, #332]	; (800085c <main+0x1a4>)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fbdf 	bl	8001ee8 <wizchip_init>

	wizchip_setnetinfo(&gWIZNETINFO);
 800072a:	484d      	ldr	r0, [pc, #308]	; (8000860 <main+0x1a8>)
 800072c:	f001 fc68 	bl	8002000 <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000730:	494b      	ldr	r1, [pc, #300]	; (8000860 <main+0x1a8>)
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fb4e 	bl	8001dd4 <ctlnetwork>
	HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f001 fdea 	bl	8002314 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Creating socket...\r\n");
 8000740:	4848      	ldr	r0, [pc, #288]	; (8000864 <main+0x1ac>)
 8000742:	f003 fde5 	bl	8004310 <puts>
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 8000746:	2300      	movs	r3, #0
 8000748:	2250      	movs	r2, #80	; 0x50
 800074a:	2101      	movs	r1, #1
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fa39 	bl	8000bc4 <socket>
 8000752:	4603      	mov	r3, r0
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b44      	ldr	r3, [pc, #272]	; (8000868 <main+0x1b0>)
 8000758:	701a      	strb	r2, [r3, #0]
		if (stat != HTTP_SOCKET)
 800075a:	4b43      	ldr	r3, [pc, #268]	; (8000868 <main+0x1b0>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <main+0xb8>
			printf("socket() failed, code = %d\r\n", stat);
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <main+0x1b0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4840      	ldr	r0, [pc, #256]	; (800086c <main+0x1b4>)
 800076a:	f003 fd4b 	bl	8004204 <iprintf>
 800076e:	e002      	b.n	8000776 <main+0xbe>
		else
			printf("Socket created, connecting...\r\n");
 8000770:	483f      	ldr	r0, [pc, #252]	; (8000870 <main+0x1b8>)
 8000772:	f003 fdcd 	bl	8004310 <puts>

		stat = listen(HTTP_SOCKET);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fba8 	bl	8000ecc <listen>
 800077c:	4603      	mov	r3, r0
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b39      	ldr	r3, [pc, #228]	; (8000868 <main+0x1b0>)
 8000782:	701a      	strb	r2, [r3, #0]
		if (stat != SOCK_OK)
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <main+0x1b0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d006      	beq.n	800079a <main+0xe2>
			printf("listen() failed, code = %d\r\n", stat);
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <main+0x1b0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4838      	ldr	r0, [pc, #224]	; (8000874 <main+0x1bc>)
 8000794:	f003 fd36 	bl	8004204 <iprintf>
 8000798:	e006      	b.n	80007a8 <main+0xf0>
		else
			printf("listen() OK\r\n");
 800079a:	4837      	ldr	r0, [pc, #220]	; (8000878 <main+0x1c0>)
 800079c:	f003 fdb8 	bl	8004310 <puts>

		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80007a0:	e002      	b.n	80007a8 <main+0xf0>
			HAL_Delay(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 fdb6 	bl	8002314 <HAL_Delay>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80007a8:	f44f 7042 	mov.w	r0, #776	; 0x308
 80007ac:	f000 ffe4 	bl	8001778 <WIZCHIP_READ>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b14      	cmp	r3, #20
 80007b4:	d0f5      	beq.n	80007a2 <main+0xea>
		}

		printf("Input connection\r\n");
 80007b6:	4831      	ldr	r0, [pc, #196]	; (800087c <main+0x1c4>)
 80007b8:	f003 fdaa 	bl	8004310 <puts>
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
 80007bc:	f44f 7042 	mov.w	r0, #776	; 0x308
 80007c0:	f000 ffda 	bl	8001778 <WIZCHIP_READ>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b17      	cmp	r3, #23
 80007c8:	d002      	beq.n	80007d0 <main+0x118>
			printf("Error socket status\r\n");
 80007ca:	482d      	ldr	r0, [pc, #180]	; (8000880 <main+0x1c8>)
 80007cc:	f003 fda0 	bl	8004310 <puts>

		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	461a      	mov	r2, r3
 80007d4:	2104      	movs	r1, #4
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fd42 	bl	8001260 <getsockopt>
		printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 80007dc:	793b      	ldrb	r3, [r7, #4]
 80007de:	4619      	mov	r1, r3
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	461a      	mov	r2, r3
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	4618      	mov	r0, r3
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4603      	mov	r3, r0
 80007ee:	4825      	ldr	r0, [pc, #148]	; (8000884 <main+0x1cc>)
 80007f0:	f003 fd08 	bl	8004204 <iprintf>

		sprintf(Message, "input connection nr - %d", reqnr);
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x1d0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4924      	ldr	r1, [pc, #144]	; (800088c <main+0x1d4>)
 80007fc:	4824      	ldr	r0, [pc, #144]	; (8000890 <main+0x1d8>)
 80007fe:	f003 fd8f 	bl	8004320 <siprintf>

		send(0, (uint8_t*) Message, strlen(Message));
 8000802:	4823      	ldr	r0, [pc, #140]	; (8000890 <main+0x1d8>)
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	4920      	ldr	r1, [pc, #128]	; (8000890 <main+0x1d8>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fc2b 	bl	800106c <send>

		disconnect(HTTP_SOCKET);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fbb2 	bl	8000f80 <disconnect>

		printf("Closing socket.\r\n");
 800081c:	481d      	ldr	r0, [pc, #116]	; (8000894 <main+0x1dc>)
 800081e:	f003 fd77 	bl	8004310 <puts>
		close(HTTP_SOCKET);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fae4 	bl	8000df0 <close>

		HAL_Delay(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082c:	f001 fd72 	bl	8002314 <HAL_Delay>
		reqnr++;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <main+0x1d0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0x1d0>)
 800083a:	701a      	strb	r2, [r3, #0]
	while (1) {
 800083c:	e780      	b.n	8000740 <main+0x88>
 800083e:	bf00      	nop
 8000840:	40020400 	.word	0x40020400
 8000844:	080005e1 	.word	0x080005e1
 8000848:	080005c9 	.word	0x080005c9
 800084c:	08000663 	.word	0x08000663
 8000850:	08000649 	.word	0x08000649
 8000854:	08000621 	.word	0x08000621
 8000858:	080005f9 	.word	0x080005f9
 800085c:	0800564c 	.word	0x0800564c
 8000860:	20000000 	.word	0x20000000
 8000864:	08005558 	.word	0x08005558
 8000868:	20000a28 	.word	0x20000a28
 800086c:	0800556c 	.word	0x0800556c
 8000870:	0800558c 	.word	0x0800558c
 8000874:	080055ac 	.word	0x080055ac
 8000878:	080055cc 	.word	0x080055cc
 800087c:	080055dc 	.word	0x080055dc
 8000880:	080055f0 	.word	0x080055f0
 8000884:	08005608 	.word	0x08005608
 8000888:	200009dc 	.word	0x200009dc
 800088c:	0800561c 	.word	0x0800561c
 8000890:	2000015c 	.word	0x2000015c
 8000894:	08005638 	.word	0x08005638

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fca4 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2310      	movs	r3, #16
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f001 ffb9 	bl	8002894 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000928:	f000 f946 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fa1a 	bl	8002d84 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 f92f 	bl	8000bb8 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI2_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009be:	f002 fb7d 	bl	80030bc <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009c8:	f000 f8f6 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000104 	.word	0x20000104
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM2_Init+0x98>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_TIM2_Init+0x98>)
 80009fe:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000a02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a20:	f003 f8f4 	bl	8003c0c <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 f8c5 	bl	8000bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a3c:	f003 f935 	bl	8003caa <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a46:	f000 f8b7 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_TIM2_Init+0x98>)
 8000a58:	f003 fb26 	bl	80040a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f000 f8a9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200009e0 	.word	0x200009e0

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4824      	ldr	r0, [pc, #144]	; (8000bac <MX_GPIO_Init+0x138>)
 8000b1c:	f001 fea0 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2101      	movs	r1, #1
 8000b24:	4822      	ldr	r0, [pc, #136]	; (8000bb0 <MX_GPIO_Init+0x13c>)
 8000b26:	f001 fe9b 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <MX_GPIO_Init+0x140>)
 8000b30:	f001 fe96 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_GPIO_Init+0x138>)
 8000b4c:	f001 fcec 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <MX_GPIO_Init+0x13c>)
 8000b68:	f001 fcde 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0x13c>)
 8000b80:	f001 fcd2 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_GPIO_Init+0x140>)
 8000b9c:	f001 fcc4 	bl	8002528 <HAL_GPIO_Init>

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4604      	mov	r4, r0
 8000bcc:	4608      	mov	r0, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71bb      	strb	r3, [r7, #6]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d902      	bls.n	8000bee <socket+0x2a>
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bec:	e0f2      	b.n	8000dd4 <socket+0x210>
	switch(protocol)
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <socket+0x3c>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dd11      	ble.n	8000c1c <socket+0x58>
 8000bf8:	3b02      	subs	r3, #2
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d80e      	bhi.n	8000c1c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000bfe:	e011      	b.n	8000c24 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2204      	movs	r2, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000c0c:	f000 fe4e 	bl	80018ac <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <socket+0x5e>
 8000c16:	f06f 0302 	mvn.w	r3, #2
 8000c1a:	e0db      	b.n	8000dd4 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000c1c:	f06f 0304 	mvn.w	r3, #4
 8000c20:	e0d8      	b.n	8000dd4 <socket+0x210>
	    break;
 8000c22:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <socket+0x70>
 8000c2e:	f06f 0305 	mvn.w	r3, #5
 8000c32:	e0cf      	b.n	8000dd4 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d025      	beq.n	8000c86 <socket+0xc2>
	{
   	switch(protocol)
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d002      	beq.n	8000c46 <socket+0x82>
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d008      	beq.n	8000c56 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000c44:	e024      	b.n	8000c90 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11c      	bne.n	8000c8a <socket+0xc6>
 8000c50:	f06f 0305 	mvn.w	r3, #5
 8000c54:	e0be      	b.n	8000dd4 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db02      	blt.n	8000c6e <socket+0xaa>
 8000c68:	f06f 0305 	mvn.w	r3, #5
 8000c6c:	e0b2      	b.n	8000dd4 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db06      	blt.n	8000c8e <socket+0xca>
 8000c80:	f06f 0305 	mvn.w	r3, #5
 8000c84:	e0a6      	b.n	8000dd4 <socket+0x210>
   	}
   }
 8000c86:	bf00      	nop
 8000c88:	e002      	b.n	8000c90 <socket+0xcc>
   	      break;
 8000c8a:	bf00      	nop
 8000c8c:	e000      	b.n	8000c90 <socket+0xcc>
   	      break;
 8000c8e:	bf00      	nop
	close(sn);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f8ac 	bl	8000df0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ca6:	f023 030f 	bic.w	r3, r3, #15
 8000caa:	b25a      	sxtb	r2, r3
 8000cac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f000 fdaa 	bl	8001810 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d110      	bne.n	8000ce4 <socket+0x120>
	{
	   port = sock_any_port++;
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <socket+0x218>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	b291      	uxth	r1, r2
 8000cca:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <socket+0x218>)
 8000ccc:	8011      	strh	r1, [r2, #0]
 8000cce:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <socket+0x218>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d103      	bne.n	8000ce4 <socket+0x120>
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <socket+0x218>)
 8000cde:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000ce2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3301      	adds	r3, #1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f000 fd87 	bl	8001810 <WIZCHIP_WRITE>
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3301      	adds	r3, #1
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d0e:	461a      	mov	r2, r3
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	4610      	mov	r0, r2
 8000d18:	f000 fd7a 	bl	8001810 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	3301      	adds	r3, #1
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fd70 	bl	8001810 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d30:	bf00      	nop
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	3301      	adds	r3, #1
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fd1a 	bl	8001778 <WIZCHIP_READ>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f3      	bne.n	8000d32 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <socket+0x21c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <socket+0x21c>)
 8000d66:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <socket+0x21c>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <socket+0x21c>)
 8000d84:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <socket+0x220>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <socket+0x220>)
 8000da2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <socket+0x224>)
 8000da8:	2100      	movs	r1, #0
 8000daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <socket+0x228>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000db6:	bf00      	nop
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fcd7 	bl	8001778 <WIZCHIP_READ>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f3      	beq.n	8000db8 <socket+0x1f4>
   return (int8_t)sn;
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	20000018 	.word	0x20000018
 8000de0:	200000d4 	.word	0x200000d4
 8000de4:	200000d6 	.word	0x200000d6
 8000de8:	200000d8 	.word	0x200000d8
 8000dec:	200000e8 	.word	0x200000e8

08000df0 <close>:

int8_t close(uint8_t sn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d902      	bls.n	8000e06 <close+0x16>
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e04:	e055      	b.n	8000eb2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e12:	2110      	movs	r1, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fcfb 	bl	8001810 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000e1a:	bf00      	nop
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	3301      	adds	r3, #1
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fca5 	bl	8001778 <WIZCHIP_READ>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f3      	bne.n	8000e1c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3301      	adds	r3, #1
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e40:	211f      	movs	r1, #31
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fce4 	bl	8001810 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <close+0xcc>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <close+0xcc>)
 8000e64:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <close+0xd0>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <close+0xd0>)
 8000e82:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <close+0xd4>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <close+0xd8>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000e96:	bf00      	nop
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fc67 	bl	8001778 <WIZCHIP_READ>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f3      	bne.n	8000e98 <close+0xa8>
	return SOCK_OK;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000d4 	.word	0x200000d4
 8000ec0:	200000d6 	.word	0x200000d6
 8000ec4:	200000d8 	.word	0x200000d8
 8000ec8:	200000e8 	.word	0x200000e8

08000ecc <listen>:

int8_t listen(uint8_t sn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d902      	bls.n	8000ee2 <listen+0x16>
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	e049      	b.n	8000f76 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fc44 	bl	8001778 <WIZCHIP_READ>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d002      	beq.n	8000f00 <listen+0x34>
 8000efa:	f06f 0304 	mvn.w	r3, #4
 8000efe:	e03a      	b.n	8000f76 <listen+0xaa>
	CHECK_SOCKINIT();
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	3301      	adds	r3, #1
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fc33 	bl	8001778 <WIZCHIP_READ>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b13      	cmp	r3, #19
 8000f16:	d002      	beq.n	8000f1e <listen+0x52>
 8000f18:	f06f 0302 	mvn.w	r3, #2
 8000f1c:	e02b      	b.n	8000f76 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	3301      	adds	r3, #1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fc6f 	bl	8001810 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000f32:	bf00      	nop
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	3301      	adds	r3, #1
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fc19 	bl	8001778 <WIZCHIP_READ>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f3      	bne.n	8000f34 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f4c:	e006      	b.n	8000f5c <listen+0x90>
   {
         close(sn);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff4d 	bl	8000df0 <close>
         return SOCKERR_SOCKCLOSED;
 8000f56:	f06f 0303 	mvn.w	r3, #3
 8000f5a:	e00c      	b.n	8000f76 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	3301      	adds	r3, #1
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fc05 	bl	8001778 <WIZCHIP_READ>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b14      	cmp	r3, #20
 8000f72:	d1ec      	bne.n	8000f4e <listen+0x82>
   }
   return SOCK_OK;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d902      	bls.n	8000f96 <disconnect+0x16>
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	e062      	b.n	800105c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fbea 	bl	8001778 <WIZCHIP_READ>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <disconnect+0x34>
 8000fae:	f06f 0304 	mvn.w	r3, #4
 8000fb2:	e053      	b.n	800105c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fc24 	bl	8001810 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000fc8:	bf00      	nop
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	3301      	adds	r3, #1
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fbce 	bl	8001778 <WIZCHIP_READ>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f3      	bne.n	8000fca <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <disconnect+0xe4>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <disconnect+0xe4>)
 8000ffe:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <disconnect+0xe8>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	fa42 f303 	asr.w	r3, r2, r3
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d016      	beq.n	8001042 <disconnect+0xc2>
 8001014:	2300      	movs	r3, #0
 8001016:	e021      	b.n	800105c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3301      	adds	r3, #1
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fba7 	bl	8001778 <WIZCHIP_READ>
 800102a:	4603      	mov	r3, r0
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <disconnect+0xc2>
	   {
	      close(sn);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff feda 	bl	8000df0 <close>
	      return SOCKERR_TIMEOUT;
 800103c:	f06f 030c 	mvn.w	r3, #12
 8001040:	e00c      	b.n	800105c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	3301      	adds	r3, #1
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fb92 	bl	8001778 <WIZCHIP_READ>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1de      	bne.n	8001018 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000d6 	.word	0x200000d6
 8001068:	200000d4 	.word	0x200000d4

0800106c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001080:	2300      	movs	r3, #0
 8001082:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d902      	bls.n	8001090 <send+0x24>
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	e0de      	b.n	800124e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3301      	adds	r3, #1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fb6d 	bl	8001778 <WIZCHIP_READ>
 800109e:	4603      	mov	r3, r0
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d002      	beq.n	80010ae <send+0x42>
 80010a8:	f06f 0304 	mvn.w	r3, #4
 80010ac:	e0cf      	b.n	800124e <send+0x1e2>
   CHECK_SOCKDATA();
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <send+0x4e>
 80010b4:	f06f 030d 	mvn.w	r3, #13
 80010b8:	e0c9      	b.n	800124e <send+0x1e2>
   tmp = getSn_SR(sn);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	3301      	adds	r3, #1
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fb56 	bl	8001778 <WIZCHIP_READ>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b17      	cmp	r3, #23
 80010d4:	d005      	beq.n	80010e2 <send+0x76>
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b1c      	cmp	r3, #28
 80010da:	d002      	beq.n	80010e2 <send+0x76>
 80010dc:	f06f 0306 	mvn.w	r3, #6
 80010e0:	e0b5      	b.n	800124e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <send+0x1ec>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	fa42 f303 	asr.w	r3, r2, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d039      	beq.n	800116a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3301      	adds	r3, #1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fb38 	bl	8001778 <WIZCHIP_READ>
 8001108:	4603      	mov	r3, r0
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	3301      	adds	r3, #1
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001126:	2110      	movs	r1, #16
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb71 	bl	8001810 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2201      	movs	r2, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <send+0x1ec>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4013      	ands	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b43      	ldr	r3, [pc, #268]	; (8001258 <send+0x1ec>)
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	e00d      	b.n	800116a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <send+0xfa>
      {
         close(sn);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe48 	bl	8000df0 <close>
         return SOCKERR_TIMEOUT;
 8001160:	f06f 030c 	mvn.w	r3, #12
 8001164:	e073      	b.n	800124e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001166:	2300      	movs	r3, #0
 8001168:	e071      	b.n	800124e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	3301      	adds	r3, #1
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fafe 	bl	8001778 <WIZCHIP_READ>
 800117c:	4603      	mov	r3, r0
 800117e:	b29b      	uxth	r3, r3
 8001180:	029b      	lsls	r3, r3, #10
 8001182:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001184:	88ba      	ldrh	r2, [r7, #4]
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d901      	bls.n	8001190 <send+0x124>
 800118c:	89bb      	ldrh	r3, [r7, #12]
 800118e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fc4a 	bl	8001a2c <getSn_TX_FSR>
 8001198:	4603      	mov	r3, r0
 800119a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	3301      	adds	r3, #1
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fae5 	bl	8001778 <WIZCHIP_READ>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	d009      	beq.n	80011cc <send+0x160>
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b1c      	cmp	r3, #28
 80011bc:	d006      	beq.n	80011cc <send+0x160>
      {
         close(sn);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe15 	bl	8000df0 <close>
         return SOCKERR_SOCKSTATUS;
 80011c6:	f06f 0306 	mvn.w	r3, #6
 80011ca:	e040      	b.n	800124e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <send+0x1f0>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	fa42 f303 	asr.w	r3, r2, r3
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <send+0x180>
 80011e0:	88ba      	ldrh	r2, [r7, #4]
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d901      	bls.n	80011ec <send+0x180>
 80011e8:	2300      	movs	r3, #0
 80011ea:	e030      	b.n	800124e <send+0x1e2>
      if(len <= freesize) break;
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	89bb      	ldrh	r3, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d900      	bls.n	80011f6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80011f4:	e7cc      	b.n	8001190 <send+0x124>
      if(len <= freesize) break;
 80011f6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80011f8:	88ba      	ldrh	r2, [r7, #4]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fcaa 	bl	8001b58 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	3301      	adds	r3, #1
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001210:	2120      	movs	r1, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fafc 	bl	8001810 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001218:	bf00      	nop
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	3301      	adds	r3, #1
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001226:	4618      	mov	r0, r3
 8001228:	f000 faa6 	bl	8001778 <WIZCHIP_READ>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f3      	bne.n	800121a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2201      	movs	r2, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <send+0x1ec>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <send+0x1ec>)
 800124a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800124c:	88bb      	ldrh	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000d6 	.word	0x200000d6
 800125c:	200000d4 	.word	0x200000d4

08001260 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	460b      	mov	r3, r1
 800126e:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b08      	cmp	r3, #8
 8001274:	d902      	bls.n	800127c <getsockopt+0x1c>
 8001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127a:	e101      	b.n	8001480 <getsockopt+0x220>
   switch(sotype)
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	f200 80fa 	bhi.w	8001478 <getsockopt+0x218>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <getsockopt+0x2c>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012c1 	.word	0x080012c1
 8001290:	080012dd 	.word	0x080012dd
 8001294:	080012f9 	.word	0x080012f9
 8001298:	08001315 	.word	0x08001315
 800129c:	0800134f 	.word	0x0800134f
 80012a0:	08001367 	.word	0x08001367
 80012a4:	08001479 	.word	0x08001479
 80012a8:	080013a1 	.word	0x080013a1
 80012ac:	080013db 	.word	0x080013db
 80012b0:	080013ed 	.word	0x080013ed
 80012b4:	080013ff 	.word	0x080013ff
 80012b8:	0800141b 	.word	0x0800141b
 80012bc:	08001453 	.word	0x08001453
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	3301      	adds	r3, #1
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fa55 	bl	8001778 <WIZCHIP_READ>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f023 030f 	bic.w	r3, r3, #15
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
         break;
 80012da:	e0d0      	b.n	800147e <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3301      	adds	r3, #1
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa45 	bl	8001778 <WIZCHIP_READ>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
         break;
 80012f6:	e0c2      	b.n	800147e <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	3301      	adds	r3, #1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fa37 	bl	8001778 <WIZCHIP_READ>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	701a      	strb	r2, [r3, #0]
         break;
 8001312:	e0b4      	b.n	800147e <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	3301      	adds	r3, #1
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fa29 	bl	8001778 <WIZCHIP_READ>
 8001326:	4603      	mov	r3, r0
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29c      	uxth	r4, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	3301      	adds	r3, #1
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fa1c 	bl	8001778 <WIZCHIP_READ>
 8001340:	4603      	mov	r3, r0
 8001342:	b29b      	uxth	r3, r3
 8001344:	4423      	add	r3, r4
 8001346:	b29a      	uxth	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	801a      	strh	r2, [r3, #0]
         break;
 800134c:	e097      	b.n	800147e <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3301      	adds	r3, #1
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800135a:	2204      	movs	r2, #4
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 faa4 	bl	80018ac <WIZCHIP_READ_BUF>
         break;
 8001364:	e08b      	b.n	800147e <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	3301      	adds	r3, #1
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fa00 	bl	8001778 <WIZCHIP_READ>
 8001378:	4603      	mov	r3, r0
 800137a:	b29b      	uxth	r3, r3
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b29c      	uxth	r4, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	3301      	adds	r3, #1
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f9f3 	bl	8001778 <WIZCHIP_READ>
 8001392:	4603      	mov	r3, r0
 8001394:	b29b      	uxth	r3, r3
 8001396:	4423      	add	r3, r4
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	801a      	strh	r2, [r3, #0]
         break;
 800139e:	e06e      	b.n	800147e <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3301      	adds	r3, #1
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f9e5 	bl	8001778 <WIZCHIP_READ>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <getsockopt+0x15e>
 80013b8:	f06f 0304 	mvn.w	r3, #4
 80013bc:	e060      	b.n	8001480 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	3301      	adds	r3, #1
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f9d4 	bl	8001778 <WIZCHIP_READ>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	801a      	strh	r2, [r3, #0]
         break;
 80013d8:	e051      	b.n	800147e <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fb25 	bl	8001a2c <getSn_TX_FSR>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	801a      	strh	r2, [r3, #0]
         break;
 80013ea:	e048      	b.n	800147e <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fb67 	bl	8001ac2 <getSn_RX_RSR>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	801a      	strh	r2, [r3, #0]
         break;
 80013fc:	e03f      	b.n	800147e <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	3301      	adds	r3, #1
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f9b4 	bl	8001778 <WIZCHIP_READ>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	701a      	strb	r2, [r3, #0]
         break;
 8001418:	e031      	b.n	800147e <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3301      	adds	r3, #1
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f9a8 	bl	8001778 <WIZCHIP_READ>
 8001428:	4603      	mov	r3, r0
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fb44 	bl	8001ac2 <getSn_RX_RSR>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8001442:	e01c      	b.n	800147e <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <getsockopt+0x228>)
 8001448:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	801a      	strh	r2, [r3, #0]
         break;
 8001450:	e015      	b.n	800147e <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	3301      	adds	r3, #1
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f98c 	bl	8001778 <WIZCHIP_READ>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8001466:	f06f 0304 	mvn.w	r3, #4
 800146a:	e009      	b.n	8001480 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <getsockopt+0x22c>)
 8001470:	5cd2      	ldrb	r2, [r2, r3]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	701a      	strb	r2, [r3, #0]
         break;
 8001476:	e002      	b.n	800147e <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8001478:	f06f 0301 	mvn.w	r3, #1
 800147c:	e000      	b.n	8001480 <getsockopt+0x220>
   }
   return SOCK_OK;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	200000d8 	.word	0x200000d8
 800148c:	200000e8 	.word	0x200000e8

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_MspInit+0x4c>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x4c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_SPI_MspInit+0xc0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d14a      	bne.n	8001598 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_SPI_MspInit+0xc8>)
 8001572:	f000 ffd9 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 8001594:	f000 ffc8 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c0:	d10d      	bne.n	80015de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 fe4a 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
	}

return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:
	}
	return len;
}

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f002 fd42 	bl	80041a0 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	200000f0 	.word	0x200000f0
 8001750:	20000a40 	.word	0x20000a40

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <WIZCHIP_READ+0x94>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <WIZCHIP_READ+0x94>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <WIZCHIP_READ+0x94>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <WIZCHIP_READ+0x24>
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <WIZCHIP_READ+0x94>)
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d114      	bne.n	80017c6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <WIZCHIP_READ+0x94>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	0c12      	lsrs	r2, r2, #16
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <WIZCHIP_READ+0x94>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	0a12      	lsrs	r2, r2, #8
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	4610      	mov	r0, r2
 80017b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <WIZCHIP_READ+0x94>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	4610      	mov	r0, r2
 80017c2:	4798      	blx	r3
 80017c4:	e011      	b.n	80017ea <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0c1b      	lsrs	r3, r3, #16
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <WIZCHIP_READ+0x94>)
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	2103      	movs	r1, #3
 80017e6:	4610      	mov	r0, r2
 80017e8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <WIZCHIP_READ+0x94>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4798      	blx	r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <WIZCHIP_READ+0x94>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <WIZCHIP_READ+0x94>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4798      	blx	r3
   return ret;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000020 	.word	0x20000020

08001810 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d119      	bne.n	800186c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	0c12      	lsrs	r2, r2, #16
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	4610      	mov	r0, r2
 8001844:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	0a12      	lsrs	r2, r2, #8
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4610      	mov	r0, r2
 8001852:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	4610      	mov	r0, r2
 800185e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	4610      	mov	r0, r2
 8001868:	4798      	blx	r3
 800186a:	e013      	b.n	8001894 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	b2db      	uxtb	r3, r3
 8001872:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	2104      	movs	r1, #4
 8001890:	4610      	mov	r0, r2
 8001892:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <WIZCHIP_WRITE+0x98>)
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	4798      	blx	r3
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000020 	.word	0x20000020

080018ac <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <WIZCHIP_READ_BUF+0x2a>
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d126      	bne.n	8001924 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	0c12      	lsrs	r2, r2, #16
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	4610      	mov	r0, r2
 80018e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	0a12      	lsrs	r2, r2, #8
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4610      	mov	r0, r2
 80018fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	82fb      	strh	r3, [r7, #22]
 8001902:	e00a      	b.n	800191a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	8afa      	ldrh	r2, [r7, #22]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	188c      	adds	r4, r1, r2
 800190e:	4798      	blx	r3
 8001910:	4603      	mov	r3, r0
 8001912:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	3301      	adds	r3, #1
 8001918:	82fb      	strh	r3, [r7, #22]
 800191a:	8afa      	ldrh	r2, [r7, #22]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3f0      	bcc.n	8001904 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001922:	e017      	b.n	8001954 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	b2db      	uxtb	r3, r3
 800192a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b2db      	uxtb	r3, r3
 8001932:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f107 0210 	add.w	r2, r7, #16
 8001942:	2103      	movs	r1, #3
 8001944:	4610      	mov	r0, r2
 8001946:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	4611      	mov	r1, r2
 8001950:	68b8      	ldr	r0, [r7, #8]
 8001952:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <WIZCHIP_READ_BUF+0xbc>)
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	4798      	blx	r3
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	20000020 	.word	0x20000020

0800196c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	4613      	mov	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d126      	bne.n	80019e4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	0c12      	lsrs	r2, r2, #16
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	4610      	mov	r0, r2
 80019a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	4610      	mov	r0, r2
 80019b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	4610      	mov	r0, r2
 80019bc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	82fb      	strh	r3, [r7, #22]
 80019c2:	e00a      	b.n	80019da <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	8afa      	ldrh	r2, [r7, #22]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	440a      	add	r2, r1
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	4610      	mov	r0, r2
 80019d2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019d4:	8afb      	ldrh	r3, [r7, #22]
 80019d6:	3301      	adds	r3, #1
 80019d8:	82fb      	strh	r3, [r7, #22]
 80019da:	8afa      	ldrh	r2, [r7, #22]
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3f0      	bcc.n	80019c4 <WIZCHIP_WRITE_BUF+0x58>
 80019e2:	e017      	b.n	8001a14 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f107 0210 	add.w	r2, r7, #16
 8001a02:	2103      	movs	r1, #3
 8001a04:	4610      	mov	r0, r2
 8001a06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	88fa      	ldrh	r2, [r7, #6]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a1a:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <WIZCHIP_WRITE_BUF+0xbc>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4798      	blx	r3
}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000020 	.word	0x20000020

08001a2c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	3301      	adds	r3, #1
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe94 	bl	8001778 <WIZCHIP_READ>
 8001a50:	4603      	mov	r3, r0
 8001a52:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b29c      	uxth	r4, r3
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	3301      	adds	r3, #1
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe86 	bl	8001778 <WIZCHIP_READ>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4423      	add	r3, r4
 8001a72:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001a74:	89bb      	ldrh	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01a      	beq.n	8001ab0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	3301      	adds	r3, #1
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe76 	bl	8001778 <WIZCHIP_READ>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29c      	uxth	r4, r3
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe68 	bl	8001778 <WIZCHIP_READ>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4423      	add	r3, r4
 8001aae:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001ab0:	89fa      	ldrh	r2, [r7, #14]
 8001ab2:	89bb      	ldrh	r3, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1c2      	bne.n	8001a3e <getSn_TX_FSR+0x12>
   return val;
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001ac2:	b590      	push	{r4, r7, lr}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	81fb      	strh	r3, [r7, #14]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3301      	adds	r3, #1
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe49 	bl	8001778 <WIZCHIP_READ>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001aea:	89bb      	ldrh	r3, [r7, #12]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b29c      	uxth	r4, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	3301      	adds	r3, #1
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe3b 	bl	8001778 <WIZCHIP_READ>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4423      	add	r3, r4
 8001b08:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001b0a:	89bb      	ldrh	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01a      	beq.n	8001b46 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3301      	adds	r3, #1
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe2b 	bl	8001778 <WIZCHIP_READ>
 8001b22:	4603      	mov	r3, r0
 8001b24:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b29c      	uxth	r4, r3
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	3301      	adds	r3, #1
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe1d 	bl	8001778 <WIZCHIP_READ>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4423      	add	r3, r4
 8001b44:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001b46:	89fa      	ldrh	r2, [r7, #14]
 8001b48:	89bb      	ldrh	r3, [r7, #12]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d1c2      	bne.n	8001ad4 <getSn_RX_RSR+0x12>
   return val;
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d048      	beq.n	8001c08 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fdf8 	bl	8001778 <WIZCHIP_READ>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b29c      	uxth	r4, r3
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3301      	adds	r3, #1
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fdeb 	bl	8001778 <WIZCHIP_READ>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4423      	add	r3, r4
 8001ba8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	79fa      	ldrb	r2, [r7, #7]
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	3202      	adds	r2, #2
 8001bb4:	00d2      	lsls	r2, r2, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	68b8      	ldr	r0, [r7, #8]
 8001bc2:	f7ff fed3 	bl	800196c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001bc6:	89fa      	ldrh	r2, [r7, #14]
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001bda:	461a      	mov	r2, r3
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7ff fe12 	bl	8001810 <WIZCHIP_WRITE>
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7ff fe05 	bl	8001810 <WIZCHIP_WRITE>
 8001c06:	e000      	b.n	8001c0a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001c08:	bf00      	nop
}
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	2300      	movs	r3, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <reg_wizchip_cs_cbfunc+0x16>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <reg_wizchip_cs_cbfunc+0x40>)
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <reg_wizchip_cs_cbfunc+0x44>)
 8001cf2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <reg_wizchip_cs_cbfunc+0x40>)
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <reg_wizchip_cs_cbfunc+0x48>)
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e006      	b.n	8001d0a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <reg_wizchip_cs_cbfunc+0x40>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <reg_wizchip_cs_cbfunc+0x40>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6193      	str	r3, [r2, #24]
   }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	08001c2d 	.word	0x08001c2d
 8001d20:	08001c3b 	.word	0x08001c3b

08001d24 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001d2e:	bf00      	nop
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f9      	beq.n	8001d30 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <reg_wizchip_spi_cbfunc+0x24>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <reg_wizchip_spi_cbfunc+0x50>)
 8001d4c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <reg_wizchip_spi_cbfunc+0x54>)
 8001d52:	621a      	str	r2, [r3, #32]
 8001d54:	e006      	b.n	8001d64 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6213      	str	r3, [r2, #32]
   }
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000020 	.word	0x20000020
 8001d74:	08001c81 	.word	0x08001c81
 8001d78:	08001c91 	.word	0x08001c91

08001d7c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001d86:	bf00      	nop
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f9      	beq.n	8001d88 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <reg_wizchip_spiburst_cbfunc+0x24>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <reg_wizchip_spiburst_cbfunc+0x50>)
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
 8001dac:	e006      	b.n	8001dbc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	20000020 	.word	0x20000020
 8001dcc:	08001ca7 	.word	0x08001ca7
 8001dd0:	08001cbf 	.word	0x08001cbf

08001dd4 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d82c      	bhi.n	8001e40 <ctlnetwork+0x6c>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <ctlnetwork+0x18>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e05 	.word	0x08001e05
 8001df0:	08001e0d 	.word	0x08001e0d
 8001df4:	08001e15 	.word	0x08001e15
 8001df8:	08001e23 	.word	0x08001e23
 8001dfc:	08001e31 	.word	0x08001e31
 8001e00:	08001e39 	.word	0x08001e39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001e04:	6838      	ldr	r0, [r7, #0]
 8001e06:	f000 f8fb 	bl	8002000 <wizchip_setnetinfo>
         break;
 8001e0a:	e01c      	b.n	8001e46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f000 f937 	bl	8002080 <wizchip_getnetinfo>
         break;
 8001e12:	e018      	b.n	8001e46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f971 	bl	8002100 <wizchip_setnetmode>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e012      	b.n	8001e48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001e22:	f000 f98f 	bl	8002144 <wizchip_getnetmode>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	701a      	strb	r2, [r3, #0]
         break;
 8001e2e:	e00a      	b.n	8001e46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f000 f98f 	bl	8002154 <wizchip_settimeout>
         break;
 8001e36:	e006      	b.n	8001e46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f000 f9ac 	bl	8002196 <wizchip_gettimeout>
         break;
 8001e3e:	e002      	b.n	8001e46 <ctlnetwork+0x72>
      default:
         return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e44:	e000      	b.n	8001e48 <ctlnetwork+0x74>
   }
   return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2206      	movs	r2, #6
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e60:	f7ff fd24 	bl	80018ac <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e70:	f7ff fd1c 	bl	80018ac <WIZCHIP_READ_BUF>
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e80:	f7ff fd14 	bl	80018ac <WIZCHIP_READ_BUF>
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e90:	f7ff fd0c 	bl	80018ac <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fcba 	bl	8001810 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fc6b 	bl	8001778 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2206      	movs	r2, #6
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001eac:	f7ff fd5e 	bl	800196c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ebc:	f7ff fd56 	bl	800196c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ecc:	f7ff fd4e 	bl	800196c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001edc:	f7ff fd46 	bl	800196c <WIZCHIP_WRITE_BUF>
}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001ef6:	f7ff ffab 	bl	8001e50 <wizchip_sw_reset>
   if(txsize)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03b      	beq.n	8001f78 <wizchip_init+0x90>
   {
      tmp = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e015      	b.n	8001f36 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	dd02      	ble.n	8001f2a <wizchip_init+0x42>
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f28:	e066      	b.n	8001ff8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	dde5      	ble.n	8001f0a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e015      	b.n	8001f70 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001f52:	4618      	mov	r0, r3
 8001f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7ff fc56 	bl	8001810 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	2b07      	cmp	r3, #7
 8001f76:	dde5      	ble.n	8001f44 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03b      	beq.n	8001ff6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e015      	b.n	8001fb4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	dd02      	ble.n	8001fa8 <wizchip_init+0xc0>
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa6:	e027      	b.n	8001ff8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	dde5      	ble.n	8001f88 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e015      	b.n	8001fee <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3301      	adds	r3, #1
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7ff fc17 	bl	8001810 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	2b07      	cmp	r3, #7
 8001ff4:	dde5      	ble.n	8001fc2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2206      	movs	r2, #6
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002012:	f7ff fcab 	bl	800196c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	330e      	adds	r3, #14
 800201a:	2204      	movs	r2, #4
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002022:	f7ff fca3 	bl	800196c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	330a      	adds	r3, #10
 800202a:	2204      	movs	r2, #4
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002032:	f7ff fc9b 	bl	800196c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3306      	adds	r3, #6
 800203a:	2204      	movs	r2, #4
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002042:	f7ff fc93 	bl	800196c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c9a      	ldrb	r2, [r3, #18]
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <wizchip_setnetinfo+0x78>)
 800204c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7cda      	ldrb	r2, [r3, #19]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <wizchip_setnetinfo+0x78>)
 8002054:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7d1a      	ldrb	r2, [r3, #20]
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <wizchip_setnetinfo+0x78>)
 800205c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7d5a      	ldrb	r2, [r3, #21]
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <wizchip_setnetinfo+0x78>)
 8002064:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7d9a      	ldrb	r2, [r3, #22]
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <wizchip_setnetinfo+0x7c>)
 800206c:	701a      	strb	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000f4 	.word	0x200000f4
 800207c:	200000f8 	.word	0x200000f8

08002080 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2206      	movs	r2, #6
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002092:	f7ff fc0b 	bl	80018ac <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	330e      	adds	r3, #14
 800209a:	2204      	movs	r2, #4
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020a2:	f7ff fc03 	bl	80018ac <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	330a      	adds	r3, #10
 80020aa:	2204      	movs	r2, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80020b2:	f7ff fbfb 	bl	80018ac <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3306      	adds	r3, #6
 80020ba:	2204      	movs	r2, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020c2:	f7ff fbf3 	bl	80018ac <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <wizchip_getnetinfo+0x78>)
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <wizchip_getnetinfo+0x78>)
 80020d0:	785a      	ldrb	r2, [r3, #1]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <wizchip_getnetinfo+0x78>)
 80020d8:	789a      	ldrb	r2, [r3, #2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <wizchip_getnetinfo+0x78>)
 80020e0:	78da      	ldrb	r2, [r3, #3]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <wizchip_getnetinfo+0x7c>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	759a      	strb	r2, [r3, #22]
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000f4 	.word	0x200000f4
 80020fc:	200000f8 	.word	0x200000f8

08002100 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <wizchip_setnetmode+0x1e>
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211c:	e00e      	b.n	800213c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff fb2a 	bl	8001778 <WIZCHIP_READ>
 8002124:	4603      	mov	r3, r0
 8002126:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	4313      	orrs	r3, r2
 800212e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	4619      	mov	r1, r3
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fb6b 	bl	8001810 <WIZCHIP_WRITE>
   return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fb15 	bl	8001778 <WIZCHIP_READ>
 800214e:	4603      	mov	r3, r0
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}

08002154 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002166:	f7ff fb53 	bl	8001810 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	885b      	ldrh	r3, [r3, #2]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b29b      	uxth	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800217a:	f7ff fb49 	bl	8001810 <WIZCHIP_WRITE>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800218a:	f7ff fb41 	bl	8001810 <WIZCHIP_WRITE>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002196:	b590      	push	{r4, r7, lr}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800219e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80021a2:	f7ff fae9 	bl	8001778 <WIZCHIP_READ>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80021ae:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80021b2:	f7ff fae1 	bl	8001778 <WIZCHIP_READ>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	b29c      	uxth	r4, r3
 80021be:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80021c2:	f7ff fad9 	bl	8001778 <WIZCHIP_READ>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4423      	add	r3, r4
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	805a      	strh	r2, [r3, #2]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
	...

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f8:	4c0b      	ldr	r4, [pc, #44]	; (8002228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002206:	f7ff faa5 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220a:	f001 ffcf 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7fe fa53 	bl	80006b8 <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002220:	0800570c 	.word	0x0800570c
  ldr r2, =_sbss
 8002224:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002228:	20000a40 	.word	0x20000a40

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_Init+0x40>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_Init+0x40>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_Init+0x40>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f931 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff f914 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f93b 	bl	800250e <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b0:	f000 f911 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000001c 	.word	0x2000001c
 80022cc:	20000050 	.word	0x20000050
 80022d0:	2000004c 	.word	0x2000004c

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000050 	.word	0x20000050
 80022f8:	20000a2c 	.word	0x20000a2c

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000a2c 	.word	0x20000a2c

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000050 	.word	0x20000050

0800235c <__NVIC_SetPriorityGrouping>:
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_SetPriority>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <SysTick_Config>:
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a0:	f7ff ff8e 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff47 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff5c 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff8e 	bl	8002414 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5d 	bl	80023c0 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffb0 	bl	800247c <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e16b      	b.n	800281c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 815a 	bne.w	8002816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d005      	beq.n	800257a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	2b02      	cmp	r3, #2
 8002578:	d130      	bne.n	80025dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 0201 	and.w	r2, r3, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d017      	beq.n	8002618 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80b4 	beq.w	8002816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b60      	ldr	r3, [pc, #384]	; (8002834 <HAL_GPIO_Init+0x30c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a5f      	ldr	r2, [pc, #380]	; (8002834 <HAL_GPIO_Init+0x30c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <HAL_GPIO_Init+0x30c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_GPIO_Init+0x310>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_GPIO_Init+0x314>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x226>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a51      	ldr	r2, [pc, #324]	; (8002840 <HAL_GPIO_Init+0x318>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x222>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a50      	ldr	r2, [pc, #320]	; (8002844 <HAL_GPIO_Init+0x31c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4f      	ldr	r2, [pc, #316]	; (8002848 <HAL_GPIO_Init+0x320>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x21a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4e      	ldr	r2, [pc, #312]	; (800284c <HAL_GPIO_Init+0x324>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x216>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4d      	ldr	r2, [pc, #308]	; (8002850 <HAL_GPIO_Init+0x328>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x212>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_GPIO_Init+0x330>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x20a>
 800272e:	2307      	movs	r3, #7
 8002730:	e00e      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002732:	2308      	movs	r3, #8
 8002734:	e00c      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002736:	2306      	movs	r3, #6
 8002738:	e00a      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273a:	2305      	movs	r3, #5
 800273c:	e008      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273e:	2304      	movs	r3, #4
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002742:	2303      	movs	r3, #3
 8002744:	e004      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002746:	2302      	movs	r3, #2
 8002748:	e002      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274e:	2300      	movs	r3, #0
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f002 0203 	and.w	r2, r2, #3
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	4093      	lsls	r3, r2
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002760:	4935      	ldr	r1, [pc, #212]	; (8002838 <HAL_GPIO_Init+0x310>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_GPIO_Init+0x334>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002792:	4a32      	ldr	r2, [pc, #200]	; (800285c <HAL_GPIO_Init+0x334>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_GPIO_Init+0x334>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_GPIO_Init+0x334>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_GPIO_Init+0x334>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_GPIO_Init+0x334>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_GPIO_Init+0x334>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_GPIO_Init+0x334>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2b0f      	cmp	r3, #15
 8002820:	f67f ae90 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	40013800 	.word	0x40013800
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40021000 	.word	0x40021000
 8002850:	40021400 	.word	0x40021400
 8002854:	40021800 	.word	0x40021800
 8002858:	40021c00 	.word	0x40021c00
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e264      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b2:	4ba3      	ldr	r3, [pc, #652]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4ba0      	ldr	r3, [pc, #640]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b9d      	ldr	r3, [pc, #628]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e23f      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a90      	ldr	r2, [pc, #576]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a8a      	ldr	r2, [pc, #552]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a87      	ldr	r2, [pc, #540]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a83      	ldr	r2, [pc, #524]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a80      	ldr	r2, [pc, #512]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fcd6 	bl	80022fc <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff fcd2 	bl	80022fc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e204      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff fcc2 	bl	80022fc <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff fcbe 	bl	80022fc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1f0      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c4      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b56      	ldr	r3, [pc, #344]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4952      	ldr	r1, [pc, #328]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_OscConfig+0x2b0>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fc77 	bl	80022fc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff fc73 	bl	80022fc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a5      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4940      	ldr	r1, [pc, #256]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x2b0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fc56 	bl	80022fc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7ff fc52 	bl	80022fc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e184      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d030      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_RCC_OscConfig+0x2b4>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fc36 	bl	80022fc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fc32 	bl	80022fc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e164      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
 8002ab2:	e015      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_OscConfig+0x2b4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7ff fc1f 	bl	80022fc <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff fc1b 	bl	80022fc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e14d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a0 	beq.w	8002c2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x2b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d121      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCC_OscConfig+0x2b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <HAL_RCC_OscConfig+0x2b8>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7ff fbe1 	bl	80022fc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e011      	b.n	8002b62 <HAL_RCC_OscConfig+0x2ce>
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	42470000 	.word	0x42470000
 8002b48:	42470e80 	.word	0x42470e80
 8002b4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7ff fbd4 	bl	80022fc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e106      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b85      	ldr	r3, [pc, #532]	; (8002d78 <HAL_RCC_OscConfig+0x4e4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
 8002b76:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e01c      	b.n	8002bbe <HAL_RCC_OscConfig+0x32a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x312>
 8002b8c:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a77      	ldr	r2, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	e00b      	b.n	8002bbe <HAL_RCC_OscConfig+0x32a>
 8002ba6:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a74      	ldr	r2, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d015      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7ff fb99 	bl	80022fc <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7ff fb95 	bl	80022fc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0c5      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be4:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ee      	beq.n	8002bce <HAL_RCC_OscConfig+0x33a>
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff fb83 	bl	80022fc <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7ff fb7f 	bl	80022fc <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e0af      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 809b 	beq.w	8002d6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d05c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d141      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7ff fb53 	bl	80022fc <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7ff fb4f 	bl	80022fc <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e081      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	4937      	ldr	r1, [pc, #220]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fb28 	bl	80022fc <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff fb24 	bl	80022fc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e056      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
 8002cce:	e04e      	b.n	8002d6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7ff fb11 	bl	80022fc <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7ff fb0d 	bl	80022fc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e03f      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x44a>
 8002cfc:	e037      	b.n	8002d6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e032      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d028      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d121      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d11a      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	42470060 	.word	0x42470060

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7ff fa42 	bl	80022fc <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7ff fa3e 	bl	80022fc <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f9a2 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08005654 	.word	0x08005654
 8002f48:	2000001c 	.word	0x2000001c
 8002f4c:	2000004c 	.word	0x2000004c

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f56:	2100      	movs	r1, #0
 8002f58:	6079      	str	r1, [r7, #4]
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	60f9      	str	r1, [r7, #12]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f62:	2100      	movs	r1, #0
 8002f64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f66:	4952      	ldr	r1, [pc, #328]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f68:	6889      	ldr	r1, [r1, #8]
 8002f6a:	f001 010c 	and.w	r1, r1, #12
 8002f6e:	2908      	cmp	r1, #8
 8002f70:	d00d      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3e>
 8002f72:	2908      	cmp	r1, #8
 8002f74:	f200 8094 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x150>
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x32>
 8002f7c:	2904      	cmp	r1, #4
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x38>
 8002f80:	e08e      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f82:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f84:	60bb      	str	r3, [r7, #8]
       break;
 8002f86:	e08e      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f8a:	60bb      	str	r3, [r7, #8]
      break;
 8002f8c:	e08b      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8e:	4948      	ldr	r1, [pc, #288]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f90:	6849      	ldr	r1, [r1, #4]
 8002f92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f96:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f98:	4945      	ldr	r1, [pc, #276]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f9a:	6849      	ldr	r1, [r1, #4]
 8002f9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d024      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa4:	4942      	ldr	r1, [pc, #264]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fa6:	6849      	ldr	r1, [r1, #4]
 8002fa8:	0989      	lsrs	r1, r1, #6
 8002faa:	4608      	mov	r0, r1
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002fb4:	f04f 0500 	mov.w	r5, #0
 8002fb8:	ea00 0204 	and.w	r2, r0, r4
 8002fbc:	ea01 0305 	and.w	r3, r1, r5
 8002fc0:	493d      	ldr	r1, [pc, #244]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fc2:	fb01 f003 	mul.w	r0, r1, r3
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	fb01 f102 	mul.w	r1, r1, r2
 8002fcc:	1844      	adds	r4, r0, r1
 8002fce:	493a      	ldr	r1, [pc, #232]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fd0:	fba2 0101 	umull	r0, r1, r2, r1
 8002fd4:	1863      	adds	r3, r4, r1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f7fd f94e 	bl	8000280 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e04a      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	ea02 0400 	and.w	r4, r2, r0
 8003006:	ea03 0501 	and.w	r5, r3, r1
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	014b      	lsls	r3, r1, #5
 8003018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800301c:	0142      	lsls	r2, r0, #5
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	1b00      	subs	r0, r0, r4
 8003024:	eb61 0105 	sbc.w	r1, r1, r5
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	018b      	lsls	r3, r1, #6
 8003032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003036:	0182      	lsls	r2, r0, #6
 8003038:	1a12      	subs	r2, r2, r0
 800303a:	eb63 0301 	sbc.w	r3, r3, r1
 800303e:	f04f 0000 	mov.w	r0, #0
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	00d9      	lsls	r1, r3, #3
 8003048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800304c:	00d0      	lsls	r0, r2, #3
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	1912      	adds	r2, r2, r4
 8003054:	eb45 0303 	adc.w	r3, r5, r3
 8003058:	f04f 0000 	mov.w	r0, #0
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	0299      	lsls	r1, r3, #10
 8003062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003066:	0290      	lsls	r0, r2, #10
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f7fd f902 	bl	8000280 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	60bb      	str	r3, [r7, #8]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80030a2:	60bb      	str	r3, [r7, #8]
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	68bb      	ldr	r3, [r7, #8]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07b      	b.n	80031c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030de:	d009      	beq.n	80030f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
 80030e6:	e005      	b.n	80030f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f9e6 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	ea42 0103 	orr.w	r1, r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0104 	and.w	r1, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0210 	and.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b088      	sub	sp, #32
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_SPI_Transmit+0x22>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e126      	b.n	800343e <HAL_SPI_Transmit+0x270>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f8:	f7ff f880 	bl	80022fc <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d002      	beq.n	8003214 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003212:	e10b      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_Transmit+0x52>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003224:	e102      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d14b      	bne.n	800334e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xf6>
 80032be:	8afb      	ldrh	r3, [r7, #22]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13e      	bne.n	8003342 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e02b      	b.n	8003342 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	; 0x36
 800331c:	e011      	b.n	8003342 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe ffed 	bl	80022fc <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x168>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x16e>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003340:	e074      	b.n	800342c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ce      	bne.n	80032ea <HAL_SPI_Transmit+0x11c>
 800334c:	e04c      	b.n	80033e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Transmit+0x18e>
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d140      	bne.n	80033de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003382:	e02c      	b.n	80033de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d113      	bne.n	80033ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b8:	e011      	b.n	80033de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ba:	f7fe ff9f 	bl	80022fc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d803      	bhi.n	80033d2 <HAL_SPI_Transmit+0x204>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Transmit+0x20a>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033dc:	e026      	b.n	800342c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cd      	bne.n	8003384 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbcb 	bl	8003b88 <SPI_EndRxTxTransaction>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e000      	b.n	800342c <HAL_SPI_Transmit+0x25e>
  }

error:
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	7ffb      	ldrb	r3, [r7, #31]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b088      	sub	sp, #32
 800344a:	af02      	add	r7, sp, #8
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d112      	bne.n	800348a <HAL_SPI_Receive+0x44>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10e      	bne.n	800348a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f8f1 	bl	8003668 <HAL_SPI_TransmitReceive>
 8003486:	4603      	mov	r3, r0
 8003488:	e0ea      	b.n	8003660 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_SPI_Receive+0x52>
 8003494:	2302      	movs	r3, #2
 8003496:	e0e3      	b.n	8003660 <HAL_SPI_Receive+0x21a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a0:	f7fe ff2c 	bl	80022fc <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b6:	e0ca      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Receive+0x7e>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c8:	e0c1      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2204      	movs	r2, #4
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	d10f      	bne.n	8003532 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d007      	beq.n	8003550 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d162      	bne.n	800361e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003558:	e02e      	b.n	80035b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d115      	bne.n	8003594 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f103 020c 	add.w	r2, r3, #12
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003592:	e011      	b.n	80035b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003594:	f7fe feb2 	bl	80022fc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d803      	bhi.n	80035ac <HAL_SPI_Receive+0x166>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Receive+0x16c>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035b6:	e04a      	b.n	800364e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1cb      	bne.n	800355a <HAL_SPI_Receive+0x114>
 80035c2:	e031      	b.n	8003628 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d113      	bne.n	80035fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	b292      	uxth	r2, r2
 80035de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f8:	e011      	b.n	800361e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fa:	f7fe fe7f 	bl	80022fc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d803      	bhi.n	8003612 <HAL_SPI_Receive+0x1cc>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003610:	d102      	bne.n	8003618 <HAL_SPI_Receive+0x1d2>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800361c:	e017      	b.n	800364e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1cd      	bne.n	80035c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fa45 	bl	8003abc <SPI_EndRxTransaction>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
 800364a:	e000      	b.n	800364e <HAL_SPI_Receive+0x208>
  }

error :
 800364c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_SPI_TransmitReceive+0x26>
 800368a:	2302      	movs	r3, #2
 800368c:	e18a      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x33c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003696:	f7fe fe31 	bl	80022fc <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d00f      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d107      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
 80036c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036d6:	e15b      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f0:	e14e      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2205      	movs	r2, #5
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d007      	beq.n	800375a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d178      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x10a>
 800376c:	8b7b      	ldrh	r3, [r7, #26]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d166      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003796:	e053      	b.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d11b      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d113      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d119      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d014      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	b292      	uxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003820:	f7fe fd6c 	bl	80022fc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382c:	429a      	cmp	r2, r3
 800382e:	d807      	bhi.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800383e:	e0a7      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1a6      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1a1      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 8003854:	e07c      	b.n	8003950 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1fc>
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16b      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388a:	e057      	b.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11c      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d114      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d119      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d014      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003912:	2301      	movs	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003916:	f7fe fcf1 	bl	80022fc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_TransmitReceive+0x2c6>
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392c:	d102      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x2cc>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800393a:	e029      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1a2      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d19d      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f917 	bl	8003b88 <SPI_EndRxTxTransaction>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800396c:	e010      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e000      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800398e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039bc:	f7fe fc9e 	bl	80022fc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039cc:	f7fe fc96 	bl	80022fc <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	015b      	lsls	r3, r3, #5
 80039d8:	0d1b      	lsrs	r3, r3, #20
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e2:	e054      	b.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d050      	beq.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ec:	f7fe fc86 	bl	80022fc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d902      	bls.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13d      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d111      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d004      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d107      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a48:	d10f      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e017      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d19b      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000001c 	.word	0x2000001c

08003abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad0:	d111      	bne.n	8003af6 <SPI_EndRxTransaction+0x3a>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	d004      	beq.n	8003ae6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d107      	bne.n	8003af6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d12a      	bne.n	8003b56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d012      	beq.n	8003b30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff ff49 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02d      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e026      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2101      	movs	r1, #1
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff ff36 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e013      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2101      	movs	r1, #1
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff23 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <SPI_EndRxTxTransaction+0x7c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <SPI_EndRxTxTransaction+0x80>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0d5b      	lsrs	r3, r3, #21
 8003ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d112      	bne.n	8003bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fef4 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e00f      	b.n	8003bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d0f2      	beq.n	8003bda <SPI_EndRxTxTransaction+0x52>
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bf6:	bf00      	nop
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000001c 	.word	0x2000001c
 8003c08:	165e9f81 	.word	0x165e9f81

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fcbc 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 f8f2 	bl	8003e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_ConfigClockSource+0x18>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0b3      	b.n	8003e2a <HAL_TIM_ConfigClockSource+0x180>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ce0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d03e      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xd0>
 8003cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d00:	f200 8087 	bhi.w	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	f000 8085 	beq.w	8003e16 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d10:	d87f      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d12:	2b70      	cmp	r3, #112	; 0x70
 8003d14:	d01a      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xa2>
 8003d16:	2b70      	cmp	r3, #112	; 0x70
 8003d18:	d87b      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d050      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x116>
 8003d1e:	2b60      	cmp	r3, #96	; 0x60
 8003d20:	d877      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d22:	2b50      	cmp	r3, #80	; 0x50
 8003d24:	d03c      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0xf6>
 8003d26:	2b50      	cmp	r3, #80	; 0x50
 8003d28:	d873      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d058      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x136>
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d86f      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d32:	2b30      	cmp	r3, #48	; 0x30
 8003d34:	d064      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x156>
 8003d36:	2b30      	cmp	r3, #48	; 0x30
 8003d38:	d86b      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d060      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x156>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d867      	bhi.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d05c      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x156>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d05a      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d4a:	e062      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 f984 	bl	8004068 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e04e      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f000 f96d 	bl	8004068 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9c:	609a      	str	r2, [r3, #8]
      break;
 8003d9e:	e03b      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	461a      	mov	r2, r3
 8003dae:	f000 f8e1 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2150      	movs	r1, #80	; 0x50
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f93a 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e02b      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f000 f900 	bl	8003fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2160      	movs	r1, #96	; 0x60
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f92a 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003dde:	e01b      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f000 f8c1 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f91a 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e00b      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f911 	bl	8004032 <TIM_ITRx_SetConfig>
        break;
 8003e10:	e002      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <TIM_Base_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	d00f      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3d      	ldr	r2, [pc, #244]	; (8003f4c <TIM_Base_SetConfig+0x118>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3c      	ldr	r2, [pc, #240]	; (8003f50 <TIM_Base_SetConfig+0x11c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3b      	ldr	r2, [pc, #236]	; (8003f54 <TIM_Base_SetConfig+0x120>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3a      	ldr	r2, [pc, #232]	; (8003f58 <TIM_Base_SetConfig+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d108      	bne.n	8003e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_Base_SetConfig+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e94:	d027      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <TIM_Base_SetConfig+0x118>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d023      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <TIM_Base_SetConfig+0x11c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01f      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <TIM_Base_SetConfig+0x120>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <TIM_Base_SetConfig+0x124>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d017      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <TIM_Base_SetConfig+0x128>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <TIM_Base_SetConfig+0x12c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00f      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <TIM_Base_SetConfig+0x130>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <TIM_Base_SetConfig+0x134>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <TIM_Base_SetConfig+0x138>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <TIM_Base_SetConfig+0x13c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <TIM_Base_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <TIM_Base_SetConfig+0x124>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40001800 	.word	0x40001800
 8003f6c:	40001c00 	.word	0x40001c00
 8003f70:	40002000 	.word	0x40002000

08003f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 030a 	bic.w	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0210 	bic.w	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 0307 	orr.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040bc:	2302      	movs	r3, #2
 80040be:	e05a      	b.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d01d      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1a      	ldr	r2, [pc, #104]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40001800 	.word	0x40001800

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000054 	.word	0x20000054

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	; (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	; (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	; (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	; (80041f0 <__libc_init_array+0x44>)
 80041c0:	f001 f9be 	bl	8005540 <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	08005704 	.word	0x08005704
 80041e8:	08005704 	.word	0x08005704
 80041ec:	08005704 	.word	0x08005704
 80041f0:	08005708 	.word	0x08005708

080041f4 <memset>:
 80041f4:	4402      	add	r2, r0
 80041f6:	4603      	mov	r3, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <iprintf>:
 8004204:	b40f      	push	{r0, r1, r2, r3}
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <iprintf+0x2c>)
 8004208:	b513      	push	{r0, r1, r4, lr}
 800420a:	681c      	ldr	r4, [r3, #0]
 800420c:	b124      	cbz	r4, 8004218 <iprintf+0x14>
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	b913      	cbnz	r3, 8004218 <iprintf+0x14>
 8004212:	4620      	mov	r0, r4
 8004214:	f000 fa7e 	bl	8004714 <__sinit>
 8004218:	ab05      	add	r3, sp, #20
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	68a1      	ldr	r1, [r4, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fdab 	bl	8004d7c <_vfiprintf_r>
 8004226:	b002      	add	sp, #8
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr
 8004230:	20000054 	.word	0x20000054

08004234 <_puts_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4605      	mov	r5, r0
 800423a:	b118      	cbz	r0, 8004244 <_puts_r+0x10>
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b90b      	cbnz	r3, 8004244 <_puts_r+0x10>
 8004240:	f000 fa68 	bl	8004714 <__sinit>
 8004244:	69ab      	ldr	r3, [r5, #24]
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	b913      	cbnz	r3, 8004250 <_puts_r+0x1c>
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fa62 	bl	8004714 <__sinit>
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <_puts_r+0xd0>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d120      	bne.n	8004298 <_puts_r+0x64>
 8004256:	686c      	ldr	r4, [r5, #4]
 8004258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800425a:	07db      	lsls	r3, r3, #31
 800425c:	d405      	bmi.n	800426a <_puts_r+0x36>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0598      	lsls	r0, r3, #22
 8004262:	d402      	bmi.n	800426a <_puts_r+0x36>
 8004264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004266:	f000 faf3 	bl	8004850 <__retarget_lock_acquire_recursive>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	0719      	lsls	r1, r3, #28
 800426e:	d51d      	bpl.n	80042ac <_puts_r+0x78>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	b1db      	cbz	r3, 80042ac <_puts_r+0x78>
 8004274:	3e01      	subs	r6, #1
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800427c:	3b01      	subs	r3, #1
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	bb39      	cbnz	r1, 80042d2 <_puts_r+0x9e>
 8004282:	2b00      	cmp	r3, #0
 8004284:	da38      	bge.n	80042f8 <_puts_r+0xc4>
 8004286:	4622      	mov	r2, r4
 8004288:	210a      	movs	r1, #10
 800428a:	4628      	mov	r0, r5
 800428c:	f000 f868 	bl	8004360 <__swbuf_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d011      	beq.n	80042b8 <_puts_r+0x84>
 8004294:	250a      	movs	r5, #10
 8004296:	e011      	b.n	80042bc <_puts_r+0x88>
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <_puts_r+0xd4>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d101      	bne.n	80042a2 <_puts_r+0x6e>
 800429e:	68ac      	ldr	r4, [r5, #8]
 80042a0:	e7da      	b.n	8004258 <_puts_r+0x24>
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <_puts_r+0xd8>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	bf08      	it	eq
 80042a8:	68ec      	ldreq	r4, [r5, #12]
 80042aa:	e7d5      	b.n	8004258 <_puts_r+0x24>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f000 f8a8 	bl	8004404 <__swsetup_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d0dd      	beq.n	8004274 <_puts_r+0x40>
 80042b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80042bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d405      	bmi.n	80042ce <_puts_r+0x9a>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d402      	bmi.n	80042ce <_puts_r+0x9a>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f000 fac2 	bl	8004852 <__retarget_lock_release_recursive>
 80042ce:	4628      	mov	r0, r5
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da04      	bge.n	80042e0 <_puts_r+0xac>
 80042d6:	69a2      	ldr	r2, [r4, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dc06      	bgt.n	80042ea <_puts_r+0xb6>
 80042dc:	290a      	cmp	r1, #10
 80042de:	d004      	beq.n	80042ea <_puts_r+0xb6>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	7019      	strb	r1, [r3, #0]
 80042e8:	e7c5      	b.n	8004276 <_puts_r+0x42>
 80042ea:	4622      	mov	r2, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f837 	bl	8004360 <__swbuf_r>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1bf      	bne.n	8004276 <_puts_r+0x42>
 80042f6:	e7df      	b.n	80042b8 <_puts_r+0x84>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	250a      	movs	r5, #10
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	6022      	str	r2, [r4, #0]
 8004300:	701d      	strb	r5, [r3, #0]
 8004302:	e7db      	b.n	80042bc <_puts_r+0x88>
 8004304:	08005688 	.word	0x08005688
 8004308:	080056a8 	.word	0x080056a8
 800430c:	08005668 	.word	0x08005668

08004310 <puts>:
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <puts+0xc>)
 8004312:	4601      	mov	r1, r0
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f7ff bf8d 	b.w	8004234 <_puts_r>
 800431a:	bf00      	nop
 800431c:	20000054 	.word	0x20000054

08004320 <siprintf>:
 8004320:	b40e      	push	{r1, r2, r3}
 8004322:	b500      	push	{lr}
 8004324:	b09c      	sub	sp, #112	; 0x70
 8004326:	ab1d      	add	r3, sp, #116	; 0x74
 8004328:	9002      	str	r0, [sp, #8]
 800432a:	9006      	str	r0, [sp, #24]
 800432c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004330:	4809      	ldr	r0, [pc, #36]	; (8004358 <siprintf+0x38>)
 8004332:	9107      	str	r1, [sp, #28]
 8004334:	9104      	str	r1, [sp, #16]
 8004336:	4909      	ldr	r1, [pc, #36]	; (800435c <siprintf+0x3c>)
 8004338:	f853 2b04 	ldr.w	r2, [r3], #4
 800433c:	9105      	str	r1, [sp, #20]
 800433e:	6800      	ldr	r0, [r0, #0]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	a902      	add	r1, sp, #8
 8004344:	f000 fbf0 	bl	8004b28 <_svfiprintf_r>
 8004348:	9b02      	ldr	r3, [sp, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	b01c      	add	sp, #112	; 0x70
 8004350:	f85d eb04 	ldr.w	lr, [sp], #4
 8004354:	b003      	add	sp, #12
 8004356:	4770      	bx	lr
 8004358:	20000054 	.word	0x20000054
 800435c:	ffff0208 	.word	0xffff0208

08004360 <__swbuf_r>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	460e      	mov	r6, r1
 8004364:	4614      	mov	r4, r2
 8004366:	4605      	mov	r5, r0
 8004368:	b118      	cbz	r0, 8004372 <__swbuf_r+0x12>
 800436a:	6983      	ldr	r3, [r0, #24]
 800436c:	b90b      	cbnz	r3, 8004372 <__swbuf_r+0x12>
 800436e:	f000 f9d1 	bl	8004714 <__sinit>
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <__swbuf_r+0x98>)
 8004374:	429c      	cmp	r4, r3
 8004376:	d12b      	bne.n	80043d0 <__swbuf_r+0x70>
 8004378:	686c      	ldr	r4, [r5, #4]
 800437a:	69a3      	ldr	r3, [r4, #24]
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	071a      	lsls	r2, r3, #28
 8004382:	d52f      	bpl.n	80043e4 <__swbuf_r+0x84>
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	b36b      	cbz	r3, 80043e4 <__swbuf_r+0x84>
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	1ac0      	subs	r0, r0, r3
 800438e:	6963      	ldr	r3, [r4, #20]
 8004390:	b2f6      	uxtb	r6, r6
 8004392:	4283      	cmp	r3, r0
 8004394:	4637      	mov	r7, r6
 8004396:	dc04      	bgt.n	80043a2 <__swbuf_r+0x42>
 8004398:	4621      	mov	r1, r4
 800439a:	4628      	mov	r0, r5
 800439c:	f000 f926 	bl	80045ec <_fflush_r>
 80043a0:	bb30      	cbnz	r0, 80043f0 <__swbuf_r+0x90>
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	60a3      	str	r3, [r4, #8]
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	701e      	strb	r6, [r3, #0]
 80043b0:	6963      	ldr	r3, [r4, #20]
 80043b2:	3001      	adds	r0, #1
 80043b4:	4283      	cmp	r3, r0
 80043b6:	d004      	beq.n	80043c2 <__swbuf_r+0x62>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	07db      	lsls	r3, r3, #31
 80043bc:	d506      	bpl.n	80043cc <__swbuf_r+0x6c>
 80043be:	2e0a      	cmp	r6, #10
 80043c0:	d104      	bne.n	80043cc <__swbuf_r+0x6c>
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f911 	bl	80045ec <_fflush_r>
 80043ca:	b988      	cbnz	r0, 80043f0 <__swbuf_r+0x90>
 80043cc:	4638      	mov	r0, r7
 80043ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <__swbuf_r+0x9c>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <__swbuf_r+0x7a>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7cf      	b.n	800437a <__swbuf_r+0x1a>
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <__swbuf_r+0xa0>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7ca      	b.n	800437a <__swbuf_r+0x1a>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 f80c 	bl	8004404 <__swsetup_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d0cb      	beq.n	8004388 <__swbuf_r+0x28>
 80043f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80043f4:	e7ea      	b.n	80043cc <__swbuf_r+0x6c>
 80043f6:	bf00      	nop
 80043f8:	08005688 	.word	0x08005688
 80043fc:	080056a8 	.word	0x080056a8
 8004400:	08005668 	.word	0x08005668

08004404 <__swsetup_r>:
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <__swsetup_r+0xcc>)
 8004406:	b570      	push	{r4, r5, r6, lr}
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	4606      	mov	r6, r0
 800440c:	460c      	mov	r4, r1
 800440e:	b125      	cbz	r5, 800441a <__swsetup_r+0x16>
 8004410:	69ab      	ldr	r3, [r5, #24]
 8004412:	b913      	cbnz	r3, 800441a <__swsetup_r+0x16>
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f97d 	bl	8004714 <__sinit>
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <__swsetup_r+0xd0>)
 800441c:	429c      	cmp	r4, r3
 800441e:	d10f      	bne.n	8004440 <__swsetup_r+0x3c>
 8004420:	686c      	ldr	r4, [r5, #4]
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004428:	0719      	lsls	r1, r3, #28
 800442a:	d42c      	bmi.n	8004486 <__swsetup_r+0x82>
 800442c:	06dd      	lsls	r5, r3, #27
 800442e:	d411      	bmi.n	8004454 <__swsetup_r+0x50>
 8004430:	2309      	movs	r3, #9
 8004432:	6033      	str	r3, [r6, #0]
 8004434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800443e:	e03e      	b.n	80044be <__swsetup_r+0xba>
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <__swsetup_r+0xd4>)
 8004442:	429c      	cmp	r4, r3
 8004444:	d101      	bne.n	800444a <__swsetup_r+0x46>
 8004446:	68ac      	ldr	r4, [r5, #8]
 8004448:	e7eb      	b.n	8004422 <__swsetup_r+0x1e>
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <__swsetup_r+0xd8>)
 800444c:	429c      	cmp	r4, r3
 800444e:	bf08      	it	eq
 8004450:	68ec      	ldreq	r4, [r5, #12]
 8004452:	e7e6      	b.n	8004422 <__swsetup_r+0x1e>
 8004454:	0758      	lsls	r0, r3, #29
 8004456:	d512      	bpl.n	800447e <__swsetup_r+0x7a>
 8004458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800445a:	b141      	cbz	r1, 800446e <__swsetup_r+0x6a>
 800445c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004460:	4299      	cmp	r1, r3
 8004462:	d002      	beq.n	800446a <__swsetup_r+0x66>
 8004464:	4630      	mov	r0, r6
 8004466:	f000 fa59 	bl	800491c <_free_r>
 800446a:	2300      	movs	r3, #0
 800446c:	6363      	str	r3, [r4, #52]	; 0x34
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004474:	81a3      	strh	r3, [r4, #12]
 8004476:	2300      	movs	r3, #0
 8004478:	6063      	str	r3, [r4, #4]
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	f043 0308 	orr.w	r3, r3, #8
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	b94b      	cbnz	r3, 800449e <__swsetup_r+0x9a>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d003      	beq.n	800449e <__swsetup_r+0x9a>
 8004496:	4621      	mov	r1, r4
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f9ff 	bl	800489c <__smakebuf_r>
 800449e:	89a0      	ldrh	r0, [r4, #12]
 80044a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044a4:	f010 0301 	ands.w	r3, r0, #1
 80044a8:	d00a      	beq.n	80044c0 <__swsetup_r+0xbc>
 80044aa:	2300      	movs	r3, #0
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	6963      	ldr	r3, [r4, #20]
 80044b0:	425b      	negs	r3, r3
 80044b2:	61a3      	str	r3, [r4, #24]
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	b943      	cbnz	r3, 80044ca <__swsetup_r+0xc6>
 80044b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044bc:	d1ba      	bne.n	8004434 <__swsetup_r+0x30>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	0781      	lsls	r1, r0, #30
 80044c2:	bf58      	it	pl
 80044c4:	6963      	ldrpl	r3, [r4, #20]
 80044c6:	60a3      	str	r3, [r4, #8]
 80044c8:	e7f4      	b.n	80044b4 <__swsetup_r+0xb0>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e7f7      	b.n	80044be <__swsetup_r+0xba>
 80044ce:	bf00      	nop
 80044d0:	20000054 	.word	0x20000054
 80044d4:	08005688 	.word	0x08005688
 80044d8:	080056a8 	.word	0x080056a8
 80044dc:	08005668 	.word	0x08005668

080044e0 <__sflush_r>:
 80044e0:	898a      	ldrh	r2, [r1, #12]
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	0710      	lsls	r0, r2, #28
 80044ea:	460c      	mov	r4, r1
 80044ec:	d458      	bmi.n	80045a0 <__sflush_r+0xc0>
 80044ee:	684b      	ldr	r3, [r1, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	dc05      	bgt.n	8004500 <__sflush_r+0x20>
 80044f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	dc02      	bgt.n	8004500 <__sflush_r+0x20>
 80044fa:	2000      	movs	r0, #0
 80044fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004502:	2e00      	cmp	r6, #0
 8004504:	d0f9      	beq.n	80044fa <__sflush_r+0x1a>
 8004506:	2300      	movs	r3, #0
 8004508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800450c:	682f      	ldr	r7, [r5, #0]
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	d032      	beq.n	8004578 <__sflush_r+0x98>
 8004512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	075a      	lsls	r2, r3, #29
 8004518:	d505      	bpl.n	8004526 <__sflush_r+0x46>
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	1ac0      	subs	r0, r0, r3
 800451e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004520:	b10b      	cbz	r3, 8004526 <__sflush_r+0x46>
 8004522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	2300      	movs	r3, #0
 8004528:	4602      	mov	r2, r0
 800452a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800452c:	6a21      	ldr	r1, [r4, #32]
 800452e:	4628      	mov	r0, r5
 8004530:	47b0      	blx	r6
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	d106      	bne.n	8004546 <__sflush_r+0x66>
 8004538:	6829      	ldr	r1, [r5, #0]
 800453a:	291d      	cmp	r1, #29
 800453c:	d82c      	bhi.n	8004598 <__sflush_r+0xb8>
 800453e:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <__sflush_r+0x108>)
 8004540:	40ca      	lsrs	r2, r1
 8004542:	07d6      	lsls	r6, r2, #31
 8004544:	d528      	bpl.n	8004598 <__sflush_r+0xb8>
 8004546:	2200      	movs	r2, #0
 8004548:	6062      	str	r2, [r4, #4]
 800454a:	04d9      	lsls	r1, r3, #19
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	6022      	str	r2, [r4, #0]
 8004550:	d504      	bpl.n	800455c <__sflush_r+0x7c>
 8004552:	1c42      	adds	r2, r0, #1
 8004554:	d101      	bne.n	800455a <__sflush_r+0x7a>
 8004556:	682b      	ldr	r3, [r5, #0]
 8004558:	b903      	cbnz	r3, 800455c <__sflush_r+0x7c>
 800455a:	6560      	str	r0, [r4, #84]	; 0x54
 800455c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455e:	602f      	str	r7, [r5, #0]
 8004560:	2900      	cmp	r1, #0
 8004562:	d0ca      	beq.n	80044fa <__sflush_r+0x1a>
 8004564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004568:	4299      	cmp	r1, r3
 800456a:	d002      	beq.n	8004572 <__sflush_r+0x92>
 800456c:	4628      	mov	r0, r5
 800456e:	f000 f9d5 	bl	800491c <_free_r>
 8004572:	2000      	movs	r0, #0
 8004574:	6360      	str	r0, [r4, #52]	; 0x34
 8004576:	e7c1      	b.n	80044fc <__sflush_r+0x1c>
 8004578:	6a21      	ldr	r1, [r4, #32]
 800457a:	2301      	movs	r3, #1
 800457c:	4628      	mov	r0, r5
 800457e:	47b0      	blx	r6
 8004580:	1c41      	adds	r1, r0, #1
 8004582:	d1c7      	bne.n	8004514 <__sflush_r+0x34>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0c4      	beq.n	8004514 <__sflush_r+0x34>
 800458a:	2b1d      	cmp	r3, #29
 800458c:	d001      	beq.n	8004592 <__sflush_r+0xb2>
 800458e:	2b16      	cmp	r3, #22
 8004590:	d101      	bne.n	8004596 <__sflush_r+0xb6>
 8004592:	602f      	str	r7, [r5, #0]
 8004594:	e7b1      	b.n	80044fa <__sflush_r+0x1a>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	e7ad      	b.n	80044fc <__sflush_r+0x1c>
 80045a0:	690f      	ldr	r7, [r1, #16]
 80045a2:	2f00      	cmp	r7, #0
 80045a4:	d0a9      	beq.n	80044fa <__sflush_r+0x1a>
 80045a6:	0793      	lsls	r3, r2, #30
 80045a8:	680e      	ldr	r6, [r1, #0]
 80045aa:	bf08      	it	eq
 80045ac:	694b      	ldreq	r3, [r1, #20]
 80045ae:	600f      	str	r7, [r1, #0]
 80045b0:	bf18      	it	ne
 80045b2:	2300      	movne	r3, #0
 80045b4:	eba6 0807 	sub.w	r8, r6, r7
 80045b8:	608b      	str	r3, [r1, #8]
 80045ba:	f1b8 0f00 	cmp.w	r8, #0
 80045be:	dd9c      	ble.n	80044fa <__sflush_r+0x1a>
 80045c0:	6a21      	ldr	r1, [r4, #32]
 80045c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045c4:	4643      	mov	r3, r8
 80045c6:	463a      	mov	r2, r7
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b0      	blx	r6
 80045cc:	2800      	cmp	r0, #0
 80045ce:	dc06      	bgt.n	80045de <__sflush_r+0xfe>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045dc:	e78e      	b.n	80044fc <__sflush_r+0x1c>
 80045de:	4407      	add	r7, r0
 80045e0:	eba8 0800 	sub.w	r8, r8, r0
 80045e4:	e7e9      	b.n	80045ba <__sflush_r+0xda>
 80045e6:	bf00      	nop
 80045e8:	20400001 	.word	0x20400001

080045ec <_fflush_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	690b      	ldr	r3, [r1, #16]
 80045f0:	4605      	mov	r5, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	b913      	cbnz	r3, 80045fc <_fflush_r+0x10>
 80045f6:	2500      	movs	r5, #0
 80045f8:	4628      	mov	r0, r5
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	b118      	cbz	r0, 8004606 <_fflush_r+0x1a>
 80045fe:	6983      	ldr	r3, [r0, #24]
 8004600:	b90b      	cbnz	r3, 8004606 <_fflush_r+0x1a>
 8004602:	f000 f887 	bl	8004714 <__sinit>
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <_fflush_r+0x6c>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d11b      	bne.n	8004644 <_fflush_r+0x58>
 800460c:	686c      	ldr	r4, [r5, #4]
 800460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ef      	beq.n	80045f6 <_fflush_r+0xa>
 8004616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d404      	bmi.n	8004626 <_fflush_r+0x3a>
 800461c:	0599      	lsls	r1, r3, #22
 800461e:	d402      	bmi.n	8004626 <_fflush_r+0x3a>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f000 f915 	bl	8004850 <__retarget_lock_acquire_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	4621      	mov	r1, r4
 800462a:	f7ff ff59 	bl	80044e0 <__sflush_r>
 800462e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004630:	07da      	lsls	r2, r3, #31
 8004632:	4605      	mov	r5, r0
 8004634:	d4e0      	bmi.n	80045f8 <_fflush_r+0xc>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	d4dd      	bmi.n	80045f8 <_fflush_r+0xc>
 800463c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463e:	f000 f908 	bl	8004852 <__retarget_lock_release_recursive>
 8004642:	e7d9      	b.n	80045f8 <_fflush_r+0xc>
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_fflush_r+0x70>)
 8004646:	429c      	cmp	r4, r3
 8004648:	d101      	bne.n	800464e <_fflush_r+0x62>
 800464a:	68ac      	ldr	r4, [r5, #8]
 800464c:	e7df      	b.n	800460e <_fflush_r+0x22>
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <_fflush_r+0x74>)
 8004650:	429c      	cmp	r4, r3
 8004652:	bf08      	it	eq
 8004654:	68ec      	ldreq	r4, [r5, #12]
 8004656:	e7da      	b.n	800460e <_fflush_r+0x22>
 8004658:	08005688 	.word	0x08005688
 800465c:	080056a8 	.word	0x080056a8
 8004660:	08005668 	.word	0x08005668

08004664 <std>:
 8004664:	2300      	movs	r3, #0
 8004666:	b510      	push	{r4, lr}
 8004668:	4604      	mov	r4, r0
 800466a:	e9c0 3300 	strd	r3, r3, [r0]
 800466e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004672:	6083      	str	r3, [r0, #8]
 8004674:	8181      	strh	r1, [r0, #12]
 8004676:	6643      	str	r3, [r0, #100]	; 0x64
 8004678:	81c2      	strh	r2, [r0, #14]
 800467a:	6183      	str	r3, [r0, #24]
 800467c:	4619      	mov	r1, r3
 800467e:	2208      	movs	r2, #8
 8004680:	305c      	adds	r0, #92	; 0x5c
 8004682:	f7ff fdb7 	bl	80041f4 <memset>
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <std+0x38>)
 8004688:	6263      	str	r3, [r4, #36]	; 0x24
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <std+0x3c>)
 800468c:	62a3      	str	r3, [r4, #40]	; 0x28
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <std+0x40>)
 8004690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x44>)
 8004694:	6224      	str	r4, [r4, #32]
 8004696:	6323      	str	r3, [r4, #48]	; 0x30
 8004698:	bd10      	pop	{r4, pc}
 800469a:	bf00      	nop
 800469c:	08005325 	.word	0x08005325
 80046a0:	08005347 	.word	0x08005347
 80046a4:	0800537f 	.word	0x0800537f
 80046a8:	080053a3 	.word	0x080053a3

080046ac <_cleanup_r>:
 80046ac:	4901      	ldr	r1, [pc, #4]	; (80046b4 <_cleanup_r+0x8>)
 80046ae:	f000 b8af 	b.w	8004810 <_fwalk_reent>
 80046b2:	bf00      	nop
 80046b4:	080045ed 	.word	0x080045ed

080046b8 <__sfmoreglue>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	1e4a      	subs	r2, r1, #1
 80046bc:	2568      	movs	r5, #104	; 0x68
 80046be:	4355      	muls	r5, r2
 80046c0:	460e      	mov	r6, r1
 80046c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046c6:	f000 f979 	bl	80049bc <_malloc_r>
 80046ca:	4604      	mov	r4, r0
 80046cc:	b140      	cbz	r0, 80046e0 <__sfmoreglue+0x28>
 80046ce:	2100      	movs	r1, #0
 80046d0:	e9c0 1600 	strd	r1, r6, [r0]
 80046d4:	300c      	adds	r0, #12
 80046d6:	60a0      	str	r0, [r4, #8]
 80046d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046dc:	f7ff fd8a 	bl	80041f4 <memset>
 80046e0:	4620      	mov	r0, r4
 80046e2:	bd70      	pop	{r4, r5, r6, pc}

080046e4 <__sfp_lock_acquire>:
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <__sfp_lock_acquire+0x8>)
 80046e6:	f000 b8b3 	b.w	8004850 <__retarget_lock_acquire_recursive>
 80046ea:	bf00      	nop
 80046ec:	20000a38 	.word	0x20000a38

080046f0 <__sfp_lock_release>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sfp_lock_release+0x8>)
 80046f2:	f000 b8ae 	b.w	8004852 <__retarget_lock_release_recursive>
 80046f6:	bf00      	nop
 80046f8:	20000a38 	.word	0x20000a38

080046fc <__sinit_lock_acquire>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__sinit_lock_acquire+0x8>)
 80046fe:	f000 b8a7 	b.w	8004850 <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	20000a33 	.word	0x20000a33

08004708 <__sinit_lock_release>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sinit_lock_release+0x8>)
 800470a:	f000 b8a2 	b.w	8004852 <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	20000a33 	.word	0x20000a33

08004714 <__sinit>:
 8004714:	b510      	push	{r4, lr}
 8004716:	4604      	mov	r4, r0
 8004718:	f7ff fff0 	bl	80046fc <__sinit_lock_acquire>
 800471c:	69a3      	ldr	r3, [r4, #24]
 800471e:	b11b      	cbz	r3, 8004728 <__sinit+0x14>
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	f7ff bff0 	b.w	8004708 <__sinit_lock_release>
 8004728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800472c:	6523      	str	r3, [r4, #80]	; 0x50
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <__sinit+0x68>)
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <__sinit+0x6c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	62a2      	str	r2, [r4, #40]	; 0x28
 8004736:	42a3      	cmp	r3, r4
 8004738:	bf04      	itt	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	61a3      	streq	r3, [r4, #24]
 800473e:	4620      	mov	r0, r4
 8004740:	f000 f820 	bl	8004784 <__sfp>
 8004744:	6060      	str	r0, [r4, #4]
 8004746:	4620      	mov	r0, r4
 8004748:	f000 f81c 	bl	8004784 <__sfp>
 800474c:	60a0      	str	r0, [r4, #8]
 800474e:	4620      	mov	r0, r4
 8004750:	f000 f818 	bl	8004784 <__sfp>
 8004754:	2200      	movs	r2, #0
 8004756:	60e0      	str	r0, [r4, #12]
 8004758:	2104      	movs	r1, #4
 800475a:	6860      	ldr	r0, [r4, #4]
 800475c:	f7ff ff82 	bl	8004664 <std>
 8004760:	68a0      	ldr	r0, [r4, #8]
 8004762:	2201      	movs	r2, #1
 8004764:	2109      	movs	r1, #9
 8004766:	f7ff ff7d 	bl	8004664 <std>
 800476a:	68e0      	ldr	r0, [r4, #12]
 800476c:	2202      	movs	r2, #2
 800476e:	2112      	movs	r1, #18
 8004770:	f7ff ff78 	bl	8004664 <std>
 8004774:	2301      	movs	r3, #1
 8004776:	61a3      	str	r3, [r4, #24]
 8004778:	e7d2      	b.n	8004720 <__sinit+0xc>
 800477a:	bf00      	nop
 800477c:	08005664 	.word	0x08005664
 8004780:	080046ad 	.word	0x080046ad

08004784 <__sfp>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	4607      	mov	r7, r0
 8004788:	f7ff ffac 	bl	80046e4 <__sfp_lock_acquire>
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <__sfp+0x84>)
 800478e:	681e      	ldr	r6, [r3, #0]
 8004790:	69b3      	ldr	r3, [r6, #24]
 8004792:	b913      	cbnz	r3, 800479a <__sfp+0x16>
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff ffbd 	bl	8004714 <__sinit>
 800479a:	3648      	adds	r6, #72	; 0x48
 800479c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	d503      	bpl.n	80047ac <__sfp+0x28>
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	b30b      	cbz	r3, 80047ec <__sfp+0x68>
 80047a8:	6836      	ldr	r6, [r6, #0]
 80047aa:	e7f7      	b.n	800479c <__sfp+0x18>
 80047ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047b0:	b9d5      	cbnz	r5, 80047e8 <__sfp+0x64>
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <__sfp+0x88>)
 80047b4:	60e3      	str	r3, [r4, #12]
 80047b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047ba:	6665      	str	r5, [r4, #100]	; 0x64
 80047bc:	f000 f847 	bl	800484e <__retarget_lock_init_recursive>
 80047c0:	f7ff ff96 	bl	80046f0 <__sfp_lock_release>
 80047c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047cc:	6025      	str	r5, [r4, #0]
 80047ce:	61a5      	str	r5, [r4, #24]
 80047d0:	2208      	movs	r2, #8
 80047d2:	4629      	mov	r1, r5
 80047d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047d8:	f7ff fd0c 	bl	80041f4 <memset>
 80047dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047e4:	4620      	mov	r0, r4
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e8:	3468      	adds	r4, #104	; 0x68
 80047ea:	e7d9      	b.n	80047a0 <__sfp+0x1c>
 80047ec:	2104      	movs	r1, #4
 80047ee:	4638      	mov	r0, r7
 80047f0:	f7ff ff62 	bl	80046b8 <__sfmoreglue>
 80047f4:	4604      	mov	r4, r0
 80047f6:	6030      	str	r0, [r6, #0]
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1d5      	bne.n	80047a8 <__sfp+0x24>
 80047fc:	f7ff ff78 	bl	80046f0 <__sfp_lock_release>
 8004800:	230c      	movs	r3, #12
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	e7ee      	b.n	80047e4 <__sfp+0x60>
 8004806:	bf00      	nop
 8004808:	08005664 	.word	0x08005664
 800480c:	ffff0001 	.word	0xffff0001

08004810 <_fwalk_reent>:
 8004810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004814:	4606      	mov	r6, r0
 8004816:	4688      	mov	r8, r1
 8004818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800481c:	2700      	movs	r7, #0
 800481e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004822:	f1b9 0901 	subs.w	r9, r9, #1
 8004826:	d505      	bpl.n	8004834 <_fwalk_reent+0x24>
 8004828:	6824      	ldr	r4, [r4, #0]
 800482a:	2c00      	cmp	r4, #0
 800482c:	d1f7      	bne.n	800481e <_fwalk_reent+0xe>
 800482e:	4638      	mov	r0, r7
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004834:	89ab      	ldrh	r3, [r5, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d907      	bls.n	800484a <_fwalk_reent+0x3a>
 800483a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800483e:	3301      	adds	r3, #1
 8004840:	d003      	beq.n	800484a <_fwalk_reent+0x3a>
 8004842:	4629      	mov	r1, r5
 8004844:	4630      	mov	r0, r6
 8004846:	47c0      	blx	r8
 8004848:	4307      	orrs	r7, r0
 800484a:	3568      	adds	r5, #104	; 0x68
 800484c:	e7e9      	b.n	8004822 <_fwalk_reent+0x12>

0800484e <__retarget_lock_init_recursive>:
 800484e:	4770      	bx	lr

08004850 <__retarget_lock_acquire_recursive>:
 8004850:	4770      	bx	lr

08004852 <__retarget_lock_release_recursive>:
 8004852:	4770      	bx	lr

08004854 <__swhatbuf_r>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	460e      	mov	r6, r1
 8004858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485c:	2900      	cmp	r1, #0
 800485e:	b096      	sub	sp, #88	; 0x58
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	da07      	bge.n	8004876 <__swhatbuf_r+0x22>
 8004866:	2300      	movs	r3, #0
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	89b3      	ldrh	r3, [r6, #12]
 800486c:	061a      	lsls	r2, r3, #24
 800486e:	d410      	bmi.n	8004892 <__swhatbuf_r+0x3e>
 8004870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004874:	e00e      	b.n	8004894 <__swhatbuf_r+0x40>
 8004876:	466a      	mov	r2, sp
 8004878:	f000 fdba 	bl	80053f0 <_fstat_r>
 800487c:	2800      	cmp	r0, #0
 800487e:	dbf2      	blt.n	8004866 <__swhatbuf_r+0x12>
 8004880:	9a01      	ldr	r2, [sp, #4]
 8004882:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004886:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800488a:	425a      	negs	r2, r3
 800488c:	415a      	adcs	r2, r3
 800488e:	602a      	str	r2, [r5, #0]
 8004890:	e7ee      	b.n	8004870 <__swhatbuf_r+0x1c>
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	2000      	movs	r0, #0
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	b016      	add	sp, #88	; 0x58
 800489a:	bd70      	pop	{r4, r5, r6, pc}

0800489c <__smakebuf_r>:
 800489c:	898b      	ldrh	r3, [r1, #12]
 800489e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048a0:	079d      	lsls	r5, r3, #30
 80048a2:	4606      	mov	r6, r0
 80048a4:	460c      	mov	r4, r1
 80048a6:	d507      	bpl.n	80048b8 <__smakebuf_r+0x1c>
 80048a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	2301      	movs	r3, #1
 80048b2:	6163      	str	r3, [r4, #20]
 80048b4:	b002      	add	sp, #8
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	ab01      	add	r3, sp, #4
 80048ba:	466a      	mov	r2, sp
 80048bc:	f7ff ffca 	bl	8004854 <__swhatbuf_r>
 80048c0:	9900      	ldr	r1, [sp, #0]
 80048c2:	4605      	mov	r5, r0
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 f879 	bl	80049bc <_malloc_r>
 80048ca:	b948      	cbnz	r0, 80048e0 <__smakebuf_r+0x44>
 80048cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d0:	059a      	lsls	r2, r3, #22
 80048d2:	d4ef      	bmi.n	80048b4 <__smakebuf_r+0x18>
 80048d4:	f023 0303 	bic.w	r3, r3, #3
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	e7e3      	b.n	80048a8 <__smakebuf_r+0xc>
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <__smakebuf_r+0x7c>)
 80048e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	6020      	str	r0, [r4, #0]
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	9b00      	ldr	r3, [sp, #0]
 80048f0:	6163      	str	r3, [r4, #20]
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	6120      	str	r0, [r4, #16]
 80048f6:	b15b      	cbz	r3, 8004910 <__smakebuf_r+0x74>
 80048f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 fd89 	bl	8005414 <_isatty_r>
 8004902:	b128      	cbz	r0, 8004910 <__smakebuf_r+0x74>
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	81a3      	strh	r3, [r4, #12]
 8004910:	89a0      	ldrh	r0, [r4, #12]
 8004912:	4305      	orrs	r5, r0
 8004914:	81a5      	strh	r5, [r4, #12]
 8004916:	e7cd      	b.n	80048b4 <__smakebuf_r+0x18>
 8004918:	080046ad 	.word	0x080046ad

0800491c <_free_r>:
 800491c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800491e:	2900      	cmp	r1, #0
 8004920:	d048      	beq.n	80049b4 <_free_r+0x98>
 8004922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004926:	9001      	str	r0, [sp, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f1a1 0404 	sub.w	r4, r1, #4
 800492e:	bfb8      	it	lt
 8004930:	18e4      	addlt	r4, r4, r3
 8004932:	f000 fdb9 	bl	80054a8 <__malloc_lock>
 8004936:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <_free_r+0x9c>)
 8004938:	9801      	ldr	r0, [sp, #4]
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	4615      	mov	r5, r2
 800493e:	b933      	cbnz	r3, 800494e <_free_r+0x32>
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	6014      	str	r4, [r2, #0]
 8004944:	b003      	add	sp, #12
 8004946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800494a:	f000 bdb3 	b.w	80054b4 <__malloc_unlock>
 800494e:	42a3      	cmp	r3, r4
 8004950:	d90b      	bls.n	800496a <_free_r+0x4e>
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	1862      	adds	r2, r4, r1
 8004956:	4293      	cmp	r3, r2
 8004958:	bf04      	itt	eq
 800495a:	681a      	ldreq	r2, [r3, #0]
 800495c:	685b      	ldreq	r3, [r3, #4]
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	bf04      	itt	eq
 8004962:	1852      	addeq	r2, r2, r1
 8004964:	6022      	streq	r2, [r4, #0]
 8004966:	602c      	str	r4, [r5, #0]
 8004968:	e7ec      	b.n	8004944 <_free_r+0x28>
 800496a:	461a      	mov	r2, r3
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b10b      	cbz	r3, 8004974 <_free_r+0x58>
 8004970:	42a3      	cmp	r3, r4
 8004972:	d9fa      	bls.n	800496a <_free_r+0x4e>
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	1855      	adds	r5, r2, r1
 8004978:	42a5      	cmp	r5, r4
 800497a:	d10b      	bne.n	8004994 <_free_r+0x78>
 800497c:	6824      	ldr	r4, [r4, #0]
 800497e:	4421      	add	r1, r4
 8004980:	1854      	adds	r4, r2, r1
 8004982:	42a3      	cmp	r3, r4
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	d1dd      	bne.n	8004944 <_free_r+0x28>
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	6053      	str	r3, [r2, #4]
 800498e:	4421      	add	r1, r4
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	e7d7      	b.n	8004944 <_free_r+0x28>
 8004994:	d902      	bls.n	800499c <_free_r+0x80>
 8004996:	230c      	movs	r3, #12
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	e7d3      	b.n	8004944 <_free_r+0x28>
 800499c:	6825      	ldr	r5, [r4, #0]
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf04      	itt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	6063      	str	r3, [r4, #4]
 80049aa:	bf04      	itt	eq
 80049ac:	1949      	addeq	r1, r1, r5
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	6054      	str	r4, [r2, #4]
 80049b2:	e7c7      	b.n	8004944 <_free_r+0x28>
 80049b4:	b003      	add	sp, #12
 80049b6:	bd30      	pop	{r4, r5, pc}
 80049b8:	200000fc 	.word	0x200000fc

080049bc <_malloc_r>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	1ccd      	adds	r5, r1, #3
 80049c0:	f025 0503 	bic.w	r5, r5, #3
 80049c4:	3508      	adds	r5, #8
 80049c6:	2d0c      	cmp	r5, #12
 80049c8:	bf38      	it	cc
 80049ca:	250c      	movcc	r5, #12
 80049cc:	2d00      	cmp	r5, #0
 80049ce:	4606      	mov	r6, r0
 80049d0:	db01      	blt.n	80049d6 <_malloc_r+0x1a>
 80049d2:	42a9      	cmp	r1, r5
 80049d4:	d903      	bls.n	80049de <_malloc_r+0x22>
 80049d6:	230c      	movs	r3, #12
 80049d8:	6033      	str	r3, [r6, #0]
 80049da:	2000      	movs	r0, #0
 80049dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049de:	f000 fd63 	bl	80054a8 <__malloc_lock>
 80049e2:	4921      	ldr	r1, [pc, #132]	; (8004a68 <_malloc_r+0xac>)
 80049e4:	680a      	ldr	r2, [r1, #0]
 80049e6:	4614      	mov	r4, r2
 80049e8:	b99c      	cbnz	r4, 8004a12 <_malloc_r+0x56>
 80049ea:	4f20      	ldr	r7, [pc, #128]	; (8004a6c <_malloc_r+0xb0>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	b923      	cbnz	r3, 80049fa <_malloc_r+0x3e>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 fc86 	bl	8005304 <_sbrk_r>
 80049f8:	6038      	str	r0, [r7, #0]
 80049fa:	4629      	mov	r1, r5
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 fc81 	bl	8005304 <_sbrk_r>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	d123      	bne.n	8004a4e <_malloc_r+0x92>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 fd52 	bl	80054b4 <__malloc_unlock>
 8004a10:	e7e3      	b.n	80049da <_malloc_r+0x1e>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	1b5b      	subs	r3, r3, r5
 8004a16:	d417      	bmi.n	8004a48 <_malloc_r+0x8c>
 8004a18:	2b0b      	cmp	r3, #11
 8004a1a:	d903      	bls.n	8004a24 <_malloc_r+0x68>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	441c      	add	r4, r3
 8004a20:	6025      	str	r5, [r4, #0]
 8004a22:	e004      	b.n	8004a2e <_malloc_r+0x72>
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	bf0c      	ite	eq
 8004a2a:	600b      	streq	r3, [r1, #0]
 8004a2c:	6053      	strne	r3, [r2, #4]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 fd40 	bl	80054b4 <__malloc_unlock>
 8004a34:	f104 000b 	add.w	r0, r4, #11
 8004a38:	1d23      	adds	r3, r4, #4
 8004a3a:	f020 0007 	bic.w	r0, r0, #7
 8004a3e:	1ac2      	subs	r2, r0, r3
 8004a40:	d0cc      	beq.n	80049dc <_malloc_r+0x20>
 8004a42:	1a1b      	subs	r3, r3, r0
 8004a44:	50a3      	str	r3, [r4, r2]
 8004a46:	e7c9      	b.n	80049dc <_malloc_r+0x20>
 8004a48:	4622      	mov	r2, r4
 8004a4a:	6864      	ldr	r4, [r4, #4]
 8004a4c:	e7cc      	b.n	80049e8 <_malloc_r+0x2c>
 8004a4e:	1cc4      	adds	r4, r0, #3
 8004a50:	f024 0403 	bic.w	r4, r4, #3
 8004a54:	42a0      	cmp	r0, r4
 8004a56:	d0e3      	beq.n	8004a20 <_malloc_r+0x64>
 8004a58:	1a21      	subs	r1, r4, r0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f000 fc52 	bl	8005304 <_sbrk_r>
 8004a60:	3001      	adds	r0, #1
 8004a62:	d1dd      	bne.n	8004a20 <_malloc_r+0x64>
 8004a64:	e7cf      	b.n	8004a06 <_malloc_r+0x4a>
 8004a66:	bf00      	nop
 8004a68:	200000fc 	.word	0x200000fc
 8004a6c:	20000100 	.word	0x20000100

08004a70 <__ssputs_r>:
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	688e      	ldr	r6, [r1, #8]
 8004a76:	429e      	cmp	r6, r3
 8004a78:	4682      	mov	sl, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	461f      	mov	r7, r3
 8004a80:	d838      	bhi.n	8004af4 <__ssputs_r+0x84>
 8004a82:	898a      	ldrh	r2, [r1, #12]
 8004a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a88:	d032      	beq.n	8004af0 <__ssputs_r+0x80>
 8004a8a:	6825      	ldr	r5, [r4, #0]
 8004a8c:	6909      	ldr	r1, [r1, #16]
 8004a8e:	eba5 0901 	sub.w	r9, r5, r1
 8004a92:	6965      	ldr	r5, [r4, #20]
 8004a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	444b      	add	r3, r9
 8004aa0:	106d      	asrs	r5, r5, #1
 8004aa2:	429d      	cmp	r5, r3
 8004aa4:	bf38      	it	cc
 8004aa6:	461d      	movcc	r5, r3
 8004aa8:	0553      	lsls	r3, r2, #21
 8004aaa:	d531      	bpl.n	8004b10 <__ssputs_r+0xa0>
 8004aac:	4629      	mov	r1, r5
 8004aae:	f7ff ff85 	bl	80049bc <_malloc_r>
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	b950      	cbnz	r0, 8004acc <__ssputs_r+0x5c>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	f8ca 3000 	str.w	r3, [sl]
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	464a      	mov	r2, r9
 8004ad0:	f000 fcc2 	bl	8005458 <memcpy>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	6126      	str	r6, [r4, #16]
 8004ae2:	6165      	str	r5, [r4, #20]
 8004ae4:	444e      	add	r6, r9
 8004ae6:	eba5 0509 	sub.w	r5, r5, r9
 8004aea:	6026      	str	r6, [r4, #0]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	463e      	mov	r6, r7
 8004af0:	42be      	cmp	r6, r7
 8004af2:	d900      	bls.n	8004af6 <__ssputs_r+0x86>
 8004af4:	463e      	mov	r6, r7
 8004af6:	4632      	mov	r2, r6
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	4641      	mov	r1, r8
 8004afc:	f000 fcba 	bl	8005474 <memmove>
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	4432      	add	r2, r6
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e7db      	b.n	8004ac8 <__ssputs_r+0x58>
 8004b10:	462a      	mov	r2, r5
 8004b12:	f000 fcd5 	bl	80054c0 <_realloc_r>
 8004b16:	4606      	mov	r6, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1e1      	bne.n	8004ae0 <__ssputs_r+0x70>
 8004b1c:	6921      	ldr	r1, [r4, #16]
 8004b1e:	4650      	mov	r0, sl
 8004b20:	f7ff fefc 	bl	800491c <_free_r>
 8004b24:	e7c7      	b.n	8004ab6 <__ssputs_r+0x46>
	...

08004b28 <_svfiprintf_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	4698      	mov	r8, r3
 8004b2e:	898b      	ldrh	r3, [r1, #12]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	b09d      	sub	sp, #116	; 0x74
 8004b34:	4607      	mov	r7, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	d50e      	bpl.n	8004b5a <_svfiprintf_r+0x32>
 8004b3c:	690b      	ldr	r3, [r1, #16]
 8004b3e:	b963      	cbnz	r3, 8004b5a <_svfiprintf_r+0x32>
 8004b40:	2140      	movs	r1, #64	; 0x40
 8004b42:	f7ff ff3b 	bl	80049bc <_malloc_r>
 8004b46:	6028      	str	r0, [r5, #0]
 8004b48:	6128      	str	r0, [r5, #16]
 8004b4a:	b920      	cbnz	r0, 8004b56 <_svfiprintf_r+0x2e>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b54:	e0d1      	b.n	8004cfa <_svfiprintf_r+0x1d2>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	616b      	str	r3, [r5, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b68:	2330      	movs	r3, #48	; 0x30
 8004b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d14 <_svfiprintf_r+0x1ec>
 8004b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b72:	f04f 0901 	mov.w	r9, #1
 8004b76:	4623      	mov	r3, r4
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7e:	b10a      	cbz	r2, 8004b84 <_svfiprintf_r+0x5c>
 8004b80:	2a25      	cmp	r2, #37	; 0x25
 8004b82:	d1f9      	bne.n	8004b78 <_svfiprintf_r+0x50>
 8004b84:	ebba 0b04 	subs.w	fp, sl, r4
 8004b88:	d00b      	beq.n	8004ba2 <_svfiprintf_r+0x7a>
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff6d 	bl	8004a70 <__ssputs_r>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f000 80aa 	beq.w	8004cf0 <_svfiprintf_r+0x1c8>
 8004b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9e:	445a      	add	r2, fp
 8004ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a2 	beq.w	8004cf0 <_svfiprintf_r+0x1c8>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb6:	f10a 0a01 	add.w	sl, sl, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc4:	4654      	mov	r4, sl
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	4851      	ldr	r0, [pc, #324]	; (8004d14 <_svfiprintf_r+0x1ec>)
 8004bce:	f7fb fb07 	bl	80001e0 <memchr>
 8004bd2:	9a04      	ldr	r2, [sp, #16]
 8004bd4:	b9d8      	cbnz	r0, 8004c0e <_svfiprintf_r+0xe6>
 8004bd6:	06d0      	lsls	r0, r2, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2320      	movmi	r3, #32
 8004bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be0:	0711      	lsls	r1, r2, #28
 8004be2:	bf44      	itt	mi
 8004be4:	232b      	movmi	r3, #43	; 0x2b
 8004be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf0:	d015      	beq.n	8004c1e <_svfiprintf_r+0xf6>
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c02:	3b30      	subs	r3, #48	; 0x30
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d94e      	bls.n	8004ca6 <_svfiprintf_r+0x17e>
 8004c08:	b1b0      	cbz	r0, 8004c38 <_svfiprintf_r+0x110>
 8004c0a:	9207      	str	r2, [sp, #28]
 8004c0c:	e014      	b.n	8004c38 <_svfiprintf_r+0x110>
 8004c0e:	eba0 0308 	sub.w	r3, r0, r8
 8004c12:	fa09 f303 	lsl.w	r3, r9, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	e7d2      	b.n	8004bc4 <_svfiprintf_r+0x9c>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9103      	str	r1, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfbb      	ittet	lt
 8004c2a:	425b      	neglt	r3, r3
 8004c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c30:	9307      	strge	r3, [sp, #28]
 8004c32:	9307      	strlt	r3, [sp, #28]
 8004c34:	bfb8      	it	lt
 8004c36:	9204      	strlt	r2, [sp, #16]
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c3c:	d10c      	bne.n	8004c58 <_svfiprintf_r+0x130>
 8004c3e:	7863      	ldrb	r3, [r4, #1]
 8004c40:	2b2a      	cmp	r3, #42	; 0x2a
 8004c42:	d135      	bne.n	8004cb0 <_svfiprintf_r+0x188>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9203      	str	r2, [sp, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bfb8      	it	lt
 8004c50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c54:	3402      	adds	r4, #2
 8004c56:	9305      	str	r3, [sp, #20]
 8004c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d24 <_svfiprintf_r+0x1fc>
 8004c5c:	7821      	ldrb	r1, [r4, #0]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4650      	mov	r0, sl
 8004c62:	f7fb fabd 	bl	80001e0 <memchr>
 8004c66:	b140      	cbz	r0, 8004c7a <_svfiprintf_r+0x152>
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	eba0 000a 	sub.w	r0, r0, sl
 8004c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	4303      	orrs	r3, r0
 8004c76:	3401      	adds	r4, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	4826      	ldr	r0, [pc, #152]	; (8004d18 <_svfiprintf_r+0x1f0>)
 8004c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c84:	2206      	movs	r2, #6
 8004c86:	f7fb faab 	bl	80001e0 <memchr>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d038      	beq.n	8004d00 <_svfiprintf_r+0x1d8>
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <_svfiprintf_r+0x1f4>)
 8004c90:	bb1b      	cbnz	r3, 8004cda <_svfiprintf_r+0x1b2>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca0:	4433      	add	r3, r6
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	e767      	b.n	8004b76 <_svfiprintf_r+0x4e>
 8004ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004caa:	460c      	mov	r4, r1
 8004cac:	2001      	movs	r0, #1
 8004cae:	e7a5      	b.n	8004bfc <_svfiprintf_r+0xd4>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	3401      	adds	r4, #1
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f04f 0c0a 	mov.w	ip, #10
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc2:	3a30      	subs	r2, #48	; 0x30
 8004cc4:	2a09      	cmp	r2, #9
 8004cc6:	d903      	bls.n	8004cd0 <_svfiprintf_r+0x1a8>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c5      	beq.n	8004c58 <_svfiprintf_r+0x130>
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	e7c3      	b.n	8004c58 <_svfiprintf_r+0x130>
 8004cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e7f0      	b.n	8004cbc <_svfiprintf_r+0x194>
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <_svfiprintf_r+0x1f8>)
 8004ce2:	a904      	add	r1, sp, #16
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f3af 8000 	nop.w
 8004cea:	1c42      	adds	r2, r0, #1
 8004cec:	4606      	mov	r6, r0
 8004cee:	d1d6      	bne.n	8004c9e <_svfiprintf_r+0x176>
 8004cf0:	89ab      	ldrh	r3, [r5, #12]
 8004cf2:	065b      	lsls	r3, r3, #25
 8004cf4:	f53f af2c 	bmi.w	8004b50 <_svfiprintf_r+0x28>
 8004cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfa:	b01d      	add	sp, #116	; 0x74
 8004cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d00:	ab03      	add	r3, sp, #12
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	462a      	mov	r2, r5
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_svfiprintf_r+0x1f8>)
 8004d08:	a904      	add	r1, sp, #16
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 f9d4 	bl	80050b8 <_printf_i>
 8004d10:	e7eb      	b.n	8004cea <_svfiprintf_r+0x1c2>
 8004d12:	bf00      	nop
 8004d14:	080056c8 	.word	0x080056c8
 8004d18:	080056d2 	.word	0x080056d2
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004a71 	.word	0x08004a71
 8004d24:	080056ce 	.word	0x080056ce

08004d28 <__sfputc_r>:
 8004d28:	6893      	ldr	r3, [r2, #8]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	b410      	push	{r4}
 8004d30:	6093      	str	r3, [r2, #8]
 8004d32:	da08      	bge.n	8004d46 <__sfputc_r+0x1e>
 8004d34:	6994      	ldr	r4, [r2, #24]
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	db01      	blt.n	8004d3e <__sfputc_r+0x16>
 8004d3a:	290a      	cmp	r1, #10
 8004d3c:	d103      	bne.n	8004d46 <__sfputc_r+0x1e>
 8004d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d42:	f7ff bb0d 	b.w	8004360 <__swbuf_r>
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	1c58      	adds	r0, r3, #1
 8004d4a:	6010      	str	r0, [r2, #0]
 8004d4c:	7019      	strb	r1, [r3, #0]
 8004d4e:	4608      	mov	r0, r1
 8004d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <__sfputs_r>:
 8004d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d58:	4606      	mov	r6, r0
 8004d5a:	460f      	mov	r7, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	18d5      	adds	r5, r2, r3
 8004d60:	42ac      	cmp	r4, r5
 8004d62:	d101      	bne.n	8004d68 <__sfputs_r+0x12>
 8004d64:	2000      	movs	r0, #0
 8004d66:	e007      	b.n	8004d78 <__sfputs_r+0x22>
 8004d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f7ff ffda 	bl	8004d28 <__sfputc_r>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d1f3      	bne.n	8004d60 <__sfputs_r+0xa>
 8004d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d7c <_vfiprintf_r>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	460d      	mov	r5, r1
 8004d82:	b09d      	sub	sp, #116	; 0x74
 8004d84:	4614      	mov	r4, r2
 8004d86:	4698      	mov	r8, r3
 8004d88:	4606      	mov	r6, r0
 8004d8a:	b118      	cbz	r0, 8004d94 <_vfiprintf_r+0x18>
 8004d8c:	6983      	ldr	r3, [r0, #24]
 8004d8e:	b90b      	cbnz	r3, 8004d94 <_vfiprintf_r+0x18>
 8004d90:	f7ff fcc0 	bl	8004714 <__sinit>
 8004d94:	4b89      	ldr	r3, [pc, #548]	; (8004fbc <_vfiprintf_r+0x240>)
 8004d96:	429d      	cmp	r5, r3
 8004d98:	d11b      	bne.n	8004dd2 <_vfiprintf_r+0x56>
 8004d9a:	6875      	ldr	r5, [r6, #4]
 8004d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d9e:	07d9      	lsls	r1, r3, #31
 8004da0:	d405      	bmi.n	8004dae <_vfiprintf_r+0x32>
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	059a      	lsls	r2, r3, #22
 8004da6:	d402      	bmi.n	8004dae <_vfiprintf_r+0x32>
 8004da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004daa:	f7ff fd51 	bl	8004850 <__retarget_lock_acquire_recursive>
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	d501      	bpl.n	8004db8 <_vfiprintf_r+0x3c>
 8004db4:	692b      	ldr	r3, [r5, #16]
 8004db6:	b9eb      	cbnz	r3, 8004df4 <_vfiprintf_r+0x78>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7ff fb22 	bl	8004404 <__swsetup_r>
 8004dc0:	b1c0      	cbz	r0, 8004df4 <_vfiprintf_r+0x78>
 8004dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc4:	07dc      	lsls	r4, r3, #31
 8004dc6:	d50e      	bpl.n	8004de6 <_vfiprintf_r+0x6a>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dcc:	b01d      	add	sp, #116	; 0x74
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	4b7b      	ldr	r3, [pc, #492]	; (8004fc0 <_vfiprintf_r+0x244>)
 8004dd4:	429d      	cmp	r5, r3
 8004dd6:	d101      	bne.n	8004ddc <_vfiprintf_r+0x60>
 8004dd8:	68b5      	ldr	r5, [r6, #8]
 8004dda:	e7df      	b.n	8004d9c <_vfiprintf_r+0x20>
 8004ddc:	4b79      	ldr	r3, [pc, #484]	; (8004fc4 <_vfiprintf_r+0x248>)
 8004dde:	429d      	cmp	r5, r3
 8004de0:	bf08      	it	eq
 8004de2:	68f5      	ldreq	r5, [r6, #12]
 8004de4:	e7da      	b.n	8004d9c <_vfiprintf_r+0x20>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	0598      	lsls	r0, r3, #22
 8004dea:	d4ed      	bmi.n	8004dc8 <_vfiprintf_r+0x4c>
 8004dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dee:	f7ff fd30 	bl	8004852 <__retarget_lock_release_recursive>
 8004df2:	e7e9      	b.n	8004dc8 <_vfiprintf_r+0x4c>
 8004df4:	2300      	movs	r3, #0
 8004df6:	9309      	str	r3, [sp, #36]	; 0x24
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e02:	2330      	movs	r3, #48	; 0x30
 8004e04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fc8 <_vfiprintf_r+0x24c>
 8004e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e0c:	f04f 0901 	mov.w	r9, #1
 8004e10:	4623      	mov	r3, r4
 8004e12:	469a      	mov	sl, r3
 8004e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e18:	b10a      	cbz	r2, 8004e1e <_vfiprintf_r+0xa2>
 8004e1a:	2a25      	cmp	r2, #37	; 0x25
 8004e1c:	d1f9      	bne.n	8004e12 <_vfiprintf_r+0x96>
 8004e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e22:	d00b      	beq.n	8004e3c <_vfiprintf_r+0xc0>
 8004e24:	465b      	mov	r3, fp
 8004e26:	4622      	mov	r2, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ff93 	bl	8004d56 <__sfputs_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	f000 80aa 	beq.w	8004f8a <_vfiprintf_r+0x20e>
 8004e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e38:	445a      	add	r2, fp
 8004e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80a2 	beq.w	8004f8a <_vfiprintf_r+0x20e>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e50:	f10a 0a01 	add.w	sl, sl, #1
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2205      	movs	r2, #5
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	4858      	ldr	r0, [pc, #352]	; (8004fc8 <_vfiprintf_r+0x24c>)
 8004e68:	f7fb f9ba 	bl	80001e0 <memchr>
 8004e6c:	9a04      	ldr	r2, [sp, #16]
 8004e6e:	b9d8      	cbnz	r0, 8004ea8 <_vfiprintf_r+0x12c>
 8004e70:	06d1      	lsls	r1, r2, #27
 8004e72:	bf44      	itt	mi
 8004e74:	2320      	movmi	r3, #32
 8004e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7a:	0713      	lsls	r3, r2, #28
 8004e7c:	bf44      	itt	mi
 8004e7e:	232b      	movmi	r3, #43	; 0x2b
 8004e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e84:	f89a 3000 	ldrb.w	r3, [sl]
 8004e88:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8a:	d015      	beq.n	8004eb8 <_vfiprintf_r+0x13c>
 8004e8c:	9a07      	ldr	r2, [sp, #28]
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2000      	movs	r0, #0
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	4621      	mov	r1, r4
 8004e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9c:	3b30      	subs	r3, #48	; 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d94e      	bls.n	8004f40 <_vfiprintf_r+0x1c4>
 8004ea2:	b1b0      	cbz	r0, 8004ed2 <_vfiprintf_r+0x156>
 8004ea4:	9207      	str	r2, [sp, #28]
 8004ea6:	e014      	b.n	8004ed2 <_vfiprintf_r+0x156>
 8004ea8:	eba0 0308 	sub.w	r3, r0, r8
 8004eac:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	46a2      	mov	sl, r4
 8004eb6:	e7d2      	b.n	8004e5e <_vfiprintf_r+0xe2>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bfbb      	ittet	lt
 8004ec4:	425b      	neglt	r3, r3
 8004ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eca:	9307      	strge	r3, [sp, #28]
 8004ecc:	9307      	strlt	r3, [sp, #28]
 8004ece:	bfb8      	it	lt
 8004ed0:	9204      	strlt	r2, [sp, #16]
 8004ed2:	7823      	ldrb	r3, [r4, #0]
 8004ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed6:	d10c      	bne.n	8004ef2 <_vfiprintf_r+0x176>
 8004ed8:	7863      	ldrb	r3, [r4, #1]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d135      	bne.n	8004f4a <_vfiprintf_r+0x1ce>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	9203      	str	r2, [sp, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bfb8      	it	lt
 8004eea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004eee:	3402      	adds	r4, #2
 8004ef0:	9305      	str	r3, [sp, #20]
 8004ef2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fd8 <_vfiprintf_r+0x25c>
 8004ef6:	7821      	ldrb	r1, [r4, #0]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	4650      	mov	r0, sl
 8004efc:	f7fb f970 	bl	80001e0 <memchr>
 8004f00:	b140      	cbz	r0, 8004f14 <_vfiprintf_r+0x198>
 8004f02:	2340      	movs	r3, #64	; 0x40
 8004f04:	eba0 000a 	sub.w	r0, r0, sl
 8004f08:	fa03 f000 	lsl.w	r0, r3, r0
 8004f0c:	9b04      	ldr	r3, [sp, #16]
 8004f0e:	4303      	orrs	r3, r0
 8004f10:	3401      	adds	r4, #1
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	482c      	ldr	r0, [pc, #176]	; (8004fcc <_vfiprintf_r+0x250>)
 8004f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f1e:	2206      	movs	r2, #6
 8004f20:	f7fb f95e 	bl	80001e0 <memchr>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d03f      	beq.n	8004fa8 <_vfiprintf_r+0x22c>
 8004f28:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <_vfiprintf_r+0x254>)
 8004f2a:	bb1b      	cbnz	r3, 8004f74 <_vfiprintf_r+0x1f8>
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	3307      	adds	r3, #7
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	3308      	adds	r3, #8
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3a:	443b      	add	r3, r7
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	e767      	b.n	8004e10 <_vfiprintf_r+0x94>
 8004f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f44:	460c      	mov	r4, r1
 8004f46:	2001      	movs	r0, #1
 8004f48:	e7a5      	b.n	8004e96 <_vfiprintf_r+0x11a>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	4619      	mov	r1, r3
 8004f52:	f04f 0c0a 	mov.w	ip, #10
 8004f56:	4620      	mov	r0, r4
 8004f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5c:	3a30      	subs	r2, #48	; 0x30
 8004f5e:	2a09      	cmp	r2, #9
 8004f60:	d903      	bls.n	8004f6a <_vfiprintf_r+0x1ee>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c5      	beq.n	8004ef2 <_vfiprintf_r+0x176>
 8004f66:	9105      	str	r1, [sp, #20]
 8004f68:	e7c3      	b.n	8004ef2 <_vfiprintf_r+0x176>
 8004f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f6e:	4604      	mov	r4, r0
 8004f70:	2301      	movs	r3, #1
 8004f72:	e7f0      	b.n	8004f56 <_vfiprintf_r+0x1da>
 8004f74:	ab03      	add	r3, sp, #12
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	462a      	mov	r2, r5
 8004f7a:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <_vfiprintf_r+0x258>)
 8004f7c:	a904      	add	r1, sp, #16
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f3af 8000 	nop.w
 8004f84:	4607      	mov	r7, r0
 8004f86:	1c78      	adds	r0, r7, #1
 8004f88:	d1d6      	bne.n	8004f38 <_vfiprintf_r+0x1bc>
 8004f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f8c:	07d9      	lsls	r1, r3, #31
 8004f8e:	d405      	bmi.n	8004f9c <_vfiprintf_r+0x220>
 8004f90:	89ab      	ldrh	r3, [r5, #12]
 8004f92:	059a      	lsls	r2, r3, #22
 8004f94:	d402      	bmi.n	8004f9c <_vfiprintf_r+0x220>
 8004f96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f98:	f7ff fc5b 	bl	8004852 <__retarget_lock_release_recursive>
 8004f9c:	89ab      	ldrh	r3, [r5, #12]
 8004f9e:	065b      	lsls	r3, r3, #25
 8004fa0:	f53f af12 	bmi.w	8004dc8 <_vfiprintf_r+0x4c>
 8004fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fa6:	e711      	b.n	8004dcc <_vfiprintf_r+0x50>
 8004fa8:	ab03      	add	r3, sp, #12
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	462a      	mov	r2, r5
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <_vfiprintf_r+0x258>)
 8004fb0:	a904      	add	r1, sp, #16
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f000 f880 	bl	80050b8 <_printf_i>
 8004fb8:	e7e4      	b.n	8004f84 <_vfiprintf_r+0x208>
 8004fba:	bf00      	nop
 8004fbc:	08005688 	.word	0x08005688
 8004fc0:	080056a8 	.word	0x080056a8
 8004fc4:	08005668 	.word	0x08005668
 8004fc8:	080056c8 	.word	0x080056c8
 8004fcc:	080056d2 	.word	0x080056d2
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	08004d57 	.word	0x08004d57
 8004fd8:	080056ce 	.word	0x080056ce

08004fdc <_printf_common>:
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	4616      	mov	r6, r2
 8004fe2:	4699      	mov	r9, r3
 8004fe4:	688a      	ldr	r2, [r1, #8]
 8004fe6:	690b      	ldr	r3, [r1, #16]
 8004fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fec:	4293      	cmp	r3, r2
 8004fee:	bfb8      	it	lt
 8004ff0:	4613      	movlt	r3, r2
 8004ff2:	6033      	str	r3, [r6, #0]
 8004ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ff8:	4607      	mov	r7, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	b10a      	cbz	r2, 8005002 <_printf_common+0x26>
 8004ffe:	3301      	adds	r3, #1
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	0699      	lsls	r1, r3, #26
 8005006:	bf42      	ittt	mi
 8005008:	6833      	ldrmi	r3, [r6, #0]
 800500a:	3302      	addmi	r3, #2
 800500c:	6033      	strmi	r3, [r6, #0]
 800500e:	6825      	ldr	r5, [r4, #0]
 8005010:	f015 0506 	ands.w	r5, r5, #6
 8005014:	d106      	bne.n	8005024 <_printf_common+0x48>
 8005016:	f104 0a19 	add.w	sl, r4, #25
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	6832      	ldr	r2, [r6, #0]
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	42ab      	cmp	r3, r5
 8005022:	dc26      	bgt.n	8005072 <_printf_common+0x96>
 8005024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005028:	1e13      	subs	r3, r2, #0
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	bf18      	it	ne
 800502e:	2301      	movne	r3, #1
 8005030:	0692      	lsls	r2, r2, #26
 8005032:	d42b      	bmi.n	800508c <_printf_common+0xb0>
 8005034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005038:	4649      	mov	r1, r9
 800503a:	4638      	mov	r0, r7
 800503c:	47c0      	blx	r8
 800503e:	3001      	adds	r0, #1
 8005040:	d01e      	beq.n	8005080 <_printf_common+0xa4>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	68e5      	ldr	r5, [r4, #12]
 8005046:	6832      	ldr	r2, [r6, #0]
 8005048:	f003 0306 	and.w	r3, r3, #6
 800504c:	2b04      	cmp	r3, #4
 800504e:	bf08      	it	eq
 8005050:	1aad      	subeq	r5, r5, r2
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	6922      	ldr	r2, [r4, #16]
 8005056:	bf0c      	ite	eq
 8005058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800505c:	2500      	movne	r5, #0
 800505e:	4293      	cmp	r3, r2
 8005060:	bfc4      	itt	gt
 8005062:	1a9b      	subgt	r3, r3, r2
 8005064:	18ed      	addgt	r5, r5, r3
 8005066:	2600      	movs	r6, #0
 8005068:	341a      	adds	r4, #26
 800506a:	42b5      	cmp	r5, r6
 800506c:	d11a      	bne.n	80050a4 <_printf_common+0xc8>
 800506e:	2000      	movs	r0, #0
 8005070:	e008      	b.n	8005084 <_printf_common+0xa8>
 8005072:	2301      	movs	r3, #1
 8005074:	4652      	mov	r2, sl
 8005076:	4649      	mov	r1, r9
 8005078:	4638      	mov	r0, r7
 800507a:	47c0      	blx	r8
 800507c:	3001      	adds	r0, #1
 800507e:	d103      	bne.n	8005088 <_printf_common+0xac>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	3501      	adds	r5, #1
 800508a:	e7c6      	b.n	800501a <_printf_common+0x3e>
 800508c:	18e1      	adds	r1, r4, r3
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	2030      	movs	r0, #48	; 0x30
 8005092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005096:	4422      	add	r2, r4
 8005098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800509c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050a0:	3302      	adds	r3, #2
 80050a2:	e7c7      	b.n	8005034 <_printf_common+0x58>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4622      	mov	r2, r4
 80050a8:	4649      	mov	r1, r9
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c0      	blx	r8
 80050ae:	3001      	adds	r0, #1
 80050b0:	d0e6      	beq.n	8005080 <_printf_common+0xa4>
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7d9      	b.n	800506a <_printf_common+0x8e>
	...

080050b8 <_printf_i>:
 80050b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	4691      	mov	r9, r2
 80050c0:	7e27      	ldrb	r7, [r4, #24]
 80050c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050c4:	2f78      	cmp	r7, #120	; 0x78
 80050c6:	4680      	mov	r8, r0
 80050c8:	469a      	mov	sl, r3
 80050ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ce:	d807      	bhi.n	80050e0 <_printf_i+0x28>
 80050d0:	2f62      	cmp	r7, #98	; 0x62
 80050d2:	d80a      	bhi.n	80050ea <_printf_i+0x32>
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	f000 80d8 	beq.w	800528a <_printf_i+0x1d2>
 80050da:	2f58      	cmp	r7, #88	; 0x58
 80050dc:	f000 80a3 	beq.w	8005226 <_printf_i+0x16e>
 80050e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050e8:	e03a      	b.n	8005160 <_printf_i+0xa8>
 80050ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ee:	2b15      	cmp	r3, #21
 80050f0:	d8f6      	bhi.n	80050e0 <_printf_i+0x28>
 80050f2:	a001      	add	r0, pc, #4	; (adr r0, 80050f8 <_printf_i+0x40>)
 80050f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005165 	.word	0x08005165
 8005100:	080050e1 	.word	0x080050e1
 8005104:	080050e1 	.word	0x080050e1
 8005108:	080050e1 	.word	0x080050e1
 800510c:	080050e1 	.word	0x080050e1
 8005110:	08005165 	.word	0x08005165
 8005114:	080050e1 	.word	0x080050e1
 8005118:	080050e1 	.word	0x080050e1
 800511c:	080050e1 	.word	0x080050e1
 8005120:	080050e1 	.word	0x080050e1
 8005124:	08005271 	.word	0x08005271
 8005128:	08005195 	.word	0x08005195
 800512c:	08005253 	.word	0x08005253
 8005130:	080050e1 	.word	0x080050e1
 8005134:	080050e1 	.word	0x080050e1
 8005138:	08005293 	.word	0x08005293
 800513c:	080050e1 	.word	0x080050e1
 8005140:	08005195 	.word	0x08005195
 8005144:	080050e1 	.word	0x080050e1
 8005148:	080050e1 	.word	0x080050e1
 800514c:	0800525b 	.word	0x0800525b
 8005150:	680b      	ldr	r3, [r1, #0]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	600a      	str	r2, [r1, #0]
 8005158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800515c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005160:	2301      	movs	r3, #1
 8005162:	e0a3      	b.n	80052ac <_printf_i+0x1f4>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	6808      	ldr	r0, [r1, #0]
 8005168:	062e      	lsls	r6, r5, #24
 800516a:	f100 0304 	add.w	r3, r0, #4
 800516e:	d50a      	bpl.n	8005186 <_printf_i+0xce>
 8005170:	6805      	ldr	r5, [r0, #0]
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	2d00      	cmp	r5, #0
 8005176:	da03      	bge.n	8005180 <_printf_i+0xc8>
 8005178:	232d      	movs	r3, #45	; 0x2d
 800517a:	426d      	negs	r5, r5
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005180:	485e      	ldr	r0, [pc, #376]	; (80052fc <_printf_i+0x244>)
 8005182:	230a      	movs	r3, #10
 8005184:	e019      	b.n	80051ba <_printf_i+0x102>
 8005186:	f015 0f40 	tst.w	r5, #64	; 0x40
 800518a:	6805      	ldr	r5, [r0, #0]
 800518c:	600b      	str	r3, [r1, #0]
 800518e:	bf18      	it	ne
 8005190:	b22d      	sxthne	r5, r5
 8005192:	e7ef      	b.n	8005174 <_printf_i+0xbc>
 8005194:	680b      	ldr	r3, [r1, #0]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	1d18      	adds	r0, r3, #4
 800519a:	6008      	str	r0, [r1, #0]
 800519c:	0628      	lsls	r0, r5, #24
 800519e:	d501      	bpl.n	80051a4 <_printf_i+0xec>
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	e002      	b.n	80051aa <_printf_i+0xf2>
 80051a4:	0669      	lsls	r1, r5, #25
 80051a6:	d5fb      	bpl.n	80051a0 <_printf_i+0xe8>
 80051a8:	881d      	ldrh	r5, [r3, #0]
 80051aa:	4854      	ldr	r0, [pc, #336]	; (80052fc <_printf_i+0x244>)
 80051ac:	2f6f      	cmp	r7, #111	; 0x6f
 80051ae:	bf0c      	ite	eq
 80051b0:	2308      	moveq	r3, #8
 80051b2:	230a      	movne	r3, #10
 80051b4:	2100      	movs	r1, #0
 80051b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ba:	6866      	ldr	r6, [r4, #4]
 80051bc:	60a6      	str	r6, [r4, #8]
 80051be:	2e00      	cmp	r6, #0
 80051c0:	bfa2      	ittt	ge
 80051c2:	6821      	ldrge	r1, [r4, #0]
 80051c4:	f021 0104 	bicge.w	r1, r1, #4
 80051c8:	6021      	strge	r1, [r4, #0]
 80051ca:	b90d      	cbnz	r5, 80051d0 <_printf_i+0x118>
 80051cc:	2e00      	cmp	r6, #0
 80051ce:	d04d      	beq.n	800526c <_printf_i+0x1b4>
 80051d0:	4616      	mov	r6, r2
 80051d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80051d6:	fb03 5711 	mls	r7, r3, r1, r5
 80051da:	5dc7      	ldrb	r7, [r0, r7]
 80051dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e0:	462f      	mov	r7, r5
 80051e2:	42bb      	cmp	r3, r7
 80051e4:	460d      	mov	r5, r1
 80051e6:	d9f4      	bls.n	80051d2 <_printf_i+0x11a>
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d10b      	bne.n	8005204 <_printf_i+0x14c>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	07df      	lsls	r7, r3, #31
 80051f0:	d508      	bpl.n	8005204 <_printf_i+0x14c>
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	6861      	ldr	r1, [r4, #4]
 80051f6:	4299      	cmp	r1, r3
 80051f8:	bfde      	ittt	le
 80051fa:	2330      	movle	r3, #48	; 0x30
 80051fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005200:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005204:	1b92      	subs	r2, r2, r6
 8005206:	6122      	str	r2, [r4, #16]
 8005208:	f8cd a000 	str.w	sl, [sp]
 800520c:	464b      	mov	r3, r9
 800520e:	aa03      	add	r2, sp, #12
 8005210:	4621      	mov	r1, r4
 8005212:	4640      	mov	r0, r8
 8005214:	f7ff fee2 	bl	8004fdc <_printf_common>
 8005218:	3001      	adds	r0, #1
 800521a:	d14c      	bne.n	80052b6 <_printf_i+0x1fe>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005220:	b004      	add	sp, #16
 8005222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005226:	4835      	ldr	r0, [pc, #212]	; (80052fc <_printf_i+0x244>)
 8005228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	680e      	ldr	r6, [r1, #0]
 8005230:	061f      	lsls	r7, r3, #24
 8005232:	f856 5b04 	ldr.w	r5, [r6], #4
 8005236:	600e      	str	r6, [r1, #0]
 8005238:	d514      	bpl.n	8005264 <_printf_i+0x1ac>
 800523a:	07d9      	lsls	r1, r3, #31
 800523c:	bf44      	itt	mi
 800523e:	f043 0320 	orrmi.w	r3, r3, #32
 8005242:	6023      	strmi	r3, [r4, #0]
 8005244:	b91d      	cbnz	r5, 800524e <_printf_i+0x196>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f023 0320 	bic.w	r3, r3, #32
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	2310      	movs	r3, #16
 8005250:	e7b0      	b.n	80051b4 <_printf_i+0xfc>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	f043 0320 	orr.w	r3, r3, #32
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	2378      	movs	r3, #120	; 0x78
 800525c:	4828      	ldr	r0, [pc, #160]	; (8005300 <_printf_i+0x248>)
 800525e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005262:	e7e3      	b.n	800522c <_printf_i+0x174>
 8005264:	065e      	lsls	r6, r3, #25
 8005266:	bf48      	it	mi
 8005268:	b2ad      	uxthmi	r5, r5
 800526a:	e7e6      	b.n	800523a <_printf_i+0x182>
 800526c:	4616      	mov	r6, r2
 800526e:	e7bb      	b.n	80051e8 <_printf_i+0x130>
 8005270:	680b      	ldr	r3, [r1, #0]
 8005272:	6826      	ldr	r6, [r4, #0]
 8005274:	6960      	ldr	r0, [r4, #20]
 8005276:	1d1d      	adds	r5, r3, #4
 8005278:	600d      	str	r5, [r1, #0]
 800527a:	0635      	lsls	r5, r6, #24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	d501      	bpl.n	8005284 <_printf_i+0x1cc>
 8005280:	6018      	str	r0, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0x1d2>
 8005284:	0671      	lsls	r1, r6, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0x1c8>
 8005288:	8018      	strh	r0, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	4616      	mov	r6, r2
 8005290:	e7ba      	b.n	8005208 <_printf_i+0x150>
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	600a      	str	r2, [r1, #0]
 8005298:	681e      	ldr	r6, [r3, #0]
 800529a:	6862      	ldr	r2, [r4, #4]
 800529c:	2100      	movs	r1, #0
 800529e:	4630      	mov	r0, r6
 80052a0:	f7fa ff9e 	bl	80001e0 <memchr>
 80052a4:	b108      	cbz	r0, 80052aa <_printf_i+0x1f2>
 80052a6:	1b80      	subs	r0, r0, r6
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	2300      	movs	r3, #0
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b4:	e7a8      	b.n	8005208 <_printf_i+0x150>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d0ab      	beq.n	800521c <_printf_i+0x164>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	079b      	lsls	r3, r3, #30
 80052c8:	d413      	bmi.n	80052f2 <_printf_i+0x23a>
 80052ca:	68e0      	ldr	r0, [r4, #12]
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	4298      	cmp	r0, r3
 80052d0:	bfb8      	it	lt
 80052d2:	4618      	movlt	r0, r3
 80052d4:	e7a4      	b.n	8005220 <_printf_i+0x168>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4632      	mov	r2, r6
 80052da:	4649      	mov	r1, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	47d0      	blx	sl
 80052e0:	3001      	adds	r0, #1
 80052e2:	d09b      	beq.n	800521c <_printf_i+0x164>
 80052e4:	3501      	adds	r5, #1
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	9903      	ldr	r1, [sp, #12]
 80052ea:	1a5b      	subs	r3, r3, r1
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dcf2      	bgt.n	80052d6 <_printf_i+0x21e>
 80052f0:	e7eb      	b.n	80052ca <_printf_i+0x212>
 80052f2:	2500      	movs	r5, #0
 80052f4:	f104 0619 	add.w	r6, r4, #25
 80052f8:	e7f5      	b.n	80052e6 <_printf_i+0x22e>
 80052fa:	bf00      	nop
 80052fc:	080056d9 	.word	0x080056d9
 8005300:	080056ea 	.word	0x080056ea

08005304 <_sbrk_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4d06      	ldr	r5, [pc, #24]	; (8005320 <_sbrk_r+0x1c>)
 8005308:	2300      	movs	r3, #0
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fc f9ea 	bl	80016e8 <_sbrk>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_sbrk_r+0x1a>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_sbrk_r+0x1a>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000a3c 	.word	0x20000a3c

08005324 <__sread>:
 8005324:	b510      	push	{r4, lr}
 8005326:	460c      	mov	r4, r1
 8005328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532c:	f000 f8ee 	bl	800550c <_read_r>
 8005330:	2800      	cmp	r0, #0
 8005332:	bfab      	itete	ge
 8005334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005336:	89a3      	ldrhlt	r3, [r4, #12]
 8005338:	181b      	addge	r3, r3, r0
 800533a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800533e:	bfac      	ite	ge
 8005340:	6563      	strge	r3, [r4, #84]	; 0x54
 8005342:	81a3      	strhlt	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__swrite>:
 8005346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534a:	461f      	mov	r7, r3
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	05db      	lsls	r3, r3, #23
 8005350:	4605      	mov	r5, r0
 8005352:	460c      	mov	r4, r1
 8005354:	4616      	mov	r6, r2
 8005356:	d505      	bpl.n	8005364 <__swrite+0x1e>
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	2302      	movs	r3, #2
 800535e:	2200      	movs	r2, #0
 8005360:	f000 f868 	bl	8005434 <_lseek_r>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800536a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	4632      	mov	r2, r6
 8005372:	463b      	mov	r3, r7
 8005374:	4628      	mov	r0, r5
 8005376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	f000 b817 	b.w	80053ac <_write_r>

0800537e <__sseek>:
 800537e:	b510      	push	{r4, lr}
 8005380:	460c      	mov	r4, r1
 8005382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005386:	f000 f855 	bl	8005434 <_lseek_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	bf15      	itete	ne
 8005390:	6560      	strne	r0, [r4, #84]	; 0x54
 8005392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800539a:	81a3      	strheq	r3, [r4, #12]
 800539c:	bf18      	it	ne
 800539e:	81a3      	strhne	r3, [r4, #12]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__sclose>:
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 b813 	b.w	80053d0 <_close_r>
	...

080053ac <_write_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d07      	ldr	r5, [pc, #28]	; (80053cc <_write_r+0x20>)
 80053b0:	4604      	mov	r4, r0
 80053b2:	4608      	mov	r0, r1
 80053b4:	4611      	mov	r1, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	602a      	str	r2, [r5, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7fb f95f 	bl	800067e <_write>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_write_r+0x1e>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_write_r+0x1e>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	20000a3c 	.word	0x20000a3c

080053d0 <_close_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d06      	ldr	r5, [pc, #24]	; (80053ec <_close_r+0x1c>)
 80053d4:	2300      	movs	r3, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	f7fc f94f 	bl	800167e <_close>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_close_r+0x1a>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_close_r+0x1a>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000a3c 	.word	0x20000a3c

080053f0 <_fstat_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d07      	ldr	r5, [pc, #28]	; (8005410 <_fstat_r+0x20>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f7fc f94a 	bl	8001696 <_fstat>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d102      	bne.n	800540c <_fstat_r+0x1c>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	b103      	cbz	r3, 800540c <_fstat_r+0x1c>
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	20000a3c 	.word	0x20000a3c

08005414 <_isatty_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d06      	ldr	r5, [pc, #24]	; (8005430 <_isatty_r+0x1c>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fc f949 	bl	80016b6 <_isatty>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_isatty_r+0x1a>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_isatty_r+0x1a>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000a3c 	.word	0x20000a3c

08005434 <_lseek_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	; (8005454 <_lseek_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fc f942 	bl	80016cc <_lseek>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_lseek_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_lseek_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	20000a3c 	.word	0x20000a3c

08005458 <memcpy>:
 8005458:	440a      	add	r2, r1
 800545a:	4291      	cmp	r1, r2
 800545c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005460:	d100      	bne.n	8005464 <memcpy+0xc>
 8005462:	4770      	bx	lr
 8005464:	b510      	push	{r4, lr}
 8005466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800546a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546e:	4291      	cmp	r1, r2
 8005470:	d1f9      	bne.n	8005466 <memcpy+0xe>
 8005472:	bd10      	pop	{r4, pc}

08005474 <memmove>:
 8005474:	4288      	cmp	r0, r1
 8005476:	b510      	push	{r4, lr}
 8005478:	eb01 0402 	add.w	r4, r1, r2
 800547c:	d902      	bls.n	8005484 <memmove+0x10>
 800547e:	4284      	cmp	r4, r0
 8005480:	4623      	mov	r3, r4
 8005482:	d807      	bhi.n	8005494 <memmove+0x20>
 8005484:	1e43      	subs	r3, r0, #1
 8005486:	42a1      	cmp	r1, r4
 8005488:	d008      	beq.n	800549c <memmove+0x28>
 800548a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800548e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005492:	e7f8      	b.n	8005486 <memmove+0x12>
 8005494:	4402      	add	r2, r0
 8005496:	4601      	mov	r1, r0
 8005498:	428a      	cmp	r2, r1
 800549a:	d100      	bne.n	800549e <memmove+0x2a>
 800549c:	bd10      	pop	{r4, pc}
 800549e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054a6:	e7f7      	b.n	8005498 <memmove+0x24>

080054a8 <__malloc_lock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_lock+0x8>)
 80054aa:	f7ff b9d1 	b.w	8004850 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000a34 	.word	0x20000a34

080054b4 <__malloc_unlock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__malloc_unlock+0x8>)
 80054b6:	f7ff b9cc 	b.w	8004852 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000a34 	.word	0x20000a34

080054c0 <_realloc_r>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	4607      	mov	r7, r0
 80054c4:	4614      	mov	r4, r2
 80054c6:	460e      	mov	r6, r1
 80054c8:	b921      	cbnz	r1, 80054d4 <_realloc_r+0x14>
 80054ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054ce:	4611      	mov	r1, r2
 80054d0:	f7ff ba74 	b.w	80049bc <_malloc_r>
 80054d4:	b922      	cbnz	r2, 80054e0 <_realloc_r+0x20>
 80054d6:	f7ff fa21 	bl	800491c <_free_r>
 80054da:	4625      	mov	r5, r4
 80054dc:	4628      	mov	r0, r5
 80054de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e0:	f000 f826 	bl	8005530 <_malloc_usable_size_r>
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d20f      	bcs.n	8005508 <_realloc_r+0x48>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff fa66 	bl	80049bc <_malloc_r>
 80054f0:	4605      	mov	r5, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0f2      	beq.n	80054dc <_realloc_r+0x1c>
 80054f6:	4631      	mov	r1, r6
 80054f8:	4622      	mov	r2, r4
 80054fa:	f7ff ffad 	bl	8005458 <memcpy>
 80054fe:	4631      	mov	r1, r6
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff fa0b 	bl	800491c <_free_r>
 8005506:	e7e9      	b.n	80054dc <_realloc_r+0x1c>
 8005508:	4635      	mov	r5, r6
 800550a:	e7e7      	b.n	80054dc <_realloc_r+0x1c>

0800550c <_read_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_read_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fc f892 	bl	8001644 <_read>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_read_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_read_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000a3c 	.word	0x20000a3c

08005530 <_malloc_usable_size_r>:
 8005530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005534:	1f18      	subs	r0, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	bfbc      	itt	lt
 800553a:	580b      	ldrlt	r3, [r1, r0]
 800553c:	18c0      	addlt	r0, r0, r3
 800553e:	4770      	bx	lr

08005540 <_init>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr

0800554c <_fini>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr
