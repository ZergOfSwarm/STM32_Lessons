
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae3c  0800ae3c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae3c  0800ae3c  0001ae3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ae44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00003388  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003430  20003430  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3a3  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038df  00000000  00000000  0003c47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f58  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dec  00000000  00000000  000673e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39dd  00000000  00000000  000801cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153ba9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f04  00000000  00000000  00153bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8c8 	.word	0x0800a8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800a8c8 	.word	0x0800a8c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ba4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bac:	e000      	b.n	8000bb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <_write+0x48>)
 8000bea:	f004 f88c 	bl	8004d06 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e009      	b.n	8000c08 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc1 	bl	8000b84 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf1      	blt.n	8000bf4 <_write+0x20>
	}
	return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000116c 	.word	0x2000116c

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f000 ff1e 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f830 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f000 f90a 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c30:	f000 f8e0 	bl	8000df4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000c34:	f000 f894 	bl	8000d60 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c38:	f005 f8a2 	bl	8005d80 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000c3c:	f000 f8b0 	bl	8000da0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 zerg_mount();
 8000c40:	f000 fc2e 	bl	80014a0 <zerg_mount>
	 //zerg_format();
	 zerg_creat_folder(*folder_name);
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <main+0x60>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fd50 	bl	80016f0 <zerg_creat_folder>
	 zerg_open();
 8000c50:	f000 fc42 	bl	80014d8 <zerg_open>
	 zerg_write();
 8000c54:	f000 fc60 	bl	8001518 <zerg_write>
	 zerg_read();
 8000c58:	f000 fc96 	bl	8001588 <zerg_read>
	 zerg_add_data();
 8000c5c:	f000 fcd4 	bl	8001608 <zerg_add_data>
	 zerg_get_free_space(); // Узнаем свободное место до удаления
 8000c60:	f000 fdf0 	bl	8001844 <zerg_get_free_space>
	 zerg_scan_files(path);    // НЕ ВИДИТ ФАЙЛЫ!!!, РАЗБЕРИСЬ!!!
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <main+0x64>)
 8000c66:	f000 fd67 	bl	8001738 <zerg_scan_files>
	 //zerg_delete(folder_name); // Удаляем папку "folder_name" или файл "name"
	 zerg_get_free_space(); // Узнаем свободное место после удаления
 8000c6a:	f000 fdeb 	bl	8001844 <zerg_get_free_space>
	 zerg_get_file_info(name);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <main+0x68>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fe3e 	bl	80018f4 <zerg_get_file_info>
	 zerg_ummount(path);    // НЕ РАБОТАЕТ, РАЗБЕРИСЬ!!!
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <main+0x64>)
 8000c7a:	f000 fdc3 	bl	8001804 <zerg_ummount>

	while (1) {
 8000c7e:	e7fe      	b.n	8000c7e <main+0x5e>
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000014 	.word	0x20000014

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	; 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	; 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fc6e 	bl	800957c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d00:	23a8      	movs	r3, #168	; 0xa8
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fd29 	bl	8002768 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d1c:	f000 f8e8 	bl	8000ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2302      	movs	r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 ff8a 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d4a:	f000 f8d1 	bl	8000ef0 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	; 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <MX_SDIO_SD_Init+0x3c>)
 8000d68:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <MX_SDIO_SD_Init+0x38>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20001210 	.word	0x20001210
 8000d9c:	40012c00 	.word	0x40012c00

08000da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f003 ff48 	bl	8004c6c <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 f885 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000116c 	.word	0x2000116c
 8000df0:	40011000 	.word	0x40011000

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	203b      	movs	r0, #59	; 0x3b
 8000e1c:	f000 ff40 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e20:	203b      	movs	r0, #59	; 0x3b
 8000e22:	f000 ff59 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2045      	movs	r0, #69	; 0x45
 8000e2c:	f000 ff38 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e30:	2045      	movs	r0, #69	; 0x45
 8000e32:	f000 ff51 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x84>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ede:	f000 fde3 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40002000 	.word	0x40002000

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a70      	ldr	r2, [pc, #448]	; (800112c <HAL_SD_MspInit+0x1e0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 80da 	bne.w	8001124 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	4a6d      	ldr	r2, [pc, #436]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b67      	ldr	r3, [pc, #412]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a66      	ldr	r2, [pc, #408]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	4b60      	ldr	r3, [pc, #384]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a5f      	ldr	r2, [pc, #380]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_SD_MspInit+0x1e4>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fc4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4854      	ldr	r0, [pc, #336]	; (8001134 <HAL_SD_MspInit+0x1e8>)
 8000fe2:	f001 fa25 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	484c      	ldr	r0, [pc, #304]	; (8001134 <HAL_SD_MspInit+0x1e8>)
 8001004:	f001 fa14 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001008:	2304      	movs	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001018:	230c      	movs	r3, #12
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4845      	ldr	r0, [pc, #276]	; (8001138 <HAL_SD_MspInit+0x1ec>)
 8001024:	f001 fa04 	bl	8002430 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001028:	4b44      	ldr	r3, [pc, #272]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800102a:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_SD_MspInit+0x1f4>)
 800102c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800102e:	4b43      	ldr	r3, [pc, #268]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001034:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b3f      	ldr	r3, [pc, #252]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b3e      	ldr	r3, [pc, #248]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001048:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800104c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001050:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001058:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800105c:	2220      	movs	r2, #32
 800105e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001060:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001066:	4b35      	ldr	r3, [pc, #212]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001068:	2204      	movs	r2, #4
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800106c:	4b33      	ldr	r3, [pc, #204]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800106e:	2203      	movs	r2, #3
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001072:	4b32      	ldr	r3, [pc, #200]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001074:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800107c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001082:	482e      	ldr	r0, [pc, #184]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001084:	f000 fe36 	bl	8001cf4 <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800108e:	f7ff ff2f 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_SD_MspInit+0x1f0>)
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <HAL_SD_MspInit+0x1f0>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010a0:	4a29      	ldr	r2, [pc, #164]	; (8001148 <HAL_SD_MspInit+0x1fc>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010be:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010d2:	2220      	movs	r2, #32
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010de:	2204      	movs	r2, #4
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010e4:	2203      	movs	r2, #3
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 80010fa:	f000 fdfb 	bl	8001cf4 <HAL_DMA_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001104:	f7ff fef4 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_SD_MspInit+0x1f8>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2031      	movs	r0, #49	; 0x31
 800111a:	f000 fdc1 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800111e:	2031      	movs	r0, #49	; 0x31
 8001120:	f000 fdda 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	2000110c 	.word	0x2000110c
 8001140:	40026458 	.word	0x40026458
 8001144:	200011b0 	.word	0x200011b0
 8001148:	400264a0 	.word	0x400264a0

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_UART_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b8:	2307      	movs	r3, #7
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 80011c4:	f001 f934 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	202d      	movs	r0, #45	; 0x2d
 80011f2:	f000 fd55 	bl	8001ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011f6:	202d      	movs	r0, #45	; 0x2d
 80011f8:	f000 fd6e 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_InitTick+0xa4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_InitTick+0xa4>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_InitTick+0xa4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001218:	f107 0210 	add.w	r2, r7, #16
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 ff14 	bl	8003050 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001228:	f001 feea 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_InitTick+0xa8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3b01      	subs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_InitTick+0xac>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_InitTick+0xb0>)
 8001244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_InitTick+0xac>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_InitTick+0xac>)
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_InitTick+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_InitTick+0xac>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_InitTick+0xac>)
 8001262:	f003 fa56 	bl	8004712 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d104      	bne.n	8001276 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <HAL_InitTick+0xac>)
 800126e:	f003 faa9 	bl	80047c4 <HAL_TIM_Base_Start_IT>
 8001272:	4603      	mov	r3, r0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	431bde83 	.word	0x431bde83
 8001288:	20001294 	.word	0x20001294
 800128c:	40002000 	.word	0x40002000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012ee:	f003 fad9 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20001294 	.word	0x20001294

080012fc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <SDIO_IRQHandler+0x10>)
 8001302:	f002 f94d 	bl	80035a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001210 	.word	0x20001210

08001310 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA2_Stream3_IRQHandler+0x10>)
 8001316:	f000 fe15 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000110c 	.word	0x2000110c

08001324 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream6_IRQHandler+0x10>)
 800132a:	f000 fe0b 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200011b0 	.word	0x200011b0

08001338 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
	}

return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f008 f88c 	bl	8009528 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	200000c4 	.word	0x200000c4
 8001444:	20003430 	.word	0x20003430

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <clear_buffer>:
uint32_t total, free_space;

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e007      	b.n	8001488 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <clear_buffer+0x30>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b63      	cmp	r3, #99	; 0x63
 800148c:	ddf4      	ble.n	8001478 <clear_buffer+0xc>
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	200000c8 	.word	0x200000c8

080014a0 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80014a4:	2200      	movs	r2, #0
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <zerg_mount+0x28>)
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <zerg_mount+0x2c>)
 80014aa:	f006 fd65 	bl	8007f78 <f_mount>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <zerg_mount+0x1c>
	{
		printf("Error Mounting SD Card\r\n");
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <zerg_mount+0x30>)
 80014b6:	f008 f8ef 	bl	8009698 <puts>
	}
	else
	{
		printf("SD card mounted successfully!\r\n");
	}
}
 80014ba:	e002      	b.n	80014c2 <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <zerg_mount+0x34>)
 80014be:	f008 f8eb 	bl	8009698 <puts>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200013b8 	.word	0x200013b8
 80014cc:	200023ec 	.word	0x200023ec
 80014d0:	0800a8f8 	.word	0x0800a8f8
 80014d4:	0800a910 	.word	0x0800a910

080014d8 <zerg_open>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*)name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <zerg_open+0x30>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	220a      	movs	r2, #10
 80014e2:	4619      	mov	r1, r3
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <zerg_open+0x34>)
 80014e6:	f006 fd8d 	bl	8008004 <f_open>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <zerg_open+0x20>
	{
		printf("Error openning file\r\n");
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <zerg_open+0x38>)
 80014f2:	f008 f8d1 	bl	8009698 <puts>
	}
	else
	{
		printf("File %s Openned Successfully!\r\n",name);
	}
}
 80014f6:	e005      	b.n	8001504 <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n",name);
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <zerg_open+0x30>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <zerg_open+0x3c>)
 8001500:	f008 f844 	bl	800958c <iprintf>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000014 	.word	0x20000014
 800150c:	200013bc 	.word	0x200013bc
 8001510:	0800a96c 	.word	0x0800a96c
 8001514:	0800a984 	.word	0x0800a984

08001518 <zerg_write>:
/*--------------------------------------------------------------------------------------------------------------*/
// Запись данных в файл / Write data to the text file
void zerg_write(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	res = f_write(&SDFile, wtext, strlen((char *)wtext),
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <zerg_write+0x58>)
 800151e:	f7fe fe57 	bl	80001d0 <strlen>
 8001522:	4602      	mov	r2, r0
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <zerg_write+0x5c>)
 8001526:	4912      	ldr	r1, [pc, #72]	; (8001570 <zerg_write+0x58>)
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <zerg_write+0x60>)
 800152a:	f007 f896 	bl	800865a <f_write>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <zerg_write+0x64>)
 8001534:	701a      	strb	r2, [r3, #0]
				  (void *)&byteswritten);
	if ((byteswritten == 0) || (res != FR_OK))
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <zerg_write+0x5c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <zerg_write+0x2e>
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <zerg_write+0x64>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <zerg_write+0x40>
	{
		printf("Failed to write file!\r\n");
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <zerg_write+0x68>)
 8001548:	f008 f8a6 	bl	8009698 <puts>
		f_close(&SDFile);
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <zerg_write+0x60>)
 800154e:	f007 fa96 	bl	8008a7e <f_close>
		clear_buffer();
 8001552:	f7ff ff8b 	bl	800146c <clear_buffer>
 8001556:	e008      	b.n	800156a <zerg_write+0x52>
	}
	else
	{
		printf("File written successfully\r\n");
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <zerg_write+0x6c>)
 800155a:	f008 f89d 	bl	8009698 <puts>
		f_close(&SDFile);
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <zerg_write+0x60>)
 8001560:	f007 fa8d 	bl	8008a7e <f_close>
		clear_buffer();
 8001564:	f7ff ff82 	bl	800146c <clear_buffer>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000020 	.word	0x20000020
 8001574:	200012e0 	.word	0x200012e0
 8001578:	200013bc 	.word	0x200013bc
 800157c:	200013ac 	.word	0x200013ac
 8001580:	0800a9a4 	.word	0x0800a9a4
 8001584:	0800a9bc 	.word	0x0800a9bc

08001588 <zerg_read>:
/*--------------------------------------------------------------------------------------------------------------*/
// Считываем данные из файла / Reading data from file
void zerg_read(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	f_open(&SDFile, (char*)name, FA_READ);
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <zerg_read+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <zerg_read+0x68>)
 8001596:	f006 fd35 	bl	8008004 <f_open>
	memset(rtext, 0, sizeof(rtext));
 800159a:	2264      	movs	r2, #100	; 0x64
 800159c:	2100      	movs	r1, #0
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <zerg_read+0x6c>)
 80015a0:	f007 ffec 	bl	800957c <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT *)&bytesread);
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <zerg_read+0x70>)
 80015a6:	2264      	movs	r2, #100	; 0x64
 80015a8:	4912      	ldr	r1, [pc, #72]	; (80015f4 <zerg_read+0x6c>)
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <zerg_read+0x68>)
 80015ac:	f006 fef6 	bl	800839c <f_read>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <zerg_read+0x74>)
 80015b6:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK))
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <zerg_read+0x70>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <zerg_read+0x40>
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <zerg_read+0x74>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <zerg_read+0x48>
	{
		printf("Failed to read file!\r\n");
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <zerg_read+0x78>)
 80015ca:	f008 f865 	bl	8009698 <puts>
 80015ce:	e006      	b.n	80015de <zerg_read+0x56>
	}
	else
	{
		//printf("File *%s* readed successfully! \n", name);
		printf("File *%s* has content it is; %s\r\n",name, (char *)rtext);
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <zerg_read+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <zerg_read+0x6c>)
 80015d6:	4619      	mov	r1, r3
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <zerg_read+0x7c>)
 80015da:	f007 ffd7 	bl	800958c <iprintf>
	}
	f_close(&SDFile);
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <zerg_read+0x68>)
 80015e0:	f007 fa4d 	bl	8008a7e <f_close>
	clear_buffer();
 80015e4:	f7ff ff42 	bl	800146c <clear_buffer>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000014 	.word	0x20000014
 80015f0:	200013bc 	.word	0x200013bc
 80015f4:	2000130c 	.word	0x2000130c
 80015f8:	200012e8 	.word	0x200012e8
 80015fc:	200013ac 	.word	0x200013ac
 8001600:	0800a9d8 	.word	0x0800a9d8
 8001604:	0800a9f0 	.word	0x0800a9f0

08001608 <zerg_add_data>:
//		return i;
//	}
/*--------------------------------------------------------------------------------------------------------------*/
// Дописываем данные в существующий файл / Adding data to an existing file
void zerg_add_data(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, (char*)name, FA_OPEN_APPEND | FA_WRITE);
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <zerg_add_data+0xc4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	4619      	mov	r1, r3
 8001616:	482e      	ldr	r0, [pc, #184]	; (80016d0 <zerg_add_data+0xc8>)
 8001618:	f006 fcf4 	bl	8008004 <f_open>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <zerg_add_data+0xcc>)
 8001622:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <zerg_add_data+0xcc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <zerg_add_data+0x38>
	{
		printf("Error no %d in opening file *%s*\n", res, name);
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <zerg_add_data+0xcc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <zerg_add_data+0xc4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4827      	ldr	r0, [pc, #156]	; (80016d8 <zerg_add_data+0xd0>)
 800163a:	f007 ffa7 	bl	800958c <iprintf>
 800163e:	e005      	b.n	800164c <zerg_add_data+0x44>
	}
	else
	{
		printf("File *%s* is opened. Now we will add same information! \n", name);
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <zerg_add_data+0xc4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4825      	ldr	r0, [pc, #148]	; (80016dc <zerg_add_data+0xd4>)
 8001648:	f007 ffa0 	bl	800958c <iprintf>
	}
	int len = f_size(&SDFile);
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <zerg_add_data+0xc8>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	607b      	str	r3, [r7, #4]
	if (len != 0)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <zerg_add_data+0x56>
		len += 2;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3302      	adds	r3, #2
 800165c:	607b      	str	r3, [r7, #4]
	f_lseek(&SDFile, len);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4619      	mov	r1, r3
 8001662:	481b      	ldr	r0, [pc, #108]	; (80016d0 <zerg_add_data+0xc8>)
 8001664:	f007 fa35 	bl	8008ad2 <f_lseek>
	res = f_write(&SDFile, addtext, sizeof(addtext), (void *)&byteswritten);
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <zerg_add_data+0xd8>)
 800166a:	2210      	movs	r2, #16
 800166c:	491d      	ldr	r1, [pc, #116]	; (80016e4 <zerg_add_data+0xdc>)
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <zerg_add_data+0xc8>)
 8001670:	f006 fff3 	bl	800865a <f_write>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <zerg_add_data+0xcc>)
 800167a:	701a      	strb	r2, [r3, #0]
	if ((byteswritten > 0) && (res == FR_OK))
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <zerg_add_data+0xd8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <zerg_add_data+0x88>
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <zerg_add_data+0xcc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <zerg_add_data+0x88>

		clear_buffer();
 800168c:	f7ff feee 	bl	800146c <clear_buffer>
	{
		printf("Information was added successfully in %s\n", name);
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <zerg_add_data+0xc4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <zerg_add_data+0xe0>)
 8001698:	f007 ff78 	bl	800958c <iprintf>
	}
	/* Close file */
	res = f_close(&SDFile);
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <zerg_add_data+0xc8>)
 800169e:	f007 f9ee 	bl	8008a7e <f_close>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <zerg_add_data+0xcc>)
 80016a8:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <zerg_add_data+0xcc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <zerg_add_data+0xbc>
	{
		printf("Error no %d in closing file *%s*\n", res, name);
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <zerg_add_data+0xcc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <zerg_add_data+0xc4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <zerg_add_data+0xe4>)
 80016c0:	f007 ff64 	bl	800958c <iprintf>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000014 	.word	0x20000014
 80016d0:	200013bc 	.word	0x200013bc
 80016d4:	200013ac 	.word	0x200013ac
 80016d8:	0800aa14 	.word	0x0800aa14
 80016dc:	0800aa38 	.word	0x0800aa38
 80016e0:	200012e0 	.word	0x200012e0
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	0800aa74 	.word	0x0800aa74
 80016ec:	0800aaa0 	.word	0x0800aaa0

080016f0 <zerg_creat_folder>:
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем папку / Creating a folder
void zerg_creat_folder(char *folder_name)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	res = f_mkdir((char*)folder_name);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f007 fdac 	bl	8009256 <f_mkdir>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <zerg_creat_folder+0x3c>)
 8001704:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <zerg_creat_folder+0x3c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <zerg_creat_folder+0x28>
	{
		printf("Folder %s has been created successfully \n", folder_name);
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <zerg_creat_folder+0x40>)
 8001712:	f007 ff3b 	bl	800958c <iprintf>
	else
	{
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
		// send_uart(buffer);
	}
}
 8001716:	e005      	b.n	8001724 <zerg_creat_folder+0x34>
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <zerg_creat_folder+0x3c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <zerg_creat_folder+0x44>)
 8001720:	f007 ff34 	bl	800958c <iprintf>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200013ac 	.word	0x200013ac
 8001730:	0800aac4 	.word	0x0800aac4
 8001734:	0800aaf0 	.word	0x0800aaf0

08001738 <zerg_scan_files>:
//		//f_closedir(&dir);
//	}
//	return res;
//}

FRESULT zerg_scan_files (char *pat){
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    fileinfo.lfname = lfn;
    fileinfo.lfsize = sizeof lfn;
#endif


    res = f_opendir(&dir, path);                       /* Open the directory */
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	482a      	ldr	r0, [pc, #168]	; (80017ec <zerg_scan_files+0xb4>)
 8001744:	f007 fbe9 	bl	8008f1a <f_opendir>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <zerg_scan_files+0xb8>)
 800174e:	701a      	strb	r2, [r3, #0]
    if (res == FR_OK) {
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <zerg_scan_files+0xb8>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d142      	bne.n	80017de <zerg_scan_files+0xa6>
        i = strlen(path);
 8001758:	6978      	ldr	r0, [r7, #20]
 800175a:	f7fe fd39 	bl	80001d0 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	613b      	str	r3, [r7, #16]
        for (;;) {
            res = f_readdir(&dir, &fileinfo);                   /* Read a directory item */
 8001762:	4924      	ldr	r1, [pc, #144]	; (80017f4 <zerg_scan_files+0xbc>)
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <zerg_scan_files+0xb4>)
 8001766:	f007 fc4b 	bl	8009000 <f_readdir>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <zerg_scan_files+0xb8>)
 8001770:	701a      	strb	r2, [r3, #0]
            if (res != FR_OK || fileinfo.fname[0] == 0) break;  /* Break on error or end of dir */
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <zerg_scan_files+0xb8>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d131      	bne.n	80017de <zerg_scan_files+0xa6>
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <zerg_scan_files+0xbc>)
 800177c:	7a5b      	ldrb	r3, [r3, #9]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d02d      	beq.n	80017de <zerg_scan_files+0xa6>
            if (fileinfo.fname[0] == '.') continue;             /* Ignore dot entry */
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <zerg_scan_files+0xbc>)
 8001784:	7a5b      	ldrb	r3, [r3, #9]
 8001786:	2b2e      	cmp	r3, #46	; 0x2e
 8001788:	d026      	beq.n	80017d8 <zerg_scan_files+0xa0>
#if _USE_LFN
            fn = *fileinfo.lfname ? fileinfo.lfname : fileinfo.fname;
#else
            fn = fileinfo.fname;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <zerg_scan_files+0xc0>)
 800178c:	60fb      	str	r3, [r7, #12]
#endif
            if (fileinfo.fattrib & AM_DIR) {                    /* It is a directory */
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <zerg_scan_files+0xbc>)
 8001790:	7a1b      	ldrb	r3, [r3, #8]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d018      	beq.n	80017cc <zerg_scan_files+0x94>
                sprintf(&path[i], "/%s", fn);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4916      	ldr	r1, [pc, #88]	; (80017fc <zerg_scan_files+0xc4>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f007 ff7f 	bl	80096a8 <siprintf>
                res = zerg_scan_files(path);
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ffc4 	bl	8001738 <zerg_scan_files>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <zerg_scan_files+0xb8>)
 80017b6:	701a      	strb	r2, [r3, #0]
                if (res != FR_OK) break;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <zerg_scan_files+0xb8>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10d      	bne.n	80017dc <zerg_scan_files+0xa4>
                path[i] = 0;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4413      	add	r3, r2
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e7ca      	b.n	8001762 <zerg_scan_files+0x2a>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fn);
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6979      	ldr	r1, [r7, #20]
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <zerg_scan_files+0xc8>)
 80017d2:	f007 fedb 	bl	800958c <iprintf>
 80017d6:	e7c4      	b.n	8001762 <zerg_scan_files+0x2a>
            if (fileinfo.fname[0] == '.') continue;             /* Ignore dot entry */
 80017d8:	bf00      	nop
            res = f_readdir(&dir, &fileinfo);                   /* Read a directory item */
 80017da:	e7c2      	b.n	8001762 <zerg_scan_files+0x2a>
                if (res != FR_OK) break;
 80017dc:	bf00      	nop
            }
        }
    }

    return res;
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <zerg_scan_files+0xb8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20001374 	.word	0x20001374
 80017f0:	200013ac 	.word	0x200013ac
 80017f4:	200012f4 	.word	0x200012f4
 80017f8:	200012fd 	.word	0x200012fd
 80017fc:	0800ab28 	.word	0x0800ab28
 8001800:	0800ab2c 	.word	0x0800ab2c

08001804 <zerg_ummount>:


/*--------------------------------------------------------------------------------------------------------------*/
// Отмантируем SD карту / Ummount the SD card
void zerg_ummount(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	res = f_mount(&SDFatFS, (TCHAR const *)NULL, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <zerg_ummount+0x30>)
 800180e:	f006 fbb3 	bl	8007f78 <f_mount>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <zerg_ummount+0x34>)
 8001818:	701a      	strb	r2, [r3, #0]
	// if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
	if (res == FR_OK)
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <zerg_ummount+0x34>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <zerg_ummount+0x26>
		printf("SD CARD UNMOUNTED successfully...\n");
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <zerg_ummount+0x38>)
 8001824:	f007 ff38 	bl	8009698 <puts>
	else
		printf("Error!!! in UNMOUNTING SD CARD\n");
}
 8001828:	e002      	b.n	8001830 <zerg_ummount+0x2c>
		printf("Error!!! in UNMOUNTING SD CARD\n");
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <zerg_ummount+0x3c>)
 800182c:	f007 ff34 	bl	8009698 <puts>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200023ec 	.word	0x200023ec
 8001838:	200013ac 	.word	0x200013ac
 800183c:	0800ab34 	.word	0x0800ab34
 8001840:	0800ab58 	.word	0x0800ab58

08001844 <zerg_get_free_space>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Узнать количество свободного места на SD карте / Check free space
void zerg_get_free_space(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <zerg_get_free_space+0x90>)
 800184a:	4923      	ldr	r1, [pc, #140]	; (80018d8 <zerg_get_free_space+0x94>)
 800184c:	4823      	ldr	r0, [pc, #140]	; (80018dc <zerg_get_free_space+0x98>)
 800184e:	f007 fc4d 	bl	80090ec <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <zerg_get_free_space+0x90>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	3b02      	subs	r3, #2
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <zerg_get_free_space+0x90>)
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	8952      	ldrh	r2, [r2, #10]
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe ff77 	bl	8000758 <__aeabi_ui2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <zerg_get_free_space+0x9c>)
 8001870:	f7fe fd06 	bl	8000280 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7fe ffe6 	bl	800084c <__aeabi_d2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <zerg_get_free_space+0xa0>)
 8001884:	6013      	str	r3, [r2, #0]
	printf("SD CARD Total Size: \t%lu\n", total);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <zerg_get_free_space+0xa0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <zerg_get_free_space+0xa4>)
 800188e:	f007 fe7d 	bl	800958c <iprintf>
	// send_uart(buffer);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <zerg_get_free_space+0x90>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	895b      	ldrh	r3, [r3, #10]
 8001898:	461a      	mov	r2, r3
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <zerg_get_free_space+0x94>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fb03 f302 	mul.w	r3, r3, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff58 	bl	8000758 <__aeabi_ui2d>
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <zerg_get_free_space+0x9c>)
 80018ae:	f7fe fce7 	bl	8000280 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <zerg_get_free_space+0xa8>)
 80018c2:	6013      	str	r3, [r2, #0]
	printf("SD CARD Free Space: \t%lu\n", free_space);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <zerg_get_free_space+0xa8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <zerg_get_free_space+0xac>)
 80018cc:	f007 fe5e 	bl	800958c <iprintf>
	// send_uart(buffer);
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200013a4 	.word	0x200013a4
 80018d8:	200012dc 	.word	0x200012dc
 80018dc:	0800abc8 	.word	0x0800abc8
 80018e0:	3fe00000 	.word	0x3fe00000
 80018e4:	200013a8 	.word	0x200013a8
 80018e8:	0800abcc 	.word	0x0800abcc
 80018ec:	200012f0 	.word	0x200012f0
 80018f0:	0800abe8 	.word	0x0800abe8

080018f4 <zerg_get_file_info>:
/*--------------------------------------------------------------------------------------------------------------*/
// Получить сведения о файле / Get file Information
void zerg_get_file_info(char *name)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
	res = f_stat(name, &fileinfo);
 80018fc:	493d      	ldr	r1, [pc, #244]	; (80019f4 <zerg_get_file_info+0x100>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f007 fbbb 	bl	800907a <f_stat>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <zerg_get_file_info+0x104>)
 800190a:	701a      	strb	r2, [r3, #0]
	switch (res)
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <zerg_get_file_info+0x104>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <zerg_get_file_info+0x26>
 8001914:	2b04      	cmp	r3, #4
 8001916:	d05d      	beq.n	80019d4 <zerg_get_file_info+0xe0>
 8001918:	e061      	b.n	80019de <zerg_get_file_info+0xea>
	{
	case FR_OK:

		printf("Below are the details of the *%s* \nSize: %lu\n", name, fileinfo.fsize);
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <zerg_get_file_info+0x100>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4836      	ldr	r0, [pc, #216]	; (80019fc <zerg_get_file_info+0x108>)
 8001924:	f007 fe32 	bl	800958c <iprintf>
		// send_uart(buffer);
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <zerg_get_file_info+0x100>)
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	0a5b      	lsrs	r3, r3, #9
 800192e:	b29b      	uxth	r3, r3
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001930:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <zerg_get_file_info+0x100>)
 8001936:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b29b      	uxth	r3, r3
 800193c:	f003 020f 	and.w	r2, r3, #15
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <zerg_get_file_info+0x100>)
 8001942:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001944:	f003 001f 	and.w	r0, r3, #31
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <zerg_get_file_info+0x100>)
 800194a:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800194c:	0adb      	lsrs	r3, r3, #11
 800194e:	b29b      	uxth	r3, r3
 8001950:	461c      	mov	r4, r3
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <zerg_get_file_info+0x100>)
 8001954:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b29b      	uxth	r3, r3
 800195a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	9400      	str	r4, [sp, #0]
 8001962:	4603      	mov	r3, r0
 8001964:	4826      	ldr	r0, [pc, #152]	; (8001a00 <zerg_get_file_info+0x10c>)
 8001966:	f007 fe11 	bl	800958c <iprintf>
		// end_uart(buffer);
		printf("Attributes: %c%c%c%c%c\n",
			   (fileinfo.fattrib & AM_DIR) ? 'D' : '-',
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <zerg_get_file_info+0x100>)
 800196c:	7a1b      	ldrb	r3, [r3, #8]
 800196e:	f003 0310 	and.w	r3, r3, #16
		printf("Attributes: %c%c%c%c%c\n",
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <zerg_get_file_info+0x86>
 8001976:	2144      	movs	r1, #68	; 0x44
 8001978:	e000      	b.n	800197c <zerg_get_file_info+0x88>
 800197a:	212d      	movs	r1, #45	; 0x2d
			   (fileinfo.fattrib & AM_RDO) ? 'R' : '-',
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <zerg_get_file_info+0x100>)
 800197e:	7a1b      	ldrb	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
		printf("Attributes: %c%c%c%c%c\n",
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <zerg_get_file_info+0x98>
 8001988:	2052      	movs	r0, #82	; 0x52
 800198a:	e000      	b.n	800198e <zerg_get_file_info+0x9a>
 800198c:	202d      	movs	r0, #45	; 0x2d
			   (fileinfo.fattrib & AM_HID) ? 'H' : '-',
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <zerg_get_file_info+0x100>)
 8001990:	7a1b      	ldrb	r3, [r3, #8]
 8001992:	f003 0302 	and.w	r3, r3, #2
		printf("Attributes: %c%c%c%c%c\n",
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <zerg_get_file_info+0xaa>
 800199a:	2448      	movs	r4, #72	; 0x48
 800199c:	e000      	b.n	80019a0 <zerg_get_file_info+0xac>
 800199e:	242d      	movs	r4, #45	; 0x2d
			   (fileinfo.fattrib & AM_SYS) ? 'S' : '-',
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <zerg_get_file_info+0x100>)
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	f003 0304 	and.w	r3, r3, #4
		printf("Attributes: %c%c%c%c%c\n",
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <zerg_get_file_info+0xbc>
 80019ac:	2353      	movs	r3, #83	; 0x53
 80019ae:	e000      	b.n	80019b2 <zerg_get_file_info+0xbe>
 80019b0:	232d      	movs	r3, #45	; 0x2d
			   (fileinfo.fattrib & AM_ARC) ? 'A' : '-');
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <zerg_get_file_info+0x100>)
 80019b4:	7a12      	ldrb	r2, [r2, #8]
 80019b6:	f002 0220 	and.w	r2, r2, #32
		printf("Attributes: %c%c%c%c%c\n",
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d001      	beq.n	80019c2 <zerg_get_file_info+0xce>
 80019be:	2241      	movs	r2, #65	; 0x41
 80019c0:	e000      	b.n	80019c4 <zerg_get_file_info+0xd0>
 80019c2:	222d      	movs	r2, #45	; 0x2d
 80019c4:	9201      	str	r2, [sp, #4]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4623      	mov	r3, r4
 80019ca:	4602      	mov	r2, r0
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <zerg_get_file_info+0x110>)
 80019ce:	f007 fddd 	bl	800958c <iprintf>
		// send_uart(buffer);
		break;
 80019d2:	e00b      	b.n	80019ec <zerg_get_file_info+0xf8>

	case FR_NO_FILE:
		printf("*%s* does not exist.\n", name);
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <zerg_get_file_info+0x114>)
 80019d8:	f007 fdd8 	bl	800958c <iprintf>
		// send_uart(buffer);
		break;
 80019dc:	e006      	b.n	80019ec <zerg_get_file_info+0xf8>

	default:
		printf("An error occurred. (%d)\n", res);
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <zerg_get_file_info+0x104>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <zerg_get_file_info+0x118>)
 80019e6:	f007 fdd1 	bl	800958c <iprintf>
		// send_uart(buffer);
	}
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	200012f4 	.word	0x200012f4
 80019f8:	200013ac 	.word	0x200013ac
 80019fc:	0800ac04 	.word	0x0800ac04
 8001a00:	0800ac34 	.word	0x0800ac34
 8001a04:	0800ac58 	.word	0x0800ac58
 8001a08:	0800ac70 	.word	0x0800ac70
 8001a0c:	0800ac88 	.word	0x0800ac88

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff fd05 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f007 fd79 	bl	8009534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff f8ed 	bl	8000c20 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001a54:	0800ae44 	.word	0x0800ae44
  ldr r2, =_sbss
 8001a58:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001a5c:	20003430 	.word	0x20003430

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8fc 	bl	8001c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f7ff fba2 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fa30 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000040 	.word	0x20000040
 8001acc:	200013b0 	.word	0x200013b0

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200013b0 	.word	0x200013b0

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000040 	.word	0x20000040

08001b30 <__NVIC_SetPriorityGrouping>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff4c 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb2:	f7ff ff61 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7ff ffb1 	bl	8001c24 <NVIC_EncodePriority>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff80 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff54 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fee6 	bl	8001ad0 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e099      	b.n	8001e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d30:	e00f      	b.n	8001d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d32:	f7ff fecd 	bl	8001ad0 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d908      	bls.n	8001d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e078      	b.n	8001e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e8      	bne.n	8001d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_DMA_Init+0x158>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4313      	orrs	r3, r2
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0307 	bic.w	r3, r3, #7
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d117      	bne.n	8001e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa9d 	bl	8002338 <DMA_CheckFifoParam>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e12:	2301      	movs	r3, #1
 8001e14:	e016      	b.n	8001e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa54 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	f010803f 	.word	0xf010803f

08001e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Start_IT+0x26>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e040      	b.n	8001ef8 <HAL_DMA_Start_IT+0xa8>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d12f      	bne.n	8001eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f9e6 	bl	8002270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	223f      	movs	r2, #63	; 0x3f
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0216 	orr.w	r2, r2, #22
 8001ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e005      	b.n	8001ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d004      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00c      	b.n	8001f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2205      	movs	r2, #5
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_DMA_IRQHandler+0x258>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a92      	ldr	r2, [pc, #584]	; (80021a0 <HAL_DMA_IRQHandler+0x25c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2208      	movs	r2, #8
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2204      	movs	r2, #4
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2210      	movs	r2, #16
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2210      	movs	r2, #16
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e01f      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e016      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2220      	movs	r2, #32
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808e 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8086 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2220      	movs	r2, #32
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d136      	bne.n	800215c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_IRQHandler+0x1da>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	223f      	movs	r2, #63	; 0x3f
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07d      	beq.n	800224e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
        }
        return;
 800215a:	e078      	b.n	800224e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01c      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	2b00      	cmp	r3, #0
 800217e:	d030      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e02b      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d027      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e022      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
 800219c:	2000001c 	.word	0x2000001c
 80021a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0210 	bic.w	r2, r2, #16
 80021c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d032      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d022      	beq.n	800223c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d307      	bcc.n	800222a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_DMA_IRQHandler+0x2ca>
 8002228:	e000      	b.n	800222c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800222a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e000      	b.n	8002250 <HAL_DMA_IRQHandler+0x30c>
        return;
 800224e:	bf00      	nop
    }
  }
}
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800228c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d108      	bne.n	80022b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ae:	e007      	b.n	80022c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800ad00 	.word	0x0800ad00

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e16b      	b.n	8002724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 815a 	bne.w	800271e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80b4 	beq.w	800271e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_GPIO_Init+0x30c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_GPIO_Init+0x30c>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_GPIO_Init+0x30c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a5b      	ldr	r2, [pc, #364]	; (8002740 <HAL_GPIO_Init+0x310>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_GPIO_Init+0x314>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_GPIO_Init+0x226>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_GPIO_Init+0x318>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x222>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a50      	ldr	r2, [pc, #320]	; (800274c <HAL_GPIO_Init+0x31c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x21e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_GPIO_Init+0x320>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_GPIO_Init+0x324>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_GPIO_Init+0x328>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_GPIO_Init+0x32c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_GPIO_Init+0x330>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x20a>
 8002636:	2307      	movs	r3, #7
 8002638:	e00e      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800263a:	2308      	movs	r3, #8
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800263e:	2306      	movs	r3, #6
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x310>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_GPIO_Init+0x334>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269a:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_GPIO_Init+0x334>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_GPIO_Init+0x334>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_GPIO_Init+0x334>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x334>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_GPIO_Init+0x334>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_GPIO_Init+0x334>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <HAL_GPIO_Init+0x334>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f ae90 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40021400 	.word	0x40021400
 800275c:	40021800 	.word	0x40021800
 8002760:	40021c00 	.word	0x40021c00
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e264      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d075      	beq.n	8002872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	4ba3      	ldr	r3, [pc, #652]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d00c      	beq.n	80027ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d112      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b9d      	ldr	r3, [pc, #628]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027aa:	d10b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	4b99      	ldr	r3, [pc, #612]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d05b      	beq.n	8002870 <HAL_RCC_OscConfig+0x108>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d157      	bne.n	8002870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e23f      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x74>
 80027ce:	4b91      	ldr	r3, [pc, #580]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a90      	ldr	r2, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e01d      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a8a      	ldr	r2, [pc, #552]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a87      	ldr	r2, [pc, #540]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 8002800:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f956 	bl	8001ad0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7ff f952 	bl	8001ad0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e204      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xc0>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff f942 	bl	8001ad0 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7ff f93e 	bl	8001ad0 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1f0      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0xe8>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1c4      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b56      	ldr	r3, [pc, #344]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4952      	ldr	r1, [pc, #328]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCC_OscConfig+0x2b0>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7ff f8f7 	bl	8001ad0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7ff f8f3 	bl	8001ad0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1a5      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4940      	ldr	r1, [pc, #256]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_OscConfig+0x2b0>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f8d6 	bl	8001ad0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002928:	f7ff f8d2 	bl	8001ad0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e184      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d030      	beq.n	80029b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCC_OscConfig+0x2b4>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f8b6 	bl	8001ad0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7ff f8b2 	bl	8001ad0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e164      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x200>
 8002986:	e015      	b.n	80029b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x2b4>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7ff f89f 	bl	8001ad0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7ff f89b 	bl	8001ad0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e14d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a0 	beq.w	8002b02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_OscConfig+0x2b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d121      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCC_OscConfig+0x2b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_RCC_OscConfig+0x2b8>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff f861 	bl	8001ad0 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e011      	b.n	8002a36 <HAL_RCC_OscConfig+0x2ce>
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470000 	.word	0x42470000
 8002a1c:	42470e80 	.word	0x42470e80
 8002a20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7ff f854 	bl	8001ad0 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e106      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b85      	ldr	r3, [pc, #532]	; (8002c4c <HAL_RCC_OscConfig+0x4e4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
 8002a4a:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	e01c      	b.n	8002a92 <HAL_RCC_OscConfig+0x32a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x312>
 8002a60:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a7a      	ldr	r2, [pc, #488]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	4b78      	ldr	r3, [pc, #480]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a77      	ldr	r2, [pc, #476]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0x32a>
 8002a7a:	4b75      	ldr	r3, [pc, #468]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a74      	ldr	r2, [pc, #464]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a71      	ldr	r2, [pc, #452]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d015      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7ff f819 	bl	8001ad0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7ff f815 	bl	8001ad0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0c5      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x33a>
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff f803 	bl	8001ad0 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe ffff 	bl	8001ad0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0af      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a55      	ldr	r2, [pc, #340]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 809b 	beq.w	8002c42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0c:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d05c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d141      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCC_OscConfig+0x4ec>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe ffd3 	bl	8001ad0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe ffcf 	bl	8001ad0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e081      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	019b      	lsls	r3, r3, #6
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	061b      	lsls	r3, r3, #24
 8002b70:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x4ec>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ffa8 	bl	8001ad0 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe ffa4 	bl	8001ad0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e056      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x41c>
 8002ba2:	e04e      	b.n	8002c42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x4ec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe ff91 	bl	8001ad0 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe ff8d 	bl	8001ad0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e03f      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x44a>
 8002bd0:	e037      	b.n	8002c42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e032      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_RCC_OscConfig+0x4e8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d028      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d121      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d11a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c0e:	4013      	ands	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	40023800 	.word	0x40023800
 8002c54:	42470060 	.word	0x42470060

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0cc      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d90c      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d044      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e067      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4934      	ldr	r1, [pc, #208]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d48:	f7fe fec2 	bl	8001ad0 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe febe 	bl	8001ad0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e04f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d20c      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490a      	ldr	r1, [pc, #40]	; (8002e18 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f9ec 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	0800ace8 	.word	0x0800ace8
 8002e1c:	2000001c 	.word	0x2000001c
 8002e20:	2000003c 	.word	0x2000003c

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	2300      	movs	r3, #0
 8002e36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3c:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	f200 80bd 	bhi.w	8002fc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e56:	e0b7      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e5a:	60bb      	str	r3, [r7, #8]
       break;
 8002e5c:	e0b7      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e0b4      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04d      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	ea02 0800 	and.w	r8, r2, r0
 8002e92:	ea03 0901 	and.w	r9, r3, r1
 8002e96:	4640      	mov	r0, r8
 8002e98:	4649      	mov	r1, r9
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	014b      	lsls	r3, r1, #5
 8002ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea8:	0142      	lsls	r2, r0, #5
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	ebb0 0008 	subs.w	r0, r0, r8
 8002eb2:	eb61 0109 	sbc.w	r1, r1, r9
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec4:	0182      	lsls	r2, r0, #6
 8002ec6:	1a12      	subs	r2, r2, r0
 8002ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	00d9      	lsls	r1, r3, #3
 8002ed6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eda:	00d0      	lsls	r0, r2, #3
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	eb12 0208 	adds.w	r2, r2, r8
 8002ee4:	eb43 0309 	adc.w	r3, r3, r9
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0259      	lsls	r1, r3, #9
 8002ef2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ef6:	0250      	lsls	r0, r2, #9
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f7fd fcc0 	bl	800088c <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4613      	mov	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e04a      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	ea02 0400 	and.w	r4, r2, r0
 8002f2e:	ea03 0501 	and.w	r5, r3, r1
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	014b      	lsls	r3, r1, #5
 8002f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f44:	0142      	lsls	r2, r0, #5
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	1b00      	subs	r0, r0, r4
 8002f4c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	018b      	lsls	r3, r1, #6
 8002f5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f5e:	0182      	lsls	r2, r0, #6
 8002f60:	1a12      	subs	r2, r2, r0
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	00d9      	lsls	r1, r3, #3
 8002f70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f74:	00d0      	lsls	r0, r2, #3
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	1912      	adds	r2, r2, r4
 8002f7c:	eb45 0303 	adc.w	r3, r5, r3
 8002f80:	f04f 0000 	mov.w	r0, #0
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	0299      	lsls	r1, r3, #10
 8002f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f8e:	0290      	lsls	r0, r2, #10
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f7fd fc74 	bl	800088c <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
      break;
 8002fc6:	e002      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fca:	60bb      	str	r3, [r7, #8]
      break;
 8002fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fce:	68bb      	ldr	r3, [r7, #8]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000001c 	.word	0x2000001c

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff0 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	0800acf8 	.word	0x0800acf8

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800302c:	f7ff ffdc 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0b5b      	lsrs	r3, r3, #13
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	0800acf8 	.word	0x0800acf8

08003050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	220f      	movs	r2, #15
 800305e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCC_GetClockConfig+0x60>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0207 	and.w	r2, r3, #7
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e022      	b.n	800310c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd ff37 	bl	8000f4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f814 	bl	8003114 <HAL_SD_InitCard>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00a      	b.n	800310c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af04      	add	r7, sp, #16
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003130:	2376      	movs	r3, #118	; 0x76
 8003132:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681d      	ldr	r5, [r3, #0]
 8003138:	466c      	mov	r4, sp
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314c:	4628      	mov	r0, r5
 800314e:	f002 f8a3 	bl	8005298 <SDIO_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e04c      	b.n	80031fe <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_SD_InitCard+0xf4>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 f8db 	bl	800532a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_SD_InitCard+0xf4>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 f804 	bl	8004188 <SD_PowerON>
 8003180:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e02e      	b.n	80031fe <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 ff25 	bl	8003ff0 <SD_InitCard>
 80031a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e01b      	b.n	80031fe <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 f93e 	bl	8005450 <SDMMC_CmdBlockLength>
 80031d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00f      	beq.n	80031fc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_SD_InitCard+0xf8>)
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bdb0      	pop	{r4, r5, r7, pc}
 8003206:	bf00      	nop
 8003208:	422580a0 	.word	0x422580a0
 800320c:	004005ff 	.word	0x004005ff

08003210 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0c0      	b.n	80033ba <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 80b9 	bne.w	80033b8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800324c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	429a      	cmp	r2, r3
 8003258:	d907      	bls.n	800326a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a7      	b.n	80033ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2203      	movs	r2, #3
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a4c      	ldr	r2, [pc, #304]	; (80033c4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2200      	movs	r2, #0
 80032a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3380      	adds	r3, #128	; 0x80
 80032d4:	4619      	mov	r1, r3
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	025b      	lsls	r3, r3, #9
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	f7fe fdb7 	bl	8001e50 <HAL_DMA_Start_IT>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a33      	ldr	r2, [pc, #204]	; (80033cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e050      	b.n	80033ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	025b      	lsls	r3, r3, #9
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003330:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	025b      	lsls	r3, r3, #9
 8003336:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003338:	2390      	movs	r3, #144	; 0x90
 800333a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800333c:	2302      	movs	r3, #2
 800333e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f107 0210 	add.w	r2, r7, #16
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f002 f850 	bl	80053f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d90a      	bls.n	8003374 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2282      	movs	r2, #130	; 0x82
 8003362:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336a:	4618      	mov	r0, r3
 800336c:	f002 f8b4 	bl	80054d8 <SDMMC_CmdReadMultiBlock>
 8003370:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003372:	e009      	b.n	8003388 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2281      	movs	r2, #129	; 0x81
 8003378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003380:	4618      	mov	r0, r3
 8003382:	f002 f887 	bl	8005494 <SDMMC_CmdReadSingleBlock>
 8003386:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e002      	b.n	80033ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3730      	adds	r7, #48	; 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08003dff 	.word	0x08003dff
 80033c8:	08003e71 	.word	0x08003e71
 80033cc:	004005ff 	.word	0x004005ff
 80033d0:	4225858c 	.word	0x4225858c

080033d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0c5      	b.n	8003588 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 80be 	bne.w	8003586 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	429a      	cmp	r2, r3
 800341c:	d907      	bls.n	800342e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0ac      	b.n	8003588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2203      	movs	r2, #3
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	4a4e      	ldr	r2, [pc, #312]	; (8003590 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	4a4d      	ldr	r2, [pc, #308]	; (8003594 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003460:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	2200      	movs	r2, #0
 8003468:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	2b01      	cmp	r3, #1
 8003470:	d002      	beq.n	8003478 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d90a      	bls.n	8003494 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22a0      	movs	r2, #160	; 0xa0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348a:	4618      	mov	r0, r3
 800348c:	f002 f868 	bl	8005560 <SDMMC_CmdWriteMultiBlock>
 8003490:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003492:	e009      	b.n	80034a8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2290      	movs	r2, #144	; 0x90
 8003498:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a0:	4618      	mov	r0, r3
 80034a2:	f002 f83b 	bl	800551c <SDMMC_CmdWriteSingleBlock>
 80034a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a39      	ldr	r2, [pc, #228]	; (8003598 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e059      	b.n	8003588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3380      	adds	r3, #128	; 0x80
 800350a:	461a      	mov	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	f7fe fc9d 	bl	8001e50 <HAL_DMA_Start_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800352a:	f023 0302 	bic.w	r3, r3, #2
 800352e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e018      	b.n	8003588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800355a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	025b      	lsls	r3, r3, #9
 8003560:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003562:	2390      	movs	r3, #144	; 0x90
 8003564:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800356e:	2301      	movs	r3, #1
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f107 0210 	add.w	r2, r7, #16
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f001 ff3b 	bl	80053f8 <SDIO_ConfigData>

      return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3730      	adds	r7, #48	; 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	08003dd5 	.word	0x08003dd5
 8003594:	08003e71 	.word	0x08003e71
 8003598:	004005ff 	.word	0x004005ff
 800359c:	4225858c 	.word	0x4225858c

080035a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_SD_IRQHandler+0x2e>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fffd 	bl	80045c6 <SD_Read_IT>
 80035cc:	e165      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 808f 	beq.w	80036fc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80035f6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80035fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d039      	beq.n	800368a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_SD_IRQHandler+0x8a>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f001 ffb8 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003634:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f92f 	bl	80038ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f240 523a 	movw	r2, #1338	; 0x53a
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <HAL_SD_IRQHandler+0xda>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f002 fc26 	bl	8005ecc <HAL_SD_RxCpltCallback>
 8003680:	e10b      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f002 fc18 	bl	8005eb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003688:	e107      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8102 	beq.w	800389a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 ff7d 	bl	80055a4 <SDMMC_CmdStopTransfer>
 80036aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8f4 	bl	80038ac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 80e5 	bne.w	800389a <HAL_SD_IRQHandler+0x2fa>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 80df 	bne.w	800389a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0208 	bic.w	r2, r2, #8
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f002 fbdf 	bl	8005eb8 <HAL_SD_TxCpltCallback>
}
 80036fa:	e0ce      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_SD_IRQHandler+0x17c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 ffa7 	bl	8004668 <SD_Write_IT>
 800371a:	e0be      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	f240 233a 	movw	r3, #570	; 0x23a
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b6 	beq.w	800389a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	f043 0202 	orr.w	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f043 0208 	orr.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	f043 0210 	orr.w	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	f043 0208 	orr.w	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f240 723a 	movw	r2, #1850	; 0x73a
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fee6 	bl	80055a4 <SDMMC_CmdStopTransfer>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f855 	bl	80038ac <HAL_SD_ErrorCallback>
}
 8003802:	e04a      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d045      	beq.n	800389a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_SD_IRQHandler+0x282>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_SD_IRQHandler+0x304>)
 8003828:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fb66 	bl	8001f00 <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02f      	beq.n	800389a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fb68 	bl	8003f14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003844:	e029      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_SD_IRQHandler+0x2ba>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <HAL_SD_IRQHandler+0x308>)
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fb4a 	bl	8001f00 <HAL_DMA_Abort_IT>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb83 	bl	8003f82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800387c:	e00d      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 fb06 	bl	8005ea4 <HAL_SD_AbortCallback>
}
 8003898:	e7ff      	b.n	800389a <HAL_SD_IRQHandler+0x2fa>
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08003f15 	.word	0x08003f15
 80038a8:	08003f83 	.word	0x08003f83

080038ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ce:	0f9b      	lsrs	r3, r3, #30
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ec:	0e1b      	lsrs	r3, r3, #24
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b2da      	uxtb	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b2da      	uxtb	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003916:	b2da      	uxtb	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003920:	0d1b      	lsrs	r3, r3, #20
 8003922:	b29a      	uxth	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393e:	0bdb      	lsrs	r3, r3, #15
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003950:	0b9b      	lsrs	r3, r3, #14
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003962:	0b5b      	lsrs	r3, r3, #13
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003974:	0b1b      	lsrs	r3, r3, #12
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	2b00      	cmp	r3, #0
 800398e:	d163      	bne.n	8003a58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	f640 73fc 	movw	r3, #4092	; 0xffc
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80039a0:	0f92      	lsrs	r2, r2, #30
 80039a2:	431a      	orrs	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ac:	0edb      	lsrs	r3, r3, #27
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	0d5b      	lsrs	r3, r3, #21
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e2:	0c9b      	lsrs	r3, r3, #18
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f4:	0bdb      	lsrs	r3, r3, #15
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	7e1b      	ldrb	r3, [r3, #24]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	3302      	adds	r3, #2
 8003a18:	2201      	movs	r2, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a22:	fb02 f203 	mul.w	r2, r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	7a1b      	ldrb	r3, [r3, #8]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a44:	0a52      	lsrs	r2, r2, #9
 8003a46:	fb02 f203 	mul.w	r2, r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60
 8003a56:	e031      	b.n	8003abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d11d      	bne.n	8003a9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	0c1b      	lsrs	r3, r3, #16
 8003a70:	431a      	orrs	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	029a      	lsls	r2, r3, #10
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60
 8003a9a:	e00f      	b.n	8003abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_SD_GetCardCSD+0x344>)
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e09d      	b.n	8003bf8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	0b9b      	lsrs	r3, r3, #14
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	09db      	lsrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	0fdb      	lsrs	r3, r3, #31
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	0f5b      	lsrs	r3, r3, #29
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	0d9b      	lsrs	r3, r3, #22
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	0d5b      	lsrs	r3, r3, #21
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	0bdb      	lsrs	r3, r3, #15
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	0b9b      	lsrs	r3, r3, #14
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	0b1b      	lsrs	r3, r3, #12
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	0a9b      	lsrs	r3, r3, #10
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	004005ff 	.word	0x004005ff

08003c08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af04      	add	r7, sp, #16
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d02e      	beq.n	8003cde <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d106      	bne.n	8003c96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
 8003c94:	e029      	b.n	8003cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fb28 	bl	80042f4 <SD_WideBus_Enable>
 8003ca4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb2:	e01a      	b.n	8003cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb65 	bl	800438a <SD_WideBus_Disable>
 8003cc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cce:	e00c      	b.n	8003cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
 8003cdc:	e005      	b.n	8003cea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d08:	e01f      	b.n	8003d4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681d      	ldr	r5, [r3, #0]
 8003d30:	466c      	mov	r4, sp
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d44:	4628      	mov	r0, r5
 8003d46:	f001 faa7 	bl	8005298 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 fb7c 	bl	8005450 <SDMMC_CmdBlockLength>
 8003d58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3728      	adds	r7, #40	; 0x28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	004005ff 	.word	0x004005ff

08003d94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa7c 	bl	80042a4 <SD_SendStatus>
 8003dac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	0a5b      	lsrs	r3, r3, #9
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003dca:	693b      	ldr	r3, [r7, #16]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2b82      	cmp	r3, #130	; 0x82
 8003e12:	d111      	bne.n	8003e38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fbc3 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003e1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fd3a 	bl	80038ac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0208 	bic.w	r2, r2, #8
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f002 f833 	bl	8005ecc <HAL_SD_RxCpltCallback>
#endif
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe f9ea 	bl	8002258 <HAL_DMA_GetError>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d03e      	beq.n	8003f08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <SD_DMAError+0x36>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d12d      	bne.n	8003f02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <SD_DMAError+0xa0>)
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003ebc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003eca:	6978      	ldr	r0, [r7, #20]
 8003ecc:	f7ff ff62 	bl	8003d94 <HAL_SD_GetCardState>
 8003ed0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d002      	beq.n	8003ede <SD_DMAError+0x6e>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d10a      	bne.n	8003ef4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 fb5e 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7ff fcd2 	bl	80038ac <HAL_SD_ErrorCallback>
#endif
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	004005ff 	.word	0x004005ff

08003f14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff31 	bl	8003d94 <HAL_SD_GetCardState>
 8003f32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d002      	beq.n	8003f4e <SD_DMATxAbort+0x3a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d10a      	bne.n	8003f64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fb26 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f001 ff99 	bl	8005ea4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f72:	e002      	b.n	8003f7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fc99 	bl	80038ac <HAL_SD_ErrorCallback>
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fefa 	bl	8003d94 <HAL_SD_GetCardState>
 8003fa0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d002      	beq.n	8003fbc <SD_DMARxAbort+0x3a>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d10a      	bne.n	8003fd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 faef 	bl	80055a4 <SDMMC_CmdStopTransfer>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 ff62 	bl	8005ea4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003fe0:	e002      	b.n	8003fe8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff fc62 	bl	80038ac <HAL_SD_ErrorCallback>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b094      	sub	sp, #80	; 0x50
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f9a1 	bl	8005348 <SDIO_GetPowerState>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800400c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004010:	e0b6      	b.n	8004180 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	2b03      	cmp	r3, #3
 8004018:	d02f      	beq.n	800407a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fbca 	bl	80057b8 <SDMMC_CmdSendCID>
 8004024:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <SD_InitCard+0x40>
    {
      return errorstate;
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	e0a7      	b.n	8004180 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f9cb 	bl	80053d2 <SDIO_GetResponse>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2104      	movs	r1, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9c2 	bl	80053d2 <SDIO_GetResponse>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2108      	movs	r1, #8
 800405a:	4618      	mov	r0, r3
 800405c:	f001 f9b9 	bl	80053d2 <SDIO_GetResponse>
 8004060:	4602      	mov	r2, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	210c      	movs	r1, #12
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f9b0 	bl	80053d2 <SDIO_GetResponse>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	2b03      	cmp	r3, #3
 8004080:	d00d      	beq.n	800409e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f107 020e 	add.w	r2, r7, #14
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fbd0 	bl	8005832 <SDMMC_CmdSetRelAdd>
 8004092:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <SD_InitCard+0xae>
    {
      return errorstate;
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	e070      	b.n	8004180 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d036      	beq.n	8004114 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f001 fb9a 	bl	80057f4 <SDMMC_CmdSendCSD>
 80040c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	e059      	b.n	8004180 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f97d 	bl	80053d2 <SDIO_GetResponse>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2104      	movs	r1, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f974 	bl	80053d2 <SDIO_GetResponse>
 80040ea:	4602      	mov	r2, r0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2108      	movs	r1, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f96b 	bl	80053d2 <SDIO_GetResponse>
 80040fc:	4602      	mov	r2, r0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	210c      	movs	r1, #12
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f962 	bl	80053d2 <SDIO_GetResponse>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2104      	movs	r1, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f959 	bl	80053d2 <SDIO_GetResponse>
 8004120:	4603      	mov	r3, r0
 8004122:	0d1a      	lsrs	r2, r3, #20
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fbc6 	bl	80038c0 <HAL_SD_GetCardCSD>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800413a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800413e:	e01f      	b.n	8004180 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	461a      	mov	r2, r3
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	4608      	mov	r0, r1
 8004152:	f001 fa49 	bl	80055e8 <SDMMC_CmdSelDesel>
 8004156:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <SD_InitCard+0x172>
  {
    return errorstate;
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	e00e      	b.n	8004180 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681d      	ldr	r5, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	466c      	mov	r4, sp
 800416a:	f103 0210 	add.w	r2, r3, #16
 800416e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004174:	3304      	adds	r3, #4
 8004176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004178:	4628      	mov	r0, r5
 800417a:	f001 f88d 	bl	8005298 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3740      	adds	r7, #64	; 0x40
 8004184:	46bd      	mov	sp, r7
 8004186:	bdb0      	pop	{r4, r5, r7, pc}

08004188 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fa44 	bl	800562e <SDMMC_CmdGoIdleState>
 80041a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e072      	b.n	8004298 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fa57 	bl	800566a <SDMMC_CmdOperCond>
 80041bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fa2d 	bl	800562e <SDMMC_CmdGoIdleState>
 80041d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	e05b      	b.n	8004298 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d137      	bne.n	800425e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 fa57 	bl	80056a8 <SDMMC_CmdAppCommand>
 80041fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02d      	beq.n	800425e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004206:	e047      	b.n	8004298 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f001 fa4a 	bl	80056a8 <SDMMC_CmdAppCommand>
 8004214:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <SD_PowerON+0x98>
    {
      return errorstate;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	e03b      	b.n	8004298 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	491e      	ldr	r1, [pc, #120]	; (80042a0 <SD_PowerON+0x118>)
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fa60 	bl	80056ec <SDMMC_CmdAppOperCommand>
 800422c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004238:	e02e      	b.n	8004298 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f8c6 	bl	80053d2 <SDIO_GetResponse>
 8004246:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	0fdb      	lsrs	r3, r3, #31
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <SD_PowerON+0xcc>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <SD_PowerON+0xce>
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]

    count++;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3301      	adds	r3, #1
 800425c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004264:	4293      	cmp	r3, r2
 8004266:	d802      	bhi.n	800426e <SD_PowerON+0xe6>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0cc      	beq.n	8004208 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004274:	4293      	cmp	r3, r2
 8004276:	d902      	bls.n	800427e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800427c:	e00c      	b.n	8004298 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
 800428e:	e002      	b.n	8004296 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	c1100000 	.word	0xc1100000

080042a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80042b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042b8:	e018      	b.n	80042ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f001 fad4 	bl	8005874 <SDMMC_CmdSendStatus>
 80042cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	e009      	b.n	80042ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f877 	bl	80053d2 <SDIO_GetResponse>
 80042e4:	4602      	mov	r2, r0
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f861 	bl	80053d2 <SDIO_GetResponse>
 8004310:	4603      	mov	r3, r0
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800431a:	d102      	bne.n	8004322 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800431c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004320:	e02f      	b.n	8004382 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004322:	f107 030c 	add.w	r3, r7, #12
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f879 	bl	8004420 <SD_FindSCR>
 800432e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e023      	b.n	8004382 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01c      	beq.n	800437e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f001 f9a9 	bl	80056a8 <SDMMC_CmdAppCommand>
 8004356:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	e00f      	b.n	8004382 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f9e2 	bl	8005732 <SDMMC_CmdBusWidth>
 800436e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	e003      	b.n	8004382 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	e001      	b.n	8004382 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800437e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f816 	bl	80053d2 <SDIO_GetResponse>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b0:	d102      	bne.n	80043b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80043b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b6:	e02f      	b.n	8004418 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f82e 	bl	8004420 <SD_FindSCR>
 80043c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	e023      	b.n	8004418 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01c      	beq.n	8004414 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f001 f95e 	bl	80056a8 <SDMMC_CmdAppCommand>
 80043ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e00f      	b.n	8004418 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f997 	bl	8005732 <SDMMC_CmdBusWidth>
 8004404:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	e003      	b.n	8004418 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004410:	2300      	movs	r3, #0
 8004412:	e001      	b.n	8004418 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004414:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b08f      	sub	sp, #60	; 0x3c
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800442a:	f7fd fb51 	bl	8001ad0 <HAL_GetTick>
 800442e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2108      	movs	r1, #8
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f802 	bl	8005450 <SDMMC_CmdBlockLength>
 800444c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	e0b2      	b.n	80045be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f001 f91f 	bl	80056a8 <SDMMC_CmdAppCommand>
 800446a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	e0a3      	b.n	80045be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800447a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800447c:	2308      	movs	r3, #8
 800447e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004480:	2330      	movs	r3, #48	; 0x30
 8004482:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004484:	2302      	movs	r3, #2
 8004486:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004488:	2300      	movs	r3, #0
 800448a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800448c:	2301      	movs	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f107 0210 	add.w	r2, r7, #16
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f000 ffac 	bl	80053f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 f966 	bl	8005776 <SDMMC_CmdSendSCR>
 80044aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02a      	beq.n	8004508 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	e083      	b.n	80045be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00f      	beq.n	80044e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	f107 0208 	add.w	r2, r7, #8
 80044d0:	18d4      	adds	r4, r2, r3
 80044d2:	4608      	mov	r0, r1
 80044d4:	f000 ff0b 	bl	80052ee <SDIO_ReadFIFO>
 80044d8:	4603      	mov	r3, r0
 80044da:	6023      	str	r3, [r4, #0]
      index++;
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	3301      	adds	r3, #1
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
 80044e2:	e006      	b.n	80044f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80044f2:	f7fd faed 	bl	8001ad0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004500:	d102      	bne.n	8004508 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004506:	e05a      	b.n	80045be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0cf      	beq.n	80044b6 <SD_FindSCR+0x96>
 8004516:	e000      	b.n	800451a <SD_FindSCR+0xfa>
      break;
 8004518:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2208      	movs	r2, #8
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004530:	2308      	movs	r3, #8
 8004532:	e044      	b.n	80045be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2202      	movs	r2, #2
 8004548:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800454a:	2302      	movs	r3, #2
 800454c:	e037      	b.n	80045be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2220      	movs	r2, #32
 8004562:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004564:	2320      	movs	r3, #32
 8004566:	e02a      	b.n	80045be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004570:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	061a      	lsls	r2, r3, #24
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800457e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004588:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0e1b      	lsrs	r3, r3, #24
 800458e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	601a      	str	r2, [r3, #0]
    scr++;
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	3304      	adds	r3, #4
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	061a      	lsls	r2, r3, #24
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80045b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	373c      	adds	r7, #60	; 0x3c
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}

080045c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d03f      	beq.n	8004660 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e033      	b.n	800464e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fe7f 	bl	80052ee <SDIO_ReadFIFO>
 80045f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3b01      	subs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3b01      	subs	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0e1b      	lsrs	r3, r3, #24
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b07      	cmp	r3, #7
 8004652:	d9c8      	bls.n	80045e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d043      	beq.n	800470a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e037      	b.n	80046f8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3b01      	subs	r3, #1
 8004698:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	041a      	lsls	r2, r3, #16
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	061a      	lsls	r2, r3, #24
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3b01      	subs	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f107 0208 	add.w	r2, r7, #8
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe0b 	bl	8005308 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b07      	cmp	r3, #7
 80046fc:	d9c4      	bls.n	8004688 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e041      	b.n	80047a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f839 	bl	80047b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 f9d7 	bl	8004b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04e      	b.n	800487a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_TIM_Base_Start_IT+0xc4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d022      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d01d      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIM_Base_Start_IT+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_TIM_Base_Start_IT+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIM_Base_Start_IT+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <HAL_TIM_Base_Start_IT+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_TIM_Base_Start_IT+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8ee 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8e0 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8f1 	bl	8004adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8c4 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8b6 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8c7 	bl	8004adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f89a 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f88c 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f89d 	bl	8004adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f870 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f862 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f873 	bl	8004adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0201 	mvn.w	r2, #1
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fa52 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f902 	bl	8004c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f838 	bl	8004af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0220 	mvn.w	r2, #32
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8cc 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a40      	ldr	r2, [pc, #256]	; (8004c18 <TIM_Base_SetConfig+0x114>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b22:	d00f      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3d      	ldr	r2, [pc, #244]	; (8004c1c <TIM_Base_SetConfig+0x118>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <TIM_Base_SetConfig+0x11c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <TIM_Base_SetConfig+0x120>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <TIM_Base_SetConfig+0x124>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <TIM_Base_SetConfig+0x114>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b64:	d027      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2c      	ldr	r2, [pc, #176]	; (8004c1c <TIM_Base_SetConfig+0x118>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d023      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <TIM_Base_SetConfig+0x11c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01f      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <TIM_Base_SetConfig+0x120>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01b      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <TIM_Base_SetConfig+0x124>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d017      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <TIM_Base_SetConfig+0x128>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <TIM_Base_SetConfig+0x12c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <TIM_Base_SetConfig+0x130>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <TIM_Base_SetConfig+0x134>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <TIM_Base_SetConfig+0x138>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <TIM_Base_SetConfig+0x13c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d108      	bne.n	8004bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <TIM_Base_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0xf8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <TIM_Base_SetConfig+0x124>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	615a      	str	r2, [r3, #20]
}
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40010400 	.word	0x40010400
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40014400 	.word	0x40014400
 8004c34:	40014800 	.word	0x40014800
 8004c38:	40001800 	.word	0x40001800
 8004c3c:	40001c00 	.word	0x40001c00
 8004c40:	40002000 	.word	0x40002000

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e03f      	b.n	8004cfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fa5a 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f929 	bl	8004f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d17c      	bne.n	8004e20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_Transmit+0x2c>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e075      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Transmit+0x3e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e06e      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	; 0x21
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5a:	f7fc feb9 	bl	8001ad0 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d108      	bne.n	8004d88 <HAL_UART_Transmit+0x82>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d98:	e02a      	b.n	8004df0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f840 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e036      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e007      	b.n	8004de2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3301      	adds	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1cf      	bne.n	8004d9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2140      	movs	r1, #64	; 0x40
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f810 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b090      	sub	sp, #64	; 0x40
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e050      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e42:	d04c      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4a:	f7fc fe41 	bl	8001ad0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d241      	bcs.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eae:	623a      	str	r2, [r7, #32]
 8004eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d09f      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3740      	adds	r7, #64	; 0x40
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	b09f      	sub	sp, #124	; 0x7c
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	68d9      	ldr	r1, [r3, #12]
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	ea40 0301 	orr.w	r3, r0, r1
 8004f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f4c:	f021 010c 	bic.w	r1, r1, #12
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f56:	430b      	orrs	r3, r1
 8004f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f66:	6999      	ldr	r1, [r3, #24]
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	ea40 0301 	orr.w	r3, r0, r1
 8004f70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4bc5      	ldr	r3, [pc, #788]	; (800528c <UART_SetConfig+0x384>)
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d004      	beq.n	8004f86 <UART_SetConfig+0x7e>
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4bc3      	ldr	r3, [pc, #780]	; (8005290 <UART_SetConfig+0x388>)
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d103      	bne.n	8004f8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f86:	f7fe f84f 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8004f8a:	6778      	str	r0, [r7, #116]	; 0x74
 8004f8c:	e002      	b.n	8004f94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f8e:	f7fe f837 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004f92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	f040 80b6 	bne.w	800510c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	f04f 0500 	mov.w	r5, #0
 8004fa8:	4622      	mov	r2, r4
 8004faa:	462b      	mov	r3, r5
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	6439      	str	r1, [r7, #64]	; 0x40
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fb8:	1912      	adds	r2, r2, r4
 8004fba:	eb45 0303 	adc.w	r3, r5, r3
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	00d9      	lsls	r1, r3, #3
 8004fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fcc:	00d0      	lsls	r0, r2, #3
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	1911      	adds	r1, r2, r4
 8004fd4:	6639      	str	r1, [r7, #96]	; 0x60
 8004fd6:	416b      	adcs	r3, r5
 8004fd8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ff4:	f7fb fc4a 	bl	800088c <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4ba5      	ldr	r3, [pc, #660]	; (8005294 <UART_SetConfig+0x38c>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011e      	lsls	r6, r3, #4
 8005006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005008:	461c      	mov	r4, r3
 800500a:	f04f 0500 	mov.w	r5, #0
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	6339      	str	r1, [r7, #48]	; 0x30
 8005016:	415b      	adcs	r3, r3
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
 800501a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800501e:	1912      	adds	r2, r2, r4
 8005020:	eb45 0303 	adc.w	r3, r5, r3
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	00d9      	lsls	r1, r3, #3
 800502e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005032:	00d0      	lsls	r0, r2, #3
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	1911      	adds	r1, r2, r4
 800503a:	65b9      	str	r1, [r7, #88]	; 0x58
 800503c:	416b      	adcs	r3, r5
 800503e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	1891      	adds	r1, r2, r2
 800504c:	62b9      	str	r1, [r7, #40]	; 0x28
 800504e:	415b      	adcs	r3, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005056:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800505a:	f7fb fc17 	bl	800088c <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b8c      	ldr	r3, [pc, #560]	; (8005294 <UART_SetConfig+0x38c>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a87      	ldr	r2, [pc, #540]	; (8005294 <UART_SetConfig+0x38c>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005084:	441e      	add	r6, r3
 8005086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005088:	4618      	mov	r0, r3
 800508a:	f04f 0100 	mov.w	r1, #0
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	1894      	adds	r4, r2, r2
 8005094:	623c      	str	r4, [r7, #32]
 8005096:	415b      	adcs	r3, r3
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509e:	1812      	adds	r2, r2, r0
 80050a0:	eb41 0303 	adc.w	r3, r1, r3
 80050a4:	f04f 0400 	mov.w	r4, #0
 80050a8:	f04f 0500 	mov.w	r5, #0
 80050ac:	00dd      	lsls	r5, r3, #3
 80050ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050b2:	00d4      	lsls	r4, r2, #3
 80050b4:	4622      	mov	r2, r4
 80050b6:	462b      	mov	r3, r5
 80050b8:	1814      	adds	r4, r2, r0
 80050ba:	653c      	str	r4, [r7, #80]	; 0x50
 80050bc:	414b      	adcs	r3, r1
 80050be:	657b      	str	r3, [r7, #84]	; 0x54
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	61b9      	str	r1, [r7, #24]
 80050ce:	415b      	adcs	r3, r3
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050da:	f7fb fbd7 	bl	800088c <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <UART_SetConfig+0x38c>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a67      	ldr	r2, [pc, #412]	; (8005294 <UART_SetConfig+0x38c>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 0207 	and.w	r2, r3, #7
 8005102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4432      	add	r2, r6
 8005108:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800510a:	e0b9      	b.n	8005280 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800510c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510e:	461c      	mov	r4, r3
 8005110:	f04f 0500 	mov.w	r5, #0
 8005114:	4622      	mov	r2, r4
 8005116:	462b      	mov	r3, r5
 8005118:	1891      	adds	r1, r2, r2
 800511a:	6139      	str	r1, [r7, #16]
 800511c:	415b      	adcs	r3, r3
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005124:	1912      	adds	r2, r2, r4
 8005126:	eb45 0303 	adc.w	r3, r5, r3
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	00d9      	lsls	r1, r3, #3
 8005134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005138:	00d0      	lsls	r0, r2, #3
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	eb12 0804 	adds.w	r8, r2, r4
 8005142:	eb43 0905 	adc.w	r9, r3, r5
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	008b      	lsls	r3, r1, #2
 800515a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800515e:	0082      	lsls	r2, r0, #2
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb fb92 	bl	800088c <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b49      	ldr	r3, [pc, #292]	; (8005294 <UART_SetConfig+0x38c>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011e      	lsls	r6, r3, #4
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	4618      	mov	r0, r3
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	1894      	adds	r4, r2, r2
 8005184:	60bc      	str	r4, [r7, #8]
 8005186:	415b      	adcs	r3, r3
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800518e:	1812      	adds	r2, r2, r0
 8005190:	eb41 0303 	adc.w	r3, r1, r3
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	f04f 0500 	mov.w	r5, #0
 800519c:	00dd      	lsls	r5, r3, #3
 800519e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051a2:	00d4      	lsls	r4, r2, #3
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	1814      	adds	r4, r2, r0
 80051aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80051ac:	414b      	adcs	r3, r1
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	008b      	lsls	r3, r1, #2
 80051c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051c8:	0082      	lsls	r2, r0, #2
 80051ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051ce:	f7fb fb5d 	bl	800088c <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <UART_SetConfig+0x38c>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	; 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	3332      	adds	r3, #50	; 0x32
 80051ea:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <UART_SetConfig+0x38c>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f6:	441e      	add	r6, r3
 80051f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fa:	4618      	mov	r0, r3
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	1894      	adds	r4, r2, r2
 8005206:	603c      	str	r4, [r7, #0]
 8005208:	415b      	adcs	r3, r3
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005210:	1812      	adds	r2, r2, r0
 8005212:	eb41 0303 	adc.w	r3, r1, r3
 8005216:	f04f 0400 	mov.w	r4, #0
 800521a:	f04f 0500 	mov.w	r5, #0
 800521e:	00dd      	lsls	r5, r3, #3
 8005220:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005224:	00d4      	lsls	r4, r2, #3
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	eb12 0a00 	adds.w	sl, r2, r0
 800522e:	eb43 0b01 	adc.w	fp, r3, r1
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4618      	mov	r0, r3
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	008b      	lsls	r3, r1, #2
 8005246:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800524a:	0082      	lsls	r2, r0, #2
 800524c:	4650      	mov	r0, sl
 800524e:	4659      	mov	r1, fp
 8005250:	f7fb fb1c 	bl	800088c <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <UART_SetConfig+0x38c>)
 800525a:	fba3 1302 	umull	r1, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2164      	movs	r1, #100	; 0x64
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	3332      	adds	r3, #50	; 0x32
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <UART_SetConfig+0x38c>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4432      	add	r2, r6
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	377c      	adds	r7, #124	; 0x7c
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	bf00      	nop
 800528c:	40011000 	.word	0x40011000
 8005290:	40011400 	.word	0x40011400
 8005294:	51eb851f 	.word	0x51eb851f

08005298 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005298:	b084      	sub	sp, #16
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	f107 001c 	add.w	r0, r7, #28
 80052a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	b004      	add	sp, #16
 80052ec:	4770      	bx	lr

080052ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2203      	movs	r2, #3
 8005336:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005338:	2002      	movs	r0, #2
 800533a:	f7fc fbd5 	bl	8001ae8 <HAL_Delay>
  
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0303 	and.w	r3, r3, #3
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005382:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005388:	431a      	orrs	r2, r3
                       Command->CPSM);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800538e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	b2db      	uxtb	r3, r3
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3314      	adds	r3, #20
 80053e0:	461a      	mov	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
}  
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800541e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005424:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800542a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005442:	2300      	movs	r3, #0

}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800545e:	2310      	movs	r3, #16
 8005460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800546a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005470:	f107 0308 	add.w	r3, r7, #8
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff74 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	2110      	movs	r1, #16
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa44 	bl	8005910 <SDMMC_GetCmdResp1>
 8005488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800548a:	69fb      	ldr	r3, [r7, #28]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054a2:	2311      	movs	r3, #17
 80054a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff ff52 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	2111      	movs	r1, #17
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa22 	bl	8005910 <SDMMC_GetCmdResp1>
 80054cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ce:	69fb      	ldr	r3, [r7, #28]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054e6:	2312      	movs	r3, #18
 80054e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff30 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005504:	f241 3288 	movw	r2, #5000	; 0x1388
 8005508:	2112      	movs	r1, #18
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa00 	bl	8005910 <SDMMC_GetCmdResp1>
 8005510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005512:	69fb      	ldr	r3, [r7, #28]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800552a:	2318      	movs	r3, #24
 800552c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800552e:	2340      	movs	r3, #64	; 0x40
 8005530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800553a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800553c:	f107 0308 	add.w	r3, r7, #8
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ff0e 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	2118      	movs	r1, #24
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9de 	bl	8005910 <SDMMC_GetCmdResp1>
 8005554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005556:	69fb      	ldr	r3, [r7, #28]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800556e:	2319      	movs	r3, #25
 8005570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff feec 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800558c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005590:	2119      	movs	r1, #25
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9bc 	bl	8005910 <SDMMC_GetCmdResp1>
 8005598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800559a:	69fb      	ldr	r3, [r7, #28]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055b0:	230c      	movs	r3, #12
 80055b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fecb 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <SDMMC_CmdStopTransfer+0x40>)
 80055d0:	210c      	movs	r1, #12
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f99c 	bl	8005910 <SDMMC_GetCmdResp1>
 80055d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055da:	69fb      	ldr	r3, [r7, #28]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	05f5e100 	.word	0x05f5e100

080055e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055f8:	2307      	movs	r3, #7
 80055fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005608:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fea7 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	2107      	movs	r1, #7
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f977 	bl	8005910 <SDMMC_GetCmdResp1>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005626:	4618      	mov	r0, r3
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fe86 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f92d 	bl	80058b8 <SDMMC_GetCmdError>
 800565e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005660:	69fb      	ldr	r3, [r7, #28]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b088      	sub	sp, #32
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005672:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005678:	2308      	movs	r3, #8
 800567a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe67 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb24 	bl	8005ce4 <SDMMC_GetCmdResp7>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056b6:	2337      	movs	r3, #55	; 0x37
 80056b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ba:	2340      	movs	r3, #64	; 0x40
 80056bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fe48 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	2137      	movs	r1, #55	; 0x37
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f918 	bl	8005910 <SDMMC_GetCmdResp1>
 80056e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005702:	2329      	movs	r3, #41	; 0x29
 8005704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800570e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fe22 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa2b 	bl	8005b7c <SDMMC_GetCmdResp3>
 8005726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005728:	69fb      	ldr	r3, [r7, #28]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b088      	sub	sp, #32
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005740:	2306      	movs	r3, #6
 8005742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800574c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fe03 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	2106      	movs	r1, #6
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8d3 	bl	8005910 <SDMMC_GetCmdResp1>
 800576a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b088      	sub	sp, #32
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005782:	2333      	movs	r3, #51	; 0x33
 8005784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005786:	2340      	movs	r3, #64	; 0x40
 8005788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800578e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005794:	f107 0308 	add.w	r3, r7, #8
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fde2 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	2133      	movs	r1, #51	; 0x33
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8b2 	bl	8005910 <SDMMC_GetCmdResp1>
 80057ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ae:	69fb      	ldr	r3, [r7, #28]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057c4:	2302      	movs	r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057c8:	23c0      	movs	r3, #192	; 0xc0
 80057ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fdc1 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f982 	bl	8005aec <SDMMC_GetCmdResp2>
 80057e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005802:	2309      	movs	r3, #9
 8005804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005806:	23c0      	movs	r3, #192	; 0xc0
 8005808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800580e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005812:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fda2 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f963 	bl	8005aec <SDMMC_GetCmdResp2>
 8005826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005828:	69fb      	ldr	r3, [r7, #28]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b088      	sub	sp, #32
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005840:	2303      	movs	r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fd83 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	2103      	movs	r1, #3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9c8 	bl	8005bf8 <SDMMC_GetCmdResp6>
 8005868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586a:	69fb      	ldr	r3, [r7, #28]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005882:	230d      	movs	r3, #13
 8005884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800588e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005892:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fd62 	bl	8005364 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	210d      	movs	r1, #13
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f832 	bl	8005910 <SDMMC_GetCmdResp1>
 80058ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ae:	69fb      	ldr	r3, [r7, #28]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <SDMMC_GetCmdError+0x50>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a11      	ldr	r2, [pc, #68]	; (800590c <SDMMC_GetCmdError+0x54>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	0a5b      	lsrs	r3, r3, #9
 80058cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	60fa      	str	r2, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058e4:	e009      	b.n	80058fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f1      	beq.n	80058d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	22c5      	movs	r2, #197	; 0xc5
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	2000001c 	.word	0x2000001c
 800590c:	10624dd3 	.word	0x10624dd3

08005910 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800591e:	4b70      	ldr	r3, [pc, #448]	; (8005ae0 <SDMMC_GetCmdResp1+0x1d0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a70      	ldr	r2, [pc, #448]	; (8005ae4 <SDMMC_GetCmdResp1+0x1d4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	0a5a      	lsrs	r2, r3, #9
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	61fa      	str	r2, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800593c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005940:	e0c9      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <SDMMC_GetCmdResp1+0x22>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ea      	bne.n	8005932 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2204      	movs	r2, #4
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800596e:	2304      	movs	r3, #4
 8005970:	e0b1      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005984:	2301      	movs	r3, #1
 8005986:	e0a6      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	22c5      	movs	r2, #197	; 0xc5
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff fd12 	bl	80053b8 <SDIO_GetCommandResponse>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	4293      	cmp	r3, r2
 800599c:	d001      	beq.n	80059a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800599e:	2301      	movs	r3, #1
 80059a0:	e099      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059a2:	2100      	movs	r1, #0
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff fd14 	bl	80053d2 <SDIO_GetResponse>
 80059aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4b4e      	ldr	r3, [pc, #312]	; (8005ae8 <SDMMC_GetCmdResp1+0x1d8>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e08d      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da02      	bge.n	80059c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c4:	e087      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	e080      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	e079      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f0:	e071      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	e069      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a10:	e061      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a20:	e059      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a30:	e051      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a40:	e049      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a50:	e041      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a60:	e039      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a70:	e031      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a80:	e029      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a90:	e021      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005aa0:	e019      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ab0:	e011      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005abc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ac0:	e009      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005acc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ad0:	e001      	b.n	8005ad6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000001c 	.word	0x2000001c
 8005ae4:	10624dd3 	.word	0x10624dd3
 8005ae8:	fdffe008 	.word	0xfdffe008

08005aec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005af4:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <SDMMC_GetCmdResp2+0x88>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <SDMMC_GetCmdResp2+0x8c>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	60fa      	str	r2, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b18:	e026      	b.n	8005b68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0ef      	beq.n	8005b0a <SDMMC_GetCmdResp2+0x1e>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ea      	bne.n	8005b0a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2204      	movs	r2, #4
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b46:	2304      	movs	r3, #4
 8005b48:	e00e      	b.n	8005b68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e003      	b.n	8005b68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	22c5      	movs	r2, #197	; 0xc5
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	2000001c 	.word	0x2000001c
 8005b78:	10624dd3 	.word	0x10624dd3

08005b7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <SDMMC_GetCmdResp3+0x74>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <SDMMC_GetCmdResp3+0x78>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	0a5b      	lsrs	r3, r3, #9
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	60fa      	str	r2, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ba8:	e01b      	b.n	8005be2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ef      	beq.n	8005b9a <SDMMC_GetCmdResp3+0x1e>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ea      	bne.n	8005b9a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	e003      	b.n	8005be2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	22c5      	movs	r2, #197	; 0xc5
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	2000001c 	.word	0x2000001c
 8005bf4:	10624dd3 	.word	0x10624dd3

08005bf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	460b      	mov	r3, r1
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c06:	4b35      	ldr	r3, [pc, #212]	; (8005cdc <SDMMC_GetCmdResp6+0xe4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a35      	ldr	r2, [pc, #212]	; (8005ce0 <SDMMC_GetCmdResp6+0xe8>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	0a5b      	lsrs	r3, r3, #9
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	61fa      	str	r2, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c2a:	e052      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ef      	beq.n	8005c1c <SDMMC_GetCmdResp6+0x24>
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ea      	bne.n	8005c1c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2204      	movs	r2, #4
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c58:	2304      	movs	r3, #4
 8005c5a:	e03a      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e02f      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fba0 	bl	80053b8 <SDIO_GetCommandResponse>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d001      	beq.n	8005c86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e025      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	22c5      	movs	r2, #197	; 0xc5
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff fb9f 	bl	80053d2 <SDIO_GetResponse>
 8005c94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e011      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cbc:	e009      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ccc:	e001      	b.n	8005cd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2000001c 	.word	0x2000001c
 8005ce0:	10624dd3 	.word	0x10624dd3

08005ce4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <SDMMC_GetCmdResp7+0x94>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a22      	ldr	r2, [pc, #136]	; (8005d7c <SDMMC_GetCmdResp7+0x98>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0a5b      	lsrs	r3, r3, #9
 8005cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d10:	e02c      	b.n	8005d6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ef      	beq.n	8005d02 <SDMMC_GetCmdResp7+0x1e>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ea      	bne.n	8005d02 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e014      	b.n	8005d6c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e009      	b.n	8005d6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d6a:	2300      	movs	r3, #0
  
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	2000001c 	.word	0x2000001c
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <MX_FATFS_Init+0x18>)
 8005d86:	4805      	ldr	r0, [pc, #20]	; (8005d9c <MX_FATFS_Init+0x1c>)
 8005d88:	f003 fbbe 	bl	8009508 <FATFS_LinkDriver>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <MX_FATFS_Init+0x20>)
 8005d92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	200013b8 	.word	0x200013b8
 8005d9c:	0800ad08 	.word	0x0800ad08
 8005da0:	200013b4 	.word	0x200013b4

08005da4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005da8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005dbe:	f000 f896 	bl	8005eee <BSP_SD_IsDetected>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e012      	b.n	8005df2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005dcc:	480b      	ldr	r0, [pc, #44]	; (8005dfc <BSP_SD_Init+0x48>)
 8005dce:	f7fd f971 	bl	80030b4 <HAL_SD_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005de0:	4806      	ldr	r0, [pc, #24]	; (8005dfc <BSP_SD_Init+0x48>)
 8005de2:	f7fd ff3d 	bl	8003c60 <HAL_SD_ConfigWideBusOperation>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20001210 	.word	0x20001210

08005e00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	4806      	ldr	r0, [pc, #24]	; (8005e30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005e18:	f7fd f9fa 	bl	8003210 <HAL_SD_ReadBlocks_DMA>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20001210 	.word	0x20001210

08005e34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	68f9      	ldr	r1, [r7, #12]
 8005e4a:	4806      	ldr	r0, [pc, #24]	; (8005e64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005e4c:	f7fd fac2 	bl	80033d4 <HAL_SD_WriteBlocks_DMA>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20001210 	.word	0x20001210

08005e68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e6c:	4805      	ldr	r0, [pc, #20]	; (8005e84 <BSP_SD_GetCardState+0x1c>)
 8005e6e:	f7fd ff91 	bl	8003d94 <HAL_SD_GetCardState>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20001210 	.word	0x20001210

08005e88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4803      	ldr	r0, [pc, #12]	; (8005ea0 <BSP_SD_GetCardInfo+0x18>)
 8005e94:	f7fd feb8 	bl	8003c08 <HAL_SD_GetCardInfo>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20001210 	.word	0x20001210

08005ea4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005eac:	f000 f818 	bl	8005ee0 <BSP_SD_AbortCallback>
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005ec0:	f000 f98c 	bl	80061dc <BSP_SD_WriteCpltCallback>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005ed4:	f000 f98e 	bl	80061f4 <BSP_SD_ReadCpltCallback>
}
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0

}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005f10:	f7fb fdde 	bl	8001ad0 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005f16:	e006      	b.n	8005f26 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f18:	f7ff ffa6 	bl	8005e68 <BSP_SD_GetCardState>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e009      	b.n	8005f3a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005f26:	f7fb fdd3 	bl	8001ad0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d8f0      	bhi.n	8005f18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <SD_CheckStatus+0x38>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f54:	f7ff ff88 	bl	8005e68 <BSP_SD_GetCardState>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <SD_CheckStatus+0x38>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <SD_CheckStatus+0x38>)
 8005f6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f6e:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <SD_CheckStatus+0x38>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000041 	.word	0x20000041

08005f80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005f8a:	f7ff ff13 	bl	8005db4 <BSP_SD_Init>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ffd4 	bl	8005f44 <SD_CheckStatus>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <SD_initialize+0x34>)
 8005fa2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <SD_initialize+0x34>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000041 	.word	0x20000041

08005fb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ffbd 	bl	8005f44 <SD_CheckStatus>
 8005fca:	4603      	mov	r3, r0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005fe8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005fec:	f7ff ff8c 	bl	8005f08 <SD_CheckStatusWithTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da01      	bge.n	8005ffa <SD_read+0x26>
  {
    return res;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	e03b      	b.n	8006072 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	68b8      	ldr	r0, [r7, #8]
 8006000:	f7ff fefe 	bl	8005e00 <BSP_SD_ReadBlocks_DMA>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d132      	bne.n	8006070 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <SD_read+0xa8>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006010:	f7fb fd5e 	bl	8001ad0 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006016:	bf00      	nop
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <SD_read+0xa8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d108      	bne.n	8006032 <SD_read+0x5e>
 8006020:	f7fb fd56 	bl	8001ad0 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f247 522f 	movw	r2, #29999	; 0x752f
 800602e:	4293      	cmp	r3, r2
 8006030:	d9f2      	bls.n	8006018 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <SD_read+0xa8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
 800603e:	e017      	b.n	8006070 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006040:	4b0e      	ldr	r3, [pc, #56]	; (800607c <SD_read+0xa8>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006046:	f7fb fd43 	bl	8001ad0 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800604c:	e007      	b.n	800605e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800604e:	f7ff ff0b 	bl	8005e68 <BSP_SD_GetCardState>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <SD_read+0x8a>
          {
            res = RES_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800605c:	e008      	b.n	8006070 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800605e:	f7fb fd37 	bl	8001ad0 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f247 522f 	movw	r2, #29999	; 0x752f
 800606c:	4293      	cmp	r3, r2
 800606e:	d9ee      	bls.n	800604e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200010cc 	.word	0x200010cc

08006080 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <SD_write+0xa8>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800609a:	f247 5030 	movw	r0, #30000	; 0x7530
 800609e:	f7ff ff33 	bl	8005f08 <SD_CheckStatusWithTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da01      	bge.n	80060ac <SD_write+0x2c>
  {
    return res;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	e038      	b.n	800611e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68b8      	ldr	r0, [r7, #8]
 80060b2:	f7ff febf 	bl	8005e34 <BSP_SD_WriteBlocks_DMA>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d12f      	bne.n	800611c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80060bc:	f7fb fd08 	bl	8001ad0 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80060c2:	bf00      	nop
 80060c4:	4b18      	ldr	r3, [pc, #96]	; (8006128 <SD_write+0xa8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d108      	bne.n	80060de <SD_write+0x5e>
 80060cc:	f7fb fd00 	bl	8001ad0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80060da:	4293      	cmp	r3, r2
 80060dc:	d9f2      	bls.n	80060c4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <SD_write+0xa8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
 80060ea:	e017      	b.n	800611c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <SD_write+0xa8>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80060f2:	f7fb fced 	bl	8001ad0 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80060f8:	e007      	b.n	800610a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060fa:	f7ff feb5 	bl	8005e68 <BSP_SD_GetCardState>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <SD_write+0x8a>
          {
            res = RES_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
            break;
 8006108:	e008      	b.n	800611c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800610a:	f7fb fce1 	bl	8001ad0 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f247 522f 	movw	r2, #29999	; 0x752f
 8006118:	4293      	cmp	r3, r2
 800611a:	d9ee      	bls.n	80060fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200010c8 	.word	0x200010c8

0800612c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	603a      	str	r2, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
 8006138:	460b      	mov	r3, r1
 800613a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006142:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <SD_ioctl+0xac>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <SD_ioctl+0x28>
 8006150:	2303      	movs	r3, #3
 8006152:	e03c      	b.n	80061ce <SD_ioctl+0xa2>

  switch (cmd)
 8006154:	79bb      	ldrb	r3, [r7, #6]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d834      	bhi.n	80061c4 <SD_ioctl+0x98>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <SD_ioctl+0x34>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006171 	.word	0x08006171
 8006164:	08006179 	.word	0x08006179
 8006168:	08006191 	.word	0x08006191
 800616c:	080061ab 	.word	0x080061ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006176:	e028      	b.n	80061ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006178:	f107 030c 	add.w	r3, r7, #12
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fe83 	bl	8005e88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800618e:	e01c      	b.n	80061ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006190:	f107 030c 	add.w	r3, r7, #12
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fe77 	bl	8005e88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	b29a      	uxth	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061a8:	e00f      	b.n	80061ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fe6a 	bl	8005e88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	0a5a      	lsrs	r2, r3, #9
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061c2:	e002      	b.n	80061ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80061ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3730      	adds	r7, #48	; 0x30
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000041 	.word	0x20000041

080061dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <BSP_SD_WriteCpltCallback+0x14>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	200010c8 	.word	0x200010c8

080061f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <BSP_SD_ReadCpltCallback+0x14>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	200010cc 	.word	0x200010cc

0800620c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <disk_status+0x30>)
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	79fa      	ldrb	r2, [r7, #7]
 8006224:	4905      	ldr	r1, [pc, #20]	; (800623c <disk_status+0x30>)
 8006226:	440a      	add	r2, r1
 8006228:	7a12      	ldrb	r2, [r2, #8]
 800622a:	4610      	mov	r0, r2
 800622c:	4798      	blx	r3
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200010f8 	.word	0x200010f8

08006240 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	4a0d      	ldr	r2, [pc, #52]	; (8006288 <disk_initialize+0x48>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d111      	bne.n	800627c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <disk_initialize+0x48>)
 800625c:	2101      	movs	r1, #1
 800625e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <disk_initialize+0x48>)
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	79fa      	ldrb	r2, [r7, #7]
 800626e:	4906      	ldr	r1, [pc, #24]	; (8006288 <disk_initialize+0x48>)
 8006270:	440a      	add	r2, r1
 8006272:	7a12      	ldrb	r2, [r2, #8]
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200010f8 	.word	0x200010f8

0800628c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <disk_read+0x3c>)
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	689c      	ldr	r4, [r3, #8]
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <disk_read+0x3c>)
 80062ac:	4413      	add	r3, r2
 80062ae:	7a18      	ldrb	r0, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	47a0      	blx	r4
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200010f8 	.word	0x200010f8

080062cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <disk_write+0x3c>)
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68dc      	ldr	r4, [r3, #12]
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <disk_write+0x3c>)
 80062ec:	4413      	add	r3, r2
 80062ee:	7a18      	ldrb	r0, [r3, #8]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	47a0      	blx	r4
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	bf00      	nop
 8006308:	200010f8 	.word	0x200010f8

0800630c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	603a      	str	r2, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
 8006318:	460b      	mov	r3, r1
 800631a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <disk_ioctl+0x38>)
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	4906      	ldr	r1, [pc, #24]	; (8006344 <disk_ioctl+0x38>)
 800632c:	440a      	add	r2, r1
 800632e:	7a10      	ldrb	r0, [r2, #8]
 8006330:	79b9      	ldrb	r1, [r7, #6]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4798      	blx	r3
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
  return res;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200010f8 	.word	0x200010f8

08006348 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b21a      	sxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	b21b      	sxth	r3, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	b21b      	sxth	r3, r3
 8006368:	81fb      	strh	r3, [r7, #14]
	return rv;
 800636a:	89fb      	ldrh	r3, [r7, #14]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3303      	adds	r3, #3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	3202      	adds	r2, #2
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	3201      	adds	r2, #1
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	887a      	ldrh	r2, [r7, #2]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	1c53      	adds	r3, r2, #1
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6179      	str	r1, [r7, #20]
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3b01      	subs	r3, #1
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <mem_cpy+0x1a>
	}
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	617a      	str	r2, [r7, #20]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f3      	bne.n	800649e <mem_set+0x10>
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	61fa      	str	r2, [r7, #28]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4619      	mov	r1, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	61ba      	str	r2, [r7, #24]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	1acb      	subs	r3, r1, r3
 80064f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <mem_cmp+0x40>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0eb      	beq.n	80064dc <mem_cmp+0x18>

	return r;
 8006504:	697b      	ldr	r3, [r7, #20]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3724      	adds	r7, #36	; 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800651c:	e002      	b.n	8006524 <chk_chr+0x12>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3301      	adds	r3, #1
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <chk_chr+0x26>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4293      	cmp	r3, r2
 8006536:	d1f2      	bne.n	800651e <chk_chr+0xc>
	return *str;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	781b      	ldrb	r3, [r3, #0]
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e029      	b.n	80065b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800655c:	4a27      	ldr	r2, [pc, #156]	; (80065fc <chk_lock+0xb4>)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	4413      	add	r3, r2
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01d      	beq.n	80065a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800656a:	4a24      	ldr	r2, [pc, #144]	; (80065fc <chk_lock+0xb4>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	4413      	add	r3, r2
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d116      	bne.n	80065aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <chk_lock+0xb4>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800658c:	429a      	cmp	r2, r3
 800658e:	d10c      	bne.n	80065aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006590:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <chk_lock+0xb4>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	4413      	add	r3, r2
 8006598:	3308      	adds	r3, #8
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d102      	bne.n	80065aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065a4:	e007      	b.n	80065b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80065a6:	2301      	movs	r3, #1
 80065a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d9d2      	bls.n	800655c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d109      	bne.n	80065d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <chk_lock+0x80>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d101      	bne.n	80065cc <chk_lock+0x84>
 80065c8:	2300      	movs	r3, #0
 80065ca:	e010      	b.n	80065ee <chk_lock+0xa6>
 80065cc:	2312      	movs	r3, #18
 80065ce:	e00e      	b.n	80065ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <chk_lock+0xa0>
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <chk_lock+0xb4>)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	330c      	adds	r3, #12
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d101      	bne.n	80065ec <chk_lock+0xa4>
 80065e8:	2310      	movs	r3, #16
 80065ea:	e000      	b.n	80065ee <chk_lock+0xa6>
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200010d8 	.word	0x200010d8

08006600 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	e002      	b.n	8006612 <enq_lock+0x12>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3301      	adds	r3, #1
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d806      	bhi.n	8006626 <enq_lock+0x26>
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <enq_lock+0x40>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f2      	bne.n	800660c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200010d8 	.word	0x200010d8

08006644 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e01f      	b.n	8006694 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006654:	4a41      	ldr	r2, [pc, #260]	; (800675c <inc_lock+0x118>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	4413      	add	r3, r2
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d113      	bne.n	800668e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006666:	4a3d      	ldr	r2, [pc, #244]	; (800675c <inc_lock+0x118>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006676:	429a      	cmp	r2, r3
 8006678:	d109      	bne.n	800668e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800667a:	4a38      	ldr	r2, [pc, #224]	; (800675c <inc_lock+0x118>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4413      	add	r3, r2
 8006682:	3308      	adds	r3, #8
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800668a:	429a      	cmp	r2, r3
 800668c:	d006      	beq.n	800669c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d9dc      	bls.n	8006654 <inc_lock+0x10>
 800669a:	e000      	b.n	800669e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800669c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d132      	bne.n	800670a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e002      	b.n	80066b0 <inc_lock+0x6c>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d806      	bhi.n	80066c4 <inc_lock+0x80>
 80066b6:	4a29      	ldr	r2, [pc, #164]	; (800675c <inc_lock+0x118>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	4413      	add	r3, r2
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f2      	bne.n	80066aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d101      	bne.n	80066ce <inc_lock+0x8a>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e040      	b.n	8006750 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4922      	ldr	r1, [pc, #136]	; (800675c <inc_lock+0x118>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	440b      	add	r3, r1
 80066da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	491e      	ldr	r1, [pc, #120]	; (800675c <inc_lock+0x118>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	440b      	add	r3, r1
 80066e8:	3304      	adds	r3, #4
 80066ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	491a      	ldr	r1, [pc, #104]	; (800675c <inc_lock+0x118>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	440b      	add	r3, r1
 80066f8:	3308      	adds	r3, #8
 80066fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <inc_lock+0x118>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	4413      	add	r3, r2
 8006704:	330c      	adds	r3, #12
 8006706:	2200      	movs	r2, #0
 8006708:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <inc_lock+0xe0>
 8006710:	4a12      	ldr	r2, [pc, #72]	; (800675c <inc_lock+0x118>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	4413      	add	r3, r2
 8006718:	330c      	adds	r3, #12
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <inc_lock+0xe0>
 8006720:	2300      	movs	r3, #0
 8006722:	e015      	b.n	8006750 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <inc_lock+0xf8>
 800672a:	4a0c      	ldr	r2, [pc, #48]	; (800675c <inc_lock+0x118>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	330c      	adds	r3, #12
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	e001      	b.n	8006740 <inc_lock+0xfc>
 800673c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006740:	4906      	ldr	r1, [pc, #24]	; (800675c <inc_lock+0x118>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	440b      	add	r3, r1
 8006748:	330c      	adds	r3, #12
 800674a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	200010d8 	.word	0x200010d8

08006760 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d825      	bhi.n	80067c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006774:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <dec_lock+0x74>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	4413      	add	r3, r2
 800677c:	330c      	adds	r3, #12
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006788:	d101      	bne.n	800678e <dec_lock+0x2e>
 800678a:	2300      	movs	r3, #0
 800678c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800678e:	89fb      	ldrh	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <dec_lock+0x3a>
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	3b01      	subs	r3, #1
 8006798:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800679a:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <dec_lock+0x74>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	330c      	adds	r3, #12
 80067a4:	89fa      	ldrh	r2, [r7, #14]
 80067a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <dec_lock+0x5a>
 80067ae:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <dec_lock+0x74>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4413      	add	r3, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	737b      	strb	r3, [r7, #13]
 80067be:	e001      	b.n	80067c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80067c0:	2302      	movs	r3, #2
 80067c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80067c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	200010d8 	.word	0x200010d8

080067d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e010      	b.n	8006808 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067e6:	4a0d      	ldr	r2, [pc, #52]	; (800681c <clear_lock+0x44>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d105      	bne.n	8006802 <clear_lock+0x2a>
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <clear_lock+0x44>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d9eb      	bls.n	80067e6 <clear_lock+0xe>
	}
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	200010d8 	.word	0x200010d8

08006820 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d034      	beq.n	800689e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7858      	ldrb	r0, [r3, #1]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006844:	2301      	movs	r3, #1
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	f7ff fd40 	bl	80062cc <disk_write>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
 8006856:	e022      	b.n	800689e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	429a      	cmp	r2, r3
 800686c:	d217      	bcs.n	800689e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	789b      	ldrb	r3, [r3, #2]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e010      	b.n	8006898 <sync_window+0x78>
					wsect += fs->fsize;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7858      	ldrb	r0, [r3, #1]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800688a:	2301      	movs	r3, #1
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	f7ff fd1d 	bl	80062cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3b01      	subs	r3, #1
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d8eb      	bhi.n	8006876 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d01b      	beq.n	80068f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ffad 	bl	8006820 <sync_window>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7858      	ldrb	r0, [r3, #1]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068da:	2301      	movs	r3, #1
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	f7ff fcd5 	bl	800628c <disk_read>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff87 	bl	8006820 <sync_window>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d159      	bne.n	80069d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d149      	bne.n	80069b8 <sync_fs+0xb4>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	791b      	ldrb	r3, [r3, #4]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d145      	bne.n	80069b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	899b      	ldrh	r3, [r3, #12]
 8006936:	461a      	mov	r2, r3
 8006938:	2100      	movs	r1, #0
 800693a:	f7ff fda8 	bl	800648e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3334      	adds	r3, #52	; 0x34
 8006942:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006946:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fd37 	bl	80063be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3334      	adds	r3, #52	; 0x34
 8006954:	4921      	ldr	r1, [pc, #132]	; (80069dc <sync_fs+0xd8>)
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fd4c 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3334      	adds	r3, #52	; 0x34
 8006960:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006964:	491e      	ldr	r1, [pc, #120]	; (80069e0 <sync_fs+0xdc>)
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd44 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3334      	adds	r3, #52	; 0x34
 8006970:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7ff fd3a 	bl	80063f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3334      	adds	r3, #52	; 0x34
 8006984:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7ff fd30 	bl	80063f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7858      	ldrb	r0, [r3, #1]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ac:	2301      	movs	r3, #1
 80069ae:	f7ff fc8d 	bl	80062cc <disk_write>
			fs->fsi_flag = 0;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2200      	movs	r2, #0
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fca3 	bl	800630c <disk_ioctl>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <sync_fs+0xcc>
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	41615252 	.word	0x41615252
 80069e0:	61417272 	.word	0x61417272

080069e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	3b02      	subs	r3, #2
 80069f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	3b02      	subs	r3, #2
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d301      	bcc.n	8006a04 <clust2sect+0x20>
 8006a00:	2300      	movs	r3, #0
 8006a02:	e008      	b.n	8006a16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	895b      	ldrh	r3, [r3, #10]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	fb03 f202 	mul.w	r2, r3, r2
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4413      	add	r3, r2
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d904      	bls.n	8006a42 <get_fat+0x20>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e0bb      	b.n	8006bc0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f000 8083 	beq.w	8006b5e <get_fat+0x13c>
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	f300 80a7 	bgt.w	8006bac <get_fat+0x18a>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d002      	beq.n	8006a68 <get_fat+0x46>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d056      	beq.n	8006b14 <get_fat+0xf2>
 8006a66:	e0a1      	b.n	8006bac <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a86:	4413      	add	r3, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6938      	ldr	r0, [r7, #16]
 8006a8c:	f7ff ff0c 	bl	80068a8 <move_window>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 808d 	bne.w	8006bb2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	60fa      	str	r2, [r7, #12]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	8992      	ldrh	r2, [r2, #12]
 8006aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa6:	fb02 f201 	mul.w	r2, r2, r1
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	899b      	ldrh	r3, [r3, #12]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6938      	ldr	r0, [r7, #16]
 8006acc:	f7ff feec 	bl	80068a8 <move_window>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d16f      	bne.n	8006bb6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	899b      	ldrh	r3, [r3, #12]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ae2:	fb02 f201 	mul.w	r2, r2, r1
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	461a      	mov	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <get_fat+0xe8>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	e002      	b.n	8006b10 <get_fat+0xee>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b10:	617b      	str	r3, [r7, #20]
			break;
 8006b12:	e055      	b.n	8006bc0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	899b      	ldrh	r3, [r3, #12]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	4619      	mov	r1, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b28:	4413      	add	r3, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6938      	ldr	r0, [r7, #16]
 8006b2e:	f7ff febb 	bl	80068a8 <move_window>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d140      	bne.n	8006bba <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	8992      	ldrh	r2, [r2, #12]
 8006b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b4a:	fb02 f200 	mul.w	r2, r2, r0
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	440b      	add	r3, r1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fbf8 	bl	8006348 <ld_word>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	617b      	str	r3, [r7, #20]
			break;
 8006b5c:	e030      	b.n	8006bc0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	899b      	ldrh	r3, [r3, #12]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	4413      	add	r3, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff fe96 	bl	80068a8 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	8992      	ldrh	r2, [r2, #12]
 8006b90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b94:	fb02 f200 	mul.w	r2, r2, r0
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fbeb 	bl	8006378 <ld_dword>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ba8:	617b      	str	r3, [r7, #20]
			break;
 8006baa:	e009      	b.n	8006bc0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e006      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bb2:	bf00      	nop
 8006bb4:	e004      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bbe:	bf00      	nop
		}
	}

	return val;
 8006bc0:	697b      	ldr	r3, [r7, #20]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bca:	b590      	push	{r4, r7, lr}
 8006bcc:	b089      	sub	sp, #36	; 0x24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f240 8102 	bls.w	8006de6 <put_fat+0x21c>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	f080 80fc 	bcs.w	8006de6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	f000 80b6 	beq.w	8006d64 <put_fat+0x19a>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	f300 80fd 	bgt.w	8006df8 <put_fat+0x22e>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d003      	beq.n	8006c0a <put_fat+0x40>
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	f000 8083 	beq.w	8006d0e <put_fat+0x144>
 8006c08:	e0f6      	b.n	8006df8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4413      	add	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	899b      	ldrh	r3, [r3, #12]
 8006c20:	4619      	mov	r1, r3
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c28:	4413      	add	r3, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f7ff fe3b 	bl	80068a8 <move_window>
 8006c32:	4603      	mov	r3, r0
 8006c34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c36:	7ffb      	ldrb	r3, [r7, #31]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 80d6 	bne.w	8006dea <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	61ba      	str	r2, [r7, #24]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	8992      	ldrh	r2, [r2, #12]
 8006c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c52:	fb02 f200 	mul.w	r2, r2, r0
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	440b      	add	r3, r1
 8006c5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00d      	beq.n	8006c82 <put_fat+0xb8>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	b25a      	sxtb	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e001      	b.n	8006c86 <put_fat+0xbc>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fdff 	bl	80068a8 <move_window>
 8006caa:	4603      	mov	r3, r0
 8006cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 809c 	bne.w	8006dee <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	899b      	ldrh	r3, [r3, #12]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cc8:	fb02 f200 	mul.w	r2, r2, r0
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	440b      	add	r3, r1
 8006cd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <put_fat+0x11a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e00e      	b.n	8006d02 <put_fat+0x138>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	f023 030f 	bic.w	r3, r3, #15
 8006cee:	b25a      	sxtb	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	70da      	strb	r2, [r3, #3]
			break;
 8006d0c:	e074      	b.n	8006df8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	899b      	ldrh	r3, [r3, #12]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d22:	4413      	add	r3, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fdbe 	bl	80068a8 <move_window>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d15d      	bne.n	8006df2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	8992      	ldrh	r2, [r2, #12]
 8006d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d48:	fb02 f200 	mul.w	r2, r2, r0
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	440b      	add	r3, r1
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	b292      	uxth	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fb31 	bl	80063be <st_word>
			fs->wflag = 1;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	70da      	strb	r2, [r3, #3]
			break;
 8006d62:	e049      	b.n	8006df8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	899b      	ldrh	r3, [r3, #12]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d78:	4413      	add	r3, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fd93 	bl	80068a8 <move_window>
 8006d82:	4603      	mov	r3, r0
 8006d84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d86:	7ffb      	ldrb	r3, [r7, #31]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d134      	bne.n	8006df6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	8992      	ldrh	r2, [r2, #12]
 8006da0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006da4:	fb02 f200 	mul.w	r2, r2, r0
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	440b      	add	r3, r1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fae3 	bl	8006378 <ld_dword>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006db8:	4323      	orrs	r3, r4
 8006dba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	8992      	ldrh	r2, [r2, #12]
 8006dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dce:	fb02 f200 	mul.w	r2, r2, r0
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fb0b 	bl	80063f4 <st_dword>
			fs->wflag = 1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	70da      	strb	r2, [r3, #3]
			break;
 8006de4:	e008      	b.n	8006df8 <put_fat+0x22e>
		}
	}
 8006de6:	bf00      	nop
 8006de8:	e006      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dea:	bf00      	nop
 8006dec:	e004      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dee:	bf00      	nop
 8006df0:	e002      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df6:	bf00      	nop
	return res;
 8006df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3724      	adds	r7, #36	; 0x24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd90      	pop	{r4, r7, pc}

08006e02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b088      	sub	sp, #32
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d904      	bls.n	8006e28 <remove_chain+0x26>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d301      	bcc.n	8006e2c <remove_chain+0x2a>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e04b      	b.n	8006ec4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	69b8      	ldr	r0, [r7, #24]
 8006e3a:	f7ff fec6 	bl	8006bca <put_fat>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <remove_chain+0x4a>
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	e03b      	b.n	8006ec4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fde7 	bl	8006a22 <get_fat>
 8006e54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d031      	beq.n	8006ec0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <remove_chain+0x64>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e02e      	b.n	8006ec4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e6c:	d101      	bne.n	8006e72 <remove_chain+0x70>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e028      	b.n	8006ec4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e72:	2200      	movs	r2, #0
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	69b8      	ldr	r0, [r7, #24]
 8006e78:	f7ff fea7 	bl	8006bca <put_fat>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e80:	7ffb      	ldrb	r3, [r7, #31]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <remove_chain+0x88>
 8006e86:	7ffb      	ldrb	r3, [r7, #31]
 8006e88:	e01c      	b.n	8006ec4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	3b02      	subs	r3, #2
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d20b      	bcs.n	8006eb0 <remove_chain+0xae>
			fs->free_clst++;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	791b      	ldrb	r3, [r3, #4]
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3c6      	bcc.n	8006e4c <remove_chain+0x4a>
 8006ebe:	e000      	b.n	8006ec2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ec0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <create_chain+0x2c>
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d31b      	bcc.n	8006f30 <create_chain+0x64>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e018      	b.n	8006f30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff fd8e 	bl	8006a22 <get_fat>
 8006f06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d801      	bhi.n	8006f12 <create_chain+0x46>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e070      	b.n	8006ff4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f18:	d101      	bne.n	8006f1e <create_chain+0x52>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	e06a      	b.n	8006ff4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d201      	bcs.n	8006f2c <create_chain+0x60>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	e063      	b.n	8006ff4 <create_chain+0x128>
		scl = clst;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d307      	bcc.n	8006f54 <create_chain+0x88>
				ncl = 2;
 8006f44:	2302      	movs	r3, #2
 8006f46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d901      	bls.n	8006f54 <create_chain+0x88>
 8006f50:	2300      	movs	r3, #0
 8006f52:	e04f      	b.n	8006ff4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fd63 	bl	8006a22 <get_fat>
 8006f5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d003      	beq.n	8006f72 <create_chain+0xa6>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f70:	d101      	bne.n	8006f76 <create_chain+0xaa>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	e03e      	b.n	8006ff4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d1da      	bne.n	8006f34 <create_chain+0x68>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e038      	b.n	8006ff4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f88:	69f9      	ldr	r1, [r7, #28]
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f7ff fe1d 	bl	8006bca <put_fat>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <create_chain+0xe2>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6938      	ldr	r0, [r7, #16]
 8006fa6:	f7ff fe10 	bl	8006bca <put_fat>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	3b02      	subs	r3, #2
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d804      	bhi.n	8006fd2 <create_chain+0x106>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	711a      	strb	r2, [r3, #4]
 8006fe0:	e007      	b.n	8006ff2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <create_chain+0x122>
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fec:	e000      	b.n	8006ff0 <create_chain+0x124>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ff2:	69fb      	ldr	r3, [r7, #28]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	3304      	adds	r3, #4
 8007012:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	899b      	ldrh	r3, [r3, #12]
 8007018:	461a      	mov	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	8952      	ldrh	r2, [r2, #10]
 8007024:	fbb3 f3f2 	udiv	r3, r3, r2
 8007028:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1d1a      	adds	r2, r3, #4
 800702e:	613a      	str	r2, [r7, #16]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <clmt_clust+0x42>
 800703a:	2300      	movs	r3, #0
 800703c:	e010      	b.n	8007060 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	d307      	bcc.n	8007056 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3304      	adds	r3, #4
 8007052:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007054:	e7e9      	b.n	800702a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007056:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007082:	d204      	bcs.n	800708e <dir_sdi+0x22>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <dir_sdi+0x26>
		return FR_INT_ERR;
 800708e:	2302      	movs	r3, #2
 8007090:	e071      	b.n	8007176 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <dir_sdi+0x46>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d902      	bls.n	80070b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10c      	bne.n	80070d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	8912      	ldrh	r2, [r2, #8]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d301      	bcc.n	80070c8 <dir_sdi+0x5c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e056      	b.n	8007176 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	61da      	str	r2, [r3, #28]
 80070d0:	e02d      	b.n	800712e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	895b      	ldrh	r3, [r3, #10]
 80070d6:	461a      	mov	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	899b      	ldrh	r3, [r3, #12]
 80070dc:	fb03 f302 	mul.w	r3, r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070e2:	e019      	b.n	8007118 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fc9a 	bl	8006a22 <get_fat>
 80070ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f6:	d101      	bne.n	80070fc <dir_sdi+0x90>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e03c      	b.n	8007176 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d904      	bls.n	800710c <dir_sdi+0xa0>
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d301      	bcc.n	8007110 <dir_sdi+0xa4>
 800710c:	2302      	movs	r3, #2
 800710e:	e032      	b.n	8007176 <dir_sdi+0x10a>
			ofs -= csz;
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d2e1      	bcs.n	80070e4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007120:	6979      	ldr	r1, [r7, #20]
 8007122:	6938      	ldr	r0, [r7, #16]
 8007124:	f7ff fc5e 	bl	80069e4 <clust2sect>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <dir_sdi+0xd4>
 800713c:	2302      	movs	r3, #2
 800713e:	e01a      	b.n	8007176 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	899b      	ldrh	r3, [r3, #12]
 8007148:	4619      	mov	r1, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007150:	441a      	add	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	899b      	ldrh	r3, [r3, #12]
 8007160:	461a      	mov	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	fbb3 f0f2 	udiv	r0, r3, r2
 8007168:	fb02 f200 	mul.w	r2, r2, r0
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	18ca      	adds	r2, r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	3320      	adds	r3, #32
 8007194:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <dir_next+0x28>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a4:	d301      	bcc.n	80071aa <dir_next+0x2c>
 80071a6:	2304      	movs	r3, #4
 80071a8:	e0bb      	b.n	8007322 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	899b      	ldrh	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b6:	fb02 f201 	mul.w	r2, r2, r1
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 809d 	bne.w	80072fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	8912      	ldrh	r2, [r2, #8]
 80071dc:	4293      	cmp	r3, r2
 80071de:	f0c0 808d 	bcc.w	80072fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	61da      	str	r2, [r3, #28]
 80071e8:	2304      	movs	r3, #4
 80071ea:	e09a      	b.n	8007322 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	461a      	mov	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	8952      	ldrh	r2, [r2, #10]
 80071fc:	3a01      	subs	r2, #1
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d17b      	bne.n	80072fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7ff fc08 	bl	8006a22 <get_fat>
 8007212:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d801      	bhi.n	800721e <dir_next+0xa0>
 800721a:	2302      	movs	r3, #2
 800721c:	e081      	b.n	8007322 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d101      	bne.n	800722a <dir_next+0xac>
 8007226:	2301      	movs	r3, #1
 8007228:	e07b      	b.n	8007322 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d359      	bcc.n	80072e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	61da      	str	r2, [r3, #28]
 8007240:	2304      	movs	r3, #4
 8007242:	e06e      	b.n	8007322 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fe3d 	bl	8006ecc <create_chain>
 8007252:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <dir_next+0xe0>
 800725a:	2307      	movs	r3, #7
 800725c:	e061      	b.n	8007322 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <dir_next+0xea>
 8007264:	2302      	movs	r3, #2
 8007266:	e05c      	b.n	8007322 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726e:	d101      	bne.n	8007274 <dir_next+0xf6>
 8007270:	2301      	movs	r3, #1
 8007272:	e056      	b.n	8007322 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fad3 	bl	8006820 <sync_window>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <dir_next+0x106>
 8007280:	2301      	movs	r3, #1
 8007282:	e04e      	b.n	8007322 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	899b      	ldrh	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	2100      	movs	r1, #0
 8007292:	f7ff f8fc 	bl	800648e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	6979      	ldr	r1, [r7, #20]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fba1 	bl	80069e4 <clust2sect>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
 80072a8:	e012      	b.n	80072d0 <dir_next+0x152>
						fs->wflag = 1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fab5 	bl	8006820 <sync_window>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <dir_next+0x142>
 80072bc:	2301      	movs	r3, #1
 80072be:	e030      	b.n	8007322 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3301      	adds	r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	895b      	ldrh	r3, [r3, #10]
 80072d4:	461a      	mov	r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4293      	cmp	r3, r2
 80072da:	d3e6      	bcc.n	80072aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff fb77 	bl	80069e4 <clust2sect>
 80072f6:	4602      	mov	r2, r0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	fbb3 f0f2 	udiv	r0, r3, r2
 8007314:	fb02 f200 	mul.w	r2, r2, r0
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	18ca      	adds	r2, r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800733a:	2100      	movs	r1, #0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fe95 	bl	800706c <dir_sdi>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d12b      	bne.n	80073a4 <dir_alloc+0x7a>
		n = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4619      	mov	r1, r3
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff faa6 	bl	80068a8 <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11d      	bne.n	80073a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2be5      	cmp	r3, #229	; 0xe5
 800736e:	d004      	beq.n	800737a <dir_alloc+0x50>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3301      	adds	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d102      	bne.n	800738e <dir_alloc+0x64>
 8007388:	e00c      	b.n	80073a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800738e:	2101      	movs	r1, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff fef4 	bl	800717e <dir_next>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0d7      	beq.n	8007350 <dir_alloc+0x26>
 80073a0:	e000      	b.n	80073a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d101      	bne.n	80073ae <dir_alloc+0x84>
 80073aa:	2307      	movs	r3, #7
 80073ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	331a      	adds	r3, #26
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe ffbe 	bl	8006348 <ld_word>
 80073cc:	4603      	mov	r3, r0
 80073ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d109      	bne.n	80073ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe ffb3 	bl	8006348 <ld_word>
 80073e2:	4603      	mov	r3, r0
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	331a      	adds	r3, #26
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	b292      	uxth	r2, r2
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe ffd6 	bl	80063be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d109      	bne.n	800742e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f103 0214 	add.w	r2, r3, #20
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	b29b      	uxth	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe ffc8 	bl	80063be <st_word>
	}
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007440:	2304      	movs	r3, #4
 8007442:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800744a:	e03c      	b.n	80074c6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	4619      	mov	r1, r3
 8007452:	6938      	ldr	r0, [r7, #16]
 8007454:	f7ff fa28 	bl	80068a8 <move_window>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d136      	bne.n	80074d0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007470:	2304      	movs	r3, #4
 8007472:	75fb      	strb	r3, [r7, #23]
 8007474:	e031      	b.n	80074da <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	330b      	adds	r3, #11
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007482:	73bb      	strb	r3, [r7, #14]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7bba      	ldrb	r2, [r7, #14]
 8007488:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2be5      	cmp	r3, #229	; 0xe5
 800748e:	d011      	beq.n	80074b4 <dir_read+0x7e>
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b2e      	cmp	r3, #46	; 0x2e
 8007494:	d00e      	beq.n	80074b4 <dir_read+0x7e>
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b0f      	cmp	r3, #15
 800749a:	d00b      	beq.n	80074b4 <dir_read+0x7e>
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	f023 0320 	bic.w	r3, r3, #32
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	bf0c      	ite	eq
 80074a6:	2301      	moveq	r3, #1
 80074a8:	2300      	movne	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00f      	beq.n	80074d4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fe61 	bl	800717e <dir_next>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d108      	bne.n	80074d8 <dir_read+0xa2>
	while (dp->sect) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1be      	bne.n	800744c <dir_read+0x16>
 80074ce:	e004      	b.n	80074da <dir_read+0xa4>
		if (res != FR_OK) break;
 80074d0:	bf00      	nop
 80074d2:	e002      	b.n	80074da <dir_read+0xa4>
				break;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <dir_read+0xa4>
		if (res != FR_OK) break;
 80074d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <dir_read+0xb0>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	61da      	str	r2, [r3, #28]
	return res;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074fe:	2100      	movs	r1, #0
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fdb3 	bl	800706c <dir_sdi>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <dir_find+0x24>
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	e03e      	b.n	8007592 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4619      	mov	r1, r3
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f7ff f9c4 	bl	80068a8 <move_window>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d12f      	bne.n	800758a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <dir_find+0x4e>
 8007538:	2304      	movs	r3, #4
 800753a:	75fb      	strb	r3, [r7, #23]
 800753c:	e028      	b.n	8007590 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	330b      	adds	r3, #11
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	330b      	adds	r3, #11
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <dir_find+0x86>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a18      	ldr	r0, [r3, #32]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3324      	adds	r3, #36	; 0x24
 8007568:	220b      	movs	r2, #11
 800756a:	4619      	mov	r1, r3
 800756c:	f7fe ffaa 	bl	80064c4 <mem_cmp>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00b      	beq.n	800758e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff fe00 	bl	800717e <dir_next>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0c5      	beq.n	8007514 <dir_find+0x24>
 8007588:	e002      	b.n	8007590 <dir_find+0xa0>
		if (res != FR_OK) break;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800758e:	bf00      	nop

	return res;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80075a8:	2101      	movs	r1, #1
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff febd 	bl	800732a <dir_alloc>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d11c      	bne.n	80075f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4619      	mov	r1, r3
 80075c0:	68b8      	ldr	r0, [r7, #8]
 80075c2:	f7ff f971 	bl	80068a8 <move_window>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d111      	bne.n	80075f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2220      	movs	r2, #32
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe ff58 	bl	800648e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a18      	ldr	r0, [r3, #32]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	220b      	movs	r2, #11
 80075e8:	4619      	mov	r1, r3
 80075ea:	f7fe ff2f 	bl	800644c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2201      	movs	r2, #1
 80075f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04e      	beq.n	80076b4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800761e:	e021      	b.n	8007664 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	1c59      	adds	r1, r3, #1
 8007628:	6179      	str	r1, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b20      	cmp	r3, #32
 8007634:	d100      	bne.n	8007638 <get_fileinfo+0x3a>
 8007636:	e015      	b.n	8007664 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	2b05      	cmp	r3, #5
 800763c:	d101      	bne.n	8007642 <get_fileinfo+0x44>
 800763e:	23e5      	movs	r3, #229	; 0xe5
 8007640:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b09      	cmp	r3, #9
 8007646:	d106      	bne.n	8007656 <get_fileinfo+0x58>
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	613a      	str	r2, [r7, #16]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4413      	add	r3, r2
 8007652:	222e      	movs	r2, #46	; 0x2e
 8007654:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	613a      	str	r2, [r7, #16]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	4413      	add	r3, r2
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b0a      	cmp	r3, #10
 8007668:	d9da      	bls.n	8007620 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4413      	add	r3, r2
 8007670:	3309      	adds	r3, #9
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	7ada      	ldrb	r2, [r3, #11]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	331c      	adds	r3, #28
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fe76 	bl	8006378 <ld_dword>
 800768c:	4602      	mov	r2, r0
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	3316      	adds	r3, #22
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fe6d 	bl	8006378 <ld_dword>
 800769e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	80da      	strh	r2, [r3, #6]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	809a      	strh	r2, [r3, #4]
 80076b2:	e000      	b.n	80076b6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076b4:	bf00      	nop
}
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80076d2:	220b      	movs	r2, #11
 80076d4:	2120      	movs	r1, #32
 80076d6:	68b8      	ldr	r0, [r7, #8]
 80076d8:	f7fe fed9 	bl	800648e <mem_set>
	si = i = 0; ni = 8;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	2308      	movs	r3, #8
 80076e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	61fa      	str	r2, [r7, #28]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076f6:	7efb      	ldrb	r3, [r7, #27]
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d94e      	bls.n	800779a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80076fc:	7efb      	ldrb	r3, [r7, #27]
 80076fe:	2b2f      	cmp	r3, #47	; 0x2f
 8007700:	d006      	beq.n	8007710 <create_name+0x54>
 8007702:	7efb      	ldrb	r3, [r7, #27]
 8007704:	2b5c      	cmp	r3, #92	; 0x5c
 8007706:	d110      	bne.n	800772a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007708:	e002      	b.n	8007710 <create_name+0x54>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b2f      	cmp	r3, #47	; 0x2f
 800771a:	d0f6      	beq.n	800770a <create_name+0x4e>
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b5c      	cmp	r3, #92	; 0x5c
 8007726:	d0f0      	beq.n	800770a <create_name+0x4e>
			break;
 8007728:	e038      	b.n	800779c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800772a:	7efb      	ldrb	r3, [r7, #27]
 800772c:	2b2e      	cmp	r3, #46	; 0x2e
 800772e:	d003      	beq.n	8007738 <create_name+0x7c>
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d30c      	bcc.n	8007752 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	2b0b      	cmp	r3, #11
 800773c:	d002      	beq.n	8007744 <create_name+0x88>
 800773e:	7efb      	ldrb	r3, [r7, #27]
 8007740:	2b2e      	cmp	r3, #46	; 0x2e
 8007742:	d001      	beq.n	8007748 <create_name+0x8c>
 8007744:	2306      	movs	r3, #6
 8007746:	e044      	b.n	80077d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007748:	2308      	movs	r3, #8
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	230b      	movs	r3, #11
 800774e:	617b      	str	r3, [r7, #20]
			continue;
 8007750:	e022      	b.n	8007798 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da04      	bge.n	8007764 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800775a:	7efb      	ldrb	r3, [r7, #27]
 800775c:	3b80      	subs	r3, #128	; 0x80
 800775e:	4a1f      	ldr	r2, [pc, #124]	; (80077dc <create_name+0x120>)
 8007760:	5cd3      	ldrb	r3, [r2, r3]
 8007762:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007764:	7efb      	ldrb	r3, [r7, #27]
 8007766:	4619      	mov	r1, r3
 8007768:	481d      	ldr	r0, [pc, #116]	; (80077e0 <create_name+0x124>)
 800776a:	f7fe fed2 	bl	8006512 <chk_chr>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <create_name+0xbc>
 8007774:	2306      	movs	r3, #6
 8007776:	e02c      	b.n	80077d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007778:	7efb      	ldrb	r3, [r7, #27]
 800777a:	2b60      	cmp	r3, #96	; 0x60
 800777c:	d905      	bls.n	800778a <create_name+0xce>
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	2b7a      	cmp	r3, #122	; 0x7a
 8007782:	d802      	bhi.n	800778a <create_name+0xce>
 8007784:	7efb      	ldrb	r3, [r7, #27]
 8007786:	3b20      	subs	r3, #32
 8007788:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	613a      	str	r2, [r7, #16]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	7efa      	ldrb	r2, [r7, #27]
 8007796:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007798:	e7a6      	b.n	80076e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800779a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	441a      	add	r2, r3
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <create_name+0xf4>
 80077ac:	2306      	movs	r3, #6
 80077ae:	e010      	b.n	80077d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2be5      	cmp	r3, #229	; 0xe5
 80077b6:	d102      	bne.n	80077be <create_name+0x102>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2205      	movs	r2, #5
 80077bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077be:	7efb      	ldrb	r3, [r7, #27]
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d801      	bhi.n	80077c8 <create_name+0x10c>
 80077c4:	2204      	movs	r2, #4
 80077c6:	e000      	b.n	80077ca <create_name+0x10e>
 80077c8:	2200      	movs	r2, #0
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	330b      	adds	r3, #11
 80077ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80077d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	0800ad1c 	.word	0x0800ad1c
 80077e0:	0800aca4 	.word	0x0800aca4

080077e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077f8:	e002      	b.n	8007800 <follow_path+0x1c>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b2f      	cmp	r3, #47	; 0x2f
 8007806:	d0f8      	beq.n	80077fa <follow_path+0x16>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b5c      	cmp	r3, #92	; 0x5c
 800780e:	d0f4      	beq.n	80077fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b1f      	cmp	r3, #31
 800781c:	d80a      	bhi.n	8007834 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2280      	movs	r2, #128	; 0x80
 8007822:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff fc1f 	bl	800706c <dir_sdi>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]
 8007832:	e048      	b.n	80078c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007834:	463b      	mov	r3, r7
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ff3f 	bl	80076bc <create_name>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d139      	bne.n	80078bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fe51 	bl	80074f0 <dir_find>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007858:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b04      	cmp	r3, #4
 8007864:	d12c      	bne.n	80078c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d127      	bne.n	80078c0 <follow_path+0xdc>
 8007870:	2305      	movs	r3, #5
 8007872:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007874:	e024      	b.n	80078c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d121      	bne.n	80078c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	799b      	ldrb	r3, [r3, #6]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800788c:	2305      	movs	r3, #5
 800788e:	75fb      	strb	r3, [r7, #23]
 8007890:	e019      	b.n	80078c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	8992      	ldrh	r2, [r2, #12]
 80078a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80078a4:	fb02 f200 	mul.w	r2, r2, r0
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	440b      	add	r3, r1
 80078ac:	4619      	mov	r1, r3
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fd82 	bl	80073b8 <ld_clust>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078ba:	e7bb      	b.n	8007834 <follow_path+0x50>
			if (res != FR_OK) break;
 80078bc:	bf00      	nop
 80078be:	e002      	b.n	80078c6 <follow_path+0xe2>
				break;
 80078c0:	bf00      	nop
 80078c2:	e000      	b.n	80078c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078c4:	bf00      	nop
			}
		}
	}

	return res;
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d031      	beq.n	800794a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e002      	b.n	80078f4 <get_ldnumber+0x24>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	3301      	adds	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d903      	bls.n	8007904 <get_ldnumber+0x34>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b3a      	cmp	r3, #58	; 0x3a
 8007902:	d1f4      	bne.n	80078ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b3a      	cmp	r3, #58	; 0x3a
 800790a:	d11c      	bne.n	8007946 <get_ldnumber+0x76>
			tp = *path;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	60fa      	str	r2, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	3b30      	subs	r3, #48	; 0x30
 800791c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b09      	cmp	r3, #9
 8007922:	d80e      	bhi.n	8007942 <get_ldnumber+0x72>
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	429a      	cmp	r2, r3
 800792a:	d10a      	bne.n	8007942 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d107      	bne.n	8007942 <get_ldnumber+0x72>
					vol = (int)i;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	e002      	b.n	800794c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800794a:	693b      	ldr	r3, [r7, #16]
}
 800794c:	4618      	mov	r0, r3
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	70da      	strb	r2, [r3, #3]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fe ff98 	bl	80068a8 <move_window>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <check_fs+0x2a>
 800797e:	2304      	movs	r3, #4
 8007980:	e038      	b.n	80079f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3334      	adds	r3, #52	; 0x34
 8007986:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fcdc 	bl	8006348 <ld_word>
 8007990:	4603      	mov	r3, r0
 8007992:	461a      	mov	r2, r3
 8007994:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007998:	429a      	cmp	r2, r3
 800799a:	d001      	beq.n	80079a0 <check_fs+0x48>
 800799c:	2303      	movs	r3, #3
 800799e:	e029      	b.n	80079f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079a6:	2be9      	cmp	r3, #233	; 0xe9
 80079a8:	d009      	beq.n	80079be <check_fs+0x66>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079b0:	2beb      	cmp	r3, #235	; 0xeb
 80079b2:	d11e      	bne.n	80079f2 <check_fs+0x9a>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80079ba:	2b90      	cmp	r3, #144	; 0x90
 80079bc:	d119      	bne.n	80079f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3334      	adds	r3, #52	; 0x34
 80079c2:	3336      	adds	r3, #54	; 0x36
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fcd7 	bl	8006378 <ld_dword>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <check_fs+0xa4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <check_fs+0x82>
 80079d6:	2300      	movs	r3, #0
 80079d8:	e00c      	b.n	80079f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3334      	adds	r3, #52	; 0x34
 80079de:	3352      	adds	r3, #82	; 0x52
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fcc9 	bl	8006378 <ld_dword>
 80079e6:	4603      	mov	r3, r0
 80079e8:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <check_fs+0xa8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d101      	bne.n	80079f2 <check_fs+0x9a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80079f2:	2302      	movs	r3, #2
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	00544146 	.word	0x00544146
 8007a00:	33544146 	.word	0x33544146

08007a04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b096      	sub	sp, #88	; 0x58
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff ff59 	bl	80078d0 <get_ldnumber>
 8007a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da01      	bge.n	8007a2a <find_volume+0x26>
 8007a26:	230b      	movs	r3, #11
 8007a28:	e265      	b.n	8007ef6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a2a:	4ab0      	ldr	r2, [pc, #704]	; (8007cec <find_volume+0x2e8>)
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <find_volume+0x3a>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	e25b      	b.n	8007ef6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01a      	beq.n	8007a8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fbd7 	bl	800620c <disk_status>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d007      	beq.n	8007a86 <find_volume+0x82>
 8007a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a82:	230a      	movs	r3, #10
 8007a84:	e237      	b.n	8007ef6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007a86:	2300      	movs	r3, #0
 8007a88:	e235      	b.n	8007ef6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fbcf 	bl	8006240 <disk_initialize>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e21e      	b.n	8007ef6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <find_volume+0xca>
 8007abe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007aca:	230a      	movs	r3, #10
 8007acc:	e213      	b.n	8007ef6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	7858      	ldrb	r0, [r3, #1]
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2102      	movs	r1, #2
 8007ada:	f7fe fc17 	bl	800630c <disk_ioctl>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <find_volume+0xe4>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e206      	b.n	8007ef6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	899b      	ldrh	r3, [r3, #12]
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af0:	d80d      	bhi.n	8007b0e <find_volume+0x10a>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	899b      	ldrh	r3, [r3, #12]
 8007af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afa:	d308      	bcc.n	8007b0e <find_volume+0x10a>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	899b      	ldrh	r3, [r3, #12]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	899b      	ldrh	r3, [r3, #12]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <find_volume+0x10e>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e1f1      	b.n	8007ef6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b1a:	f7ff ff1d 	bl	8007958 <check_fs>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d14b      	bne.n	8007bc4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b30:	e01f      	b.n	8007b72 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b40:	4413      	add	r3, r2
 8007b42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	3304      	adds	r3, #4
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d006      	beq.n	8007b5c <find_volume+0x158>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	3308      	adds	r3, #8
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fc10 	bl	8006378 <ld_dword>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	e000      	b.n	8007b5e <find_volume+0x15a>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007b66:	440b      	add	r3, r1
 8007b68:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	3301      	adds	r3, #1
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
 8007b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d9dc      	bls.n	8007b32 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b78:	2300      	movs	r3, #0
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <find_volume+0x184>
 8007b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b84:	3b01      	subs	r3, #1
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b90:	4413      	add	r3, r2
 8007b92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <find_volume+0x1a6>
 8007b9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ba2:	f7ff fed9 	bl	8007958 <check_fs>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	e000      	b.n	8007bac <find_volume+0x1a8>
 8007baa:	2303      	movs	r3, #3
 8007bac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d905      	bls.n	8007bc4 <find_volume+0x1c0>
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bba:	3301      	adds	r3, #1
 8007bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d9e1      	bls.n	8007b88 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d101      	bne.n	8007bd0 <find_volume+0x1cc>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e192      	b.n	8007ef6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d901      	bls.n	8007bdc <find_volume+0x1d8>
 8007bd8:	230d      	movs	r3, #13
 8007bda:	e18c      	b.n	8007ef6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	3334      	adds	r3, #52	; 0x34
 8007be0:	330b      	adds	r3, #11
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fbb0 	bl	8006348 <ld_word>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	899b      	ldrh	r3, [r3, #12]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d001      	beq.n	8007bf8 <find_volume+0x1f4>
 8007bf4:	230d      	movs	r3, #13
 8007bf6:	e17e      	b.n	8007ef6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	3334      	adds	r3, #52	; 0x34
 8007bfc:	3316      	adds	r3, #22
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fba2 	bl	8006348 <ld_word>
 8007c04:	4603      	mov	r3, r0
 8007c06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <find_volume+0x218>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	3334      	adds	r3, #52	; 0x34
 8007c12:	3324      	adds	r3, #36	; 0x24
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fbaf 	bl	8006378 <ld_dword>
 8007c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	789b      	ldrb	r3, [r3, #2]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d005      	beq.n	8007c40 <find_volume+0x23c>
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d001      	beq.n	8007c40 <find_volume+0x23c>
 8007c3c:	230d      	movs	r3, #13
 8007c3e:	e15a      	b.n	8007ef6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c48:	fb02 f303 	mul.w	r3, r2, r3
 8007c4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	895b      	ldrh	r3, [r3, #10]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <find_volume+0x270>
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	895b      	ldrh	r3, [r3, #10]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	4013      	ands	r3, r2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <find_volume+0x274>
 8007c74:	230d      	movs	r3, #13
 8007c76:	e13e      	b.n	8007ef6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	3334      	adds	r3, #52	; 0x34
 8007c7c:	3311      	adds	r3, #17
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fb62 	bl	8006348 <ld_word>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	891b      	ldrh	r3, [r3, #8]
 8007c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c92:	8992      	ldrh	r2, [r2, #12]
 8007c94:	0952      	lsrs	r2, r2, #5
 8007c96:	b292      	uxth	r2, r2
 8007c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c9c:	fb02 f201 	mul.w	r2, r2, r1
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <find_volume+0x2a8>
 8007ca8:	230d      	movs	r3, #13
 8007caa:	e124      	b.n	8007ef6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	3334      	adds	r3, #52	; 0x34
 8007cb0:	3313      	adds	r3, #19
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fb48 	bl	8006348 <ld_word>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <find_volume+0x2cc>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	3334      	adds	r3, #52	; 0x34
 8007cc6:	3320      	adds	r3, #32
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fb55 	bl	8006378 <ld_dword>
 8007cce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	3334      	adds	r3, #52	; 0x34
 8007cd4:	330e      	adds	r3, #14
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fb36 	bl	8006348 <ld_word>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ce0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <find_volume+0x2ec>
 8007ce6:	230d      	movs	r3, #13
 8007ce8:	e105      	b.n	8007ef6 <find_volume+0x4f2>
 8007cea:	bf00      	nop
 8007cec:	200010d0 	.word	0x200010d0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007cf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf4:	4413      	add	r3, r2
 8007cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf8:	8911      	ldrh	r1, [r2, #8]
 8007cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfc:	8992      	ldrh	r2, [r2, #12]
 8007cfe:	0952      	lsrs	r2, r2, #5
 8007d00:	b292      	uxth	r2, r2
 8007d02:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d06:	b292      	uxth	r2, r2
 8007d08:	4413      	add	r3, r2
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d201      	bcs.n	8007d18 <find_volume+0x314>
 8007d14:	230d      	movs	r3, #13
 8007d16:	e0ee      	b.n	8007ef6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d20:	8952      	ldrh	r2, [r2, #10]
 8007d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <find_volume+0x32e>
 8007d2e:	230d      	movs	r3, #13
 8007d30:	e0e1      	b.n	8007ef6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007d32:	2303      	movs	r3, #3
 8007d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d802      	bhi.n	8007d48 <find_volume+0x344>
 8007d42:	2302      	movs	r3, #2
 8007d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d802      	bhi.n	8007d58 <find_volume+0x354>
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d64:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6a:	441a      	add	r2, r3
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007d70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	441a      	add	r2, r3
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d11e      	bne.n	8007dc0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	3334      	adds	r3, #52	; 0x34
 8007d86:	332a      	adds	r3, #42	; 0x2a
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fadd 	bl	8006348 <ld_word>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <find_volume+0x394>
 8007d94:	230d      	movs	r3, #13
 8007d96:	e0ae      	b.n	8007ef6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	891b      	ldrh	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <find_volume+0x3a0>
 8007da0:	230d      	movs	r3, #13
 8007da2:	e0a8      	b.n	8007ef6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	3334      	adds	r3, #52	; 0x34
 8007da8:	332c      	adds	r3, #44	; 0x2c
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fae4 	bl	8006378 <ld_dword>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbe:	e01f      	b.n	8007e00 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	891b      	ldrh	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <find_volume+0x3c8>
 8007dc8:	230d      	movs	r3, #13
 8007dca:	e094      	b.n	8007ef6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd2:	441a      	add	r2, r3
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d103      	bne.n	8007de8 <find_volume+0x3e4>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	e00a      	b.n	8007dfe <find_volume+0x3fa>
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	4613      	mov	r3, r2
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	4413      	add	r3, r2
 8007df2:	085a      	lsrs	r2, r3, #1
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007dfe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	899b      	ldrh	r3, [r3, #12]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e12:	8989      	ldrh	r1, [r1, #12]
 8007e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d201      	bcs.n	8007e20 <find_volume+0x41c>
 8007e1c:	230d      	movs	r3, #13
 8007e1e:	e06a      	b.n	8007ef6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e26:	615a      	str	r2, [r3, #20]
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d149      	bne.n	8007ed2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	3334      	adds	r3, #52	; 0x34
 8007e42:	3330      	adds	r3, #48	; 0x30
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fa7f 	bl	8006348 <ld_word>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d140      	bne.n	8007ed2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e52:	3301      	adds	r3, #1
 8007e54:	4619      	mov	r1, r3
 8007e56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e58:	f7fe fd26 	bl	80068a8 <move_window>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d137      	bne.n	8007ed2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	2200      	movs	r2, #0
 8007e66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	3334      	adds	r3, #52	; 0x34
 8007e6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe fa69 	bl	8006348 <ld_word>
 8007e76:	4603      	mov	r3, r0
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d127      	bne.n	8007ed2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	3334      	adds	r3, #52	; 0x34
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fa76 	bl	8006378 <ld_dword>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <find_volume+0x4fc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d11e      	bne.n	8007ed2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	3334      	adds	r3, #52	; 0x34
 8007e98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fa6b 	bl	8006378 <ld_dword>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <find_volume+0x500>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d113      	bne.n	8007ed2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	3334      	adds	r3, #52	; 0x34
 8007eae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fa60 	bl	8006378 <ld_dword>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	3334      	adds	r3, #52	; 0x34
 8007ec2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fa56 	bl	8006378 <ld_dword>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ed8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <find_volume+0x504>)
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <find_volume+0x504>)
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <find_volume+0x504>)
 8007ee8:	881a      	ldrh	r2, [r3, #0]
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007eee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ef0:	f7fe fc72 	bl	80067d8 <clear_lock>
#endif
	return FR_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3758      	adds	r7, #88	; 0x58
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	41615252 	.word	0x41615252
 8007f04:	61417272 	.word	0x61417272
 8007f08:	200010d4 	.word	0x200010d4

08007f0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f16:	2309      	movs	r3, #9
 8007f18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01c      	beq.n	8007f5a <validate+0x4e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d018      	beq.n	8007f5a <validate+0x4e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d013      	beq.n	8007f5a <validate+0x4e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	889a      	ldrh	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	88db      	ldrh	r3, [r3, #6]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d10c      	bne.n	8007f5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe f960 	bl	800620c <disk_status>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <validate+0x4e>
			res = FR_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <validate+0x5a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	e000      	b.n	8007f68 <validate+0x5c>
 8007f66:	2300      	movs	r3, #0
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	6013      	str	r3, [r2, #0]
	return res;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f8a:	f107 0310 	add.w	r3, r7, #16
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fc9e 	bl	80078d0 <get_ldnumber>
 8007f94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	da01      	bge.n	8007fa0 <f_mount+0x28>
 8007f9c:	230b      	movs	r3, #11
 8007f9e:	e02b      	b.n	8007ff8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fa0:	4a17      	ldr	r2, [pc, #92]	; (8008000 <f_mount+0x88>)
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fb0:	69b8      	ldr	r0, [r7, #24]
 8007fb2:	f7fe fc11 	bl	80067d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	490d      	ldr	r1, [pc, #52]	; (8008000 <f_mount+0x88>)
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <f_mount+0x66>
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d001      	beq.n	8007fe2 <f_mount+0x6a>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e00a      	b.n	8007ff8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fe2:	f107 010c 	add.w	r1, r7, #12
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	2200      	movs	r2, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fd09 	bl	8007a04 <find_volume>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200010d0 	.word	0x200010d0

08008004 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b098      	sub	sp, #96	; 0x60
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <f_open+0x18>
 8008018:	2309      	movs	r3, #9
 800801a:	e1bb      	b.n	8008394 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008022:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	f107 0110 	add.w	r1, r7, #16
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fce8 	bl	8007a04 <find_volume>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800803a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 819f 	bne.w	8008382 <f_open+0x37e>
		dj.obj.fs = fs;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	f107 0314 	add.w	r3, r7, #20
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fbc7 	bl	80077e4 <follow_path>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800805c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11a      	bne.n	800809a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008064:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008068:	b25b      	sxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	da03      	bge.n	8008076 <f_open+0x72>
				res = FR_INVALID_NAME;
 800806e:	2306      	movs	r3, #6
 8008070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008074:	e011      	b.n	800809a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	bf14      	ite	ne
 8008080:	2301      	movne	r3, #1
 8008082:	2300      	moveq	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	f107 0314 	add.w	r3, r7, #20
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fa5a 	bl	8006548 <chk_lock>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	f003 031c 	and.w	r3, r3, #28
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d07f      	beq.n	80081a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80080a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d017      	beq.n	80080dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d10e      	bne.n	80080d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080b4:	f7fe faa4 	bl	8006600 <enq_lock>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d006      	beq.n	80080cc <f_open+0xc8>
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff fa69 	bl	800759a <dir_register>
 80080c8:	4603      	mov	r3, r0
 80080ca:	e000      	b.n	80080ce <f_open+0xca>
 80080cc:	2312      	movs	r3, #18
 80080ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	f043 0308 	orr.w	r3, r3, #8
 80080d8:	71fb      	strb	r3, [r7, #7]
 80080da:	e010      	b.n	80080fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080dc:	7ebb      	ldrb	r3, [r7, #26]
 80080de:	f003 0311 	and.w	r3, r3, #17
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <f_open+0xea>
					res = FR_DENIED;
 80080e6:	2307      	movs	r3, #7
 80080e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080ec:	e007      	b.n	80080fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <f_open+0xfa>
 80080f8:	2308      	movs	r3, #8
 80080fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80080fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008102:	2b00      	cmp	r3, #0
 8008104:	d168      	bne.n	80081d8 <f_open+0x1d4>
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d063      	beq.n	80081d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008110:	f7fd fe48 	bl	8005da4 <get_fattime>
 8008114:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	330e      	adds	r3, #14
 800811a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe f969 	bl	80063f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008124:	3316      	adds	r3, #22
 8008126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe f963 	bl	80063f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	330b      	adds	r3, #11
 8008132:	2220      	movs	r2, #32
 8008134:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff f93b 	bl	80073b8 <ld_clust>
 8008142:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008148:	2200      	movs	r2, #0
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff f953 	bl	80073f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008152:	331c      	adds	r3, #28
 8008154:	2100      	movs	r1, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe f94c 	bl	80063f4 <st_dword>
					fs->wflag = 1;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2201      	movs	r2, #1
 8008160:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d037      	beq.n	80081d8 <f_open+0x1d4>
						dw = fs->winsect;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800816e:	f107 0314 	add.w	r3, r7, #20
 8008172:	2200      	movs	r2, #0
 8008174:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fe43 	bl	8006e02 <remove_chain>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008186:	2b00      	cmp	r3, #0
 8008188:	d126      	bne.n	80081d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fb8a 	bl	80068a8 <move_window>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819e:	3a01      	subs	r2, #1
 80081a0:	611a      	str	r2, [r3, #16]
 80081a2:	e019      	b.n	80081d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80081a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d115      	bne.n	80081d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80081ac:	7ebb      	ldrb	r3, [r7, #26]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <f_open+0x1ba>
					res = FR_NO_FILE;
 80081b6:	2304      	movs	r3, #4
 80081b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081bc:	e00c      	b.n	80081d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <f_open+0x1d4>
 80081c8:	7ebb      	ldrb	r3, [r7, #26]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <f_open+0x1d4>
						res = FR_DENIED;
 80081d2:	2307      	movs	r3, #7
 80081d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80081d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d128      	bne.n	8008232 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf14      	ite	ne
 800820a:	2301      	movne	r3, #1
 800820c:	2300      	moveq	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	f107 0314 	add.w	r3, r7, #20
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fa13 	bl	8006644 <inc_lock>
 800821e:	4602      	mov	r2, r0
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <f_open+0x22e>
 800822c:	2302      	movs	r3, #2
 800822e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 80a3 	bne.w	8008382 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff f8b8 	bl	80073b8 <ld_clust>
 8008248:	4602      	mov	r2, r0
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	331c      	adds	r3, #28
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe f890 	bl	8006378 <ld_dword>
 8008258:	4602      	mov	r2, r0
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	88da      	ldrh	r2, [r3, #6]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	79fa      	ldrb	r2, [r7, #7]
 8008276:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3330      	adds	r3, #48	; 0x30
 800828e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f8fa 	bl	800648e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d06e      	beq.n	8008382 <f_open+0x37e>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d06a      	beq.n	8008382 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	895b      	ldrh	r3, [r3, #10]
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	899b      	ldrh	r3, [r3, #12]
 80082be:	fb03 f302 	mul.w	r3, r3, r2
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	657b      	str	r3, [r7, #84]	; 0x54
 80082d0:	e016      	b.n	8008300 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe fba3 	bl	8006a22 <get_fat>
 80082dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80082de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d802      	bhi.n	80082ea <f_open+0x2e6>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f0:	d102      	bne.n	80082f8 <f_open+0x2f4>
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <f_open+0x30c>
 8008308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800830a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830c:	429a      	cmp	r2, r3
 800830e:	d8e0      	bhi.n	80082d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008314:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800831a:	2b00      	cmp	r3, #0
 800831c:	d131      	bne.n	8008382 <f_open+0x37e>
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	899b      	ldrh	r3, [r3, #12]
 8008322:	461a      	mov	r2, r3
 8008324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008326:	fbb3 f1f2 	udiv	r1, r3, r2
 800832a:	fb02 f201 	mul.w	r2, r2, r1
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d026      	beq.n	8008382 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fb53 	bl	80069e4 <clust2sect>
 800833e:	6478      	str	r0, [r7, #68]	; 0x44
 8008340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <f_open+0x34a>
						res = FR_INT_ERR;
 8008346:	2302      	movs	r3, #2
 8008348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800834c:	e019      	b.n	8008382 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	461a      	mov	r2, r3
 8008354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008356:	fbb3 f2f2 	udiv	r2, r3, r2
 800835a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800835c:	441a      	add	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	7858      	ldrb	r0, [r3, #1]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a1a      	ldr	r2, [r3, #32]
 8008370:	2301      	movs	r3, #1
 8008372:	f7fd ff8b 	bl	800628c <disk_read>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <f_open+0x37e>
 800837c:	2301      	movs	r3, #1
 800837e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <f_open+0x38c>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008394:	4618      	mov	r0, r3
 8008396:	3760      	adds	r7, #96	; 0x60
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08e      	sub	sp, #56	; 0x38
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f107 0214 	add.w	r2, r7, #20
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fda5 	bl	8007f0c <validate>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d107      	bne.n	80083e0 <f_read+0x44>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	7d5b      	ldrb	r3, [r3, #21]
 80083d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80083d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <f_read+0x4a>
 80083e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083e4:	e135      	b.n	8008652 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7d1b      	ldrb	r3, [r3, #20]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <f_read+0x5a>
 80083f2:	2307      	movs	r3, #7
 80083f4:	e12d      	b.n	8008652 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	429a      	cmp	r2, r3
 8008408:	f240 811e 	bls.w	8008648 <f_read+0x2ac>
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008410:	e11a      	b.n	8008648 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	8992      	ldrh	r2, [r2, #12]
 800841a:	fbb3 f1f2 	udiv	r1, r3, r2
 800841e:	fb02 f201 	mul.w	r2, r2, r1
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 80d5 	bne.w	80085d4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	8992      	ldrh	r2, [r2, #12]
 8008432:	fbb3 f3f2 	udiv	r3, r3, r2
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	8952      	ldrh	r2, [r2, #10]
 800843a:	3a01      	subs	r2, #1
 800843c:	4013      	ands	r3, r2
 800843e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d12f      	bne.n	80084a6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	633b      	str	r3, [r7, #48]	; 0x30
 8008454:	e013      	b.n	800847e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	4619      	mov	r1, r3
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7fe fdc9 	bl	8006ffc <clmt_clust>
 800846a:	6338      	str	r0, [r7, #48]	; 0x30
 800846c:	e007      	b.n	800847e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7fe fad3 	bl	8006a22 <get_fat>
 800847c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	2b01      	cmp	r3, #1
 8008482:	d804      	bhi.n	800848e <f_read+0xf2>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2202      	movs	r2, #2
 8008488:	755a      	strb	r2, [r3, #21]
 800848a:	2302      	movs	r3, #2
 800848c:	e0e1      	b.n	8008652 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008494:	d104      	bne.n	80084a0 <f_read+0x104>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	755a      	strb	r2, [r3, #21]
 800849c:	2301      	movs	r3, #1
 800849e:	e0d8      	b.n	8008652 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f7fe fa98 	bl	80069e4 <clust2sect>
 80084b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <f_read+0x12a>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2202      	movs	r2, #2
 80084c0:	755a      	strb	r2, [r3, #21]
 80084c2:	2302      	movs	r3, #2
 80084c4:	e0c5      	b.n	8008652 <f_read+0x2b6>
			sect += csect;
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	899b      	ldrh	r3, [r3, #12]
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d041      	beq.n	8008566 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	4413      	add	r3, r2
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	8952      	ldrh	r2, [r2, #10]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d905      	bls.n	80084fc <f_read+0x160>
					cc = fs->csize - csect;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	895b      	ldrh	r3, [r3, #10]
 80084f4:	461a      	mov	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	7858      	ldrb	r0, [r3, #1]
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008506:	f7fd fec1 	bl	800628c <disk_read>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <f_read+0x17e>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	755a      	strb	r2, [r3, #21]
 8008516:	2301      	movs	r3, #1
 8008518:	e09b      	b.n	8008652 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	7d1b      	ldrb	r3, [r3, #20]
 800851e:	b25b      	sxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	da18      	bge.n	8008556 <f_read+0x1ba>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1a      	ldr	r2, [r3, #32]
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800852e:	429a      	cmp	r2, r3
 8008530:	d911      	bls.n	8008556 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a1a      	ldr	r2, [r3, #32]
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	8992      	ldrh	r2, [r2, #12]
 800853e:	fb02 f303 	mul.w	r3, r2, r3
 8008542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008544:	18d0      	adds	r0, r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	899b      	ldrh	r3, [r3, #12]
 8008550:	461a      	mov	r2, r3
 8008552:	f7fd ff7b 	bl	800644c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	899b      	ldrh	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	fb02 f303 	mul.w	r3, r2, r3
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008564:	e05c      	b.n	8008620 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	d02e      	beq.n	80085ce <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	7d1b      	ldrb	r3, [r3, #20]
 8008574:	b25b      	sxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	da18      	bge.n	80085ac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	7858      	ldrb	r0, [r3, #1]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	2301      	movs	r3, #1
 800858a:	f7fd fe9f 	bl	80062cc <disk_write>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <f_read+0x202>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	755a      	strb	r2, [r3, #21]
 800859a:	2301      	movs	r3, #1
 800859c:	e059      	b.n	8008652 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	7d1b      	ldrb	r3, [r3, #20]
 80085a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	7858      	ldrb	r0, [r3, #1]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085b6:	2301      	movs	r3, #1
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	f7fd fe67 	bl	800628c <disk_read>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <f_read+0x232>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	755a      	strb	r2, [r3, #21]
 80085ca:	2301      	movs	r3, #1
 80085cc:	e041      	b.n	8008652 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	899b      	ldrh	r3, [r3, #12]
 80085d8:	4618      	mov	r0, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	8992      	ldrh	r2, [r2, #12]
 80085e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085e6:	fb02 f201 	mul.w	r2, r2, r1
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	1ac3      	subs	r3, r0, r3
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d901      	bls.n	80085fc <f_read+0x260>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	8992      	ldrh	r2, [r2, #12]
 800860a:	fbb3 f0f2 	udiv	r0, r3, r2
 800860e:	fb02 f200 	mul.w	r2, r2, r0
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	440b      	add	r3, r1
 8008616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008618:	4619      	mov	r1, r3
 800861a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800861c:	f7fd ff16 	bl	800644c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	4413      	add	r3, r2
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	441a      	add	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	619a      	str	r2, [r3, #24]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	441a      	add	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f47f aee1 	bne.w	8008412 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3738      	adds	r7, #56	; 0x38
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b08c      	sub	sp, #48	; 0x30
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f107 0210 	add.w	r2, r7, #16
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fc46 	bl	8007f0c <validate>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d107      	bne.n	800869e <f_write+0x44>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	7d5b      	ldrb	r3, [r3, #21]
 8008692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <f_write+0x4a>
 800869e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086a2:	e16a      	b.n	800897a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	7d1b      	ldrb	r3, [r3, #20]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <f_write+0x5a>
 80086b0:	2307      	movs	r3, #7
 80086b2:	e162      	b.n	800897a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	441a      	add	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	f080 814c 	bcs.w	800895e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	43db      	mvns	r3, r3
 80086cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80086ce:	e146      	b.n	800895e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	8992      	ldrh	r2, [r2, #12]
 80086d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086dc:	fb02 f201 	mul.w	r2, r2, r1
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f040 80f1 	bne.w	80088ca <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	8992      	ldrh	r2, [r2, #12]
 80086f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	8952      	ldrh	r2, [r2, #10]
 80086f8:	3a01      	subs	r2, #1
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d143      	bne.n	800878c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10c      	bne.n	8008726 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11a      	bne.n	800874e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fbd5 	bl	8006ecc <create_chain>
 8008722:	62b8      	str	r0, [r7, #40]	; 0x28
 8008724:	e013      	b.n	800874e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	4619      	mov	r1, r3
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7fe fc61 	bl	8006ffc <clmt_clust>
 800873a:	62b8      	str	r0, [r7, #40]	; 0x28
 800873c:	e007      	b.n	800874e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7fe fbc0 	bl	8006ecc <create_chain>
 800874c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8109 	beq.w	8008968 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	2b01      	cmp	r3, #1
 800875a:	d104      	bne.n	8008766 <f_write+0x10c>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	755a      	strb	r2, [r3, #21]
 8008762:	2302      	movs	r3, #2
 8008764:	e109      	b.n	800897a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876c:	d104      	bne.n	8008778 <f_write+0x11e>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	755a      	strb	r2, [r3, #21]
 8008774:	2301      	movs	r3, #1
 8008776:	e100      	b.n	800897a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800877c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <f_write+0x132>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800878a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7d1b      	ldrb	r3, [r3, #20]
 8008790:	b25b      	sxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	da18      	bge.n	80087c8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	7858      	ldrb	r0, [r3, #1]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	2301      	movs	r3, #1
 80087a6:	f7fd fd91 	bl	80062cc <disk_write>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <f_write+0x160>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	755a      	strb	r2, [r3, #21]
 80087b6:	2301      	movs	r3, #1
 80087b8:	e0df      	b.n	800897a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	7d1b      	ldrb	r3, [r3, #20]
 80087be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7fe f907 	bl	80069e4 <clust2sect>
 80087d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d104      	bne.n	80087e8 <f_write+0x18e>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2202      	movs	r2, #2
 80087e2:	755a      	strb	r2, [r3, #21]
 80087e4:	2302      	movs	r3, #2
 80087e6:	e0c8      	b.n	800897a <f_write+0x320>
			sect += csect;
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	899b      	ldrh	r3, [r3, #12]
 80087f4:	461a      	mov	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d043      	beq.n	800888c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	4413      	add	r3, r2
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	8952      	ldrh	r2, [r2, #10]
 800880e:	4293      	cmp	r3, r2
 8008810:	d905      	bls.n	800881e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	895b      	ldrh	r3, [r3, #10]
 8008816:	461a      	mov	r2, r3
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	7858      	ldrb	r0, [r3, #1]
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	69f9      	ldr	r1, [r7, #28]
 8008828:	f7fd fd50 	bl	80062cc <disk_write>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <f_write+0x1e2>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	755a      	strb	r2, [r3, #21]
 8008838:	2301      	movs	r3, #1
 800883a:	e09e      	b.n	800897a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	6a3a      	ldr	r2, [r7, #32]
 8008846:	429a      	cmp	r2, r3
 8008848:	d918      	bls.n	800887c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	8992      	ldrh	r2, [r2, #12]
 800885c:	fb02 f303 	mul.w	r3, r2, r3
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	18d1      	adds	r1, r2, r3
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	899b      	ldrh	r3, [r3, #12]
 8008868:	461a      	mov	r2, r3
 800886a:	f7fd fdef 	bl	800644c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	7d1b      	ldrb	r3, [r3, #20]
 8008872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	899b      	ldrh	r3, [r3, #12]
 8008880:	461a      	mov	r2, r3
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800888a:	e04b      	b.n	8008924 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	429a      	cmp	r2, r3
 8008894:	d016      	beq.n	80088c4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800889e:	429a      	cmp	r2, r3
 80088a0:	d210      	bcs.n	80088c4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	7858      	ldrb	r0, [r3, #1]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088ac:	2301      	movs	r3, #1
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	f7fd fcec 	bl	800628c <disk_read>
 80088b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d004      	beq.n	80088c4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	755a      	strb	r2, [r3, #21]
 80088c0:	2301      	movs	r3, #1
 80088c2:	e05a      	b.n	800897a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	4618      	mov	r0, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	8992      	ldrh	r2, [r2, #12]
 80088d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088dc:	fb02 f201 	mul.w	r2, r2, r1
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	1ac3      	subs	r3, r0, r3
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d901      	bls.n	80088f2 <f_write+0x298>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	8992      	ldrh	r2, [r2, #12]
 8008900:	fbb3 f0f2 	udiv	r0, r3, r2
 8008904:	fb02 f200 	mul.w	r2, r2, r0
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	440b      	add	r3, r1
 800890c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890e:	69f9      	ldr	r1, [r7, #28]
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd fd9b 	bl	800644c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	7d1b      	ldrb	r3, [r3, #20]
 800891a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800891e:	b2da      	uxtb	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	4413      	add	r3, r2
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	441a      	add	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	619a      	str	r2, [r3, #24]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	429a      	cmp	r2, r3
 8008942:	bf38      	it	cc
 8008944:	461a      	movcc	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	441a      	add	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f47f aeb5 	bne.w	80086d0 <f_write+0x76>
 8008966:	e000      	b.n	800896a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008968:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	7d1b      	ldrb	r3, [r3, #20]
 800896e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008972:	b2da      	uxtb	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3730      	adds	r7, #48	; 0x30
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f107 0208 	add.w	r2, r7, #8
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff faba 	bl	8007f0c <validate>
 8008998:	4603      	mov	r3, r0
 800899a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d168      	bne.n	8008a74 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7d1b      	ldrb	r3, [r3, #20]
 80089a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d062      	beq.n	8008a74 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	7d1b      	ldrb	r3, [r3, #20]
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da15      	bge.n	80089e4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	7858      	ldrb	r0, [r3, #1]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	2301      	movs	r3, #1
 80089c8:	f7fd fc80 	bl	80062cc <disk_write>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <f_sync+0x54>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e04f      	b.n	8008a76 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7d1b      	ldrb	r3, [r3, #20]
 80089da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80089e4:	f7fd f9de 	bl	8005da4 <get_fattime>
 80089e8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7fd ff58 	bl	80068a8 <move_window>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d138      	bne.n	8008a74 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	330b      	adds	r3, #11
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	330b      	adds	r3, #11
 8008a12:	f042 0220 	orr.w	r2, r2, #32
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	461a      	mov	r2, r3
 8008a24:	68f9      	ldr	r1, [r7, #12]
 8008a26:	f7fe fce6 	bl	80073f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f103 021c 	add.w	r2, r3, #28
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fd fcdc 	bl	80063f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3316      	adds	r3, #22
 8008a40:	6939      	ldr	r1, [r7, #16]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fd fcd6 	bl	80063f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3312      	adds	r3, #18
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fd fcb5 	bl	80063be <st_word>
					fs->wflag = 1;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fd ff51 	bl	8006904 <sync_fs>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7d1b      	ldrb	r3, [r3, #20]
 8008a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff ff7b 	bl	8008982 <f_sync>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d118      	bne.n	8008ac8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f107 0208 	add.w	r2, r7, #8
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff fa34 	bl	8007f0c <validate>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd fe54 	bl	8006760 <dec_lock>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b090      	sub	sp, #64	; 0x40
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fa11 	bl	8007f0c <validate>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <f_lseek+0x2e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	7d5b      	ldrb	r3, [r3, #21]
 8008afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <f_lseek+0x3c>
 8008b08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b0c:	e201      	b.n	8008f12 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 80d9 	beq.w	8008cca <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b1e:	d15a      	bne.n	8008bd6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	627a      	str	r2, [r7, #36]	; 0x24
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	2302      	movs	r3, #2
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d03a      	beq.n	8008bb6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	2300      	movs	r3, #0
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	3301      	adds	r3, #1
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fd ff60 	bl	8006a22 <get_fat>
 8008b62:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d804      	bhi.n	8008b74 <f_lseek+0xa2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	755a      	strb	r2, [r3, #21]
 8008b70:	2302      	movs	r3, #2
 8008b72:	e1ce      	b.n	8008f12 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b7a:	d104      	bne.n	8008b86 <f_lseek+0xb4>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	755a      	strb	r2, [r3, #21]
 8008b82:	2301      	movs	r3, #1
 8008b84:	e1c5      	b.n	8008f12 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0de      	beq.n	8008b4e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d809      	bhi.n	8008bac <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8008b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d3c4      	bcc.n	8008b40 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bbc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d803      	bhi.n	8008bce <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e19f      	b.n	8008f0e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008bce:	2311      	movs	r3, #17
 8008bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008bd4:	e19b      	b.n	8008f0e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d902      	bls.n	8008be6 <f_lseek+0x114>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 818d 	beq.w	8008f0e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fe f9fe 	bl	8006ffc <clmt_clust>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7fd fee8 	bl	80069e4 <clust2sect>
 8008c14:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <f_lseek+0x154>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	755a      	strb	r2, [r3, #21]
 8008c22:	2302      	movs	r3, #2
 8008c24:	e175      	b.n	8008f12 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	8992      	ldrh	r2, [r2, #12]
 8008c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	8952      	ldrh	r2, [r2, #10]
 8008c36:	3a01      	subs	r2, #1
 8008c38:	4013      	ands	r3, r2
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	8992      	ldrh	r2, [r2, #12]
 8008c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c4c:	fb02 f201 	mul.w	r2, r2, r1
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 815b 	beq.w	8008f0e <f_lseek+0x43c>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f000 8155 	beq.w	8008f0e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7d1b      	ldrb	r3, [r3, #20]
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da18      	bge.n	8008ca0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	7858      	ldrb	r0, [r3, #1]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f7fd fb25 	bl	80062cc <disk_write>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <f_lseek+0x1c0>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	755a      	strb	r2, [r3, #21]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e13f      	b.n	8008f12 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7d1b      	ldrb	r3, [r3, #20]
 8008c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	7858      	ldrb	r0, [r3, #1]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008caa:	2301      	movs	r3, #1
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	f7fd faed 	bl	800628c <disk_read>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d004      	beq.n	8008cc2 <f_lseek+0x1f0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	755a      	strb	r2, [r3, #21]
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e127      	b.n	8008f12 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	621a      	str	r2, [r3, #32]
 8008cc8:	e121      	b.n	8008f0e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d908      	bls.n	8008ce6 <f_lseek+0x214>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7d1b      	ldrb	r3, [r3, #20]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80b5 	beq.w	8008e68 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	895b      	ldrh	r3, [r3, #10]
 8008d02:	461a      	mov	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	899b      	ldrh	r3, [r3, #12]
 8008d08:	fb03 f302 	mul.w	r3, r3, r2
 8008d0c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01b      	beq.n	8008d4c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	1e59      	subs	r1, r3, #1
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d30f      	bcc.n	8008d4c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	425b      	negs	r3, r3
 8008d34:	401a      	ands	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d4a:	e022      	b.n	8008d92 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d119      	bne.n	8008d8c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe f8b5 	bl	8006ecc <create_chain>
 8008d62:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d104      	bne.n	8008d74 <f_lseek+0x2a2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	755a      	strb	r2, [r3, #21]
 8008d70:	2302      	movs	r3, #2
 8008d72:	e0ce      	b.n	8008f12 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7a:	d104      	bne.n	8008d86 <f_lseek+0x2b4>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	755a      	strb	r2, [r3, #21]
 8008d82:	2301      	movs	r3, #1
 8008d84:	e0c5      	b.n	8008f12 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d8a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d90:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d067      	beq.n	8008e68 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008d98:	e03a      	b.n	8008e10 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699a      	ldr	r2, [r3, #24]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7d1b      	ldrb	r3, [r3, #20]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe f884 	bl	8006ecc <create_chain>
 8008dc4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d108      	bne.n	8008dde <f_lseek+0x30c>
							ofs = 0; break;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	e022      	b.n	8008e18 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fe23 	bl	8006a22 <get_fat>
 8008ddc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de4:	d104      	bne.n	8008df0 <f_lseek+0x31e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	755a      	strb	r2, [r3, #21]
 8008dec:	2301      	movs	r3, #1
 8008dee:	e090      	b.n	8008f12 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d904      	bls.n	8008e00 <f_lseek+0x32e>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d304      	bcc.n	8008e0a <f_lseek+0x338>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	755a      	strb	r2, [r3, #21]
 8008e06:	2302      	movs	r3, #2
 8008e08:	e083      	b.n	8008f12 <f_lseek+0x440>
					fp->clust = clst;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e0e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d8c0      	bhi.n	8008d9a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	441a      	add	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	899b      	ldrh	r3, [r3, #12]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e30:	fb02 f201 	mul.w	r2, r2, r1
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d016      	beq.n	8008e68 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fd fdd0 	bl	80069e4 <clust2sect>
 8008e44:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <f_lseek+0x384>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	755a      	strb	r2, [r3, #21]
 8008e52:	2302      	movs	r3, #2
 8008e54:	e05d      	b.n	8008f12 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	899b      	ldrh	r3, [r3, #12]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e64:	4413      	add	r3, r2
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d90a      	bls.n	8008e8a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
 8008e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	8992      	ldrh	r2, [r2, #12]
 8008e92:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e96:	fb02 f201 	mul.w	r2, r2, r1
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d036      	beq.n	8008f0e <f_lseek+0x43c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d031      	beq.n	8008f0e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7d1b      	ldrb	r3, [r3, #20]
 8008eae:	b25b      	sxtb	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da18      	bge.n	8008ee6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	7858      	ldrb	r0, [r3, #1]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f7fd fa02 	bl	80062cc <disk_write>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <f_lseek+0x406>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	755a      	strb	r2, [r3, #21]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e01c      	b.n	8008f12 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7d1b      	ldrb	r3, [r3, #20]
 8008edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	7858      	ldrb	r0, [r3, #1]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef4:	f7fd f9ca 	bl	800628c <disk_read>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d004      	beq.n	8008f08 <f_lseek+0x436>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	755a      	strb	r2, [r3, #21]
 8008f04:	2301      	movs	r3, #1
 8008f06:	e004      	b.n	8008f12 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f0c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3740      	adds	r7, #64	; 0x40
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <f_opendir+0x14>
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	e064      	b.n	8008ff8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008f32:	f107 010c 	add.w	r1, r7, #12
 8008f36:	463b      	mov	r3, r7
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fd62 	bl	8007a04 <find_volume>
 8008f40:	4603      	mov	r3, r0
 8008f42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d14f      	bne.n	8008fea <f_opendir+0xd0>
		obj->fs = fs;
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fe fc45 	bl	80077e4 <follow_path>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d13d      	bne.n	8008fe0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	db12      	blt.n	8008f96 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	799b      	ldrb	r3, [r3, #6]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00a      	beq.n	8008f92 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fe fa17 	bl	80073b8 <ld_clust>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	e001      	b.n	8008f96 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008f92:	2305      	movs	r3, #5
 8008f94:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d121      	bne.n	8008fe0 <f_opendir+0xc6>
				obj->id = fs->id;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88da      	ldrh	r2, [r3, #6]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe f860 	bl	800706c <dir_sdi>
 8008fac:	4603      	mov	r3, r0
 8008fae:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d114      	bne.n	8008fe0 <f_opendir+0xc6>
					if (obj->sclust) {
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00d      	beq.n	8008fda <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7fd fb3f 	bl	8006644 <inc_lock>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <f_opendir+0xc6>
 8008fd4:	2312      	movs	r3, #18
 8008fd6:	75fb      	strb	r3, [r7, #23]
 8008fd8:	e002      	b.n	8008fe0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d101      	bne.n	8008fea <f_opendir+0xd0>
 8008fe6:	2305      	movs	r3, #5
 8008fe8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <f_opendir+0xdc>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f107 0208 	add.w	r2, r7, #8
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe ff7a 	bl	8007f0c <validate>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d126      	bne.n	8009070 <f_readdir+0x70>
		if (!fno) {
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009028:	2100      	movs	r1, #0
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe f81e 	bl	800706c <dir_sdi>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
 8009034:	e01c      	b.n	8009070 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7fe f9fc 	bl	8007436 <dir_read>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b04      	cmp	r3, #4
 8009046:	d101      	bne.n	800904c <f_readdir+0x4c>
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10e      	bne.n	8009070 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe fad2 	bl	80075fe <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7fe f88e 	bl	800717e <dir_next>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d101      	bne.n	8009070 <f_readdir+0x70>
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b090      	sub	sp, #64	; 0x40
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009084:	f107 010c 	add.w	r1, r7, #12
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	2200      	movs	r2, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fcb9 	bl	8007a04 <find_volume>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800909c:	2b00      	cmp	r3, #0
 800909e:	d11f      	bne.n	80090e0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	f107 030c 	add.w	r3, r7, #12
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe fb9b 	bl	80077e4 <follow_path>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80090b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d111      	bne.n	80090e0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80090bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da03      	bge.n	80090ce <f_stat+0x54>
				res = FR_INVALID_NAME;
 80090c6:	2306      	movs	r3, #6
 80090c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80090cc:	e008      	b.n	80090e0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <f_stat+0x66>
 80090d4:	f107 030c 	add.w	r3, r7, #12
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fa8f 	bl	80075fe <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80090e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3740      	adds	r7, #64	; 0x40
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b092      	sub	sp, #72	; 0x48
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80090f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	2200      	movs	r2, #0
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fc7e 	bl	8007a04 <find_volume>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800910e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009112:	2b00      	cmp	r3, #0
 8009114:	f040 8099 	bne.w	800924a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	3b02      	subs	r3, #2
 8009128:	429a      	cmp	r2, r3
 800912a:	d804      	bhi.n	8009136 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	695a      	ldr	r2, [r3, #20]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e089      	b.n	800924a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d128      	bne.n	8009194 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009142:	2302      	movs	r3, #2
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009150:	4618      	mov	r0, r3
 8009152:	f7fd fc66 	bl	8006a22 <get_fat>
 8009156:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915e:	d103      	bne.n	8009168 <f_getfree+0x7c>
 8009160:	2301      	movs	r3, #1
 8009162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009166:	e063      	b.n	8009230 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d103      	bne.n	8009176 <f_getfree+0x8a>
 800916e:	2302      	movs	r3, #2
 8009170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009174:	e05c      	b.n	8009230 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <f_getfree+0x96>
 800917c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917e:	3301      	adds	r3, #1
 8009180:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009184:	3301      	adds	r3, #1
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800918e:	429a      	cmp	r2, r3
 8009190:	d3db      	bcc.n	800914a <f_getfree+0x5e>
 8009192:	e04d      	b.n	8009230 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	637b      	str	r3, [r7, #52]	; 0x34
 80091a4:	2300      	movs	r3, #0
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d113      	bne.n	80091d6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80091ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80091b6:	4619      	mov	r1, r3
 80091b8:	f7fd fb76 	bl	80068a8 <move_window>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80091c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d131      	bne.n	800922e <f_getfree+0x142>
							p = fs->win;
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	3334      	adds	r3, #52	; 0x34
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	899b      	ldrh	r3, [r3, #12]
 80091d4:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d10f      	bne.n	80091fe <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80091de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091e0:	f7fd f8b2 	bl	8006348 <ld_word>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <f_getfree+0x104>
 80091ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ec:	3301      	adds	r3, #1
 80091ee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	3302      	adds	r3, #2
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30
 80091f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f8:	3b02      	subs	r3, #2
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
 80091fc:	e010      	b.n	8009220 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80091fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009200:	f7fd f8ba 	bl	8006378 <ld_dword>
 8009204:	4603      	mov	r3, r0
 8009206:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <f_getfree+0x128>
 800920e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009210:	3301      	adds	r3, #1
 8009212:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	3304      	adds	r3, #4
 8009218:	633b      	str	r3, [r7, #48]	; 0x30
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	3b04      	subs	r3, #4
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	3b01      	subs	r3, #1
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1bd      	bne.n	80091a8 <f_getfree+0xbc>
 800922c:	e000      	b.n	8009230 <f_getfree+0x144>
							if (res != FR_OK) break;
 800922e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009234:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800923a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	791a      	ldrb	r2, [r3, #4]
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800924a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800924e:	4618      	mov	r0, r3
 8009250:	3748      	adds	r7, #72	; 0x48
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b096      	sub	sp, #88	; 0x58
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800925e:	f107 0108 	add.w	r1, r7, #8
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	2202      	movs	r2, #2
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fbcc 	bl	8007a04 <find_volume>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 80f2 	bne.w	8009464 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	f107 030c 	add.w	r3, r7, #12
 8009286:	4611      	mov	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe faab 	bl	80077e4 <follow_path>
 800928e:	4603      	mov	r3, r0
 8009290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <f_mkdir+0x4c>
 800929c:	2308      	movs	r3, #8
 800929e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80092a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	f040 80dc 	bne.w	8009464 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80092ac:	f107 030c 	add.w	r3, r7, #12
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd fe0a 	bl	8006ecc <create_chain>
 80092b8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	895b      	ldrh	r3, [r3, #10]
 80092be:	461a      	mov	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	899b      	ldrh	r3, [r3, #12]
 80092c4:	fb03 f302 	mul.w	r3, r3, r2
 80092c8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80092d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <f_mkdir+0x86>
 80092d6:	2307      	movs	r3, #7
 80092d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d102      	bne.n	80092e8 <f_mkdir+0x92>
 80092e2:	2302      	movs	r3, #2
 80092e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80092e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ee:	d102      	bne.n	80092f6 <f_mkdir+0xa0>
 80092f0:	2301      	movs	r3, #1
 80092f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80092f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <f_mkdir+0xb6>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4618      	mov	r0, r3
 8009302:	f7fd fa8d 	bl	8006820 <sync_window>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800930c:	f7fc fd4a 	bl	8005da4 <get_fattime>
 8009310:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009316:	2b00      	cmp	r3, #0
 8009318:	d16c      	bne.n	80093f4 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800931e:	4618      	mov	r0, r3
 8009320:	f7fd fb60 	bl	80069e4 <clust2sect>
 8009324:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	3334      	adds	r3, #52	; 0x34
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	899b      	ldrh	r3, [r3, #12]
 8009330:	461a      	mov	r2, r3
 8009332:	2100      	movs	r1, #0
 8009334:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009336:	f7fd f8aa 	bl	800648e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800933a:	220b      	movs	r2, #11
 800933c:	2120      	movs	r1, #32
 800933e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009340:	f7fd f8a5 	bl	800648e <mem_set>
					dir[DIR_Name] = '.';
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	222e      	movs	r2, #46	; 0x2e
 8009348:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	330b      	adds	r3, #11
 800934e:	2210      	movs	r2, #16
 8009350:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	3316      	adds	r3, #22
 8009356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd f84b 	bl	80063f4 <st_dword>
					st_clust(fs, dir, dcl);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe f846 	bl	80073f6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800936a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936c:	3320      	adds	r3, #32
 800936e:	2220      	movs	r2, #32
 8009370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd f86a 	bl	800644c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937a:	3321      	adds	r3, #33	; 0x21
 800937c:	222e      	movs	r2, #46	; 0x2e
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d106      	bne.n	800939a <f_mkdir+0x144>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009392:	429a      	cmp	r2, r3
 8009394:	d101      	bne.n	800939a <f_mkdir+0x144>
 8009396:	2300      	movs	r3, #0
 8009398:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800939a:	68b8      	ldr	r0, [r7, #8]
 800939c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939e:	3320      	adds	r3, #32
 80093a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a2:	4619      	mov	r1, r3
 80093a4:	f7fe f827 	bl	80073f6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	895b      	ldrh	r3, [r3, #10]
 80093ac:	653b      	str	r3, [r7, #80]	; 0x50
 80093ae:	e01c      	b.n	80093ea <f_mkdir+0x194>
					fs->winsect = dsc++;
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2201      	movs	r2, #1
 80093be:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fa2c 	bl	8006820 <sync_window>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80093ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10d      	bne.n	80093f2 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	2100      	movs	r1, #0
 80093de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093e0:	f7fd f855 	bl	800648e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80093e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e6:	3b01      	subs	r3, #1
 80093e8:	653b      	str	r3, [r7, #80]	; 0x50
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1df      	bne.n	80093b0 <f_mkdir+0x15a>
 80093f0:	e000      	b.n	80093f4 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80093f2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80093f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d107      	bne.n	800940c <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80093fc:	f107 030c 	add.w	r3, r7, #12
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe f8ca 	bl	800759a <dir_register>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800940c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009410:	2b00      	cmp	r3, #0
 8009412:	d120      	bne.n	8009456 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941a:	3316      	adds	r3, #22
 800941c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800941e:	4618      	mov	r0, r3
 8009420:	f7fc ffe8 	bl	80063f4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800942a:	4618      	mov	r0, r3
 800942c:	f7fd ffe3 	bl	80073f6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009432:	330b      	adds	r3, #11
 8009434:	2210      	movs	r2, #16
 8009436:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2201      	movs	r2, #1
 800943c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800943e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10e      	bne.n	8009464 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fd fa5b 	bl	8006904 <sync_fs>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009454:	e006      	b.n	8009464 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	2200      	movs	r2, #0
 800945c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800945e:	4618      	mov	r0, r3
 8009460:	f7fd fccf 	bl	8006e02 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8009468:	4618      	mov	r0, r3
 800946a:	3758      	adds	r7, #88	; 0x58
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 8009488:	7a5b      	ldrb	r3, [r3, #9]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d131      	bne.n	80094f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009490:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 8009492:	7a5b      	ldrb	r3, [r3, #9]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 800949a:	2100      	movs	r1, #0
 800949c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800949e:	4b19      	ldr	r3, [pc, #100]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094a0:	7a5b      	ldrb	r3, [r3, #9]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	4a17      	ldr	r2, [pc, #92]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80094ae:	4b15      	ldr	r3, [pc, #84]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094b0:	7a5b      	ldrb	r3, [r3, #9]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	4b13      	ldr	r3, [pc, #76]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094b8:	4413      	add	r3, r2
 80094ba:	79fa      	ldrb	r2, [r7, #7]
 80094bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094be:	4b11      	ldr	r3, [pc, #68]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094c0:	7a5b      	ldrb	r3, [r3, #9]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	b2d1      	uxtb	r1, r2
 80094c8:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <FATFS_LinkDriverEx+0x94>)
 80094ca:	7251      	strb	r1, [r2, #9]
 80094cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094ce:	7dbb      	ldrb	r3, [r7, #22]
 80094d0:	3330      	adds	r3, #48	; 0x30
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	3301      	adds	r3, #1
 80094dc:	223a      	movs	r2, #58	; 0x3a
 80094de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3302      	adds	r3, #2
 80094e4:	222f      	movs	r2, #47	; 0x2f
 80094e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3303      	adds	r3, #3
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	200010f8 	.word	0x200010f8

08009508 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009512:	2200      	movs	r2, #0
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff ffaa 	bl	8009470 <FATFS_LinkDriverEx>
 800951c:	4603      	mov	r3, r0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <__errno>:
 8009528:	4b01      	ldr	r3, [pc, #4]	; (8009530 <__errno+0x8>)
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	20000044 	.word	0x20000044

08009534 <__libc_init_array>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4d0d      	ldr	r5, [pc, #52]	; (800956c <__libc_init_array+0x38>)
 8009538:	4c0d      	ldr	r4, [pc, #52]	; (8009570 <__libc_init_array+0x3c>)
 800953a:	1b64      	subs	r4, r4, r5
 800953c:	10a4      	asrs	r4, r4, #2
 800953e:	2600      	movs	r6, #0
 8009540:	42a6      	cmp	r6, r4
 8009542:	d109      	bne.n	8009558 <__libc_init_array+0x24>
 8009544:	4d0b      	ldr	r5, [pc, #44]	; (8009574 <__libc_init_array+0x40>)
 8009546:	4c0c      	ldr	r4, [pc, #48]	; (8009578 <__libc_init_array+0x44>)
 8009548:	f001 f9be 	bl	800a8c8 <_init>
 800954c:	1b64      	subs	r4, r4, r5
 800954e:	10a4      	asrs	r4, r4, #2
 8009550:	2600      	movs	r6, #0
 8009552:	42a6      	cmp	r6, r4
 8009554:	d105      	bne.n	8009562 <__libc_init_array+0x2e>
 8009556:	bd70      	pop	{r4, r5, r6, pc}
 8009558:	f855 3b04 	ldr.w	r3, [r5], #4
 800955c:	4798      	blx	r3
 800955e:	3601      	adds	r6, #1
 8009560:	e7ee      	b.n	8009540 <__libc_init_array+0xc>
 8009562:	f855 3b04 	ldr.w	r3, [r5], #4
 8009566:	4798      	blx	r3
 8009568:	3601      	adds	r6, #1
 800956a:	e7f2      	b.n	8009552 <__libc_init_array+0x1e>
 800956c:	0800ae3c 	.word	0x0800ae3c
 8009570:	0800ae3c 	.word	0x0800ae3c
 8009574:	0800ae3c 	.word	0x0800ae3c
 8009578:	0800ae40 	.word	0x0800ae40

0800957c <memset>:
 800957c:	4402      	add	r2, r0
 800957e:	4603      	mov	r3, r0
 8009580:	4293      	cmp	r3, r2
 8009582:	d100      	bne.n	8009586 <memset+0xa>
 8009584:	4770      	bx	lr
 8009586:	f803 1b01 	strb.w	r1, [r3], #1
 800958a:	e7f9      	b.n	8009580 <memset+0x4>

0800958c <iprintf>:
 800958c:	b40f      	push	{r0, r1, r2, r3}
 800958e:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <iprintf+0x2c>)
 8009590:	b513      	push	{r0, r1, r4, lr}
 8009592:	681c      	ldr	r4, [r3, #0]
 8009594:	b124      	cbz	r4, 80095a0 <iprintf+0x14>
 8009596:	69a3      	ldr	r3, [r4, #24]
 8009598:	b913      	cbnz	r3, 80095a0 <iprintf+0x14>
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fa7e 	bl	8009a9c <__sinit>
 80095a0:	ab05      	add	r3, sp, #20
 80095a2:	9a04      	ldr	r2, [sp, #16]
 80095a4:	68a1      	ldr	r1, [r4, #8]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fdab 	bl	800a104 <_vfiprintf_r>
 80095ae:	b002      	add	sp, #8
 80095b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b4:	b004      	add	sp, #16
 80095b6:	4770      	bx	lr
 80095b8:	20000044 	.word	0x20000044

080095bc <_puts_r>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	460e      	mov	r6, r1
 80095c0:	4605      	mov	r5, r0
 80095c2:	b118      	cbz	r0, 80095cc <_puts_r+0x10>
 80095c4:	6983      	ldr	r3, [r0, #24]
 80095c6:	b90b      	cbnz	r3, 80095cc <_puts_r+0x10>
 80095c8:	f000 fa68 	bl	8009a9c <__sinit>
 80095cc:	69ab      	ldr	r3, [r5, #24]
 80095ce:	68ac      	ldr	r4, [r5, #8]
 80095d0:	b913      	cbnz	r3, 80095d8 <_puts_r+0x1c>
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 fa62 	bl	8009a9c <__sinit>
 80095d8:	4b2c      	ldr	r3, [pc, #176]	; (800968c <_puts_r+0xd0>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	d120      	bne.n	8009620 <_puts_r+0x64>
 80095de:	686c      	ldr	r4, [r5, #4]
 80095e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e2:	07db      	lsls	r3, r3, #31
 80095e4:	d405      	bmi.n	80095f2 <_puts_r+0x36>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	0598      	lsls	r0, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_puts_r+0x36>
 80095ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ee:	f000 faf3 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	0719      	lsls	r1, r3, #28
 80095f6:	d51d      	bpl.n	8009634 <_puts_r+0x78>
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	b1db      	cbz	r3, 8009634 <_puts_r+0x78>
 80095fc:	3e01      	subs	r6, #1
 80095fe:	68a3      	ldr	r3, [r4, #8]
 8009600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009604:	3b01      	subs	r3, #1
 8009606:	60a3      	str	r3, [r4, #8]
 8009608:	bb39      	cbnz	r1, 800965a <_puts_r+0x9e>
 800960a:	2b00      	cmp	r3, #0
 800960c:	da38      	bge.n	8009680 <_puts_r+0xc4>
 800960e:	4622      	mov	r2, r4
 8009610:	210a      	movs	r1, #10
 8009612:	4628      	mov	r0, r5
 8009614:	f000 f868 	bl	80096e8 <__swbuf_r>
 8009618:	3001      	adds	r0, #1
 800961a:	d011      	beq.n	8009640 <_puts_r+0x84>
 800961c:	250a      	movs	r5, #10
 800961e:	e011      	b.n	8009644 <_puts_r+0x88>
 8009620:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <_puts_r+0xd4>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d101      	bne.n	800962a <_puts_r+0x6e>
 8009626:	68ac      	ldr	r4, [r5, #8]
 8009628:	e7da      	b.n	80095e0 <_puts_r+0x24>
 800962a:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <_puts_r+0xd8>)
 800962c:	429c      	cmp	r4, r3
 800962e:	bf08      	it	eq
 8009630:	68ec      	ldreq	r4, [r5, #12]
 8009632:	e7d5      	b.n	80095e0 <_puts_r+0x24>
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f8a8 	bl	800978c <__swsetup_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	d0dd      	beq.n	80095fc <_puts_r+0x40>
 8009640:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009646:	07da      	lsls	r2, r3, #31
 8009648:	d405      	bmi.n	8009656 <_puts_r+0x9a>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	059b      	lsls	r3, r3, #22
 800964e:	d402      	bmi.n	8009656 <_puts_r+0x9a>
 8009650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009652:	f000 fac2 	bl	8009bda <__retarget_lock_release_recursive>
 8009656:	4628      	mov	r0, r5
 8009658:	bd70      	pop	{r4, r5, r6, pc}
 800965a:	2b00      	cmp	r3, #0
 800965c:	da04      	bge.n	8009668 <_puts_r+0xac>
 800965e:	69a2      	ldr	r2, [r4, #24]
 8009660:	429a      	cmp	r2, r3
 8009662:	dc06      	bgt.n	8009672 <_puts_r+0xb6>
 8009664:	290a      	cmp	r1, #10
 8009666:	d004      	beq.n	8009672 <_puts_r+0xb6>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	6022      	str	r2, [r4, #0]
 800966e:	7019      	strb	r1, [r3, #0]
 8009670:	e7c5      	b.n	80095fe <_puts_r+0x42>
 8009672:	4622      	mov	r2, r4
 8009674:	4628      	mov	r0, r5
 8009676:	f000 f837 	bl	80096e8 <__swbuf_r>
 800967a:	3001      	adds	r0, #1
 800967c:	d1bf      	bne.n	80095fe <_puts_r+0x42>
 800967e:	e7df      	b.n	8009640 <_puts_r+0x84>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	250a      	movs	r5, #10
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	6022      	str	r2, [r4, #0]
 8009688:	701d      	strb	r5, [r3, #0]
 800968a:	e7db      	b.n	8009644 <_puts_r+0x88>
 800968c:	0800adc0 	.word	0x0800adc0
 8009690:	0800ade0 	.word	0x0800ade0
 8009694:	0800ada0 	.word	0x0800ada0

08009698 <puts>:
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <puts+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f7ff bf8d 	b.w	80095bc <_puts_r>
 80096a2:	bf00      	nop
 80096a4:	20000044 	.word	0x20000044

080096a8 <siprintf>:
 80096a8:	b40e      	push	{r1, r2, r3}
 80096aa:	b500      	push	{lr}
 80096ac:	b09c      	sub	sp, #112	; 0x70
 80096ae:	ab1d      	add	r3, sp, #116	; 0x74
 80096b0:	9002      	str	r0, [sp, #8]
 80096b2:	9006      	str	r0, [sp, #24]
 80096b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096b8:	4809      	ldr	r0, [pc, #36]	; (80096e0 <siprintf+0x38>)
 80096ba:	9107      	str	r1, [sp, #28]
 80096bc:	9104      	str	r1, [sp, #16]
 80096be:	4909      	ldr	r1, [pc, #36]	; (80096e4 <siprintf+0x3c>)
 80096c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c4:	9105      	str	r1, [sp, #20]
 80096c6:	6800      	ldr	r0, [r0, #0]
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	a902      	add	r1, sp, #8
 80096cc:	f000 fbf0 	bl	8009eb0 <_svfiprintf_r>
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	b01c      	add	sp, #112	; 0x70
 80096d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096dc:	b003      	add	sp, #12
 80096de:	4770      	bx	lr
 80096e0:	20000044 	.word	0x20000044
 80096e4:	ffff0208 	.word	0xffff0208

080096e8 <__swbuf_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	460e      	mov	r6, r1
 80096ec:	4614      	mov	r4, r2
 80096ee:	4605      	mov	r5, r0
 80096f0:	b118      	cbz	r0, 80096fa <__swbuf_r+0x12>
 80096f2:	6983      	ldr	r3, [r0, #24]
 80096f4:	b90b      	cbnz	r3, 80096fa <__swbuf_r+0x12>
 80096f6:	f000 f9d1 	bl	8009a9c <__sinit>
 80096fa:	4b21      	ldr	r3, [pc, #132]	; (8009780 <__swbuf_r+0x98>)
 80096fc:	429c      	cmp	r4, r3
 80096fe:	d12b      	bne.n	8009758 <__swbuf_r+0x70>
 8009700:	686c      	ldr	r4, [r5, #4]
 8009702:	69a3      	ldr	r3, [r4, #24]
 8009704:	60a3      	str	r3, [r4, #8]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	071a      	lsls	r2, r3, #28
 800970a:	d52f      	bpl.n	800976c <__swbuf_r+0x84>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	b36b      	cbz	r3, 800976c <__swbuf_r+0x84>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	6820      	ldr	r0, [r4, #0]
 8009714:	1ac0      	subs	r0, r0, r3
 8009716:	6963      	ldr	r3, [r4, #20]
 8009718:	b2f6      	uxtb	r6, r6
 800971a:	4283      	cmp	r3, r0
 800971c:	4637      	mov	r7, r6
 800971e:	dc04      	bgt.n	800972a <__swbuf_r+0x42>
 8009720:	4621      	mov	r1, r4
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f926 	bl	8009974 <_fflush_r>
 8009728:	bb30      	cbnz	r0, 8009778 <__swbuf_r+0x90>
 800972a:	68a3      	ldr	r3, [r4, #8]
 800972c:	3b01      	subs	r3, #1
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	6022      	str	r2, [r4, #0]
 8009736:	701e      	strb	r6, [r3, #0]
 8009738:	6963      	ldr	r3, [r4, #20]
 800973a:	3001      	adds	r0, #1
 800973c:	4283      	cmp	r3, r0
 800973e:	d004      	beq.n	800974a <__swbuf_r+0x62>
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	07db      	lsls	r3, r3, #31
 8009744:	d506      	bpl.n	8009754 <__swbuf_r+0x6c>
 8009746:	2e0a      	cmp	r6, #10
 8009748:	d104      	bne.n	8009754 <__swbuf_r+0x6c>
 800974a:	4621      	mov	r1, r4
 800974c:	4628      	mov	r0, r5
 800974e:	f000 f911 	bl	8009974 <_fflush_r>
 8009752:	b988      	cbnz	r0, 8009778 <__swbuf_r+0x90>
 8009754:	4638      	mov	r0, r7
 8009756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <__swbuf_r+0x9c>)
 800975a:	429c      	cmp	r4, r3
 800975c:	d101      	bne.n	8009762 <__swbuf_r+0x7a>
 800975e:	68ac      	ldr	r4, [r5, #8]
 8009760:	e7cf      	b.n	8009702 <__swbuf_r+0x1a>
 8009762:	4b09      	ldr	r3, [pc, #36]	; (8009788 <__swbuf_r+0xa0>)
 8009764:	429c      	cmp	r4, r3
 8009766:	bf08      	it	eq
 8009768:	68ec      	ldreq	r4, [r5, #12]
 800976a:	e7ca      	b.n	8009702 <__swbuf_r+0x1a>
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f80c 	bl	800978c <__swsetup_r>
 8009774:	2800      	cmp	r0, #0
 8009776:	d0cb      	beq.n	8009710 <__swbuf_r+0x28>
 8009778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800977c:	e7ea      	b.n	8009754 <__swbuf_r+0x6c>
 800977e:	bf00      	nop
 8009780:	0800adc0 	.word	0x0800adc0
 8009784:	0800ade0 	.word	0x0800ade0
 8009788:	0800ada0 	.word	0x0800ada0

0800978c <__swsetup_r>:
 800978c:	4b32      	ldr	r3, [pc, #200]	; (8009858 <__swsetup_r+0xcc>)
 800978e:	b570      	push	{r4, r5, r6, lr}
 8009790:	681d      	ldr	r5, [r3, #0]
 8009792:	4606      	mov	r6, r0
 8009794:	460c      	mov	r4, r1
 8009796:	b125      	cbz	r5, 80097a2 <__swsetup_r+0x16>
 8009798:	69ab      	ldr	r3, [r5, #24]
 800979a:	b913      	cbnz	r3, 80097a2 <__swsetup_r+0x16>
 800979c:	4628      	mov	r0, r5
 800979e:	f000 f97d 	bl	8009a9c <__sinit>
 80097a2:	4b2e      	ldr	r3, [pc, #184]	; (800985c <__swsetup_r+0xd0>)
 80097a4:	429c      	cmp	r4, r3
 80097a6:	d10f      	bne.n	80097c8 <__swsetup_r+0x3c>
 80097a8:	686c      	ldr	r4, [r5, #4]
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097b0:	0719      	lsls	r1, r3, #28
 80097b2:	d42c      	bmi.n	800980e <__swsetup_r+0x82>
 80097b4:	06dd      	lsls	r5, r3, #27
 80097b6:	d411      	bmi.n	80097dc <__swsetup_r+0x50>
 80097b8:	2309      	movs	r3, #9
 80097ba:	6033      	str	r3, [r6, #0]
 80097bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097c6:	e03e      	b.n	8009846 <__swsetup_r+0xba>
 80097c8:	4b25      	ldr	r3, [pc, #148]	; (8009860 <__swsetup_r+0xd4>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <__swsetup_r+0x46>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7eb      	b.n	80097aa <__swsetup_r+0x1e>
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <__swsetup_r+0xd8>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7e6      	b.n	80097aa <__swsetup_r+0x1e>
 80097dc:	0758      	lsls	r0, r3, #29
 80097de:	d512      	bpl.n	8009806 <__swsetup_r+0x7a>
 80097e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e2:	b141      	cbz	r1, 80097f6 <__swsetup_r+0x6a>
 80097e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e8:	4299      	cmp	r1, r3
 80097ea:	d002      	beq.n	80097f2 <__swsetup_r+0x66>
 80097ec:	4630      	mov	r0, r6
 80097ee:	f000 fa59 	bl	8009ca4 <_free_r>
 80097f2:	2300      	movs	r3, #0
 80097f4:	6363      	str	r3, [r4, #52]	; 0x34
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	2300      	movs	r3, #0
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f043 0308 	orr.w	r3, r3, #8
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	b94b      	cbnz	r3, 8009826 <__swsetup_r+0x9a>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800981c:	d003      	beq.n	8009826 <__swsetup_r+0x9a>
 800981e:	4621      	mov	r1, r4
 8009820:	4630      	mov	r0, r6
 8009822:	f000 f9ff 	bl	8009c24 <__smakebuf_r>
 8009826:	89a0      	ldrh	r0, [r4, #12]
 8009828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800982c:	f010 0301 	ands.w	r3, r0, #1
 8009830:	d00a      	beq.n	8009848 <__swsetup_r+0xbc>
 8009832:	2300      	movs	r3, #0
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	6963      	ldr	r3, [r4, #20]
 8009838:	425b      	negs	r3, r3
 800983a:	61a3      	str	r3, [r4, #24]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	b943      	cbnz	r3, 8009852 <__swsetup_r+0xc6>
 8009840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009844:	d1ba      	bne.n	80097bc <__swsetup_r+0x30>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	0781      	lsls	r1, r0, #30
 800984a:	bf58      	it	pl
 800984c:	6963      	ldrpl	r3, [r4, #20]
 800984e:	60a3      	str	r3, [r4, #8]
 8009850:	e7f4      	b.n	800983c <__swsetup_r+0xb0>
 8009852:	2000      	movs	r0, #0
 8009854:	e7f7      	b.n	8009846 <__swsetup_r+0xba>
 8009856:	bf00      	nop
 8009858:	20000044 	.word	0x20000044
 800985c:	0800adc0 	.word	0x0800adc0
 8009860:	0800ade0 	.word	0x0800ade0
 8009864:	0800ada0 	.word	0x0800ada0

08009868 <__sflush_r>:
 8009868:	898a      	ldrh	r2, [r1, #12]
 800986a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	4605      	mov	r5, r0
 8009870:	0710      	lsls	r0, r2, #28
 8009872:	460c      	mov	r4, r1
 8009874:	d458      	bmi.n	8009928 <__sflush_r+0xc0>
 8009876:	684b      	ldr	r3, [r1, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc05      	bgt.n	8009888 <__sflush_r+0x20>
 800987c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	dc02      	bgt.n	8009888 <__sflush_r+0x20>
 8009882:	2000      	movs	r0, #0
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800988a:	2e00      	cmp	r6, #0
 800988c:	d0f9      	beq.n	8009882 <__sflush_r+0x1a>
 800988e:	2300      	movs	r3, #0
 8009890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009894:	682f      	ldr	r7, [r5, #0]
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	d032      	beq.n	8009900 <__sflush_r+0x98>
 800989a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	075a      	lsls	r2, r3, #29
 80098a0:	d505      	bpl.n	80098ae <__sflush_r+0x46>
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	1ac0      	subs	r0, r0, r3
 80098a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a8:	b10b      	cbz	r3, 80098ae <__sflush_r+0x46>
 80098aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ac:	1ac0      	subs	r0, r0, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	4602      	mov	r2, r0
 80098b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b4:	6a21      	ldr	r1, [r4, #32]
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b0      	blx	r6
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	d106      	bne.n	80098ce <__sflush_r+0x66>
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	291d      	cmp	r1, #29
 80098c4:	d82c      	bhi.n	8009920 <__sflush_r+0xb8>
 80098c6:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <__sflush_r+0x108>)
 80098c8:	40ca      	lsrs	r2, r1
 80098ca:	07d6      	lsls	r6, r2, #31
 80098cc:	d528      	bpl.n	8009920 <__sflush_r+0xb8>
 80098ce:	2200      	movs	r2, #0
 80098d0:	6062      	str	r2, [r4, #4]
 80098d2:	04d9      	lsls	r1, r3, #19
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	d504      	bpl.n	80098e4 <__sflush_r+0x7c>
 80098da:	1c42      	adds	r2, r0, #1
 80098dc:	d101      	bne.n	80098e2 <__sflush_r+0x7a>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	b903      	cbnz	r3, 80098e4 <__sflush_r+0x7c>
 80098e2:	6560      	str	r0, [r4, #84]	; 0x54
 80098e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e6:	602f      	str	r7, [r5, #0]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d0ca      	beq.n	8009882 <__sflush_r+0x1a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__sflush_r+0x92>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 f9d5 	bl	8009ca4 <_free_r>
 80098fa:	2000      	movs	r0, #0
 80098fc:	6360      	str	r0, [r4, #52]	; 0x34
 80098fe:	e7c1      	b.n	8009884 <__sflush_r+0x1c>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	2301      	movs	r3, #1
 8009904:	4628      	mov	r0, r5
 8009906:	47b0      	blx	r6
 8009908:	1c41      	adds	r1, r0, #1
 800990a:	d1c7      	bne.n	800989c <__sflush_r+0x34>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c4      	beq.n	800989c <__sflush_r+0x34>
 8009912:	2b1d      	cmp	r3, #29
 8009914:	d001      	beq.n	800991a <__sflush_r+0xb2>
 8009916:	2b16      	cmp	r3, #22
 8009918:	d101      	bne.n	800991e <__sflush_r+0xb6>
 800991a:	602f      	str	r7, [r5, #0]
 800991c:	e7b1      	b.n	8009882 <__sflush_r+0x1a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7ad      	b.n	8009884 <__sflush_r+0x1c>
 8009928:	690f      	ldr	r7, [r1, #16]
 800992a:	2f00      	cmp	r7, #0
 800992c:	d0a9      	beq.n	8009882 <__sflush_r+0x1a>
 800992e:	0793      	lsls	r3, r2, #30
 8009930:	680e      	ldr	r6, [r1, #0]
 8009932:	bf08      	it	eq
 8009934:	694b      	ldreq	r3, [r1, #20]
 8009936:	600f      	str	r7, [r1, #0]
 8009938:	bf18      	it	ne
 800993a:	2300      	movne	r3, #0
 800993c:	eba6 0807 	sub.w	r8, r6, r7
 8009940:	608b      	str	r3, [r1, #8]
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	dd9c      	ble.n	8009882 <__sflush_r+0x1a>
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800994c:	4643      	mov	r3, r8
 800994e:	463a      	mov	r2, r7
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	2800      	cmp	r0, #0
 8009956:	dc06      	bgt.n	8009966 <__sflush_r+0xfe>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009964:	e78e      	b.n	8009884 <__sflush_r+0x1c>
 8009966:	4407      	add	r7, r0
 8009968:	eba8 0800 	sub.w	r8, r8, r0
 800996c:	e7e9      	b.n	8009942 <__sflush_r+0xda>
 800996e:	bf00      	nop
 8009970:	20400001 	.word	0x20400001

08009974 <_fflush_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	690b      	ldr	r3, [r1, #16]
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b913      	cbnz	r3, 8009984 <_fflush_r+0x10>
 800997e:	2500      	movs	r5, #0
 8009980:	4628      	mov	r0, r5
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	b118      	cbz	r0, 800998e <_fflush_r+0x1a>
 8009986:	6983      	ldr	r3, [r0, #24]
 8009988:	b90b      	cbnz	r3, 800998e <_fflush_r+0x1a>
 800998a:	f000 f887 	bl	8009a9c <__sinit>
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <_fflush_r+0x6c>)
 8009990:	429c      	cmp	r4, r3
 8009992:	d11b      	bne.n	80099cc <_fflush_r+0x58>
 8009994:	686c      	ldr	r4, [r5, #4]
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ef      	beq.n	800997e <_fflush_r+0xa>
 800999e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a0:	07d0      	lsls	r0, r2, #31
 80099a2:	d404      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a4:	0599      	lsls	r1, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f000 f915 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 80099ae:	4628      	mov	r0, r5
 80099b0:	4621      	mov	r1, r4
 80099b2:	f7ff ff59 	bl	8009868 <__sflush_r>
 80099b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b8:	07da      	lsls	r2, r3, #31
 80099ba:	4605      	mov	r5, r0
 80099bc:	d4e0      	bmi.n	8009980 <_fflush_r+0xc>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	059b      	lsls	r3, r3, #22
 80099c2:	d4dd      	bmi.n	8009980 <_fflush_r+0xc>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f000 f908 	bl	8009bda <__retarget_lock_release_recursive>
 80099ca:	e7d9      	b.n	8009980 <_fflush_r+0xc>
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <_fflush_r+0x70>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d101      	bne.n	80099d6 <_fflush_r+0x62>
 80099d2:	68ac      	ldr	r4, [r5, #8]
 80099d4:	e7df      	b.n	8009996 <_fflush_r+0x22>
 80099d6:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <_fflush_r+0x74>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	bf08      	it	eq
 80099dc:	68ec      	ldreq	r4, [r5, #12]
 80099de:	e7da      	b.n	8009996 <_fflush_r+0x22>
 80099e0:	0800adc0 	.word	0x0800adc0
 80099e4:	0800ade0 	.word	0x0800ade0
 80099e8:	0800ada0 	.word	0x0800ada0

080099ec <std>:
 80099ec:	2300      	movs	r3, #0
 80099ee:	b510      	push	{r4, lr}
 80099f0:	4604      	mov	r4, r0
 80099f2:	e9c0 3300 	strd	r3, r3, [r0]
 80099f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099fa:	6083      	str	r3, [r0, #8]
 80099fc:	8181      	strh	r1, [r0, #12]
 80099fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009a00:	81c2      	strh	r2, [r0, #14]
 8009a02:	6183      	str	r3, [r0, #24]
 8009a04:	4619      	mov	r1, r3
 8009a06:	2208      	movs	r2, #8
 8009a08:	305c      	adds	r0, #92	; 0x5c
 8009a0a:	f7ff fdb7 	bl	800957c <memset>
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <std+0x38>)
 8009a10:	6263      	str	r3, [r4, #36]	; 0x24
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <std+0x3c>)
 8009a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <std+0x40>)
 8009a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <std+0x44>)
 8009a1c:	6224      	str	r4, [r4, #32]
 8009a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	0800a6ad 	.word	0x0800a6ad
 8009a28:	0800a6cf 	.word	0x0800a6cf
 8009a2c:	0800a707 	.word	0x0800a707
 8009a30:	0800a72b 	.word	0x0800a72b

08009a34 <_cleanup_r>:
 8009a34:	4901      	ldr	r1, [pc, #4]	; (8009a3c <_cleanup_r+0x8>)
 8009a36:	f000 b8af 	b.w	8009b98 <_fwalk_reent>
 8009a3a:	bf00      	nop
 8009a3c:	08009975 	.word	0x08009975

08009a40 <__sfmoreglue>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	1e4a      	subs	r2, r1, #1
 8009a44:	2568      	movs	r5, #104	; 0x68
 8009a46:	4355      	muls	r5, r2
 8009a48:	460e      	mov	r6, r1
 8009a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a4e:	f000 f979 	bl	8009d44 <_malloc_r>
 8009a52:	4604      	mov	r4, r0
 8009a54:	b140      	cbz	r0, 8009a68 <__sfmoreglue+0x28>
 8009a56:	2100      	movs	r1, #0
 8009a58:	e9c0 1600 	strd	r1, r6, [r0]
 8009a5c:	300c      	adds	r0, #12
 8009a5e:	60a0      	str	r0, [r4, #8]
 8009a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a64:	f7ff fd8a 	bl	800957c <memset>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}

08009a6c <__sfp_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_acquire+0x8>)
 8009a6e:	f000 b8b3 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	20003428 	.word	0x20003428

08009a78 <__sfp_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sfp_lock_release+0x8>)
 8009a7a:	f000 b8ae 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20003428 	.word	0x20003428

08009a84 <__sinit_lock_acquire>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__sinit_lock_acquire+0x8>)
 8009a86:	f000 b8a7 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20003423 	.word	0x20003423

08009a90 <__sinit_lock_release>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__sinit_lock_release+0x8>)
 8009a92:	f000 b8a2 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a96:	bf00      	nop
 8009a98:	20003423 	.word	0x20003423

08009a9c <__sinit>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	f7ff fff0 	bl	8009a84 <__sinit_lock_acquire>
 8009aa4:	69a3      	ldr	r3, [r4, #24]
 8009aa6:	b11b      	cbz	r3, 8009ab0 <__sinit+0x14>
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f7ff bff0 	b.w	8009a90 <__sinit_lock_release>
 8009ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <__sinit+0x68>)
 8009ab8:	4a13      	ldr	r2, [pc, #76]	; (8009b08 <__sinit+0x6c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	bf04      	itt	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	61a3      	streq	r3, [r4, #24]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 f820 	bl	8009b0c <__sfp>
 8009acc:	6060      	str	r0, [r4, #4]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f81c 	bl	8009b0c <__sfp>
 8009ad4:	60a0      	str	r0, [r4, #8]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f818 	bl	8009b0c <__sfp>
 8009adc:	2200      	movs	r2, #0
 8009ade:	60e0      	str	r0, [r4, #12]
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	6860      	ldr	r0, [r4, #4]
 8009ae4:	f7ff ff82 	bl	80099ec <std>
 8009ae8:	68a0      	ldr	r0, [r4, #8]
 8009aea:	2201      	movs	r2, #1
 8009aec:	2109      	movs	r1, #9
 8009aee:	f7ff ff7d 	bl	80099ec <std>
 8009af2:	68e0      	ldr	r0, [r4, #12]
 8009af4:	2202      	movs	r2, #2
 8009af6:	2112      	movs	r1, #18
 8009af8:	f7ff ff78 	bl	80099ec <std>
 8009afc:	2301      	movs	r3, #1
 8009afe:	61a3      	str	r3, [r4, #24]
 8009b00:	e7d2      	b.n	8009aa8 <__sinit+0xc>
 8009b02:	bf00      	nop
 8009b04:	0800ad9c 	.word	0x0800ad9c
 8009b08:	08009a35 	.word	0x08009a35

08009b0c <__sfp>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	4607      	mov	r7, r0
 8009b10:	f7ff ffac 	bl	8009a6c <__sfp_lock_acquire>
 8009b14:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <__sfp+0x84>)
 8009b16:	681e      	ldr	r6, [r3, #0]
 8009b18:	69b3      	ldr	r3, [r6, #24]
 8009b1a:	b913      	cbnz	r3, 8009b22 <__sfp+0x16>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ffbd 	bl	8009a9c <__sinit>
 8009b22:	3648      	adds	r6, #72	; 0x48
 8009b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	d503      	bpl.n	8009b34 <__sfp+0x28>
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	b30b      	cbz	r3, 8009b74 <__sfp+0x68>
 8009b30:	6836      	ldr	r6, [r6, #0]
 8009b32:	e7f7      	b.n	8009b24 <__sfp+0x18>
 8009b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b38:	b9d5      	cbnz	r5, 8009b70 <__sfp+0x64>
 8009b3a:	4b16      	ldr	r3, [pc, #88]	; (8009b94 <__sfp+0x88>)
 8009b3c:	60e3      	str	r3, [r4, #12]
 8009b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b42:	6665      	str	r5, [r4, #100]	; 0x64
 8009b44:	f000 f847 	bl	8009bd6 <__retarget_lock_init_recursive>
 8009b48:	f7ff ff96 	bl	8009a78 <__sfp_lock_release>
 8009b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b54:	6025      	str	r5, [r4, #0]
 8009b56:	61a5      	str	r5, [r4, #24]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b60:	f7ff fd0c 	bl	800957c <memset>
 8009b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	3468      	adds	r4, #104	; 0x68
 8009b72:	e7d9      	b.n	8009b28 <__sfp+0x1c>
 8009b74:	2104      	movs	r1, #4
 8009b76:	4638      	mov	r0, r7
 8009b78:	f7ff ff62 	bl	8009a40 <__sfmoreglue>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	6030      	str	r0, [r6, #0]
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1d5      	bne.n	8009b30 <__sfp+0x24>
 8009b84:	f7ff ff78 	bl	8009a78 <__sfp_lock_release>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	e7ee      	b.n	8009b6c <__sfp+0x60>
 8009b8e:	bf00      	nop
 8009b90:	0800ad9c 	.word	0x0800ad9c
 8009b94:	ffff0001 	.word	0xffff0001

08009b98 <_fwalk_reent>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	4688      	mov	r8, r1
 8009ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ba4:	2700      	movs	r7, #0
 8009ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009baa:	f1b9 0901 	subs.w	r9, r9, #1
 8009bae:	d505      	bpl.n	8009bbc <_fwalk_reent+0x24>
 8009bb0:	6824      	ldr	r4, [r4, #0]
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1f7      	bne.n	8009ba6 <_fwalk_reent+0xe>
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bbc:	89ab      	ldrh	r3, [r5, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d907      	bls.n	8009bd2 <_fwalk_reent+0x3a>
 8009bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	d003      	beq.n	8009bd2 <_fwalk_reent+0x3a>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	47c0      	blx	r8
 8009bd0:	4307      	orrs	r7, r0
 8009bd2:	3568      	adds	r5, #104	; 0x68
 8009bd4:	e7e9      	b.n	8009baa <_fwalk_reent+0x12>

08009bd6 <__retarget_lock_init_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <__retarget_lock_acquire_recursive>:
 8009bd8:	4770      	bx	lr

08009bda <__retarget_lock_release_recursive>:
 8009bda:	4770      	bx	lr

08009bdc <__swhatbuf_r>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be4:	2900      	cmp	r1, #0
 8009be6:	b096      	sub	sp, #88	; 0x58
 8009be8:	4614      	mov	r4, r2
 8009bea:	461d      	mov	r5, r3
 8009bec:	da07      	bge.n	8009bfe <__swhatbuf_r+0x22>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	602b      	str	r3, [r5, #0]
 8009bf2:	89b3      	ldrh	r3, [r6, #12]
 8009bf4:	061a      	lsls	r2, r3, #24
 8009bf6:	d410      	bmi.n	8009c1a <__swhatbuf_r+0x3e>
 8009bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfc:	e00e      	b.n	8009c1c <__swhatbuf_r+0x40>
 8009bfe:	466a      	mov	r2, sp
 8009c00:	f000 fdba 	bl	800a778 <_fstat_r>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	dbf2      	blt.n	8009bee <__swhatbuf_r+0x12>
 8009c08:	9a01      	ldr	r2, [sp, #4]
 8009c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c12:	425a      	negs	r2, r3
 8009c14:	415a      	adcs	r2, r3
 8009c16:	602a      	str	r2, [r5, #0]
 8009c18:	e7ee      	b.n	8009bf8 <__swhatbuf_r+0x1c>
 8009c1a:	2340      	movs	r3, #64	; 0x40
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	b016      	add	sp, #88	; 0x58
 8009c22:	bd70      	pop	{r4, r5, r6, pc}

08009c24 <__smakebuf_r>:
 8009c24:	898b      	ldrh	r3, [r1, #12]
 8009c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c28:	079d      	lsls	r5, r3, #30
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	d507      	bpl.n	8009c40 <__smakebuf_r+0x1c>
 8009c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	2301      	movs	r3, #1
 8009c3a:	6163      	str	r3, [r4, #20]
 8009c3c:	b002      	add	sp, #8
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	ab01      	add	r3, sp, #4
 8009c42:	466a      	mov	r2, sp
 8009c44:	f7ff ffca 	bl	8009bdc <__swhatbuf_r>
 8009c48:	9900      	ldr	r1, [sp, #0]
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f879 	bl	8009d44 <_malloc_r>
 8009c52:	b948      	cbnz	r0, 8009c68 <__smakebuf_r+0x44>
 8009c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d4ef      	bmi.n	8009c3c <__smakebuf_r+0x18>
 8009c5c:	f023 0303 	bic.w	r3, r3, #3
 8009c60:	f043 0302 	orr.w	r3, r3, #2
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	e7e3      	b.n	8009c30 <__smakebuf_r+0xc>
 8009c68:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <__smakebuf_r+0x7c>)
 8009c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	6020      	str	r0, [r4, #0]
 8009c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	6163      	str	r3, [r4, #20]
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	6120      	str	r0, [r4, #16]
 8009c7e:	b15b      	cbz	r3, 8009c98 <__smakebuf_r+0x74>
 8009c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 fd89 	bl	800a79c <_isatty_r>
 8009c8a:	b128      	cbz	r0, 8009c98 <__smakebuf_r+0x74>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	f043 0301 	orr.w	r3, r3, #1
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	89a0      	ldrh	r0, [r4, #12]
 8009c9a:	4305      	orrs	r5, r0
 8009c9c:	81a5      	strh	r5, [r4, #12]
 8009c9e:	e7cd      	b.n	8009c3c <__smakebuf_r+0x18>
 8009ca0:	08009a35 	.word	0x08009a35

08009ca4 <_free_r>:
 8009ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	d048      	beq.n	8009d3c <_free_r+0x98>
 8009caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cae:	9001      	str	r0, [sp, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8009cb6:	bfb8      	it	lt
 8009cb8:	18e4      	addlt	r4, r4, r3
 8009cba:	f000 fdb9 	bl	800a830 <__malloc_lock>
 8009cbe:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <_free_r+0x9c>)
 8009cc0:	9801      	ldr	r0, [sp, #4]
 8009cc2:	6813      	ldr	r3, [r2, #0]
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	b933      	cbnz	r3, 8009cd6 <_free_r+0x32>
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	6014      	str	r4, [r2, #0]
 8009ccc:	b003      	add	sp, #12
 8009cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cd2:	f000 bdb3 	b.w	800a83c <__malloc_unlock>
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	d90b      	bls.n	8009cf2 <_free_r+0x4e>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	1862      	adds	r2, r4, r1
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	bf04      	itt	eq
 8009ce2:	681a      	ldreq	r2, [r3, #0]
 8009ce4:	685b      	ldreq	r3, [r3, #4]
 8009ce6:	6063      	str	r3, [r4, #4]
 8009ce8:	bf04      	itt	eq
 8009cea:	1852      	addeq	r2, r2, r1
 8009cec:	6022      	streq	r2, [r4, #0]
 8009cee:	602c      	str	r4, [r5, #0]
 8009cf0:	e7ec      	b.n	8009ccc <_free_r+0x28>
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	b10b      	cbz	r3, 8009cfc <_free_r+0x58>
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	d9fa      	bls.n	8009cf2 <_free_r+0x4e>
 8009cfc:	6811      	ldr	r1, [r2, #0]
 8009cfe:	1855      	adds	r5, r2, r1
 8009d00:	42a5      	cmp	r5, r4
 8009d02:	d10b      	bne.n	8009d1c <_free_r+0x78>
 8009d04:	6824      	ldr	r4, [r4, #0]
 8009d06:	4421      	add	r1, r4
 8009d08:	1854      	adds	r4, r2, r1
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	6011      	str	r1, [r2, #0]
 8009d0e:	d1dd      	bne.n	8009ccc <_free_r+0x28>
 8009d10:	681c      	ldr	r4, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	6053      	str	r3, [r2, #4]
 8009d16:	4421      	add	r1, r4
 8009d18:	6011      	str	r1, [r2, #0]
 8009d1a:	e7d7      	b.n	8009ccc <_free_r+0x28>
 8009d1c:	d902      	bls.n	8009d24 <_free_r+0x80>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	6003      	str	r3, [r0, #0]
 8009d22:	e7d3      	b.n	8009ccc <_free_r+0x28>
 8009d24:	6825      	ldr	r5, [r4, #0]
 8009d26:	1961      	adds	r1, r4, r5
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	bf04      	itt	eq
 8009d2c:	6819      	ldreq	r1, [r3, #0]
 8009d2e:	685b      	ldreq	r3, [r3, #4]
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	bf04      	itt	eq
 8009d34:	1949      	addeq	r1, r1, r5
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	6054      	str	r4, [r2, #4]
 8009d3a:	e7c7      	b.n	8009ccc <_free_r+0x28>
 8009d3c:	b003      	add	sp, #12
 8009d3e:	bd30      	pop	{r4, r5, pc}
 8009d40:	20001104 	.word	0x20001104

08009d44 <_malloc_r>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	1ccd      	adds	r5, r1, #3
 8009d48:	f025 0503 	bic.w	r5, r5, #3
 8009d4c:	3508      	adds	r5, #8
 8009d4e:	2d0c      	cmp	r5, #12
 8009d50:	bf38      	it	cc
 8009d52:	250c      	movcc	r5, #12
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	4606      	mov	r6, r0
 8009d58:	db01      	blt.n	8009d5e <_malloc_r+0x1a>
 8009d5a:	42a9      	cmp	r1, r5
 8009d5c:	d903      	bls.n	8009d66 <_malloc_r+0x22>
 8009d5e:	230c      	movs	r3, #12
 8009d60:	6033      	str	r3, [r6, #0]
 8009d62:	2000      	movs	r0, #0
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d66:	f000 fd63 	bl	800a830 <__malloc_lock>
 8009d6a:	4921      	ldr	r1, [pc, #132]	; (8009df0 <_malloc_r+0xac>)
 8009d6c:	680a      	ldr	r2, [r1, #0]
 8009d6e:	4614      	mov	r4, r2
 8009d70:	b99c      	cbnz	r4, 8009d9a <_malloc_r+0x56>
 8009d72:	4f20      	ldr	r7, [pc, #128]	; (8009df4 <_malloc_r+0xb0>)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	b923      	cbnz	r3, 8009d82 <_malloc_r+0x3e>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 fc86 	bl	800a68c <_sbrk_r>
 8009d80:	6038      	str	r0, [r7, #0]
 8009d82:	4629      	mov	r1, r5
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 fc81 	bl	800a68c <_sbrk_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d123      	bne.n	8009dd6 <_malloc_r+0x92>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 fd52 	bl	800a83c <__malloc_unlock>
 8009d98:	e7e3      	b.n	8009d62 <_malloc_r+0x1e>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	1b5b      	subs	r3, r3, r5
 8009d9e:	d417      	bmi.n	8009dd0 <_malloc_r+0x8c>
 8009da0:	2b0b      	cmp	r3, #11
 8009da2:	d903      	bls.n	8009dac <_malloc_r+0x68>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	441c      	add	r4, r3
 8009da8:	6025      	str	r5, [r4, #0]
 8009daa:	e004      	b.n	8009db6 <_malloc_r+0x72>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	42a2      	cmp	r2, r4
 8009db0:	bf0c      	ite	eq
 8009db2:	600b      	streq	r3, [r1, #0]
 8009db4:	6053      	strne	r3, [r2, #4]
 8009db6:	4630      	mov	r0, r6
 8009db8:	f000 fd40 	bl	800a83c <__malloc_unlock>
 8009dbc:	f104 000b 	add.w	r0, r4, #11
 8009dc0:	1d23      	adds	r3, r4, #4
 8009dc2:	f020 0007 	bic.w	r0, r0, #7
 8009dc6:	1ac2      	subs	r2, r0, r3
 8009dc8:	d0cc      	beq.n	8009d64 <_malloc_r+0x20>
 8009dca:	1a1b      	subs	r3, r3, r0
 8009dcc:	50a3      	str	r3, [r4, r2]
 8009dce:	e7c9      	b.n	8009d64 <_malloc_r+0x20>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	6864      	ldr	r4, [r4, #4]
 8009dd4:	e7cc      	b.n	8009d70 <_malloc_r+0x2c>
 8009dd6:	1cc4      	adds	r4, r0, #3
 8009dd8:	f024 0403 	bic.w	r4, r4, #3
 8009ddc:	42a0      	cmp	r0, r4
 8009dde:	d0e3      	beq.n	8009da8 <_malloc_r+0x64>
 8009de0:	1a21      	subs	r1, r4, r0
 8009de2:	4630      	mov	r0, r6
 8009de4:	f000 fc52 	bl	800a68c <_sbrk_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1dd      	bne.n	8009da8 <_malloc_r+0x64>
 8009dec:	e7cf      	b.n	8009d8e <_malloc_r+0x4a>
 8009dee:	bf00      	nop
 8009df0:	20001104 	.word	0x20001104
 8009df4:	20001108 	.word	0x20001108

08009df8 <__ssputs_r>:
 8009df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfc:	688e      	ldr	r6, [r1, #8]
 8009dfe:	429e      	cmp	r6, r3
 8009e00:	4682      	mov	sl, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4690      	mov	r8, r2
 8009e06:	461f      	mov	r7, r3
 8009e08:	d838      	bhi.n	8009e7c <__ssputs_r+0x84>
 8009e0a:	898a      	ldrh	r2, [r1, #12]
 8009e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e10:	d032      	beq.n	8009e78 <__ssputs_r+0x80>
 8009e12:	6825      	ldr	r5, [r4, #0]
 8009e14:	6909      	ldr	r1, [r1, #16]
 8009e16:	eba5 0901 	sub.w	r9, r5, r1
 8009e1a:	6965      	ldr	r5, [r4, #20]
 8009e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e24:	3301      	adds	r3, #1
 8009e26:	444b      	add	r3, r9
 8009e28:	106d      	asrs	r5, r5, #1
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	bf38      	it	cc
 8009e2e:	461d      	movcc	r5, r3
 8009e30:	0553      	lsls	r3, r2, #21
 8009e32:	d531      	bpl.n	8009e98 <__ssputs_r+0xa0>
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7ff ff85 	bl	8009d44 <_malloc_r>
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	b950      	cbnz	r0, 8009e54 <__ssputs_r+0x5c>
 8009e3e:	230c      	movs	r3, #12
 8009e40:	f8ca 3000 	str.w	r3, [sl]
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	6921      	ldr	r1, [r4, #16]
 8009e56:	464a      	mov	r2, r9
 8009e58:	f000 fcc2 	bl	800a7e0 <memcpy>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	6126      	str	r6, [r4, #16]
 8009e6a:	6165      	str	r5, [r4, #20]
 8009e6c:	444e      	add	r6, r9
 8009e6e:	eba5 0509 	sub.w	r5, r5, r9
 8009e72:	6026      	str	r6, [r4, #0]
 8009e74:	60a5      	str	r5, [r4, #8]
 8009e76:	463e      	mov	r6, r7
 8009e78:	42be      	cmp	r6, r7
 8009e7a:	d900      	bls.n	8009e7e <__ssputs_r+0x86>
 8009e7c:	463e      	mov	r6, r7
 8009e7e:	4632      	mov	r2, r6
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	4641      	mov	r1, r8
 8009e84:	f000 fcba 	bl	800a7fc <memmove>
 8009e88:	68a3      	ldr	r3, [r4, #8]
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	1b9b      	subs	r3, r3, r6
 8009e8e:	4432      	add	r2, r6
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	6022      	str	r2, [r4, #0]
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7db      	b.n	8009e50 <__ssputs_r+0x58>
 8009e98:	462a      	mov	r2, r5
 8009e9a:	f000 fcd5 	bl	800a848 <_realloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1e1      	bne.n	8009e68 <__ssputs_r+0x70>
 8009ea4:	6921      	ldr	r1, [r4, #16]
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	f7ff fefc 	bl	8009ca4 <_free_r>
 8009eac:	e7c7      	b.n	8009e3e <__ssputs_r+0x46>
	...

08009eb0 <_svfiprintf_r>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	4698      	mov	r8, r3
 8009eb6:	898b      	ldrh	r3, [r1, #12]
 8009eb8:	061b      	lsls	r3, r3, #24
 8009eba:	b09d      	sub	sp, #116	; 0x74
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	d50e      	bpl.n	8009ee2 <_svfiprintf_r+0x32>
 8009ec4:	690b      	ldr	r3, [r1, #16]
 8009ec6:	b963      	cbnz	r3, 8009ee2 <_svfiprintf_r+0x32>
 8009ec8:	2140      	movs	r1, #64	; 0x40
 8009eca:	f7ff ff3b 	bl	8009d44 <_malloc_r>
 8009ece:	6028      	str	r0, [r5, #0]
 8009ed0:	6128      	str	r0, [r5, #16]
 8009ed2:	b920      	cbnz	r0, 8009ede <_svfiprintf_r+0x2e>
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	603b      	str	r3, [r7, #0]
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009edc:	e0d1      	b.n	800a082 <_svfiprintf_r+0x1d2>
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	616b      	str	r3, [r5, #20]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef0:	2330      	movs	r3, #48	; 0x30
 8009ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a09c <_svfiprintf_r+0x1ec>
 8009ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009efa:	f04f 0901 	mov.w	r9, #1
 8009efe:	4623      	mov	r3, r4
 8009f00:	469a      	mov	sl, r3
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	b10a      	cbz	r2, 8009f0c <_svfiprintf_r+0x5c>
 8009f08:	2a25      	cmp	r2, #37	; 0x25
 8009f0a:	d1f9      	bne.n	8009f00 <_svfiprintf_r+0x50>
 8009f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f10:	d00b      	beq.n	8009f2a <_svfiprintf_r+0x7a>
 8009f12:	465b      	mov	r3, fp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff6d 	bl	8009df8 <__ssputs_r>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f000 80aa 	beq.w	800a078 <_svfiprintf_r+0x1c8>
 8009f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f26:	445a      	add	r2, fp
 8009f28:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 80a2 	beq.w	800a078 <_svfiprintf_r+0x1c8>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3e:	f10a 0a01 	add.w	sl, sl, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f4c:	4654      	mov	r4, sl
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	4851      	ldr	r0, [pc, #324]	; (800a09c <_svfiprintf_r+0x1ec>)
 8009f56:	f7f6 f943 	bl	80001e0 <memchr>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	b9d8      	cbnz	r0, 8009f96 <_svfiprintf_r+0xe6>
 8009f5e:	06d0      	lsls	r0, r2, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2320      	movmi	r3, #32
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f68:	0711      	lsls	r1, r2, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	232b      	movmi	r3, #43	; 0x2b
 8009f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b2a      	cmp	r3, #42	; 0x2a
 8009f78:	d015      	beq.n	8009fa6 <_svfiprintf_r+0xf6>
 8009f7a:	9a07      	ldr	r2, [sp, #28]
 8009f7c:	4654      	mov	r4, sl
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4621      	mov	r1, r4
 8009f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8a:	3b30      	subs	r3, #48	; 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d94e      	bls.n	800a02e <_svfiprintf_r+0x17e>
 8009f90:	b1b0      	cbz	r0, 8009fc0 <_svfiprintf_r+0x110>
 8009f92:	9207      	str	r2, [sp, #28]
 8009f94:	e014      	b.n	8009fc0 <_svfiprintf_r+0x110>
 8009f96:	eba0 0308 	sub.w	r3, r0, r8
 8009f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	46a2      	mov	sl, r4
 8009fa4:	e7d2      	b.n	8009f4c <_svfiprintf_r+0x9c>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbb      	ittet	lt
 8009fb2:	425b      	neglt	r3, r3
 8009fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb8:	9307      	strge	r3, [sp, #28]
 8009fba:	9307      	strlt	r3, [sp, #28]
 8009fbc:	bfb8      	it	lt
 8009fbe:	9204      	strlt	r2, [sp, #16]
 8009fc0:	7823      	ldrb	r3, [r4, #0]
 8009fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc4:	d10c      	bne.n	8009fe0 <_svfiprintf_r+0x130>
 8009fc6:	7863      	ldrb	r3, [r4, #1]
 8009fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fca:	d135      	bne.n	800a038 <_svfiprintf_r+0x188>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	9203      	str	r2, [sp, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfb8      	it	lt
 8009fd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fdc:	3402      	adds	r4, #2
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0ac <_svfiprintf_r+0x1fc>
 8009fe4:	7821      	ldrb	r1, [r4, #0]
 8009fe6:	2203      	movs	r2, #3
 8009fe8:	4650      	mov	r0, sl
 8009fea:	f7f6 f8f9 	bl	80001e0 <memchr>
 8009fee:	b140      	cbz	r0, 800a002 <_svfiprintf_r+0x152>
 8009ff0:	2340      	movs	r3, #64	; 0x40
 8009ff2:	eba0 000a 	sub.w	r0, r0, sl
 8009ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	4303      	orrs	r3, r0
 8009ffe:	3401      	adds	r4, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a006:	4826      	ldr	r0, [pc, #152]	; (800a0a0 <_svfiprintf_r+0x1f0>)
 800a008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a00c:	2206      	movs	r2, #6
 800a00e:	f7f6 f8e7 	bl	80001e0 <memchr>
 800a012:	2800      	cmp	r0, #0
 800a014:	d038      	beq.n	800a088 <_svfiprintf_r+0x1d8>
 800a016:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <_svfiprintf_r+0x1f4>)
 800a018:	bb1b      	cbnz	r3, 800a062 <_svfiprintf_r+0x1b2>
 800a01a:	9b03      	ldr	r3, [sp, #12]
 800a01c:	3307      	adds	r3, #7
 800a01e:	f023 0307 	bic.w	r3, r3, #7
 800a022:	3308      	adds	r3, #8
 800a024:	9303      	str	r3, [sp, #12]
 800a026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a028:	4433      	add	r3, r6
 800a02a:	9309      	str	r3, [sp, #36]	; 0x24
 800a02c:	e767      	b.n	8009efe <_svfiprintf_r+0x4e>
 800a02e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a032:	460c      	mov	r4, r1
 800a034:	2001      	movs	r0, #1
 800a036:	e7a5      	b.n	8009f84 <_svfiprintf_r+0xd4>
 800a038:	2300      	movs	r3, #0
 800a03a:	3401      	adds	r4, #1
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	4619      	mov	r1, r3
 800a040:	f04f 0c0a 	mov.w	ip, #10
 800a044:	4620      	mov	r0, r4
 800a046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04a:	3a30      	subs	r2, #48	; 0x30
 800a04c:	2a09      	cmp	r2, #9
 800a04e:	d903      	bls.n	800a058 <_svfiprintf_r+0x1a8>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0c5      	beq.n	8009fe0 <_svfiprintf_r+0x130>
 800a054:	9105      	str	r1, [sp, #20]
 800a056:	e7c3      	b.n	8009fe0 <_svfiprintf_r+0x130>
 800a058:	fb0c 2101 	mla	r1, ip, r1, r2
 800a05c:	4604      	mov	r4, r0
 800a05e:	2301      	movs	r3, #1
 800a060:	e7f0      	b.n	800a044 <_svfiprintf_r+0x194>
 800a062:	ab03      	add	r3, sp, #12
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	462a      	mov	r2, r5
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <_svfiprintf_r+0x1f8>)
 800a06a:	a904      	add	r1, sp, #16
 800a06c:	4638      	mov	r0, r7
 800a06e:	f3af 8000 	nop.w
 800a072:	1c42      	adds	r2, r0, #1
 800a074:	4606      	mov	r6, r0
 800a076:	d1d6      	bne.n	800a026 <_svfiprintf_r+0x176>
 800a078:	89ab      	ldrh	r3, [r5, #12]
 800a07a:	065b      	lsls	r3, r3, #25
 800a07c:	f53f af2c 	bmi.w	8009ed8 <_svfiprintf_r+0x28>
 800a080:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a082:	b01d      	add	sp, #116	; 0x74
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	ab03      	add	r3, sp, #12
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	462a      	mov	r2, r5
 800a08e:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <_svfiprintf_r+0x1f8>)
 800a090:	a904      	add	r1, sp, #16
 800a092:	4638      	mov	r0, r7
 800a094:	f000 f9d4 	bl	800a440 <_printf_i>
 800a098:	e7eb      	b.n	800a072 <_svfiprintf_r+0x1c2>
 800a09a:	bf00      	nop
 800a09c:	0800ae00 	.word	0x0800ae00
 800a0a0:	0800ae0a 	.word	0x0800ae0a
 800a0a4:	00000000 	.word	0x00000000
 800a0a8:	08009df9 	.word	0x08009df9
 800a0ac:	0800ae06 	.word	0x0800ae06

0800a0b0 <__sfputc_r>:
 800a0b0:	6893      	ldr	r3, [r2, #8]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	b410      	push	{r4}
 800a0b8:	6093      	str	r3, [r2, #8]
 800a0ba:	da08      	bge.n	800a0ce <__sfputc_r+0x1e>
 800a0bc:	6994      	ldr	r4, [r2, #24]
 800a0be:	42a3      	cmp	r3, r4
 800a0c0:	db01      	blt.n	800a0c6 <__sfputc_r+0x16>
 800a0c2:	290a      	cmp	r1, #10
 800a0c4:	d103      	bne.n	800a0ce <__sfputc_r+0x1e>
 800a0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ca:	f7ff bb0d 	b.w	80096e8 <__swbuf_r>
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	1c58      	adds	r0, r3, #1
 800a0d2:	6010      	str	r0, [r2, #0]
 800a0d4:	7019      	strb	r1, [r3, #0]
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <__sfputs_r>:
 800a0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	18d5      	adds	r5, r2, r3
 800a0e8:	42ac      	cmp	r4, r5
 800a0ea:	d101      	bne.n	800a0f0 <__sfputs_r+0x12>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e007      	b.n	800a100 <__sfputs_r+0x22>
 800a0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f7ff ffda 	bl	800a0b0 <__sfputc_r>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d1f3      	bne.n	800a0e8 <__sfputs_r+0xa>
 800a100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a104 <_vfiprintf_r>:
 800a104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	460d      	mov	r5, r1
 800a10a:	b09d      	sub	sp, #116	; 0x74
 800a10c:	4614      	mov	r4, r2
 800a10e:	4698      	mov	r8, r3
 800a110:	4606      	mov	r6, r0
 800a112:	b118      	cbz	r0, 800a11c <_vfiprintf_r+0x18>
 800a114:	6983      	ldr	r3, [r0, #24]
 800a116:	b90b      	cbnz	r3, 800a11c <_vfiprintf_r+0x18>
 800a118:	f7ff fcc0 	bl	8009a9c <__sinit>
 800a11c:	4b89      	ldr	r3, [pc, #548]	; (800a344 <_vfiprintf_r+0x240>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	d11b      	bne.n	800a15a <_vfiprintf_r+0x56>
 800a122:	6875      	ldr	r5, [r6, #4]
 800a124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a126:	07d9      	lsls	r1, r3, #31
 800a128:	d405      	bmi.n	800a136 <_vfiprintf_r+0x32>
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	059a      	lsls	r2, r3, #22
 800a12e:	d402      	bmi.n	800a136 <_vfiprintf_r+0x32>
 800a130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a132:	f7ff fd51 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	071b      	lsls	r3, r3, #28
 800a13a:	d501      	bpl.n	800a140 <_vfiprintf_r+0x3c>
 800a13c:	692b      	ldr	r3, [r5, #16]
 800a13e:	b9eb      	cbnz	r3, 800a17c <_vfiprintf_r+0x78>
 800a140:	4629      	mov	r1, r5
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff fb22 	bl	800978c <__swsetup_r>
 800a148:	b1c0      	cbz	r0, 800a17c <_vfiprintf_r+0x78>
 800a14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a14c:	07dc      	lsls	r4, r3, #31
 800a14e:	d50e      	bpl.n	800a16e <_vfiprintf_r+0x6a>
 800a150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a154:	b01d      	add	sp, #116	; 0x74
 800a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15a:	4b7b      	ldr	r3, [pc, #492]	; (800a348 <_vfiprintf_r+0x244>)
 800a15c:	429d      	cmp	r5, r3
 800a15e:	d101      	bne.n	800a164 <_vfiprintf_r+0x60>
 800a160:	68b5      	ldr	r5, [r6, #8]
 800a162:	e7df      	b.n	800a124 <_vfiprintf_r+0x20>
 800a164:	4b79      	ldr	r3, [pc, #484]	; (800a34c <_vfiprintf_r+0x248>)
 800a166:	429d      	cmp	r5, r3
 800a168:	bf08      	it	eq
 800a16a:	68f5      	ldreq	r5, [r6, #12]
 800a16c:	e7da      	b.n	800a124 <_vfiprintf_r+0x20>
 800a16e:	89ab      	ldrh	r3, [r5, #12]
 800a170:	0598      	lsls	r0, r3, #22
 800a172:	d4ed      	bmi.n	800a150 <_vfiprintf_r+0x4c>
 800a174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a176:	f7ff fd30 	bl	8009bda <__retarget_lock_release_recursive>
 800a17a:	e7e9      	b.n	800a150 <_vfiprintf_r+0x4c>
 800a17c:	2300      	movs	r3, #0
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	2320      	movs	r3, #32
 800a182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a186:	f8cd 800c 	str.w	r8, [sp, #12]
 800a18a:	2330      	movs	r3, #48	; 0x30
 800a18c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a350 <_vfiprintf_r+0x24c>
 800a190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a194:	f04f 0901 	mov.w	r9, #1
 800a198:	4623      	mov	r3, r4
 800a19a:	469a      	mov	sl, r3
 800a19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a0:	b10a      	cbz	r2, 800a1a6 <_vfiprintf_r+0xa2>
 800a1a2:	2a25      	cmp	r2, #37	; 0x25
 800a1a4:	d1f9      	bne.n	800a19a <_vfiprintf_r+0x96>
 800a1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1aa:	d00b      	beq.n	800a1c4 <_vfiprintf_r+0xc0>
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7ff ff93 	bl	800a0de <__sfputs_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	f000 80aa 	beq.w	800a312 <_vfiprintf_r+0x20e>
 800a1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c0:	445a      	add	r2, fp
 800a1c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80a2 	beq.w	800a312 <_vfiprintf_r+0x20e>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	9307      	str	r3, [sp, #28]
 800a1e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	2205      	movs	r2, #5
 800a1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ee:	4858      	ldr	r0, [pc, #352]	; (800a350 <_vfiprintf_r+0x24c>)
 800a1f0:	f7f5 fff6 	bl	80001e0 <memchr>
 800a1f4:	9a04      	ldr	r2, [sp, #16]
 800a1f6:	b9d8      	cbnz	r0, 800a230 <_vfiprintf_r+0x12c>
 800a1f8:	06d1      	lsls	r1, r2, #27
 800a1fa:	bf44      	itt	mi
 800a1fc:	2320      	movmi	r3, #32
 800a1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a202:	0713      	lsls	r3, r2, #28
 800a204:	bf44      	itt	mi
 800a206:	232b      	movmi	r3, #43	; 0x2b
 800a208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a20c:	f89a 3000 	ldrb.w	r3, [sl]
 800a210:	2b2a      	cmp	r3, #42	; 0x2a
 800a212:	d015      	beq.n	800a240 <_vfiprintf_r+0x13c>
 800a214:	9a07      	ldr	r2, [sp, #28]
 800a216:	4654      	mov	r4, sl
 800a218:	2000      	movs	r0, #0
 800a21a:	f04f 0c0a 	mov.w	ip, #10
 800a21e:	4621      	mov	r1, r4
 800a220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a224:	3b30      	subs	r3, #48	; 0x30
 800a226:	2b09      	cmp	r3, #9
 800a228:	d94e      	bls.n	800a2c8 <_vfiprintf_r+0x1c4>
 800a22a:	b1b0      	cbz	r0, 800a25a <_vfiprintf_r+0x156>
 800a22c:	9207      	str	r2, [sp, #28]
 800a22e:	e014      	b.n	800a25a <_vfiprintf_r+0x156>
 800a230:	eba0 0308 	sub.w	r3, r0, r8
 800a234:	fa09 f303 	lsl.w	r3, r9, r3
 800a238:	4313      	orrs	r3, r2
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	46a2      	mov	sl, r4
 800a23e:	e7d2      	b.n	800a1e6 <_vfiprintf_r+0xe2>
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	1d19      	adds	r1, r3, #4
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	9103      	str	r1, [sp, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfbb      	ittet	lt
 800a24c:	425b      	neglt	r3, r3
 800a24e:	f042 0202 	orrlt.w	r2, r2, #2
 800a252:	9307      	strge	r3, [sp, #28]
 800a254:	9307      	strlt	r3, [sp, #28]
 800a256:	bfb8      	it	lt
 800a258:	9204      	strlt	r2, [sp, #16]
 800a25a:	7823      	ldrb	r3, [r4, #0]
 800a25c:	2b2e      	cmp	r3, #46	; 0x2e
 800a25e:	d10c      	bne.n	800a27a <_vfiprintf_r+0x176>
 800a260:	7863      	ldrb	r3, [r4, #1]
 800a262:	2b2a      	cmp	r3, #42	; 0x2a
 800a264:	d135      	bne.n	800a2d2 <_vfiprintf_r+0x1ce>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	1d1a      	adds	r2, r3, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	9203      	str	r2, [sp, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfb8      	it	lt
 800a272:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a276:	3402      	adds	r4, #2
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a360 <_vfiprintf_r+0x25c>
 800a27e:	7821      	ldrb	r1, [r4, #0]
 800a280:	2203      	movs	r2, #3
 800a282:	4650      	mov	r0, sl
 800a284:	f7f5 ffac 	bl	80001e0 <memchr>
 800a288:	b140      	cbz	r0, 800a29c <_vfiprintf_r+0x198>
 800a28a:	2340      	movs	r3, #64	; 0x40
 800a28c:	eba0 000a 	sub.w	r0, r0, sl
 800a290:	fa03 f000 	lsl.w	r0, r3, r0
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	4303      	orrs	r3, r0
 800a298:	3401      	adds	r4, #1
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a0:	482c      	ldr	r0, [pc, #176]	; (800a354 <_vfiprintf_r+0x250>)
 800a2a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2a6:	2206      	movs	r2, #6
 800a2a8:	f7f5 ff9a 	bl	80001e0 <memchr>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d03f      	beq.n	800a330 <_vfiprintf_r+0x22c>
 800a2b0:	4b29      	ldr	r3, [pc, #164]	; (800a358 <_vfiprintf_r+0x254>)
 800a2b2:	bb1b      	cbnz	r3, 800a2fc <_vfiprintf_r+0x1f8>
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	3307      	adds	r3, #7
 800a2b8:	f023 0307 	bic.w	r3, r3, #7
 800a2bc:	3308      	adds	r3, #8
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c2:	443b      	add	r3, r7
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	e767      	b.n	800a198 <_vfiprintf_r+0x94>
 800a2c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	e7a5      	b.n	800a21e <_vfiprintf_r+0x11a>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	3401      	adds	r4, #1
 800a2d6:	9305      	str	r3, [sp, #20]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	f04f 0c0a 	mov.w	ip, #10
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e4:	3a30      	subs	r2, #48	; 0x30
 800a2e6:	2a09      	cmp	r2, #9
 800a2e8:	d903      	bls.n	800a2f2 <_vfiprintf_r+0x1ee>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0c5      	beq.n	800a27a <_vfiprintf_r+0x176>
 800a2ee:	9105      	str	r1, [sp, #20]
 800a2f0:	e7c3      	b.n	800a27a <_vfiprintf_r+0x176>
 800a2f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e7f0      	b.n	800a2de <_vfiprintf_r+0x1da>
 800a2fc:	ab03      	add	r3, sp, #12
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	462a      	mov	r2, r5
 800a302:	4b16      	ldr	r3, [pc, #88]	; (800a35c <_vfiprintf_r+0x258>)
 800a304:	a904      	add	r1, sp, #16
 800a306:	4630      	mov	r0, r6
 800a308:	f3af 8000 	nop.w
 800a30c:	4607      	mov	r7, r0
 800a30e:	1c78      	adds	r0, r7, #1
 800a310:	d1d6      	bne.n	800a2c0 <_vfiprintf_r+0x1bc>
 800a312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a314:	07d9      	lsls	r1, r3, #31
 800a316:	d405      	bmi.n	800a324 <_vfiprintf_r+0x220>
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	059a      	lsls	r2, r3, #22
 800a31c:	d402      	bmi.n	800a324 <_vfiprintf_r+0x220>
 800a31e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a320:	f7ff fc5b 	bl	8009bda <__retarget_lock_release_recursive>
 800a324:	89ab      	ldrh	r3, [r5, #12]
 800a326:	065b      	lsls	r3, r3, #25
 800a328:	f53f af12 	bmi.w	800a150 <_vfiprintf_r+0x4c>
 800a32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a32e:	e711      	b.n	800a154 <_vfiprintf_r+0x50>
 800a330:	ab03      	add	r3, sp, #12
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	462a      	mov	r2, r5
 800a336:	4b09      	ldr	r3, [pc, #36]	; (800a35c <_vfiprintf_r+0x258>)
 800a338:	a904      	add	r1, sp, #16
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 f880 	bl	800a440 <_printf_i>
 800a340:	e7e4      	b.n	800a30c <_vfiprintf_r+0x208>
 800a342:	bf00      	nop
 800a344:	0800adc0 	.word	0x0800adc0
 800a348:	0800ade0 	.word	0x0800ade0
 800a34c:	0800ada0 	.word	0x0800ada0
 800a350:	0800ae00 	.word	0x0800ae00
 800a354:	0800ae0a 	.word	0x0800ae0a
 800a358:	00000000 	.word	0x00000000
 800a35c:	0800a0df 	.word	0x0800a0df
 800a360:	0800ae06 	.word	0x0800ae06

0800a364 <_printf_common>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	4616      	mov	r6, r2
 800a36a:	4699      	mov	r9, r3
 800a36c:	688a      	ldr	r2, [r1, #8]
 800a36e:	690b      	ldr	r3, [r1, #16]
 800a370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a374:	4293      	cmp	r3, r2
 800a376:	bfb8      	it	lt
 800a378:	4613      	movlt	r3, r2
 800a37a:	6033      	str	r3, [r6, #0]
 800a37c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a380:	4607      	mov	r7, r0
 800a382:	460c      	mov	r4, r1
 800a384:	b10a      	cbz	r2, 800a38a <_printf_common+0x26>
 800a386:	3301      	adds	r3, #1
 800a388:	6033      	str	r3, [r6, #0]
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	0699      	lsls	r1, r3, #26
 800a38e:	bf42      	ittt	mi
 800a390:	6833      	ldrmi	r3, [r6, #0]
 800a392:	3302      	addmi	r3, #2
 800a394:	6033      	strmi	r3, [r6, #0]
 800a396:	6825      	ldr	r5, [r4, #0]
 800a398:	f015 0506 	ands.w	r5, r5, #6
 800a39c:	d106      	bne.n	800a3ac <_printf_common+0x48>
 800a39e:	f104 0a19 	add.w	sl, r4, #25
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	6832      	ldr	r2, [r6, #0]
 800a3a6:	1a9b      	subs	r3, r3, r2
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dc26      	bgt.n	800a3fa <_printf_common+0x96>
 800a3ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3b0:	1e13      	subs	r3, r2, #0
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	bf18      	it	ne
 800a3b6:	2301      	movne	r3, #1
 800a3b8:	0692      	lsls	r2, r2, #26
 800a3ba:	d42b      	bmi.n	800a414 <_printf_common+0xb0>
 800a3bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	47c0      	blx	r8
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	d01e      	beq.n	800a408 <_printf_common+0xa4>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	68e5      	ldr	r5, [r4, #12]
 800a3ce:	6832      	ldr	r2, [r6, #0]
 800a3d0:	f003 0306 	and.w	r3, r3, #6
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	bf08      	it	eq
 800a3d8:	1aad      	subeq	r5, r5, r2
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	bf0c      	ite	eq
 800a3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3e4:	2500      	movne	r5, #0
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bfc4      	itt	gt
 800a3ea:	1a9b      	subgt	r3, r3, r2
 800a3ec:	18ed      	addgt	r5, r5, r3
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	341a      	adds	r4, #26
 800a3f2:	42b5      	cmp	r5, r6
 800a3f4:	d11a      	bne.n	800a42c <_printf_common+0xc8>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e008      	b.n	800a40c <_printf_common+0xa8>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4652      	mov	r2, sl
 800a3fe:	4649      	mov	r1, r9
 800a400:	4638      	mov	r0, r7
 800a402:	47c0      	blx	r8
 800a404:	3001      	adds	r0, #1
 800a406:	d103      	bne.n	800a410 <_printf_common+0xac>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a410:	3501      	adds	r5, #1
 800a412:	e7c6      	b.n	800a3a2 <_printf_common+0x3e>
 800a414:	18e1      	adds	r1, r4, r3
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	2030      	movs	r0, #48	; 0x30
 800a41a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a41e:	4422      	add	r2, r4
 800a420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a428:	3302      	adds	r3, #2
 800a42a:	e7c7      	b.n	800a3bc <_printf_common+0x58>
 800a42c:	2301      	movs	r3, #1
 800a42e:	4622      	mov	r2, r4
 800a430:	4649      	mov	r1, r9
 800a432:	4638      	mov	r0, r7
 800a434:	47c0      	blx	r8
 800a436:	3001      	adds	r0, #1
 800a438:	d0e6      	beq.n	800a408 <_printf_common+0xa4>
 800a43a:	3601      	adds	r6, #1
 800a43c:	e7d9      	b.n	800a3f2 <_printf_common+0x8e>
	...

0800a440 <_printf_i>:
 800a440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	460c      	mov	r4, r1
 800a446:	4691      	mov	r9, r2
 800a448:	7e27      	ldrb	r7, [r4, #24]
 800a44a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a44c:	2f78      	cmp	r7, #120	; 0x78
 800a44e:	4680      	mov	r8, r0
 800a450:	469a      	mov	sl, r3
 800a452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a456:	d807      	bhi.n	800a468 <_printf_i+0x28>
 800a458:	2f62      	cmp	r7, #98	; 0x62
 800a45a:	d80a      	bhi.n	800a472 <_printf_i+0x32>
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	f000 80d8 	beq.w	800a612 <_printf_i+0x1d2>
 800a462:	2f58      	cmp	r7, #88	; 0x58
 800a464:	f000 80a3 	beq.w	800a5ae <_printf_i+0x16e>
 800a468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a46c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a470:	e03a      	b.n	800a4e8 <_printf_i+0xa8>
 800a472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a476:	2b15      	cmp	r3, #21
 800a478:	d8f6      	bhi.n	800a468 <_printf_i+0x28>
 800a47a:	a001      	add	r0, pc, #4	; (adr r0, 800a480 <_printf_i+0x40>)
 800a47c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4ed 	.word	0x0800a4ed
 800a488:	0800a469 	.word	0x0800a469
 800a48c:	0800a469 	.word	0x0800a469
 800a490:	0800a469 	.word	0x0800a469
 800a494:	0800a469 	.word	0x0800a469
 800a498:	0800a4ed 	.word	0x0800a4ed
 800a49c:	0800a469 	.word	0x0800a469
 800a4a0:	0800a469 	.word	0x0800a469
 800a4a4:	0800a469 	.word	0x0800a469
 800a4a8:	0800a469 	.word	0x0800a469
 800a4ac:	0800a5f9 	.word	0x0800a5f9
 800a4b0:	0800a51d 	.word	0x0800a51d
 800a4b4:	0800a5db 	.word	0x0800a5db
 800a4b8:	0800a469 	.word	0x0800a469
 800a4bc:	0800a469 	.word	0x0800a469
 800a4c0:	0800a61b 	.word	0x0800a61b
 800a4c4:	0800a469 	.word	0x0800a469
 800a4c8:	0800a51d 	.word	0x0800a51d
 800a4cc:	0800a469 	.word	0x0800a469
 800a4d0:	0800a469 	.word	0x0800a469
 800a4d4:	0800a5e3 	.word	0x0800a5e3
 800a4d8:	680b      	ldr	r3, [r1, #0]
 800a4da:	1d1a      	adds	r2, r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	600a      	str	r2, [r1, #0]
 800a4e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0a3      	b.n	800a634 <_printf_i+0x1f4>
 800a4ec:	6825      	ldr	r5, [r4, #0]
 800a4ee:	6808      	ldr	r0, [r1, #0]
 800a4f0:	062e      	lsls	r6, r5, #24
 800a4f2:	f100 0304 	add.w	r3, r0, #4
 800a4f6:	d50a      	bpl.n	800a50e <_printf_i+0xce>
 800a4f8:	6805      	ldr	r5, [r0, #0]
 800a4fa:	600b      	str	r3, [r1, #0]
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	da03      	bge.n	800a508 <_printf_i+0xc8>
 800a500:	232d      	movs	r3, #45	; 0x2d
 800a502:	426d      	negs	r5, r5
 800a504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a508:	485e      	ldr	r0, [pc, #376]	; (800a684 <_printf_i+0x244>)
 800a50a:	230a      	movs	r3, #10
 800a50c:	e019      	b.n	800a542 <_printf_i+0x102>
 800a50e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a512:	6805      	ldr	r5, [r0, #0]
 800a514:	600b      	str	r3, [r1, #0]
 800a516:	bf18      	it	ne
 800a518:	b22d      	sxthne	r5, r5
 800a51a:	e7ef      	b.n	800a4fc <_printf_i+0xbc>
 800a51c:	680b      	ldr	r3, [r1, #0]
 800a51e:	6825      	ldr	r5, [r4, #0]
 800a520:	1d18      	adds	r0, r3, #4
 800a522:	6008      	str	r0, [r1, #0]
 800a524:	0628      	lsls	r0, r5, #24
 800a526:	d501      	bpl.n	800a52c <_printf_i+0xec>
 800a528:	681d      	ldr	r5, [r3, #0]
 800a52a:	e002      	b.n	800a532 <_printf_i+0xf2>
 800a52c:	0669      	lsls	r1, r5, #25
 800a52e:	d5fb      	bpl.n	800a528 <_printf_i+0xe8>
 800a530:	881d      	ldrh	r5, [r3, #0]
 800a532:	4854      	ldr	r0, [pc, #336]	; (800a684 <_printf_i+0x244>)
 800a534:	2f6f      	cmp	r7, #111	; 0x6f
 800a536:	bf0c      	ite	eq
 800a538:	2308      	moveq	r3, #8
 800a53a:	230a      	movne	r3, #10
 800a53c:	2100      	movs	r1, #0
 800a53e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a542:	6866      	ldr	r6, [r4, #4]
 800a544:	60a6      	str	r6, [r4, #8]
 800a546:	2e00      	cmp	r6, #0
 800a548:	bfa2      	ittt	ge
 800a54a:	6821      	ldrge	r1, [r4, #0]
 800a54c:	f021 0104 	bicge.w	r1, r1, #4
 800a550:	6021      	strge	r1, [r4, #0]
 800a552:	b90d      	cbnz	r5, 800a558 <_printf_i+0x118>
 800a554:	2e00      	cmp	r6, #0
 800a556:	d04d      	beq.n	800a5f4 <_printf_i+0x1b4>
 800a558:	4616      	mov	r6, r2
 800a55a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a55e:	fb03 5711 	mls	r7, r3, r1, r5
 800a562:	5dc7      	ldrb	r7, [r0, r7]
 800a564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a568:	462f      	mov	r7, r5
 800a56a:	42bb      	cmp	r3, r7
 800a56c:	460d      	mov	r5, r1
 800a56e:	d9f4      	bls.n	800a55a <_printf_i+0x11a>
 800a570:	2b08      	cmp	r3, #8
 800a572:	d10b      	bne.n	800a58c <_printf_i+0x14c>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	07df      	lsls	r7, r3, #31
 800a578:	d508      	bpl.n	800a58c <_printf_i+0x14c>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	6861      	ldr	r1, [r4, #4]
 800a57e:	4299      	cmp	r1, r3
 800a580:	bfde      	ittt	le
 800a582:	2330      	movle	r3, #48	; 0x30
 800a584:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a588:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a58c:	1b92      	subs	r2, r2, r6
 800a58e:	6122      	str	r2, [r4, #16]
 800a590:	f8cd a000 	str.w	sl, [sp]
 800a594:	464b      	mov	r3, r9
 800a596:	aa03      	add	r2, sp, #12
 800a598:	4621      	mov	r1, r4
 800a59a:	4640      	mov	r0, r8
 800a59c:	f7ff fee2 	bl	800a364 <_printf_common>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d14c      	bne.n	800a63e <_printf_i+0x1fe>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5a8:	b004      	add	sp, #16
 800a5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ae:	4835      	ldr	r0, [pc, #212]	; (800a684 <_printf_i+0x244>)
 800a5b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	680e      	ldr	r6, [r1, #0]
 800a5b8:	061f      	lsls	r7, r3, #24
 800a5ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5be:	600e      	str	r6, [r1, #0]
 800a5c0:	d514      	bpl.n	800a5ec <_printf_i+0x1ac>
 800a5c2:	07d9      	lsls	r1, r3, #31
 800a5c4:	bf44      	itt	mi
 800a5c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ca:	6023      	strmi	r3, [r4, #0]
 800a5cc:	b91d      	cbnz	r5, 800a5d6 <_printf_i+0x196>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	f023 0320 	bic.w	r3, r3, #32
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	2310      	movs	r3, #16
 800a5d8:	e7b0      	b.n	800a53c <_printf_i+0xfc>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	f043 0320 	orr.w	r3, r3, #32
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	2378      	movs	r3, #120	; 0x78
 800a5e4:	4828      	ldr	r0, [pc, #160]	; (800a688 <_printf_i+0x248>)
 800a5e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ea:	e7e3      	b.n	800a5b4 <_printf_i+0x174>
 800a5ec:	065e      	lsls	r6, r3, #25
 800a5ee:	bf48      	it	mi
 800a5f0:	b2ad      	uxthmi	r5, r5
 800a5f2:	e7e6      	b.n	800a5c2 <_printf_i+0x182>
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	e7bb      	b.n	800a570 <_printf_i+0x130>
 800a5f8:	680b      	ldr	r3, [r1, #0]
 800a5fa:	6826      	ldr	r6, [r4, #0]
 800a5fc:	6960      	ldr	r0, [r4, #20]
 800a5fe:	1d1d      	adds	r5, r3, #4
 800a600:	600d      	str	r5, [r1, #0]
 800a602:	0635      	lsls	r5, r6, #24
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	d501      	bpl.n	800a60c <_printf_i+0x1cc>
 800a608:	6018      	str	r0, [r3, #0]
 800a60a:	e002      	b.n	800a612 <_printf_i+0x1d2>
 800a60c:	0671      	lsls	r1, r6, #25
 800a60e:	d5fb      	bpl.n	800a608 <_printf_i+0x1c8>
 800a610:	8018      	strh	r0, [r3, #0]
 800a612:	2300      	movs	r3, #0
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	4616      	mov	r6, r2
 800a618:	e7ba      	b.n	800a590 <_printf_i+0x150>
 800a61a:	680b      	ldr	r3, [r1, #0]
 800a61c:	1d1a      	adds	r2, r3, #4
 800a61e:	600a      	str	r2, [r1, #0]
 800a620:	681e      	ldr	r6, [r3, #0]
 800a622:	6862      	ldr	r2, [r4, #4]
 800a624:	2100      	movs	r1, #0
 800a626:	4630      	mov	r0, r6
 800a628:	f7f5 fdda 	bl	80001e0 <memchr>
 800a62c:	b108      	cbz	r0, 800a632 <_printf_i+0x1f2>
 800a62e:	1b80      	subs	r0, r0, r6
 800a630:	6060      	str	r0, [r4, #4]
 800a632:	6863      	ldr	r3, [r4, #4]
 800a634:	6123      	str	r3, [r4, #16]
 800a636:	2300      	movs	r3, #0
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63c:	e7a8      	b.n	800a590 <_printf_i+0x150>
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	4632      	mov	r2, r6
 800a642:	4649      	mov	r1, r9
 800a644:	4640      	mov	r0, r8
 800a646:	47d0      	blx	sl
 800a648:	3001      	adds	r0, #1
 800a64a:	d0ab      	beq.n	800a5a4 <_printf_i+0x164>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	079b      	lsls	r3, r3, #30
 800a650:	d413      	bmi.n	800a67a <_printf_i+0x23a>
 800a652:	68e0      	ldr	r0, [r4, #12]
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	4298      	cmp	r0, r3
 800a658:	bfb8      	it	lt
 800a65a:	4618      	movlt	r0, r3
 800a65c:	e7a4      	b.n	800a5a8 <_printf_i+0x168>
 800a65e:	2301      	movs	r3, #1
 800a660:	4632      	mov	r2, r6
 800a662:	4649      	mov	r1, r9
 800a664:	4640      	mov	r0, r8
 800a666:	47d0      	blx	sl
 800a668:	3001      	adds	r0, #1
 800a66a:	d09b      	beq.n	800a5a4 <_printf_i+0x164>
 800a66c:	3501      	adds	r5, #1
 800a66e:	68e3      	ldr	r3, [r4, #12]
 800a670:	9903      	ldr	r1, [sp, #12]
 800a672:	1a5b      	subs	r3, r3, r1
 800a674:	42ab      	cmp	r3, r5
 800a676:	dcf2      	bgt.n	800a65e <_printf_i+0x21e>
 800a678:	e7eb      	b.n	800a652 <_printf_i+0x212>
 800a67a:	2500      	movs	r5, #0
 800a67c:	f104 0619 	add.w	r6, r4, #25
 800a680:	e7f5      	b.n	800a66e <_printf_i+0x22e>
 800a682:	bf00      	nop
 800a684:	0800ae11 	.word	0x0800ae11
 800a688:	0800ae22 	.word	0x0800ae22

0800a68c <_sbrk_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d06      	ldr	r5, [pc, #24]	; (800a6a8 <_sbrk_r+0x1c>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f6 fea0 	bl	80013dc <_sbrk>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_sbrk_r+0x1a>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_sbrk_r+0x1a>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	2000342c 	.word	0x2000342c

0800a6ac <__sread>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b4:	f000 f8ee 	bl	800a894 <_read_r>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	bfab      	itete	ge
 800a6bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6be:	89a3      	ldrhlt	r3, [r4, #12]
 800a6c0:	181b      	addge	r3, r3, r0
 800a6c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6c6:	bfac      	ite	ge
 800a6c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6ca:	81a3      	strhlt	r3, [r4, #12]
 800a6cc:	bd10      	pop	{r4, pc}

0800a6ce <__swrite>:
 800a6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d2:	461f      	mov	r7, r3
 800a6d4:	898b      	ldrh	r3, [r1, #12]
 800a6d6:	05db      	lsls	r3, r3, #23
 800a6d8:	4605      	mov	r5, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	4616      	mov	r6, r2
 800a6de:	d505      	bpl.n	800a6ec <__swrite+0x1e>
 800a6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f000 f868 	bl	800a7bc <_lseek_r>
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6f6:	81a3      	strh	r3, [r4, #12]
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a702:	f000 b817 	b.w	800a734 <_write_r>

0800a706 <__sseek>:
 800a706:	b510      	push	{r4, lr}
 800a708:	460c      	mov	r4, r1
 800a70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70e:	f000 f855 	bl	800a7bc <_lseek_r>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	bf15      	itete	ne
 800a718:	6560      	strne	r0, [r4, #84]	; 0x54
 800a71a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a71e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a722:	81a3      	strheq	r3, [r4, #12]
 800a724:	bf18      	it	ne
 800a726:	81a3      	strhne	r3, [r4, #12]
 800a728:	bd10      	pop	{r4, pc}

0800a72a <__sclose>:
 800a72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72e:	f000 b813 	b.w	800a758 <_close_r>
	...

0800a734 <_write_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4d07      	ldr	r5, [pc, #28]	; (800a754 <_write_r+0x20>)
 800a738:	4604      	mov	r4, r0
 800a73a:	4608      	mov	r0, r1
 800a73c:	4611      	mov	r1, r2
 800a73e:	2200      	movs	r2, #0
 800a740:	602a      	str	r2, [r5, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	f7f6 fa46 	bl	8000bd4 <_write>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_write_r+0x1e>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_write_r+0x1e>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	2000342c 	.word	0x2000342c

0800a758 <_close_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_close_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	f7f6 fe05 	bl	8001372 <_close>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_close_r+0x1a>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_close_r+0x1a>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	2000342c 	.word	0x2000342c

0800a778 <_fstat_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_fstat_r+0x20>)
 800a77c:	2300      	movs	r3, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	4611      	mov	r1, r2
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f7f6 fe00 	bl	800138a <_fstat>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d102      	bne.n	800a794 <_fstat_r+0x1c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b103      	cbz	r3, 800a794 <_fstat_r+0x1c>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	2000342c 	.word	0x2000342c

0800a79c <_isatty_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_isatty_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f6 fdff 	bl	80013aa <_isatty>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_isatty_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_isatty_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	2000342c 	.word	0x2000342c

0800a7bc <_lseek_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d07      	ldr	r5, [pc, #28]	; (800a7dc <_lseek_r+0x20>)
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	602a      	str	r2, [r5, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f7f6 fdf8 	bl	80013c0 <_lseek>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_lseek_r+0x1e>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_lseek_r+0x1e>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	2000342c 	.word	0x2000342c

0800a7e0 <memcpy>:
 800a7e0:	440a      	add	r2, r1
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7e8:	d100      	bne.n	800a7ec <memcpy+0xc>
 800a7ea:	4770      	bx	lr
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	d1f9      	bne.n	800a7ee <memcpy+0xe>
 800a7fa:	bd10      	pop	{r4, pc}

0800a7fc <memmove>:
 800a7fc:	4288      	cmp	r0, r1
 800a7fe:	b510      	push	{r4, lr}
 800a800:	eb01 0402 	add.w	r4, r1, r2
 800a804:	d902      	bls.n	800a80c <memmove+0x10>
 800a806:	4284      	cmp	r4, r0
 800a808:	4623      	mov	r3, r4
 800a80a:	d807      	bhi.n	800a81c <memmove+0x20>
 800a80c:	1e43      	subs	r3, r0, #1
 800a80e:	42a1      	cmp	r1, r4
 800a810:	d008      	beq.n	800a824 <memmove+0x28>
 800a812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a81a:	e7f8      	b.n	800a80e <memmove+0x12>
 800a81c:	4402      	add	r2, r0
 800a81e:	4601      	mov	r1, r0
 800a820:	428a      	cmp	r2, r1
 800a822:	d100      	bne.n	800a826 <memmove+0x2a>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a82e:	e7f7      	b.n	800a820 <memmove+0x24>

0800a830 <__malloc_lock>:
 800a830:	4801      	ldr	r0, [pc, #4]	; (800a838 <__malloc_lock+0x8>)
 800a832:	f7ff b9d1 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 800a836:	bf00      	nop
 800a838:	20003424 	.word	0x20003424

0800a83c <__malloc_unlock>:
 800a83c:	4801      	ldr	r0, [pc, #4]	; (800a844 <__malloc_unlock+0x8>)
 800a83e:	f7ff b9cc 	b.w	8009bda <__retarget_lock_release_recursive>
 800a842:	bf00      	nop
 800a844:	20003424 	.word	0x20003424

0800a848 <_realloc_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	4607      	mov	r7, r0
 800a84c:	4614      	mov	r4, r2
 800a84e:	460e      	mov	r6, r1
 800a850:	b921      	cbnz	r1, 800a85c <_realloc_r+0x14>
 800a852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a856:	4611      	mov	r1, r2
 800a858:	f7ff ba74 	b.w	8009d44 <_malloc_r>
 800a85c:	b922      	cbnz	r2, 800a868 <_realloc_r+0x20>
 800a85e:	f7ff fa21 	bl	8009ca4 <_free_r>
 800a862:	4625      	mov	r5, r4
 800a864:	4628      	mov	r0, r5
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a868:	f000 f826 	bl	800a8b8 <_malloc_usable_size_r>
 800a86c:	42a0      	cmp	r0, r4
 800a86e:	d20f      	bcs.n	800a890 <_realloc_r+0x48>
 800a870:	4621      	mov	r1, r4
 800a872:	4638      	mov	r0, r7
 800a874:	f7ff fa66 	bl	8009d44 <_malloc_r>
 800a878:	4605      	mov	r5, r0
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0f2      	beq.n	800a864 <_realloc_r+0x1c>
 800a87e:	4631      	mov	r1, r6
 800a880:	4622      	mov	r2, r4
 800a882:	f7ff ffad 	bl	800a7e0 <memcpy>
 800a886:	4631      	mov	r1, r6
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff fa0b 	bl	8009ca4 <_free_r>
 800a88e:	e7e9      	b.n	800a864 <_realloc_r+0x1c>
 800a890:	4635      	mov	r5, r6
 800a892:	e7e7      	b.n	800a864 <_realloc_r+0x1c>

0800a894 <_read_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d07      	ldr	r5, [pc, #28]	; (800a8b4 <_read_r+0x20>)
 800a898:	4604      	mov	r4, r0
 800a89a:	4608      	mov	r0, r1
 800a89c:	4611      	mov	r1, r2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	602a      	str	r2, [r5, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f7f6 fd48 	bl	8001338 <_read>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_read_r+0x1e>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_read_r+0x1e>
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	2000342c 	.word	0x2000342c

0800a8b8 <_malloc_usable_size_r>:
 800a8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8bc:	1f18      	subs	r0, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bfbc      	itt	lt
 800a8c2:	580b      	ldrlt	r3, [r1, r0]
 800a8c4:	18c0      	addlt	r0, r0, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_init>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <_fini>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	bf00      	nop
 800a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8da:	bc08      	pop	{r3}
 800a8dc:	469e      	mov	lr, r3
 800a8de:	4770      	bx	lr
