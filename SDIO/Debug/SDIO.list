
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800ab58  0800ab58  0001ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c8  0800b0c8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0c8  0800b0c8  0001b0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0d0  0800b0d0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d4  0800b0d4  0001b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800b0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00003388  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003430  20003430  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3c0  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c3  00000000  00000000  0003c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f58  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e00  00000000  00000000  000673e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39dd  00000000  00000000  000801e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153bbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d60  00000000  00000000  00153c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab40 	.word	0x0800ab40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800ab40 	.word	0x0800ab40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ba4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bac:	e000      	b.n	8000bb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <_write+0x48>)
 8000bea:	f004 f856 	bl	8004c9a <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e009      	b.n	8000c08 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc1 	bl	8000b84 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf1      	blt.n	8000bf4 <_write+0x20>
	}
	return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001250 	.word	0x20001250

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fee7 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f839 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 f913 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c32:	f000 f8e9 	bl	8000e08 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000c36:	f000 f89d 	bl	8000d74 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c3a:	f005 f86b 	bl	8005d14 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8000c3e:	f000 f8b9 	bl	8000db4 <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 zerg_mount();
 8000c42:	f000 fc37 	bl	80014b4 <zerg_mount>
	 zerg_format();
 8000c46:	f000 fc51 	bl	80014ec <zerg_format>
	 zerg_creat_folder(folder_name);
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <main+0x74>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fd7e 	bl	8001750 <zerg_creat_folder>
	 zerg_open();
 8000c54:	f000 fc70 	bl	8001538 <zerg_open>
	 zerg_write();
 8000c58:	f000 fc8e 	bl	8001578 <zerg_write>
	 zerg_read();
 8000c5c:	f000 fcc4 	bl	80015e8 <zerg_read>

	 for (int i=0;i<=10;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	e004      	b.n	8000c70 <main+0x50>
	 zerg_add_data();
 8000c66:	f000 fcff 	bl	8001668 <zerg_add_data>
	 for (int i=0;i<=10;i++){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b0a      	cmp	r3, #10
 8000c74:	ddf7      	ble.n	8000c66 <main+0x46>
	 }
	 zerg_read();
 8000c76:	f000 fcb7 	bl	80015e8 <zerg_read>
	 zerg_get_free_space(); // Узнаем свободное место до удаления
 8000c7a:	f000 fdad 	bl	80017d8 <zerg_get_free_space>
	 //zerg_scan_files(path);    // НЕ ВИДИТ ФАЙЛЫ!!!, РАЗБЕРИСЬ!!!
	 //zerg_delete(folder_name); // Удаляем папку "folder_name" или файл "name"
	 zerg_get_free_space(); // Узнаем свободное место после удаления
 8000c7e:	f000 fdab 	bl	80017d8 <zerg_get_free_space>
	 zerg_get_file_info(name);
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <main+0x78>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fdfe 	bl	8001888 <zerg_get_file_info>
	 zerg_ummount(path);
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <main+0x7c>)
 8000c8e:	f000 fd83 	bl	8001798 <zerg_ummount>

	while (1) {
 8000c92:	e7fe      	b.n	8000c92 <main+0x72>
 8000c94:	20000018 	.word	0x20000018
 8000c98:	20000014 	.word	0x20000014
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2230      	movs	r2, #48	; 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 ff72 	bl	8009b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d14:	23a8      	movs	r3, #168	; 0xa8
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fce9 	bl	80026fc <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d30:	f000 f8e8 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2105      	movs	r1, #5
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 ff4a 	bl	8002bec <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d5e:	f000 f8d1 	bl	8000f04 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d7a:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <MX_SDIO_SD_Init+0x3c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d9e:	2205      	movs	r2, #5
 8000da0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	200011cc 	.word	0x200011cc
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_USART6_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dec:	f003 ff08 	bl	8004c00 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 f885 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20001250 	.word	0x20001250
 8000e04:	40011400 	.word	0x40011400

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_DMA_Init+0x4c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_DMA_Init+0x4c>)
 8000e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_DMA_Init+0x4c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	203b      	movs	r0, #59	; 0x3b
 8000e30:	f000 ff00 	bl	8001c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e34:	203b      	movs	r0, #59	; 0x3b
 8000e36:	f000 ff19 	bl	8001c6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2045      	movs	r0, #69	; 0x45
 8000e40:	f000 fef8 	bl	8001c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e44:	2045      	movs	r0, #69	; 0x45
 8000e46:	f000 ff11 	bl	8001c6c <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_GPIO_Init+0x84>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <MX_GPIO_Init+0x84>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_GPIO_Init+0x84>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_GPIO_Init+0x84>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <MX_GPIO_Init+0x84>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_GPIO_Init+0x84>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef2:	f000 fda3 	bl	8001a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40002000 	.word	0x40002000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a70      	ldr	r2, [pc, #448]	; (8001140 <HAL_SD_MspInit+0x1e0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 80da 	bne.w	8001138 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b6e      	ldr	r3, [pc, #440]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	4a6d      	ldr	r2, [pc, #436]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f92:	6453      	str	r3, [r2, #68]	; 0x44
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a66      	ldr	r2, [pc, #408]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b64      	ldr	r3, [pc, #400]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a5f      	ldr	r2, [pc, #380]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_SD_MspInit+0x1e4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fd8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fea:	230c      	movs	r3, #12
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4854      	ldr	r0, [pc, #336]	; (8001148 <HAL_SD_MspInit+0x1e8>)
 8000ff6:	f001 f9e5 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800100c:	230c      	movs	r3, #12
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	484c      	ldr	r0, [pc, #304]	; (8001148 <HAL_SD_MspInit+0x1e8>)
 8001018:	f001 f9d4 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800101c:	2304      	movs	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800102c:	230c      	movs	r3, #12
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4845      	ldr	r0, [pc, #276]	; (800114c <HAL_SD_MspInit+0x1ec>)
 8001038:	f001 f9c4 	bl	80023c4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800103c:	4b44      	ldr	r3, [pc, #272]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_SD_MspInit+0x1f4>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001044:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001048:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001064:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001070:	2220      	movs	r2, #32
 8001072:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 800107c:	2204      	movs	r2, #4
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001082:	2203      	movs	r2, #3
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001088:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001090:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001096:	482e      	ldr	r0, [pc, #184]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 8001098:	f000 fdf6 	bl	8001c88 <HAL_DMA_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80010a2:	f7ff ff2f 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <HAL_SD_MspInit+0x1f0>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_SD_MspInit+0x1fc>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010be:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010c2:	2240      	movs	r2, #64	; 0x40
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010da:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010e6:	2220      	movs	r2, #32
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010f8:	2203      	movs	r2, #3
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 80010fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 8001106:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 800110e:	f000 fdbb 	bl	8001c88 <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001118:	f7ff fef4 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_SD_MspInit+0x1f8>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2031      	movs	r0, #49	; 0x31
 800112e:	f000 fd81 	bl	8001c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001132:	2031      	movs	r0, #49	; 0x31
 8001134:	f000 fd9a 	bl	8001c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40023800 	.word	0x40023800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	2000110c 	.word	0x2000110c
 8001154:	40026458 	.word	0x40026458
 8001158:	2000116c 	.word	0x2000116c
 800115c:	400264a0 	.word	0x400264a0

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0x84>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12b      	bne.n	80011da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0x88>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ba:	23c0      	movs	r3, #192	; 0xc0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011ca:	2308      	movs	r3, #8
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x8c>)
 80011d6:	f001 f8f5 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020800 	.word	0x40020800

080011f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	202d      	movs	r0, #45	; 0x2d
 8001206:	f000 fd15 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800120a:	202d      	movs	r0, #45	; 0x2d
 800120c:	f000 fd2e 	bl	8001c6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_InitTick+0xa4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_InitTick+0xa4>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_InitTick+0xa4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122c:	f107 0210 	add.w	r2, r7, #16
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fed4 	bl	8002fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800123c:	f001 feaa 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_InitTick+0xa8>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	3b01      	subs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_InitTick+0xac>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_InitTick+0xb0>)
 8001258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_InitTick+0xac>)
 800125c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001260:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_InitTick+0xac>)
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_InitTick+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_InitTick+0xac>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <HAL_InitTick+0xac>)
 8001276:	f003 fa16 	bl	80046a6 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_InitTick+0xac>)
 8001282:	f003 fa69 	bl	8004758 <HAL_TIM_Base_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	431bde83 	.word	0x431bde83
 800129c:	20001294 	.word	0x20001294
 80012a0:	40002000 	.word	0x40002000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001302:	f003 fa99 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001294 	.word	0x20001294

08001310 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <SDIO_IRQHandler+0x10>)
 8001316:	f002 f90d 	bl	8003534 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200011cc 	.word	0x200011cc

08001324 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream3_IRQHandler+0x10>)
 800132a:	f000 fdd5 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000110c 	.word	0x2000110c

08001338 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA2_Stream6_IRQHandler+0x10>)
 800133e:	f000 fdcb 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000116c 	.word	0x2000116c

0800134c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e00a      	b.n	8001374 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135e:	f3af 8000 	nop.w
 8001362:	4601      	mov	r1, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf0      	blt.n	800135e <_read+0x12>
	}

return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ae:	605a      	str	r2, [r3, #4]
	return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_isatty>:

int _isatty(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	return 1;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f008 fb90 	bl	8009b44 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20020000 	.word	0x20020000
 8001450:	00000400 	.word	0x00000400
 8001454:	200000c4 	.word	0x200000c4
 8001458:	20003430 	.word	0x20003430

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <clear_buffer>:
uint32_t total, free_space;

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e007      	b.n	800149c <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <clear_buffer+0x30>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b63      	cmp	r3, #99	; 0x63
 80014a0:	ddf4      	ble.n	800148c <clear_buffer+0xc>
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200000c8 	.word	0x200000c8

080014b4 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80014b8:	2200      	movs	r2, #0
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <zerg_mount+0x28>)
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <zerg_mount+0x2c>)
 80014be:	f006 fcc9 	bl	8007e54 <f_mount>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <zerg_mount+0x1c>
	{
		printf("Error Mounting SD Card\r\n");
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <zerg_mount+0x30>)
 80014ca:	f008 fbf3 	bl	8009cb4 <puts>
	}
	else
	{
		printf("SD card mounted successfully!\r\n");
	}
}
 80014ce:	e002      	b.n	80014d6 <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <zerg_mount+0x34>)
 80014d2:	f008 fbef 	bl	8009cb4 <puts>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200013b8 	.word	0x200013b8
 80014e0:	200023ec 	.word	0x200023ec
 80014e4:	0800ab6c 	.word	0x0800ab6c
 80014e8:	0800ab84 	.word	0x0800ab84

080014ec <zerg_format>:
/*--------------------------------------------------------------------------------------------------------------*/
// Форматируем SD-карту / Format SD card
void zerg_format(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af02      	add	r7, sp, #8
	// fr = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, buffer, sizeof(buffer));
	// fr = f_mkfs("0:", FM_ANY, 0, buffer, sizeof(buffer));
	FRESULT fr;
	fr = f_mkfs(&path, FM_ANY, 0, buffer, sizeof(buffer));
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <zerg_format+0x3c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	2107      	movs	r1, #7
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <zerg_format+0x40>)
 8001500:	f007 fe74 	bl	80091ec <f_mkfs>
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
	if (fr != FR_OK)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <zerg_format+0x2e>
	{
		printf("Error to format SD-card!\r\n");
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <zerg_format+0x44>)
 8001510:	f008 fbd0 	bl	8009cb4 <puts>
		Error_Handler();
 8001514:	f7ff fcf6 	bl	8000f04 <Error_Handler>
	}
	else
	{
		printf("SD-card formated successfully!\r\n");
	}
}
 8001518:	e002      	b.n	8001520 <zerg_format+0x34>
		printf("SD-card formated successfully!\r\n");
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <zerg_format+0x48>)
 800151c:	f008 fbca 	bl	8009cb4 <puts>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000c8 	.word	0x200000c8
 800152c:	20000000 	.word	0x20000000
 8001530:	0800aba4 	.word	0x0800aba4
 8001534:	0800abc0 	.word	0x0800abc0

08001538 <zerg_open>:
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*)name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <zerg_open+0x30>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	220a      	movs	r2, #10
 8001542:	4619      	mov	r1, r3
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <zerg_open+0x34>)
 8001546:	f006 fccb 	bl	8007ee0 <f_open>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <zerg_open+0x20>
	{
		printf("Error openning file\r\n");
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <zerg_open+0x38>)
 8001552:	f008 fbaf 	bl	8009cb4 <puts>
	}
	else
	{
		printf("File %s Openned Successfully!\r\n",name);
	}
}
 8001556:	e005      	b.n	8001564 <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n",name);
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <zerg_open+0x30>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <zerg_open+0x3c>)
 8001560:	f008 fb22 	bl	8009ba8 <iprintf>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000014 	.word	0x20000014
 800156c:	200013bc 	.word	0x200013bc
 8001570:	0800abe0 	.word	0x0800abe0
 8001574:	0800abf8 	.word	0x0800abf8

08001578 <zerg_write>:
/*--------------------------------------------------------------------------------------------------------------*/
// Запись данных в файл / Write data to the text file
void zerg_write(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	res = f_write(&SDFile, wtext, strlen((char *)wtext),
 800157c:	4814      	ldr	r0, [pc, #80]	; (80015d0 <zerg_write+0x58>)
 800157e:	f7fe fe27 	bl	80001d0 <strlen>
 8001582:	4602      	mov	r2, r0
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <zerg_write+0x5c>)
 8001586:	4912      	ldr	r1, [pc, #72]	; (80015d0 <zerg_write+0x58>)
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <zerg_write+0x60>)
 800158a:	f006 ffd4 	bl	8008536 <f_write>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <zerg_write+0x64>)
 8001594:	701a      	strb	r2, [r3, #0]
				  (void *)&byteswritten);
	if ((byteswritten == 0) || (res != FR_OK))
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <zerg_write+0x5c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <zerg_write+0x2e>
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <zerg_write+0x64>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <zerg_write+0x40>
	{
		printf("Failed to write file!\r\n");
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <zerg_write+0x68>)
 80015a8:	f008 fb84 	bl	8009cb4 <puts>
		f_close(&SDFile);
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <zerg_write+0x60>)
 80015ae:	f007 f9d4 	bl	800895a <f_close>
		clear_buffer();
 80015b2:	f7ff ff65 	bl	8001480 <clear_buffer>
 80015b6:	e008      	b.n	80015ca <zerg_write+0x52>
	}
	else
	{
		printf("File written successfully\r\n");
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <zerg_write+0x6c>)
 80015ba:	f008 fb7b 	bl	8009cb4 <puts>
		f_close(&SDFile);
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <zerg_write+0x60>)
 80015c0:	f007 f9cb 	bl	800895a <f_close>
		clear_buffer();
 80015c4:	f7ff ff5c 	bl	8001480 <clear_buffer>
	}
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000020 	.word	0x20000020
 80015d4:	200012e0 	.word	0x200012e0
 80015d8:	200013bc 	.word	0x200013bc
 80015dc:	200013ac 	.word	0x200013ac
 80015e0:	0800ac18 	.word	0x0800ac18
 80015e4:	0800ac30 	.word	0x0800ac30

080015e8 <zerg_read>:
/*--------------------------------------------------------------------------------------------------------------*/
// Считываем данные из файла / Reading data from file
void zerg_read(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	f_open(&SDFile, (char*)name, FA_READ);
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <zerg_read+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <zerg_read+0x68>)
 80015f6:	f006 fc73 	bl	8007ee0 <f_open>
	memset(rtext, 0, sizeof(rtext));
 80015fa:	2264      	movs	r2, #100	; 0x64
 80015fc:	2100      	movs	r1, #0
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <zerg_read+0x6c>)
 8001600:	f008 faca 	bl	8009b98 <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT *)&bytesread);
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <zerg_read+0x70>)
 8001606:	2264      	movs	r2, #100	; 0x64
 8001608:	4912      	ldr	r1, [pc, #72]	; (8001654 <zerg_read+0x6c>)
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <zerg_read+0x68>)
 800160c:	f006 fe34 	bl	8008278 <f_read>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <zerg_read+0x74>)
 8001616:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK))
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <zerg_read+0x70>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <zerg_read+0x40>
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <zerg_read+0x74>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <zerg_read+0x48>
	{
		printf("Failed to read file!\r\n");
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <zerg_read+0x78>)
 800162a:	f008 fb43 	bl	8009cb4 <puts>
 800162e:	e006      	b.n	800163e <zerg_read+0x56>
	}
	else
	{
		//printf("File *%s* readed successfully! \n", name);
		printf("File *%s* has content it is; %s\r\n",name, (char *)rtext);
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <zerg_read+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <zerg_read+0x6c>)
 8001636:	4619      	mov	r1, r3
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <zerg_read+0x7c>)
 800163a:	f008 fab5 	bl	8009ba8 <iprintf>
	}
	f_close(&SDFile);
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <zerg_read+0x68>)
 8001640:	f007 f98b 	bl	800895a <f_close>
	clear_buffer();
 8001644:	f7ff ff1c 	bl	8001480 <clear_buffer>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000014 	.word	0x20000014
 8001650:	200013bc 	.word	0x200013bc
 8001654:	2000130c 	.word	0x2000130c
 8001658:	200012e8 	.word	0x200012e8
 800165c:	200013ac 	.word	0x200013ac
 8001660:	0800ac4c 	.word	0x0800ac4c
 8001664:	0800ac64 	.word	0x0800ac64

08001668 <zerg_add_data>:
//		return i;
//	}
/*--------------------------------------------------------------------------------------------------------------*/
// Дописываем данные в существующий файл / Adding data to an existing file
void zerg_add_data(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, (char*)name, FA_OPEN_APPEND | FA_WRITE);
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <zerg_add_data+0xc4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2232      	movs	r2, #50	; 0x32
 8001674:	4619      	mov	r1, r3
 8001676:	482e      	ldr	r0, [pc, #184]	; (8001730 <zerg_add_data+0xc8>)
 8001678:	f006 fc32 	bl	8007ee0 <f_open>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <zerg_add_data+0xcc>)
 8001682:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <zerg_add_data+0xcc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <zerg_add_data+0x38>
	{
		printf("Error no %d in opening file *%s*\n", res, name);
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <zerg_add_data+0xcc>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <zerg_add_data+0xc4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4827      	ldr	r0, [pc, #156]	; (8001738 <zerg_add_data+0xd0>)
 800169a:	f008 fa85 	bl	8009ba8 <iprintf>
 800169e:	e005      	b.n	80016ac <zerg_add_data+0x44>
	}
	else
	{
		printf("File *%s* is opened. Now we will add same information! \n", name);
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <zerg_add_data+0xc4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4825      	ldr	r0, [pc, #148]	; (800173c <zerg_add_data+0xd4>)
 80016a8:	f008 fa7e 	bl	8009ba8 <iprintf>
	}
	int len = f_size(&SDFile);
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <zerg_add_data+0xc8>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	607b      	str	r3, [r7, #4]
	if (len != 0)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <zerg_add_data+0x56>
		len += 2;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3302      	adds	r3, #2
 80016bc:	607b      	str	r3, [r7, #4]
	f_lseek(&SDFile, len);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4619      	mov	r1, r3
 80016c2:	481b      	ldr	r0, [pc, #108]	; (8001730 <zerg_add_data+0xc8>)
 80016c4:	f007 f973 	bl	80089ae <f_lseek>
	res = f_write(&SDFile, addtext, sizeof(addtext), (void *)&byteswritten);
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <zerg_add_data+0xd8>)
 80016ca:	2210      	movs	r2, #16
 80016cc:	491d      	ldr	r1, [pc, #116]	; (8001744 <zerg_add_data+0xdc>)
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <zerg_add_data+0xc8>)
 80016d0:	f006 ff31 	bl	8008536 <f_write>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <zerg_add_data+0xcc>)
 80016da:	701a      	strb	r2, [r3, #0]
	if ((byteswritten > 0) && (res == FR_OK))
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <zerg_add_data+0xd8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <zerg_add_data+0x88>
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <zerg_add_data+0xcc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <zerg_add_data+0x88>

		clear_buffer();
 80016ec:	f7ff fec8 	bl	8001480 <clear_buffer>
	{
		printf("Information was added successfully in %s\n", name);
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <zerg_add_data+0xc4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <zerg_add_data+0xe0>)
 80016f8:	f008 fa56 	bl	8009ba8 <iprintf>
	}
	/* Close file */
	res = f_close(&SDFile);
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <zerg_add_data+0xc8>)
 80016fe:	f007 f92c 	bl	800895a <f_close>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <zerg_add_data+0xcc>)
 8001708:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <zerg_add_data+0xcc>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <zerg_add_data+0xbc>
	{
		printf("Error no %d in closing file *%s*\n", res, name);
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <zerg_add_data+0xcc>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <zerg_add_data+0xc4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <zerg_add_data+0xe4>)
 8001720:	f008 fa42 	bl	8009ba8 <iprintf>
	}
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000014 	.word	0x20000014
 8001730:	200013bc 	.word	0x200013bc
 8001734:	200013ac 	.word	0x200013ac
 8001738:	0800ac88 	.word	0x0800ac88
 800173c:	0800acac 	.word	0x0800acac
 8001740:	200012e0 	.word	0x200012e0
 8001744:	2000002c 	.word	0x2000002c
 8001748:	0800ace8 	.word	0x0800ace8
 800174c:	0800ad14 	.word	0x0800ad14

08001750 <zerg_creat_folder>:
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем папку / Creating a folder
void zerg_creat_folder(char *folder_name)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	res = f_mkdir((char*)folder_name);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f007 fc3a 	bl	8008fd2 <f_mkdir>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <zerg_creat_folder+0x3c>)
 8001764:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <zerg_creat_folder+0x3c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <zerg_creat_folder+0x28>
	{
		printf("Folder %s has been created successfully \n", folder_name);
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <zerg_creat_folder+0x40>)
 8001772:	f008 fa19 	bl	8009ba8 <iprintf>
	else
	{
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
		// send_uart(buffer);
	}
}
 8001776:	e005      	b.n	8001784 <zerg_creat_folder+0x34>
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <zerg_creat_folder+0x3c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <zerg_creat_folder+0x44>)
 8001780:	f008 fa12 	bl	8009ba8 <iprintf>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200013ac 	.word	0x200013ac
 8001790:	0800ad38 	.word	0x0800ad38
 8001794:	0800ad64 	.word	0x0800ad64

08001798 <zerg_ummount>:


/*--------------------------------------------------------------------------------------------------------------*/
// Отмантируем SD карту / Ummount the SD card
void zerg_ummount(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <zerg_ummount+0x30>)
 80017a0:	2000      	movs	r0, #0
 80017a2:	f006 fb57 	bl	8007e54 <f_mount>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <zerg_ummount+0x34>)
 80017ac:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <zerg_ummount+0x34>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <zerg_ummount+0x26>
		printf("SD_card is UNMOUNTED successfully!\n");
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <zerg_ummount+0x38>)
 80017b8:	f008 fa7c 	bl	8009cb4 <puts>
	else
		printf("Error!!! in UNMOUNTING SD CARD\n");
}
 80017bc:	e002      	b.n	80017c4 <zerg_ummount+0x2c>
		printf("Error!!! in UNMOUNTING SD CARD\n");
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <zerg_ummount+0x3c>)
 80017c0:	f008 fa78 	bl	8009cb4 <puts>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200013b8 	.word	0x200013b8
 80017cc:	200013ac 	.word	0x200013ac
 80017d0:	0800ada8 	.word	0x0800ada8
 80017d4:	0800adcc 	.word	0x0800adcc

080017d8 <zerg_get_free_space>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Узнать количество свободного места на SD карте / Check free space
void zerg_get_free_space(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <zerg_get_free_space+0x90>)
 80017de:	4923      	ldr	r1, [pc, #140]	; (800186c <zerg_get_free_space+0x94>)
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <zerg_get_free_space+0x98>)
 80017e2:	f007 fb41 	bl	8008e68 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <zerg_get_free_space+0x90>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	3b02      	subs	r3, #2
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <zerg_get_free_space+0x90>)
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	8952      	ldrh	r2, [r2, #10]
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe ffad 	bl	8000758 <__aeabi_ui2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <zerg_get_free_space+0x9c>)
 8001804:	f7fe fd3c 	bl	8000280 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f81c 	bl	800084c <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <zerg_get_free_space+0xa0>)
 8001818:	6013      	str	r3, [r2, #0]
	printf("SD CARD Total Size: \t%lu\n", total);
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <zerg_get_free_space+0xa0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	4816      	ldr	r0, [pc, #88]	; (800187c <zerg_get_free_space+0xa4>)
 8001822:	f008 f9c1 	bl	8009ba8 <iprintf>
	// send_uart(buffer);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <zerg_get_free_space+0x90>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	461a      	mov	r2, r3
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <zerg_get_free_space+0x94>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fb03 f302 	mul.w	r3, r3, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe ff8e 	bl	8000758 <__aeabi_ui2d>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <zerg_get_free_space+0x9c>)
 8001842:	f7fe fd1d 	bl	8000280 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7fe fffd 	bl	800084c <__aeabi_d2uiz>
 8001852:	4603      	mov	r3, r0
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <zerg_get_free_space+0xa8>)
 8001856:	6013      	str	r3, [r2, #0]
	printf("SD CARD Free Space: \t%lu\n", free_space);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <zerg_get_free_space+0xa8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <zerg_get_free_space+0xac>)
 8001860:	f008 f9a2 	bl	8009ba8 <iprintf>
	// send_uart(buffer);
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200013a4 	.word	0x200013a4
 800186c:	200012dc 	.word	0x200012dc
 8001870:	0800ae3c 	.word	0x0800ae3c
 8001874:	3fe00000 	.word	0x3fe00000
 8001878:	200013a8 	.word	0x200013a8
 800187c:	0800ae40 	.word	0x0800ae40
 8001880:	200012f0 	.word	0x200012f0
 8001884:	0800ae5c 	.word	0x0800ae5c

08001888 <zerg_get_file_info>:
/*--------------------------------------------------------------------------------------------------------------*/
// Получить сведения о файле / Get file Information
void zerg_get_file_info(char *name)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
	res = f_stat(name, &fileinfo);
 8001890:	493d      	ldr	r1, [pc, #244]	; (8001988 <zerg_get_file_info+0x100>)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f007 faaf 	bl	8008df6 <f_stat>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <zerg_get_file_info+0x104>)
 800189e:	701a      	strb	r2, [r3, #0]
	switch (res)
 80018a0:	4b3a      	ldr	r3, [pc, #232]	; (800198c <zerg_get_file_info+0x104>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <zerg_get_file_info+0x26>
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d05d      	beq.n	8001968 <zerg_get_file_info+0xe0>
 80018ac:	e061      	b.n	8001972 <zerg_get_file_info+0xea>
	{
	case FR_OK:

		printf("Below are the details of the *%s* \nSize: %lu\n", name, fileinfo.fsize);
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <zerg_get_file_info+0x100>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4836      	ldr	r0, [pc, #216]	; (8001990 <zerg_get_file_info+0x108>)
 80018b8:	f008 f976 	bl	8009ba8 <iprintf>
		// send_uart(buffer);
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <zerg_get_file_info+0x100>)
 80018be:	889b      	ldrh	r3, [r3, #4]
 80018c0:	0a5b      	lsrs	r3, r3, #9
 80018c2:	b29b      	uxth	r3, r3
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018c4:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <zerg_get_file_info+0x100>)
 80018ca:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f003 020f 	and.w	r2, r3, #15
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <zerg_get_file_info+0x100>)
 80018d6:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018d8:	f003 001f 	and.w	r0, r3, #31
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <zerg_get_file_info+0x100>)
 80018de:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018e0:	0adb      	lsrs	r3, r3, #11
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461c      	mov	r4, r3
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <zerg_get_file_info+0x100>)
 80018e8:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	9400      	str	r4, [sp, #0]
 80018f6:	4603      	mov	r3, r0
 80018f8:	4826      	ldr	r0, [pc, #152]	; (8001994 <zerg_get_file_info+0x10c>)
 80018fa:	f008 f955 	bl	8009ba8 <iprintf>
		// end_uart(buffer);
		printf("Attributes: %c%c%c%c%c\n",
			   (fileinfo.fattrib & AM_DIR) ? 'D' : '-',
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <zerg_get_file_info+0x100>)
 8001900:	7a1b      	ldrb	r3, [r3, #8]
 8001902:	f003 0310 	and.w	r3, r3, #16
		printf("Attributes: %c%c%c%c%c\n",
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <zerg_get_file_info+0x86>
 800190a:	2144      	movs	r1, #68	; 0x44
 800190c:	e000      	b.n	8001910 <zerg_get_file_info+0x88>
 800190e:	212d      	movs	r1, #45	; 0x2d
			   (fileinfo.fattrib & AM_RDO) ? 'R' : '-',
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <zerg_get_file_info+0x100>)
 8001912:	7a1b      	ldrb	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
		printf("Attributes: %c%c%c%c%c\n",
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <zerg_get_file_info+0x98>
 800191c:	2052      	movs	r0, #82	; 0x52
 800191e:	e000      	b.n	8001922 <zerg_get_file_info+0x9a>
 8001920:	202d      	movs	r0, #45	; 0x2d
			   (fileinfo.fattrib & AM_HID) ? 'H' : '-',
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <zerg_get_file_info+0x100>)
 8001924:	7a1b      	ldrb	r3, [r3, #8]
 8001926:	f003 0302 	and.w	r3, r3, #2
		printf("Attributes: %c%c%c%c%c\n",
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <zerg_get_file_info+0xaa>
 800192e:	2448      	movs	r4, #72	; 0x48
 8001930:	e000      	b.n	8001934 <zerg_get_file_info+0xac>
 8001932:	242d      	movs	r4, #45	; 0x2d
			   (fileinfo.fattrib & AM_SYS) ? 'S' : '-',
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <zerg_get_file_info+0x100>)
 8001936:	7a1b      	ldrb	r3, [r3, #8]
 8001938:	f003 0304 	and.w	r3, r3, #4
		printf("Attributes: %c%c%c%c%c\n",
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <zerg_get_file_info+0xbc>
 8001940:	2353      	movs	r3, #83	; 0x53
 8001942:	e000      	b.n	8001946 <zerg_get_file_info+0xbe>
 8001944:	232d      	movs	r3, #45	; 0x2d
			   (fileinfo.fattrib & AM_ARC) ? 'A' : '-');
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <zerg_get_file_info+0x100>)
 8001948:	7a12      	ldrb	r2, [r2, #8]
 800194a:	f002 0220 	and.w	r2, r2, #32
		printf("Attributes: %c%c%c%c%c\n",
 800194e:	2a00      	cmp	r2, #0
 8001950:	d001      	beq.n	8001956 <zerg_get_file_info+0xce>
 8001952:	2241      	movs	r2, #65	; 0x41
 8001954:	e000      	b.n	8001958 <zerg_get_file_info+0xd0>
 8001956:	222d      	movs	r2, #45	; 0x2d
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4623      	mov	r3, r4
 800195e:	4602      	mov	r2, r0
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <zerg_get_file_info+0x110>)
 8001962:	f008 f921 	bl	8009ba8 <iprintf>
		// send_uart(buffer);
		break;
 8001966:	e00b      	b.n	8001980 <zerg_get_file_info+0xf8>

	case FR_NO_FILE:
		printf("*%s* does not exist.\n", name);
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <zerg_get_file_info+0x114>)
 800196c:	f008 f91c 	bl	8009ba8 <iprintf>
		// send_uart(buffer);
		break;
 8001970:	e006      	b.n	8001980 <zerg_get_file_info+0xf8>

	default:
		printf("An error occurred. (%d)\n", res);
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <zerg_get_file_info+0x104>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <zerg_get_file_info+0x118>)
 800197a:	f008 f915 	bl	8009ba8 <iprintf>
		// send_uart(buffer);
	}
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	200012f4 	.word	0x200012f4
 800198c:	200013ac 	.word	0x200013ac
 8001990:	0800ae78 	.word	0x0800ae78
 8001994:	0800aea8 	.word	0x0800aea8
 8001998:	0800aecc 	.word	0x0800aecc
 800199c:	0800aee4 	.word	0x0800aee4
 80019a0:	0800aefc 	.word	0x0800aefc

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019aa:	490e      	ldr	r1, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ce:	f7ff fd45 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f008 f8bd 	bl	8009b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff f923 	bl	8000c20 <main>
  bx  lr    
 80019da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80019e8:	0800b0d8 	.word	0x0800b0d8
  ldr r2, =_sbss
 80019ec:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80019f0:	20003430 	.word	0x20003430

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_Init+0x40>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_Init+0x40>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x40>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f8fc 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f7ff fbe2 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fa70 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000040 	.word	0x20000040
 8001a60:	200013b0 	.word	0x200013b0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200013b0 	.word	0x200013b0

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000040 	.word	0x20000040

08001ac4 <__NVIC_SetPriorityGrouping>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff4c 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c46:	f7ff ff61 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	6978      	ldr	r0, [r7, #20]
 8001c52:	f7ff ffb1 	bl	8001bb8 <NVIC_EncodePriority>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff80 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff54 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fee6 	bl	8001a64 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e099      	b.n	8001dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc4:	e00f      	b.n	8001ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc6:	f7ff fecd 	bl	8001a64 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d908      	bls.n	8001ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e078      	b.n	8001dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e8      	bne.n	8001cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_DMA_Init+0x158>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d107      	bne.n	8001d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f023 0307 	bic.w	r3, r3, #7
 8001d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d117      	bne.n	8001daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fa9d 	bl	80022cc <DMA_CheckFifoParam>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001da6:	2301      	movs	r3, #1
 8001da8:	e016      	b.n	8001dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fa54 	bl	8002260 <DMA_CalcBaseAndBitshift>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	f010803f 	.word	0xf010803f

08001de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_DMA_Start_IT+0x26>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e040      	b.n	8001e8c <HAL_DMA_Start_IT+0xa8>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12f      	bne.n	8001e7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f9e6 	bl	8002204 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	223f      	movs	r2, #63	; 0x3f
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0216 	orr.w	r2, r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e005      	b.n	8001e8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b92      	ldr	r3, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x258>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_DMA_IRQHandler+0x25c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808e 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8086 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e078      	b.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01c      	beq.n	8002138 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d030      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02b      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d027      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e022      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
 8002130:	2000001c 	.word	0x2000001c
 8002134:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d032      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d307      	bcc.n	80021be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f2      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x2ca>
 80021bc:	e000      	b.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e000      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021e2:	bf00      	nop
    }
  }
}
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop

080021ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002220:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d108      	bne.n	8002244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002242:	e007      	b.n	8002254 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3b10      	subs	r3, #16
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <DMA_CalcBaseAndBitshift+0x68>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d909      	bls.n	80022a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	659a      	str	r2, [r3, #88]	; 0x58
 80022a0:	e007      	b.n	80022b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	aaaaaaab 	.word	0xaaaaaaab
 80022c8:	0800af74 	.word	0x0800af74

080022cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d11f      	bne.n	8002326 <DMA_CheckFifoParam+0x5a>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d856      	bhi.n	800239a <DMA_CheckFifoParam+0xce>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <DMA_CheckFifoParam+0x28>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002305 	.word	0x08002305
 80022f8:	08002317 	.word	0x08002317
 80022fc:	08002305 	.word	0x08002305
 8002300:	0800239b 	.word	0x0800239b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d046      	beq.n	800239e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002314:	e043      	b.n	800239e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800231e:	d140      	bne.n	80023a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002324:	e03d      	b.n	80023a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	d121      	bne.n	8002374 <DMA_CheckFifoParam+0xa8>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d837      	bhi.n	80023a6 <DMA_CheckFifoParam+0xda>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <DMA_CheckFifoParam+0x70>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800234d 	.word	0x0800234d
 8002340:	08002353 	.word	0x08002353
 8002344:	0800234d 	.word	0x0800234d
 8002348:	08002365 	.word	0x08002365
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      break;
 8002350:	e030      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d025      	beq.n	80023aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002362:	e022      	b.n	80023aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800236c:	d11f      	bne.n	80023ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002372:	e01c      	b.n	80023ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d903      	bls.n	8002382 <DMA_CheckFifoParam+0xb6>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d003      	beq.n	8002388 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002380:	e018      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      break;
 8002386:	e015      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      break;
 8002398:	e00b      	b.n	80023b2 <DMA_CheckFifoParam+0xe6>
      break;
 800239a:	bf00      	nop
 800239c:	e00a      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e008      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e006      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
 80023a8:	e004      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
 80023ac:	e002      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
    }
  } 
  
  return status; 
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e16b      	b.n	80026b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 815a 	bne.w	80026b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b4 	beq.w	80026b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a5f      	ldr	r2, [pc, #380]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a5b      	ldr	r2, [pc, #364]	; (80026d4 <HAL_GPIO_Init+0x310>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <HAL_GPIO_Init+0x226>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a51      	ldr	r2, [pc, #324]	; (80026dc <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d025      	beq.n	80025e6 <HAL_GPIO_Init+0x222>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_GPIO_Init+0x21e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	; (80026e4 <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_GPIO_Init+0x324>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x216>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	; (80026ec <HAL_GPIO_Init+0x328>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_GPIO_Init+0x330>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x20a>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ce:	2308      	movs	r3, #8
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_GPIO_Init+0x310>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_GPIO_Init+0x334>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262e:	4a32      	ldr	r2, [pc, #200]	; (80026f8 <HAL_GPIO_Init+0x334>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_GPIO_Init+0x334>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_GPIO_Init+0x334>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_GPIO_Init+0x334>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_GPIO_Init+0x334>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_GPIO_Init+0x334>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <HAL_GPIO_Init+0x334>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae90 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e264      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d075      	beq.n	8002806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271a:	4ba3      	ldr	r3, [pc, #652]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d00c      	beq.n	8002740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4ba0      	ldr	r3, [pc, #640]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800272e:	2b08      	cmp	r3, #8
 8002730:	d112      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b9d      	ldr	r3, [pc, #628]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b99      	ldr	r3, [pc, #612]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05b      	beq.n	8002804 <HAL_RCC_OscConfig+0x108>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e23f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x74>
 8002762:	4b91      	ldr	r3, [pc, #580]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a90      	ldr	r2, [pc, #576]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xb0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x98>
 800277a:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a8a      	ldr	r2, [pc, #552]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a87      	ldr	r2, [pc, #540]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xb0>
 8002794:	4b84      	ldr	r3, [pc, #528]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a83      	ldr	r2, [pc, #524]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a80      	ldr	r2, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff f956 	bl	8001a64 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff f952 	bl	8001a64 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e204      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xc0>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff f942 	bl	8001a64 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff f93e 	bl	8001a64 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1f0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b6c      	ldr	r3, [pc, #432]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0xe8>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d116      	bne.n	8002864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x152>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1c4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4952      	ldr	r1, [pc, #328]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	e03a      	b.n	80028da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <HAL_RCC_OscConfig+0x2b0>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7ff f8f7 	bl	8001a64 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7ff f8f3 	bl	8001a64 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1a5      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4940      	ldr	r1, [pc, #256]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0x2b0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f8d6 	bl	8001a64 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028bc:	f7ff f8d2 	bl	8001a64 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e184      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d030      	beq.n	8002948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_RCC_OscConfig+0x2b4>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7ff f8b6 	bl	8001a64 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7ff f8b2 	bl	8001a64 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e164      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x200>
 800291a:	e015      	b.n	8002948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x2b4>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff f89f 	bl	8001a64 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292a:	f7ff f89b 	bl	8001a64 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e14d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a0 	beq.w	8002a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x2b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d121      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCC_OscConfig+0x2b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_RCC_OscConfig+0x2b8>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7ff f861 	bl	8001a64 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e011      	b.n	80029ca <HAL_RCC_OscConfig+0x2ce>
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470000 	.word	0x42470000
 80029b0:	42470e80 	.word	0x42470e80
 80029b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b8:	f7ff f854 	bl	8001a64 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e106      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_OscConfig+0x4e4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x2f0>
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a80      	ldr	r2, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	e01c      	b.n	8002a26 <HAL_RCC_OscConfig+0x32a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCC_OscConfig+0x312>
 80029f4:	4b7b      	ldr	r3, [pc, #492]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0c:	e00b      	b.n	8002a26 <HAL_RCC_OscConfig+0x32a>
 8002a0e:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a71      	ldr	r2, [pc, #452]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d015      	beq.n	8002a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f819 	bl	8001a64 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff f815 	bl	8001a64 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0c5      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ee      	beq.n	8002a36 <HAL_RCC_OscConfig+0x33a>
 8002a58:	e014      	b.n	8002a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f803 	bl	8001a64 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe ffff 	bl	8001a64 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0af      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	4b5a      	ldr	r3, [pc, #360]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b56      	ldr	r3, [pc, #344]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 809b 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d05c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d141      	bne.n	8002b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_RCC_OscConfig+0x4ec>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe ffd3 	bl	8001a64 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe ffcf 	bl	8001a64 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e081      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	019b      	lsls	r3, r3, #6
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	4937      	ldr	r1, [pc, #220]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x4ec>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe ffa8 	bl	8001a64 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe ffa4 	bl	8001a64 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e056      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002b36:	e04e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x4ec>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe ff91 	bl	8001a64 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe ff8d 	bl	8001a64 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e03f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x44a>
 8002b64:	e037      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e032      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_RCC_OscConfig+0x4e8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d028      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d11a      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ba8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d111      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40007000 	.word	0x40007000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470060 	.word	0x42470060

08002bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0cc      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d90c      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d044      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e067      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4934      	ldr	r1, [pc, #208]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fec2 	bl	8001a64 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fe febe 	bl	8001a64 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e04f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d20c      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fa2c 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023c00 	.word	0x40023c00
 8002da8:	40023800 	.word	0x40023800
 8002dac:	0800af5c 	.word	0x0800af5c
 8002db0:	2000001c 	.word	0x2000001c
 8002db4:	2000003c 	.word	0x2000003c

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd0:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d00d      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	f200 80bd 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dea:	e0b7      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dee:	60bb      	str	r3, [r7, #8]
       break;
 8002df0:	e0b7      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df2:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002df4:	60bb      	str	r3, [r7, #8]
      break;
 8002df6:	e0b4      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df8:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04d      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0e:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	461a      	mov	r2, r3
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	ea02 0800 	and.w	r8, r2, r0
 8002e26:	ea03 0901 	and.w	r9, r3, r1
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	014b      	lsls	r3, r1, #5
 8002e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e3c:	0142      	lsls	r2, r0, #5
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	ebb0 0008 	subs.w	r0, r0, r8
 8002e46:	eb61 0109 	sbc.w	r1, r1, r9
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	018b      	lsls	r3, r1, #6
 8002e54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e58:	0182      	lsls	r2, r0, #6
 8002e5a:	1a12      	subs	r2, r2, r0
 8002e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e60:	f04f 0000 	mov.w	r0, #0
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	00d9      	lsls	r1, r3, #3
 8002e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e6e:	00d0      	lsls	r0, r2, #3
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	eb12 0208 	adds.w	r2, r2, r8
 8002e78:	eb43 0309 	adc.w	r3, r3, r9
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	0259      	lsls	r1, r3, #9
 8002e86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e8a:	0250      	lsls	r0, r2, #9
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	f7fd fcf6 	bl	800088c <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e04a      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	ea02 0400 	and.w	r4, r2, r0
 8002ec2:	ea03 0501 	and.w	r5, r3, r1
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	4629      	mov	r1, r5
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	014b      	lsls	r3, r1, #5
 8002ed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ed8:	0142      	lsls	r2, r0, #5
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	1b00      	subs	r0, r0, r4
 8002ee0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	018b      	lsls	r3, r1, #6
 8002eee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ef2:	0182      	lsls	r2, r0, #6
 8002ef4:	1a12      	subs	r2, r2, r0
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f08:	00d0      	lsls	r0, r2, #3
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	1912      	adds	r2, r2, r4
 8002f10:	eb45 0303 	adc.w	r3, r5, r3
 8002f14:	f04f 0000 	mov.w	r0, #0
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	0299      	lsls	r1, r3, #10
 8002f1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f22:	0290      	lsls	r0, r2, #10
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	f7fd fcaa 	bl	800088c <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	60bb      	str	r3, [r7, #8]
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f5e:	60bb      	str	r3, [r7, #8]
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	68bb      	ldr	r3, [r7, #8]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000001c 	.word	0x2000001c

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	0800af6c 	.word	0x0800af6c

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	0800af6c 	.word	0x0800af6c

08002fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_GetClockConfig+0x60>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0207 	and.w	r2, r3, #7
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e022      	b.n	80030a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd ff77 	bl	8000f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2203      	movs	r2, #3
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f814 	bl	80030a8 <HAL_SD_InitCard>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00a      	b.n	80030a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030c4:	2376      	movs	r3, #118	; 0x76
 80030c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681d      	ldr	r5, [r3, #0]
 80030cc:	466c      	mov	r4, sp
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	4628      	mov	r0, r5
 80030e2:	f002 f8a3 	bl	800522c <SDIO_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04c      	b.n	8003192 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_SD_InitCard+0xf4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 f8db 	bl	80052be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_SD_InitCard+0xf4>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 f804 	bl	800411c <SD_PowerON>
 8003114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e02e      	b.n	8003192 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 ff25 	bl	8003f84 <SD_InitCard>
 800313a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e01b      	b.n	8003192 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003162:	4618      	mov	r0, r3
 8003164:	f002 f93e 	bl	80053e4 <SDMMC_CmdBlockLength>
 8003168:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00f      	beq.n	8003190 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_SD_InitCard+0xf8>)
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3728      	adds	r7, #40	; 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bdb0      	pop	{r4, r5, r7, pc}
 800319a:	bf00      	nop
 800319c:	422580a0 	.word	0x422580a0
 80031a0:	004005ff 	.word	0x004005ff

080031a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0c0      	b.n	800334e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 80b9 	bne.w	800334c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d907      	bls.n	80031fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0a7      	b.n	800334e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a4c      	ldr	r2, [pc, #304]	; (8003358 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a4b      	ldr	r2, [pc, #300]	; (800335c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003230:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2200      	movs	r2, #0
 8003238:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3380      	adds	r3, #128	; 0x80
 8003268:	4619      	mov	r1, r3
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	025b      	lsls	r3, r3, #9
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f7fe fdb7 	bl	8001de4 <HAL_DMA_Start_IT>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e050      	b.n	800334e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d002      	beq.n	80032c0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	025b      	lsls	r3, r3, #9
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032cc:	2390      	movs	r3, #144	; 0x90
 80032ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80032d8:	2301      	movs	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f107 0210 	add.w	r2, r7, #16
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 f850 	bl	800538c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d90a      	bls.n	8003308 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2282      	movs	r2, #130	; 0x82
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 f8b4 	bl	800546c <SDMMC_CmdReadMultiBlock>
 8003304:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003306:	e009      	b.n	800331c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2281      	movs	r2, #129	; 0x81
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003314:	4618      	mov	r0, r3
 8003316:	f002 f887 	bl	8005428 <SDMMC_CmdReadSingleBlock>
 800331a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e002      	b.n	800334e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3730      	adds	r7, #48	; 0x30
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	08003d93 	.word	0x08003d93
 800335c:	08003e05 	.word	0x08003e05
 8003360:	004005ff 	.word	0x004005ff
 8003364:	4225858c 	.word	0x4225858c

08003368 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	; 0x30
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0c5      	b.n	800351c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	f040 80be 	bne.w	800351a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d907      	bls.n	80033c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0ac      	b.n	800351c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2203      	movs	r2, #3
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	4a4e      	ldr	r2, [pc, #312]	; (8003524 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	2200      	movs	r2, #0
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	2b01      	cmp	r3, #1
 8003404:	d002      	beq.n	800340c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d90a      	bls.n	8003428 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22a0      	movs	r2, #160	; 0xa0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	4618      	mov	r0, r3
 8003420:	f002 f868 	bl	80054f4 <SDMMC_CmdWriteMultiBlock>
 8003424:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003426:	e009      	b.n	800343c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2290      	movs	r2, #144	; 0x90
 800342c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	4618      	mov	r0, r3
 8003436:	f002 f83b 	bl	80054b0 <SDMMC_CmdWriteSingleBlock>
 800343a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a39      	ldr	r2, [pc, #228]	; (800352c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e059      	b.n	800351c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3380      	adds	r3, #128	; 0x80
 800349e:	461a      	mov	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	025b      	lsls	r3, r3, #9
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	f7fe fc9d 	bl	8001de4 <HAL_DMA_Start_IT>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01c      	beq.n	80034ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80034be:	f023 0302 	bic.w	r3, r3, #2
 80034c2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e018      	b.n	800351c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	025b      	lsls	r3, r3, #9
 80034f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034f6:	2390      	movs	r3, #144	; 0x90
 80034f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003502:	2301      	movs	r3, #1
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f107 0210 	add.w	r2, r7, #16
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f001 ff3b 	bl	800538c <SDIO_ConfigData>

      return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3730      	adds	r7, #48	; 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	08003d69 	.word	0x08003d69
 8003528:	08003e05 	.word	0x08003e05
 800352c:	004005ff 	.word	0x004005ff
 8003530:	4225858c 	.word	0x4225858c

08003534 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_SD_IRQHandler+0x2e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fffd 	bl	800455a <SD_Read_IT>
 8003560:	e165      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 808f 	beq.w	8003690 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800358a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800358e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d039      	beq.n	800361e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_SD_IRQHandler+0x8a>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d011      	beq.n	80035e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 ffb8 	bl	8005538 <SDMMC_CmdStopTransfer>
 80035c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f92f 	bl	8003840 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_SD_IRQHandler+0xda>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f002 fc26 	bl	8005e60 <HAL_SD_RxCpltCallback>
 8003614:	e10b      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f002 fc18 	bl	8005e4c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800361c:	e107      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8102 	beq.w	800382e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f001 ff7d 	bl	8005538 <SDMMC_CmdStopTransfer>
 800363e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8f4 	bl	8003840 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 80e5 	bne.w	800382e <HAL_SD_IRQHandler+0x2fa>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80df 	bne.w	800382e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0208 	bic.w	r2, r2, #8
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f002 fbdf 	bl	8005e4c <HAL_SD_TxCpltCallback>
}
 800368e:	e0ce      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_SD_IRQHandler+0x17c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 ffa7 	bl	80045fc <SD_Write_IT>
 80036ae:	e0be      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b6:	f240 233a 	movw	r3, #570	; 0x23a
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80b6 	beq.w	800382e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f043 0202 	orr.w	r2, r3, #2
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	f043 0208 	orr.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f043 0208 	orr.w	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f240 723a 	movw	r2, #1850	; 0x73a
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fee6 	bl	8005538 <SDMMC_CmdStopTransfer>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f855 	bl	8003840 <HAL_SD_ErrorCallback>
}
 8003796:	e04a      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d045      	beq.n	800382e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_SD_IRQHandler+0x282>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d011      	beq.n	80037da <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <HAL_SD_IRQHandler+0x304>)
 80037bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fb66 	bl	8001e94 <HAL_DMA_Abort_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d02f      	beq.n	800382e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fb68 	bl	8003ea8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037d8:	e029      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_SD_IRQHandler+0x2ba>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_SD_IRQHandler+0x308>)
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fb4a 	bl	8001e94 <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb83 	bl	8003f16 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003810:	e00d      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f002 fb06 	bl	8005e38 <HAL_SD_AbortCallback>
}
 800382c:	e7ff      	b.n	800382e <HAL_SD_IRQHandler+0x2fa>
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	08003ea9 	.word	0x08003ea9
 800383c:	08003f17 	.word	0x08003f17

08003840 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003862:	0f9b      	lsrs	r3, r3, #30
 8003864:	b2da      	uxtb	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386e:	0e9b      	lsrs	r3, r3, #26
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003880:	0e1b      	lsrs	r3, r3, #24
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	b2da      	uxtb	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b4:	0d1b      	lsrs	r3, r3, #20
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d2:	0bdb      	lsrs	r3, r3, #15
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e4:	0b9b      	lsrs	r3, r3, #14
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f6:	0b5b      	lsrs	r3, r3, #13
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003908:	0b1b      	lsrs	r3, r3, #12
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	b2da      	uxtb	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	2b00      	cmp	r3, #0
 8003922:	d163      	bne.n	80039ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003934:	0f92      	lsrs	r2, r2, #30
 8003936:	431a      	orrs	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003940:	0edb      	lsrs	r3, r3, #27
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	b2da      	uxtb	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003952:	0e1b      	lsrs	r3, r3, #24
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	b2da      	uxtb	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003964:	0d5b      	lsrs	r3, r3, #21
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	b2da      	uxtb	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	b2da      	uxtb	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003988:	0bdb      	lsrs	r3, r3, #15
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	b2da      	uxtb	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	7e1b      	ldrb	r3, [r3, #24]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	3302      	adds	r3, #2
 80039ac:	2201      	movs	r2, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039b6:	fb02 f203 	mul.w	r2, r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7a1b      	ldrb	r3, [r3, #8]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039d8:	0a52      	lsrs	r2, r2, #9
 80039da:	fb02 f203 	mul.w	r2, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60
 80039ea:	e031      	b.n	8003a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d11d      	bne.n	8003a30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	029a      	lsls	r2, r3, #10
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8003a2e:	e00f      	b.n	8003a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_SD_GetCardCSD+0x344>)
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e09d      	b.n	8003b8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a54:	0b9b      	lsrs	r3, r3, #14
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a66:	09db      	lsrs	r3, r3, #7
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	0fdb      	lsrs	r3, r3, #31
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	0f5b      	lsrs	r3, r3, #29
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	0e9b      	lsrs	r3, r3, #26
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	0d9b      	lsrs	r3, r3, #22
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	0d5b      	lsrs	r3, r3, #21
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	0bdb      	lsrs	r3, r3, #15
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	0b9b      	lsrs	r3, r3, #14
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	0b1b      	lsrs	r3, r3, #12
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	004005ff 	.word	0x004005ff

08003b9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2203      	movs	r2, #3
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d02e      	beq.n	8003c72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	d106      	bne.n	8003c2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
 8003c28:	e029      	b.n	8003c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d10a      	bne.n	8003c48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fb28 	bl	8004288 <SD_WideBus_Enable>
 8003c38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
 8003c46:	e01a      	b.n	8003c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fb65 	bl	800431e <SD_WideBus_Disable>
 8003c54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
 8003c62:	e00c      	b.n	8003c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c70:	e005      	b.n	8003c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c9c:	e01f      	b.n	8003cde <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681d      	ldr	r5, [r3, #0]
 8003cc4:	466c      	mov	r4, sp
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f001 faa7 	bl	800522c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fb7c 	bl	80053e4 <SDMMC_CmdBlockLength>
 8003cec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3728      	adds	r7, #40	; 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bdb0      	pop	{r4, r5, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	004005ff 	.word	0x004005ff

08003d28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa7c 	bl	8004238 <SD_SendStatus>
 8003d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0a5b      	lsrs	r3, r3, #9
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d5e:	693b      	ldr	r3, [r7, #16]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b82      	cmp	r3, #130	; 0x82
 8003da6:	d111      	bne.n	8003dcc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fbc3 	bl	8005538 <SDMMC_CmdStopTransfer>
 8003db2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff fd3a 	bl	8003840 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0208 	bic.w	r2, r2, #8
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f002 f833 	bl	8005e60 <HAL_SD_RxCpltCallback>
#endif
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe f9ea 	bl	80021ec <HAL_DMA_GetError>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d03e      	beq.n	8003e9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <SD_DMAError+0x36>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d12d      	bne.n	8003e96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <SD_DMAError+0xa0>)
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7ff ff62 	bl	8003d28 <HAL_SD_GetCardState>
 8003e64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d002      	beq.n	8003e72 <SD_DMAError+0x6e>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d10a      	bne.n	8003e88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 fb5e 	bl	8005538 <SDMMC_CmdStopTransfer>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	431a      	orrs	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003e96:	6978      	ldr	r0, [r7, #20]
 8003e98:	f7ff fcd2 	bl	8003840 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	004005ff 	.word	0x004005ff

08003ea8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff ff31 	bl	8003d28 <HAL_SD_GetCardState>
 8003ec6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d002      	beq.n	8003ee2 <SD_DMATxAbort+0x3a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d10a      	bne.n	8003ef8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fb26 	bl	8005538 <SDMMC_CmdStopTransfer>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f001 ff99 	bl	8005e38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f06:	e002      	b.n	8003f0e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fc99 	bl	8003840 <HAL_SD_ErrorCallback>
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fefa 	bl	8003d28 <HAL_SD_GetCardState>
 8003f34:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d002      	beq.n	8003f50 <SD_DMARxAbort+0x3a>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d10a      	bne.n	8003f66 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 faef 	bl	8005538 <SDMMC_CmdStopTransfer>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f001 ff62 	bl	8005e38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f74:	e002      	b.n	8003f7c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fc62 	bl	8003840 <HAL_SD_ErrorCallback>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f84:	b5b0      	push	{r4, r5, r7, lr}
 8003f86:	b094      	sub	sp, #80	; 0x50
 8003f88:	af04      	add	r7, sp, #16
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 f9a1 	bl	80052dc <SDIO_GetPowerState>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fa4:	e0b6      	b.n	8004114 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d02f      	beq.n	800400e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fbca 	bl	800574c <SDMMC_CmdSendCID>
 8003fb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <SD_InitCard+0x40>
    {
      return errorstate;
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc2:	e0a7      	b.n	8004114 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f9cb 	bl	8005366 <SDIO_GetResponse>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2104      	movs	r1, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 f9c2 	bl	8005366 <SDIO_GetResponse>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2108      	movs	r1, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f9b9 	bl	8005366 <SDIO_GetResponse>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	210c      	movs	r1, #12
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f9b0 	bl	8005366 <SDIO_GetResponse>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	2b03      	cmp	r3, #3
 8004014:	d00d      	beq.n	8004032 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f107 020e 	add.w	r2, r7, #14
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fbd0 	bl	80057c6 <SDMMC_CmdSetRelAdd>
 8004026:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <SD_InitCard+0xae>
    {
      return errorstate;
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	e070      	b.n	8004114 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	2b03      	cmp	r3, #3
 8004038:	d036      	beq.n	80040a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f001 fb9a 	bl	8005788 <SDMMC_CmdSendCSD>
 8004054:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <SD_InitCard+0xdc>
    {
      return errorstate;
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	e059      	b.n	8004114 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f97d 	bl	8005366 <SDIO_GetResponse>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2104      	movs	r1, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f001 f974 	bl	8005366 <SDIO_GetResponse>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2108      	movs	r1, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f96b 	bl	8005366 <SDIO_GetResponse>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	210c      	movs	r1, #12
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f962 	bl	8005366 <SDIO_GetResponse>
 80040a2:	4602      	mov	r2, r0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2104      	movs	r1, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f959 	bl	8005366 <SDIO_GetResponse>
 80040b4:	4603      	mov	r3, r0
 80040b6:	0d1a      	lsrs	r2, r3, #20
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fbc6 	bl	8003854 <HAL_SD_GetCardCSD>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040d2:	e01f      	b.n	8004114 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	461a      	mov	r2, r3
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	4608      	mov	r0, r1
 80040e6:	f001 fa49 	bl	800557c <SDMMC_CmdSelDesel>
 80040ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <SD_InitCard+0x172>
  {
    return errorstate;
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	e00e      	b.n	8004114 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681d      	ldr	r5, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	466c      	mov	r4, sp
 80040fe:	f103 0210 	add.w	r2, r3, #16
 8004102:	ca07      	ldmia	r2, {r0, r1, r2}
 8004104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004108:	3304      	adds	r3, #4
 800410a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800410c:	4628      	mov	r0, r5
 800410e:	f001 f88d 	bl	800522c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3740      	adds	r7, #64	; 0x40
 8004118:	46bd      	mov	sp, r7
 800411a:	bdb0      	pop	{r4, r5, r7, pc}

0800411c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fa44 	bl	80055c2 <SDMMC_CmdGoIdleState>
 800413a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	e072      	b.n	800422c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fa57 	bl	80055fe <SDMMC_CmdOperCond>
 8004150:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fa2d 	bl	80055c2 <SDMMC_CmdGoIdleState>
 8004168:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	e05b      	b.n	800422c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	2b01      	cmp	r3, #1
 8004180:	d137      	bne.n	80041f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f001 fa57 	bl	800563c <SDMMC_CmdAppCommand>
 800418e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02d      	beq.n	80041f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800419a:	e047      	b.n	800422c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fa4a 	bl	800563c <SDMMC_CmdAppCommand>
 80041a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	e03b      	b.n	800422c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	491e      	ldr	r1, [pc, #120]	; (8004234 <SD_PowerON+0x118>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fa60 	bl	8005680 <SDMMC_CmdAppOperCommand>
 80041c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041cc:	e02e      	b.n	800422c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 f8c6 	bl	8005366 <SDIO_GetResponse>
 80041da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0fdb      	lsrs	r3, r3, #31
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <SD_PowerON+0xcc>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <SD_PowerON+0xce>
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]

    count++;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d802      	bhi.n	8004202 <SD_PowerON+0xe6>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0cc      	beq.n	800419c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004208:	4293      	cmp	r3, r2
 800420a:	d902      	bls.n	8004212 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800420c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004210:	e00c      	b.n	800422c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
 8004222:	e002      	b.n	800422a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	c1100000 	.word	0xc1100000

08004238 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800424c:	e018      	b.n	8004280 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f001 fad4 	bl	8005808 <SDMMC_CmdSendStatus>
 8004260:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	e009      	b.n	8004280 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f877 	bl	8005366 <SDIO_GetResponse>
 8004278:	4602      	mov	r2, r0
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f861 	bl	8005366 <SDIO_GetResponse>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ae:	d102      	bne.n	80042b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042b4:	e02f      	b.n	8004316 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80042b6:	f107 030c 	add.w	r3, r7, #12
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f879 	bl	80043b4 <SD_FindSCR>
 80042c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	e023      	b.n	8004316 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01c      	beq.n	8004312 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f001 f9a9 	bl	800563c <SDMMC_CmdAppCommand>
 80042ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e00f      	b.n	8004316 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f9e2 	bl	80056c6 <SDMMC_CmdBusWidth>
 8004302:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	e003      	b.n	8004316 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800430e:	2300      	movs	r3, #0
 8004310:	e001      	b.n	8004316 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004312:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f001 f816 	bl	8005366 <SDIO_GetResponse>
 800433a:	4603      	mov	r3, r0
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004344:	d102      	bne.n	800434c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434a:	e02f      	b.n	80043ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f82e 	bl	80043b4 <SD_FindSCR>
 8004358:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e023      	b.n	80043ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01c      	beq.n	80043a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f001 f95e 	bl	800563c <SDMMC_CmdAppCommand>
 8004380:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	e00f      	b.n	80043ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f997 	bl	80056c6 <SDMMC_CmdBusWidth>
 8004398:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	e003      	b.n	80043ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e001      	b.n	80043ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b08f      	sub	sp, #60	; 0x3c
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80043be:	f7fd fb51 	bl	8001a64 <HAL_GetTick>
 80043c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2108      	movs	r1, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f802 	bl	80053e4 <SDMMC_CmdBlockLength>
 80043e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	e0b2      	b.n	8004552 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f001 f91f 	bl	800563c <SDMMC_CmdAppCommand>
 80043fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	e0a3      	b.n	8004552 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800440e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004410:	2308      	movs	r3, #8
 8004412:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004414:	2330      	movs	r3, #48	; 0x30
 8004416:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004418:	2302      	movs	r3, #2
 800441a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800441c:	2300      	movs	r3, #0
 800441e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004420:	2301      	movs	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f107 0210 	add.w	r2, r7, #16
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 ffac 	bl	800538c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f001 f966 	bl	800570a <SDMMC_CmdSendSCR>
 800443e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	e083      	b.n	8004552 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00f      	beq.n	8004478 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	f107 0208 	add.w	r2, r7, #8
 8004464:	18d4      	adds	r4, r2, r3
 8004466:	4608      	mov	r0, r1
 8004468:	f000 ff0b 	bl	8005282 <SDIO_ReadFIFO>
 800446c:	4603      	mov	r3, r0
 800446e:	6023      	str	r3, [r4, #0]
      index++;
 8004470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004472:	3301      	adds	r3, #1
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	e006      	b.n	8004486 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d012      	beq.n	80044ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004486:	f7fd faed 	bl	8001a64 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004494:	d102      	bne.n	800449c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800449a:	e05a      	b.n	8004552 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0cf      	beq.n	800444a <SD_FindSCR+0x96>
 80044aa:	e000      	b.n	80044ae <SD_FindSCR+0xfa>
      break;
 80044ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80044c4:	2308      	movs	r3, #8
 80044c6:	e044      	b.n	8004552 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2202      	movs	r2, #2
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80044de:	2302      	movs	r3, #2
 80044e0:	e037      	b.n	8004552 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2220      	movs	r2, #32
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e02a      	b.n	8004552 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f240 523a 	movw	r2, #1338	; 0x53a
 8004504:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	061a      	lsls	r2, r3, #24
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004512:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800451c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	601a      	str	r2, [r3, #0]
    scr++;
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	3304      	adds	r3, #4
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	061a      	lsls	r2, r3, #24
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800453a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004544:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	0e1b      	lsrs	r3, r3, #24
 800454a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	373c      	adds	r7, #60	; 0x3c
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}

0800455a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d03f      	beq.n	80045f4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e033      	b.n	80045e2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe7f 	bl	8005282 <SDIO_ReadFIFO>
 8004584:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3b01      	subs	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3b01      	subs	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3301      	adds	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b07      	cmp	r3, #7
 80045e6:	d9c8      	bls.n	800457a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80045f4:	bf00      	nop
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d043      	beq.n	800469e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e037      	b.n	800468c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3b01      	subs	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]
      tmp++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	3b01      	subs	r3, #1
 8004644:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	041a      	lsls	r2, r3, #16
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
 8004650:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3b01      	subs	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	061a      	lsls	r2, r3, #24
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4313      	orrs	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
      tmp++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3b01      	subs	r3, #1
 8004674:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f107 0208 	add.w	r2, r7, #8
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fe0b 	bl	800529c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b07      	cmp	r3, #7
 8004690:	d9c4      	bls.n	800461c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e041      	b.n	800473c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f839 	bl	8004744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f000 f9d7 	bl	8004a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e04e      	b.n	800480e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <HAL_TIM_Base_Start_IT+0xc4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d01d      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_TIM_Base_Start_IT+0xc8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_TIM_Base_Start_IT+0xcc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIM_Base_Start_IT+0xd0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_TIM_Base_Start_IT+0xd4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_TIM_Base_Start_IT+0xdc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d111      	bne.n	80047fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d010      	beq.n	800480c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	e007      	b.n	800480c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40001800 	.word	0x40001800

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8ee 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8e0 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8f1 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8c4 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8b6 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f8c7 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f89a 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f88c 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f89d 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f870 	bl	8004a5c <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f862 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f873 	bl	8004a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fa92 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f902 	bl	8004bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f838 	bl	8004a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8cc 	bl	8004bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a40      	ldr	r2, [pc, #256]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3d      	ldr	r2, [pc, #244]	; (8004bb0 <TIM_Base_SetConfig+0x118>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <TIM_Base_SetConfig+0x11c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3b      	ldr	r2, [pc, #236]	; (8004bb8 <TIM_Base_SetConfig+0x120>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d02b      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d027      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <TIM_Base_SetConfig+0x118>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d023      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <TIM_Base_SetConfig+0x11c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01f      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <TIM_Base_SetConfig+0x120>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01b      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d017      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <TIM_Base_SetConfig+0x128>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <TIM_Base_SetConfig+0x130>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a25      	ldr	r2, [pc, #148]	; (8004bcc <TIM_Base_SetConfig+0x134>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <TIM_Base_SetConfig+0x138>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <TIM_Base_SetConfig+0x13c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d108      	bne.n	8004b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0xf8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a0c      	ldr	r2, [pc, #48]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800
 8004bcc:	40001800 	.word	0x40001800
 8004bd0:	40001c00 	.word	0x40001c00
 8004bd4:	40002000 	.word	0x40002000

08004bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e03f      	b.n	8004c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fa9a 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f929 	bl	8004e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b08a      	sub	sp, #40	; 0x28
 8004c9e:	af02      	add	r7, sp, #8
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d17c      	bne.n	8004db4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UART_Transmit+0x2c>
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e075      	b.n	8004db6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Transmit+0x3e>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e06e      	b.n	8004db6 <HAL_UART_Transmit+0x11c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	; 0x21
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cee:	f7fc feb9 	bl	8001a64 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d108      	bne.n	8004d1c <HAL_UART_Transmit+0x82>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d2c:	e02a      	b.n	8004d84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f840 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e036      	b.n	8004db6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3302      	adds	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e007      	b.n	8004d76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cf      	bne.n	8004d2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f810 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e006      	b.n	8004db6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e000      	b.n	8004db6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
  }
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b090      	sub	sp, #64	; 0x40
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dce:	e050      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd6:	d04c      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x30>
 8004dde:	f7fc fe41 	bl	8001a64 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d241      	bcs.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e0e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	613b      	str	r3, [r7, #16]
   return(result);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e42:	623a      	str	r2, [r7, #32]
 8004e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	69f9      	ldr	r1, [r7, #28]
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e00f      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d09f      	beq.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3740      	adds	r7, #64	; 0x40
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea0:	b09f      	sub	sp, #124	; 0x7c
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	68d9      	ldr	r1, [r3, #12]
 8004eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	ea40 0301 	orr.w	r3, r0, r1
 8004ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ee0:	f021 010c 	bic.w	r1, r1, #12
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eea:	430b      	orrs	r3, r1
 8004eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efa:	6999      	ldr	r1, [r3, #24]
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	ea40 0301 	orr.w	r3, r0, r1
 8004f04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4bc5      	ldr	r3, [pc, #788]	; (8005220 <UART_SetConfig+0x384>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d004      	beq.n	8004f1a <UART_SetConfig+0x7e>
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4bc3      	ldr	r3, [pc, #780]	; (8005224 <UART_SetConfig+0x388>)
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d103      	bne.n	8004f22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f1a:	f7fe f84f 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004f1e:	6778      	str	r0, [r7, #116]	; 0x74
 8004f20:	e002      	b.n	8004f28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f22:	f7fe f837 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004f26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	f040 80b6 	bne.w	80050a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f36:	461c      	mov	r4, r3
 8004f38:	f04f 0500 	mov.w	r5, #0
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	6439      	str	r1, [r7, #64]	; 0x40
 8004f44:	415b      	adcs	r3, r3
 8004f46:	647b      	str	r3, [r7, #68]	; 0x44
 8004f48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f4c:	1912      	adds	r2, r2, r4
 8004f4e:	eb45 0303 	adc.w	r3, r5, r3
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	00d9      	lsls	r1, r3, #3
 8004f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f60:	00d0      	lsls	r0, r2, #3
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	1911      	adds	r1, r2, r4
 8004f68:	6639      	str	r1, [r7, #96]	; 0x60
 8004f6a:	416b      	adcs	r3, r5
 8004f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	1891      	adds	r1, r2, r2
 8004f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004f88:	f7fb fc80 	bl	800088c <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4ba5      	ldr	r3, [pc, #660]	; (8005228 <UART_SetConfig+0x38c>)
 8004f92:	fba3 2302 	umull	r2, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	011e      	lsls	r6, r3, #4
 8004f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9c:	461c      	mov	r4, r3
 8004f9e:	f04f 0500 	mov.w	r5, #0
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	1891      	adds	r1, r2, r2
 8004fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8004faa:	415b      	adcs	r3, r3
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
 8004fae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb2:	1912      	adds	r2, r2, r4
 8004fb4:	eb45 0303 	adc.w	r3, r5, r3
 8004fb8:	f04f 0000 	mov.w	r0, #0
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	00d9      	lsls	r1, r3, #3
 8004fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc6:	00d0      	lsls	r0, r2, #3
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	1911      	adds	r1, r2, r4
 8004fce:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fd0:	416b      	adcs	r3, r5
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	1891      	adds	r1, r2, r2
 8004fe0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fe2:	415b      	adcs	r3, r3
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004fee:	f7fb fc4d 	bl	800088c <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b8c      	ldr	r3, [pc, #560]	; (8005228 <UART_SetConfig+0x38c>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	; 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a87      	ldr	r2, [pc, #540]	; (8005228 <UART_SetConfig+0x38c>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005018:	441e      	add	r6, r3
 800501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501c:	4618      	mov	r0, r3
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	1894      	adds	r4, r2, r2
 8005028:	623c      	str	r4, [r7, #32]
 800502a:	415b      	adcs	r3, r3
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005032:	1812      	adds	r2, r2, r0
 8005034:	eb41 0303 	adc.w	r3, r1, r3
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	f04f 0500 	mov.w	r5, #0
 8005040:	00dd      	lsls	r5, r3, #3
 8005042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005046:	00d4      	lsls	r4, r2, #3
 8005048:	4622      	mov	r2, r4
 800504a:	462b      	mov	r3, r5
 800504c:	1814      	adds	r4, r2, r0
 800504e:	653c      	str	r4, [r7, #80]	; 0x50
 8005050:	414b      	adcs	r3, r1
 8005052:	657b      	str	r3, [r7, #84]	; 0x54
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	1891      	adds	r1, r2, r2
 8005060:	61b9      	str	r1, [r7, #24]
 8005062:	415b      	adcs	r3, r3
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800506e:	f7fb fc0d 	bl	800088c <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <UART_SetConfig+0x38c>)
 8005078:	fba3 1302 	umull	r1, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	2164      	movs	r1, #100	; 0x64
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	3332      	adds	r3, #50	; 0x32
 800508a:	4a67      	ldr	r2, [pc, #412]	; (8005228 <UART_SetConfig+0x38c>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4432      	add	r2, r6
 800509c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800509e:	e0b9      	b.n	8005214 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a2:	461c      	mov	r4, r3
 80050a4:	f04f 0500 	mov.w	r5, #0
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	6139      	str	r1, [r7, #16]
 80050b0:	415b      	adcs	r3, r3
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050b8:	1912      	adds	r2, r2, r4
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f04f 0000 	mov.w	r0, #0
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	00d9      	lsls	r1, r3, #3
 80050c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050cc:	00d0      	lsls	r0, r2, #3
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	eb12 0804 	adds.w	r8, r2, r4
 80050d6:	eb43 0905 	adc.w	r9, r3, r5
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050f2:	0082      	lsls	r2, r0, #2
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb fbc8 	bl	800088c <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b49      	ldr	r3, [pc, #292]	; (8005228 <UART_SetConfig+0x38c>)
 8005102:	fba3 2302 	umull	r2, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	011e      	lsls	r6, r3, #4
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	4618      	mov	r0, r3
 800510e:	f04f 0100 	mov.w	r1, #0
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	1894      	adds	r4, r2, r2
 8005118:	60bc      	str	r4, [r7, #8]
 800511a:	415b      	adcs	r3, r3
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005122:	1812      	adds	r2, r2, r0
 8005124:	eb41 0303 	adc.w	r3, r1, r3
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	f04f 0500 	mov.w	r5, #0
 8005130:	00dd      	lsls	r5, r3, #3
 8005132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005136:	00d4      	lsls	r4, r2, #3
 8005138:	4622      	mov	r2, r4
 800513a:	462b      	mov	r3, r5
 800513c:	1814      	adds	r4, r2, r0
 800513e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005140:	414b      	adcs	r3, r1
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	008b      	lsls	r3, r1, #2
 8005158:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800515c:	0082      	lsls	r2, r0, #2
 800515e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005162:	f7fb fb93 	bl	800088c <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <UART_SetConfig+0x38c>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <UART_SetConfig+0x38c>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518a:	441e      	add	r6, r3
 800518c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518e:	4618      	mov	r0, r3
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	1894      	adds	r4, r2, r2
 800519a:	603c      	str	r4, [r7, #0]
 800519c:	415b      	adcs	r3, r3
 800519e:	607b      	str	r3, [r7, #4]
 80051a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a4:	1812      	adds	r2, r2, r0
 80051a6:	eb41 0303 	adc.w	r3, r1, r3
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	f04f 0500 	mov.w	r5, #0
 80051b2:	00dd      	lsls	r5, r3, #3
 80051b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051b8:	00d4      	lsls	r4, r2, #3
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	eb12 0a00 	adds.w	sl, r2, r0
 80051c2:	eb43 0b01 	adc.w	fp, r3, r1
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	008b      	lsls	r3, r1, #2
 80051da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051de:	0082      	lsls	r2, r0, #2
 80051e0:	4650      	mov	r0, sl
 80051e2:	4659      	mov	r1, fp
 80051e4:	f7fb fb52 	bl	800088c <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <UART_SetConfig+0x38c>)
 80051ee:	fba3 1302 	umull	r1, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	2164      	movs	r1, #100	; 0x64
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	3332      	adds	r3, #50	; 0x32
 8005200:	4a09      	ldr	r2, [pc, #36]	; (8005228 <UART_SetConfig+0x38c>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4432      	add	r2, r6
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	377c      	adds	r7, #124	; 0x7c
 8005218:	46bd      	mov	sp, r7
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	bf00      	nop
 8005220:	40011000 	.word	0x40011000
 8005224:	40011400 	.word	0x40011400
 8005228:	51eb851f 	.word	0x51eb851f

0800522c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800522c:	b084      	sub	sp, #16
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	f107 001c 	add.w	r0, r7, #28
 800523a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005242:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005244:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005246:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800524a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800524e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005252:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005256:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	b004      	add	sp, #16
 8005280:	4770      	bx	lr

08005282 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2203      	movs	r2, #3
 80052ca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80052cc:	2002      	movs	r0, #2
 80052ce:	f7fc fbd5 	bl	8001a7c <HAL_Delay>
  
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0303 	and.w	r3, r3, #3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005316:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800531c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005322:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005332:	f023 030f 	bic.w	r3, r3, #15
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	b2db      	uxtb	r3, r3
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3314      	adds	r3, #20
 8005374:	461a      	mov	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4413      	add	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
}  
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80053b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0

}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053f2:	2310      	movs	r3, #16
 80053f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005402:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff74 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	2110      	movs	r1, #16
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa44 	bl	80058a4 <SDMMC_GetCmdResp1>
 800541c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005436:	2311      	movs	r3, #17
 8005438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005446:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff52 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	2111      	movs	r1, #17
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa22 	bl	80058a4 <SDMMC_GetCmdResp1>
 8005460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800547a:	2312      	movs	r3, #18
 800547c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800547e:	2340      	movs	r3, #64	; 0x40
 8005480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff30 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	2112      	movs	r1, #18
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa00 	bl	80058a4 <SDMMC_GetCmdResp1>
 80054a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054a6:	69fb      	ldr	r3, [r7, #28]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80054be:	2318      	movs	r3, #24
 80054c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff0e 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	2118      	movs	r1, #24
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9de 	bl	80058a4 <SDMMC_GetCmdResp1>
 80054e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ea:	69fb      	ldr	r3, [r7, #28]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005502:	2319      	movs	r3, #25
 8005504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005506:	2340      	movs	r3, #64	; 0x40
 8005508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800550e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005512:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff feec 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	2119      	movs	r1, #25
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9bc 	bl	80058a4 <SDMMC_GetCmdResp1>
 800552c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005544:	230c      	movs	r3, #12
 8005546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005554:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fecb 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <SDMMC_CmdStopTransfer+0x40>)
 8005564:	210c      	movs	r1, #12
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f99c 	bl	80058a4 <SDMMC_GetCmdResp1>
 800556c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800556e:	69fb      	ldr	r3, [r7, #28]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	05f5e100 	.word	0x05f5e100

0800557c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800558c:	2307      	movs	r3, #7
 800558e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800559c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fea7 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	2107      	movs	r1, #7
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f977 	bl	80058a4 <SDMMC_GetCmdResp1>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3728      	adds	r7, #40	; 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe86 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f92d 	bl	800584c <SDMMC_GetCmdError>
 80055f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f4:	69fb      	ldr	r3, [r7, #28]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005606:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800560a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800560c:	2308      	movs	r3, #8
 800560e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fe67 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fb24 	bl	8005c78 <SDMMC_GetCmdResp7>
 8005630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005632:	69fb      	ldr	r3, [r7, #28]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800564a:	2337      	movs	r3, #55	; 0x37
 800564c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fe48 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	2137      	movs	r1, #55	; 0x37
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f918 	bl	80058a4 <SDMMC_GetCmdResp1>
 8005674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005676:	69fb      	ldr	r3, [r7, #28]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005696:	2329      	movs	r3, #41	; 0x29
 8005698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800569a:	2340      	movs	r3, #64	; 0x40
 800569c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fe22 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fa2b 	bl	8005b10 <SDMMC_GetCmdResp3>
 80056ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80056d4:	2306      	movs	r3, #6
 80056d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fe03 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	2106      	movs	r1, #6
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8d3 	bl	80058a4 <SDMMC_GetCmdResp1>
 80056fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005700:	69fb      	ldr	r3, [r7, #28]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b088      	sub	sp, #32
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005716:	2333      	movs	r3, #51	; 0x33
 8005718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005726:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005728:	f107 0308 	add.w	r3, r7, #8
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fde2 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005734:	f241 3288 	movw	r2, #5000	; 0x1388
 8005738:	2133      	movs	r1, #51	; 0x33
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8b2 	bl	80058a4 <SDMMC_GetCmdResp1>
 8005740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005758:	2302      	movs	r3, #2
 800575a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800575c:	23c0      	movs	r3, #192	; 0xc0
 800575e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005768:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fdc1 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f982 	bl	8005a80 <SDMMC_GetCmdResp2>
 800577c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577e:	69fb      	ldr	r3, [r7, #28]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005796:	2309      	movs	r3, #9
 8005798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800579a:	23c0      	movs	r3, #192	; 0xc0
 800579c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fda2 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f963 	bl	8005a80 <SDMMC_GetCmdResp2>
 80057ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057bc:	69fb      	ldr	r3, [r7, #28]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80057d4:	2303      	movs	r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff fd83 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	2103      	movs	r1, #3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9c8 	bl	8005b8c <SDMMC_GetCmdResp6>
 80057fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057fe:	69fb      	ldr	r3, [r7, #28]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005816:	230d      	movs	r3, #13
 8005818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800581a:	2340      	movs	r3, #64	; 0x40
 800581c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fd62 	bl	80052f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	210d      	movs	r1, #13
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f832 	bl	80058a4 <SDMMC_GetCmdResp1>
 8005840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005842:	69fb      	ldr	r3, [r7, #28]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <SDMMC_GetCmdError+0x50>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <SDMMC_GetCmdError+0x54>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a5b      	lsrs	r3, r3, #9
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005878:	e009      	b.n	800588e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f1      	beq.n	800586a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	22c5      	movs	r2, #197	; 0xc5
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000001c 	.word	0x2000001c
 80058a0:	10624dd3 	.word	0x10624dd3

080058a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	460b      	mov	r3, r1
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80058b2:	4b70      	ldr	r3, [pc, #448]	; (8005a74 <SDMMC_GetCmdResp1+0x1d0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a70      	ldr	r2, [pc, #448]	; (8005a78 <SDMMC_GetCmdResp1+0x1d4>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	0a5a      	lsrs	r2, r3, #9
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	1e5a      	subs	r2, r3, #1
 80058ca:	61fa      	str	r2, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d4:	e0c9      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ef      	beq.n	80058c6 <SDMMC_GetCmdResp1+0x22>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ea      	bne.n	80058c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2204      	movs	r2, #4
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005902:	2304      	movs	r3, #4
 8005904:	e0b1      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005918:	2301      	movs	r3, #1
 800591a:	e0a6      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	22c5      	movs	r2, #197	; 0xc5
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fd12 	bl	800534c <SDIO_GetCommandResponse>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	4293      	cmp	r3, r2
 8005930:	d001      	beq.n	8005936 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005932:	2301      	movs	r3, #1
 8005934:	e099      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005936:	2100      	movs	r1, #0
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fd14 	bl	8005366 <SDIO_GetResponse>
 800593e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4b4e      	ldr	r3, [pc, #312]	; (8005a7c <SDMMC_GetCmdResp1+0x1d8>)
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800594a:	2300      	movs	r3, #0
 800594c:	e08d      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	da02      	bge.n	800595a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005958:	e087      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	e080      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	e079      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005984:	e071      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005994:	e069      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80059a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a4:	e061      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80059b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059b4:	e059      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80059c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c4:	e051      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80059d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059d4:	e049      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80059e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059e4:	e041      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80059f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f4:	e039      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a04:	e031      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a14:	e029      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a24:	e021      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a34:	e019      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a44:	e011      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a54:	e009      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005a60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a64:	e001      	b.n	8005a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2000001c 	.word	0x2000001c
 8005a78:	10624dd3 	.word	0x10624dd3
 8005a7c:	fdffe008 	.word	0xfdffe008

08005a80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a88:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <SDMMC_GetCmdResp2+0x88>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <SDMMC_GetCmdResp2+0x8c>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	0a5b      	lsrs	r3, r3, #9
 8005a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	60fa      	str	r2, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005aac:	e026      	b.n	8005afc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0ef      	beq.n	8005a9e <SDMMC_GetCmdResp2+0x1e>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1ea      	bne.n	8005a9e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ada:	2304      	movs	r3, #4
 8005adc:	e00e      	b.n	8005afc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e003      	b.n	8005afc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	22c5      	movs	r2, #197	; 0xc5
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	2000001c 	.word	0x2000001c
 8005b0c:	10624dd3 	.word	0x10624dd3

08005b10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b18:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <SDMMC_GetCmdResp3+0x74>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <SDMMC_GetCmdResp3+0x78>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0a5b      	lsrs	r3, r3, #9
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1e5a      	subs	r2, r3, #1
 8005b32:	60fa      	str	r2, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b3c:	e01b      	b.n	8005b76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ef      	beq.n	8005b2e <SDMMC_GetCmdResp3+0x1e>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ea      	bne.n	8005b2e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2204      	movs	r2, #4
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	e003      	b.n	8005b76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	22c5      	movs	r2, #197	; 0xc5
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000001c 	.word	0x2000001c
 8005b88:	10624dd3 	.word	0x10624dd3

08005b8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	460b      	mov	r3, r1
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b9a:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <SDMMC_GetCmdResp6+0xe4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <SDMMC_GetCmdResp6+0xe8>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	0a5b      	lsrs	r3, r3, #9
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bbe:	e052      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0ef      	beq.n	8005bb0 <SDMMC_GetCmdResp6+0x24>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ea      	bne.n	8005bb0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2204      	movs	r2, #4
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bec:	2304      	movs	r3, #4
 8005bee:	e03a      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e02f      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fba0 	bl	800534c <SDIO_GetCommandResponse>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d001      	beq.n	8005c1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e025      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	22c5      	movs	r2, #197	; 0xc5
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c20:	2100      	movs	r1, #0
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fb9f 	bl	8005366 <SDIO_GetResponse>
 8005c28:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e011      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c50:	e009      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c60:	e001      	b.n	8005c66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2000001c 	.word	0x2000001c
 8005c74:	10624dd3 	.word	0x10624dd3

08005c78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <SDMMC_GetCmdResp7+0x94>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <SDMMC_GetCmdResp7+0x98>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0a5b      	lsrs	r3, r3, #9
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1e5a      	subs	r2, r3, #1
 8005c9a:	60fa      	str	r2, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d102      	bne.n	8005ca6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ca4:	e02c      	b.n	8005d00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ef      	beq.n	8005c96 <SDMMC_GetCmdResp7+0x1e>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ea      	bne.n	8005c96 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	e014      	b.n	8005d00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e009      	b.n	8005d00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005cfe:	2300      	movs	r3, #0
  
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000001c 	.word	0x2000001c
 8005d10:	10624dd3 	.word	0x10624dd3

08005d14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d18:	4904      	ldr	r1, [pc, #16]	; (8005d2c <MX_FATFS_Init+0x18>)
 8005d1a:	4805      	ldr	r0, [pc, #20]	; (8005d30 <MX_FATFS_Init+0x1c>)
 8005d1c:	f003 ff02 	bl	8009b24 <FATFS_LinkDriver>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <MX_FATFS_Init+0x20>)
 8005d26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200013b8 	.word	0x200013b8
 8005d30:	0800af7c 	.word	0x0800af7c
 8005d34:	200013b4 	.word	0x200013b4

08005d38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005d52:	f000 f896 	bl	8005e82 <BSP_SD_IsDetected>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e012      	b.n	8005d86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005d60:	480b      	ldr	r0, [pc, #44]	; (8005d90 <BSP_SD_Init+0x48>)
 8005d62:	f7fd f971 	bl	8003048 <HAL_SD_Init>
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d74:	4806      	ldr	r0, [pc, #24]	; (8005d90 <BSP_SD_Init+0x48>)
 8005d76:	f7fd ff3d 	bl	8003bf4 <HAL_SD_ConfigWideBusOperation>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005d84:	79fb      	ldrb	r3, [r7, #7]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200011cc 	.word	0x200011cc

08005d94 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005dac:	f7fd f9fa 	bl	80031a4 <HAL_SD_ReadBlocks_DMA>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	200011cc 	.word	0x200011cc

08005dc8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	68f9      	ldr	r1, [r7, #12]
 8005dde:	4806      	ldr	r0, [pc, #24]	; (8005df8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005de0:	f7fd fac2 	bl	8003368 <HAL_SD_WriteBlocks_DMA>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	200011cc 	.word	0x200011cc

08005dfc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e00:	4805      	ldr	r0, [pc, #20]	; (8005e18 <BSP_SD_GetCardState+0x1c>)
 8005e02:	f7fd ff91 	bl	8003d28 <HAL_SD_GetCardState>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200011cc 	.word	0x200011cc

08005e1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4803      	ldr	r0, [pc, #12]	; (8005e34 <BSP_SD_GetCardInfo+0x18>)
 8005e28:	f7fd feb8 	bl	8003b9c <HAL_SD_GetCardInfo>
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	200011cc 	.word	0x200011cc

08005e38 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005e40:	f000 f818 	bl	8005e74 <BSP_SD_AbortCallback>
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005e54:	f000 f98c 	bl	8006170 <BSP_SD_WriteCpltCallback>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005e68:	f000 f98e 	bl	8006188 <BSP_SD_ReadCpltCallback>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0

}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	b2db      	uxtb	r3, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005ea4:	f7fb fdde 	bl	8001a64 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005eaa:	e006      	b.n	8005eba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005eac:	f7ff ffa6 	bl	8005dfc <BSP_SD_GetCardState>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e009      	b.n	8005ece <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005eba:	f7fb fdd3 	bl	8001a64 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d8f0      	bhi.n	8005eac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <SD_CheckStatus+0x38>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ee8:	f7ff ff88 	bl	8005dfc <BSP_SD_GetCardState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <SD_CheckStatus+0x38>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <SD_CheckStatus+0x38>)
 8005f00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f02:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <SD_CheckStatus+0x38>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000041 	.word	0x20000041

08005f14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005f1e:	f7ff ff13 	bl	8005d48 <BSP_SD_Init>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d107      	bne.n	8005f38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ffd4 	bl	8005ed8 <SD_CheckStatus>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <SD_initialize+0x34>)
 8005f36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <SD_initialize+0x34>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000041 	.word	0x20000041

08005f4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ffbd 	bl	8005ed8 <SD_CheckStatus>
 8005f5e:	4603      	mov	r3, r0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005f7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8005f80:	f7ff ff8c 	bl	8005e9c <SD_CheckStatusWithTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da01      	bge.n	8005f8e <SD_read+0x26>
  {
    return res;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	e03b      	b.n	8006006 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f7ff fefe 	bl	8005d94 <BSP_SD_ReadBlocks_DMA>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d132      	bne.n	8006004 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005f9e:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <SD_read+0xa8>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005fa4:	f7fb fd5e 	bl	8001a64 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005faa:	bf00      	nop
 8005fac:	4b18      	ldr	r3, [pc, #96]	; (8006010 <SD_read+0xa8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <SD_read+0x5e>
 8005fb4:	f7fb fd56 	bl	8001a64 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d9f2      	bls.n	8005fac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <SD_read+0xa8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
 8005fd2:	e017      	b.n	8006004 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <SD_read+0xa8>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005fda:	f7fb fd43 	bl	8001a64 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005fe0:	e007      	b.n	8005ff2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005fe2:	f7ff ff0b 	bl	8005dfc <BSP_SD_GetCardState>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <SD_read+0x8a>
          {
            res = RES_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005ff0:	e008      	b.n	8006004 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005ff2:	f7fb fd37 	bl	8001a64 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f247 522f 	movw	r2, #29999	; 0x752f
 8006000:	4293      	cmp	r3, r2
 8006002:	d9ee      	bls.n	8005fe2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200010cc 	.word	0x200010cc

08006014 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006028:	4b24      	ldr	r3, [pc, #144]	; (80060bc <SD_write+0xa8>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800602e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006032:	f7ff ff33 	bl	8005e9c <SD_CheckStatusWithTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	da01      	bge.n	8006040 <SD_write+0x2c>
  {
    return res;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	e038      	b.n	80060b2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	f7ff febf 	bl	8005dc8 <BSP_SD_WriteBlocks_DMA>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d12f      	bne.n	80060b0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006050:	f7fb fd08 	bl	8001a64 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006056:	bf00      	nop
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <SD_write+0xa8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <SD_write+0x5e>
 8006060:	f7fb fd00 	bl	8001a64 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f247 522f 	movw	r2, #29999	; 0x752f
 800606e:	4293      	cmp	r3, r2
 8006070:	d9f2      	bls.n	8006058 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <SD_write+0xa8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
 800607e:	e017      	b.n	80060b0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <SD_write+0xa8>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006086:	f7fb fced 	bl	8001a64 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800608c:	e007      	b.n	800609e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800608e:	f7ff feb5 	bl	8005dfc <BSP_SD_GetCardState>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <SD_write+0x8a>
          {
            res = RES_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
            break;
 800609c:	e008      	b.n	80060b0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800609e:	f7fb fce1 	bl	8001a64 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d9ee      	bls.n	800608e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200010c8 	.word	0x200010c8

080060c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	603a      	str	r2, [r7, #0]
 80060ca:	71fb      	strb	r3, [r7, #7]
 80060cc:	460b      	mov	r3, r1
 80060ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80060d6:	4b25      	ldr	r3, [pc, #148]	; (800616c <SD_ioctl+0xac>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <SD_ioctl+0x28>
 80060e4:	2303      	movs	r3, #3
 80060e6:	e03c      	b.n	8006162 <SD_ioctl+0xa2>

  switch (cmd)
 80060e8:	79bb      	ldrb	r3, [r7, #6]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d834      	bhi.n	8006158 <SD_ioctl+0x98>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <SD_ioctl+0x34>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006105 	.word	0x08006105
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800613f 	.word	0x0800613f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800610a:	e028      	b.n	800615e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fe83 	bl	8005e1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006122:	e01c      	b.n	800615e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fe77 	bl	8005e1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	b29a      	uxth	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800613c:	e00f      	b.n	800615e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fe6a 	bl	8005e1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	0a5a      	lsrs	r2, r3, #9
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006156:	e002      	b.n	800615e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006158:	2304      	movs	r3, #4
 800615a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800615e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006162:	4618      	mov	r0, r3
 8006164:	3730      	adds	r7, #48	; 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000041 	.word	0x20000041

08006170 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006174:	4b03      	ldr	r3, [pc, #12]	; (8006184 <BSP_SD_WriteCpltCallback+0x14>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
}
 800617a:	bf00      	nop
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	200010c8 	.word	0x200010c8

08006188 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <BSP_SD_ReadCpltCallback+0x14>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	200010cc 	.word	0x200010cc

080061a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <disk_status+0x30>)
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	79fa      	ldrb	r2, [r7, #7]
 80061b8:	4905      	ldr	r1, [pc, #20]	; (80061d0 <disk_status+0x30>)
 80061ba:	440a      	add	r2, r1
 80061bc:	7a12      	ldrb	r2, [r2, #8]
 80061be:	4610      	mov	r0, r2
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200010f8 	.word	0x200010f8

080061d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <disk_initialize+0x48>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d111      	bne.n	8006210 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	4a0b      	ldr	r2, [pc, #44]	; (800621c <disk_initialize+0x48>)
 80061f0:	2101      	movs	r1, #1
 80061f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <disk_initialize+0x48>)
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	79fa      	ldrb	r2, [r7, #7]
 8006202:	4906      	ldr	r1, [pc, #24]	; (800621c <disk_initialize+0x48>)
 8006204:	440a      	add	r2, r1
 8006206:	7a12      	ldrb	r2, [r2, #8]
 8006208:	4610      	mov	r0, r2
 800620a:	4798      	blx	r3
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200010f8 	.word	0x200010f8

08006220 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <disk_read+0x3c>)
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	689c      	ldr	r4, [r3, #8]
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	4a07      	ldr	r2, [pc, #28]	; (800625c <disk_read+0x3c>)
 8006240:	4413      	add	r3, r2
 8006242:	7a18      	ldrb	r0, [r3, #8]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	47a0      	blx	r4
 800624c:	4603      	mov	r3, r0
 800624e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}
 800625a:	bf00      	nop
 800625c:	200010f8 	.word	0x200010f8

08006260 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <disk_write+0x3c>)
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68dc      	ldr	r4, [r3, #12]
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	4a07      	ldr	r2, [pc, #28]	; (800629c <disk_write+0x3c>)
 8006280:	4413      	add	r3, r2
 8006282:	7a18      	ldrb	r0, [r3, #8]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	47a0      	blx	r4
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}
 800629a:	bf00      	nop
 800629c:	200010f8 	.word	0x200010f8

080062a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	603a      	str	r2, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	460b      	mov	r3, r1
 80062ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <disk_ioctl+0x38>)
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	4906      	ldr	r1, [pc, #24]	; (80062d8 <disk_ioctl+0x38>)
 80062c0:	440a      	add	r2, r1
 80062c2:	7a10      	ldrb	r0, [r2, #8]
 80062c4:	79b9      	ldrb	r1, [r7, #6]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200010f8 	.word	0x200010f8

080062dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80062ec:	89fb      	ldrh	r3, [r7, #14]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	b21a      	sxth	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b21b      	sxth	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b21b      	sxth	r3, r3
 80062fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80062fe:	89fb      	ldrh	r3, [r7, #14]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3303      	adds	r3, #3
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	3202      	adds	r2, #2
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	3201      	adds	r2, #1
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
	return rv;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	887a      	ldrh	r2, [r7, #2]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	887a      	ldrh	r2, [r7, #2]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	1c53      	adds	r3, r2, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	6179      	str	r1, [r7, #20]
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3b01      	subs	r3, #1
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f1      	bne.n	80063fa <mem_cpy+0x1a>
	}
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	617a      	str	r2, [r7, #20]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f3      	bne.n	8006432 <mem_set+0x10>
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	61fa      	str	r2, [r7, #28]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	4619      	mov	r1, r3
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	61ba      	str	r2, [r7, #24]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	1acb      	subs	r3, r1, r3
 8006484:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <mem_cmp+0x40>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0eb      	beq.n	8006470 <mem_cmp+0x18>

	return r;
 8006498:	697b      	ldr	r3, [r7, #20]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3724      	adds	r7, #36	; 0x24
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80064b0:	e002      	b.n	80064b8 <chk_chr+0x12>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3301      	adds	r3, #1
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <chk_chr+0x26>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d1f2      	bne.n	80064b2 <chk_chr+0xc>
	return *str;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	781b      	ldrb	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e029      	b.n	8006544 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80064f0:	4a27      	ldr	r2, [pc, #156]	; (8006590 <chk_lock+0xb4>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4413      	add	r3, r2
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01d      	beq.n	800653a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064fe:	4a24      	ldr	r2, [pc, #144]	; (8006590 <chk_lock+0xb4>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	4413      	add	r3, r2
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d116      	bne.n	800653e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006510:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <chk_lock+0xb4>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	4413      	add	r3, r2
 8006518:	3304      	adds	r3, #4
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006520:	429a      	cmp	r2, r3
 8006522:	d10c      	bne.n	800653e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006524:	4a1a      	ldr	r2, [pc, #104]	; (8006590 <chk_lock+0xb4>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	4413      	add	r3, r2
 800652c:	3308      	adds	r3, #8
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006534:	429a      	cmp	r2, r3
 8006536:	d102      	bne.n	800653e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006538:	e007      	b.n	800654a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800653a:	2301      	movs	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d9d2      	bls.n	80064f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d109      	bne.n	8006564 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <chk_lock+0x80>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d101      	bne.n	8006560 <chk_lock+0x84>
 800655c:	2300      	movs	r3, #0
 800655e:	e010      	b.n	8006582 <chk_lock+0xa6>
 8006560:	2312      	movs	r3, #18
 8006562:	e00e      	b.n	8006582 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <chk_lock+0xa0>
 800656a:	4a09      	ldr	r2, [pc, #36]	; (8006590 <chk_lock+0xb4>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	4413      	add	r3, r2
 8006572:	330c      	adds	r3, #12
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657a:	d101      	bne.n	8006580 <chk_lock+0xa4>
 800657c:	2310      	movs	r3, #16
 800657e:	e000      	b.n	8006582 <chk_lock+0xa6>
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	200010d8 	.word	0x200010d8

08006594 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800659a:	2300      	movs	r3, #0
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	e002      	b.n	80065a6 <enq_lock+0x12>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3301      	adds	r3, #1
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d806      	bhi.n	80065ba <enq_lock+0x26>
 80065ac:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <enq_lock+0x40>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	4413      	add	r3, r2
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f2      	bne.n	80065a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	200010d8 	.word	0x200010d8

080065d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e01f      	b.n	8006628 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80065e8:	4a41      	ldr	r2, [pc, #260]	; (80066f0 <inc_lock+0x118>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d113      	bne.n	8006622 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80065fa:	4a3d      	ldr	r2, [pc, #244]	; (80066f0 <inc_lock+0x118>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	4413      	add	r3, r2
 8006602:	3304      	adds	r3, #4
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800660a:	429a      	cmp	r2, r3
 800660c:	d109      	bne.n	8006622 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800660e:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <inc_lock+0x118>)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	4413      	add	r3, r2
 8006616:	3308      	adds	r3, #8
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800661e:	429a      	cmp	r2, r3
 8006620:	d006      	beq.n	8006630 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d9dc      	bls.n	80065e8 <inc_lock+0x10>
 800662e:	e000      	b.n	8006632 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006630:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d132      	bne.n	800669e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e002      	b.n	8006644 <inc_lock+0x6c>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d806      	bhi.n	8006658 <inc_lock+0x80>
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <inc_lock+0x118>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	4413      	add	r3, r2
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f2      	bne.n	800663e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d101      	bne.n	8006662 <inc_lock+0x8a>
 800665e:	2300      	movs	r3, #0
 8006660:	e040      	b.n	80066e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4922      	ldr	r1, [pc, #136]	; (80066f0 <inc_lock+0x118>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	440b      	add	r3, r1
 800666e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	491e      	ldr	r1, [pc, #120]	; (80066f0 <inc_lock+0x118>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	440b      	add	r3, r1
 800667c:	3304      	adds	r3, #4
 800667e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	491a      	ldr	r1, [pc, #104]	; (80066f0 <inc_lock+0x118>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	440b      	add	r3, r1
 800668c:	3308      	adds	r3, #8
 800668e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006690:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <inc_lock+0x118>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	4413      	add	r3, r2
 8006698:	330c      	adds	r3, #12
 800669a:	2200      	movs	r2, #0
 800669c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <inc_lock+0xe0>
 80066a4:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <inc_lock+0x118>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	4413      	add	r3, r2
 80066ac:	330c      	adds	r3, #12
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <inc_lock+0xe0>
 80066b4:	2300      	movs	r3, #0
 80066b6:	e015      	b.n	80066e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d108      	bne.n	80066d0 <inc_lock+0xf8>
 80066be:	4a0c      	ldr	r2, [pc, #48]	; (80066f0 <inc_lock+0x118>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	4413      	add	r3, r2
 80066c6:	330c      	adds	r3, #12
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	e001      	b.n	80066d4 <inc_lock+0xfc>
 80066d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <inc_lock+0x118>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	440b      	add	r3, r1
 80066dc:	330c      	adds	r3, #12
 80066de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	200010d8 	.word	0x200010d8

080066f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3b01      	subs	r3, #1
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d825      	bhi.n	8006754 <dec_lock+0x60>
		n = Files[i].ctr;
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <dec_lock+0x74>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4413      	add	r3, r2
 8006710:	330c      	adds	r3, #12
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671c:	d101      	bne.n	8006722 <dec_lock+0x2e>
 800671e:	2300      	movs	r3, #0
 8006720:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006722:	89fb      	ldrh	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <dec_lock+0x3a>
 8006728:	89fb      	ldrh	r3, [r7, #14]
 800672a:	3b01      	subs	r3, #1
 800672c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800672e:	4a0e      	ldr	r2, [pc, #56]	; (8006768 <dec_lock+0x74>)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	4413      	add	r3, r2
 8006736:	330c      	adds	r3, #12
 8006738:	89fa      	ldrh	r2, [r7, #14]
 800673a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800673c:	89fb      	ldrh	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <dec_lock+0x5a>
 8006742:	4a09      	ldr	r2, [pc, #36]	; (8006768 <dec_lock+0x74>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	737b      	strb	r3, [r7, #13]
 8006752:	e001      	b.n	8006758 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006754:	2302      	movs	r3, #2
 8006756:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006758:	7b7b      	ldrb	r3, [r7, #13]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	200010d8 	.word	0x200010d8

0800676c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e010      	b.n	800679c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800677a:	4a0d      	ldr	r2, [pc, #52]	; (80067b0 <clear_lock+0x44>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	4413      	add	r3, r2
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d105      	bne.n	8006796 <clear_lock+0x2a>
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <clear_lock+0x44>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	4413      	add	r3, r2
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d9eb      	bls.n	800677a <clear_lock+0xe>
	}
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	200010d8 	.word	0x200010d8

080067b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	78db      	ldrb	r3, [r3, #3]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d034      	beq.n	8006832 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7858      	ldrb	r0, [r3, #1]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80067d8:	2301      	movs	r3, #1
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	f7ff fd40 	bl	8006260 <disk_write>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
 80067ea:	e022      	b.n	8006832 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d217      	bcs.n	8006832 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	789b      	ldrb	r3, [r3, #2]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	e010      	b.n	800682c <sync_window+0x78>
					wsect += fs->fsize;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7858      	ldrb	r0, [r3, #1]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800681e:	2301      	movs	r3, #1
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	f7ff fd1d 	bl	8006260 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3b01      	subs	r3, #1
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d8eb      	bhi.n	800680a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d01b      	beq.n	800688c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ffad 	bl	80067b4 <sync_window>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7858      	ldrb	r0, [r3, #1]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800686e:	2301      	movs	r3, #1
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	f7ff fcd5 	bl	8006220 <disk_read>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800687c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006880:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ff87 	bl	80067b4 <sync_window>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d159      	bne.n	8006964 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d149      	bne.n	800694c <sync_fs+0xb4>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d145      	bne.n	800694c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	899b      	ldrh	r3, [r3, #12]
 80068ca:	461a      	mov	r2, r3
 80068cc:	2100      	movs	r1, #0
 80068ce:	f7ff fda8 	bl	8006422 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3334      	adds	r3, #52	; 0x34
 80068d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fd37 	bl	8006352 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3334      	adds	r3, #52	; 0x34
 80068e8:	4921      	ldr	r1, [pc, #132]	; (8006970 <sync_fs+0xd8>)
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fd4c 	bl	8006388 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3334      	adds	r3, #52	; 0x34
 80068f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80068f8:	491e      	ldr	r1, [pc, #120]	; (8006974 <sync_fs+0xdc>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd44 	bl	8006388 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3334      	adds	r3, #52	; 0x34
 8006904:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7ff fd3a 	bl	8006388 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3334      	adds	r3, #52	; 0x34
 8006918:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f7ff fd30 	bl	8006388 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	7858      	ldrb	r0, [r3, #1]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006940:	2301      	movs	r3, #1
 8006942:	f7ff fc8d 	bl	8006260 <disk_write>
			fs->fsi_flag = 0;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fca3 	bl	80062a0 <disk_ioctl>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <sync_fs+0xcc>
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	41615252 	.word	0x41615252
 8006974:	61417272 	.word	0x61417272

08006978 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	3b02      	subs	r3, #2
 8006986:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	3b02      	subs	r3, #2
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d301      	bcc.n	8006998 <clust2sect+0x20>
 8006994:	2300      	movs	r3, #0
 8006996:	e008      	b.n	80069aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	895b      	ldrh	r3, [r3, #10]
 800699c:	461a      	mov	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	fb03 f202 	mul.w	r2, r3, r2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	4413      	add	r3, r2
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d904      	bls.n	80069d6 <get_fat+0x20>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80069d6:	2301      	movs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e0bb      	b.n	8006b54 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	f000 8083 	beq.w	8006af2 <get_fat+0x13c>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	f300 80a7 	bgt.w	8006b40 <get_fat+0x18a>
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d002      	beq.n	80069fc <get_fat+0x46>
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d056      	beq.n	8006aa8 <get_fat+0xf2>
 80069fa:	e0a1      	b.n	8006b40 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	899b      	ldrh	r3, [r3, #12]
 8006a12:	4619      	mov	r1, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7ff ff0c 	bl	800683c <move_window>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 808d 	bne.w	8006b46 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	60fa      	str	r2, [r7, #12]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	8992      	ldrh	r2, [r2, #12]
 8006a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a3a:	fb02 f201 	mul.w	r2, r2, r1
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	899b      	ldrh	r3, [r3, #12]
 8006a52:	4619      	mov	r1, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6938      	ldr	r0, [r7, #16]
 8006a60:	f7ff feec 	bl	800683c <move_window>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d16f      	bne.n	8006b4a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	899b      	ldrh	r3, [r3, #12]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a76:	fb02 f201 	mul.w	r2, r2, r1
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	461a      	mov	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <get_fat+0xe8>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	e002      	b.n	8006aa4 <get_fat+0xee>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa4:	617b      	str	r3, [r7, #20]
			break;
 8006aa6:	e055      	b.n	8006b54 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	899b      	ldrh	r3, [r3, #12]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006abc:	4413      	add	r3, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6938      	ldr	r0, [r7, #16]
 8006ac2:	f7ff febb 	bl	800683c <move_window>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d140      	bne.n	8006b4e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	8992      	ldrh	r2, [r2, #12]
 8006ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ade:	fb02 f200 	mul.w	r2, r2, r0
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fbf8 	bl	80062dc <ld_word>
 8006aec:	4603      	mov	r3, r0
 8006aee:	617b      	str	r3, [r7, #20]
			break;
 8006af0:	e030      	b.n	8006b54 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	899b      	ldrh	r3, [r3, #12]
 8006afa:	089b      	lsrs	r3, r3, #2
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b06:	4413      	add	r3, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f7ff fe96 	bl	800683c <move_window>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d11d      	bne.n	8006b52 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	8992      	ldrh	r2, [r2, #12]
 8006b24:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b28:	fb02 f200 	mul.w	r2, r2, r0
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	440b      	add	r3, r1
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fbeb 	bl	800630c <ld_dword>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b3c:	617b      	str	r3, [r7, #20]
			break;
 8006b3e:	e009      	b.n	8006b54 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e006      	b.n	8006b54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b46:	bf00      	nop
 8006b48:	e004      	b.n	8006b54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b4a:	bf00      	nop
 8006b4c:	e002      	b.n	8006b54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b52:	bf00      	nop
		}
	}

	return val;
 8006b54:	697b      	ldr	r3, [r7, #20]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006b5e:	b590      	push	{r4, r7, lr}
 8006b60:	b089      	sub	sp, #36	; 0x24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	f240 8102 	bls.w	8006d7a <put_fat+0x21c>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	f080 80fc 	bcs.w	8006d7a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	f000 80b6 	beq.w	8006cf8 <put_fat+0x19a>
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	f300 80fd 	bgt.w	8006d8c <put_fat+0x22e>
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d003      	beq.n	8006b9e <put_fat+0x40>
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	f000 8083 	beq.w	8006ca2 <put_fat+0x144>
 8006b9c:	e0f6      	b.n	8006d8c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4413      	add	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	899b      	ldrh	r3, [r3, #12]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff fe3b 	bl	800683c <move_window>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 80d6 	bne.w	8006d7e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	61ba      	str	r2, [r7, #24]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	8992      	ldrh	r2, [r2, #12]
 8006be2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006be6:	fb02 f200 	mul.w	r2, r2, r0
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	440b      	add	r3, r1
 8006bee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00d      	beq.n	8006c16 <put_fat+0xb8>
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	b25a      	sxtb	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	e001      	b.n	8006c1a <put_fat+0xbc>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	899b      	ldrh	r3, [r3, #12]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c34:	4413      	add	r3, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fdff 	bl	800683c <move_window>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 809c 	bne.w	8006d82 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	899b      	ldrh	r3, [r3, #12]
 8006c54:	461a      	mov	r2, r3
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c5c:	fb02 f200 	mul.w	r2, r2, r0
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	440b      	add	r3, r1
 8006c64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <put_fat+0x11a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	091b      	lsrs	r3, r3, #4
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e00e      	b.n	8006c96 <put_fat+0x138>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f023 030f 	bic.w	r3, r3, #15
 8006c82:	b25a      	sxtb	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	4313      	orrs	r3, r2
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	70da      	strb	r2, [r3, #3]
			break;
 8006ca0:	e074      	b.n	8006d8c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	899b      	ldrh	r3, [r3, #12]
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fdbe 	bl	800683c <move_window>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cc4:	7ffb      	ldrb	r3, [r7, #31]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d15d      	bne.n	8006d86 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	8992      	ldrh	r2, [r2, #12]
 8006cd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cdc:	fb02 f200 	mul.w	r2, r2, r0
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fb31 	bl	8006352 <st_word>
			fs->wflag = 1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	70da      	strb	r2, [r3, #3]
			break;
 8006cf6:	e049      	b.n	8006d8c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	899b      	ldrh	r3, [r3, #12]
 8006d00:	089b      	lsrs	r3, r3, #2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4619      	mov	r1, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fd93 	bl	800683c <move_window>
 8006d16:	4603      	mov	r3, r0
 8006d18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d134      	bne.n	8006d8a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	8992      	ldrh	r2, [r2, #12]
 8006d34:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d38:	fb02 f200 	mul.w	r2, r2, r0
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	440b      	add	r3, r1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fae3 	bl	800630c <ld_dword>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d4c:	4323      	orrs	r3, r4
 8006d4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	8992      	ldrh	r2, [r2, #12]
 8006d5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d62:	fb02 f200 	mul.w	r2, r2, r0
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	440b      	add	r3, r1
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fb0b 	bl	8006388 <st_dword>
			fs->wflag = 1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	70da      	strb	r2, [r3, #3]
			break;
 8006d78:	e008      	b.n	8006d8c <put_fat+0x22e>
		}
	}
 8006d7a:	bf00      	nop
 8006d7c:	e006      	b.n	8006d8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d7e:	bf00      	nop
 8006d80:	e004      	b.n	8006d8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d82:	bf00      	nop
 8006d84:	e002      	b.n	8006d8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d86:	bf00      	nop
 8006d88:	e000      	b.n	8006d8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006d8a:	bf00      	nop
	return res;
 8006d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3724      	adds	r7, #36	; 0x24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}

08006d96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b088      	sub	sp, #32
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d904      	bls.n	8006dbc <remove_chain+0x26>
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d301      	bcc.n	8006dc0 <remove_chain+0x2a>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e04b      	b.n	8006e58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	69b8      	ldr	r0, [r7, #24]
 8006dce:	f7ff fec6 	bl	8006b5e <put_fat>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006dd6:	7ffb      	ldrb	r3, [r7, #31]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <remove_chain+0x4a>
 8006ddc:	7ffb      	ldrb	r3, [r7, #31]
 8006dde:	e03b      	b.n	8006e58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fde7 	bl	80069b6 <get_fat>
 8006de8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d031      	beq.n	8006e54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <remove_chain+0x64>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e02e      	b.n	8006e58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e00:	d101      	bne.n	8006e06 <remove_chain+0x70>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e028      	b.n	8006e58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e06:	2200      	movs	r2, #0
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	69b8      	ldr	r0, [r7, #24]
 8006e0c:	f7ff fea7 	bl	8006b5e <put_fat>
 8006e10:	4603      	mov	r3, r0
 8006e12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <remove_chain+0x88>
 8006e1a:	7ffb      	ldrb	r3, [r7, #31]
 8006e1c:	e01c      	b.n	8006e58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	695a      	ldr	r2, [r3, #20]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	3b02      	subs	r3, #2
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d20b      	bcs.n	8006e44 <remove_chain+0xae>
			fs->free_clst++;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3c6      	bcc.n	8006de0 <remove_chain+0x4a>
 8006e52:	e000      	b.n	8006e56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006e54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <create_chain+0x2c>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d31b      	bcc.n	8006ec4 <create_chain+0x64>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	e018      	b.n	8006ec4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fd8e 	bl	80069b6 <get_fat>
 8006e9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d801      	bhi.n	8006ea6 <create_chain+0x46>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e070      	b.n	8006f88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eac:	d101      	bne.n	8006eb2 <create_chain+0x52>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	e06a      	b.n	8006f88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d201      	bcs.n	8006ec0 <create_chain+0x60>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	e063      	b.n	8006f88 <create_chain+0x128>
		scl = clst;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d307      	bcc.n	8006ee8 <create_chain+0x88>
				ncl = 2;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d901      	bls.n	8006ee8 <create_chain+0x88>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e04f      	b.n	8006f88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fd63 	bl	80069b6 <get_fat>
 8006ef0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d003      	beq.n	8006f06 <create_chain+0xa6>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f04:	d101      	bne.n	8006f0a <create_chain+0xaa>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e03e      	b.n	8006f88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d1da      	bne.n	8006ec8 <create_chain+0x68>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e038      	b.n	8006f88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	6938      	ldr	r0, [r7, #16]
 8006f20:	f7ff fe1d 	bl	8006b5e <put_fat>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <create_chain+0xe2>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6938      	ldr	r0, [r7, #16]
 8006f3a:	f7ff fe10 	bl	8006b5e <put_fat>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d116      	bne.n	8006f76 <create_chain+0x116>
		fs->last_clst = ncl;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	3b02      	subs	r3, #2
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d804      	bhi.n	8006f66 <create_chain+0x106>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	1e5a      	subs	r2, r3, #1
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	711a      	strb	r2, [r3, #4]
 8006f74:	e007      	b.n	8006f86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <create_chain+0x122>
 8006f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f80:	e000      	b.n	8006f84 <create_chain+0x124>
 8006f82:	2301      	movs	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f86:	69fb      	ldr	r3, [r7, #28]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	899b      	ldrh	r3, [r3, #12]
 8006fac:	461a      	mov	r2, r3
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	8952      	ldrh	r2, [r2, #10]
 8006fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	613a      	str	r2, [r7, #16]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <clmt_clust+0x42>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e010      	b.n	8006ff4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d307      	bcc.n	8006fea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fe8:	e7e9      	b.n	8006fbe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006fea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4413      	add	r3, r2
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007016:	d204      	bcs.n	8007022 <dir_sdi+0x22>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007022:	2302      	movs	r3, #2
 8007024:	e071      	b.n	800710a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <dir_sdi+0x46>
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d902      	bls.n	8007046 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	8912      	ldrh	r2, [r2, #8]
 8007054:	4293      	cmp	r3, r2
 8007056:	d301      	bcc.n	800705c <dir_sdi+0x5c>
 8007058:	2302      	movs	r3, #2
 800705a:	e056      	b.n	800710a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	61da      	str	r2, [r3, #28]
 8007064:	e02d      	b.n	80070c2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	895b      	ldrh	r3, [r3, #10]
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	899b      	ldrh	r3, [r3, #12]
 8007070:	fb03 f302 	mul.w	r3, r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007076:	e019      	b.n	80070ac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff fc9a 	bl	80069b6 <get_fat>
 8007082:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800708a:	d101      	bne.n	8007090 <dir_sdi+0x90>
 800708c:	2301      	movs	r3, #1
 800708e:	e03c      	b.n	800710a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d904      	bls.n	80070a0 <dir_sdi+0xa0>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	d301      	bcc.n	80070a4 <dir_sdi+0xa4>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e032      	b.n	800710a <dir_sdi+0x10a>
			ofs -= csz;
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d2e1      	bcs.n	8007078 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80070b4:	6979      	ldr	r1, [r7, #20]
 80070b6:	6938      	ldr	r0, [r7, #16]
 80070b8:	f7ff fc5e 	bl	8006978 <clust2sect>
 80070bc:	4602      	mov	r2, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <dir_sdi+0xd4>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e01a      	b.n	800710a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	899b      	ldrh	r3, [r3, #12]
 80070dc:	4619      	mov	r1, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	899b      	ldrh	r3, [r3, #12]
 80070f4:	461a      	mov	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80070fc:	fb02 f200 	mul.w	r2, r2, r0
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	18ca      	adds	r2, r1, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	3320      	adds	r3, #32
 8007128:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <dir_next+0x28>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007138:	d301      	bcc.n	800713e <dir_next+0x2c>
 800713a:	2304      	movs	r3, #4
 800713c:	e0bb      	b.n	80072b6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	899b      	ldrh	r3, [r3, #12]
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	fbb3 f1f2 	udiv	r1, r3, r2
 800714a:	fb02 f201 	mul.w	r2, r2, r1
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	f040 809d 	bne.w	8007290 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	8912      	ldrh	r2, [r2, #8]
 8007170:	4293      	cmp	r3, r2
 8007172:	f0c0 808d 	bcc.w	8007290 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	61da      	str	r2, [r3, #28]
 800717c:	2304      	movs	r3, #4
 800717e:	e09a      	b.n	80072b6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	899b      	ldrh	r3, [r3, #12]
 8007184:	461a      	mov	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	fbb3 f3f2 	udiv	r3, r3, r2
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	8952      	ldrh	r2, [r2, #10]
 8007190:	3a01      	subs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d17b      	bne.n	8007290 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7ff fc08 	bl	80069b6 <get_fat>
 80071a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d801      	bhi.n	80071b2 <dir_next+0xa0>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e081      	b.n	80072b6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b8:	d101      	bne.n	80071be <dir_next+0xac>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e07b      	b.n	80072b6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d359      	bcc.n	800727c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	61da      	str	r2, [r3, #28]
 80071d4:	2304      	movs	r3, #4
 80071d6:	e06e      	b.n	80072b6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7ff fe3d 	bl	8006e60 <create_chain>
 80071e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <dir_next+0xe0>
 80071ee:	2307      	movs	r3, #7
 80071f0:	e061      	b.n	80072b6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <dir_next+0xea>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e05c      	b.n	80072b6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007202:	d101      	bne.n	8007208 <dir_next+0xf6>
 8007204:	2301      	movs	r3, #1
 8007206:	e056      	b.n	80072b6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fad3 	bl	80067b4 <sync_window>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <dir_next+0x106>
 8007214:	2301      	movs	r3, #1
 8007216:	e04e      	b.n	80072b6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	899b      	ldrh	r3, [r3, #12]
 8007222:	461a      	mov	r2, r3
 8007224:	2100      	movs	r1, #0
 8007226:	f7ff f8fc 	bl	8006422 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fba1 	bl	8006978 <clust2sect>
 8007236:	4602      	mov	r2, r0
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
 800723c:	e012      	b.n	8007264 <dir_next+0x152>
						fs->wflag = 1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff fab5 	bl	80067b4 <sync_window>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <dir_next+0x142>
 8007250:	2301      	movs	r3, #1
 8007252:	e030      	b.n	80072b6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	3301      	adds	r3, #1
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	895b      	ldrh	r3, [r3, #10]
 8007268:	461a      	mov	r2, r3
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4293      	cmp	r3, r2
 800726e:	d3e6      	bcc.n	800723e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007282:	6979      	ldr	r1, [r7, #20]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff fb77 	bl	8006978 <clust2sect>
 800728a:	4602      	mov	r2, r0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	899b      	ldrh	r3, [r3, #12]
 80072a0:	461a      	mov	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80072a8:	fb02 f200 	mul.w	r2, r2, r0
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	18ca      	adds	r2, r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80072ce:	2100      	movs	r1, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fe95 	bl	8007000 <dir_sdi>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d12b      	bne.n	8007338 <dir_alloc+0x7a>
		n = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	4619      	mov	r1, r3
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff faa6 	bl	800683c <move_window>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11d      	bne.n	8007336 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2be5      	cmp	r3, #229	; 0xe5
 8007302:	d004      	beq.n	800730e <dir_alloc+0x50>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d102      	bne.n	8007322 <dir_alloc+0x64>
 800731c:	e00c      	b.n	8007338 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007322:	2101      	movs	r1, #1
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fef4 	bl	8007112 <dir_next>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0d7      	beq.n	80072e4 <dir_alloc+0x26>
 8007334:	e000      	b.n	8007338 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007336:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b04      	cmp	r3, #4
 800733c:	d101      	bne.n	8007342 <dir_alloc+0x84>
 800733e:	2307      	movs	r3, #7
 8007340:	75fb      	strb	r3, [r7, #23]
	return res;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	331a      	adds	r3, #26
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe ffbe 	bl	80062dc <ld_word>
 8007360:	4603      	mov	r3, r0
 8007362:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d109      	bne.n	8007380 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ffb3 	bl	80062dc <ld_word>
 8007376:	4603      	mov	r3, r0
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007380:	68fb      	ldr	r3, [r7, #12]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	331a      	adds	r3, #26
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	b292      	uxth	r2, r2
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe ffd6 	bl	8006352 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d109      	bne.n	80073c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f103 0214 	add.w	r2, r3, #20
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe ffc8 	bl	8006352 <st_word>
	}
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fe10 	bl	8007000 <dir_sdi>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <dir_find+0x24>
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	e03e      	b.n	800746c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6938      	ldr	r0, [r7, #16]
 80073f6:	f7ff fa21 	bl	800683c <move_window>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d12f      	bne.n	8007464 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <dir_find+0x4e>
 8007412:	2304      	movs	r3, #4
 8007414:	75fb      	strb	r3, [r7, #23]
 8007416:	e028      	b.n	800746a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	330b      	adds	r3, #11
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007424:	b2da      	uxtb	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	330b      	adds	r3, #11
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <dir_find+0x86>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a18      	ldr	r0, [r3, #32]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	220b      	movs	r2, #11
 8007444:	4619      	mov	r1, r3
 8007446:	f7ff f807 	bl	8006458 <mem_cmp>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007450:	2100      	movs	r1, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fe5d 	bl	8007112 <dir_next>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0c5      	beq.n	80073ee <dir_find+0x24>
 8007462:	e002      	b.n	800746a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007468:	bf00      	nop

	return res;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff1a 	bl	80072be <dir_alloc>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11c      	bne.n	80074ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	4619      	mov	r1, r3
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	f7ff f9ce 	bl	800683c <move_window>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d111      	bne.n	80074ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	2220      	movs	r2, #32
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe ffb5 	bl	8006422 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a18      	ldr	r0, [r3, #32]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	220b      	movs	r2, #11
 80074c2:	4619      	mov	r1, r3
 80074c4:	f7fe ff8c 	bl	80063e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2201      	movs	r2, #1
 80074cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2200      	movs	r2, #0
 80074e6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d04e      	beq.n	800758e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80074f8:	e021      	b.n	800753e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1c59      	adds	r1, r3, #1
 8007502:	6179      	str	r1, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b20      	cmp	r3, #32
 800750e:	d100      	bne.n	8007512 <get_fileinfo+0x3a>
 8007510:	e015      	b.n	800753e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b05      	cmp	r3, #5
 8007516:	d101      	bne.n	800751c <get_fileinfo+0x44>
 8007518:	23e5      	movs	r3, #229	; 0xe5
 800751a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d106      	bne.n	8007530 <get_fileinfo+0x58>
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	613a      	str	r2, [r7, #16]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	4413      	add	r3, r2
 800752c:	222e      	movs	r2, #46	; 0x2e
 800752e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	613a      	str	r2, [r7, #16]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	4413      	add	r3, r2
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b0a      	cmp	r3, #10
 8007542:	d9da      	bls.n	80074fa <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	4413      	add	r3, r2
 800754a:	3309      	adds	r3, #9
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	7ada      	ldrb	r2, [r3, #11]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	331c      	adds	r3, #28
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fed3 	bl	800630c <ld_dword>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	3316      	adds	r3, #22
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe feca 	bl	800630c <ld_dword>
 8007578:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	b29a      	uxth	r2, r3
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	80da      	strh	r2, [r3, #6]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	b29a      	uxth	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	809a      	strh	r2, [r3, #4]
 800758c:	e000      	b.n	8007590 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800758e:	bf00      	nop
}
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3324      	adds	r3, #36	; 0x24
 80075ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80075ae:	220b      	movs	r2, #11
 80075b0:	2120      	movs	r1, #32
 80075b2:	68b8      	ldr	r0, [r7, #8]
 80075b4:	f7fe ff35 	bl	8006422 <mem_set>
	si = i = 0; ni = 8;
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	2308      	movs	r3, #8
 80075c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	61fa      	str	r2, [r7, #28]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80075d2:	7efb      	ldrb	r3, [r7, #27]
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d94e      	bls.n	8007676 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80075d8:	7efb      	ldrb	r3, [r7, #27]
 80075da:	2b2f      	cmp	r3, #47	; 0x2f
 80075dc:	d006      	beq.n	80075ec <create_name+0x54>
 80075de:	7efb      	ldrb	r3, [r7, #27]
 80075e0:	2b5c      	cmp	r3, #92	; 0x5c
 80075e2:	d110      	bne.n	8007606 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80075e4:	e002      	b.n	80075ec <create_name+0x54>
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3301      	adds	r3, #1
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b2f      	cmp	r3, #47	; 0x2f
 80075f6:	d0f6      	beq.n	80075e6 <create_name+0x4e>
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b5c      	cmp	r3, #92	; 0x5c
 8007602:	d0f0      	beq.n	80075e6 <create_name+0x4e>
			break;
 8007604:	e038      	b.n	8007678 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007606:	7efb      	ldrb	r3, [r7, #27]
 8007608:	2b2e      	cmp	r3, #46	; 0x2e
 800760a:	d003      	beq.n	8007614 <create_name+0x7c>
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	429a      	cmp	r2, r3
 8007612:	d30c      	bcc.n	800762e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b0b      	cmp	r3, #11
 8007618:	d002      	beq.n	8007620 <create_name+0x88>
 800761a:	7efb      	ldrb	r3, [r7, #27]
 800761c:	2b2e      	cmp	r3, #46	; 0x2e
 800761e:	d001      	beq.n	8007624 <create_name+0x8c>
 8007620:	2306      	movs	r3, #6
 8007622:	e044      	b.n	80076ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007624:	2308      	movs	r3, #8
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	230b      	movs	r3, #11
 800762a:	617b      	str	r3, [r7, #20]
			continue;
 800762c:	e022      	b.n	8007674 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800762e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007632:	2b00      	cmp	r3, #0
 8007634:	da04      	bge.n	8007640 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007636:	7efb      	ldrb	r3, [r7, #27]
 8007638:	3b80      	subs	r3, #128	; 0x80
 800763a:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <create_name+0x120>)
 800763c:	5cd3      	ldrb	r3, [r2, r3]
 800763e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007640:	7efb      	ldrb	r3, [r7, #27]
 8007642:	4619      	mov	r1, r3
 8007644:	481d      	ldr	r0, [pc, #116]	; (80076bc <create_name+0x124>)
 8007646:	f7fe ff2e 	bl	80064a6 <chk_chr>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <create_name+0xbc>
 8007650:	2306      	movs	r3, #6
 8007652:	e02c      	b.n	80076ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007654:	7efb      	ldrb	r3, [r7, #27]
 8007656:	2b60      	cmp	r3, #96	; 0x60
 8007658:	d905      	bls.n	8007666 <create_name+0xce>
 800765a:	7efb      	ldrb	r3, [r7, #27]
 800765c:	2b7a      	cmp	r3, #122	; 0x7a
 800765e:	d802      	bhi.n	8007666 <create_name+0xce>
 8007660:	7efb      	ldrb	r3, [r7, #27]
 8007662:	3b20      	subs	r3, #32
 8007664:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	613a      	str	r2, [r7, #16]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	4413      	add	r3, r2
 8007670:	7efa      	ldrb	r2, [r7, #27]
 8007672:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007674:	e7a6      	b.n	80075c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007676:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	441a      	add	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <create_name+0xf4>
 8007688:	2306      	movs	r3, #6
 800768a:	e010      	b.n	80076ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2be5      	cmp	r3, #229	; 0xe5
 8007692:	d102      	bne.n	800769a <create_name+0x102>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2205      	movs	r2, #5
 8007698:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800769a:	7efb      	ldrb	r3, [r7, #27]
 800769c:	2b20      	cmp	r3, #32
 800769e:	d801      	bhi.n	80076a4 <create_name+0x10c>
 80076a0:	2204      	movs	r2, #4
 80076a2:	e000      	b.n	80076a6 <create_name+0x10e>
 80076a4:	2200      	movs	r2, #0
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	330b      	adds	r3, #11
 80076aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80076ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	0800af90 	.word	0x0800af90
 80076bc:	0800af18 	.word	0x0800af18

080076c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80076d4:	e002      	b.n	80076dc <follow_path+0x1c>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	3301      	adds	r3, #1
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b2f      	cmp	r3, #47	; 0x2f
 80076e2:	d0f8      	beq.n	80076d6 <follow_path+0x16>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b5c      	cmp	r3, #92	; 0x5c
 80076ea:	d0f4      	beq.n	80076d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2200      	movs	r2, #0
 80076f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b1f      	cmp	r3, #31
 80076f8:	d80a      	bhi.n	8007710 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007702:	2100      	movs	r1, #0
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fc7b 	bl	8007000 <dir_sdi>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]
 800770e:	e048      	b.n	80077a2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007710:	463b      	mov	r3, r7
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ff3f 	bl	8007598 <create_name>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d139      	bne.n	8007798 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fe50 	bl	80073ca <dir_find>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007734:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b04      	cmp	r3, #4
 8007740:	d12c      	bne.n	800779c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d127      	bne.n	800779c <follow_path+0xdc>
 800774c:	2305      	movs	r3, #5
 800774e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007750:	e024      	b.n	800779c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d121      	bne.n	80077a0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	799b      	ldrb	r3, [r3, #6]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d102      	bne.n	800776e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007768:	2305      	movs	r3, #5
 800776a:	75fb      	strb	r3, [r7, #23]
 800776c:	e019      	b.n	80077a2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	8992      	ldrh	r2, [r2, #12]
 800777c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007780:	fb02 f200 	mul.w	r2, r2, r0
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	440b      	add	r3, r1
 8007788:	4619      	mov	r1, r3
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fdde 	bl	800734c <ld_clust>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007796:	e7bb      	b.n	8007710 <follow_path+0x50>
			if (res != FR_OK) break;
 8007798:	bf00      	nop
 800779a:	e002      	b.n	80077a2 <follow_path+0xe2>
				break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077a0:	bf00      	nop
			}
		}
	}

	return res;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d031      	beq.n	8007826 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e002      	b.n	80077d0 <get_ldnumber+0x24>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d903      	bls.n	80077e0 <get_ldnumber+0x34>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b3a      	cmp	r3, #58	; 0x3a
 80077de:	d1f4      	bne.n	80077ca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b3a      	cmp	r3, #58	; 0x3a
 80077e6:	d11c      	bne.n	8007822 <get_ldnumber+0x76>
			tp = *path;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	3b30      	subs	r3, #48	; 0x30
 80077f8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d80e      	bhi.n	800781e <get_ldnumber+0x72>
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d10a      	bne.n	800781e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d107      	bne.n	800781e <get_ldnumber+0x72>
					vol = (int)i;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	3301      	adds	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	e002      	b.n	8007828 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007826:	693b      	ldr	r3, [r7, #16]
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	70da      	strb	r2, [r3, #3]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fe fff4 	bl	800683c <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <check_fs+0x2a>
 800785a:	2304      	movs	r3, #4
 800785c:	e038      	b.n	80078d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3334      	adds	r3, #52	; 0x34
 8007862:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fd38 	bl	80062dc <ld_word>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <check_fs+0x48>
 8007878:	2303      	movs	r3, #3
 800787a:	e029      	b.n	80078d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007882:	2be9      	cmp	r3, #233	; 0xe9
 8007884:	d009      	beq.n	800789a <check_fs+0x66>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800788c:	2beb      	cmp	r3, #235	; 0xeb
 800788e:	d11e      	bne.n	80078ce <check_fs+0x9a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007896:	2b90      	cmp	r3, #144	; 0x90
 8007898:	d119      	bne.n	80078ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3334      	adds	r3, #52	; 0x34
 800789e:	3336      	adds	r3, #54	; 0x36
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fd33 	bl	800630c <ld_dword>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078ac:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <check_fs+0xa4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d101      	bne.n	80078b6 <check_fs+0x82>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e00c      	b.n	80078d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3334      	adds	r3, #52	; 0x34
 80078ba:	3352      	adds	r3, #82	; 0x52
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fd25 	bl	800630c <ld_dword>
 80078c2:	4603      	mov	r3, r0
 80078c4:	4a05      	ldr	r2, [pc, #20]	; (80078dc <check_fs+0xa8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <check_fs+0x9a>
 80078ca:	2300      	movs	r3, #0
 80078cc:	e000      	b.n	80078d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80078ce:	2302      	movs	r3, #2
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	00544146 	.word	0x00544146
 80078dc:	33544146 	.word	0x33544146

080078e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b096      	sub	sp, #88	; 0x58
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff ff59 	bl	80077ac <get_ldnumber>
 80078fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80078fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da01      	bge.n	8007906 <find_volume+0x26>
 8007902:	230b      	movs	r3, #11
 8007904:	e265      	b.n	8007dd2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007906:	4ab0      	ldr	r2, [pc, #704]	; (8007bc8 <find_volume+0x2e8>)
 8007908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <find_volume+0x3a>
 8007916:	230c      	movs	r3, #12
 8007918:	e25b      	b.n	8007dd2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	f023 0301 	bic.w	r3, r3, #1
 8007926:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01a      	beq.n	8007966 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fc33 	bl	80061a0 <disk_status>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <find_volume+0x82>
 8007952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800795e:	230a      	movs	r3, #10
 8007960:	e237      	b.n	8007dd2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007962:	2300      	movs	r3, #0
 8007964:	e235      	b.n	8007dd2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	b2da      	uxtb	r2, r3
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fc2b 	bl	80061d4 <disk_initialize>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007990:	2303      	movs	r3, #3
 8007992:	e21e      	b.n	8007dd2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <find_volume+0xca>
 800799a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80079a6:	230a      	movs	r3, #10
 80079a8:	e213      	b.n	8007dd2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	7858      	ldrb	r0, [r3, #1]
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	330c      	adds	r3, #12
 80079b2:	461a      	mov	r2, r3
 80079b4:	2102      	movs	r1, #2
 80079b6:	f7fe fc73 	bl	80062a0 <disk_ioctl>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <find_volume+0xe4>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e206      	b.n	8007dd2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	899b      	ldrh	r3, [r3, #12]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d80d      	bhi.n	80079ea <find_volume+0x10a>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	899b      	ldrh	r3, [r3, #12]
 80079d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d6:	d308      	bcc.n	80079ea <find_volume+0x10a>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	899b      	ldrh	r3, [r3, #12]
 80079dc:	461a      	mov	r2, r3
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	899b      	ldrh	r3, [r3, #12]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <find_volume+0x10e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e1f1      	b.n	8007dd2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80079f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f6:	f7ff ff1d 	bl	8007834 <check_fs>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d14b      	bne.n	8007aa0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a08:	2300      	movs	r3, #0
 8007a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a0c:	e01f      	b.n	8007a4e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a1c:	4413      	add	r3, r2
 8007a1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	3304      	adds	r3, #4
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <find_volume+0x158>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc6c 	bl	800630c <ld_dword>
 8007a34:	4602      	mov	r2, r0
 8007a36:	e000      	b.n	8007a3a <find_volume+0x15a>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007a42:	440b      	add	r3, r1
 8007a44:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d9dc      	bls.n	8007a0e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007a54:	2300      	movs	r3, #0
 8007a56:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <find_volume+0x184>
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a60:	3b01      	subs	r3, #1
 8007a62:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <find_volume+0x1a6>
 8007a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a7e:	f7ff fed9 	bl	8007834 <check_fs>
 8007a82:	4603      	mov	r3, r0
 8007a84:	e000      	b.n	8007a88 <find_volume+0x1a8>
 8007a86:	2303      	movs	r3, #3
 8007a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d905      	bls.n	8007aa0 <find_volume+0x1c0>
 8007a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a96:	3301      	adds	r3, #1
 8007a98:	643b      	str	r3, [r7, #64]	; 0x40
 8007a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d9e1      	bls.n	8007a64 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d101      	bne.n	8007aac <find_volume+0x1cc>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e192      	b.n	8007dd2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d901      	bls.n	8007ab8 <find_volume+0x1d8>
 8007ab4:	230d      	movs	r3, #13
 8007ab6:	e18c      	b.n	8007dd2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	3334      	adds	r3, #52	; 0x34
 8007abc:	330b      	adds	r3, #11
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fc0c 	bl	80062dc <ld_word>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <find_volume+0x1f4>
 8007ad0:	230d      	movs	r3, #13
 8007ad2:	e17e      	b.n	8007dd2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	3334      	adds	r3, #52	; 0x34
 8007ad8:	3316      	adds	r3, #22
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fbfe 	bl	80062dc <ld_word>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <find_volume+0x218>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	3334      	adds	r3, #52	; 0x34
 8007aee:	3324      	adds	r3, #36	; 0x24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fc0b 	bl	800630c <ld_dword>
 8007af6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007afc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	789b      	ldrb	r3, [r3, #2]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d005      	beq.n	8007b1c <find_volume+0x23c>
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d001      	beq.n	8007b1c <find_volume+0x23c>
 8007b18:	230d      	movs	r3, #13
 8007b1a:	e15a      	b.n	8007dd2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	789b      	ldrb	r3, [r3, #2]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	895b      	ldrh	r3, [r3, #10]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d008      	beq.n	8007b50 <find_volume+0x270>
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	895b      	ldrh	r3, [r3, #10]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	895b      	ldrh	r3, [r3, #10]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <find_volume+0x274>
 8007b50:	230d      	movs	r3, #13
 8007b52:	e13e      	b.n	8007dd2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	3334      	adds	r3, #52	; 0x34
 8007b58:	3311      	adds	r3, #17
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fbbe 	bl	80062dc <ld_word>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	891b      	ldrh	r3, [r3, #8]
 8007b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b6e:	8992      	ldrh	r2, [r2, #12]
 8007b70:	0952      	lsrs	r2, r2, #5
 8007b72:	b292      	uxth	r2, r2
 8007b74:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b78:	fb02 f201 	mul.w	r2, r2, r1
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <find_volume+0x2a8>
 8007b84:	230d      	movs	r3, #13
 8007b86:	e124      	b.n	8007dd2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	3334      	adds	r3, #52	; 0x34
 8007b8c:	3313      	adds	r3, #19
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fba4 	bl	80062dc <ld_word>
 8007b94:	4603      	mov	r3, r0
 8007b96:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <find_volume+0x2cc>
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	3334      	adds	r3, #52	; 0x34
 8007ba2:	3320      	adds	r3, #32
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fbb1 	bl	800630c <ld_dword>
 8007baa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	3334      	adds	r3, #52	; 0x34
 8007bb0:	330e      	adds	r3, #14
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fb92 	bl	80062dc <ld_word>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007bbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <find_volume+0x2ec>
 8007bc2:	230d      	movs	r3, #13
 8007bc4:	e105      	b.n	8007dd2 <find_volume+0x4f2>
 8007bc6:	bf00      	nop
 8007bc8:	200010d0 	.word	0x200010d0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007bcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd4:	8911      	ldrh	r1, [r2, #8]
 8007bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd8:	8992      	ldrh	r2, [r2, #12]
 8007bda:	0952      	lsrs	r2, r2, #5
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	fbb1 f2f2 	udiv	r2, r1, r2
 8007be2:	b292      	uxth	r2, r2
 8007be4:	4413      	add	r3, r2
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d201      	bcs.n	8007bf4 <find_volume+0x314>
 8007bf0:	230d      	movs	r3, #13
 8007bf2:	e0ee      	b.n	8007dd2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfc:	8952      	ldrh	r2, [r2, #10]
 8007bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <find_volume+0x32e>
 8007c0a:	230d      	movs	r3, #13
 8007c0c:	e0e1      	b.n	8007dd2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d802      	bhi.n	8007c24 <find_volume+0x344>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d802      	bhi.n	8007c34 <find_volume+0x354>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c40:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c46:	441a      	add	r2, r3
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007c4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	441a      	add	r2, r3
 8007c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c54:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007c56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d11e      	bne.n	8007c9c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	3334      	adds	r3, #52	; 0x34
 8007c62:	332a      	adds	r3, #42	; 0x2a
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fb39 	bl	80062dc <ld_word>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <find_volume+0x394>
 8007c70:	230d      	movs	r3, #13
 8007c72:	e0ae      	b.n	8007dd2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	891b      	ldrh	r3, [r3, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <find_volume+0x3a0>
 8007c7c:	230d      	movs	r3, #13
 8007c7e:	e0a8      	b.n	8007dd2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	3334      	adds	r3, #52	; 0x34
 8007c84:	332c      	adds	r3, #44	; 0x2c
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fb40 	bl	800630c <ld_dword>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	647b      	str	r3, [r7, #68]	; 0x44
 8007c9a:	e01f      	b.n	8007cdc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	891b      	ldrh	r3, [r3, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <find_volume+0x3c8>
 8007ca4:	230d      	movs	r3, #13
 8007ca6:	e094      	b.n	8007dd2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cae:	441a      	add	r2, r3
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d103      	bne.n	8007cc4 <find_volume+0x3e4>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	e00a      	b.n	8007cda <find_volume+0x3fa>
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	085a      	lsrs	r2, r3, #1
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007cda:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	899b      	ldrh	r3, [r3, #12]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce8:	440b      	add	r3, r1
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cee:	8989      	ldrh	r1, [r1, #12]
 8007cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d201      	bcs.n	8007cfc <find_volume+0x41c>
 8007cf8:	230d      	movs	r3, #13
 8007cfa:	e06a      	b.n	8007dd2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d02:	615a      	str	r2, [r3, #20]
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	695a      	ldr	r2, [r3, #20]
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	2280      	movs	r2, #128	; 0x80
 8007d10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d149      	bne.n	8007dae <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	3334      	adds	r3, #52	; 0x34
 8007d1e:	3330      	adds	r3, #48	; 0x30
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fadb 	bl	80062dc <ld_word>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d140      	bne.n	8007dae <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2e:	3301      	adds	r3, #1
 8007d30:	4619      	mov	r1, r3
 8007d32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d34:	f7fe fd82 	bl	800683c <move_window>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d137      	bne.n	8007dae <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	2200      	movs	r2, #0
 8007d42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	3334      	adds	r3, #52	; 0x34
 8007d48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fac5 	bl	80062dc <ld_word>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d127      	bne.n	8007dae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	3334      	adds	r3, #52	; 0x34
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fad2 	bl	800630c <ld_dword>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <find_volume+0x4fc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d11e      	bne.n	8007dae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	3334      	adds	r3, #52	; 0x34
 8007d74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fac7 	bl	800630c <ld_dword>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <find_volume+0x500>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d113      	bne.n	8007dae <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	3334      	adds	r3, #52	; 0x34
 8007d8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fabc 	bl	800630c <ld_dword>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	3334      	adds	r3, #52	; 0x34
 8007d9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fab2 	bl	800630c <ld_dword>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007db4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <find_volume+0x504>)
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <find_volume+0x504>)
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <find_volume+0x504>)
 8007dc4:	881a      	ldrh	r2, [r3, #0]
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007dca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dcc:	f7fe fcce 	bl	800676c <clear_lock>
#endif
	return FR_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3758      	adds	r7, #88	; 0x58
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	41615252 	.word	0x41615252
 8007de0:	61417272 	.word	0x61417272
 8007de4:	200010d4 	.word	0x200010d4

08007de8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007df2:	2309      	movs	r3, #9
 8007df4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01c      	beq.n	8007e36 <validate+0x4e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d018      	beq.n	8007e36 <validate+0x4e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d013      	beq.n	8007e36 <validate+0x4e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	889a      	ldrh	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d10c      	bne.n	8007e36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe f9bc 	bl	80061a0 <disk_status>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <validate+0x4e>
			res = FR_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <validate+0x5a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	e000      	b.n	8007e44 <validate+0x5c>
 8007e42:	2300      	movs	r3, #0
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	6013      	str	r3, [r2, #0]
	return res;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007e66:	f107 0310 	add.w	r3, r7, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fc9e 	bl	80077ac <get_ldnumber>
 8007e70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da01      	bge.n	8007e7c <f_mount+0x28>
 8007e78:	230b      	movs	r3, #11
 8007e7a:	e02b      	b.n	8007ed4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <f_mount+0x88>)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007e8c:	69b8      	ldr	r0, [r7, #24]
 8007e8e:	f7fe fc6d 	bl	800676c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	490d      	ldr	r1, [pc, #52]	; (8007edc <f_mount+0x88>)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <f_mount+0x66>
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d001      	beq.n	8007ebe <f_mount+0x6a>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e00a      	b.n	8007ed4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ebe:	f107 010c 	add.w	r1, r7, #12
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fd09 	bl	80078e0 <find_volume>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200010d0 	.word	0x200010d0

08007ee0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b098      	sub	sp, #96	; 0x60
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <f_open+0x18>
 8007ef4:	2309      	movs	r3, #9
 8007ef6:	e1bb      	b.n	8008270 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007efe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	f107 0110 	add.w	r1, r7, #16
 8007f06:	f107 0308 	add.w	r3, r7, #8
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fce8 	bl	80078e0 <find_volume>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f040 819f 	bne.w	800825e <f_open+0x37e>
		dj.obj.fs = fs;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	f107 0314 	add.w	r3, r7, #20
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fbc7 	bl	80076c0 <follow_path>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11a      	bne.n	8007f76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f44:	b25b      	sxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da03      	bge.n	8007f52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007f4a:	2306      	movs	r3, #6
 8007f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007f50:	e011      	b.n	8007f76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bf14      	ite	ne
 8007f5c:	2301      	movne	r3, #1
 8007f5e:	2300      	moveq	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fab6 	bl	80064dc <chk_lock>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	f003 031c 	and.w	r3, r3, #28
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d07f      	beq.n	8008080 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d017      	beq.n	8007fb8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d10e      	bne.n	8007fae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f90:	f7fe fb00 	bl	8006594 <enq_lock>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <f_open+0xc8>
 8007f9a:	f107 0314 	add.w	r3, r7, #20
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fa68 	bl	8007474 <dir_register>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	e000      	b.n	8007faa <f_open+0xca>
 8007fa8:	2312      	movs	r3, #18
 8007faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	f043 0308 	orr.w	r3, r3, #8
 8007fb4:	71fb      	strb	r3, [r7, #7]
 8007fb6:	e010      	b.n	8007fda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007fb8:	7ebb      	ldrb	r3, [r7, #26]
 8007fba:	f003 0311 	and.w	r3, r3, #17
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <f_open+0xea>
					res = FR_DENIED;
 8007fc2:	2307      	movs	r3, #7
 8007fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fc8:	e007      	b.n	8007fda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <f_open+0xfa>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d168      	bne.n	80080b4 <f_open+0x1d4>
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d063      	beq.n	80080b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007fec:	f7fd fea4 	bl	8005d38 <get_fattime>
 8007ff0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	330e      	adds	r3, #14
 8007ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe f9c5 	bl	8006388 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008000:	3316      	adds	r3, #22
 8008002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe f9bf 	bl	8006388 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	330b      	adds	r3, #11
 800800e:	2220      	movs	r2, #32
 8008010:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff f997 	bl	800734c <ld_clust>
 800801e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008024:	2200      	movs	r2, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff f9af 	bl	800738a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	331c      	adds	r3, #28
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe f9a8 	bl	8006388 <st_dword>
					fs->wflag = 1;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2201      	movs	r2, #1
 800803c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800803e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d037      	beq.n	80080b4 <f_open+0x1d4>
						dw = fs->winsect;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800804a:	f107 0314 	add.w	r3, r7, #20
 800804e:	2200      	movs	r2, #0
 8008050:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fe9f 	bl	8006d96 <remove_chain>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800805e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008062:	2b00      	cmp	r3, #0
 8008064:	d126      	bne.n	80080b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fbe6 	bl	800683c <move_window>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800807a:	3a01      	subs	r2, #1
 800807c:	611a      	str	r2, [r3, #16]
 800807e:	e019      	b.n	80080b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008088:	7ebb      	ldrb	r3, [r7, #26]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008092:	2304      	movs	r3, #4
 8008094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008098:	e00c      	b.n	80080b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <f_open+0x1d4>
 80080a4:	7ebb      	ldrb	r3, [r7, #26]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <f_open+0x1d4>
						res = FR_DENIED;
 80080ae:	2307      	movs	r3, #7
 80080b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80080b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d128      	bne.n	800810e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80080d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bf14      	ite	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	2300      	moveq	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fa6f 	bl	80065d8 <inc_lock>
 80080fa:	4602      	mov	r2, r0
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <f_open+0x22e>
 8008108:	2302      	movs	r3, #2
 800810a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800810e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 80a3 	bne.w	800825e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f914 	bl	800734c <ld_clust>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800812a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812c:	331c      	adds	r3, #28
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f8ec 	bl	800630c <ld_dword>
 8008134:	4602      	mov	r2, r0
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	88da      	ldrh	r2, [r3, #6]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	79fa      	ldrb	r2, [r7, #7]
 8008152:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3330      	adds	r3, #48	; 0x30
 800816a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800816e:	2100      	movs	r1, #0
 8008170:	4618      	mov	r0, r3
 8008172:	f7fe f956 	bl	8006422 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d06e      	beq.n	800825e <f_open+0x37e>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d06a      	beq.n	800825e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	895b      	ldrh	r3, [r3, #10]
 8008194:	461a      	mov	r2, r3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	899b      	ldrh	r3, [r3, #12]
 800819a:	fb03 f302 	mul.w	r3, r3, r2
 800819e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	657b      	str	r3, [r7, #84]	; 0x54
 80081ac:	e016      	b.n	80081dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fbff 	bl	80069b6 <get_fat>
 80081b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80081ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d802      	bhi.n	80081c6 <f_open+0x2e6>
 80081c0:	2302      	movs	r3, #2
 80081c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081cc:	d102      	bne.n	80081d4 <f_open+0x2f4>
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	657b      	str	r3, [r7, #84]	; 0x54
 80081dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d103      	bne.n	80081ec <f_open+0x30c>
 80081e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d8e0      	bhi.n	80081ae <f_open+0x2ce>
				}
				fp->clust = clst;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80081f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d131      	bne.n	800825e <f_open+0x37e>
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	899b      	ldrh	r3, [r3, #12]
 80081fe:	461a      	mov	r2, r3
 8008200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008202:	fbb3 f1f2 	udiv	r1, r3, r2
 8008206:	fb02 f201 	mul.w	r2, r2, r1
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d026      	beq.n	800825e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fbaf 	bl	8006978 <clust2sect>
 800821a:	6478      	str	r0, [r7, #68]	; 0x44
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	2b00      	cmp	r3, #0
 8008220:	d103      	bne.n	800822a <f_open+0x34a>
						res = FR_INT_ERR;
 8008222:	2302      	movs	r3, #2
 8008224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008228:	e019      	b.n	800825e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	899b      	ldrh	r3, [r3, #12]
 800822e:	461a      	mov	r2, r3
 8008230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008232:	fbb3 f2f2 	udiv	r2, r3, r2
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	441a      	add	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	7858      	ldrb	r0, [r3, #1]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	2301      	movs	r3, #1
 800824e:	f7fd ffe7 	bl	8006220 <disk_read>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <f_open+0x37e>
 8008258:	2301      	movs	r3, #1
 800825a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800825e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <f_open+0x38c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800826c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008270:	4618      	mov	r0, r3
 8008272:	3760      	adds	r7, #96	; 0x60
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f107 0214 	add.w	r2, r7, #20
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fda5 	bl	8007de8 <validate>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d107      	bne.n	80082bc <f_read+0x44>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	7d5b      	ldrb	r3, [r3, #21]
 80082b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <f_read+0x4a>
 80082bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082c0:	e135      	b.n	800852e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	7d1b      	ldrb	r3, [r3, #20]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <f_read+0x5a>
 80082ce:	2307      	movs	r3, #7
 80082d0:	e12d      	b.n	800852e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	f240 811e 	bls.w	8008524 <f_read+0x2ac>
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80082ec:	e11a      	b.n	8008524 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	8992      	ldrh	r2, [r2, #12]
 80082f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082fa:	fb02 f201 	mul.w	r2, r2, r1
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 80d5 	bne.w	80084b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	8992      	ldrh	r2, [r2, #12]
 800830e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	8952      	ldrh	r2, [r2, #10]
 8008316:	3a01      	subs	r2, #1
 8008318:	4013      	ands	r3, r2
 800831a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d12f      	bne.n	8008382 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
 8008330:	e013      	b.n	800835a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	4619      	mov	r1, r3
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7fe fe25 	bl	8006f90 <clmt_clust>
 8008346:	6338      	str	r0, [r7, #48]	; 0x30
 8008348:	e007      	b.n	800835a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7fe fb2f 	bl	80069b6 <get_fat>
 8008358:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2b01      	cmp	r3, #1
 800835e:	d804      	bhi.n	800836a <f_read+0xf2>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2202      	movs	r2, #2
 8008364:	755a      	strb	r2, [r3, #21]
 8008366:	2302      	movs	r3, #2
 8008368:	e0e1      	b.n	800852e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008370:	d104      	bne.n	800837c <f_read+0x104>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	755a      	strb	r2, [r3, #21]
 8008378:	2301      	movs	r3, #1
 800837a:	e0d8      	b.n	800852e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008380:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f7fe faf4 	bl	8006978 <clust2sect>
 8008390:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <f_read+0x12a>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2202      	movs	r2, #2
 800839c:	755a      	strb	r2, [r3, #21]
 800839e:	2302      	movs	r3, #2
 80083a0:	e0c5      	b.n	800852e <f_read+0x2b6>
			sect += csect;
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d041      	beq.n	8008442 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	4413      	add	r3, r2
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	8952      	ldrh	r2, [r2, #10]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d905      	bls.n	80083d8 <f_read+0x160>
					cc = fs->csize - csect;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	895b      	ldrh	r3, [r3, #10]
 80083d0:	461a      	mov	r2, r3
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	7858      	ldrb	r0, [r3, #1]
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e2:	f7fd ff1d 	bl	8006220 <disk_read>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <f_read+0x17e>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	755a      	strb	r2, [r3, #21]
 80083f2:	2301      	movs	r3, #1
 80083f4:	e09b      	b.n	800852e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7d1b      	ldrb	r3, [r3, #20]
 80083fa:	b25b      	sxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da18      	bge.n	8008432 <f_read+0x1ba>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a1a      	ldr	r2, [r3, #32]
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800840a:	429a      	cmp	r2, r3
 800840c:	d911      	bls.n	8008432 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1a      	ldr	r2, [r3, #32]
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	8992      	ldrh	r2, [r2, #12]
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008420:	18d0      	adds	r0, r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	899b      	ldrh	r3, [r3, #12]
 800842c:	461a      	mov	r2, r3
 800842e:	f7fd ffd7 	bl	80063e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	899b      	ldrh	r3, [r3, #12]
 8008436:	461a      	mov	r2, r3
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008440:	e05c      	b.n	80084fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	429a      	cmp	r2, r3
 800844a:	d02e      	beq.n	80084aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	7d1b      	ldrb	r3, [r3, #20]
 8008450:	b25b      	sxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	da18      	bge.n	8008488 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	7858      	ldrb	r0, [r3, #1]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a1a      	ldr	r2, [r3, #32]
 8008464:	2301      	movs	r3, #1
 8008466:	f7fd fefb 	bl	8006260 <disk_write>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <f_read+0x202>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	755a      	strb	r2, [r3, #21]
 8008476:	2301      	movs	r3, #1
 8008478:	e059      	b.n	800852e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	7d1b      	ldrb	r3, [r3, #20]
 800847e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	7858      	ldrb	r0, [r3, #1]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008492:	2301      	movs	r3, #1
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	f7fd fec3 	bl	8006220 <disk_read>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <f_read+0x232>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	755a      	strb	r2, [r3, #21]
 80084a6:	2301      	movs	r3, #1
 80084a8:	e041      	b.n	800852e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	899b      	ldrh	r3, [r3, #12]
 80084b4:	4618      	mov	r0, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	8992      	ldrh	r2, [r2, #12]
 80084be:	fbb3 f1f2 	udiv	r1, r3, r2
 80084c2:	fb02 f201 	mul.w	r2, r2, r1
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	1ac3      	subs	r3, r0, r3
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80084cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d901      	bls.n	80084d8 <f_read+0x260>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	8992      	ldrh	r2, [r2, #12]
 80084e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80084ea:	fb02 f200 	mul.w	r2, r2, r0
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	440b      	add	r3, r1
 80084f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f4:	4619      	mov	r1, r3
 80084f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f8:	f7fd ff72 	bl	80063e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	4413      	add	r3, r2
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	441a      	add	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	619a      	str	r2, [r3, #24]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	441a      	add	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f47f aee1 	bne.w	80082ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3738      	adds	r7, #56	; 0x38
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b08c      	sub	sp, #48	; 0x30
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f107 0210 	add.w	r2, r7, #16
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fc46 	bl	8007de8 <validate>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <f_write+0x44>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	7d5b      	ldrb	r3, [r3, #21]
 800856e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <f_write+0x4a>
 800857a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800857e:	e16a      	b.n	8008856 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7d1b      	ldrb	r3, [r3, #20]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <f_write+0x5a>
 800858c:	2307      	movs	r3, #7
 800858e:	e162      	b.n	8008856 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	699a      	ldr	r2, [r3, #24]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	441a      	add	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	429a      	cmp	r2, r3
 800859e:	f080 814c 	bcs.w	800883a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	43db      	mvns	r3, r3
 80085a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80085aa:	e146      	b.n	800883a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	8992      	ldrh	r2, [r2, #12]
 80085b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80085b8:	fb02 f201 	mul.w	r2, r2, r1
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f040 80f1 	bne.w	80087a6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	8992      	ldrh	r2, [r2, #12]
 80085cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	8952      	ldrh	r2, [r2, #10]
 80085d4:	3a01      	subs	r2, #1
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d143      	bne.n	8008668 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d11a      	bne.n	800862a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fc31 	bl	8006e60 <create_chain>
 80085fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8008600:	e013      	b.n	800862a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	4619      	mov	r1, r3
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7fe fcbd 	bl	8006f90 <clmt_clust>
 8008616:	62b8      	str	r0, [r7, #40]	; 0x28
 8008618:	e007      	b.n	800862a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fc1c 	bl	8006e60 <create_chain>
 8008628:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 8109 	beq.w	8008844 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2b01      	cmp	r3, #1
 8008636:	d104      	bne.n	8008642 <f_write+0x10c>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2202      	movs	r2, #2
 800863c:	755a      	strb	r2, [r3, #21]
 800863e:	2302      	movs	r3, #2
 8008640:	e109      	b.n	8008856 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008648:	d104      	bne.n	8008654 <f_write+0x11e>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	755a      	strb	r2, [r3, #21]
 8008650:	2301      	movs	r3, #1
 8008652:	e100      	b.n	8008856 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008658:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <f_write+0x132>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008666:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	7d1b      	ldrb	r3, [r3, #20]
 800866c:	b25b      	sxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	da18      	bge.n	80086a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	7858      	ldrb	r0, [r3, #1]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	2301      	movs	r3, #1
 8008682:	f7fd fded 	bl	8006260 <disk_write>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <f_write+0x160>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	755a      	strb	r2, [r3, #21]
 8008692:	2301      	movs	r3, #1
 8008694:	e0df      	b.n	8008856 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	7d1b      	ldrb	r3, [r3, #20]
 800869a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	4619      	mov	r1, r3
 80086ac:	4610      	mov	r0, r2
 80086ae:	f7fe f963 	bl	8006978 <clust2sect>
 80086b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <f_write+0x18e>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2202      	movs	r2, #2
 80086be:	755a      	strb	r2, [r3, #21]
 80086c0:	2302      	movs	r3, #2
 80086c2:	e0c8      	b.n	8008856 <f_write+0x320>
			sect += csect;
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	4413      	add	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	899b      	ldrh	r3, [r3, #12]
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d043      	beq.n	8008768 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	4413      	add	r3, r2
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	8952      	ldrh	r2, [r2, #10]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d905      	bls.n	80086fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	895b      	ldrh	r3, [r3, #10]
 80086f2:	461a      	mov	r2, r3
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	7858      	ldrb	r0, [r3, #1]
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	69f9      	ldr	r1, [r7, #28]
 8008704:	f7fd fdac 	bl	8006260 <disk_write>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <f_write+0x1e2>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	755a      	strb	r2, [r3, #21]
 8008714:	2301      	movs	r3, #1
 8008716:	e09e      	b.n	8008856 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a1a      	ldr	r2, [r3, #32]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	6a3a      	ldr	r2, [r7, #32]
 8008722:	429a      	cmp	r2, r3
 8008724:	d918      	bls.n	8008758 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1a      	ldr	r2, [r3, #32]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	8992      	ldrh	r2, [r2, #12]
 8008738:	fb02 f303 	mul.w	r3, r2, r3
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	18d1      	adds	r1, r2, r3
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	899b      	ldrh	r3, [r3, #12]
 8008744:	461a      	mov	r2, r3
 8008746:	f7fd fe4b 	bl	80063e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	7d1b      	ldrb	r3, [r3, #20]
 800874e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008752:	b2da      	uxtb	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	899b      	ldrh	r3, [r3, #12]
 800875c:	461a      	mov	r2, r3
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	fb02 f303 	mul.w	r3, r2, r3
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008766:	e04b      	b.n	8008800 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	429a      	cmp	r2, r3
 8008770:	d016      	beq.n	80087a0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800877a:	429a      	cmp	r2, r3
 800877c:	d210      	bcs.n	80087a0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	7858      	ldrb	r0, [r3, #1]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008788:	2301      	movs	r3, #1
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	f7fd fd48 	bl	8006220 <disk_read>
 8008790:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	755a      	strb	r2, [r3, #21]
 800879c:	2301      	movs	r3, #1
 800879e:	e05a      	b.n	8008856 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	899b      	ldrh	r3, [r3, #12]
 80087aa:	4618      	mov	r0, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	8992      	ldrh	r2, [r2, #12]
 80087b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b8:	fb02 f201 	mul.w	r2, r2, r1
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	1ac3      	subs	r3, r0, r3
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d901      	bls.n	80087ce <f_write+0x298>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	8992      	ldrh	r2, [r2, #12]
 80087dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80087e0:	fb02 f200 	mul.w	r2, r2, r0
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	440b      	add	r3, r1
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	69f9      	ldr	r1, [r7, #28]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd fdf7 	bl	80063e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7d1b      	ldrb	r3, [r3, #20]
 80087f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	4413      	add	r3, r2
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	441a      	add	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	619a      	str	r2, [r3, #24]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	429a      	cmp	r2, r3
 800881e:	bf38      	it	cc
 8008820:	461a      	movcc	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	60da      	str	r2, [r3, #12]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	441a      	add	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f47f aeb5 	bne.w	80085ac <f_write+0x76>
 8008842:	e000      	b.n	8008846 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008844:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	7d1b      	ldrb	r3, [r3, #20]
 800884a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884e:	b2da      	uxtb	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3730      	adds	r7, #48	; 0x30
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f107 0208 	add.w	r2, r7, #8
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff faba 	bl	8007de8 <validate>
 8008874:	4603      	mov	r3, r0
 8008876:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008878:	7dfb      	ldrb	r3, [r7, #23]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d168      	bne.n	8008950 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7d1b      	ldrb	r3, [r3, #20]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d062      	beq.n	8008950 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7d1b      	ldrb	r3, [r3, #20]
 800888e:	b25b      	sxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	da15      	bge.n	80088c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	7858      	ldrb	r0, [r3, #1]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1a      	ldr	r2, [r3, #32]
 80088a2:	2301      	movs	r3, #1
 80088a4:	f7fd fcdc 	bl	8006260 <disk_write>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <f_sync+0x54>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e04f      	b.n	8008952 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7d1b      	ldrb	r3, [r3, #20]
 80088b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088c0:	f7fd fa3a 	bl	8005d38 <get_fattime>
 80088c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fd ffb4 	bl	800683c <move_window>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d138      	bne.n	8008950 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	330b      	adds	r3, #11
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	330b      	adds	r3, #11
 80088ee:	f042 0220 	orr.w	r2, r2, #32
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	461a      	mov	r2, r3
 8008900:	68f9      	ldr	r1, [r7, #12]
 8008902:	f7fe fd42 	bl	800738a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f103 021c 	add.w	r2, r3, #28
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fd fd38 	bl	8006388 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3316      	adds	r3, #22
 800891c:	6939      	ldr	r1, [r7, #16]
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fd32 	bl	8006388 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3312      	adds	r3, #18
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd fd11 	bl	8006352 <st_word>
					fs->wflag = 1;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2201      	movs	r2, #1
 8008934:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4618      	mov	r0, r3
 800893a:	f7fd ffad 	bl	8006898 <sync_fs>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7d1b      	ldrb	r3, [r3, #20]
 8008946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894a:	b2da      	uxtb	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008950:	7dfb      	ldrb	r3, [r7, #23]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ff7b 	bl	800885e <f_sync>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d118      	bne.n	80089a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f107 0208 	add.w	r2, r7, #8
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fa34 	bl	8007de8 <validate>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10c      	bne.n	80089a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	4618      	mov	r0, r3
 8008990:	f7fd feb0 	bl	80066f4 <dec_lock>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b090      	sub	sp, #64	; 0x40
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f107 0208 	add.w	r2, r7, #8
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fa11 	bl	8007de8 <validate>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80089cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d103      	bne.n	80089dc <f_lseek+0x2e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7d5b      	ldrb	r3, [r3, #21]
 80089d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80089dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <f_lseek+0x3c>
 80089e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089e8:	e201      	b.n	8008dee <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 80d9 	beq.w	8008ba6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089fa:	d15a      	bne.n	8008ab2 <f_lseek+0x104>
			tbl = fp->cltbl;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1d1a      	adds	r2, r3, #4
 8008a06:	627a      	str	r2, [r7, #36]	; 0x24
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d03a      	beq.n	8008a92 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	2300      	movs	r3, #0
 8008a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	3302      	adds	r3, #2
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	3301      	adds	r3, #1
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fd ffbc 	bl	80069b6 <get_fat>
 8008a3e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d804      	bhi.n	8008a50 <f_lseek+0xa2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	755a      	strb	r2, [r3, #21]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e1ce      	b.n	8008dee <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a56:	d104      	bne.n	8008a62 <f_lseek+0xb4>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	755a      	strb	r2, [r3, #21]
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e1c5      	b.n	8008dee <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d0de      	beq.n	8008a2a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d809      	bhi.n	8008a88 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	1d1a      	adds	r2, r3, #4
 8008a78:	627a      	str	r2, [r7, #36]	; 0x24
 8008a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	627a      	str	r2, [r7, #36]	; 0x24
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d3c4      	bcc.n	8008a1c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d803      	bhi.n	8008aaa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e19f      	b.n	8008dea <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008aaa:	2311      	movs	r3, #17
 8008aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ab0:	e19b      	b.n	8008dea <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d902      	bls.n	8008ac2 <f_lseek+0x114>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 818d 	beq.w	8008dea <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7fe fa5a 	bl	8006f90 <clmt_clust>
 8008adc:	4602      	mov	r2, r0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f7fd ff44 	bl	8006978 <clust2sect>
 8008af0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d104      	bne.n	8008b02 <f_lseek+0x154>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	755a      	strb	r2, [r3, #21]
 8008afe:	2302      	movs	r3, #2
 8008b00:	e175      	b.n	8008dee <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	8992      	ldrh	r2, [r2, #12]
 8008b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	8952      	ldrh	r2, [r2, #10]
 8008b12:	3a01      	subs	r2, #1
 8008b14:	4013      	ands	r3, r2
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4413      	add	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	8992      	ldrh	r2, [r2, #12]
 8008b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b28:	fb02 f201 	mul.w	r2, r2, r1
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 815b 	beq.w	8008dea <f_lseek+0x43c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	f000 8155 	beq.w	8008dea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7d1b      	ldrb	r3, [r3, #20]
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da18      	bge.n	8008b7c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	7858      	ldrb	r0, [r3, #1]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1a      	ldr	r2, [r3, #32]
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f7fd fb81 	bl	8006260 <disk_write>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <f_lseek+0x1c0>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	755a      	strb	r2, [r3, #21]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e13f      	b.n	8008dee <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7d1b      	ldrb	r3, [r3, #20]
 8008b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b86:	2301      	movs	r3, #1
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	f7fd fb49 	bl	8006220 <disk_read>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <f_lseek+0x1f0>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	755a      	strb	r2, [r3, #21]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e127      	b.n	8008dee <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	621a      	str	r2, [r3, #32]
 8008ba4:	e121      	b.n	8008dea <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d908      	bls.n	8008bc2 <f_lseek+0x214>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7d1b      	ldrb	r3, [r3, #20]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80b5 	beq.w	8008d44 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	895b      	ldrh	r3, [r3, #10]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	899b      	ldrh	r3, [r3, #12]
 8008be4:	fb03 f302 	mul.w	r3, r3, r2
 8008be8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01b      	beq.n	8008c28 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	1e5a      	subs	r2, r3, #1
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	1e59      	subs	r1, r3, #1
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d30f      	bcc.n	8008c28 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	1e5a      	subs	r2, r3, #1
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	425b      	negs	r3, r3
 8008c10:	401a      	ands	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c26:	e022      	b.n	8008c6e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d119      	bne.n	8008c68 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe f911 	bl	8006e60 <create_chain>
 8008c3e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d104      	bne.n	8008c50 <f_lseek+0x2a2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	755a      	strb	r2, [r3, #21]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e0ce      	b.n	8008dee <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c56:	d104      	bne.n	8008c62 <f_lseek+0x2b4>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	755a      	strb	r2, [r3, #21]
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e0c5      	b.n	8008dee <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c66:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d067      	beq.n	8008d44 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008c74:	e03a      	b.n	8008cec <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe f8e0 	bl	8006e60 <create_chain>
 8008ca0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d108      	bne.n	8008cba <f_lseek+0x30c>
							ofs = 0; break;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	e022      	b.n	8008cf4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd fe7f 	bl	80069b6 <get_fat>
 8008cb8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc0:	d104      	bne.n	8008ccc <f_lseek+0x31e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	755a      	strb	r2, [r3, #21]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e090      	b.n	8008dee <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d904      	bls.n	8008cdc <f_lseek+0x32e>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d304      	bcc.n	8008ce6 <f_lseek+0x338>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	755a      	strb	r2, [r3, #21]
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e083      	b.n	8008dee <f_lseek+0x440>
					fp->clust = clst;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cea:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d8c0      	bhi.n	8008c76 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699a      	ldr	r2, [r3, #24]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	441a      	add	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	899b      	ldrh	r3, [r3, #12]
 8008d04:	461a      	mov	r2, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d0c:	fb02 f201 	mul.w	r2, r2, r1
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d016      	beq.n	8008d44 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd fe2c 	bl	8006978 <clust2sect>
 8008d20:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <f_lseek+0x384>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	755a      	strb	r2, [r3, #21]
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e05d      	b.n	8008dee <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	899b      	ldrh	r3, [r3, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d40:	4413      	add	r3, r2
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d90a      	bls.n	8008d66 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7d1b      	ldrb	r3, [r3, #20]
 8008d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	8992      	ldrh	r2, [r2, #12]
 8008d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d72:	fb02 f201 	mul.w	r2, r2, r1
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d036      	beq.n	8008dea <f_lseek+0x43c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d031      	beq.n	8008dea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7d1b      	ldrb	r3, [r3, #20]
 8008d8a:	b25b      	sxtb	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da18      	bge.n	8008dc2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7858      	ldrb	r0, [r3, #1]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f7fd fa5e 	bl	8006260 <disk_write>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <f_lseek+0x406>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	755a      	strb	r2, [r3, #21]
 8008db0:	2301      	movs	r3, #1
 8008db2:	e01c      	b.n	8008dee <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7d1b      	ldrb	r3, [r3, #20]
 8008db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	7858      	ldrb	r0, [r3, #1]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dcc:	2301      	movs	r3, #1
 8008dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd0:	f7fd fa26 	bl	8006220 <disk_read>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <f_lseek+0x436>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	755a      	strb	r2, [r3, #21]
 8008de0:	2301      	movs	r3, #1
 8008de2:	e004      	b.n	8008dee <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008dea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3740      	adds	r7, #64	; 0x40
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b090      	sub	sp, #64	; 0x40
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008e00:	f107 010c 	add.w	r1, r7, #12
 8008e04:	1d3b      	adds	r3, r7, #4
 8008e06:	2200      	movs	r2, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe fd69 	bl	80078e0 <find_volume>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008e14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11f      	bne.n	8008e5c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fc4b 	bl	80076c0 <follow_path>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008e30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d111      	bne.n	8008e5c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008e38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da03      	bge.n	8008e4a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008e42:	2306      	movs	r3, #6
 8008e44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008e48:	e008      	b.n	8008e5c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <f_stat+0x66>
 8008e50:	f107 030c 	add.w	r3, r7, #12
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fb3e 	bl	80074d8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008e5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3740      	adds	r7, #64	; 0x40
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b092      	sub	sp, #72	; 0x48
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008e74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e78:	f107 030c 	add.w	r3, r7, #12
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fd2e 	bl	80078e0 <find_volume>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008e8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 8099 	bne.w	8008fc6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	3b02      	subs	r3, #2
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d804      	bhi.n	8008eb2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	695a      	ldr	r2, [r3, #20]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e089      	b.n	8008fc6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d128      	bne.n	8008f10 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008ec6:	f107 0314 	add.w	r3, r7, #20
 8008eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fd fd72 	bl	80069b6 <get_fat>
 8008ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eda:	d103      	bne.n	8008ee4 <f_getfree+0x7c>
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ee2:	e063      	b.n	8008fac <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d103      	bne.n	8008ef2 <f_getfree+0x8a>
 8008eea:	2302      	movs	r3, #2
 8008eec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ef0:	e05c      	b.n	8008fac <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <f_getfree+0x96>
 8008ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efa:	3301      	adds	r3, #1
 8008efc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f00:	3301      	adds	r3, #1
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d3db      	bcc.n	8008ec6 <f_getfree+0x5e>
 8008f0e:	e04d      	b.n	8008fac <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f20:	2300      	movs	r3, #0
 8008f22:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d113      	bne.n	8008f52 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f32:	4619      	mov	r1, r3
 8008f34:	f7fd fc82 	bl	800683c <move_window>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d131      	bne.n	8008faa <f_getfree+0x142>
							p = fs->win;
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	3334      	adds	r3, #52	; 0x34
 8008f4a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	899b      	ldrh	r3, [r3, #12]
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d10f      	bne.n	8008f7a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f5c:	f7fd f9be 	bl	80062dc <ld_word>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <f_getfree+0x104>
 8008f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f68:	3301      	adds	r3, #1
 8008f6a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	3302      	adds	r3, #2
 8008f70:	633b      	str	r3, [r7, #48]	; 0x30
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	3b02      	subs	r3, #2
 8008f76:	637b      	str	r3, [r7, #52]	; 0x34
 8008f78:	e010      	b.n	8008f9c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7c:	f7fd f9c6 	bl	800630c <ld_dword>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <f_getfree+0x128>
 8008f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	3304      	adds	r3, #4
 8008f94:	633b      	str	r3, [r7, #48]	; 0x30
 8008f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f98:	3b04      	subs	r3, #4
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1bd      	bne.n	8008f24 <f_getfree+0xbc>
 8008fa8:	e000      	b.n	8008fac <f_getfree+0x144>
							if (res != FR_OK) break;
 8008faa:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fb0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fb6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	791a      	ldrb	r2, [r3, #4]
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008fc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3748      	adds	r7, #72	; 0x48
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b096      	sub	sp, #88	; 0x58
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008fda:	f107 0108 	add.w	r1, r7, #8
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fc7c 	bl	80078e0 <find_volume>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 80f2 	bne.w	80091e0 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fb5b 	bl	80076c0 <follow_path>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <f_mkdir+0x4c>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800901e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009022:	2b04      	cmp	r3, #4
 8009024:	f040 80dc 	bne.w	80091e0 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fd ff16 	bl	8006e60 <create_chain>
 8009034:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	895b      	ldrh	r3, [r3, #10]
 800903a:	461a      	mov	r2, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	899b      	ldrh	r3, [r3, #12]
 8009040:	fb03 f302 	mul.w	r3, r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800904c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <f_mkdir+0x86>
 8009052:	2307      	movs	r3, #7
 8009054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8009058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905a:	2b01      	cmp	r3, #1
 800905c:	d102      	bne.n	8009064 <f_mkdir+0x92>
 800905e:	2302      	movs	r3, #2
 8009060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906a:	d102      	bne.n	8009072 <f_mkdir+0xa0>
 800906c:	2301      	movs	r3, #1
 800906e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009072:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <f_mkdir+0xb6>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4618      	mov	r0, r3
 800907e:	f7fd fb99 	bl	80067b4 <sync_window>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8009088:	f7fc fe56 	bl	8005d38 <get_fattime>
 800908c:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800908e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009092:	2b00      	cmp	r3, #0
 8009094:	d16c      	bne.n	8009170 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800909a:	4618      	mov	r0, r3
 800909c:	f7fd fc6c 	bl	8006978 <clust2sect>
 80090a0:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3334      	adds	r3, #52	; 0x34
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	899b      	ldrh	r3, [r3, #12]
 80090ac:	461a      	mov	r2, r3
 80090ae:	2100      	movs	r1, #0
 80090b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090b2:	f7fd f9b6 	bl	8006422 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80090b6:	220b      	movs	r2, #11
 80090b8:	2120      	movs	r1, #32
 80090ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090bc:	f7fd f9b1 	bl	8006422 <mem_set>
					dir[DIR_Name] = '.';
 80090c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c2:	222e      	movs	r2, #46	; 0x2e
 80090c4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80090c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c8:	330b      	adds	r3, #11
 80090ca:	2210      	movs	r2, #16
 80090cc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	3316      	adds	r3, #22
 80090d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fd f957 	bl	8006388 <st_dword>
					st_clust(fs, dir, dcl);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe f952 	bl	800738a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	3320      	adds	r3, #32
 80090ea:	2220      	movs	r2, #32
 80090ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd f976 	bl	80063e0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80090f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f6:	3321      	adds	r3, #33	; 0x21
 80090f8:	222e      	movs	r2, #46	; 0x2e
 80090fa:	701a      	strb	r2, [r3, #0]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d106      	bne.n	8009116 <f_mkdir+0x144>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910e:	429a      	cmp	r2, r3
 8009110:	d101      	bne.n	8009116 <f_mkdir+0x144>
 8009112:	2300      	movs	r3, #0
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8009116:	68b8      	ldr	r0, [r7, #8]
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	3320      	adds	r3, #32
 800911c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911e:	4619      	mov	r1, r3
 8009120:	f7fe f933 	bl	800738a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	895b      	ldrh	r3, [r3, #10]
 8009128:	653b      	str	r3, [r7, #80]	; 0x50
 800912a:	e01c      	b.n	8009166 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800912c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2201      	movs	r2, #1
 800913a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4618      	mov	r0, r3
 8009140:	f7fd fb38 	bl	80067b4 <sync_window>
 8009144:	4603      	mov	r3, r0
 8009146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800914a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	899b      	ldrh	r3, [r3, #12]
 8009156:	461a      	mov	r2, r3
 8009158:	2100      	movs	r1, #0
 800915a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800915c:	f7fd f961 	bl	8006422 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009162:	3b01      	subs	r3, #1
 8009164:	653b      	str	r3, [r7, #80]	; 0x50
 8009166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1df      	bne.n	800912c <f_mkdir+0x15a>
 800916c:	e000      	b.n	8009170 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800916e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009174:	2b00      	cmp	r3, #0
 8009176:	d107      	bne.n	8009188 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe f979 	bl	8007474 <dir_register>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8009188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800918c:	2b00      	cmp	r3, #0
 800918e:	d120      	bne.n	80091d2 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	3316      	adds	r3, #22
 8009198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800919a:	4618      	mov	r0, r3
 800919c:	f7fd f8f4 	bl	8006388 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe f8ef 	bl	800738a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	330b      	adds	r3, #11
 80091b0:	2210      	movs	r2, #16
 80091b2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2201      	movs	r2, #1
 80091b8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80091ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10e      	bne.n	80091e0 <f_mkdir+0x20e>
					res = sync_fs(fs);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fd fb67 	bl	8006898 <sync_fs>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80091d0:	e006      	b.n	80091e0 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80091d2:	f107 030c 	add.w	r3, r7, #12
 80091d6:	2200      	movs	r2, #0
 80091d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fd fddb 	bl	8006d96 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80091e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3758      	adds	r7, #88	; 0x58
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b09d      	sub	sp, #116	; 0x74
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	460b      	mov	r3, r1
 80091fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80091fc:	2301      	movs	r3, #1
 80091fe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8009200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009204:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009206:	f107 030c 	add.w	r3, r7, #12
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe face 	bl	80077ac <get_ldnumber>
 8009210:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009214:	2b00      	cmp	r3, #0
 8009216:	da02      	bge.n	800921e <f_mkfs+0x32>
 8009218:	230b      	movs	r3, #11
 800921a:	f000 bc31 	b.w	8009a80 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800921e:	4aa5      	ldr	r2, [pc, #660]	; (80094b4 <f_mkfs+0x2c8>)
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <f_mkfs+0x4a>
 800922a:	4aa2      	ldr	r2, [pc, #648]	; (80094b4 <f_mkfs+0x2c8>)
 800922c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009238:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800923c:	2300      	movs	r3, #0
 800923e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8009242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009246:	4618      	mov	r0, r3
 8009248:	f7fc ffc4 	bl	80061d4 <disk_initialize>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009252:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <f_mkfs+0x78>
 800925e:	2303      	movs	r3, #3
 8009260:	f000 bc0e 	b.w	8009a80 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009264:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <f_mkfs+0x8a>
 8009270:	230a      	movs	r3, #10
 8009272:	f000 bc05 	b.w	8009a80 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8009276:	f107 0214 	add.w	r2, r7, #20
 800927a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800927e:	2103      	movs	r1, #3
 8009280:	4618      	mov	r0, r3
 8009282:	f7fd f80d 	bl	80062a0 <disk_ioctl>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <f_mkfs+0xba>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <f_mkfs+0xba>
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009298:	d805      	bhi.n	80092a6 <f_mkfs+0xba>
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	1e5a      	subs	r2, r3, #1
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <f_mkfs+0xbe>
 80092a6:	2301      	movs	r3, #1
 80092a8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 80092aa:	f107 021a 	add.w	r2, r7, #26
 80092ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092b2:	2102      	movs	r1, #2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fc fff3 	bl	80062a0 <disk_ioctl>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <f_mkfs+0xd8>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e3dd      	b.n	8009a80 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 80092c4:	8b7b      	ldrh	r3, [r7, #26]
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ca:	d80a      	bhi.n	80092e2 <f_mkfs+0xf6>
 80092cc:	8b7b      	ldrh	r3, [r7, #26]
 80092ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092d2:	d306      	bcc.n	80092e2 <f_mkfs+0xf6>
 80092d4:	8b7b      	ldrh	r3, [r7, #26]
 80092d6:	461a      	mov	r2, r3
 80092d8:	8b7b      	ldrh	r3, [r7, #26]
 80092da:	3b01      	subs	r3, #1
 80092dc:	4013      	ands	r3, r2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <f_mkfs+0xfa>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e3cc      	b.n	8009a80 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <f_mkfs+0x10a>
 80092ec:	8b7b      	ldrh	r3, [r7, #26]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d309      	bcc.n	800930a <f_mkfs+0x11e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092fc:	d805      	bhi.n	800930a <f_mkfs+0x11e>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	1e5a      	subs	r2, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <f_mkfs+0x122>
 800930a:	2313      	movs	r3, #19
 800930c:	e3b8      	b.n	8009a80 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800930e:	8b7b      	ldrh	r3, [r7, #26]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	fbb3 f3f2 	udiv	r3, r3, r2
 8009318:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800931e:	8b7b      	ldrh	r3, [r7, #26]
 8009320:	461a      	mov	r2, r3
 8009322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009326:	fbb3 f3f2 	udiv	r3, r3, r2
 800932a:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800932c:	8b7b      	ldrh	r3, [r7, #26]
 800932e:	461a      	mov	r2, r3
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	fb02 f303 	mul.w	r3, r2, r3
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <f_mkfs+0x156>
 800933e:	230e      	movs	r3, #14
 8009340:	e39e      	b.n	8009a80 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8009342:	f107 0210 	add.w	r2, r7, #16
 8009346:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800934a:	2101      	movs	r1, #1
 800934c:	4618      	mov	r0, r3
 800934e:	f7fc ffa7 	bl	80062a0 <disk_ioctl>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <f_mkfs+0x170>
 8009358:	2301      	movs	r3, #1
 800935a:	e391      	b.n	8009a80 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <f_mkfs+0x17e>
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <f_mkfs+0x180>
 800936a:	233f      	movs	r3, #63	; 0x3f
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009372:	429a      	cmp	r2, r3
 8009374:	d901      	bls.n	800937a <f_mkfs+0x18e>
 8009376:	230e      	movs	r3, #14
 8009378:	e382      	b.n	8009a80 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b7f      	cmp	r3, #127	; 0x7f
 8009386:	d801      	bhi.n	800938c <f_mkfs+0x1a0>
 8009388:	230e      	movs	r3, #14
 800938a:	e379      	b.n	8009a80 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d901      	bls.n	8009396 <f_mkfs+0x1aa>
 8009392:	2313      	movs	r3, #19
 8009394:	e374      	b.n	8009a80 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00d      	beq.n	80093bc <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d004      	beq.n	80093b4 <f_mkfs+0x1c8>
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d103      	bne.n	80093bc <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 80093b4:	2303      	movs	r3, #3
 80093b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80093ba:	e009      	b.n	80093d0 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <f_mkfs+0x1de>
 80093c6:	2313      	movs	r3, #19
 80093c8:	e35a      	b.n	8009a80 <f_mkfs+0x894>
		fmt = FS_FAT16;
 80093ca:	2302      	movs	r3, #2
 80093cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80093d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d13c      	bne.n	8009456 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 80093dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d11b      	bne.n	800941a <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	0c5b      	lsrs	r3, r3, #17
 80093e6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80093e8:	2300      	movs	r3, #0
 80093ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ec:	2301      	movs	r3, #1
 80093ee:	653b      	str	r3, [r7, #80]	; 0x50
 80093f0:	e005      	b.n	80093fe <f_mkfs+0x212>
 80093f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f4:	3301      	adds	r3, #1
 80093f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80093f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	653b      	str	r3, [r7, #80]	; 0x50
 80093fe:	4a2e      	ldr	r2, [pc, #184]	; (80094b8 <f_mkfs+0x2cc>)
 8009400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <f_mkfs+0x22e>
 800940a:	4a2b      	ldr	r2, [pc, #172]	; (80094b8 <f_mkfs+0x2cc>)
 800940c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800940e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009412:	461a      	mov	r2, r3
 8009414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009416:	4293      	cmp	r3, r2
 8009418:	d2eb      	bcs.n	80093f2 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	3302      	adds	r3, #2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	8b7a      	ldrh	r2, [r7, #26]
 800942c:	4413      	add	r3, r2
 800942e:	3b01      	subs	r3, #1
 8009430:	8b7a      	ldrh	r2, [r7, #26]
 8009432:	fbb3 f3f2 	udiv	r3, r3, r2
 8009436:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009438:	2320      	movs	r3, #32
 800943a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800943c:	2300      	movs	r3, #0
 800943e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009446:	4293      	cmp	r3, r2
 8009448:	d903      	bls.n	8009452 <f_mkfs+0x266>
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <f_mkfs+0x2d0>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d954      	bls.n	80094fc <f_mkfs+0x310>
 8009452:	230e      	movs	r3, #14
 8009454:	e314      	b.n	8009a80 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009458:	2b00      	cmp	r3, #0
 800945a:	d11b      	bne.n	8009494 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	0b1b      	lsrs	r3, r3, #12
 8009460:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009462:	2300      	movs	r3, #0
 8009464:	64bb      	str	r3, [r7, #72]	; 0x48
 8009466:	2301      	movs	r3, #1
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
 800946a:	e005      	b.n	8009478 <f_mkfs+0x28c>
 800946c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946e:	3301      	adds	r3, #1
 8009470:	64bb      	str	r3, [r7, #72]	; 0x48
 8009472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	653b      	str	r3, [r7, #80]	; 0x50
 8009478:	4a11      	ldr	r2, [pc, #68]	; (80094c0 <f_mkfs+0x2d4>)
 800947a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800947c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d007      	beq.n	8009494 <f_mkfs+0x2a8>
 8009484:	4a0e      	ldr	r2, [pc, #56]	; (80094c0 <f_mkfs+0x2d4>)
 8009486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948c:	461a      	mov	r2, r3
 800948e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009490:	4293      	cmp	r3, r2
 8009492:	d2eb      	bcs.n	800946c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009498:	fbb2 f3f3 	udiv	r3, r2, r3
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d90d      	bls.n	80094c4 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	3302      	adds	r3, #2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094b0:	e013      	b.n	80094da <f_mkfs+0x2ee>
 80094b2:	bf00      	nop
 80094b4:	200010d0 	.word	0x200010d0
 80094b8:	0800b010 	.word	0x0800b010
 80094bc:	0ffffff5 	.word	0x0ffffff5
 80094c0:	0800b020 	.word	0x0800b020
				} else {
					fmt = FS_FAT12;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80094ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094cc:	4613      	mov	r3, r2
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	4413      	add	r3, r2
 80094d2:	3301      	adds	r3, #1
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	3303      	adds	r3, #3
 80094d8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80094da:	8b7b      	ldrh	r3, [r7, #26]
 80094dc:	461a      	mov	r2, r3
 80094de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e0:	4413      	add	r3, r2
 80094e2:	3b01      	subs	r3, #1
 80094e4:	8b7a      	ldrh	r2, [r7, #26]
 80094e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ea:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80094ec:	2301      	movs	r3, #1
 80094ee:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80094f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f2:	015b      	lsls	r3, r3, #5
 80094f4:	8b7a      	ldrh	r2, [r7, #26]
 80094f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fa:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80094fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009500:	4413      	add	r3, r2
 8009502:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8009504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009508:	fb02 f203 	mul.w	r2, r2, r3
 800950c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800950e:	4413      	add	r3, r2
 8009510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009512:	4413      	add	r3, r2
 8009514:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	4413      	add	r3, r2
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	425b      	negs	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800952a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800952e:	2b03      	cmp	r3, #3
 8009530:	d108      	bne.n	8009544 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8009532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009536:	4413      	add	r3, r2
 8009538:	657b      	str	r3, [r7, #84]	; 0x54
 800953a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800953c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953e:	4413      	add	r3, r2
 8009540:	65bb      	str	r3, [r7, #88]	; 0x58
 8009542:	e006      	b.n	8009552 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8009544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800954e:	4413      	add	r3, r2
 8009550:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009554:	011a      	lsls	r2, r3, #4
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	441a      	add	r2, r3
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	1ad2      	subs	r2, r2, r3
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	429a      	cmp	r2, r3
 8009562:	d901      	bls.n	8009568 <f_mkfs+0x37c>
 8009564:	230e      	movs	r3, #14
 8009566:	e28b      	b.n	8009a80 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800956c:	1ad2      	subs	r2, r2, r3
 800956e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009570:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009572:	fb01 f303 	mul.w	r3, r1, r3
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800957e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8009584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009588:	2b03      	cmp	r3, #3
 800958a:	d10f      	bne.n	80095ac <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009592:	4293      	cmp	r3, r2
 8009594:	d80a      	bhi.n	80095ac <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <f_mkfs+0x3bc>
 800959c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	607b      	str	r3, [r7, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d144      	bne.n	8009632 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 80095a8:	230e      	movs	r3, #14
 80095aa:	e269      	b.n	8009a80 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 80095ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d133      	bne.n	800961c <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d91e      	bls.n	80095fc <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d107      	bne.n	80095d4 <f_mkfs+0x3e8>
 80095c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	2b40      	cmp	r3, #64	; 0x40
 80095ca:	d803      	bhi.n	80095d4 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80095cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	e033      	b.n	800963c <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80095de:	2303      	movs	r3, #3
 80095e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80095e4:	e02a      	b.n	800963c <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d105      	bne.n	80095f8 <f_mkfs+0x40c>
 80095ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	607b      	str	r3, [r7, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b80      	cmp	r3, #128	; 0x80
 80095f6:	d91e      	bls.n	8009636 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 80095f8:	230e      	movs	r3, #14
 80095fa:	e241      	b.n	8009a80 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009602:	4293      	cmp	r3, r2
 8009604:	d80a      	bhi.n	800961c <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <f_mkfs+0x42c>
 800960c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b80      	cmp	r3, #128	; 0x80
 8009616:	d910      	bls.n	800963a <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8009618:	230e      	movs	r3, #14
 800961a:	e231      	b.n	8009a80 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800961c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009620:	2b01      	cmp	r3, #1
 8009622:	d10c      	bne.n	800963e <f_mkfs+0x452>
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	f640 72f5 	movw	r2, #4085	; 0xff5
 800962a:	4293      	cmp	r3, r2
 800962c:	d907      	bls.n	800963e <f_mkfs+0x452>
 800962e:	230e      	movs	r3, #14
 8009630:	e226      	b.n	8009a80 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009632:	bf00      	nop
 8009634:	e6cc      	b.n	80093d0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009636:	bf00      	nop
 8009638:	e6ca      	b.n	80093d0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800963a:	bf00      	nop
			pau = au;
 800963c:	e6c8      	b.n	80093d0 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800963e:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009640:	8b7b      	ldrh	r3, [r7, #26]
 8009642:	461a      	mov	r2, r3
 8009644:	2100      	movs	r1, #0
 8009646:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009648:	f7fc feeb 	bl	8006422 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800964c:	220b      	movs	r2, #11
 800964e:	49bd      	ldr	r1, [pc, #756]	; (8009944 <f_mkfs+0x758>)
 8009650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009652:	f7fc fec5 	bl	80063e0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009658:	330b      	adds	r3, #11
 800965a:	8b7a      	ldrh	r2, [r7, #26]
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f7fc fe77 	bl	8006352 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	330d      	adds	r3, #13
 8009668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	330e      	adds	r3, #14
 8009672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009674:	b292      	uxth	r2, r2
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7fc fe6a 	bl	8006352 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	3310      	adds	r3, #16
 8009682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	f103 0211 	add.w	r2, r3, #17
 800968e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009692:	2b03      	cmp	r3, #3
 8009694:	d002      	beq.n	800969c <f_mkfs+0x4b0>
 8009696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009698:	b29b      	uxth	r3, r3
 800969a:	e000      	b.n	800969e <f_mkfs+0x4b2>
 800969c:	2300      	movs	r3, #0
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fc fe56 	bl	8006352 <st_word>
		if (sz_vol < 0x10000) {
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ac:	d208      	bcs.n	80096c0 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	3313      	adds	r3, #19
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	b292      	uxth	r2, r2
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fc fe4a 	bl	8006352 <st_word>
 80096be:	e006      	b.n	80096ce <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	3320      	adds	r3, #32
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fc fe5d 	bl	8006388 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	3315      	adds	r3, #21
 80096d2:	22f8      	movs	r2, #248	; 0xf8
 80096d4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80096d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d8:	3318      	adds	r3, #24
 80096da:	213f      	movs	r1, #63	; 0x3f
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fc fe38 	bl	8006352 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80096e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e4:	331a      	adds	r3, #26
 80096e6:	21ff      	movs	r1, #255	; 0xff
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fc fe32 	bl	8006352 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	331c      	adds	r3, #28
 80096f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fc fe47 	bl	8006388 <st_dword>
		if (fmt == FS_FAT32) {
 80096fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d131      	bne.n	8009766 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8009708:	f7fc fb16 	bl	8005d38 <get_fattime>
 800970c:	4603      	mov	r3, r0
 800970e:	4619      	mov	r1, r3
 8009710:	4620      	mov	r0, r4
 8009712:	f7fc fe39 	bl	8006388 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	3324      	adds	r3, #36	; 0x24
 800971a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800971c:	4618      	mov	r0, r3
 800971e:	f7fc fe33 	bl	8006388 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	332c      	adds	r3, #44	; 0x2c
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f7fc fe2d 	bl	8006388 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	3330      	adds	r3, #48	; 0x30
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f7fc fe0c 	bl	8006352 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800973a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973c:	3332      	adds	r3, #50	; 0x32
 800973e:	2106      	movs	r1, #6
 8009740:	4618      	mov	r0, r3
 8009742:	f7fc fe06 	bl	8006352 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8009746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009748:	3340      	adds	r3, #64	; 0x40
 800974a:	2280      	movs	r2, #128	; 0x80
 800974c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	3342      	adds	r3, #66	; 0x42
 8009752:	2229      	movs	r2, #41	; 0x29
 8009754:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	3347      	adds	r3, #71	; 0x47
 800975a:	2213      	movs	r2, #19
 800975c:	497a      	ldr	r1, [pc, #488]	; (8009948 <f_mkfs+0x75c>)
 800975e:	4618      	mov	r0, r3
 8009760:	f7fc fe3e 	bl	80063e0 <mem_cpy>
 8009764:	e020      	b.n	80097a8 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800976c:	f7fc fae4 	bl	8005d38 <get_fattime>
 8009770:	4603      	mov	r3, r0
 8009772:	4619      	mov	r1, r3
 8009774:	4620      	mov	r0, r4
 8009776:	f7fc fe07 	bl	8006388 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	3316      	adds	r3, #22
 800977e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009780:	b292      	uxth	r2, r2
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f7fc fde4 	bl	8006352 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	2280      	movs	r2, #128	; 0x80
 8009790:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009794:	3326      	adds	r3, #38	; 0x26
 8009796:	2229      	movs	r2, #41	; 0x29
 8009798:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800979a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979c:	332b      	adds	r3, #43	; 0x2b
 800979e:	2213      	movs	r2, #19
 80097a0:	496a      	ldr	r1, [pc, #424]	; (800994c <f_mkfs+0x760>)
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fc fe1c 	bl	80063e0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fc fdcd 	bl	8006352 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80097b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80097bc:	2301      	movs	r3, #1
 80097be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097c2:	f7fc fd4d 	bl	8006260 <disk_write>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <f_mkfs+0x5e4>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e157      	b.n	8009a80 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80097d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d140      	bne.n	800985a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	1d9a      	adds	r2, r3, #6
 80097dc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80097e0:	2301      	movs	r3, #1
 80097e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097e4:	f7fc fd3c 	bl	8006260 <disk_write>
			mem_set(buf, 0, ss);
 80097e8:	8b7b      	ldrh	r3, [r7, #26]
 80097ea:	461a      	mov	r2, r3
 80097ec:	2100      	movs	r1, #0
 80097ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097f0:	f7fc fe17 	bl	8006422 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80097f4:	4956      	ldr	r1, [pc, #344]	; (8009950 <f_mkfs+0x764>)
 80097f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097f8:	f7fc fdc6 	bl	8006388 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80097fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009802:	4954      	ldr	r1, [pc, #336]	; (8009954 <f_mkfs+0x768>)
 8009804:	4618      	mov	r0, r3
 8009806:	f7fc fdbf 	bl	8006388 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	3b01      	subs	r3, #1
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fc fdb6 	bl	8006388 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fc fdaf 	bl	8006388 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009830:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009834:	4618      	mov	r0, r3
 8009836:	f7fc fd8c 	bl	8006352 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	1dda      	adds	r2, r3, #7
 800983e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009842:	2301      	movs	r3, #1
 8009844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009846:	f7fc fd0b 	bl	8006260 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009852:	2301      	movs	r3, #1
 8009854:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009856:	f7fc fd03 	bl	8006260 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800985a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800985c:	2100      	movs	r1, #0
 800985e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009860:	f7fc fddf 	bl	8006422 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8009864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009866:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009868:	2300      	movs	r3, #0
 800986a:	64bb      	str	r3, [r7, #72]	; 0x48
 800986c:	e04b      	b.n	8009906 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800986e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009872:	2b03      	cmp	r3, #3
 8009874:	d113      	bne.n	800989e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8009876:	f06f 0107 	mvn.w	r1, #7
 800987a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800987c:	f7fc fd84 	bl	8006388 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	3304      	adds	r3, #4
 8009884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009888:	4618      	mov	r0, r3
 800988a:	f7fc fd7d 	bl	8006388 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	3308      	adds	r3, #8
 8009892:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009896:	4618      	mov	r0, r3
 8009898:	f7fc fd76 	bl	8006388 <st_dword>
 800989c:	e00b      	b.n	80098b6 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800989e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <f_mkfs+0x6be>
 80098a6:	4b2c      	ldr	r3, [pc, #176]	; (8009958 <f_mkfs+0x76c>)
 80098a8:	e001      	b.n	80098ae <f_mkfs+0x6c2>
 80098aa:	f06f 0307 	mvn.w	r3, #7
 80098ae:	4619      	mov	r1, r3
 80098b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80098b2:	f7fc fd69 	bl	8006388 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80098b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b8:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80098ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	4293      	cmp	r3, r2
 80098c0:	bf28      	it	cs
 80098c2:	4613      	movcs	r3, r2
 80098c4:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80098c6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80098ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098d0:	f7fc fcc6 	bl	8006260 <disk_write>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <f_mkfs+0x6f2>
 80098da:	2301      	movs	r3, #1
 80098dc:	e0d0      	b.n	8009a80 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 80098de:	8b7b      	ldrh	r3, [r7, #26]
 80098e0:	461a      	mov	r2, r3
 80098e2:	2100      	movs	r1, #0
 80098e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80098e6:	f7fc fd9c 	bl	8006422 <mem_set>
				sect += n; nsect -= n;
 80098ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ee:	4413      	add	r3, r2
 80098f0:	667b      	str	r3, [r7, #100]	; 0x64
 80098f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80098fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1dc      	bne.n	80098ba <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009902:	3301      	adds	r3, #1
 8009904:	64bb      	str	r3, [r7, #72]	; 0x48
 8009906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990a:	429a      	cmp	r2, r3
 800990c:	d3af      	bcc.n	800986e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800990e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009912:	2b03      	cmp	r3, #3
 8009914:	d101      	bne.n	800991a <f_mkfs+0x72e>
 8009916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009918:	e000      	b.n	800991c <f_mkfs+0x730>
 800991a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991c:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800991e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	4293      	cmp	r3, r2
 8009924:	bf28      	it	cs
 8009926:	4613      	movcs	r3, r2
 8009928:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800992a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800992e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009934:	f7fc fc94 	bl	8006260 <disk_write>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00e      	beq.n	800995c <f_mkfs+0x770>
 800993e:	2301      	movs	r3, #1
 8009940:	e09e      	b.n	8009a80 <f_mkfs+0x894>
 8009942:	bf00      	nop
 8009944:	0800af28 	.word	0x0800af28
 8009948:	0800af34 	.word	0x0800af34
 800994c:	0800af48 	.word	0x0800af48
 8009950:	41615252 	.word	0x41615252
 8009954:	61417272 	.word	0x61417272
 8009958:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800995c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800995e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009960:	4413      	add	r3, r2
 8009962:	667b      	str	r3, [r7, #100]	; 0x64
 8009964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800996c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1d5      	bne.n	800991e <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009972:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009976:	2b03      	cmp	r3, #3
 8009978:	d103      	bne.n	8009982 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800997a:	230c      	movs	r3, #12
 800997c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009980:	e010      	b.n	80099a4 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009988:	d303      	bcc.n	8009992 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800998a:	2306      	movs	r3, #6
 800998c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009990:	e008      	b.n	80099a4 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009996:	2b02      	cmp	r3, #2
 8009998:	d101      	bne.n	800999e <f_mkfs+0x7b2>
 800999a:	2304      	movs	r3, #4
 800999c:	e000      	b.n	80099a0 <f_mkfs+0x7b4>
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d15b      	bne.n	8009a66 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 80099ae:	8b7b      	ldrh	r3, [r7, #26]
 80099b0:	461a      	mov	r2, r3
 80099b2:	2100      	movs	r1, #0
 80099b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80099b6:	f7fc fd34 	bl	8006422 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80099ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fc fcc4 	bl	8006352 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80099ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80099d0:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	2201      	movs	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	3302      	adds	r3, #2
 80099e4:	2201      	movs	r2, #1
 80099e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	3303      	adds	r3, #3
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	3304      	adds	r3, #4
 80099f4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80099f8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	441a      	add	r2, r3
 8009a00:	4b21      	ldr	r3, [pc, #132]	; (8009a88 <f_mkfs+0x89c>)
 8009a02:	fba3 1302 	umull	r1, r3, r3, r2
 8009a06:	1ad2      	subs	r2, r2, r3
 8009a08:	0852      	lsrs	r2, r2, #1
 8009a0a:	4413      	add	r3, r2
 8009a0c:	0b5b      	lsrs	r3, r3, #13
 8009a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	3305      	adds	r3, #5
 8009a14:	22fe      	movs	r2, #254	; 0xfe
 8009a16:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8009a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a1a:	089b      	lsrs	r3, r3, #2
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	3306      	adds	r3, #6
 8009a22:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8009a26:	b2d2      	uxtb	r2, r2
 8009a28:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	3308      	adds	r3, #8
 8009a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fc fca4 	bl	8006388 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	330c      	adds	r3, #12
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fc fc9d 	bl	8006388 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009a4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009a52:	2301      	movs	r3, #1
 8009a54:	2200      	movs	r2, #0
 8009a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a58:	f7fc fc02 	bl	8006260 <disk_write>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <f_mkfs+0x87a>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e00c      	b.n	8009a80 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8009a66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fc fc16 	bl	80062a0 <disk_ioctl>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <f_mkfs+0x892>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <f_mkfs+0x894>

	return FR_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3774      	adds	r7, #116	; 0x74
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd90      	pop	{r4, r7, pc}
 8009a88:	0515565b 	.word	0x0515565b

08009a8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009aa2:	4b1f      	ldr	r3, [pc, #124]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009aa4:	7a5b      	ldrb	r3, [r3, #9]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d131      	bne.n	8009b10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009aac:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009aae:	7a5b      	ldrb	r3, [r3, #9]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009aba:	4b19      	ldr	r3, [pc, #100]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009abc:	7a5b      	ldrb	r3, [r3, #9]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	4a17      	ldr	r2, [pc, #92]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aca:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009acc:	7a5b      	ldrb	r3, [r3, #9]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	79fa      	ldrb	r2, [r7, #7]
 8009ad8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009adc:	7a5b      	ldrb	r3, [r3, #9]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	b2d1      	uxtb	r1, r2
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <FATFS_LinkDriverEx+0x94>)
 8009ae6:	7251      	strb	r1, [r2, #9]
 8009ae8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009aea:	7dbb      	ldrb	r3, [r7, #22]
 8009aec:	3330      	adds	r3, #48	; 0x30
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	3301      	adds	r3, #1
 8009af8:	223a      	movs	r2, #58	; 0x3a
 8009afa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	3302      	adds	r3, #2
 8009b00:	222f      	movs	r2, #47	; 0x2f
 8009b02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3303      	adds	r3, #3
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	200010f8 	.word	0x200010f8

08009b24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b2e:	2200      	movs	r2, #0
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff ffaa 	bl	8009a8c <FATFS_LinkDriverEx>
 8009b38:	4603      	mov	r3, r0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <__errno>:
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <__errno+0x8>)
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20000044 	.word	0x20000044

08009b50 <__libc_init_array>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	4d0d      	ldr	r5, [pc, #52]	; (8009b88 <__libc_init_array+0x38>)
 8009b54:	4c0d      	ldr	r4, [pc, #52]	; (8009b8c <__libc_init_array+0x3c>)
 8009b56:	1b64      	subs	r4, r4, r5
 8009b58:	10a4      	asrs	r4, r4, #2
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	42a6      	cmp	r6, r4
 8009b5e:	d109      	bne.n	8009b74 <__libc_init_array+0x24>
 8009b60:	4d0b      	ldr	r5, [pc, #44]	; (8009b90 <__libc_init_array+0x40>)
 8009b62:	4c0c      	ldr	r4, [pc, #48]	; (8009b94 <__libc_init_array+0x44>)
 8009b64:	f000 ffec 	bl	800ab40 <_init>
 8009b68:	1b64      	subs	r4, r4, r5
 8009b6a:	10a4      	asrs	r4, r4, #2
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	42a6      	cmp	r6, r4
 8009b70:	d105      	bne.n	8009b7e <__libc_init_array+0x2e>
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b78:	4798      	blx	r3
 8009b7a:	3601      	adds	r6, #1
 8009b7c:	e7ee      	b.n	8009b5c <__libc_init_array+0xc>
 8009b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b82:	4798      	blx	r3
 8009b84:	3601      	adds	r6, #1
 8009b86:	e7f2      	b.n	8009b6e <__libc_init_array+0x1e>
 8009b88:	0800b0d0 	.word	0x0800b0d0
 8009b8c:	0800b0d0 	.word	0x0800b0d0
 8009b90:	0800b0d0 	.word	0x0800b0d0
 8009b94:	0800b0d4 	.word	0x0800b0d4

08009b98 <memset>:
 8009b98:	4402      	add	r2, r0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d100      	bne.n	8009ba2 <memset+0xa>
 8009ba0:	4770      	bx	lr
 8009ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ba6:	e7f9      	b.n	8009b9c <memset+0x4>

08009ba8 <iprintf>:
 8009ba8:	b40f      	push	{r0, r1, r2, r3}
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <iprintf+0x2c>)
 8009bac:	b513      	push	{r0, r1, r4, lr}
 8009bae:	681c      	ldr	r4, [r3, #0]
 8009bb0:	b124      	cbz	r4, 8009bbc <iprintf+0x14>
 8009bb2:	69a3      	ldr	r3, [r4, #24]
 8009bb4:	b913      	cbnz	r3, 8009bbc <iprintf+0x14>
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 fa5e 	bl	800a078 <__sinit>
 8009bbc:	ab05      	add	r3, sp, #20
 8009bbe:	9a04      	ldr	r2, [sp, #16]
 8009bc0:	68a1      	ldr	r1, [r4, #8]
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f000 fc2f 	bl	800a428 <_vfiprintf_r>
 8009bca:	b002      	add	sp, #8
 8009bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd0:	b004      	add	sp, #16
 8009bd2:	4770      	bx	lr
 8009bd4:	20000044 	.word	0x20000044

08009bd8 <_puts_r>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	460e      	mov	r6, r1
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b118      	cbz	r0, 8009be8 <_puts_r+0x10>
 8009be0:	6983      	ldr	r3, [r0, #24]
 8009be2:	b90b      	cbnz	r3, 8009be8 <_puts_r+0x10>
 8009be4:	f000 fa48 	bl	800a078 <__sinit>
 8009be8:	69ab      	ldr	r3, [r5, #24]
 8009bea:	68ac      	ldr	r4, [r5, #8]
 8009bec:	b913      	cbnz	r3, 8009bf4 <_puts_r+0x1c>
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 fa42 	bl	800a078 <__sinit>
 8009bf4:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <_puts_r+0xd0>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d120      	bne.n	8009c3c <_puts_r+0x64>
 8009bfa:	686c      	ldr	r4, [r5, #4]
 8009bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfe:	07db      	lsls	r3, r3, #31
 8009c00:	d405      	bmi.n	8009c0e <_puts_r+0x36>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	0598      	lsls	r0, r3, #22
 8009c06:	d402      	bmi.n	8009c0e <_puts_r+0x36>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f000 fad3 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	0719      	lsls	r1, r3, #28
 8009c12:	d51d      	bpl.n	8009c50 <_puts_r+0x78>
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	b1db      	cbz	r3, 8009c50 <_puts_r+0x78>
 8009c18:	3e01      	subs	r6, #1
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	bb39      	cbnz	r1, 8009c76 <_puts_r+0x9e>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da38      	bge.n	8009c9c <_puts_r+0xc4>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	210a      	movs	r1, #10
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f848 	bl	8009cc4 <__swbuf_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d011      	beq.n	8009c5c <_puts_r+0x84>
 8009c38:	250a      	movs	r5, #10
 8009c3a:	e011      	b.n	8009c60 <_puts_r+0x88>
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <_puts_r+0xd4>)
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d101      	bne.n	8009c46 <_puts_r+0x6e>
 8009c42:	68ac      	ldr	r4, [r5, #8]
 8009c44:	e7da      	b.n	8009bfc <_puts_r+0x24>
 8009c46:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <_puts_r+0xd8>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	bf08      	it	eq
 8009c4c:	68ec      	ldreq	r4, [r5, #12]
 8009c4e:	e7d5      	b.n	8009bfc <_puts_r+0x24>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 f888 	bl	8009d68 <__swsetup_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d0dd      	beq.n	8009c18 <_puts_r+0x40>
 8009c5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c62:	07da      	lsls	r2, r3, #31
 8009c64:	d405      	bmi.n	8009c72 <_puts_r+0x9a>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	059b      	lsls	r3, r3, #22
 8009c6a:	d402      	bmi.n	8009c72 <_puts_r+0x9a>
 8009c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6e:	f000 faa2 	bl	800a1b6 <__retarget_lock_release_recursive>
 8009c72:	4628      	mov	r0, r5
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da04      	bge.n	8009c84 <_puts_r+0xac>
 8009c7a:	69a2      	ldr	r2, [r4, #24]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	dc06      	bgt.n	8009c8e <_puts_r+0xb6>
 8009c80:	290a      	cmp	r1, #10
 8009c82:	d004      	beq.n	8009c8e <_puts_r+0xb6>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	6022      	str	r2, [r4, #0]
 8009c8a:	7019      	strb	r1, [r3, #0]
 8009c8c:	e7c5      	b.n	8009c1a <_puts_r+0x42>
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f817 	bl	8009cc4 <__swbuf_r>
 8009c96:	3001      	adds	r0, #1
 8009c98:	d1bf      	bne.n	8009c1a <_puts_r+0x42>
 8009c9a:	e7df      	b.n	8009c5c <_puts_r+0x84>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	250a      	movs	r5, #10
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	701d      	strb	r5, [r3, #0]
 8009ca6:	e7db      	b.n	8009c60 <_puts_r+0x88>
 8009ca8:	0800b054 	.word	0x0800b054
 8009cac:	0800b074 	.word	0x0800b074
 8009cb0:	0800b034 	.word	0x0800b034

08009cb4 <puts>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <puts+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f7ff bf8d 	b.w	8009bd8 <_puts_r>
 8009cbe:	bf00      	nop
 8009cc0:	20000044 	.word	0x20000044

08009cc4 <__swbuf_r>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	460e      	mov	r6, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	4605      	mov	r5, r0
 8009ccc:	b118      	cbz	r0, 8009cd6 <__swbuf_r+0x12>
 8009cce:	6983      	ldr	r3, [r0, #24]
 8009cd0:	b90b      	cbnz	r3, 8009cd6 <__swbuf_r+0x12>
 8009cd2:	f000 f9d1 	bl	800a078 <__sinit>
 8009cd6:	4b21      	ldr	r3, [pc, #132]	; (8009d5c <__swbuf_r+0x98>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	d12b      	bne.n	8009d34 <__swbuf_r+0x70>
 8009cdc:	686c      	ldr	r4, [r5, #4]
 8009cde:	69a3      	ldr	r3, [r4, #24]
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	071a      	lsls	r2, r3, #28
 8009ce6:	d52f      	bpl.n	8009d48 <__swbuf_r+0x84>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	b36b      	cbz	r3, 8009d48 <__swbuf_r+0x84>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	1ac0      	subs	r0, r0, r3
 8009cf2:	6963      	ldr	r3, [r4, #20]
 8009cf4:	b2f6      	uxtb	r6, r6
 8009cf6:	4283      	cmp	r3, r0
 8009cf8:	4637      	mov	r7, r6
 8009cfa:	dc04      	bgt.n	8009d06 <__swbuf_r+0x42>
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 f926 	bl	8009f50 <_fflush_r>
 8009d04:	bb30      	cbnz	r0, 8009d54 <__swbuf_r+0x90>
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	6022      	str	r2, [r4, #0]
 8009d12:	701e      	strb	r6, [r3, #0]
 8009d14:	6963      	ldr	r3, [r4, #20]
 8009d16:	3001      	adds	r0, #1
 8009d18:	4283      	cmp	r3, r0
 8009d1a:	d004      	beq.n	8009d26 <__swbuf_r+0x62>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	07db      	lsls	r3, r3, #31
 8009d20:	d506      	bpl.n	8009d30 <__swbuf_r+0x6c>
 8009d22:	2e0a      	cmp	r6, #10
 8009d24:	d104      	bne.n	8009d30 <__swbuf_r+0x6c>
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 f911 	bl	8009f50 <_fflush_r>
 8009d2e:	b988      	cbnz	r0, 8009d54 <__swbuf_r+0x90>
 8009d30:	4638      	mov	r0, r7
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <__swbuf_r+0x9c>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <__swbuf_r+0x7a>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7cf      	b.n	8009cde <__swbuf_r+0x1a>
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <__swbuf_r+0xa0>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	bf08      	it	eq
 8009d44:	68ec      	ldreq	r4, [r5, #12]
 8009d46:	e7ca      	b.n	8009cde <__swbuf_r+0x1a>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f80c 	bl	8009d68 <__swsetup_r>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d0cb      	beq.n	8009cec <__swbuf_r+0x28>
 8009d54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d58:	e7ea      	b.n	8009d30 <__swbuf_r+0x6c>
 8009d5a:	bf00      	nop
 8009d5c:	0800b054 	.word	0x0800b054
 8009d60:	0800b074 	.word	0x0800b074
 8009d64:	0800b034 	.word	0x0800b034

08009d68 <__swsetup_r>:
 8009d68:	4b32      	ldr	r3, [pc, #200]	; (8009e34 <__swsetup_r+0xcc>)
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	681d      	ldr	r5, [r3, #0]
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	b125      	cbz	r5, 8009d7e <__swsetup_r+0x16>
 8009d74:	69ab      	ldr	r3, [r5, #24]
 8009d76:	b913      	cbnz	r3, 8009d7e <__swsetup_r+0x16>
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 f97d 	bl	800a078 <__sinit>
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <__swsetup_r+0xd0>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d10f      	bne.n	8009da4 <__swsetup_r+0x3c>
 8009d84:	686c      	ldr	r4, [r5, #4]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d42c      	bmi.n	8009dea <__swsetup_r+0x82>
 8009d90:	06dd      	lsls	r5, r3, #27
 8009d92:	d411      	bmi.n	8009db8 <__swsetup_r+0x50>
 8009d94:	2309      	movs	r3, #9
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009da2:	e03e      	b.n	8009e22 <__swsetup_r+0xba>
 8009da4:	4b25      	ldr	r3, [pc, #148]	; (8009e3c <__swsetup_r+0xd4>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d101      	bne.n	8009dae <__swsetup_r+0x46>
 8009daa:	68ac      	ldr	r4, [r5, #8]
 8009dac:	e7eb      	b.n	8009d86 <__swsetup_r+0x1e>
 8009dae:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <__swsetup_r+0xd8>)
 8009db0:	429c      	cmp	r4, r3
 8009db2:	bf08      	it	eq
 8009db4:	68ec      	ldreq	r4, [r5, #12]
 8009db6:	e7e6      	b.n	8009d86 <__swsetup_r+0x1e>
 8009db8:	0758      	lsls	r0, r3, #29
 8009dba:	d512      	bpl.n	8009de2 <__swsetup_r+0x7a>
 8009dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dbe:	b141      	cbz	r1, 8009dd2 <__swsetup_r+0x6a>
 8009dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	d002      	beq.n	8009dce <__swsetup_r+0x66>
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fa59 	bl	800a280 <_free_r>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f043 0308 	orr.w	r3, r3, #8
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	b94b      	cbnz	r3, 8009e02 <__swsetup_r+0x9a>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df8:	d003      	beq.n	8009e02 <__swsetup_r+0x9a>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 f9ff 	bl	800a200 <__smakebuf_r>
 8009e02:	89a0      	ldrh	r0, [r4, #12]
 8009e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e08:	f010 0301 	ands.w	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <__swsetup_r+0xbc>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	6963      	ldr	r3, [r4, #20]
 8009e14:	425b      	negs	r3, r3
 8009e16:	61a3      	str	r3, [r4, #24]
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	b943      	cbnz	r3, 8009e2e <__swsetup_r+0xc6>
 8009e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e20:	d1ba      	bne.n	8009d98 <__swsetup_r+0x30>
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	0781      	lsls	r1, r0, #30
 8009e26:	bf58      	it	pl
 8009e28:	6963      	ldrpl	r3, [r4, #20]
 8009e2a:	60a3      	str	r3, [r4, #8]
 8009e2c:	e7f4      	b.n	8009e18 <__swsetup_r+0xb0>
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e7f7      	b.n	8009e22 <__swsetup_r+0xba>
 8009e32:	bf00      	nop
 8009e34:	20000044 	.word	0x20000044
 8009e38:	0800b054 	.word	0x0800b054
 8009e3c:	0800b074 	.word	0x0800b074
 8009e40:	0800b034 	.word	0x0800b034

08009e44 <__sflush_r>:
 8009e44:	898a      	ldrh	r2, [r1, #12]
 8009e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	0710      	lsls	r0, r2, #28
 8009e4e:	460c      	mov	r4, r1
 8009e50:	d458      	bmi.n	8009f04 <__sflush_r+0xc0>
 8009e52:	684b      	ldr	r3, [r1, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc05      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dc02      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e5e:	2000      	movs	r0, #0
 8009e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d0f9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e70:	682f      	ldr	r7, [r5, #0]
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	d032      	beq.n	8009edc <__sflush_r+0x98>
 8009e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	075a      	lsls	r2, r3, #29
 8009e7c:	d505      	bpl.n	8009e8a <__sflush_r+0x46>
 8009e7e:	6863      	ldr	r3, [r4, #4]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e84:	b10b      	cbz	r3, 8009e8a <__sflush_r+0x46>
 8009e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e88:	1ac0      	subs	r0, r0, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e90:	6a21      	ldr	r1, [r4, #32]
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b0      	blx	r6
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	d106      	bne.n	8009eaa <__sflush_r+0x66>
 8009e9c:	6829      	ldr	r1, [r5, #0]
 8009e9e:	291d      	cmp	r1, #29
 8009ea0:	d82c      	bhi.n	8009efc <__sflush_r+0xb8>
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <__sflush_r+0x108>)
 8009ea4:	40ca      	lsrs	r2, r1
 8009ea6:	07d6      	lsls	r6, r2, #31
 8009ea8:	d528      	bpl.n	8009efc <__sflush_r+0xb8>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	6062      	str	r2, [r4, #4]
 8009eae:	04d9      	lsls	r1, r3, #19
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	d504      	bpl.n	8009ec0 <__sflush_r+0x7c>
 8009eb6:	1c42      	adds	r2, r0, #1
 8009eb8:	d101      	bne.n	8009ebe <__sflush_r+0x7a>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b903      	cbnz	r3, 8009ec0 <__sflush_r+0x7c>
 8009ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8009ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec2:	602f      	str	r7, [r5, #0]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d0ca      	beq.n	8009e5e <__sflush_r+0x1a>
 8009ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d002      	beq.n	8009ed6 <__sflush_r+0x92>
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 f9d5 	bl	800a280 <_free_r>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8009eda:	e7c1      	b.n	8009e60 <__sflush_r+0x1c>
 8009edc:	6a21      	ldr	r1, [r4, #32]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b0      	blx	r6
 8009ee4:	1c41      	adds	r1, r0, #1
 8009ee6:	d1c7      	bne.n	8009e78 <__sflush_r+0x34>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c4      	beq.n	8009e78 <__sflush_r+0x34>
 8009eee:	2b1d      	cmp	r3, #29
 8009ef0:	d001      	beq.n	8009ef6 <__sflush_r+0xb2>
 8009ef2:	2b16      	cmp	r3, #22
 8009ef4:	d101      	bne.n	8009efa <__sflush_r+0xb6>
 8009ef6:	602f      	str	r7, [r5, #0]
 8009ef8:	e7b1      	b.n	8009e5e <__sflush_r+0x1a>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	e7ad      	b.n	8009e60 <__sflush_r+0x1c>
 8009f04:	690f      	ldr	r7, [r1, #16]
 8009f06:	2f00      	cmp	r7, #0
 8009f08:	d0a9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009f0a:	0793      	lsls	r3, r2, #30
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	bf08      	it	eq
 8009f10:	694b      	ldreq	r3, [r1, #20]
 8009f12:	600f      	str	r7, [r1, #0]
 8009f14:	bf18      	it	ne
 8009f16:	2300      	movne	r3, #0
 8009f18:	eba6 0807 	sub.w	r8, r6, r7
 8009f1c:	608b      	str	r3, [r1, #8]
 8009f1e:	f1b8 0f00 	cmp.w	r8, #0
 8009f22:	dd9c      	ble.n	8009e5e <__sflush_r+0x1a>
 8009f24:	6a21      	ldr	r1, [r4, #32]
 8009f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f28:	4643      	mov	r3, r8
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b0      	blx	r6
 8009f30:	2800      	cmp	r0, #0
 8009f32:	dc06      	bgt.n	8009f42 <__sflush_r+0xfe>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f40:	e78e      	b.n	8009e60 <__sflush_r+0x1c>
 8009f42:	4407      	add	r7, r0
 8009f44:	eba8 0800 	sub.w	r8, r8, r0
 8009f48:	e7e9      	b.n	8009f1e <__sflush_r+0xda>
 8009f4a:	bf00      	nop
 8009f4c:	20400001 	.word	0x20400001

08009f50 <_fflush_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	4605      	mov	r5, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	b913      	cbnz	r3, 8009f60 <_fflush_r+0x10>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	b118      	cbz	r0, 8009f6a <_fflush_r+0x1a>
 8009f62:	6983      	ldr	r3, [r0, #24]
 8009f64:	b90b      	cbnz	r3, 8009f6a <_fflush_r+0x1a>
 8009f66:	f000 f887 	bl	800a078 <__sinit>
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <_fflush_r+0x6c>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d11b      	bne.n	8009fa8 <_fflush_r+0x58>
 8009f70:	686c      	ldr	r4, [r5, #4]
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0ef      	beq.n	8009f5a <_fflush_r+0xa>
 8009f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f7c:	07d0      	lsls	r0, r2, #31
 8009f7e:	d404      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f80:	0599      	lsls	r1, r3, #22
 8009f82:	d402      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f86:	f000 f915 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f7ff ff59 	bl	8009e44 <__sflush_r>
 8009f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f94:	07da      	lsls	r2, r3, #31
 8009f96:	4605      	mov	r5, r0
 8009f98:	d4e0      	bmi.n	8009f5c <_fflush_r+0xc>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	059b      	lsls	r3, r3, #22
 8009f9e:	d4dd      	bmi.n	8009f5c <_fflush_r+0xc>
 8009fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa2:	f000 f908 	bl	800a1b6 <__retarget_lock_release_recursive>
 8009fa6:	e7d9      	b.n	8009f5c <_fflush_r+0xc>
 8009fa8:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <_fflush_r+0x70>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <_fflush_r+0x62>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7df      	b.n	8009f72 <_fflush_r+0x22>
 8009fb2:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <_fflush_r+0x74>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7da      	b.n	8009f72 <_fflush_r+0x22>
 8009fbc:	0800b054 	.word	0x0800b054
 8009fc0:	0800b074 	.word	0x0800b074
 8009fc4:	0800b034 	.word	0x0800b034

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	; 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	; 0x5c
 8009fe6:	f7ff fdd7 	bl	8009b98 <memset>
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x38>)
 8009fec:	6263      	str	r3, [r4, #36]	; 0x24
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x3c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x40>)
 8009ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x44>)
 8009ff8:	6224      	str	r4, [r4, #32]
 8009ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	0800a9d1 	.word	0x0800a9d1
 800a004:	0800a9f3 	.word	0x0800a9f3
 800a008:	0800aa2b 	.word	0x0800aa2b
 800a00c:	0800aa4f 	.word	0x0800aa4f

0800a010 <_cleanup_r>:
 800a010:	4901      	ldr	r1, [pc, #4]	; (800a018 <_cleanup_r+0x8>)
 800a012:	f000 b8af 	b.w	800a174 <_fwalk_reent>
 800a016:	bf00      	nop
 800a018:	08009f51 	.word	0x08009f51

0800a01c <__sfmoreglue>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	1e4a      	subs	r2, r1, #1
 800a020:	2568      	movs	r5, #104	; 0x68
 800a022:	4355      	muls	r5, r2
 800a024:	460e      	mov	r6, r1
 800a026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02a:	f000 f979 	bl	800a320 <_malloc_r>
 800a02e:	4604      	mov	r4, r0
 800a030:	b140      	cbz	r0, 800a044 <__sfmoreglue+0x28>
 800a032:	2100      	movs	r1, #0
 800a034:	e9c0 1600 	strd	r1, r6, [r0]
 800a038:	300c      	adds	r0, #12
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a040:	f7ff fdaa 	bl	8009b98 <memset>
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__sfp_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sfp_lock_acquire+0x8>)
 800a04a:	f000 b8b3 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	20003428 	.word	0x20003428

0800a054 <__sfp_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sfp_lock_release+0x8>)
 800a056:	f000 b8ae 	b.w	800a1b6 <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	20003428 	.word	0x20003428

0800a060 <__sinit_lock_acquire>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__sinit_lock_acquire+0x8>)
 800a062:	f000 b8a7 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20003423 	.word	0x20003423

0800a06c <__sinit_lock_release>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__sinit_lock_release+0x8>)
 800a06e:	f000 b8a2 	b.w	800a1b6 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20003423 	.word	0x20003423

0800a078 <__sinit>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	4604      	mov	r4, r0
 800a07c:	f7ff fff0 	bl	800a060 <__sinit_lock_acquire>
 800a080:	69a3      	ldr	r3, [r4, #24]
 800a082:	b11b      	cbz	r3, 800a08c <__sinit+0x14>
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f7ff bff0 	b.w	800a06c <__sinit_lock_release>
 800a08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a090:	6523      	str	r3, [r4, #80]	; 0x50
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <__sinit+0x68>)
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <__sinit+0x6c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	62a2      	str	r2, [r4, #40]	; 0x28
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	bf04      	itt	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	61a3      	streq	r3, [r4, #24]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f820 	bl	800a0e8 <__sfp>
 800a0a8:	6060      	str	r0, [r4, #4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f81c 	bl	800a0e8 <__sfp>
 800a0b0:	60a0      	str	r0, [r4, #8]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f818 	bl	800a0e8 <__sfp>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60e0      	str	r0, [r4, #12]
 800a0bc:	2104      	movs	r1, #4
 800a0be:	6860      	ldr	r0, [r4, #4]
 800a0c0:	f7ff ff82 	bl	8009fc8 <std>
 800a0c4:	68a0      	ldr	r0, [r4, #8]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2109      	movs	r1, #9
 800a0ca:	f7ff ff7d 	bl	8009fc8 <std>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	f7ff ff78 	bl	8009fc8 <std>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61a3      	str	r3, [r4, #24]
 800a0dc:	e7d2      	b.n	800a084 <__sinit+0xc>
 800a0de:	bf00      	nop
 800a0e0:	0800b030 	.word	0x0800b030
 800a0e4:	0800a011 	.word	0x0800a011

0800a0e8 <__sfp>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	f7ff ffac 	bl	800a048 <__sfp_lock_acquire>
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <__sfp+0x84>)
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	69b3      	ldr	r3, [r6, #24]
 800a0f6:	b913      	cbnz	r3, 800a0fe <__sfp+0x16>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffbd 	bl	800a078 <__sinit>
 800a0fe:	3648      	adds	r6, #72	; 0x48
 800a100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a104:	3b01      	subs	r3, #1
 800a106:	d503      	bpl.n	800a110 <__sfp+0x28>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	b30b      	cbz	r3, 800a150 <__sfp+0x68>
 800a10c:	6836      	ldr	r6, [r6, #0]
 800a10e:	e7f7      	b.n	800a100 <__sfp+0x18>
 800a110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a114:	b9d5      	cbnz	r5, 800a14c <__sfp+0x64>
 800a116:	4b16      	ldr	r3, [pc, #88]	; (800a170 <__sfp+0x88>)
 800a118:	60e3      	str	r3, [r4, #12]
 800a11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11e:	6665      	str	r5, [r4, #100]	; 0x64
 800a120:	f000 f847 	bl	800a1b2 <__retarget_lock_init_recursive>
 800a124:	f7ff ff96 	bl	800a054 <__sfp_lock_release>
 800a128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	61a5      	str	r5, [r4, #24]
 800a134:	2208      	movs	r2, #8
 800a136:	4629      	mov	r1, r5
 800a138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a13c:	f7ff fd2c 	bl	8009b98 <memset>
 800a140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a148:	4620      	mov	r0, r4
 800a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14c:	3468      	adds	r4, #104	; 0x68
 800a14e:	e7d9      	b.n	800a104 <__sfp+0x1c>
 800a150:	2104      	movs	r1, #4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff62 	bl	800a01c <__sfmoreglue>
 800a158:	4604      	mov	r4, r0
 800a15a:	6030      	str	r0, [r6, #0]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1d5      	bne.n	800a10c <__sfp+0x24>
 800a160:	f7ff ff78 	bl	800a054 <__sfp_lock_release>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e7ee      	b.n	800a148 <__sfp+0x60>
 800a16a:	bf00      	nop
 800a16c:	0800b030 	.word	0x0800b030
 800a170:	ffff0001 	.word	0xffff0001

0800a174 <_fwalk_reent>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	4606      	mov	r6, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a180:	2700      	movs	r7, #0
 800a182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a186:	f1b9 0901 	subs.w	r9, r9, #1
 800a18a:	d505      	bpl.n	800a198 <_fwalk_reent+0x24>
 800a18c:	6824      	ldr	r4, [r4, #0]
 800a18e:	2c00      	cmp	r4, #0
 800a190:	d1f7      	bne.n	800a182 <_fwalk_reent+0xe>
 800a192:	4638      	mov	r0, r7
 800a194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a198:	89ab      	ldrh	r3, [r5, #12]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d907      	bls.n	800a1ae <_fwalk_reent+0x3a>
 800a19e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	d003      	beq.n	800a1ae <_fwalk_reent+0x3a>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	47c0      	blx	r8
 800a1ac:	4307      	orrs	r7, r0
 800a1ae:	3568      	adds	r5, #104	; 0x68
 800a1b0:	e7e9      	b.n	800a186 <_fwalk_reent+0x12>

0800a1b2 <__retarget_lock_init_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__retarget_lock_acquire_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_release_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__swhatbuf_r>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	460e      	mov	r6, r1
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	b096      	sub	sp, #88	; 0x58
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	461d      	mov	r5, r3
 800a1c8:	da07      	bge.n	800a1da <__swhatbuf_r+0x22>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	602b      	str	r3, [r5, #0]
 800a1ce:	89b3      	ldrh	r3, [r6, #12]
 800a1d0:	061a      	lsls	r2, r3, #24
 800a1d2:	d410      	bmi.n	800a1f6 <__swhatbuf_r+0x3e>
 800a1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d8:	e00e      	b.n	800a1f8 <__swhatbuf_r+0x40>
 800a1da:	466a      	mov	r2, sp
 800a1dc:	f000 fc5e 	bl	800aa9c <_fstat_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dbf2      	blt.n	800a1ca <__swhatbuf_r+0x12>
 800a1e4:	9a01      	ldr	r2, [sp, #4]
 800a1e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1ee:	425a      	negs	r2, r3
 800a1f0:	415a      	adcs	r2, r3
 800a1f2:	602a      	str	r2, [r5, #0]
 800a1f4:	e7ee      	b.n	800a1d4 <__swhatbuf_r+0x1c>
 800a1f6:	2340      	movs	r3, #64	; 0x40
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	b016      	add	sp, #88	; 0x58
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}

0800a200 <__smakebuf_r>:
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a204:	079d      	lsls	r5, r3, #30
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d507      	bpl.n	800a21c <__smakebuf_r+0x1c>
 800a20c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2301      	movs	r3, #1
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	b002      	add	sp, #8
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	ab01      	add	r3, sp, #4
 800a21e:	466a      	mov	r2, sp
 800a220:	f7ff ffca 	bl	800a1b8 <__swhatbuf_r>
 800a224:	9900      	ldr	r1, [sp, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 f879 	bl	800a320 <_malloc_r>
 800a22e:	b948      	cbnz	r0, 800a244 <__smakebuf_r+0x44>
 800a230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a234:	059a      	lsls	r2, r3, #22
 800a236:	d4ef      	bmi.n	800a218 <__smakebuf_r+0x18>
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	f043 0302 	orr.w	r3, r3, #2
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	e7e3      	b.n	800a20c <__smakebuf_r+0xc>
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <__smakebuf_r+0x7c>)
 800a246:	62b3      	str	r3, [r6, #40]	; 0x28
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	6020      	str	r0, [r4, #0]
 800a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	6163      	str	r3, [r4, #20]
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	6120      	str	r0, [r4, #16]
 800a25a:	b15b      	cbz	r3, 800a274 <__smakebuf_r+0x74>
 800a25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a260:	4630      	mov	r0, r6
 800a262:	f000 fc2d 	bl	800aac0 <_isatty_r>
 800a266:	b128      	cbz	r0, 800a274 <__smakebuf_r+0x74>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	89a0      	ldrh	r0, [r4, #12]
 800a276:	4305      	orrs	r5, r0
 800a278:	81a5      	strh	r5, [r4, #12]
 800a27a:	e7cd      	b.n	800a218 <__smakebuf_r+0x18>
 800a27c:	0800a011 	.word	0x0800a011

0800a280 <_free_r>:
 800a280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a282:	2900      	cmp	r1, #0
 800a284:	d048      	beq.n	800a318 <_free_r+0x98>
 800a286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a28a:	9001      	str	r0, [sp, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f1a1 0404 	sub.w	r4, r1, #4
 800a292:	bfb8      	it	lt
 800a294:	18e4      	addlt	r4, r4, r3
 800a296:	f000 fc35 	bl	800ab04 <__malloc_lock>
 800a29a:	4a20      	ldr	r2, [pc, #128]	; (800a31c <_free_r+0x9c>)
 800a29c:	9801      	ldr	r0, [sp, #4]
 800a29e:	6813      	ldr	r3, [r2, #0]
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	b933      	cbnz	r3, 800a2b2 <_free_r+0x32>
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	6014      	str	r4, [r2, #0]
 800a2a8:	b003      	add	sp, #12
 800a2aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2ae:	f000 bc2f 	b.w	800ab10 <__malloc_unlock>
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	d90b      	bls.n	800a2ce <_free_r+0x4e>
 800a2b6:	6821      	ldr	r1, [r4, #0]
 800a2b8:	1862      	adds	r2, r4, r1
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	bf04      	itt	eq
 800a2be:	681a      	ldreq	r2, [r3, #0]
 800a2c0:	685b      	ldreq	r3, [r3, #4]
 800a2c2:	6063      	str	r3, [r4, #4]
 800a2c4:	bf04      	itt	eq
 800a2c6:	1852      	addeq	r2, r2, r1
 800a2c8:	6022      	streq	r2, [r4, #0]
 800a2ca:	602c      	str	r4, [r5, #0]
 800a2cc:	e7ec      	b.n	800a2a8 <_free_r+0x28>
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	b10b      	cbz	r3, 800a2d8 <_free_r+0x58>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d9fa      	bls.n	800a2ce <_free_r+0x4e>
 800a2d8:	6811      	ldr	r1, [r2, #0]
 800a2da:	1855      	adds	r5, r2, r1
 800a2dc:	42a5      	cmp	r5, r4
 800a2de:	d10b      	bne.n	800a2f8 <_free_r+0x78>
 800a2e0:	6824      	ldr	r4, [r4, #0]
 800a2e2:	4421      	add	r1, r4
 800a2e4:	1854      	adds	r4, r2, r1
 800a2e6:	42a3      	cmp	r3, r4
 800a2e8:	6011      	str	r1, [r2, #0]
 800a2ea:	d1dd      	bne.n	800a2a8 <_free_r+0x28>
 800a2ec:	681c      	ldr	r4, [r3, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	6053      	str	r3, [r2, #4]
 800a2f2:	4421      	add	r1, r4
 800a2f4:	6011      	str	r1, [r2, #0]
 800a2f6:	e7d7      	b.n	800a2a8 <_free_r+0x28>
 800a2f8:	d902      	bls.n	800a300 <_free_r+0x80>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	6003      	str	r3, [r0, #0]
 800a2fe:	e7d3      	b.n	800a2a8 <_free_r+0x28>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	1961      	adds	r1, r4, r5
 800a304:	428b      	cmp	r3, r1
 800a306:	bf04      	itt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	6063      	str	r3, [r4, #4]
 800a30e:	bf04      	itt	eq
 800a310:	1949      	addeq	r1, r1, r5
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	6054      	str	r4, [r2, #4]
 800a316:	e7c7      	b.n	800a2a8 <_free_r+0x28>
 800a318:	b003      	add	sp, #12
 800a31a:	bd30      	pop	{r4, r5, pc}
 800a31c:	20001104 	.word	0x20001104

0800a320 <_malloc_r>:
 800a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a322:	1ccd      	adds	r5, r1, #3
 800a324:	f025 0503 	bic.w	r5, r5, #3
 800a328:	3508      	adds	r5, #8
 800a32a:	2d0c      	cmp	r5, #12
 800a32c:	bf38      	it	cc
 800a32e:	250c      	movcc	r5, #12
 800a330:	2d00      	cmp	r5, #0
 800a332:	4606      	mov	r6, r0
 800a334:	db01      	blt.n	800a33a <_malloc_r+0x1a>
 800a336:	42a9      	cmp	r1, r5
 800a338:	d903      	bls.n	800a342 <_malloc_r+0x22>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	2000      	movs	r0, #0
 800a340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a342:	f000 fbdf 	bl	800ab04 <__malloc_lock>
 800a346:	4921      	ldr	r1, [pc, #132]	; (800a3cc <_malloc_r+0xac>)
 800a348:	680a      	ldr	r2, [r1, #0]
 800a34a:	4614      	mov	r4, r2
 800a34c:	b99c      	cbnz	r4, 800a376 <_malloc_r+0x56>
 800a34e:	4f20      	ldr	r7, [pc, #128]	; (800a3d0 <_malloc_r+0xb0>)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	b923      	cbnz	r3, 800a35e <_malloc_r+0x3e>
 800a354:	4621      	mov	r1, r4
 800a356:	4630      	mov	r0, r6
 800a358:	f000 fb2a 	bl	800a9b0 <_sbrk_r>
 800a35c:	6038      	str	r0, [r7, #0]
 800a35e:	4629      	mov	r1, r5
 800a360:	4630      	mov	r0, r6
 800a362:	f000 fb25 	bl	800a9b0 <_sbrk_r>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d123      	bne.n	800a3b2 <_malloc_r+0x92>
 800a36a:	230c      	movs	r3, #12
 800a36c:	6033      	str	r3, [r6, #0]
 800a36e:	4630      	mov	r0, r6
 800a370:	f000 fbce 	bl	800ab10 <__malloc_unlock>
 800a374:	e7e3      	b.n	800a33e <_malloc_r+0x1e>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	1b5b      	subs	r3, r3, r5
 800a37a:	d417      	bmi.n	800a3ac <_malloc_r+0x8c>
 800a37c:	2b0b      	cmp	r3, #11
 800a37e:	d903      	bls.n	800a388 <_malloc_r+0x68>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	441c      	add	r4, r3
 800a384:	6025      	str	r5, [r4, #0]
 800a386:	e004      	b.n	800a392 <_malloc_r+0x72>
 800a388:	6863      	ldr	r3, [r4, #4]
 800a38a:	42a2      	cmp	r2, r4
 800a38c:	bf0c      	ite	eq
 800a38e:	600b      	streq	r3, [r1, #0]
 800a390:	6053      	strne	r3, [r2, #4]
 800a392:	4630      	mov	r0, r6
 800a394:	f000 fbbc 	bl	800ab10 <__malloc_unlock>
 800a398:	f104 000b 	add.w	r0, r4, #11
 800a39c:	1d23      	adds	r3, r4, #4
 800a39e:	f020 0007 	bic.w	r0, r0, #7
 800a3a2:	1ac2      	subs	r2, r0, r3
 800a3a4:	d0cc      	beq.n	800a340 <_malloc_r+0x20>
 800a3a6:	1a1b      	subs	r3, r3, r0
 800a3a8:	50a3      	str	r3, [r4, r2]
 800a3aa:	e7c9      	b.n	800a340 <_malloc_r+0x20>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	6864      	ldr	r4, [r4, #4]
 800a3b0:	e7cc      	b.n	800a34c <_malloc_r+0x2c>
 800a3b2:	1cc4      	adds	r4, r0, #3
 800a3b4:	f024 0403 	bic.w	r4, r4, #3
 800a3b8:	42a0      	cmp	r0, r4
 800a3ba:	d0e3      	beq.n	800a384 <_malloc_r+0x64>
 800a3bc:	1a21      	subs	r1, r4, r0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f000 faf6 	bl	800a9b0 <_sbrk_r>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1dd      	bne.n	800a384 <_malloc_r+0x64>
 800a3c8:	e7cf      	b.n	800a36a <_malloc_r+0x4a>
 800a3ca:	bf00      	nop
 800a3cc:	20001104 	.word	0x20001104
 800a3d0:	20001108 	.word	0x20001108

0800a3d4 <__sfputc_r>:
 800a3d4:	6893      	ldr	r3, [r2, #8]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	b410      	push	{r4}
 800a3dc:	6093      	str	r3, [r2, #8]
 800a3de:	da08      	bge.n	800a3f2 <__sfputc_r+0x1e>
 800a3e0:	6994      	ldr	r4, [r2, #24]
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	db01      	blt.n	800a3ea <__sfputc_r+0x16>
 800a3e6:	290a      	cmp	r1, #10
 800a3e8:	d103      	bne.n	800a3f2 <__sfputc_r+0x1e>
 800a3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ee:	f7ff bc69 	b.w	8009cc4 <__swbuf_r>
 800a3f2:	6813      	ldr	r3, [r2, #0]
 800a3f4:	1c58      	adds	r0, r3, #1
 800a3f6:	6010      	str	r0, [r2, #0]
 800a3f8:	7019      	strb	r1, [r3, #0]
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <__sfputs_r>:
 800a402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	4614      	mov	r4, r2
 800a40a:	18d5      	adds	r5, r2, r3
 800a40c:	42ac      	cmp	r4, r5
 800a40e:	d101      	bne.n	800a414 <__sfputs_r+0x12>
 800a410:	2000      	movs	r0, #0
 800a412:	e007      	b.n	800a424 <__sfputs_r+0x22>
 800a414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a418:	463a      	mov	r2, r7
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ffda 	bl	800a3d4 <__sfputc_r>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d1f3      	bne.n	800a40c <__sfputs_r+0xa>
 800a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a428 <_vfiprintf_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	460d      	mov	r5, r1
 800a42e:	b09d      	sub	sp, #116	; 0x74
 800a430:	4614      	mov	r4, r2
 800a432:	4698      	mov	r8, r3
 800a434:	4606      	mov	r6, r0
 800a436:	b118      	cbz	r0, 800a440 <_vfiprintf_r+0x18>
 800a438:	6983      	ldr	r3, [r0, #24]
 800a43a:	b90b      	cbnz	r3, 800a440 <_vfiprintf_r+0x18>
 800a43c:	f7ff fe1c 	bl	800a078 <__sinit>
 800a440:	4b89      	ldr	r3, [pc, #548]	; (800a668 <_vfiprintf_r+0x240>)
 800a442:	429d      	cmp	r5, r3
 800a444:	d11b      	bne.n	800a47e <_vfiprintf_r+0x56>
 800a446:	6875      	ldr	r5, [r6, #4]
 800a448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a44a:	07d9      	lsls	r1, r3, #31
 800a44c:	d405      	bmi.n	800a45a <_vfiprintf_r+0x32>
 800a44e:	89ab      	ldrh	r3, [r5, #12]
 800a450:	059a      	lsls	r2, r3, #22
 800a452:	d402      	bmi.n	800a45a <_vfiprintf_r+0x32>
 800a454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a456:	f7ff fead 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 800a45a:	89ab      	ldrh	r3, [r5, #12]
 800a45c:	071b      	lsls	r3, r3, #28
 800a45e:	d501      	bpl.n	800a464 <_vfiprintf_r+0x3c>
 800a460:	692b      	ldr	r3, [r5, #16]
 800a462:	b9eb      	cbnz	r3, 800a4a0 <_vfiprintf_r+0x78>
 800a464:	4629      	mov	r1, r5
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff fc7e 	bl	8009d68 <__swsetup_r>
 800a46c:	b1c0      	cbz	r0, 800a4a0 <_vfiprintf_r+0x78>
 800a46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a470:	07dc      	lsls	r4, r3, #31
 800a472:	d50e      	bpl.n	800a492 <_vfiprintf_r+0x6a>
 800a474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a478:	b01d      	add	sp, #116	; 0x74
 800a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47e:	4b7b      	ldr	r3, [pc, #492]	; (800a66c <_vfiprintf_r+0x244>)
 800a480:	429d      	cmp	r5, r3
 800a482:	d101      	bne.n	800a488 <_vfiprintf_r+0x60>
 800a484:	68b5      	ldr	r5, [r6, #8]
 800a486:	e7df      	b.n	800a448 <_vfiprintf_r+0x20>
 800a488:	4b79      	ldr	r3, [pc, #484]	; (800a670 <_vfiprintf_r+0x248>)
 800a48a:	429d      	cmp	r5, r3
 800a48c:	bf08      	it	eq
 800a48e:	68f5      	ldreq	r5, [r6, #12]
 800a490:	e7da      	b.n	800a448 <_vfiprintf_r+0x20>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	0598      	lsls	r0, r3, #22
 800a496:	d4ed      	bmi.n	800a474 <_vfiprintf_r+0x4c>
 800a498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49a:	f7ff fe8c 	bl	800a1b6 <__retarget_lock_release_recursive>
 800a49e:	e7e9      	b.n	800a474 <_vfiprintf_r+0x4c>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ae:	2330      	movs	r3, #48	; 0x30
 800a4b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a674 <_vfiprintf_r+0x24c>
 800a4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b8:	f04f 0901 	mov.w	r9, #1
 800a4bc:	4623      	mov	r3, r4
 800a4be:	469a      	mov	sl, r3
 800a4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c4:	b10a      	cbz	r2, 800a4ca <_vfiprintf_r+0xa2>
 800a4c6:	2a25      	cmp	r2, #37	; 0x25
 800a4c8:	d1f9      	bne.n	800a4be <_vfiprintf_r+0x96>
 800a4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ce:	d00b      	beq.n	800a4e8 <_vfiprintf_r+0xc0>
 800a4d0:	465b      	mov	r3, fp
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ff93 	bl	800a402 <__sfputs_r>
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f000 80aa 	beq.w	800a636 <_vfiprintf_r+0x20e>
 800a4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e4:	445a      	add	r2, fp
 800a4e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 80a2 	beq.w	800a636 <_vfiprintf_r+0x20e>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4fc:	f10a 0a01 	add.w	sl, sl, #1
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a508:	931a      	str	r3, [sp, #104]	; 0x68
 800a50a:	4654      	mov	r4, sl
 800a50c:	2205      	movs	r2, #5
 800a50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a512:	4858      	ldr	r0, [pc, #352]	; (800a674 <_vfiprintf_r+0x24c>)
 800a514:	f7f5 fe64 	bl	80001e0 <memchr>
 800a518:	9a04      	ldr	r2, [sp, #16]
 800a51a:	b9d8      	cbnz	r0, 800a554 <_vfiprintf_r+0x12c>
 800a51c:	06d1      	lsls	r1, r2, #27
 800a51e:	bf44      	itt	mi
 800a520:	2320      	movmi	r3, #32
 800a522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a526:	0713      	lsls	r3, r2, #28
 800a528:	bf44      	itt	mi
 800a52a:	232b      	movmi	r3, #43	; 0x2b
 800a52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a530:	f89a 3000 	ldrb.w	r3, [sl]
 800a534:	2b2a      	cmp	r3, #42	; 0x2a
 800a536:	d015      	beq.n	800a564 <_vfiprintf_r+0x13c>
 800a538:	9a07      	ldr	r2, [sp, #28]
 800a53a:	4654      	mov	r4, sl
 800a53c:	2000      	movs	r0, #0
 800a53e:	f04f 0c0a 	mov.w	ip, #10
 800a542:	4621      	mov	r1, r4
 800a544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a548:	3b30      	subs	r3, #48	; 0x30
 800a54a:	2b09      	cmp	r3, #9
 800a54c:	d94e      	bls.n	800a5ec <_vfiprintf_r+0x1c4>
 800a54e:	b1b0      	cbz	r0, 800a57e <_vfiprintf_r+0x156>
 800a550:	9207      	str	r2, [sp, #28]
 800a552:	e014      	b.n	800a57e <_vfiprintf_r+0x156>
 800a554:	eba0 0308 	sub.w	r3, r0, r8
 800a558:	fa09 f303 	lsl.w	r3, r9, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	46a2      	mov	sl, r4
 800a562:	e7d2      	b.n	800a50a <_vfiprintf_r+0xe2>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d19      	adds	r1, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9103      	str	r1, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfbb      	ittet	lt
 800a570:	425b      	neglt	r3, r3
 800a572:	f042 0202 	orrlt.w	r2, r2, #2
 800a576:	9307      	strge	r3, [sp, #28]
 800a578:	9307      	strlt	r3, [sp, #28]
 800a57a:	bfb8      	it	lt
 800a57c:	9204      	strlt	r2, [sp, #16]
 800a57e:	7823      	ldrb	r3, [r4, #0]
 800a580:	2b2e      	cmp	r3, #46	; 0x2e
 800a582:	d10c      	bne.n	800a59e <_vfiprintf_r+0x176>
 800a584:	7863      	ldrb	r3, [r4, #1]
 800a586:	2b2a      	cmp	r3, #42	; 0x2a
 800a588:	d135      	bne.n	800a5f6 <_vfiprintf_r+0x1ce>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	1d1a      	adds	r2, r3, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	9203      	str	r2, [sp, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a59a:	3402      	adds	r4, #2
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a684 <_vfiprintf_r+0x25c>
 800a5a2:	7821      	ldrb	r1, [r4, #0]
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	f7f5 fe1a 	bl	80001e0 <memchr>
 800a5ac:	b140      	cbz	r0, 800a5c0 <_vfiprintf_r+0x198>
 800a5ae:	2340      	movs	r3, #64	; 0x40
 800a5b0:	eba0 000a 	sub.w	r0, r0, sl
 800a5b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	4303      	orrs	r3, r0
 800a5bc:	3401      	adds	r4, #1
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c4:	482c      	ldr	r0, [pc, #176]	; (800a678 <_vfiprintf_r+0x250>)
 800a5c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ca:	2206      	movs	r2, #6
 800a5cc:	f7f5 fe08 	bl	80001e0 <memchr>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d03f      	beq.n	800a654 <_vfiprintf_r+0x22c>
 800a5d4:	4b29      	ldr	r3, [pc, #164]	; (800a67c <_vfiprintf_r+0x254>)
 800a5d6:	bb1b      	cbnz	r3, 800a620 <_vfiprintf_r+0x1f8>
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	3307      	adds	r3, #7
 800a5dc:	f023 0307 	bic.w	r3, r3, #7
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	9303      	str	r3, [sp, #12]
 800a5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e6:	443b      	add	r3, r7
 800a5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ea:	e767      	b.n	800a4bc <_vfiprintf_r+0x94>
 800a5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	e7a5      	b.n	800a542 <_vfiprintf_r+0x11a>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	f04f 0c0a 	mov.w	ip, #10
 800a602:	4620      	mov	r0, r4
 800a604:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a608:	3a30      	subs	r2, #48	; 0x30
 800a60a:	2a09      	cmp	r2, #9
 800a60c:	d903      	bls.n	800a616 <_vfiprintf_r+0x1ee>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0c5      	beq.n	800a59e <_vfiprintf_r+0x176>
 800a612:	9105      	str	r1, [sp, #20]
 800a614:	e7c3      	b.n	800a59e <_vfiprintf_r+0x176>
 800a616:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61a:	4604      	mov	r4, r0
 800a61c:	2301      	movs	r3, #1
 800a61e:	e7f0      	b.n	800a602 <_vfiprintf_r+0x1da>
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	462a      	mov	r2, r5
 800a626:	4b16      	ldr	r3, [pc, #88]	; (800a680 <_vfiprintf_r+0x258>)
 800a628:	a904      	add	r1, sp, #16
 800a62a:	4630      	mov	r0, r6
 800a62c:	f3af 8000 	nop.w
 800a630:	4607      	mov	r7, r0
 800a632:	1c78      	adds	r0, r7, #1
 800a634:	d1d6      	bne.n	800a5e4 <_vfiprintf_r+0x1bc>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07d9      	lsls	r1, r3, #31
 800a63a:	d405      	bmi.n	800a648 <_vfiprintf_r+0x220>
 800a63c:	89ab      	ldrh	r3, [r5, #12]
 800a63e:	059a      	lsls	r2, r3, #22
 800a640:	d402      	bmi.n	800a648 <_vfiprintf_r+0x220>
 800a642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a644:	f7ff fdb7 	bl	800a1b6 <__retarget_lock_release_recursive>
 800a648:	89ab      	ldrh	r3, [r5, #12]
 800a64a:	065b      	lsls	r3, r3, #25
 800a64c:	f53f af12 	bmi.w	800a474 <_vfiprintf_r+0x4c>
 800a650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a652:	e711      	b.n	800a478 <_vfiprintf_r+0x50>
 800a654:	ab03      	add	r3, sp, #12
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	462a      	mov	r2, r5
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <_vfiprintf_r+0x258>)
 800a65c:	a904      	add	r1, sp, #16
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 f880 	bl	800a764 <_printf_i>
 800a664:	e7e4      	b.n	800a630 <_vfiprintf_r+0x208>
 800a666:	bf00      	nop
 800a668:	0800b054 	.word	0x0800b054
 800a66c:	0800b074 	.word	0x0800b074
 800a670:	0800b034 	.word	0x0800b034
 800a674:	0800b094 	.word	0x0800b094
 800a678:	0800b09e 	.word	0x0800b09e
 800a67c:	00000000 	.word	0x00000000
 800a680:	0800a403 	.word	0x0800a403
 800a684:	0800b09a 	.word	0x0800b09a

0800a688 <_printf_common>:
 800a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	4616      	mov	r6, r2
 800a68e:	4699      	mov	r9, r3
 800a690:	688a      	ldr	r2, [r1, #8]
 800a692:	690b      	ldr	r3, [r1, #16]
 800a694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a698:	4293      	cmp	r3, r2
 800a69a:	bfb8      	it	lt
 800a69c:	4613      	movlt	r3, r2
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b10a      	cbz	r2, 800a6ae <_printf_common+0x26>
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	6033      	str	r3, [r6, #0]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	0699      	lsls	r1, r3, #26
 800a6b2:	bf42      	ittt	mi
 800a6b4:	6833      	ldrmi	r3, [r6, #0]
 800a6b6:	3302      	addmi	r3, #2
 800a6b8:	6033      	strmi	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	f015 0506 	ands.w	r5, r5, #6
 800a6c0:	d106      	bne.n	800a6d0 <_printf_common+0x48>
 800a6c2:	f104 0a19 	add.w	sl, r4, #25
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	6832      	ldr	r2, [r6, #0]
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	42ab      	cmp	r3, r5
 800a6ce:	dc26      	bgt.n	800a71e <_printf_common+0x96>
 800a6d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6d4:	1e13      	subs	r3, r2, #0
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	bf18      	it	ne
 800a6da:	2301      	movne	r3, #1
 800a6dc:	0692      	lsls	r2, r2, #26
 800a6de:	d42b      	bmi.n	800a738 <_printf_common+0xb0>
 800a6e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	47c0      	blx	r8
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d01e      	beq.n	800a72c <_printf_common+0xa4>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	68e5      	ldr	r5, [r4, #12]
 800a6f2:	6832      	ldr	r2, [r6, #0]
 800a6f4:	f003 0306 	and.w	r3, r3, #6
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	bf08      	it	eq
 800a6fc:	1aad      	subeq	r5, r5, r2
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	bf0c      	ite	eq
 800a704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a708:	2500      	movne	r5, #0
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bfc4      	itt	gt
 800a70e:	1a9b      	subgt	r3, r3, r2
 800a710:	18ed      	addgt	r5, r5, r3
 800a712:	2600      	movs	r6, #0
 800a714:	341a      	adds	r4, #26
 800a716:	42b5      	cmp	r5, r6
 800a718:	d11a      	bne.n	800a750 <_printf_common+0xc8>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e008      	b.n	800a730 <_printf_common+0xa8>
 800a71e:	2301      	movs	r3, #1
 800a720:	4652      	mov	r2, sl
 800a722:	4649      	mov	r1, r9
 800a724:	4638      	mov	r0, r7
 800a726:	47c0      	blx	r8
 800a728:	3001      	adds	r0, #1
 800a72a:	d103      	bne.n	800a734 <_printf_common+0xac>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	3501      	adds	r5, #1
 800a736:	e7c6      	b.n	800a6c6 <_printf_common+0x3e>
 800a738:	18e1      	adds	r1, r4, r3
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	2030      	movs	r0, #48	; 0x30
 800a73e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a742:	4422      	add	r2, r4
 800a744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74c:	3302      	adds	r3, #2
 800a74e:	e7c7      	b.n	800a6e0 <_printf_common+0x58>
 800a750:	2301      	movs	r3, #1
 800a752:	4622      	mov	r2, r4
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d0e6      	beq.n	800a72c <_printf_common+0xa4>
 800a75e:	3601      	adds	r6, #1
 800a760:	e7d9      	b.n	800a716 <_printf_common+0x8e>
	...

0800a764 <_printf_i>:
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	460c      	mov	r4, r1
 800a76a:	4691      	mov	r9, r2
 800a76c:	7e27      	ldrb	r7, [r4, #24]
 800a76e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a770:	2f78      	cmp	r7, #120	; 0x78
 800a772:	4680      	mov	r8, r0
 800a774:	469a      	mov	sl, r3
 800a776:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a77a:	d807      	bhi.n	800a78c <_printf_i+0x28>
 800a77c:	2f62      	cmp	r7, #98	; 0x62
 800a77e:	d80a      	bhi.n	800a796 <_printf_i+0x32>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f000 80d8 	beq.w	800a936 <_printf_i+0x1d2>
 800a786:	2f58      	cmp	r7, #88	; 0x58
 800a788:	f000 80a3 	beq.w	800a8d2 <_printf_i+0x16e>
 800a78c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a794:	e03a      	b.n	800a80c <_printf_i+0xa8>
 800a796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a79a:	2b15      	cmp	r3, #21
 800a79c:	d8f6      	bhi.n	800a78c <_printf_i+0x28>
 800a79e:	a001      	add	r0, pc, #4	; (adr r0, 800a7a4 <_printf_i+0x40>)
 800a7a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a78d 	.word	0x0800a78d
 800a7b0:	0800a78d 	.word	0x0800a78d
 800a7b4:	0800a78d 	.word	0x0800a78d
 800a7b8:	0800a78d 	.word	0x0800a78d
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a78d 	.word	0x0800a78d
 800a7c4:	0800a78d 	.word	0x0800a78d
 800a7c8:	0800a78d 	.word	0x0800a78d
 800a7cc:	0800a78d 	.word	0x0800a78d
 800a7d0:	0800a91d 	.word	0x0800a91d
 800a7d4:	0800a841 	.word	0x0800a841
 800a7d8:	0800a8ff 	.word	0x0800a8ff
 800a7dc:	0800a78d 	.word	0x0800a78d
 800a7e0:	0800a78d 	.word	0x0800a78d
 800a7e4:	0800a93f 	.word	0x0800a93f
 800a7e8:	0800a78d 	.word	0x0800a78d
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a78d 	.word	0x0800a78d
 800a7f4:	0800a78d 	.word	0x0800a78d
 800a7f8:	0800a907 	.word	0x0800a907
 800a7fc:	680b      	ldr	r3, [r1, #0]
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	600a      	str	r2, [r1, #0]
 800a804:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80c:	2301      	movs	r3, #1
 800a80e:	e0a3      	b.n	800a958 <_printf_i+0x1f4>
 800a810:	6825      	ldr	r5, [r4, #0]
 800a812:	6808      	ldr	r0, [r1, #0]
 800a814:	062e      	lsls	r6, r5, #24
 800a816:	f100 0304 	add.w	r3, r0, #4
 800a81a:	d50a      	bpl.n	800a832 <_printf_i+0xce>
 800a81c:	6805      	ldr	r5, [r0, #0]
 800a81e:	600b      	str	r3, [r1, #0]
 800a820:	2d00      	cmp	r5, #0
 800a822:	da03      	bge.n	800a82c <_printf_i+0xc8>
 800a824:	232d      	movs	r3, #45	; 0x2d
 800a826:	426d      	negs	r5, r5
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82c:	485e      	ldr	r0, [pc, #376]	; (800a9a8 <_printf_i+0x244>)
 800a82e:	230a      	movs	r3, #10
 800a830:	e019      	b.n	800a866 <_printf_i+0x102>
 800a832:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a836:	6805      	ldr	r5, [r0, #0]
 800a838:	600b      	str	r3, [r1, #0]
 800a83a:	bf18      	it	ne
 800a83c:	b22d      	sxthne	r5, r5
 800a83e:	e7ef      	b.n	800a820 <_printf_i+0xbc>
 800a840:	680b      	ldr	r3, [r1, #0]
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	1d18      	adds	r0, r3, #4
 800a846:	6008      	str	r0, [r1, #0]
 800a848:	0628      	lsls	r0, r5, #24
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0xec>
 800a84c:	681d      	ldr	r5, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0xf2>
 800a850:	0669      	lsls	r1, r5, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0xe8>
 800a854:	881d      	ldrh	r5, [r3, #0]
 800a856:	4854      	ldr	r0, [pc, #336]	; (800a9a8 <_printf_i+0x244>)
 800a858:	2f6f      	cmp	r7, #111	; 0x6f
 800a85a:	bf0c      	ite	eq
 800a85c:	2308      	moveq	r3, #8
 800a85e:	230a      	movne	r3, #10
 800a860:	2100      	movs	r1, #0
 800a862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a866:	6866      	ldr	r6, [r4, #4]
 800a868:	60a6      	str	r6, [r4, #8]
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	bfa2      	ittt	ge
 800a86e:	6821      	ldrge	r1, [r4, #0]
 800a870:	f021 0104 	bicge.w	r1, r1, #4
 800a874:	6021      	strge	r1, [r4, #0]
 800a876:	b90d      	cbnz	r5, 800a87c <_printf_i+0x118>
 800a878:	2e00      	cmp	r6, #0
 800a87a:	d04d      	beq.n	800a918 <_printf_i+0x1b4>
 800a87c:	4616      	mov	r6, r2
 800a87e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a882:	fb03 5711 	mls	r7, r3, r1, r5
 800a886:	5dc7      	ldrb	r7, [r0, r7]
 800a888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a88c:	462f      	mov	r7, r5
 800a88e:	42bb      	cmp	r3, r7
 800a890:	460d      	mov	r5, r1
 800a892:	d9f4      	bls.n	800a87e <_printf_i+0x11a>
 800a894:	2b08      	cmp	r3, #8
 800a896:	d10b      	bne.n	800a8b0 <_printf_i+0x14c>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	07df      	lsls	r7, r3, #31
 800a89c:	d508      	bpl.n	800a8b0 <_printf_i+0x14c>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	bfde      	ittt	le
 800a8a6:	2330      	movle	r3, #48	; 0x30
 800a8a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a8b0:	1b92      	subs	r2, r2, r6
 800a8b2:	6122      	str	r2, [r4, #16]
 800a8b4:	f8cd a000 	str.w	sl, [sp]
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	aa03      	add	r2, sp, #12
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff fee2 	bl	800a688 <_printf_common>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d14c      	bne.n	800a962 <_printf_i+0x1fe>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8cc:	b004      	add	sp, #16
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	4835      	ldr	r0, [pc, #212]	; (800a9a8 <_printf_i+0x244>)
 800a8d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	680e      	ldr	r6, [r1, #0]
 800a8dc:	061f      	lsls	r7, r3, #24
 800a8de:	f856 5b04 	ldr.w	r5, [r6], #4
 800a8e2:	600e      	str	r6, [r1, #0]
 800a8e4:	d514      	bpl.n	800a910 <_printf_i+0x1ac>
 800a8e6:	07d9      	lsls	r1, r3, #31
 800a8e8:	bf44      	itt	mi
 800a8ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ee:	6023      	strmi	r3, [r4, #0]
 800a8f0:	b91d      	cbnz	r5, 800a8fa <_printf_i+0x196>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f023 0320 	bic.w	r3, r3, #32
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	2310      	movs	r3, #16
 800a8fc:	e7b0      	b.n	800a860 <_printf_i+0xfc>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	f043 0320 	orr.w	r3, r3, #32
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	2378      	movs	r3, #120	; 0x78
 800a908:	4828      	ldr	r0, [pc, #160]	; (800a9ac <_printf_i+0x248>)
 800a90a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a90e:	e7e3      	b.n	800a8d8 <_printf_i+0x174>
 800a910:	065e      	lsls	r6, r3, #25
 800a912:	bf48      	it	mi
 800a914:	b2ad      	uxthmi	r5, r5
 800a916:	e7e6      	b.n	800a8e6 <_printf_i+0x182>
 800a918:	4616      	mov	r6, r2
 800a91a:	e7bb      	b.n	800a894 <_printf_i+0x130>
 800a91c:	680b      	ldr	r3, [r1, #0]
 800a91e:	6826      	ldr	r6, [r4, #0]
 800a920:	6960      	ldr	r0, [r4, #20]
 800a922:	1d1d      	adds	r5, r3, #4
 800a924:	600d      	str	r5, [r1, #0]
 800a926:	0635      	lsls	r5, r6, #24
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	d501      	bpl.n	800a930 <_printf_i+0x1cc>
 800a92c:	6018      	str	r0, [r3, #0]
 800a92e:	e002      	b.n	800a936 <_printf_i+0x1d2>
 800a930:	0671      	lsls	r1, r6, #25
 800a932:	d5fb      	bpl.n	800a92c <_printf_i+0x1c8>
 800a934:	8018      	strh	r0, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	4616      	mov	r6, r2
 800a93c:	e7ba      	b.n	800a8b4 <_printf_i+0x150>
 800a93e:	680b      	ldr	r3, [r1, #0]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	600a      	str	r2, [r1, #0]
 800a944:	681e      	ldr	r6, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	2100      	movs	r1, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7f5 fc48 	bl	80001e0 <memchr>
 800a950:	b108      	cbz	r0, 800a956 <_printf_i+0x1f2>
 800a952:	1b80      	subs	r0, r0, r6
 800a954:	6060      	str	r0, [r4, #4]
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a960:	e7a8      	b.n	800a8b4 <_printf_i+0x150>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	4632      	mov	r2, r6
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	47d0      	blx	sl
 800a96c:	3001      	adds	r0, #1
 800a96e:	d0ab      	beq.n	800a8c8 <_printf_i+0x164>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	079b      	lsls	r3, r3, #30
 800a974:	d413      	bmi.n	800a99e <_printf_i+0x23a>
 800a976:	68e0      	ldr	r0, [r4, #12]
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	4298      	cmp	r0, r3
 800a97c:	bfb8      	it	lt
 800a97e:	4618      	movlt	r0, r3
 800a980:	e7a4      	b.n	800a8cc <_printf_i+0x168>
 800a982:	2301      	movs	r3, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d09b      	beq.n	800a8c8 <_printf_i+0x164>
 800a990:	3501      	adds	r5, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dcf2      	bgt.n	800a982 <_printf_i+0x21e>
 800a99c:	e7eb      	b.n	800a976 <_printf_i+0x212>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	f104 0619 	add.w	r6, r4, #25
 800a9a4:	e7f5      	b.n	800a992 <_printf_i+0x22e>
 800a9a6:	bf00      	nop
 800a9a8:	0800b0a5 	.word	0x0800b0a5
 800a9ac:	0800b0b6 	.word	0x0800b0b6

0800a9b0 <_sbrk_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d06      	ldr	r5, [pc, #24]	; (800a9cc <_sbrk_r+0x1c>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	f7f6 fd18 	bl	80013f0 <_sbrk>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_sbrk_r+0x1a>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_sbrk_r+0x1a>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	2000342c 	.word	0x2000342c

0800a9d0 <__sread>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d8:	f000 f8a0 	bl	800ab1c <_read_r>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	bfab      	itete	ge
 800a9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9e4:	181b      	addge	r3, r3, r0
 800a9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9ea:	bfac      	ite	ge
 800a9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ee:	81a3      	strhlt	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__swrite>:
 800a9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f6:	461f      	mov	r7, r3
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	05db      	lsls	r3, r3, #23
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	4616      	mov	r6, r2
 800aa02:	d505      	bpl.n	800aa10 <__swrite+0x1e>
 800aa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa08:	2302      	movs	r3, #2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f000 f868 	bl	800aae0 <_lseek_r>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	463b      	mov	r3, r7
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa26:	f000 b817 	b.w	800aa58 <_write_r>

0800aa2a <__sseek>:
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa32:	f000 f855 	bl	800aae0 <_lseek_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	bf15      	itete	ne
 800aa3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa46:	81a3      	strheq	r3, [r4, #12]
 800aa48:	bf18      	it	ne
 800aa4a:	81a3      	strhne	r3, [r4, #12]
 800aa4c:	bd10      	pop	{r4, pc}

0800aa4e <__sclose>:
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 b813 	b.w	800aa7c <_close_r>
	...

0800aa58 <_write_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	; (800aa78 <_write_r+0x20>)
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4611      	mov	r1, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	602a      	str	r2, [r5, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f7f6 f8b4 	bl	8000bd4 <_write>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_write_r+0x1e>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_write_r+0x1e>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	2000342c 	.word	0x2000342c

0800aa7c <_close_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d06      	ldr	r5, [pc, #24]	; (800aa98 <_close_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f6 fc7d 	bl	8001386 <_close>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_close_r+0x1a>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_close_r+0x1a>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	2000342c 	.word	0x2000342c

0800aa9c <_fstat_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	; (800aabc <_fstat_r+0x20>)
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	602b      	str	r3, [r5, #0]
 800aaaa:	f7f6 fc78 	bl	800139e <_fstat>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	d102      	bne.n	800aab8 <_fstat_r+0x1c>
 800aab2:	682b      	ldr	r3, [r5, #0]
 800aab4:	b103      	cbz	r3, 800aab8 <_fstat_r+0x1c>
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	bd38      	pop	{r3, r4, r5, pc}
 800aaba:	bf00      	nop
 800aabc:	2000342c 	.word	0x2000342c

0800aac0 <_isatty_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	; (800aadc <_isatty_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f6 fc77 	bl	80013be <_isatty>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_isatty_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_isatty_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	2000342c 	.word	0x2000342c

0800aae0 <_lseek_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_lseek_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f6 fc70 	bl	80013d4 <_lseek>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_lseek_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_lseek_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	2000342c 	.word	0x2000342c

0800ab04 <__malloc_lock>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__malloc_lock+0x8>)
 800ab06:	f7ff bb55 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	20003424 	.word	0x20003424

0800ab10 <__malloc_unlock>:
 800ab10:	4801      	ldr	r0, [pc, #4]	; (800ab18 <__malloc_unlock+0x8>)
 800ab12:	f7ff bb50 	b.w	800a1b6 <__retarget_lock_release_recursive>
 800ab16:	bf00      	nop
 800ab18:	20003424 	.word	0x20003424

0800ab1c <_read_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d07      	ldr	r5, [pc, #28]	; (800ab3c <_read_r+0x20>)
 800ab20:	4604      	mov	r4, r0
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	2200      	movs	r2, #0
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f7f6 fc0e 	bl	800134c <_read>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_read_r+0x1e>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_read_r+0x1e>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	2000342c 	.word	0x2000342c

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr
